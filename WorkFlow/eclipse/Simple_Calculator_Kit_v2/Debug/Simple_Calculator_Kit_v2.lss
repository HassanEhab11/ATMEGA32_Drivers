
Simple_Calculator_Kit_v2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000024b2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000134  00800060  000024b2  00002526  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001ad0  00000000  00000000  0000265c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000e05  00000000  00000000  0000412c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001c0  00000000  00000000  00004f31  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000213  00000000  00000000  000050f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002495  00000000  00000000  00005304  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001412  00000000  00000000  00007799  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001209  00000000  00000000  00008bab  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e0  00000000  00000000  00009db4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002da  00000000  00000000  00009f94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000996  00000000  00000000  0000a26e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000ac04  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 eb       	ldi	r30, 0xB2	; 178
      68:	f4 e2       	ldi	r31, 0x24	; 36
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 39       	cpi	r26, 0x94	; 148
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 79 10 	call	0x20f2	; 0x20f2 <main>
      7a:	0c 94 57 12 	jmp	0x24ae	; 0x24ae <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 2f 04 	call	0x85e	; 0x85e <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 2f 04 	call	0x85e	; 0x85e <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 20 12 	jmp	0x2440	; 0x2440 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a4 e7       	ldi	r26, 0x74	; 116
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 3c 12 	jmp	0x2478	; 0x2478 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 2c 12 	jmp	0x2458	; 0x2458 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 20 06 	call	0xc40	; 0xc40 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 20 06 	call	0xc40	; 0xc40 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 4b 05 	call	0xa96	; 0xa96 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 48 12 	jmp	0x2490	; 0x2490 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 2c 12 	jmp	0x2458	; 0x2458 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 20 06 	call	0xc40	; 0xc40 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 20 06 	call	0xc40	; 0xc40 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 4b 05 	call	0xa96	; 0xa96 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 48 12 	jmp	0x2490	; 0x2490 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 20 12 	jmp	0x2440	; 0x2440 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 20 06 	call	0xc40	; 0xc40 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 20 06 	call	0xc40	; 0xc40 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	84 e7       	ldi	r24, 0x74	; 116
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 4b 05 	call	0xa96	; 0xa96 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 3c 12 	jmp	0x2478	; 0x2478 <__epilogue_restores__>

00000622 <__eqsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 2c 12 	jmp	0x2458	; 0x2458 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 20 06 	call	0xc40	; 0xc40 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 20 06 	call	0xc40	; 0xc40 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__eqsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__eqsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 98 06 	call	0xd30	; 0xd30 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__eqsf2+0x58>
     678:	81 e0       	ldi	r24, 0x01	; 1
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 48 12 	jmp	0x2490	; 0x2490 <__epilogue_restores__+0x18>

00000682 <__gtsf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 2c 12 	jmp	0x2458	; 0x2458 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 20 06 	call	0xc40	; 0xc40 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 20 06 	call	0xc40	; 0xc40 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gtsf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gtsf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 98 06 	call	0xd30	; 0xd30 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gtsf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 48 12 	jmp	0x2490	; 0x2490 <__epilogue_restores__+0x18>

000006e2 <__gesf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 2c 12 	jmp	0x2458	; 0x2458 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 20 06 	call	0xc40	; 0xc40 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 20 06 	call	0xc40	; 0xc40 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__gesf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__gesf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 98 06 	call	0xd30	; 0xd30 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__gesf2+0x58>
     738:	8f ef       	ldi	r24, 0xFF	; 255
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 48 12 	jmp	0x2490	; 0x2490 <__epilogue_restores__+0x18>

00000742 <__ltsf2>:
     742:	a8 e1       	ldi	r26, 0x18	; 24
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 2c 12 	jmp	0x2458	; 0x2458 <__prologue_saves__+0x18>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	2d 83       	std	Y+5, r18	; 0x05
     758:	3e 83       	std	Y+6, r19	; 0x06
     75a:	4f 83       	std	Y+7, r20	; 0x07
     75c:	58 87       	std	Y+8, r21	; 0x08
     75e:	89 e0       	ldi	r24, 0x09	; 9
     760:	e8 2e       	mov	r14, r24
     762:	f1 2c       	mov	r15, r1
     764:	ec 0e       	add	r14, r28
     766:	fd 1e       	adc	r15, r29
     768:	ce 01       	movw	r24, r28
     76a:	01 96       	adiw	r24, 0x01	; 1
     76c:	b7 01       	movw	r22, r14
     76e:	0e 94 20 06 	call	0xc40	; 0xc40 <__unpack_f>
     772:	8e 01       	movw	r16, r28
     774:	0f 5e       	subi	r16, 0xEF	; 239
     776:	1f 4f       	sbci	r17, 0xFF	; 255
     778:	ce 01       	movw	r24, r28
     77a:	05 96       	adiw	r24, 0x05	; 5
     77c:	b8 01       	movw	r22, r16
     77e:	0e 94 20 06 	call	0xc40	; 0xc40 <__unpack_f>
     782:	89 85       	ldd	r24, Y+9	; 0x09
     784:	82 30       	cpi	r24, 0x02	; 2
     786:	40 f0       	brcs	.+16     	; 0x798 <__ltsf2+0x56>
     788:	89 89       	ldd	r24, Y+17	; 0x11
     78a:	82 30       	cpi	r24, 0x02	; 2
     78c:	28 f0       	brcs	.+10     	; 0x798 <__ltsf2+0x56>
     78e:	c7 01       	movw	r24, r14
     790:	b8 01       	movw	r22, r16
     792:	0e 94 98 06 	call	0xd30	; 0xd30 <__fpcmp_parts_f>
     796:	01 c0       	rjmp	.+2      	; 0x79a <__ltsf2+0x58>
     798:	81 e0       	ldi	r24, 0x01	; 1
     79a:	68 96       	adiw	r28, 0x18	; 24
     79c:	e6 e0       	ldi	r30, 0x06	; 6
     79e:	0c 94 48 12 	jmp	0x2490	; 0x2490 <__epilogue_restores__+0x18>

000007a2 <__floatsisf>:
     7a2:	a8 e0       	ldi	r26, 0x08	; 8
     7a4:	b0 e0       	ldi	r27, 0x00	; 0
     7a6:	e7 ed       	ldi	r30, 0xD7	; 215
     7a8:	f3 e0       	ldi	r31, 0x03	; 3
     7aa:	0c 94 29 12 	jmp	0x2452	; 0x2452 <__prologue_saves__+0x12>
     7ae:	9b 01       	movw	r18, r22
     7b0:	ac 01       	movw	r20, r24
     7b2:	83 e0       	ldi	r24, 0x03	; 3
     7b4:	89 83       	std	Y+1, r24	; 0x01
     7b6:	da 01       	movw	r26, r20
     7b8:	c9 01       	movw	r24, r18
     7ba:	88 27       	eor	r24, r24
     7bc:	b7 fd       	sbrc	r27, 7
     7be:	83 95       	inc	r24
     7c0:	99 27       	eor	r25, r25
     7c2:	aa 27       	eor	r26, r26
     7c4:	bb 27       	eor	r27, r27
     7c6:	b8 2e       	mov	r11, r24
     7c8:	21 15       	cp	r18, r1
     7ca:	31 05       	cpc	r19, r1
     7cc:	41 05       	cpc	r20, r1
     7ce:	51 05       	cpc	r21, r1
     7d0:	19 f4       	brne	.+6      	; 0x7d8 <__floatsisf+0x36>
     7d2:	82 e0       	ldi	r24, 0x02	; 2
     7d4:	89 83       	std	Y+1, r24	; 0x01
     7d6:	3a c0       	rjmp	.+116    	; 0x84c <__floatsisf+0xaa>
     7d8:	88 23       	and	r24, r24
     7da:	a9 f0       	breq	.+42     	; 0x806 <__floatsisf+0x64>
     7dc:	20 30       	cpi	r18, 0x00	; 0
     7de:	80 e0       	ldi	r24, 0x00	; 0
     7e0:	38 07       	cpc	r19, r24
     7e2:	80 e0       	ldi	r24, 0x00	; 0
     7e4:	48 07       	cpc	r20, r24
     7e6:	80 e8       	ldi	r24, 0x80	; 128
     7e8:	58 07       	cpc	r21, r24
     7ea:	29 f4       	brne	.+10     	; 0x7f6 <__floatsisf+0x54>
     7ec:	60 e0       	ldi	r22, 0x00	; 0
     7ee:	70 e0       	ldi	r23, 0x00	; 0
     7f0:	80 e0       	ldi	r24, 0x00	; 0
     7f2:	9f ec       	ldi	r25, 0xCF	; 207
     7f4:	30 c0       	rjmp	.+96     	; 0x856 <__floatsisf+0xb4>
     7f6:	ee 24       	eor	r14, r14
     7f8:	ff 24       	eor	r15, r15
     7fa:	87 01       	movw	r16, r14
     7fc:	e2 1a       	sub	r14, r18
     7fe:	f3 0a       	sbc	r15, r19
     800:	04 0b       	sbc	r16, r20
     802:	15 0b       	sbc	r17, r21
     804:	02 c0       	rjmp	.+4      	; 0x80a <__floatsisf+0x68>
     806:	79 01       	movw	r14, r18
     808:	8a 01       	movw	r16, r20
     80a:	8e e1       	ldi	r24, 0x1E	; 30
     80c:	c8 2e       	mov	r12, r24
     80e:	d1 2c       	mov	r13, r1
     810:	dc 82       	std	Y+4, r13	; 0x04
     812:	cb 82       	std	Y+3, r12	; 0x03
     814:	ed 82       	std	Y+5, r14	; 0x05
     816:	fe 82       	std	Y+6, r15	; 0x06
     818:	0f 83       	std	Y+7, r16	; 0x07
     81a:	18 87       	std	Y+8, r17	; 0x08
     81c:	c8 01       	movw	r24, r16
     81e:	b7 01       	movw	r22, r14
     820:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <__clzsi2>
     824:	01 97       	sbiw	r24, 0x01	; 1
     826:	18 16       	cp	r1, r24
     828:	19 06       	cpc	r1, r25
     82a:	84 f4       	brge	.+32     	; 0x84c <__floatsisf+0xaa>
     82c:	08 2e       	mov	r0, r24
     82e:	04 c0       	rjmp	.+8      	; 0x838 <__floatsisf+0x96>
     830:	ee 0c       	add	r14, r14
     832:	ff 1c       	adc	r15, r15
     834:	00 1f       	adc	r16, r16
     836:	11 1f       	adc	r17, r17
     838:	0a 94       	dec	r0
     83a:	d2 f7       	brpl	.-12     	; 0x830 <__floatsisf+0x8e>
     83c:	ed 82       	std	Y+5, r14	; 0x05
     83e:	fe 82       	std	Y+6, r15	; 0x06
     840:	0f 83       	std	Y+7, r16	; 0x07
     842:	18 87       	std	Y+8, r17	; 0x08
     844:	c8 1a       	sub	r12, r24
     846:	d9 0a       	sbc	r13, r25
     848:	dc 82       	std	Y+4, r13	; 0x04
     84a:	cb 82       	std	Y+3, r12	; 0x03
     84c:	ba 82       	std	Y+2, r11	; 0x02
     84e:	ce 01       	movw	r24, r28
     850:	01 96       	adiw	r24, 0x01	; 1
     852:	0e 94 4b 05 	call	0xa96	; 0xa96 <__pack_f>
     856:	28 96       	adiw	r28, 0x08	; 8
     858:	e9 e0       	ldi	r30, 0x09	; 9
     85a:	0c 94 45 12 	jmp	0x248a	; 0x248a <__epilogue_restores__+0x12>

0000085e <__fixsfsi>:
     85e:	ac e0       	ldi	r26, 0x0C	; 12
     860:	b0 e0       	ldi	r27, 0x00	; 0
     862:	e5 e3       	ldi	r30, 0x35	; 53
     864:	f4 e0       	ldi	r31, 0x04	; 4
     866:	0c 94 30 12 	jmp	0x2460	; 0x2460 <__prologue_saves__+0x20>
     86a:	69 83       	std	Y+1, r22	; 0x01
     86c:	7a 83       	std	Y+2, r23	; 0x02
     86e:	8b 83       	std	Y+3, r24	; 0x03
     870:	9c 83       	std	Y+4, r25	; 0x04
     872:	ce 01       	movw	r24, r28
     874:	01 96       	adiw	r24, 0x01	; 1
     876:	be 01       	movw	r22, r28
     878:	6b 5f       	subi	r22, 0xFB	; 251
     87a:	7f 4f       	sbci	r23, 0xFF	; 255
     87c:	0e 94 20 06 	call	0xc40	; 0xc40 <__unpack_f>
     880:	8d 81       	ldd	r24, Y+5	; 0x05
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	61 f1       	breq	.+88     	; 0x8de <__stack+0x7f>
     886:	82 30       	cpi	r24, 0x02	; 2
     888:	50 f1       	brcs	.+84     	; 0x8de <__stack+0x7f>
     88a:	84 30       	cpi	r24, 0x04	; 4
     88c:	21 f4       	brne	.+8      	; 0x896 <__stack+0x37>
     88e:	8e 81       	ldd	r24, Y+6	; 0x06
     890:	88 23       	and	r24, r24
     892:	51 f1       	breq	.+84     	; 0x8e8 <__stack+0x89>
     894:	2e c0       	rjmp	.+92     	; 0x8f2 <__stack+0x93>
     896:	2f 81       	ldd	r18, Y+7	; 0x07
     898:	38 85       	ldd	r19, Y+8	; 0x08
     89a:	37 fd       	sbrc	r19, 7
     89c:	20 c0       	rjmp	.+64     	; 0x8de <__stack+0x7f>
     89e:	6e 81       	ldd	r22, Y+6	; 0x06
     8a0:	2f 31       	cpi	r18, 0x1F	; 31
     8a2:	31 05       	cpc	r19, r1
     8a4:	1c f0       	brlt	.+6      	; 0x8ac <__stack+0x4d>
     8a6:	66 23       	and	r22, r22
     8a8:	f9 f0       	breq	.+62     	; 0x8e8 <__stack+0x89>
     8aa:	23 c0       	rjmp	.+70     	; 0x8f2 <__stack+0x93>
     8ac:	8e e1       	ldi	r24, 0x1E	; 30
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	82 1b       	sub	r24, r18
     8b2:	93 0b       	sbc	r25, r19
     8b4:	29 85       	ldd	r18, Y+9	; 0x09
     8b6:	3a 85       	ldd	r19, Y+10	; 0x0a
     8b8:	4b 85       	ldd	r20, Y+11	; 0x0b
     8ba:	5c 85       	ldd	r21, Y+12	; 0x0c
     8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <__stack+0x67>
     8be:	56 95       	lsr	r21
     8c0:	47 95       	ror	r20
     8c2:	37 95       	ror	r19
     8c4:	27 95       	ror	r18
     8c6:	8a 95       	dec	r24
     8c8:	d2 f7       	brpl	.-12     	; 0x8be <__stack+0x5f>
     8ca:	66 23       	and	r22, r22
     8cc:	b1 f0       	breq	.+44     	; 0x8fa <__stack+0x9b>
     8ce:	50 95       	com	r21
     8d0:	40 95       	com	r20
     8d2:	30 95       	com	r19
     8d4:	21 95       	neg	r18
     8d6:	3f 4f       	sbci	r19, 0xFF	; 255
     8d8:	4f 4f       	sbci	r20, 0xFF	; 255
     8da:	5f 4f       	sbci	r21, 0xFF	; 255
     8dc:	0e c0       	rjmp	.+28     	; 0x8fa <__stack+0x9b>
     8de:	20 e0       	ldi	r18, 0x00	; 0
     8e0:	30 e0       	ldi	r19, 0x00	; 0
     8e2:	40 e0       	ldi	r20, 0x00	; 0
     8e4:	50 e0       	ldi	r21, 0x00	; 0
     8e6:	09 c0       	rjmp	.+18     	; 0x8fa <__stack+0x9b>
     8e8:	2f ef       	ldi	r18, 0xFF	; 255
     8ea:	3f ef       	ldi	r19, 0xFF	; 255
     8ec:	4f ef       	ldi	r20, 0xFF	; 255
     8ee:	5f e7       	ldi	r21, 0x7F	; 127
     8f0:	04 c0       	rjmp	.+8      	; 0x8fa <__stack+0x9b>
     8f2:	20 e0       	ldi	r18, 0x00	; 0
     8f4:	30 e0       	ldi	r19, 0x00	; 0
     8f6:	40 e0       	ldi	r20, 0x00	; 0
     8f8:	50 e8       	ldi	r21, 0x80	; 128
     8fa:	b9 01       	movw	r22, r18
     8fc:	ca 01       	movw	r24, r20
     8fe:	2c 96       	adiw	r28, 0x0c	; 12
     900:	e2 e0       	ldi	r30, 0x02	; 2
     902:	0c 94 4c 12 	jmp	0x2498	; 0x2498 <__epilogue_restores__+0x20>

00000906 <__floatunsisf>:
     906:	a8 e0       	ldi	r26, 0x08	; 8
     908:	b0 e0       	ldi	r27, 0x00	; 0
     90a:	e9 e8       	ldi	r30, 0x89	; 137
     90c:	f4 e0       	ldi	r31, 0x04	; 4
     90e:	0c 94 28 12 	jmp	0x2450	; 0x2450 <__prologue_saves__+0x10>
     912:	7b 01       	movw	r14, r22
     914:	8c 01       	movw	r16, r24
     916:	61 15       	cp	r22, r1
     918:	71 05       	cpc	r23, r1
     91a:	81 05       	cpc	r24, r1
     91c:	91 05       	cpc	r25, r1
     91e:	19 f4       	brne	.+6      	; 0x926 <__floatunsisf+0x20>
     920:	82 e0       	ldi	r24, 0x02	; 2
     922:	89 83       	std	Y+1, r24	; 0x01
     924:	60 c0       	rjmp	.+192    	; 0x9e6 <__floatunsisf+0xe0>
     926:	83 e0       	ldi	r24, 0x03	; 3
     928:	89 83       	std	Y+1, r24	; 0x01
     92a:	8e e1       	ldi	r24, 0x1E	; 30
     92c:	c8 2e       	mov	r12, r24
     92e:	d1 2c       	mov	r13, r1
     930:	dc 82       	std	Y+4, r13	; 0x04
     932:	cb 82       	std	Y+3, r12	; 0x03
     934:	ed 82       	std	Y+5, r14	; 0x05
     936:	fe 82       	std	Y+6, r15	; 0x06
     938:	0f 83       	std	Y+7, r16	; 0x07
     93a:	18 87       	std	Y+8, r17	; 0x08
     93c:	c8 01       	movw	r24, r16
     93e:	b7 01       	movw	r22, r14
     940:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <__clzsi2>
     944:	fc 01       	movw	r30, r24
     946:	31 97       	sbiw	r30, 0x01	; 1
     948:	f7 ff       	sbrs	r31, 7
     94a:	3b c0       	rjmp	.+118    	; 0x9c2 <__floatunsisf+0xbc>
     94c:	22 27       	eor	r18, r18
     94e:	33 27       	eor	r19, r19
     950:	2e 1b       	sub	r18, r30
     952:	3f 0b       	sbc	r19, r31
     954:	57 01       	movw	r10, r14
     956:	68 01       	movw	r12, r16
     958:	02 2e       	mov	r0, r18
     95a:	04 c0       	rjmp	.+8      	; 0x964 <__floatunsisf+0x5e>
     95c:	d6 94       	lsr	r13
     95e:	c7 94       	ror	r12
     960:	b7 94       	ror	r11
     962:	a7 94       	ror	r10
     964:	0a 94       	dec	r0
     966:	d2 f7       	brpl	.-12     	; 0x95c <__floatunsisf+0x56>
     968:	40 e0       	ldi	r20, 0x00	; 0
     96a:	50 e0       	ldi	r21, 0x00	; 0
     96c:	60 e0       	ldi	r22, 0x00	; 0
     96e:	70 e0       	ldi	r23, 0x00	; 0
     970:	81 e0       	ldi	r24, 0x01	; 1
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	a0 e0       	ldi	r26, 0x00	; 0
     976:	b0 e0       	ldi	r27, 0x00	; 0
     978:	04 c0       	rjmp	.+8      	; 0x982 <__floatunsisf+0x7c>
     97a:	88 0f       	add	r24, r24
     97c:	99 1f       	adc	r25, r25
     97e:	aa 1f       	adc	r26, r26
     980:	bb 1f       	adc	r27, r27
     982:	2a 95       	dec	r18
     984:	d2 f7       	brpl	.-12     	; 0x97a <__floatunsisf+0x74>
     986:	01 97       	sbiw	r24, 0x01	; 1
     988:	a1 09       	sbc	r26, r1
     98a:	b1 09       	sbc	r27, r1
     98c:	8e 21       	and	r24, r14
     98e:	9f 21       	and	r25, r15
     990:	a0 23       	and	r26, r16
     992:	b1 23       	and	r27, r17
     994:	00 97       	sbiw	r24, 0x00	; 0
     996:	a1 05       	cpc	r26, r1
     998:	b1 05       	cpc	r27, r1
     99a:	21 f0       	breq	.+8      	; 0x9a4 <__floatunsisf+0x9e>
     99c:	41 e0       	ldi	r20, 0x01	; 1
     99e:	50 e0       	ldi	r21, 0x00	; 0
     9a0:	60 e0       	ldi	r22, 0x00	; 0
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	4a 29       	or	r20, r10
     9a6:	5b 29       	or	r21, r11
     9a8:	6c 29       	or	r22, r12
     9aa:	7d 29       	or	r23, r13
     9ac:	4d 83       	std	Y+5, r20	; 0x05
     9ae:	5e 83       	std	Y+6, r21	; 0x06
     9b0:	6f 83       	std	Y+7, r22	; 0x07
     9b2:	78 87       	std	Y+8, r23	; 0x08
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	8e 1b       	sub	r24, r30
     9ba:	9f 0b       	sbc	r25, r31
     9bc:	9c 83       	std	Y+4, r25	; 0x04
     9be:	8b 83       	std	Y+3, r24	; 0x03
     9c0:	12 c0       	rjmp	.+36     	; 0x9e6 <__floatunsisf+0xe0>
     9c2:	30 97       	sbiw	r30, 0x00	; 0
     9c4:	81 f0       	breq	.+32     	; 0x9e6 <__floatunsisf+0xe0>
     9c6:	0e 2e       	mov	r0, r30
     9c8:	04 c0       	rjmp	.+8      	; 0x9d2 <__floatunsisf+0xcc>
     9ca:	ee 0c       	add	r14, r14
     9cc:	ff 1c       	adc	r15, r15
     9ce:	00 1f       	adc	r16, r16
     9d0:	11 1f       	adc	r17, r17
     9d2:	0a 94       	dec	r0
     9d4:	d2 f7       	brpl	.-12     	; 0x9ca <__floatunsisf+0xc4>
     9d6:	ed 82       	std	Y+5, r14	; 0x05
     9d8:	fe 82       	std	Y+6, r15	; 0x06
     9da:	0f 83       	std	Y+7, r16	; 0x07
     9dc:	18 87       	std	Y+8, r17	; 0x08
     9de:	ce 1a       	sub	r12, r30
     9e0:	df 0a       	sbc	r13, r31
     9e2:	dc 82       	std	Y+4, r13	; 0x04
     9e4:	cb 82       	std	Y+3, r12	; 0x03
     9e6:	1a 82       	std	Y+2, r1	; 0x02
     9e8:	ce 01       	movw	r24, r28
     9ea:	01 96       	adiw	r24, 0x01	; 1
     9ec:	0e 94 4b 05 	call	0xa96	; 0xa96 <__pack_f>
     9f0:	28 96       	adiw	r28, 0x08	; 8
     9f2:	ea e0       	ldi	r30, 0x0A	; 10
     9f4:	0c 94 44 12 	jmp	0x2488	; 0x2488 <__epilogue_restores__+0x10>

000009f8 <__clzsi2>:
     9f8:	ef 92       	push	r14
     9fa:	ff 92       	push	r15
     9fc:	0f 93       	push	r16
     9fe:	1f 93       	push	r17
     a00:	7b 01       	movw	r14, r22
     a02:	8c 01       	movw	r16, r24
     a04:	80 e0       	ldi	r24, 0x00	; 0
     a06:	e8 16       	cp	r14, r24
     a08:	80 e0       	ldi	r24, 0x00	; 0
     a0a:	f8 06       	cpc	r15, r24
     a0c:	81 e0       	ldi	r24, 0x01	; 1
     a0e:	08 07       	cpc	r16, r24
     a10:	80 e0       	ldi	r24, 0x00	; 0
     a12:	18 07       	cpc	r17, r24
     a14:	88 f4       	brcc	.+34     	; 0xa38 <__clzsi2+0x40>
     a16:	8f ef       	ldi	r24, 0xFF	; 255
     a18:	e8 16       	cp	r14, r24
     a1a:	f1 04       	cpc	r15, r1
     a1c:	01 05       	cpc	r16, r1
     a1e:	11 05       	cpc	r17, r1
     a20:	31 f0       	breq	.+12     	; 0xa2e <__clzsi2+0x36>
     a22:	28 f0       	brcs	.+10     	; 0xa2e <__clzsi2+0x36>
     a24:	88 e0       	ldi	r24, 0x08	; 8
     a26:	90 e0       	ldi	r25, 0x00	; 0
     a28:	a0 e0       	ldi	r26, 0x00	; 0
     a2a:	b0 e0       	ldi	r27, 0x00	; 0
     a2c:	17 c0       	rjmp	.+46     	; 0xa5c <__clzsi2+0x64>
     a2e:	80 e0       	ldi	r24, 0x00	; 0
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	a0 e0       	ldi	r26, 0x00	; 0
     a34:	b0 e0       	ldi	r27, 0x00	; 0
     a36:	12 c0       	rjmp	.+36     	; 0xa5c <__clzsi2+0x64>
     a38:	80 e0       	ldi	r24, 0x00	; 0
     a3a:	e8 16       	cp	r14, r24
     a3c:	80 e0       	ldi	r24, 0x00	; 0
     a3e:	f8 06       	cpc	r15, r24
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	08 07       	cpc	r16, r24
     a44:	81 e0       	ldi	r24, 0x01	; 1
     a46:	18 07       	cpc	r17, r24
     a48:	28 f0       	brcs	.+10     	; 0xa54 <__clzsi2+0x5c>
     a4a:	88 e1       	ldi	r24, 0x18	; 24
     a4c:	90 e0       	ldi	r25, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	b0 e0       	ldi	r27, 0x00	; 0
     a52:	04 c0       	rjmp	.+8      	; 0xa5c <__clzsi2+0x64>
     a54:	80 e1       	ldi	r24, 0x10	; 16
     a56:	90 e0       	ldi	r25, 0x00	; 0
     a58:	a0 e0       	ldi	r26, 0x00	; 0
     a5a:	b0 e0       	ldi	r27, 0x00	; 0
     a5c:	20 e2       	ldi	r18, 0x20	; 32
     a5e:	30 e0       	ldi	r19, 0x00	; 0
     a60:	40 e0       	ldi	r20, 0x00	; 0
     a62:	50 e0       	ldi	r21, 0x00	; 0
     a64:	28 1b       	sub	r18, r24
     a66:	39 0b       	sbc	r19, r25
     a68:	4a 0b       	sbc	r20, r26
     a6a:	5b 0b       	sbc	r21, r27
     a6c:	04 c0       	rjmp	.+8      	; 0xa76 <__clzsi2+0x7e>
     a6e:	16 95       	lsr	r17
     a70:	07 95       	ror	r16
     a72:	f7 94       	ror	r15
     a74:	e7 94       	ror	r14
     a76:	8a 95       	dec	r24
     a78:	d2 f7       	brpl	.-12     	; 0xa6e <__clzsi2+0x76>
     a7a:	f7 01       	movw	r30, r14
     a7c:	e4 58       	subi	r30, 0x84	; 132
     a7e:	ff 4f       	sbci	r31, 0xFF	; 255
     a80:	80 81       	ld	r24, Z
     a82:	28 1b       	sub	r18, r24
     a84:	31 09       	sbc	r19, r1
     a86:	41 09       	sbc	r20, r1
     a88:	51 09       	sbc	r21, r1
     a8a:	c9 01       	movw	r24, r18
     a8c:	1f 91       	pop	r17
     a8e:	0f 91       	pop	r16
     a90:	ff 90       	pop	r15
     a92:	ef 90       	pop	r14
     a94:	08 95       	ret

00000a96 <__pack_f>:
     a96:	df 92       	push	r13
     a98:	ef 92       	push	r14
     a9a:	ff 92       	push	r15
     a9c:	0f 93       	push	r16
     a9e:	1f 93       	push	r17
     aa0:	fc 01       	movw	r30, r24
     aa2:	e4 80       	ldd	r14, Z+4	; 0x04
     aa4:	f5 80       	ldd	r15, Z+5	; 0x05
     aa6:	06 81       	ldd	r16, Z+6	; 0x06
     aa8:	17 81       	ldd	r17, Z+7	; 0x07
     aaa:	d1 80       	ldd	r13, Z+1	; 0x01
     aac:	80 81       	ld	r24, Z
     aae:	82 30       	cpi	r24, 0x02	; 2
     ab0:	48 f4       	brcc	.+18     	; 0xac4 <__pack_f+0x2e>
     ab2:	80 e0       	ldi	r24, 0x00	; 0
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	a0 e1       	ldi	r26, 0x10	; 16
     ab8:	b0 e0       	ldi	r27, 0x00	; 0
     aba:	e8 2a       	or	r14, r24
     abc:	f9 2a       	or	r15, r25
     abe:	0a 2b       	or	r16, r26
     ac0:	1b 2b       	or	r17, r27
     ac2:	a5 c0       	rjmp	.+330    	; 0xc0e <__pack_f+0x178>
     ac4:	84 30       	cpi	r24, 0x04	; 4
     ac6:	09 f4       	brne	.+2      	; 0xaca <__pack_f+0x34>
     ac8:	9f c0       	rjmp	.+318    	; 0xc08 <__pack_f+0x172>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	21 f4       	brne	.+8      	; 0xad6 <__pack_f+0x40>
     ace:	ee 24       	eor	r14, r14
     ad0:	ff 24       	eor	r15, r15
     ad2:	87 01       	movw	r16, r14
     ad4:	05 c0       	rjmp	.+10     	; 0xae0 <__pack_f+0x4a>
     ad6:	e1 14       	cp	r14, r1
     ad8:	f1 04       	cpc	r15, r1
     ada:	01 05       	cpc	r16, r1
     adc:	11 05       	cpc	r17, r1
     ade:	19 f4       	brne	.+6      	; 0xae6 <__pack_f+0x50>
     ae0:	e0 e0       	ldi	r30, 0x00	; 0
     ae2:	f0 e0       	ldi	r31, 0x00	; 0
     ae4:	96 c0       	rjmp	.+300    	; 0xc12 <__pack_f+0x17c>
     ae6:	62 81       	ldd	r22, Z+2	; 0x02
     ae8:	73 81       	ldd	r23, Z+3	; 0x03
     aea:	9f ef       	ldi	r25, 0xFF	; 255
     aec:	62 38       	cpi	r22, 0x82	; 130
     aee:	79 07       	cpc	r23, r25
     af0:	0c f0       	brlt	.+2      	; 0xaf4 <__pack_f+0x5e>
     af2:	5b c0       	rjmp	.+182    	; 0xbaa <__pack_f+0x114>
     af4:	22 e8       	ldi	r18, 0x82	; 130
     af6:	3f ef       	ldi	r19, 0xFF	; 255
     af8:	26 1b       	sub	r18, r22
     afa:	37 0b       	sbc	r19, r23
     afc:	2a 31       	cpi	r18, 0x1A	; 26
     afe:	31 05       	cpc	r19, r1
     b00:	2c f0       	brlt	.+10     	; 0xb0c <__pack_f+0x76>
     b02:	20 e0       	ldi	r18, 0x00	; 0
     b04:	30 e0       	ldi	r19, 0x00	; 0
     b06:	40 e0       	ldi	r20, 0x00	; 0
     b08:	50 e0       	ldi	r21, 0x00	; 0
     b0a:	2a c0       	rjmp	.+84     	; 0xb60 <__pack_f+0xca>
     b0c:	b8 01       	movw	r22, r16
     b0e:	a7 01       	movw	r20, r14
     b10:	02 2e       	mov	r0, r18
     b12:	04 c0       	rjmp	.+8      	; 0xb1c <__pack_f+0x86>
     b14:	76 95       	lsr	r23
     b16:	67 95       	ror	r22
     b18:	57 95       	ror	r21
     b1a:	47 95       	ror	r20
     b1c:	0a 94       	dec	r0
     b1e:	d2 f7       	brpl	.-12     	; 0xb14 <__pack_f+0x7e>
     b20:	81 e0       	ldi	r24, 0x01	; 1
     b22:	90 e0       	ldi	r25, 0x00	; 0
     b24:	a0 e0       	ldi	r26, 0x00	; 0
     b26:	b0 e0       	ldi	r27, 0x00	; 0
     b28:	04 c0       	rjmp	.+8      	; 0xb32 <__pack_f+0x9c>
     b2a:	88 0f       	add	r24, r24
     b2c:	99 1f       	adc	r25, r25
     b2e:	aa 1f       	adc	r26, r26
     b30:	bb 1f       	adc	r27, r27
     b32:	2a 95       	dec	r18
     b34:	d2 f7       	brpl	.-12     	; 0xb2a <__pack_f+0x94>
     b36:	01 97       	sbiw	r24, 0x01	; 1
     b38:	a1 09       	sbc	r26, r1
     b3a:	b1 09       	sbc	r27, r1
     b3c:	8e 21       	and	r24, r14
     b3e:	9f 21       	and	r25, r15
     b40:	a0 23       	and	r26, r16
     b42:	b1 23       	and	r27, r17
     b44:	00 97       	sbiw	r24, 0x00	; 0
     b46:	a1 05       	cpc	r26, r1
     b48:	b1 05       	cpc	r27, r1
     b4a:	21 f0       	breq	.+8      	; 0xb54 <__pack_f+0xbe>
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	a0 e0       	ldi	r26, 0x00	; 0
     b52:	b0 e0       	ldi	r27, 0x00	; 0
     b54:	9a 01       	movw	r18, r20
     b56:	ab 01       	movw	r20, r22
     b58:	28 2b       	or	r18, r24
     b5a:	39 2b       	or	r19, r25
     b5c:	4a 2b       	or	r20, r26
     b5e:	5b 2b       	or	r21, r27
     b60:	da 01       	movw	r26, r20
     b62:	c9 01       	movw	r24, r18
     b64:	8f 77       	andi	r24, 0x7F	; 127
     b66:	90 70       	andi	r25, 0x00	; 0
     b68:	a0 70       	andi	r26, 0x00	; 0
     b6a:	b0 70       	andi	r27, 0x00	; 0
     b6c:	80 34       	cpi	r24, 0x40	; 64
     b6e:	91 05       	cpc	r25, r1
     b70:	a1 05       	cpc	r26, r1
     b72:	b1 05       	cpc	r27, r1
     b74:	39 f4       	brne	.+14     	; 0xb84 <__pack_f+0xee>
     b76:	27 ff       	sbrs	r18, 7
     b78:	09 c0       	rjmp	.+18     	; 0xb8c <__pack_f+0xf6>
     b7a:	20 5c       	subi	r18, 0xC0	; 192
     b7c:	3f 4f       	sbci	r19, 0xFF	; 255
     b7e:	4f 4f       	sbci	r20, 0xFF	; 255
     b80:	5f 4f       	sbci	r21, 0xFF	; 255
     b82:	04 c0       	rjmp	.+8      	; 0xb8c <__pack_f+0xf6>
     b84:	21 5c       	subi	r18, 0xC1	; 193
     b86:	3f 4f       	sbci	r19, 0xFF	; 255
     b88:	4f 4f       	sbci	r20, 0xFF	; 255
     b8a:	5f 4f       	sbci	r21, 0xFF	; 255
     b8c:	e0 e0       	ldi	r30, 0x00	; 0
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	20 30       	cpi	r18, 0x00	; 0
     b92:	a0 e0       	ldi	r26, 0x00	; 0
     b94:	3a 07       	cpc	r19, r26
     b96:	a0 e0       	ldi	r26, 0x00	; 0
     b98:	4a 07       	cpc	r20, r26
     b9a:	a0 e4       	ldi	r26, 0x40	; 64
     b9c:	5a 07       	cpc	r21, r26
     b9e:	10 f0       	brcs	.+4      	; 0xba4 <__pack_f+0x10e>
     ba0:	e1 e0       	ldi	r30, 0x01	; 1
     ba2:	f0 e0       	ldi	r31, 0x00	; 0
     ba4:	79 01       	movw	r14, r18
     ba6:	8a 01       	movw	r16, r20
     ba8:	27 c0       	rjmp	.+78     	; 0xbf8 <__pack_f+0x162>
     baa:	60 38       	cpi	r22, 0x80	; 128
     bac:	71 05       	cpc	r23, r1
     bae:	64 f5       	brge	.+88     	; 0xc08 <__pack_f+0x172>
     bb0:	fb 01       	movw	r30, r22
     bb2:	e1 58       	subi	r30, 0x81	; 129
     bb4:	ff 4f       	sbci	r31, 0xFF	; 255
     bb6:	d8 01       	movw	r26, r16
     bb8:	c7 01       	movw	r24, r14
     bba:	8f 77       	andi	r24, 0x7F	; 127
     bbc:	90 70       	andi	r25, 0x00	; 0
     bbe:	a0 70       	andi	r26, 0x00	; 0
     bc0:	b0 70       	andi	r27, 0x00	; 0
     bc2:	80 34       	cpi	r24, 0x40	; 64
     bc4:	91 05       	cpc	r25, r1
     bc6:	a1 05       	cpc	r26, r1
     bc8:	b1 05       	cpc	r27, r1
     bca:	39 f4       	brne	.+14     	; 0xbda <__pack_f+0x144>
     bcc:	e7 fe       	sbrs	r14, 7
     bce:	0d c0       	rjmp	.+26     	; 0xbea <__pack_f+0x154>
     bd0:	80 e4       	ldi	r24, 0x40	; 64
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	a0 e0       	ldi	r26, 0x00	; 0
     bd6:	b0 e0       	ldi	r27, 0x00	; 0
     bd8:	04 c0       	rjmp	.+8      	; 0xbe2 <__pack_f+0x14c>
     bda:	8f e3       	ldi	r24, 0x3F	; 63
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	b0 e0       	ldi	r27, 0x00	; 0
     be2:	e8 0e       	add	r14, r24
     be4:	f9 1e       	adc	r15, r25
     be6:	0a 1f       	adc	r16, r26
     be8:	1b 1f       	adc	r17, r27
     bea:	17 ff       	sbrs	r17, 7
     bec:	05 c0       	rjmp	.+10     	; 0xbf8 <__pack_f+0x162>
     bee:	16 95       	lsr	r17
     bf0:	07 95       	ror	r16
     bf2:	f7 94       	ror	r15
     bf4:	e7 94       	ror	r14
     bf6:	31 96       	adiw	r30, 0x01	; 1
     bf8:	87 e0       	ldi	r24, 0x07	; 7
     bfa:	16 95       	lsr	r17
     bfc:	07 95       	ror	r16
     bfe:	f7 94       	ror	r15
     c00:	e7 94       	ror	r14
     c02:	8a 95       	dec	r24
     c04:	d1 f7       	brne	.-12     	; 0xbfa <__pack_f+0x164>
     c06:	05 c0       	rjmp	.+10     	; 0xc12 <__pack_f+0x17c>
     c08:	ee 24       	eor	r14, r14
     c0a:	ff 24       	eor	r15, r15
     c0c:	87 01       	movw	r16, r14
     c0e:	ef ef       	ldi	r30, 0xFF	; 255
     c10:	f0 e0       	ldi	r31, 0x00	; 0
     c12:	6e 2f       	mov	r22, r30
     c14:	67 95       	ror	r22
     c16:	66 27       	eor	r22, r22
     c18:	67 95       	ror	r22
     c1a:	90 2f       	mov	r25, r16
     c1c:	9f 77       	andi	r25, 0x7F	; 127
     c1e:	d7 94       	ror	r13
     c20:	dd 24       	eor	r13, r13
     c22:	d7 94       	ror	r13
     c24:	8e 2f       	mov	r24, r30
     c26:	86 95       	lsr	r24
     c28:	49 2f       	mov	r20, r25
     c2a:	46 2b       	or	r20, r22
     c2c:	58 2f       	mov	r21, r24
     c2e:	5d 29       	or	r21, r13
     c30:	b7 01       	movw	r22, r14
     c32:	ca 01       	movw	r24, r20
     c34:	1f 91       	pop	r17
     c36:	0f 91       	pop	r16
     c38:	ff 90       	pop	r15
     c3a:	ef 90       	pop	r14
     c3c:	df 90       	pop	r13
     c3e:	08 95       	ret

00000c40 <__unpack_f>:
     c40:	fc 01       	movw	r30, r24
     c42:	db 01       	movw	r26, r22
     c44:	40 81       	ld	r20, Z
     c46:	51 81       	ldd	r21, Z+1	; 0x01
     c48:	22 81       	ldd	r18, Z+2	; 0x02
     c4a:	62 2f       	mov	r22, r18
     c4c:	6f 77       	andi	r22, 0x7F	; 127
     c4e:	70 e0       	ldi	r23, 0x00	; 0
     c50:	22 1f       	adc	r18, r18
     c52:	22 27       	eor	r18, r18
     c54:	22 1f       	adc	r18, r18
     c56:	93 81       	ldd	r25, Z+3	; 0x03
     c58:	89 2f       	mov	r24, r25
     c5a:	88 0f       	add	r24, r24
     c5c:	82 2b       	or	r24, r18
     c5e:	28 2f       	mov	r18, r24
     c60:	30 e0       	ldi	r19, 0x00	; 0
     c62:	99 1f       	adc	r25, r25
     c64:	99 27       	eor	r25, r25
     c66:	99 1f       	adc	r25, r25
     c68:	11 96       	adiw	r26, 0x01	; 1
     c6a:	9c 93       	st	X, r25
     c6c:	11 97       	sbiw	r26, 0x01	; 1
     c6e:	21 15       	cp	r18, r1
     c70:	31 05       	cpc	r19, r1
     c72:	a9 f5       	brne	.+106    	; 0xcde <__unpack_f+0x9e>
     c74:	41 15       	cp	r20, r1
     c76:	51 05       	cpc	r21, r1
     c78:	61 05       	cpc	r22, r1
     c7a:	71 05       	cpc	r23, r1
     c7c:	11 f4       	brne	.+4      	; 0xc82 <__unpack_f+0x42>
     c7e:	82 e0       	ldi	r24, 0x02	; 2
     c80:	37 c0       	rjmp	.+110    	; 0xcf0 <__unpack_f+0xb0>
     c82:	82 e8       	ldi	r24, 0x82	; 130
     c84:	9f ef       	ldi	r25, 0xFF	; 255
     c86:	13 96       	adiw	r26, 0x03	; 3
     c88:	9c 93       	st	X, r25
     c8a:	8e 93       	st	-X, r24
     c8c:	12 97       	sbiw	r26, 0x02	; 2
     c8e:	9a 01       	movw	r18, r20
     c90:	ab 01       	movw	r20, r22
     c92:	67 e0       	ldi	r22, 0x07	; 7
     c94:	22 0f       	add	r18, r18
     c96:	33 1f       	adc	r19, r19
     c98:	44 1f       	adc	r20, r20
     c9a:	55 1f       	adc	r21, r21
     c9c:	6a 95       	dec	r22
     c9e:	d1 f7       	brne	.-12     	; 0xc94 <__unpack_f+0x54>
     ca0:	83 e0       	ldi	r24, 0x03	; 3
     ca2:	8c 93       	st	X, r24
     ca4:	0d c0       	rjmp	.+26     	; 0xcc0 <__unpack_f+0x80>
     ca6:	22 0f       	add	r18, r18
     ca8:	33 1f       	adc	r19, r19
     caa:	44 1f       	adc	r20, r20
     cac:	55 1f       	adc	r21, r21
     cae:	12 96       	adiw	r26, 0x02	; 2
     cb0:	8d 91       	ld	r24, X+
     cb2:	9c 91       	ld	r25, X
     cb4:	13 97       	sbiw	r26, 0x03	; 3
     cb6:	01 97       	sbiw	r24, 0x01	; 1
     cb8:	13 96       	adiw	r26, 0x03	; 3
     cba:	9c 93       	st	X, r25
     cbc:	8e 93       	st	-X, r24
     cbe:	12 97       	sbiw	r26, 0x02	; 2
     cc0:	20 30       	cpi	r18, 0x00	; 0
     cc2:	80 e0       	ldi	r24, 0x00	; 0
     cc4:	38 07       	cpc	r19, r24
     cc6:	80 e0       	ldi	r24, 0x00	; 0
     cc8:	48 07       	cpc	r20, r24
     cca:	80 e4       	ldi	r24, 0x40	; 64
     ccc:	58 07       	cpc	r21, r24
     cce:	58 f3       	brcs	.-42     	; 0xca6 <__unpack_f+0x66>
     cd0:	14 96       	adiw	r26, 0x04	; 4
     cd2:	2d 93       	st	X+, r18
     cd4:	3d 93       	st	X+, r19
     cd6:	4d 93       	st	X+, r20
     cd8:	5c 93       	st	X, r21
     cda:	17 97       	sbiw	r26, 0x07	; 7
     cdc:	08 95       	ret
     cde:	2f 3f       	cpi	r18, 0xFF	; 255
     ce0:	31 05       	cpc	r19, r1
     ce2:	79 f4       	brne	.+30     	; 0xd02 <__unpack_f+0xc2>
     ce4:	41 15       	cp	r20, r1
     ce6:	51 05       	cpc	r21, r1
     ce8:	61 05       	cpc	r22, r1
     cea:	71 05       	cpc	r23, r1
     cec:	19 f4       	brne	.+6      	; 0xcf4 <__unpack_f+0xb4>
     cee:	84 e0       	ldi	r24, 0x04	; 4
     cf0:	8c 93       	st	X, r24
     cf2:	08 95       	ret
     cf4:	64 ff       	sbrs	r22, 4
     cf6:	03 c0       	rjmp	.+6      	; 0xcfe <__unpack_f+0xbe>
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	8c 93       	st	X, r24
     cfc:	12 c0       	rjmp	.+36     	; 0xd22 <__unpack_f+0xe2>
     cfe:	1c 92       	st	X, r1
     d00:	10 c0       	rjmp	.+32     	; 0xd22 <__unpack_f+0xe2>
     d02:	2f 57       	subi	r18, 0x7F	; 127
     d04:	30 40       	sbci	r19, 0x00	; 0
     d06:	13 96       	adiw	r26, 0x03	; 3
     d08:	3c 93       	st	X, r19
     d0a:	2e 93       	st	-X, r18
     d0c:	12 97       	sbiw	r26, 0x02	; 2
     d0e:	83 e0       	ldi	r24, 0x03	; 3
     d10:	8c 93       	st	X, r24
     d12:	87 e0       	ldi	r24, 0x07	; 7
     d14:	44 0f       	add	r20, r20
     d16:	55 1f       	adc	r21, r21
     d18:	66 1f       	adc	r22, r22
     d1a:	77 1f       	adc	r23, r23
     d1c:	8a 95       	dec	r24
     d1e:	d1 f7       	brne	.-12     	; 0xd14 <__unpack_f+0xd4>
     d20:	70 64       	ori	r23, 0x40	; 64
     d22:	14 96       	adiw	r26, 0x04	; 4
     d24:	4d 93       	st	X+, r20
     d26:	5d 93       	st	X+, r21
     d28:	6d 93       	st	X+, r22
     d2a:	7c 93       	st	X, r23
     d2c:	17 97       	sbiw	r26, 0x07	; 7
     d2e:	08 95       	ret

00000d30 <__fpcmp_parts_f>:
     d30:	1f 93       	push	r17
     d32:	dc 01       	movw	r26, r24
     d34:	fb 01       	movw	r30, r22
     d36:	9c 91       	ld	r25, X
     d38:	92 30       	cpi	r25, 0x02	; 2
     d3a:	08 f4       	brcc	.+2      	; 0xd3e <__fpcmp_parts_f+0xe>
     d3c:	47 c0       	rjmp	.+142    	; 0xdcc <__fpcmp_parts_f+0x9c>
     d3e:	80 81       	ld	r24, Z
     d40:	82 30       	cpi	r24, 0x02	; 2
     d42:	08 f4       	brcc	.+2      	; 0xd46 <__fpcmp_parts_f+0x16>
     d44:	43 c0       	rjmp	.+134    	; 0xdcc <__fpcmp_parts_f+0x9c>
     d46:	94 30       	cpi	r25, 0x04	; 4
     d48:	51 f4       	brne	.+20     	; 0xd5e <__fpcmp_parts_f+0x2e>
     d4a:	11 96       	adiw	r26, 0x01	; 1
     d4c:	1c 91       	ld	r17, X
     d4e:	84 30       	cpi	r24, 0x04	; 4
     d50:	99 f5       	brne	.+102    	; 0xdb8 <__fpcmp_parts_f+0x88>
     d52:	81 81       	ldd	r24, Z+1	; 0x01
     d54:	68 2f       	mov	r22, r24
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	61 1b       	sub	r22, r17
     d5a:	71 09       	sbc	r23, r1
     d5c:	3f c0       	rjmp	.+126    	; 0xddc <__fpcmp_parts_f+0xac>
     d5e:	84 30       	cpi	r24, 0x04	; 4
     d60:	21 f0       	breq	.+8      	; 0xd6a <__fpcmp_parts_f+0x3a>
     d62:	92 30       	cpi	r25, 0x02	; 2
     d64:	31 f4       	brne	.+12     	; 0xd72 <__fpcmp_parts_f+0x42>
     d66:	82 30       	cpi	r24, 0x02	; 2
     d68:	b9 f1       	breq	.+110    	; 0xdd8 <__fpcmp_parts_f+0xa8>
     d6a:	81 81       	ldd	r24, Z+1	; 0x01
     d6c:	88 23       	and	r24, r24
     d6e:	89 f1       	breq	.+98     	; 0xdd2 <__fpcmp_parts_f+0xa2>
     d70:	2d c0       	rjmp	.+90     	; 0xdcc <__fpcmp_parts_f+0x9c>
     d72:	11 96       	adiw	r26, 0x01	; 1
     d74:	1c 91       	ld	r17, X
     d76:	11 97       	sbiw	r26, 0x01	; 1
     d78:	82 30       	cpi	r24, 0x02	; 2
     d7a:	f1 f0       	breq	.+60     	; 0xdb8 <__fpcmp_parts_f+0x88>
     d7c:	81 81       	ldd	r24, Z+1	; 0x01
     d7e:	18 17       	cp	r17, r24
     d80:	d9 f4       	brne	.+54     	; 0xdb8 <__fpcmp_parts_f+0x88>
     d82:	12 96       	adiw	r26, 0x02	; 2
     d84:	2d 91       	ld	r18, X+
     d86:	3c 91       	ld	r19, X
     d88:	13 97       	sbiw	r26, 0x03	; 3
     d8a:	82 81       	ldd	r24, Z+2	; 0x02
     d8c:	93 81       	ldd	r25, Z+3	; 0x03
     d8e:	82 17       	cp	r24, r18
     d90:	93 07       	cpc	r25, r19
     d92:	94 f0       	brlt	.+36     	; 0xdb8 <__fpcmp_parts_f+0x88>
     d94:	28 17       	cp	r18, r24
     d96:	39 07       	cpc	r19, r25
     d98:	bc f0       	brlt	.+46     	; 0xdc8 <__fpcmp_parts_f+0x98>
     d9a:	14 96       	adiw	r26, 0x04	; 4
     d9c:	8d 91       	ld	r24, X+
     d9e:	9d 91       	ld	r25, X+
     da0:	0d 90       	ld	r0, X+
     da2:	bc 91       	ld	r27, X
     da4:	a0 2d       	mov	r26, r0
     da6:	24 81       	ldd	r18, Z+4	; 0x04
     da8:	35 81       	ldd	r19, Z+5	; 0x05
     daa:	46 81       	ldd	r20, Z+6	; 0x06
     dac:	57 81       	ldd	r21, Z+7	; 0x07
     dae:	28 17       	cp	r18, r24
     db0:	39 07       	cpc	r19, r25
     db2:	4a 07       	cpc	r20, r26
     db4:	5b 07       	cpc	r21, r27
     db6:	18 f4       	brcc	.+6      	; 0xdbe <__fpcmp_parts_f+0x8e>
     db8:	11 23       	and	r17, r17
     dba:	41 f0       	breq	.+16     	; 0xdcc <__fpcmp_parts_f+0x9c>
     dbc:	0a c0       	rjmp	.+20     	; 0xdd2 <__fpcmp_parts_f+0xa2>
     dbe:	82 17       	cp	r24, r18
     dc0:	93 07       	cpc	r25, r19
     dc2:	a4 07       	cpc	r26, r20
     dc4:	b5 07       	cpc	r27, r21
     dc6:	40 f4       	brcc	.+16     	; 0xdd8 <__fpcmp_parts_f+0xa8>
     dc8:	11 23       	and	r17, r17
     dca:	19 f0       	breq	.+6      	; 0xdd2 <__fpcmp_parts_f+0xa2>
     dcc:	61 e0       	ldi	r22, 0x01	; 1
     dce:	70 e0       	ldi	r23, 0x00	; 0
     dd0:	05 c0       	rjmp	.+10     	; 0xddc <__fpcmp_parts_f+0xac>
     dd2:	6f ef       	ldi	r22, 0xFF	; 255
     dd4:	7f ef       	ldi	r23, 0xFF	; 255
     dd6:	02 c0       	rjmp	.+4      	; 0xddc <__fpcmp_parts_f+0xac>
     dd8:	60 e0       	ldi	r22, 0x00	; 0
     dda:	70 e0       	ldi	r23, 0x00	; 0
     ddc:	cb 01       	movw	r24, r22
     dde:	1f 91       	pop	r17
     de0:	08 95       	ret

00000de2 <C_LCD_voidSendCommand>:

#include "CLCD_private.h"


void C_LCD_voidSendCommand(u8 Copy_u8Command)
{
     de2:	1f 93       	push	r17
     de4:	df 93       	push	r29
     de6:	cf 93       	push	r28
     de8:	cd b7       	in	r28, 0x3d	; 61
     dea:	de b7       	in	r29, 0x3e	; 62
     dec:	ea 97       	sbiw	r28, 0x3a	; 58
     dee:	0f b6       	in	r0, 0x3f	; 63
     df0:	f8 94       	cli
     df2:	de bf       	out	0x3e, r29	; 62
     df4:	0f be       	out	0x3f, r0	; 63
     df6:	cd bf       	out	0x3d, r28	; 61
     df8:	8a af       	std	Y+58, r24	; 0x3a
	/*Set RS Pin to low to send command */
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_LOW);
     dfa:	80 e0       	ldi	r24, 0x00	; 0
     dfc:	61 e0       	ldi	r22, 0x01	; 1
     dfe:	40 e0       	ldi	r20, 0x00	; 0
     e00:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <DIO_u8SetPinValue>
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);

#elif   MODE_SELECT ==_4_BIT_MODE

	u8 Local_u8Command = (((Copy_u8Command>>1 ) & CLCD_COMMAND_MASK) | DIO_u8AndWithPort(CLCD_DATA_PORT, CLCD_DATA_PORT_MASK));
     e04:	8a ad       	ldd	r24, Y+58	; 0x3a
     e06:	86 95       	lsr	r24
     e08:	18 2f       	mov	r17, r24
     e0a:	18 77       	andi	r17, 0x78	; 120
     e0c:	80 e0       	ldi	r24, 0x00	; 0
     e0e:	67 e8       	ldi	r22, 0x87	; 135
     e10:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <DIO_u8AndWithPort>
     e14:	81 2b       	or	r24, r17
     e16:	89 af       	std	Y+57, r24	; 0x39
	/* Set Command to data pins */
	DIO_u8SetPortValue(CLCD_DATA_PORT,Local_u8Command);
     e18:	80 e0       	ldi	r24, 0x00	; 0
     e1a:	69 ad       	ldd	r22, Y+57	; 0x39
     e1c:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <DIO_u8SetPortValue>

	/*Send Enable pulse */
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
     e20:	80 e0       	ldi	r24, 0x00	; 0
     e22:	62 e0       	ldi	r22, 0x02	; 2
     e24:	41 e0       	ldi	r20, 0x01	; 1
     e26:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <DIO_u8SetPinValue>
     e2a:	80 e0       	ldi	r24, 0x00	; 0
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	a0 e0       	ldi	r26, 0x00	; 0
     e30:	b0 e4       	ldi	r27, 0x40	; 64
     e32:	8d ab       	std	Y+53, r24	; 0x35
     e34:	9e ab       	std	Y+54, r25	; 0x36
     e36:	af ab       	std	Y+55, r26	; 0x37
     e38:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e3a:	6d a9       	ldd	r22, Y+53	; 0x35
     e3c:	7e a9       	ldd	r23, Y+54	; 0x36
     e3e:	8f a9       	ldd	r24, Y+55	; 0x37
     e40:	98 ad       	ldd	r25, Y+56	; 0x38
     e42:	20 e0       	ldi	r18, 0x00	; 0
     e44:	30 e0       	ldi	r19, 0x00	; 0
     e46:	4a ef       	ldi	r20, 0xFA	; 250
     e48:	54 e4       	ldi	r21, 0x44	; 68
     e4a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e4e:	dc 01       	movw	r26, r24
     e50:	cb 01       	movw	r24, r22
     e52:	89 ab       	std	Y+49, r24	; 0x31
     e54:	9a ab       	std	Y+50, r25	; 0x32
     e56:	ab ab       	std	Y+51, r26	; 0x33
     e58:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     e5a:	69 a9       	ldd	r22, Y+49	; 0x31
     e5c:	7a a9       	ldd	r23, Y+50	; 0x32
     e5e:	8b a9       	ldd	r24, Y+51	; 0x33
     e60:	9c a9       	ldd	r25, Y+52	; 0x34
     e62:	20 e0       	ldi	r18, 0x00	; 0
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	40 e8       	ldi	r20, 0x80	; 128
     e68:	5f e3       	ldi	r21, 0x3F	; 63
     e6a:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
     e6e:	88 23       	and	r24, r24
     e70:	2c f4       	brge	.+10     	; 0xe7c <C_LCD_voidSendCommand+0x9a>
		__ticks = 1;
     e72:	81 e0       	ldi	r24, 0x01	; 1
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	98 ab       	std	Y+48, r25	; 0x30
     e78:	8f a7       	std	Y+47, r24	; 0x2f
     e7a:	3f c0       	rjmp	.+126    	; 0xefa <C_LCD_voidSendCommand+0x118>
	else if (__tmp > 65535)
     e7c:	69 a9       	ldd	r22, Y+49	; 0x31
     e7e:	7a a9       	ldd	r23, Y+50	; 0x32
     e80:	8b a9       	ldd	r24, Y+51	; 0x33
     e82:	9c a9       	ldd	r25, Y+52	; 0x34
     e84:	20 e0       	ldi	r18, 0x00	; 0
     e86:	3f ef       	ldi	r19, 0xFF	; 255
     e88:	4f e7       	ldi	r20, 0x7F	; 127
     e8a:	57 e4       	ldi	r21, 0x47	; 71
     e8c:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
     e90:	18 16       	cp	r1, r24
     e92:	4c f5       	brge	.+82     	; 0xee6 <C_LCD_voidSendCommand+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e94:	6d a9       	ldd	r22, Y+53	; 0x35
     e96:	7e a9       	ldd	r23, Y+54	; 0x36
     e98:	8f a9       	ldd	r24, Y+55	; 0x37
     e9a:	98 ad       	ldd	r25, Y+56	; 0x38
     e9c:	20 e0       	ldi	r18, 0x00	; 0
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	40 e2       	ldi	r20, 0x20	; 32
     ea2:	51 e4       	ldi	r21, 0x41	; 65
     ea4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     ea8:	dc 01       	movw	r26, r24
     eaa:	cb 01       	movw	r24, r22
     eac:	bc 01       	movw	r22, r24
     eae:	cd 01       	movw	r24, r26
     eb0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     eb4:	dc 01       	movw	r26, r24
     eb6:	cb 01       	movw	r24, r22
     eb8:	98 ab       	std	Y+48, r25	; 0x30
     eba:	8f a7       	std	Y+47, r24	; 0x2f
     ebc:	0f c0       	rjmp	.+30     	; 0xedc <C_LCD_voidSendCommand+0xfa>
     ebe:	88 ec       	ldi	r24, 0xC8	; 200
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	9e a7       	std	Y+46, r25	; 0x2e
     ec4:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ec6:	8d a5       	ldd	r24, Y+45	; 0x2d
     ec8:	9e a5       	ldd	r25, Y+46	; 0x2e
     eca:	01 97       	sbiw	r24, 0x01	; 1
     ecc:	f1 f7       	brne	.-4      	; 0xeca <C_LCD_voidSendCommand+0xe8>
     ece:	9e a7       	std	Y+46, r25	; 0x2e
     ed0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ed2:	8f a5       	ldd	r24, Y+47	; 0x2f
     ed4:	98 a9       	ldd	r25, Y+48	; 0x30
     ed6:	01 97       	sbiw	r24, 0x01	; 1
     ed8:	98 ab       	std	Y+48, r25	; 0x30
     eda:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     edc:	8f a5       	ldd	r24, Y+47	; 0x2f
     ede:	98 a9       	ldd	r25, Y+48	; 0x30
     ee0:	00 97       	sbiw	r24, 0x00	; 0
     ee2:	69 f7       	brne	.-38     	; 0xebe <C_LCD_voidSendCommand+0xdc>
     ee4:	14 c0       	rjmp	.+40     	; 0xf0e <C_LCD_voidSendCommand+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ee6:	69 a9       	ldd	r22, Y+49	; 0x31
     ee8:	7a a9       	ldd	r23, Y+50	; 0x32
     eea:	8b a9       	ldd	r24, Y+51	; 0x33
     eec:	9c a9       	ldd	r25, Y+52	; 0x34
     eee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     ef2:	dc 01       	movw	r26, r24
     ef4:	cb 01       	movw	r24, r22
     ef6:	98 ab       	std	Y+48, r25	; 0x30
     ef8:	8f a7       	std	Y+47, r24	; 0x2f
     efa:	8f a5       	ldd	r24, Y+47	; 0x2f
     efc:	98 a9       	ldd	r25, Y+48	; 0x30
     efe:	9c a7       	std	Y+44, r25	; 0x2c
     f00:	8b a7       	std	Y+43, r24	; 0x2b
     f02:	8b a5       	ldd	r24, Y+43	; 0x2b
     f04:	9c a5       	ldd	r25, Y+44	; 0x2c
     f06:	01 97       	sbiw	r24, 0x01	; 1
     f08:	f1 f7       	brne	.-4      	; 0xf06 <C_LCD_voidSendCommand+0x124>
     f0a:	9c a7       	std	Y+44, r25	; 0x2c
     f0c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
     f0e:	80 e0       	ldi	r24, 0x00	; 0
     f10:	62 e0       	ldi	r22, 0x02	; 2
     f12:	40 e0       	ldi	r20, 0x00	; 0
     f14:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <DIO_u8SetPinValue>
     f18:	80 e0       	ldi	r24, 0x00	; 0
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	a0 ea       	ldi	r26, 0xA0	; 160
     f1e:	b0 e4       	ldi	r27, 0x40	; 64
     f20:	8f a3       	std	Y+39, r24	; 0x27
     f22:	98 a7       	std	Y+40, r25	; 0x28
     f24:	a9 a7       	std	Y+41, r26	; 0x29
     f26:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f28:	6f a1       	ldd	r22, Y+39	; 0x27
     f2a:	78 a5       	ldd	r23, Y+40	; 0x28
     f2c:	89 a5       	ldd	r24, Y+41	; 0x29
     f2e:	9a a5       	ldd	r25, Y+42	; 0x2a
     f30:	20 e0       	ldi	r18, 0x00	; 0
     f32:	30 e0       	ldi	r19, 0x00	; 0
     f34:	4a ef       	ldi	r20, 0xFA	; 250
     f36:	54 e4       	ldi	r21, 0x44	; 68
     f38:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f3c:	dc 01       	movw	r26, r24
     f3e:	cb 01       	movw	r24, r22
     f40:	8b a3       	std	Y+35, r24	; 0x23
     f42:	9c a3       	std	Y+36, r25	; 0x24
     f44:	ad a3       	std	Y+37, r26	; 0x25
     f46:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     f48:	6b a1       	ldd	r22, Y+35	; 0x23
     f4a:	7c a1       	ldd	r23, Y+36	; 0x24
     f4c:	8d a1       	ldd	r24, Y+37	; 0x25
     f4e:	9e a1       	ldd	r25, Y+38	; 0x26
     f50:	20 e0       	ldi	r18, 0x00	; 0
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	40 e8       	ldi	r20, 0x80	; 128
     f56:	5f e3       	ldi	r21, 0x3F	; 63
     f58:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
     f5c:	88 23       	and	r24, r24
     f5e:	2c f4       	brge	.+10     	; 0xf6a <C_LCD_voidSendCommand+0x188>
		__ticks = 1;
     f60:	81 e0       	ldi	r24, 0x01	; 1
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	9a a3       	std	Y+34, r25	; 0x22
     f66:	89 a3       	std	Y+33, r24	; 0x21
     f68:	3f c0       	rjmp	.+126    	; 0xfe8 <C_LCD_voidSendCommand+0x206>
	else if (__tmp > 65535)
     f6a:	6b a1       	ldd	r22, Y+35	; 0x23
     f6c:	7c a1       	ldd	r23, Y+36	; 0x24
     f6e:	8d a1       	ldd	r24, Y+37	; 0x25
     f70:	9e a1       	ldd	r25, Y+38	; 0x26
     f72:	20 e0       	ldi	r18, 0x00	; 0
     f74:	3f ef       	ldi	r19, 0xFF	; 255
     f76:	4f e7       	ldi	r20, 0x7F	; 127
     f78:	57 e4       	ldi	r21, 0x47	; 71
     f7a:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
     f7e:	18 16       	cp	r1, r24
     f80:	4c f5       	brge	.+82     	; 0xfd4 <C_LCD_voidSendCommand+0x1f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f82:	6f a1       	ldd	r22, Y+39	; 0x27
     f84:	78 a5       	ldd	r23, Y+40	; 0x28
     f86:	89 a5       	ldd	r24, Y+41	; 0x29
     f88:	9a a5       	ldd	r25, Y+42	; 0x2a
     f8a:	20 e0       	ldi	r18, 0x00	; 0
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	40 e2       	ldi	r20, 0x20	; 32
     f90:	51 e4       	ldi	r21, 0x41	; 65
     f92:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f96:	dc 01       	movw	r26, r24
     f98:	cb 01       	movw	r24, r22
     f9a:	bc 01       	movw	r22, r24
     f9c:	cd 01       	movw	r24, r26
     f9e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     fa2:	dc 01       	movw	r26, r24
     fa4:	cb 01       	movw	r24, r22
     fa6:	9a a3       	std	Y+34, r25	; 0x22
     fa8:	89 a3       	std	Y+33, r24	; 0x21
     faa:	0f c0       	rjmp	.+30     	; 0xfca <C_LCD_voidSendCommand+0x1e8>
     fac:	88 ec       	ldi	r24, 0xC8	; 200
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	98 a3       	std	Y+32, r25	; 0x20
     fb2:	8f 8f       	std	Y+31, r24	; 0x1f
     fb4:	8f 8d       	ldd	r24, Y+31	; 0x1f
     fb6:	98 a1       	ldd	r25, Y+32	; 0x20
     fb8:	01 97       	sbiw	r24, 0x01	; 1
     fba:	f1 f7       	brne	.-4      	; 0xfb8 <C_LCD_voidSendCommand+0x1d6>
     fbc:	98 a3       	std	Y+32, r25	; 0x20
     fbe:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fc0:	89 a1       	ldd	r24, Y+33	; 0x21
     fc2:	9a a1       	ldd	r25, Y+34	; 0x22
     fc4:	01 97       	sbiw	r24, 0x01	; 1
     fc6:	9a a3       	std	Y+34, r25	; 0x22
     fc8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fca:	89 a1       	ldd	r24, Y+33	; 0x21
     fcc:	9a a1       	ldd	r25, Y+34	; 0x22
     fce:	00 97       	sbiw	r24, 0x00	; 0
     fd0:	69 f7       	brne	.-38     	; 0xfac <C_LCD_voidSendCommand+0x1ca>
     fd2:	14 c0       	rjmp	.+40     	; 0xffc <C_LCD_voidSendCommand+0x21a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fd4:	6b a1       	ldd	r22, Y+35	; 0x23
     fd6:	7c a1       	ldd	r23, Y+36	; 0x24
     fd8:	8d a1       	ldd	r24, Y+37	; 0x25
     fda:	9e a1       	ldd	r25, Y+38	; 0x26
     fdc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     fe0:	dc 01       	movw	r26, r24
     fe2:	cb 01       	movw	r24, r22
     fe4:	9a a3       	std	Y+34, r25	; 0x22
     fe6:	89 a3       	std	Y+33, r24	; 0x21
     fe8:	89 a1       	ldd	r24, Y+33	; 0x21
     fea:	9a a1       	ldd	r25, Y+34	; 0x22
     fec:	9e 8f       	std	Y+30, r25	; 0x1e
     fee:	8d 8f       	std	Y+29, r24	; 0x1d
     ff0:	8d 8d       	ldd	r24, Y+29	; 0x1d
     ff2:	9e 8d       	ldd	r25, Y+30	; 0x1e
     ff4:	01 97       	sbiw	r24, 0x01	; 1
     ff6:	f1 f7       	brne	.-4      	; 0xff4 <C_LCD_voidSendCommand+0x212>
     ff8:	9e 8f       	std	Y+30, r25	; 0x1e
     ffa:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);

	Local_u8Command = ((Copy_u8Command <<3) |DIO_u8AndWithPort(CLCD_DATA_PORT, CLCD_DATA_PORT_MASK));
     ffc:	8a ad       	ldd	r24, Y+58	; 0x3a
     ffe:	88 2f       	mov	r24, r24
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	88 0f       	add	r24, r24
    1004:	99 1f       	adc	r25, r25
    1006:	88 0f       	add	r24, r24
    1008:	99 1f       	adc	r25, r25
    100a:	88 0f       	add	r24, r24
    100c:	99 1f       	adc	r25, r25
    100e:	18 2f       	mov	r17, r24
    1010:	80 e0       	ldi	r24, 0x00	; 0
    1012:	67 e8       	ldi	r22, 0x87	; 135
    1014:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <DIO_u8AndWithPort>
    1018:	81 2b       	or	r24, r17
    101a:	89 af       	std	Y+57, r24	; 0x39
	DIO_u8SetPortValue(CLCD_DATA_PORT,Local_u8Command);
    101c:	80 e0       	ldi	r24, 0x00	; 0
    101e:	69 ad       	ldd	r22, Y+57	; 0x39
    1020:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <DIO_u8SetPortValue>

	/*Send Enable pulse */
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    1024:	80 e0       	ldi	r24, 0x00	; 0
    1026:	62 e0       	ldi	r22, 0x02	; 2
    1028:	41 e0       	ldi	r20, 0x01	; 1
    102a:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <DIO_u8SetPinValue>
    102e:	80 e0       	ldi	r24, 0x00	; 0
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	a0 e0       	ldi	r26, 0x00	; 0
    1034:	b0 e4       	ldi	r27, 0x40	; 64
    1036:	89 8f       	std	Y+25, r24	; 0x19
    1038:	9a 8f       	std	Y+26, r25	; 0x1a
    103a:	ab 8f       	std	Y+27, r26	; 0x1b
    103c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    103e:	69 8d       	ldd	r22, Y+25	; 0x19
    1040:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1042:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1044:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1046:	20 e0       	ldi	r18, 0x00	; 0
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	4a ef       	ldi	r20, 0xFA	; 250
    104c:	54 e4       	ldi	r21, 0x44	; 68
    104e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1052:	dc 01       	movw	r26, r24
    1054:	cb 01       	movw	r24, r22
    1056:	8d 8b       	std	Y+21, r24	; 0x15
    1058:	9e 8b       	std	Y+22, r25	; 0x16
    105a:	af 8b       	std	Y+23, r26	; 0x17
    105c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    105e:	6d 89       	ldd	r22, Y+21	; 0x15
    1060:	7e 89       	ldd	r23, Y+22	; 0x16
    1062:	8f 89       	ldd	r24, Y+23	; 0x17
    1064:	98 8d       	ldd	r25, Y+24	; 0x18
    1066:	20 e0       	ldi	r18, 0x00	; 0
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	40 e8       	ldi	r20, 0x80	; 128
    106c:	5f e3       	ldi	r21, 0x3F	; 63
    106e:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    1072:	88 23       	and	r24, r24
    1074:	2c f4       	brge	.+10     	; 0x1080 <C_LCD_voidSendCommand+0x29e>
		__ticks = 1;
    1076:	81 e0       	ldi	r24, 0x01	; 1
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	9c 8b       	std	Y+20, r25	; 0x14
    107c:	8b 8b       	std	Y+19, r24	; 0x13
    107e:	3f c0       	rjmp	.+126    	; 0x10fe <C_LCD_voidSendCommand+0x31c>
	else if (__tmp > 65535)
    1080:	6d 89       	ldd	r22, Y+21	; 0x15
    1082:	7e 89       	ldd	r23, Y+22	; 0x16
    1084:	8f 89       	ldd	r24, Y+23	; 0x17
    1086:	98 8d       	ldd	r25, Y+24	; 0x18
    1088:	20 e0       	ldi	r18, 0x00	; 0
    108a:	3f ef       	ldi	r19, 0xFF	; 255
    108c:	4f e7       	ldi	r20, 0x7F	; 127
    108e:	57 e4       	ldi	r21, 0x47	; 71
    1090:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    1094:	18 16       	cp	r1, r24
    1096:	4c f5       	brge	.+82     	; 0x10ea <C_LCD_voidSendCommand+0x308>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1098:	69 8d       	ldd	r22, Y+25	; 0x19
    109a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    109c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    109e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    10a0:	20 e0       	ldi	r18, 0x00	; 0
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	40 e2       	ldi	r20, 0x20	; 32
    10a6:	51 e4       	ldi	r21, 0x41	; 65
    10a8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    10ac:	dc 01       	movw	r26, r24
    10ae:	cb 01       	movw	r24, r22
    10b0:	bc 01       	movw	r22, r24
    10b2:	cd 01       	movw	r24, r26
    10b4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    10b8:	dc 01       	movw	r26, r24
    10ba:	cb 01       	movw	r24, r22
    10bc:	9c 8b       	std	Y+20, r25	; 0x14
    10be:	8b 8b       	std	Y+19, r24	; 0x13
    10c0:	0f c0       	rjmp	.+30     	; 0x10e0 <C_LCD_voidSendCommand+0x2fe>
    10c2:	88 ec       	ldi	r24, 0xC8	; 200
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	9a 8b       	std	Y+18, r25	; 0x12
    10c8:	89 8b       	std	Y+17, r24	; 0x11
    10ca:	89 89       	ldd	r24, Y+17	; 0x11
    10cc:	9a 89       	ldd	r25, Y+18	; 0x12
    10ce:	01 97       	sbiw	r24, 0x01	; 1
    10d0:	f1 f7       	brne	.-4      	; 0x10ce <C_LCD_voidSendCommand+0x2ec>
    10d2:	9a 8b       	std	Y+18, r25	; 0x12
    10d4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10d6:	8b 89       	ldd	r24, Y+19	; 0x13
    10d8:	9c 89       	ldd	r25, Y+20	; 0x14
    10da:	01 97       	sbiw	r24, 0x01	; 1
    10dc:	9c 8b       	std	Y+20, r25	; 0x14
    10de:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10e0:	8b 89       	ldd	r24, Y+19	; 0x13
    10e2:	9c 89       	ldd	r25, Y+20	; 0x14
    10e4:	00 97       	sbiw	r24, 0x00	; 0
    10e6:	69 f7       	brne	.-38     	; 0x10c2 <C_LCD_voidSendCommand+0x2e0>
    10e8:	14 c0       	rjmp	.+40     	; 0x1112 <C_LCD_voidSendCommand+0x330>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10ea:	6d 89       	ldd	r22, Y+21	; 0x15
    10ec:	7e 89       	ldd	r23, Y+22	; 0x16
    10ee:	8f 89       	ldd	r24, Y+23	; 0x17
    10f0:	98 8d       	ldd	r25, Y+24	; 0x18
    10f2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    10f6:	dc 01       	movw	r26, r24
    10f8:	cb 01       	movw	r24, r22
    10fa:	9c 8b       	std	Y+20, r25	; 0x14
    10fc:	8b 8b       	std	Y+19, r24	; 0x13
    10fe:	8b 89       	ldd	r24, Y+19	; 0x13
    1100:	9c 89       	ldd	r25, Y+20	; 0x14
    1102:	98 8b       	std	Y+16, r25	; 0x10
    1104:	8f 87       	std	Y+15, r24	; 0x0f
    1106:	8f 85       	ldd	r24, Y+15	; 0x0f
    1108:	98 89       	ldd	r25, Y+16	; 0x10
    110a:	01 97       	sbiw	r24, 0x01	; 1
    110c:	f1 f7       	brne	.-4      	; 0x110a <C_LCD_voidSendCommand+0x328>
    110e:	98 8b       	std	Y+16, r25	; 0x10
    1110:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    1112:	80 e0       	ldi	r24, 0x00	; 0
    1114:	62 e0       	ldi	r22, 0x02	; 2
    1116:	40 e0       	ldi	r20, 0x00	; 0
    1118:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <DIO_u8SetPinValue>
    111c:	80 e0       	ldi	r24, 0x00	; 0
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	a0 ea       	ldi	r26, 0xA0	; 160
    1122:	b0 e4       	ldi	r27, 0x40	; 64
    1124:	8b 87       	std	Y+11, r24	; 0x0b
    1126:	9c 87       	std	Y+12, r25	; 0x0c
    1128:	ad 87       	std	Y+13, r26	; 0x0d
    112a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    112c:	6b 85       	ldd	r22, Y+11	; 0x0b
    112e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1130:	8d 85       	ldd	r24, Y+13	; 0x0d
    1132:	9e 85       	ldd	r25, Y+14	; 0x0e
    1134:	20 e0       	ldi	r18, 0x00	; 0
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	4a ef       	ldi	r20, 0xFA	; 250
    113a:	54 e4       	ldi	r21, 0x44	; 68
    113c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1140:	dc 01       	movw	r26, r24
    1142:	cb 01       	movw	r24, r22
    1144:	8f 83       	std	Y+7, r24	; 0x07
    1146:	98 87       	std	Y+8, r25	; 0x08
    1148:	a9 87       	std	Y+9, r26	; 0x09
    114a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    114c:	6f 81       	ldd	r22, Y+7	; 0x07
    114e:	78 85       	ldd	r23, Y+8	; 0x08
    1150:	89 85       	ldd	r24, Y+9	; 0x09
    1152:	9a 85       	ldd	r25, Y+10	; 0x0a
    1154:	20 e0       	ldi	r18, 0x00	; 0
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	40 e8       	ldi	r20, 0x80	; 128
    115a:	5f e3       	ldi	r21, 0x3F	; 63
    115c:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    1160:	88 23       	and	r24, r24
    1162:	2c f4       	brge	.+10     	; 0x116e <C_LCD_voidSendCommand+0x38c>
		__ticks = 1;
    1164:	81 e0       	ldi	r24, 0x01	; 1
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	9e 83       	std	Y+6, r25	; 0x06
    116a:	8d 83       	std	Y+5, r24	; 0x05
    116c:	3f c0       	rjmp	.+126    	; 0x11ec <C_LCD_voidSendCommand+0x40a>
	else if (__tmp > 65535)
    116e:	6f 81       	ldd	r22, Y+7	; 0x07
    1170:	78 85       	ldd	r23, Y+8	; 0x08
    1172:	89 85       	ldd	r24, Y+9	; 0x09
    1174:	9a 85       	ldd	r25, Y+10	; 0x0a
    1176:	20 e0       	ldi	r18, 0x00	; 0
    1178:	3f ef       	ldi	r19, 0xFF	; 255
    117a:	4f e7       	ldi	r20, 0x7F	; 127
    117c:	57 e4       	ldi	r21, 0x47	; 71
    117e:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    1182:	18 16       	cp	r1, r24
    1184:	4c f5       	brge	.+82     	; 0x11d8 <C_LCD_voidSendCommand+0x3f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1186:	6b 85       	ldd	r22, Y+11	; 0x0b
    1188:	7c 85       	ldd	r23, Y+12	; 0x0c
    118a:	8d 85       	ldd	r24, Y+13	; 0x0d
    118c:	9e 85       	ldd	r25, Y+14	; 0x0e
    118e:	20 e0       	ldi	r18, 0x00	; 0
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	40 e2       	ldi	r20, 0x20	; 32
    1194:	51 e4       	ldi	r21, 0x41	; 65
    1196:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    119a:	dc 01       	movw	r26, r24
    119c:	cb 01       	movw	r24, r22
    119e:	bc 01       	movw	r22, r24
    11a0:	cd 01       	movw	r24, r26
    11a2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11a6:	dc 01       	movw	r26, r24
    11a8:	cb 01       	movw	r24, r22
    11aa:	9e 83       	std	Y+6, r25	; 0x06
    11ac:	8d 83       	std	Y+5, r24	; 0x05
    11ae:	0f c0       	rjmp	.+30     	; 0x11ce <C_LCD_voidSendCommand+0x3ec>
    11b0:	88 ec       	ldi	r24, 0xC8	; 200
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	9c 83       	std	Y+4, r25	; 0x04
    11b6:	8b 83       	std	Y+3, r24	; 0x03
    11b8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ba:	9c 81       	ldd	r25, Y+4	; 0x04
    11bc:	01 97       	sbiw	r24, 0x01	; 1
    11be:	f1 f7       	brne	.-4      	; 0x11bc <C_LCD_voidSendCommand+0x3da>
    11c0:	9c 83       	std	Y+4, r25	; 0x04
    11c2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11c4:	8d 81       	ldd	r24, Y+5	; 0x05
    11c6:	9e 81       	ldd	r25, Y+6	; 0x06
    11c8:	01 97       	sbiw	r24, 0x01	; 1
    11ca:	9e 83       	std	Y+6, r25	; 0x06
    11cc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11ce:	8d 81       	ldd	r24, Y+5	; 0x05
    11d0:	9e 81       	ldd	r25, Y+6	; 0x06
    11d2:	00 97       	sbiw	r24, 0x00	; 0
    11d4:	69 f7       	brne	.-38     	; 0x11b0 <C_LCD_voidSendCommand+0x3ce>
    11d6:	14 c0       	rjmp	.+40     	; 0x1200 <C_LCD_voidSendCommand+0x41e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11d8:	6f 81       	ldd	r22, Y+7	; 0x07
    11da:	78 85       	ldd	r23, Y+8	; 0x08
    11dc:	89 85       	ldd	r24, Y+9	; 0x09
    11de:	9a 85       	ldd	r25, Y+10	; 0x0a
    11e0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11e4:	dc 01       	movw	r26, r24
    11e6:	cb 01       	movw	r24, r22
    11e8:	9e 83       	std	Y+6, r25	; 0x06
    11ea:	8d 83       	std	Y+5, r24	; 0x05
    11ec:	8d 81       	ldd	r24, Y+5	; 0x05
    11ee:	9e 81       	ldd	r25, Y+6	; 0x06
    11f0:	9a 83       	std	Y+2, r25	; 0x02
    11f2:	89 83       	std	Y+1, r24	; 0x01
    11f4:	89 81       	ldd	r24, Y+1	; 0x01
    11f6:	9a 81       	ldd	r25, Y+2	; 0x02
    11f8:	01 97       	sbiw	r24, 0x01	; 1
    11fa:	f1 f7       	brne	.-4      	; 0x11f8 <C_LCD_voidSendCommand+0x416>
    11fc:	9a 83       	std	Y+2, r25	; 0x02
    11fe:	89 83       	std	Y+1, r24	; 0x01

#endif



}
    1200:	ea 96       	adiw	r28, 0x3a	; 58
    1202:	0f b6       	in	r0, 0x3f	; 63
    1204:	f8 94       	cli
    1206:	de bf       	out	0x3e, r29	; 62
    1208:	0f be       	out	0x3f, r0	; 63
    120a:	cd bf       	out	0x3d, r28	; 61
    120c:	cf 91       	pop	r28
    120e:	df 91       	pop	r29
    1210:	1f 91       	pop	r17
    1212:	08 95       	ret

00001214 <CLCD_voidSendData>:

void CLCD_voidSendData(u8 Copy_u8Data)
{
    1214:	1f 93       	push	r17
    1216:	df 93       	push	r29
    1218:	cf 93       	push	r28
    121a:	cd b7       	in	r28, 0x3d	; 61
    121c:	de b7       	in	r29, 0x3e	; 62
    121e:	ea 97       	sbiw	r28, 0x3a	; 58
    1220:	0f b6       	in	r0, 0x3f	; 63
    1222:	f8 94       	cli
    1224:	de bf       	out	0x3e, r29	; 62
    1226:	0f be       	out	0x3f, r0	; 63
    1228:	cd bf       	out	0x3d, r28	; 61
    122a:	8a af       	std	Y+58, r24	; 0x3a
	/*Set RS Pin to low to send data */
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_HIGH);
    122c:	80 e0       	ldi	r24, 0x00	; 0
    122e:	61 e0       	ldi	r22, 0x01	; 1
    1230:	41 e0       	ldi	r20, 0x01	; 1
    1232:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <DIO_u8SetPinValue>
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);

#elif   MODE_SELECT ==_4_BIT_MODE

	u8 Local_u8Data = (((Copy_u8Data>>1) & CLCD_COMMAND_MASK) | DIO_u8AndWithPort(CLCD_DATA_PORT, CLCD_DATA_PORT_MASK));
    1236:	8a ad       	ldd	r24, Y+58	; 0x3a
    1238:	86 95       	lsr	r24
    123a:	18 2f       	mov	r17, r24
    123c:	18 77       	andi	r17, 0x78	; 120
    123e:	80 e0       	ldi	r24, 0x00	; 0
    1240:	67 e8       	ldi	r22, 0x87	; 135
    1242:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <DIO_u8AndWithPort>
    1246:	81 2b       	or	r24, r17
    1248:	89 af       	std	Y+57, r24	; 0x39
	/* Set Command to data pins */
	DIO_u8SetPortValue(CLCD_DATA_PORT,Local_u8Data);
    124a:	80 e0       	ldi	r24, 0x00	; 0
    124c:	69 ad       	ldd	r22, Y+57	; 0x39
    124e:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <DIO_u8SetPortValue>

	/*Send Enable pulse */
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    1252:	80 e0       	ldi	r24, 0x00	; 0
    1254:	62 e0       	ldi	r22, 0x02	; 2
    1256:	41 e0       	ldi	r20, 0x01	; 1
    1258:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <DIO_u8SetPinValue>
    125c:	80 e0       	ldi	r24, 0x00	; 0
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	a0 e0       	ldi	r26, 0x00	; 0
    1262:	b0 e4       	ldi	r27, 0x40	; 64
    1264:	8d ab       	std	Y+53, r24	; 0x35
    1266:	9e ab       	std	Y+54, r25	; 0x36
    1268:	af ab       	std	Y+55, r26	; 0x37
    126a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    126c:	6d a9       	ldd	r22, Y+53	; 0x35
    126e:	7e a9       	ldd	r23, Y+54	; 0x36
    1270:	8f a9       	ldd	r24, Y+55	; 0x37
    1272:	98 ad       	ldd	r25, Y+56	; 0x38
    1274:	20 e0       	ldi	r18, 0x00	; 0
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	4a ef       	ldi	r20, 0xFA	; 250
    127a:	54 e4       	ldi	r21, 0x44	; 68
    127c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1280:	dc 01       	movw	r26, r24
    1282:	cb 01       	movw	r24, r22
    1284:	89 ab       	std	Y+49, r24	; 0x31
    1286:	9a ab       	std	Y+50, r25	; 0x32
    1288:	ab ab       	std	Y+51, r26	; 0x33
    128a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    128c:	69 a9       	ldd	r22, Y+49	; 0x31
    128e:	7a a9       	ldd	r23, Y+50	; 0x32
    1290:	8b a9       	ldd	r24, Y+51	; 0x33
    1292:	9c a9       	ldd	r25, Y+52	; 0x34
    1294:	20 e0       	ldi	r18, 0x00	; 0
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	40 e8       	ldi	r20, 0x80	; 128
    129a:	5f e3       	ldi	r21, 0x3F	; 63
    129c:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    12a0:	88 23       	and	r24, r24
    12a2:	2c f4       	brge	.+10     	; 0x12ae <CLCD_voidSendData+0x9a>
		__ticks = 1;
    12a4:	81 e0       	ldi	r24, 0x01	; 1
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	98 ab       	std	Y+48, r25	; 0x30
    12aa:	8f a7       	std	Y+47, r24	; 0x2f
    12ac:	3f c0       	rjmp	.+126    	; 0x132c <CLCD_voidSendData+0x118>
	else if (__tmp > 65535)
    12ae:	69 a9       	ldd	r22, Y+49	; 0x31
    12b0:	7a a9       	ldd	r23, Y+50	; 0x32
    12b2:	8b a9       	ldd	r24, Y+51	; 0x33
    12b4:	9c a9       	ldd	r25, Y+52	; 0x34
    12b6:	20 e0       	ldi	r18, 0x00	; 0
    12b8:	3f ef       	ldi	r19, 0xFF	; 255
    12ba:	4f e7       	ldi	r20, 0x7F	; 127
    12bc:	57 e4       	ldi	r21, 0x47	; 71
    12be:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    12c2:	18 16       	cp	r1, r24
    12c4:	4c f5       	brge	.+82     	; 0x1318 <CLCD_voidSendData+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12c6:	6d a9       	ldd	r22, Y+53	; 0x35
    12c8:	7e a9       	ldd	r23, Y+54	; 0x36
    12ca:	8f a9       	ldd	r24, Y+55	; 0x37
    12cc:	98 ad       	ldd	r25, Y+56	; 0x38
    12ce:	20 e0       	ldi	r18, 0x00	; 0
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	40 e2       	ldi	r20, 0x20	; 32
    12d4:	51 e4       	ldi	r21, 0x41	; 65
    12d6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    12da:	dc 01       	movw	r26, r24
    12dc:	cb 01       	movw	r24, r22
    12de:	bc 01       	movw	r22, r24
    12e0:	cd 01       	movw	r24, r26
    12e2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    12e6:	dc 01       	movw	r26, r24
    12e8:	cb 01       	movw	r24, r22
    12ea:	98 ab       	std	Y+48, r25	; 0x30
    12ec:	8f a7       	std	Y+47, r24	; 0x2f
    12ee:	0f c0       	rjmp	.+30     	; 0x130e <CLCD_voidSendData+0xfa>
    12f0:	88 ec       	ldi	r24, 0xC8	; 200
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	9e a7       	std	Y+46, r25	; 0x2e
    12f6:	8d a7       	std	Y+45, r24	; 0x2d
    12f8:	8d a5       	ldd	r24, Y+45	; 0x2d
    12fa:	9e a5       	ldd	r25, Y+46	; 0x2e
    12fc:	01 97       	sbiw	r24, 0x01	; 1
    12fe:	f1 f7       	brne	.-4      	; 0x12fc <CLCD_voidSendData+0xe8>
    1300:	9e a7       	std	Y+46, r25	; 0x2e
    1302:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1304:	8f a5       	ldd	r24, Y+47	; 0x2f
    1306:	98 a9       	ldd	r25, Y+48	; 0x30
    1308:	01 97       	sbiw	r24, 0x01	; 1
    130a:	98 ab       	std	Y+48, r25	; 0x30
    130c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    130e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1310:	98 a9       	ldd	r25, Y+48	; 0x30
    1312:	00 97       	sbiw	r24, 0x00	; 0
    1314:	69 f7       	brne	.-38     	; 0x12f0 <CLCD_voidSendData+0xdc>
    1316:	14 c0       	rjmp	.+40     	; 0x1340 <CLCD_voidSendData+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1318:	69 a9       	ldd	r22, Y+49	; 0x31
    131a:	7a a9       	ldd	r23, Y+50	; 0x32
    131c:	8b a9       	ldd	r24, Y+51	; 0x33
    131e:	9c a9       	ldd	r25, Y+52	; 0x34
    1320:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1324:	dc 01       	movw	r26, r24
    1326:	cb 01       	movw	r24, r22
    1328:	98 ab       	std	Y+48, r25	; 0x30
    132a:	8f a7       	std	Y+47, r24	; 0x2f
    132c:	8f a5       	ldd	r24, Y+47	; 0x2f
    132e:	98 a9       	ldd	r25, Y+48	; 0x30
    1330:	9c a7       	std	Y+44, r25	; 0x2c
    1332:	8b a7       	std	Y+43, r24	; 0x2b
    1334:	8b a5       	ldd	r24, Y+43	; 0x2b
    1336:	9c a5       	ldd	r25, Y+44	; 0x2c
    1338:	01 97       	sbiw	r24, 0x01	; 1
    133a:	f1 f7       	brne	.-4      	; 0x1338 <CLCD_voidSendData+0x124>
    133c:	9c a7       	std	Y+44, r25	; 0x2c
    133e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    1340:	80 e0       	ldi	r24, 0x00	; 0
    1342:	62 e0       	ldi	r22, 0x02	; 2
    1344:	40 e0       	ldi	r20, 0x00	; 0
    1346:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <DIO_u8SetPinValue>
    134a:	80 e0       	ldi	r24, 0x00	; 0
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	a0 ea       	ldi	r26, 0xA0	; 160
    1350:	b0 e4       	ldi	r27, 0x40	; 64
    1352:	8f a3       	std	Y+39, r24	; 0x27
    1354:	98 a7       	std	Y+40, r25	; 0x28
    1356:	a9 a7       	std	Y+41, r26	; 0x29
    1358:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    135a:	6f a1       	ldd	r22, Y+39	; 0x27
    135c:	78 a5       	ldd	r23, Y+40	; 0x28
    135e:	89 a5       	ldd	r24, Y+41	; 0x29
    1360:	9a a5       	ldd	r25, Y+42	; 0x2a
    1362:	20 e0       	ldi	r18, 0x00	; 0
    1364:	30 e0       	ldi	r19, 0x00	; 0
    1366:	4a ef       	ldi	r20, 0xFA	; 250
    1368:	54 e4       	ldi	r21, 0x44	; 68
    136a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    136e:	dc 01       	movw	r26, r24
    1370:	cb 01       	movw	r24, r22
    1372:	8b a3       	std	Y+35, r24	; 0x23
    1374:	9c a3       	std	Y+36, r25	; 0x24
    1376:	ad a3       	std	Y+37, r26	; 0x25
    1378:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    137a:	6b a1       	ldd	r22, Y+35	; 0x23
    137c:	7c a1       	ldd	r23, Y+36	; 0x24
    137e:	8d a1       	ldd	r24, Y+37	; 0x25
    1380:	9e a1       	ldd	r25, Y+38	; 0x26
    1382:	20 e0       	ldi	r18, 0x00	; 0
    1384:	30 e0       	ldi	r19, 0x00	; 0
    1386:	40 e8       	ldi	r20, 0x80	; 128
    1388:	5f e3       	ldi	r21, 0x3F	; 63
    138a:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    138e:	88 23       	and	r24, r24
    1390:	2c f4       	brge	.+10     	; 0x139c <CLCD_voidSendData+0x188>
		__ticks = 1;
    1392:	81 e0       	ldi	r24, 0x01	; 1
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	9a a3       	std	Y+34, r25	; 0x22
    1398:	89 a3       	std	Y+33, r24	; 0x21
    139a:	3f c0       	rjmp	.+126    	; 0x141a <CLCD_voidSendData+0x206>
	else if (__tmp > 65535)
    139c:	6b a1       	ldd	r22, Y+35	; 0x23
    139e:	7c a1       	ldd	r23, Y+36	; 0x24
    13a0:	8d a1       	ldd	r24, Y+37	; 0x25
    13a2:	9e a1       	ldd	r25, Y+38	; 0x26
    13a4:	20 e0       	ldi	r18, 0x00	; 0
    13a6:	3f ef       	ldi	r19, 0xFF	; 255
    13a8:	4f e7       	ldi	r20, 0x7F	; 127
    13aa:	57 e4       	ldi	r21, 0x47	; 71
    13ac:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    13b0:	18 16       	cp	r1, r24
    13b2:	4c f5       	brge	.+82     	; 0x1406 <CLCD_voidSendData+0x1f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13b4:	6f a1       	ldd	r22, Y+39	; 0x27
    13b6:	78 a5       	ldd	r23, Y+40	; 0x28
    13b8:	89 a5       	ldd	r24, Y+41	; 0x29
    13ba:	9a a5       	ldd	r25, Y+42	; 0x2a
    13bc:	20 e0       	ldi	r18, 0x00	; 0
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	40 e2       	ldi	r20, 0x20	; 32
    13c2:	51 e4       	ldi	r21, 0x41	; 65
    13c4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13c8:	dc 01       	movw	r26, r24
    13ca:	cb 01       	movw	r24, r22
    13cc:	bc 01       	movw	r22, r24
    13ce:	cd 01       	movw	r24, r26
    13d0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13d4:	dc 01       	movw	r26, r24
    13d6:	cb 01       	movw	r24, r22
    13d8:	9a a3       	std	Y+34, r25	; 0x22
    13da:	89 a3       	std	Y+33, r24	; 0x21
    13dc:	0f c0       	rjmp	.+30     	; 0x13fc <CLCD_voidSendData+0x1e8>
    13de:	88 ec       	ldi	r24, 0xC8	; 200
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	98 a3       	std	Y+32, r25	; 0x20
    13e4:	8f 8f       	std	Y+31, r24	; 0x1f
    13e6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    13e8:	98 a1       	ldd	r25, Y+32	; 0x20
    13ea:	01 97       	sbiw	r24, 0x01	; 1
    13ec:	f1 f7       	brne	.-4      	; 0x13ea <CLCD_voidSendData+0x1d6>
    13ee:	98 a3       	std	Y+32, r25	; 0x20
    13f0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13f2:	89 a1       	ldd	r24, Y+33	; 0x21
    13f4:	9a a1       	ldd	r25, Y+34	; 0x22
    13f6:	01 97       	sbiw	r24, 0x01	; 1
    13f8:	9a a3       	std	Y+34, r25	; 0x22
    13fa:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13fc:	89 a1       	ldd	r24, Y+33	; 0x21
    13fe:	9a a1       	ldd	r25, Y+34	; 0x22
    1400:	00 97       	sbiw	r24, 0x00	; 0
    1402:	69 f7       	brne	.-38     	; 0x13de <CLCD_voidSendData+0x1ca>
    1404:	14 c0       	rjmp	.+40     	; 0x142e <CLCD_voidSendData+0x21a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1406:	6b a1       	ldd	r22, Y+35	; 0x23
    1408:	7c a1       	ldd	r23, Y+36	; 0x24
    140a:	8d a1       	ldd	r24, Y+37	; 0x25
    140c:	9e a1       	ldd	r25, Y+38	; 0x26
    140e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1412:	dc 01       	movw	r26, r24
    1414:	cb 01       	movw	r24, r22
    1416:	9a a3       	std	Y+34, r25	; 0x22
    1418:	89 a3       	std	Y+33, r24	; 0x21
    141a:	89 a1       	ldd	r24, Y+33	; 0x21
    141c:	9a a1       	ldd	r25, Y+34	; 0x22
    141e:	9e 8f       	std	Y+30, r25	; 0x1e
    1420:	8d 8f       	std	Y+29, r24	; 0x1d
    1422:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1424:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1426:	01 97       	sbiw	r24, 0x01	; 1
    1428:	f1 f7       	brne	.-4      	; 0x1426 <CLCD_voidSendData+0x212>
    142a:	9e 8f       	std	Y+30, r25	; 0x1e
    142c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);

	Local_u8Data = ((Copy_u8Data <<3) |DIO_u8AndWithPort(CLCD_DATA_PORT, CLCD_DATA_PORT_MASK));
    142e:	8a ad       	ldd	r24, Y+58	; 0x3a
    1430:	88 2f       	mov	r24, r24
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	88 0f       	add	r24, r24
    1436:	99 1f       	adc	r25, r25
    1438:	88 0f       	add	r24, r24
    143a:	99 1f       	adc	r25, r25
    143c:	88 0f       	add	r24, r24
    143e:	99 1f       	adc	r25, r25
    1440:	18 2f       	mov	r17, r24
    1442:	80 e0       	ldi	r24, 0x00	; 0
    1444:	67 e8       	ldi	r22, 0x87	; 135
    1446:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <DIO_u8AndWithPort>
    144a:	81 2b       	or	r24, r17
    144c:	89 af       	std	Y+57, r24	; 0x39

	DIO_u8SetPortValue(CLCD_DATA_PORT,Local_u8Data);
    144e:	80 e0       	ldi	r24, 0x00	; 0
    1450:	69 ad       	ldd	r22, Y+57	; 0x39
    1452:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <DIO_u8SetPortValue>

	/*Send Enable pulse */
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    1456:	80 e0       	ldi	r24, 0x00	; 0
    1458:	62 e0       	ldi	r22, 0x02	; 2
    145a:	41 e0       	ldi	r20, 0x01	; 1
    145c:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <DIO_u8SetPinValue>
    1460:	80 e0       	ldi	r24, 0x00	; 0
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	a0 e0       	ldi	r26, 0x00	; 0
    1466:	b0 e4       	ldi	r27, 0x40	; 64
    1468:	89 8f       	std	Y+25, r24	; 0x19
    146a:	9a 8f       	std	Y+26, r25	; 0x1a
    146c:	ab 8f       	std	Y+27, r26	; 0x1b
    146e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1470:	69 8d       	ldd	r22, Y+25	; 0x19
    1472:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1474:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1476:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1478:	20 e0       	ldi	r18, 0x00	; 0
    147a:	30 e0       	ldi	r19, 0x00	; 0
    147c:	4a ef       	ldi	r20, 0xFA	; 250
    147e:	54 e4       	ldi	r21, 0x44	; 68
    1480:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1484:	dc 01       	movw	r26, r24
    1486:	cb 01       	movw	r24, r22
    1488:	8d 8b       	std	Y+21, r24	; 0x15
    148a:	9e 8b       	std	Y+22, r25	; 0x16
    148c:	af 8b       	std	Y+23, r26	; 0x17
    148e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1490:	6d 89       	ldd	r22, Y+21	; 0x15
    1492:	7e 89       	ldd	r23, Y+22	; 0x16
    1494:	8f 89       	ldd	r24, Y+23	; 0x17
    1496:	98 8d       	ldd	r25, Y+24	; 0x18
    1498:	20 e0       	ldi	r18, 0x00	; 0
    149a:	30 e0       	ldi	r19, 0x00	; 0
    149c:	40 e8       	ldi	r20, 0x80	; 128
    149e:	5f e3       	ldi	r21, 0x3F	; 63
    14a0:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    14a4:	88 23       	and	r24, r24
    14a6:	2c f4       	brge	.+10     	; 0x14b2 <CLCD_voidSendData+0x29e>
		__ticks = 1;
    14a8:	81 e0       	ldi	r24, 0x01	; 1
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	9c 8b       	std	Y+20, r25	; 0x14
    14ae:	8b 8b       	std	Y+19, r24	; 0x13
    14b0:	3f c0       	rjmp	.+126    	; 0x1530 <CLCD_voidSendData+0x31c>
	else if (__tmp > 65535)
    14b2:	6d 89       	ldd	r22, Y+21	; 0x15
    14b4:	7e 89       	ldd	r23, Y+22	; 0x16
    14b6:	8f 89       	ldd	r24, Y+23	; 0x17
    14b8:	98 8d       	ldd	r25, Y+24	; 0x18
    14ba:	20 e0       	ldi	r18, 0x00	; 0
    14bc:	3f ef       	ldi	r19, 0xFF	; 255
    14be:	4f e7       	ldi	r20, 0x7F	; 127
    14c0:	57 e4       	ldi	r21, 0x47	; 71
    14c2:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    14c6:	18 16       	cp	r1, r24
    14c8:	4c f5       	brge	.+82     	; 0x151c <CLCD_voidSendData+0x308>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14ca:	69 8d       	ldd	r22, Y+25	; 0x19
    14cc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14d0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14d2:	20 e0       	ldi	r18, 0x00	; 0
    14d4:	30 e0       	ldi	r19, 0x00	; 0
    14d6:	40 e2       	ldi	r20, 0x20	; 32
    14d8:	51 e4       	ldi	r21, 0x41	; 65
    14da:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14de:	dc 01       	movw	r26, r24
    14e0:	cb 01       	movw	r24, r22
    14e2:	bc 01       	movw	r22, r24
    14e4:	cd 01       	movw	r24, r26
    14e6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14ea:	dc 01       	movw	r26, r24
    14ec:	cb 01       	movw	r24, r22
    14ee:	9c 8b       	std	Y+20, r25	; 0x14
    14f0:	8b 8b       	std	Y+19, r24	; 0x13
    14f2:	0f c0       	rjmp	.+30     	; 0x1512 <CLCD_voidSendData+0x2fe>
    14f4:	88 ec       	ldi	r24, 0xC8	; 200
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	9a 8b       	std	Y+18, r25	; 0x12
    14fa:	89 8b       	std	Y+17, r24	; 0x11
    14fc:	89 89       	ldd	r24, Y+17	; 0x11
    14fe:	9a 89       	ldd	r25, Y+18	; 0x12
    1500:	01 97       	sbiw	r24, 0x01	; 1
    1502:	f1 f7       	brne	.-4      	; 0x1500 <CLCD_voidSendData+0x2ec>
    1504:	9a 8b       	std	Y+18, r25	; 0x12
    1506:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1508:	8b 89       	ldd	r24, Y+19	; 0x13
    150a:	9c 89       	ldd	r25, Y+20	; 0x14
    150c:	01 97       	sbiw	r24, 0x01	; 1
    150e:	9c 8b       	std	Y+20, r25	; 0x14
    1510:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1512:	8b 89       	ldd	r24, Y+19	; 0x13
    1514:	9c 89       	ldd	r25, Y+20	; 0x14
    1516:	00 97       	sbiw	r24, 0x00	; 0
    1518:	69 f7       	brne	.-38     	; 0x14f4 <CLCD_voidSendData+0x2e0>
    151a:	14 c0       	rjmp	.+40     	; 0x1544 <CLCD_voidSendData+0x330>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    151c:	6d 89       	ldd	r22, Y+21	; 0x15
    151e:	7e 89       	ldd	r23, Y+22	; 0x16
    1520:	8f 89       	ldd	r24, Y+23	; 0x17
    1522:	98 8d       	ldd	r25, Y+24	; 0x18
    1524:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1528:	dc 01       	movw	r26, r24
    152a:	cb 01       	movw	r24, r22
    152c:	9c 8b       	std	Y+20, r25	; 0x14
    152e:	8b 8b       	std	Y+19, r24	; 0x13
    1530:	8b 89       	ldd	r24, Y+19	; 0x13
    1532:	9c 89       	ldd	r25, Y+20	; 0x14
    1534:	98 8b       	std	Y+16, r25	; 0x10
    1536:	8f 87       	std	Y+15, r24	; 0x0f
    1538:	8f 85       	ldd	r24, Y+15	; 0x0f
    153a:	98 89       	ldd	r25, Y+16	; 0x10
    153c:	01 97       	sbiw	r24, 0x01	; 1
    153e:	f1 f7       	brne	.-4      	; 0x153c <CLCD_voidSendData+0x328>
    1540:	98 8b       	std	Y+16, r25	; 0x10
    1542:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    1544:	80 e0       	ldi	r24, 0x00	; 0
    1546:	62 e0       	ldi	r22, 0x02	; 2
    1548:	40 e0       	ldi	r20, 0x00	; 0
    154a:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <DIO_u8SetPinValue>
    154e:	80 e0       	ldi	r24, 0x00	; 0
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	a0 ea       	ldi	r26, 0xA0	; 160
    1554:	b0 e4       	ldi	r27, 0x40	; 64
    1556:	8b 87       	std	Y+11, r24	; 0x0b
    1558:	9c 87       	std	Y+12, r25	; 0x0c
    155a:	ad 87       	std	Y+13, r26	; 0x0d
    155c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    155e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1560:	7c 85       	ldd	r23, Y+12	; 0x0c
    1562:	8d 85       	ldd	r24, Y+13	; 0x0d
    1564:	9e 85       	ldd	r25, Y+14	; 0x0e
    1566:	20 e0       	ldi	r18, 0x00	; 0
    1568:	30 e0       	ldi	r19, 0x00	; 0
    156a:	4a ef       	ldi	r20, 0xFA	; 250
    156c:	54 e4       	ldi	r21, 0x44	; 68
    156e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1572:	dc 01       	movw	r26, r24
    1574:	cb 01       	movw	r24, r22
    1576:	8f 83       	std	Y+7, r24	; 0x07
    1578:	98 87       	std	Y+8, r25	; 0x08
    157a:	a9 87       	std	Y+9, r26	; 0x09
    157c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    157e:	6f 81       	ldd	r22, Y+7	; 0x07
    1580:	78 85       	ldd	r23, Y+8	; 0x08
    1582:	89 85       	ldd	r24, Y+9	; 0x09
    1584:	9a 85       	ldd	r25, Y+10	; 0x0a
    1586:	20 e0       	ldi	r18, 0x00	; 0
    1588:	30 e0       	ldi	r19, 0x00	; 0
    158a:	40 e8       	ldi	r20, 0x80	; 128
    158c:	5f e3       	ldi	r21, 0x3F	; 63
    158e:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    1592:	88 23       	and	r24, r24
    1594:	2c f4       	brge	.+10     	; 0x15a0 <CLCD_voidSendData+0x38c>
		__ticks = 1;
    1596:	81 e0       	ldi	r24, 0x01	; 1
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	9e 83       	std	Y+6, r25	; 0x06
    159c:	8d 83       	std	Y+5, r24	; 0x05
    159e:	3f c0       	rjmp	.+126    	; 0x161e <CLCD_voidSendData+0x40a>
	else if (__tmp > 65535)
    15a0:	6f 81       	ldd	r22, Y+7	; 0x07
    15a2:	78 85       	ldd	r23, Y+8	; 0x08
    15a4:	89 85       	ldd	r24, Y+9	; 0x09
    15a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    15a8:	20 e0       	ldi	r18, 0x00	; 0
    15aa:	3f ef       	ldi	r19, 0xFF	; 255
    15ac:	4f e7       	ldi	r20, 0x7F	; 127
    15ae:	57 e4       	ldi	r21, 0x47	; 71
    15b0:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    15b4:	18 16       	cp	r1, r24
    15b6:	4c f5       	brge	.+82     	; 0x160a <CLCD_voidSendData+0x3f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    15ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    15bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    15be:	9e 85       	ldd	r25, Y+14	; 0x0e
    15c0:	20 e0       	ldi	r18, 0x00	; 0
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	40 e2       	ldi	r20, 0x20	; 32
    15c6:	51 e4       	ldi	r21, 0x41	; 65
    15c8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15cc:	dc 01       	movw	r26, r24
    15ce:	cb 01       	movw	r24, r22
    15d0:	bc 01       	movw	r22, r24
    15d2:	cd 01       	movw	r24, r26
    15d4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15d8:	dc 01       	movw	r26, r24
    15da:	cb 01       	movw	r24, r22
    15dc:	9e 83       	std	Y+6, r25	; 0x06
    15de:	8d 83       	std	Y+5, r24	; 0x05
    15e0:	0f c0       	rjmp	.+30     	; 0x1600 <CLCD_voidSendData+0x3ec>
    15e2:	88 ec       	ldi	r24, 0xC8	; 200
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	9c 83       	std	Y+4, r25	; 0x04
    15e8:	8b 83       	std	Y+3, r24	; 0x03
    15ea:	8b 81       	ldd	r24, Y+3	; 0x03
    15ec:	9c 81       	ldd	r25, Y+4	; 0x04
    15ee:	01 97       	sbiw	r24, 0x01	; 1
    15f0:	f1 f7       	brne	.-4      	; 0x15ee <CLCD_voidSendData+0x3da>
    15f2:	9c 83       	std	Y+4, r25	; 0x04
    15f4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15f6:	8d 81       	ldd	r24, Y+5	; 0x05
    15f8:	9e 81       	ldd	r25, Y+6	; 0x06
    15fa:	01 97       	sbiw	r24, 0x01	; 1
    15fc:	9e 83       	std	Y+6, r25	; 0x06
    15fe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1600:	8d 81       	ldd	r24, Y+5	; 0x05
    1602:	9e 81       	ldd	r25, Y+6	; 0x06
    1604:	00 97       	sbiw	r24, 0x00	; 0
    1606:	69 f7       	brne	.-38     	; 0x15e2 <CLCD_voidSendData+0x3ce>
    1608:	14 c0       	rjmp	.+40     	; 0x1632 <CLCD_voidSendData+0x41e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    160a:	6f 81       	ldd	r22, Y+7	; 0x07
    160c:	78 85       	ldd	r23, Y+8	; 0x08
    160e:	89 85       	ldd	r24, Y+9	; 0x09
    1610:	9a 85       	ldd	r25, Y+10	; 0x0a
    1612:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1616:	dc 01       	movw	r26, r24
    1618:	cb 01       	movw	r24, r22
    161a:	9e 83       	std	Y+6, r25	; 0x06
    161c:	8d 83       	std	Y+5, r24	; 0x05
    161e:	8d 81       	ldd	r24, Y+5	; 0x05
    1620:	9e 81       	ldd	r25, Y+6	; 0x06
    1622:	9a 83       	std	Y+2, r25	; 0x02
    1624:	89 83       	std	Y+1, r24	; 0x01
    1626:	89 81       	ldd	r24, Y+1	; 0x01
    1628:	9a 81       	ldd	r25, Y+2	; 0x02
    162a:	01 97       	sbiw	r24, 0x01	; 1
    162c:	f1 f7       	brne	.-4      	; 0x162a <CLCD_voidSendData+0x416>
    162e:	9a 83       	std	Y+2, r25	; 0x02
    1630:	89 83       	std	Y+1, r24	; 0x01



#endif

}
    1632:	ea 96       	adiw	r28, 0x3a	; 58
    1634:	0f b6       	in	r0, 0x3f	; 63
    1636:	f8 94       	cli
    1638:	de bf       	out	0x3e, r29	; 62
    163a:	0f be       	out	0x3f, r0	; 63
    163c:	cd bf       	out	0x3d, r28	; 61
    163e:	cf 91       	pop	r28
    1640:	df 91       	pop	r29
    1642:	1f 91       	pop	r17
    1644:	08 95       	ret

00001646 <CLCD_voidInit>:

void CLCD_voidInit(void)
{
    1646:	df 93       	push	r29
    1648:	cf 93       	push	r28
    164a:	cd b7       	in	r28, 0x3d	; 61
    164c:	de b7       	in	r29, 0x3e	; 62
    164e:	2e 97       	sbiw	r28, 0x0e	; 14
    1650:	0f b6       	in	r0, 0x3f	; 63
    1652:	f8 94       	cli
    1654:	de bf       	out	0x3e, r29	; 62
    1656:	0f be       	out	0x3f, r0	; 63
    1658:	cd bf       	out	0x3d, r28	; 61
    165a:	80 e0       	ldi	r24, 0x00	; 0
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	a0 e2       	ldi	r26, 0x20	; 32
    1660:	b2 e4       	ldi	r27, 0x42	; 66
    1662:	8b 87       	std	Y+11, r24	; 0x0b
    1664:	9c 87       	std	Y+12, r25	; 0x0c
    1666:	ad 87       	std	Y+13, r26	; 0x0d
    1668:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    166a:	6b 85       	ldd	r22, Y+11	; 0x0b
    166c:	7c 85       	ldd	r23, Y+12	; 0x0c
    166e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1670:	9e 85       	ldd	r25, Y+14	; 0x0e
    1672:	20 e0       	ldi	r18, 0x00	; 0
    1674:	30 e0       	ldi	r19, 0x00	; 0
    1676:	4a ef       	ldi	r20, 0xFA	; 250
    1678:	54 e4       	ldi	r21, 0x44	; 68
    167a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    167e:	dc 01       	movw	r26, r24
    1680:	cb 01       	movw	r24, r22
    1682:	8f 83       	std	Y+7, r24	; 0x07
    1684:	98 87       	std	Y+8, r25	; 0x08
    1686:	a9 87       	std	Y+9, r26	; 0x09
    1688:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    168a:	6f 81       	ldd	r22, Y+7	; 0x07
    168c:	78 85       	ldd	r23, Y+8	; 0x08
    168e:	89 85       	ldd	r24, Y+9	; 0x09
    1690:	9a 85       	ldd	r25, Y+10	; 0x0a
    1692:	20 e0       	ldi	r18, 0x00	; 0
    1694:	30 e0       	ldi	r19, 0x00	; 0
    1696:	40 e8       	ldi	r20, 0x80	; 128
    1698:	5f e3       	ldi	r21, 0x3F	; 63
    169a:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    169e:	88 23       	and	r24, r24
    16a0:	2c f4       	brge	.+10     	; 0x16ac <CLCD_voidInit+0x66>
		__ticks = 1;
    16a2:	81 e0       	ldi	r24, 0x01	; 1
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	9e 83       	std	Y+6, r25	; 0x06
    16a8:	8d 83       	std	Y+5, r24	; 0x05
    16aa:	3f c0       	rjmp	.+126    	; 0x172a <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
    16ac:	6f 81       	ldd	r22, Y+7	; 0x07
    16ae:	78 85       	ldd	r23, Y+8	; 0x08
    16b0:	89 85       	ldd	r24, Y+9	; 0x09
    16b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    16b4:	20 e0       	ldi	r18, 0x00	; 0
    16b6:	3f ef       	ldi	r19, 0xFF	; 255
    16b8:	4f e7       	ldi	r20, 0x7F	; 127
    16ba:	57 e4       	ldi	r21, 0x47	; 71
    16bc:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    16c0:	18 16       	cp	r1, r24
    16c2:	4c f5       	brge	.+82     	; 0x1716 <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    16c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    16c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    16ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    16cc:	20 e0       	ldi	r18, 0x00	; 0
    16ce:	30 e0       	ldi	r19, 0x00	; 0
    16d0:	40 e2       	ldi	r20, 0x20	; 32
    16d2:	51 e4       	ldi	r21, 0x41	; 65
    16d4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16d8:	dc 01       	movw	r26, r24
    16da:	cb 01       	movw	r24, r22
    16dc:	bc 01       	movw	r22, r24
    16de:	cd 01       	movw	r24, r26
    16e0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16e4:	dc 01       	movw	r26, r24
    16e6:	cb 01       	movw	r24, r22
    16e8:	9e 83       	std	Y+6, r25	; 0x06
    16ea:	8d 83       	std	Y+5, r24	; 0x05
    16ec:	0f c0       	rjmp	.+30     	; 0x170c <CLCD_voidInit+0xc6>
    16ee:	88 ec       	ldi	r24, 0xC8	; 200
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	9c 83       	std	Y+4, r25	; 0x04
    16f4:	8b 83       	std	Y+3, r24	; 0x03
    16f6:	8b 81       	ldd	r24, Y+3	; 0x03
    16f8:	9c 81       	ldd	r25, Y+4	; 0x04
    16fa:	01 97       	sbiw	r24, 0x01	; 1
    16fc:	f1 f7       	brne	.-4      	; 0x16fa <CLCD_voidInit+0xb4>
    16fe:	9c 83       	std	Y+4, r25	; 0x04
    1700:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1702:	8d 81       	ldd	r24, Y+5	; 0x05
    1704:	9e 81       	ldd	r25, Y+6	; 0x06
    1706:	01 97       	sbiw	r24, 0x01	; 1
    1708:	9e 83       	std	Y+6, r25	; 0x06
    170a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    170c:	8d 81       	ldd	r24, Y+5	; 0x05
    170e:	9e 81       	ldd	r25, Y+6	; 0x06
    1710:	00 97       	sbiw	r24, 0x00	; 0
    1712:	69 f7       	brne	.-38     	; 0x16ee <CLCD_voidInit+0xa8>
    1714:	14 c0       	rjmp	.+40     	; 0x173e <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1716:	6f 81       	ldd	r22, Y+7	; 0x07
    1718:	78 85       	ldd	r23, Y+8	; 0x08
    171a:	89 85       	ldd	r24, Y+9	; 0x09
    171c:	9a 85       	ldd	r25, Y+10	; 0x0a
    171e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1722:	dc 01       	movw	r26, r24
    1724:	cb 01       	movw	r24, r22
    1726:	9e 83       	std	Y+6, r25	; 0x06
    1728:	8d 83       	std	Y+5, r24	; 0x05
    172a:	8d 81       	ldd	r24, Y+5	; 0x05
    172c:	9e 81       	ldd	r25, Y+6	; 0x06
    172e:	9a 83       	std	Y+2, r25	; 0x02
    1730:	89 83       	std	Y+1, r24	; 0x01
    1732:	89 81       	ldd	r24, Y+1	; 0x01
    1734:	9a 81       	ldd	r25, Y+2	; 0x02
    1736:	01 97       	sbiw	r24, 0x01	; 1
    1738:	f1 f7       	brne	.-4      	; 0x1736 <CLCD_voidInit+0xf0>
    173a:	9a 83       	std	Y+2, r25	; 0x02
    173c:	89 83       	std	Y+1, r24	; 0x01
	C_LCD_voidSendCommand(0x01); /* 1 or 0x01 or 0b00000001*/

#elif   MODE_SELECT ==_4_BIT_MODE

	/* Function set command : 2 lines , 5*8 font size */
	C_LCD_voidSendCommand(0x33);
    173e:	83 e3       	ldi	r24, 0x33	; 51
    1740:	0e 94 f1 06 	call	0xde2	; 0xde2 <C_LCD_voidSendCommand>
	C_LCD_voidSendCommand(0x32);
    1744:	82 e3       	ldi	r24, 0x32	; 50
    1746:	0e 94 f1 06 	call	0xde2	; 0xde2 <C_LCD_voidSendCommand>
	C_LCD_voidSendCommand(0x28);   /* 0bNFXXXXXX  --> N: no of lines F: font size*/
    174a:	88 e2       	ldi	r24, 0x28	; 40
    174c:	0e 94 f1 06 	call	0xde2	; 0xde2 <C_LCD_voidSendCommand>


	/*Display on off control : disable enable , disable cursor , no blink cursor*/
	C_LCD_voidSendCommand(0x0C);
    1750:	8c e0       	ldi	r24, 0x0C	; 12
    1752:	0e 94 f1 06 	call	0xde2	; 0xde2 <C_LCD_voidSendCommand>
	C_LCD_voidSendCommand(0x02);
    1756:	82 e0       	ldi	r24, 0x02	; 2
    1758:	0e 94 f1 06 	call	0xde2	; 0xde2 <C_LCD_voidSendCommand>

	C_LCD_voidSendCommand(0x06);
    175c:	86 e0       	ldi	r24, 0x06	; 6
    175e:	0e 94 f1 06 	call	0xde2	; 0xde2 <C_LCD_voidSendCommand>

	/* Clear display */
	C_LCD_voidSendCommand(0x01);
    1762:	81 e0       	ldi	r24, 0x01	; 1
    1764:	0e 94 f1 06 	call	0xde2	; 0xde2 <C_LCD_voidSendCommand>


#endif


}
    1768:	2e 96       	adiw	r28, 0x0e	; 14
    176a:	0f b6       	in	r0, 0x3f	; 63
    176c:	f8 94       	cli
    176e:	de bf       	out	0x3e, r29	; 62
    1770:	0f be       	out	0x3f, r0	; 63
    1772:	cd bf       	out	0x3d, r28	; 61
    1774:	cf 91       	pop	r28
    1776:	df 91       	pop	r29
    1778:	08 95       	ret

0000177a <CLCD_voidSendString>:

void CLCD_voidSendString(const char* Copy_pcString )
{
    177a:	df 93       	push	r29
    177c:	cf 93       	push	r28
    177e:	00 d0       	rcall	.+0      	; 0x1780 <CLCD_voidSendString+0x6>
    1780:	0f 92       	push	r0
    1782:	cd b7       	in	r28, 0x3d	; 61
    1784:	de b7       	in	r29, 0x3e	; 62
    1786:	9b 83       	std	Y+3, r25	; 0x03
    1788:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Counter = 0;
    178a:	19 82       	std	Y+1, r1	; 0x01
    178c:	0e c0       	rjmp	.+28     	; 0x17aa <CLCD_voidSendString+0x30>
	while (Copy_pcString[Local_u8Counter] != NULL)
	{
		CLCD_voidSendData(Copy_pcString[Local_u8Counter]);
    178e:	89 81       	ldd	r24, Y+1	; 0x01
    1790:	28 2f       	mov	r18, r24
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	8a 81       	ldd	r24, Y+2	; 0x02
    1796:	9b 81       	ldd	r25, Y+3	; 0x03
    1798:	fc 01       	movw	r30, r24
    179a:	e2 0f       	add	r30, r18
    179c:	f3 1f       	adc	r31, r19
    179e:	80 81       	ld	r24, Z
    17a0:	0e 94 0a 09 	call	0x1214	; 0x1214 <CLCD_voidSendData>
		Local_u8Counter++;
    17a4:	89 81       	ldd	r24, Y+1	; 0x01
    17a6:	8f 5f       	subi	r24, 0xFF	; 255
    17a8:	89 83       	std	Y+1, r24	; 0x01
}

void CLCD_voidSendString(const char* Copy_pcString )
{
	u8 Local_u8Counter = 0;
	while (Copy_pcString[Local_u8Counter] != NULL)
    17aa:	89 81       	ldd	r24, Y+1	; 0x01
    17ac:	28 2f       	mov	r18, r24
    17ae:	30 e0       	ldi	r19, 0x00	; 0
    17b0:	8a 81       	ldd	r24, Y+2	; 0x02
    17b2:	9b 81       	ldd	r25, Y+3	; 0x03
    17b4:	fc 01       	movw	r30, r24
    17b6:	e2 0f       	add	r30, r18
    17b8:	f3 1f       	adc	r31, r19
    17ba:	80 81       	ld	r24, Z
    17bc:	88 23       	and	r24, r24
    17be:	39 f7       	brne	.-50     	; 0x178e <CLCD_voidSendString+0x14>
	{
		CLCD_voidSendData(Copy_pcString[Local_u8Counter]);
		Local_u8Counter++;
	}
}
    17c0:	0f 90       	pop	r0
    17c2:	0f 90       	pop	r0
    17c4:	0f 90       	pop	r0
    17c6:	cf 91       	pop	r28
    17c8:	df 91       	pop	r29
    17ca:	08 95       	ret

000017cc <CLCD_voidGoToXY>:

void CLCD_voidGoToXY(u8 Copy_u8Xpos, u8 Copy_u8Ypos)
{
    17cc:	df 93       	push	r29
    17ce:	cf 93       	push	r28
    17d0:	00 d0       	rcall	.+0      	; 0x17d2 <CLCD_voidGoToXY+0x6>
    17d2:	0f 92       	push	r0
    17d4:	cd b7       	in	r28, 0x3d	; 61
    17d6:	de b7       	in	r29, 0x3e	; 62
    17d8:	8a 83       	std	Y+2, r24	; 0x02
    17da:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Adress=0;
    17dc:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8Xpos == 0)
    17de:	8a 81       	ldd	r24, Y+2	; 0x02
    17e0:	88 23       	and	r24, r24
    17e2:	19 f4       	brne	.+6      	; 0x17ea <CLCD_voidGoToXY+0x1e>
	{
		Local_u8Adress = Copy_u8Ypos;
    17e4:	8b 81       	ldd	r24, Y+3	; 0x03
    17e6:	89 83       	std	Y+1, r24	; 0x01
    17e8:	06 c0       	rjmp	.+12     	; 0x17f6 <CLCD_voidGoToXY+0x2a>
	}
	else if (Copy_u8Xpos == 1)
    17ea:	8a 81       	ldd	r24, Y+2	; 0x02
    17ec:	81 30       	cpi	r24, 0x01	; 1
    17ee:	19 f4       	brne	.+6      	; 0x17f6 <CLCD_voidGoToXY+0x2a>
	{
		Local_u8Adress = Copy_u8Ypos+0x40;
    17f0:	8b 81       	ldd	r24, Y+3	; 0x03
    17f2:	80 5c       	subi	r24, 0xC0	; 192
    17f4:	89 83       	std	Y+1, r24	; 0x01
	}

	C_LCD_voidSendCommand(Local_u8Adress+128);
    17f6:	89 81       	ldd	r24, Y+1	; 0x01
    17f8:	80 58       	subi	r24, 0x80	; 128
    17fa:	0e 94 f1 06 	call	0xde2	; 0xde2 <C_LCD_voidSendCommand>



}
    17fe:	0f 90       	pop	r0
    1800:	0f 90       	pop	r0
    1802:	0f 90       	pop	r0
    1804:	cf 91       	pop	r28
    1806:	df 91       	pop	r29
    1808:	08 95       	ret

0000180a <CLCD_voidWriteSpecialCharacter>:

void CLCD_voidWriteSpecialCharacter(u8* Copy_pu8Pattern, u8 Copy_u8PatternNumber, u8 Copy_u8XPos, u8 Copy_u8YPos)
{
    180a:	df 93       	push	r29
    180c:	cf 93       	push	r28
    180e:	cd b7       	in	r28, 0x3d	; 61
    1810:	de b7       	in	r29, 0x3e	; 62
    1812:	27 97       	sbiw	r28, 0x07	; 7
    1814:	0f b6       	in	r0, 0x3f	; 63
    1816:	f8 94       	cli
    1818:	de bf       	out	0x3e, r29	; 62
    181a:	0f be       	out	0x3f, r0	; 63
    181c:	cd bf       	out	0x3d, r28	; 61
    181e:	9c 83       	std	Y+4, r25	; 0x04
    1820:	8b 83       	std	Y+3, r24	; 0x03
    1822:	6d 83       	std	Y+5, r22	; 0x05
    1824:	4e 83       	std	Y+6, r20	; 0x06
    1826:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8CGRAMAddress= 0, Local_u8Iterator;
    1828:	1a 82       	std	Y+2, r1	; 0x02
	/* Calculate the CGRAM address whose each block is 8 bytes */
	Local_u8CGRAMAddress =Copy_u8PatternNumber*8;
    182a:	8d 81       	ldd	r24, Y+5	; 0x05
    182c:	88 2f       	mov	r24, r24
    182e:	90 e0       	ldi	r25, 0x00	; 0
    1830:	88 0f       	add	r24, r24
    1832:	99 1f       	adc	r25, r25
    1834:	88 0f       	add	r24, r24
    1836:	99 1f       	adc	r25, r25
    1838:	88 0f       	add	r24, r24
    183a:	99 1f       	adc	r25, r25
    183c:	8a 83       	std	Y+2, r24	; 0x02

	/* Send CGRAM Address command to LCD, with setting bit 6, clearing bit 7*/
	C_LCD_voidSendCommand(Local_u8CGRAMAddress+64);
    183e:	8a 81       	ldd	r24, Y+2	; 0x02
    1840:	80 5c       	subi	r24, 0xC0	; 192
    1842:	0e 94 f1 06 	call	0xde2	; 0xde2 <C_LCD_voidSendCommand>

	/* Write the pattern into CGRAM */

	for (Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++)
    1846:	19 82       	std	Y+1, r1	; 0x01
    1848:	0e c0       	rjmp	.+28     	; 0x1866 <CLCD_voidWriteSpecialCharacter+0x5c>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Iterator]);
    184a:	89 81       	ldd	r24, Y+1	; 0x01
    184c:	28 2f       	mov	r18, r24
    184e:	30 e0       	ldi	r19, 0x00	; 0
    1850:	8b 81       	ldd	r24, Y+3	; 0x03
    1852:	9c 81       	ldd	r25, Y+4	; 0x04
    1854:	fc 01       	movw	r30, r24
    1856:	e2 0f       	add	r30, r18
    1858:	f3 1f       	adc	r31, r19
    185a:	80 81       	ld	r24, Z
    185c:	0e 94 0a 09 	call	0x1214	; 0x1214 <CLCD_voidSendData>
	/* Send CGRAM Address command to LCD, with setting bit 6, clearing bit 7*/
	C_LCD_voidSendCommand(Local_u8CGRAMAddress+64);

	/* Write the pattern into CGRAM */

	for (Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++)
    1860:	89 81       	ldd	r24, Y+1	; 0x01
    1862:	8f 5f       	subi	r24, 0xFF	; 255
    1864:	89 83       	std	Y+1, r24	; 0x01
    1866:	89 81       	ldd	r24, Y+1	; 0x01
    1868:	88 30       	cpi	r24, 0x08	; 8
    186a:	78 f3       	brcs	.-34     	; 0x184a <CLCD_voidWriteSpecialCharacter+0x40>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Iterator]);
	}

	/* go back to the DDRAM to display the Pattern*/
	CLCD_voidGoToXY(Copy_u8XPos,Copy_u8YPos);
    186c:	8e 81       	ldd	r24, Y+6	; 0x06
    186e:	6f 81       	ldd	r22, Y+7	; 0x07
    1870:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <CLCD_voidGoToXY>
	/* Display the pattern written in the CGRAM*/
	CLCD_voidSendData(Copy_u8PatternNumber);
    1874:	8d 81       	ldd	r24, Y+5	; 0x05
    1876:	0e 94 0a 09 	call	0x1214	; 0x1214 <CLCD_voidSendData>
}
    187a:	27 96       	adiw	r28, 0x07	; 7
    187c:	0f b6       	in	r0, 0x3f	; 63
    187e:	f8 94       	cli
    1880:	de bf       	out	0x3e, r29	; 62
    1882:	0f be       	out	0x3f, r0	; 63
    1884:	cd bf       	out	0x3d, r28	; 61
    1886:	cf 91       	pop	r28
    1888:	df 91       	pop	r29
    188a:	08 95       	ret

0000188c <CLCD_VoidWriteNumber>:

void CLCD_VoidWriteNumber(f32 Copy_u32Number)
{
    188c:	0f 93       	push	r16
    188e:	1f 93       	push	r17
    1890:	df 93       	push	r29
    1892:	cf 93       	push	r28
    1894:	cd b7       	in	r28, 0x3d	; 61
    1896:	de b7       	in	r29, 0x3e	; 62
    1898:	6d 97       	sbiw	r28, 0x1d	; 29
    189a:	0f b6       	in	r0, 0x3f	; 63
    189c:	f8 94       	cli
    189e:	de bf       	out	0x3e, r29	; 62
    18a0:	0f be       	out	0x3f, r0	; 63
    18a2:	cd bf       	out	0x3d, r28	; 61
    18a4:	6a 8f       	std	Y+26, r22	; 0x1a
    18a6:	7b 8f       	std	Y+27, r23	; 0x1b
    18a8:	8c 8f       	std	Y+28, r24	; 0x1c
    18aa:	9d 8f       	std	Y+29, r25	; 0x1d
	s32 Local_s32Number = Copy_u32Number;
    18ac:	6a 8d       	ldd	r22, Y+26	; 0x1a
    18ae:	7b 8d       	ldd	r23, Y+27	; 0x1b
    18b0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    18b2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    18b4:	0e 94 2f 04 	call	0x85e	; 0x85e <__fixsfsi>
    18b8:	dc 01       	movw	r26, r24
    18ba:	cb 01       	movw	r24, r22
    18bc:	8a 83       	std	Y+2, r24	; 0x02
    18be:	9b 83       	std	Y+3, r25	; 0x03
    18c0:	ac 83       	std	Y+4, r26	; 0x04
    18c2:	bd 83       	std	Y+5, r27	; 0x05

	if(Local_s32Number == 0)
    18c4:	8a 81       	ldd	r24, Y+2	; 0x02
    18c6:	9b 81       	ldd	r25, Y+3	; 0x03
    18c8:	ac 81       	ldd	r26, Y+4	; 0x04
    18ca:	bd 81       	ldd	r27, Y+5	; 0x05
    18cc:	00 97       	sbiw	r24, 0x00	; 0
    18ce:	a1 05       	cpc	r26, r1
    18d0:	b1 05       	cpc	r27, r1
    18d2:	21 f4       	brne	.+8      	; 0x18dc <CLCD_VoidWriteNumber+0x50>
	{
		CLCD_voidSendData('0');
    18d4:	80 e3       	ldi	r24, 0x30	; 48
    18d6:	0e 94 0a 09 	call	0x1214	; 0x1214 <CLCD_voidSendData>
    18da:	18 c0       	rjmp	.+48     	; 0x190c <CLCD_VoidWriteNumber+0x80>
	}
	else if (Local_s32Number <0)
    18dc:	8a 81       	ldd	r24, Y+2	; 0x02
    18de:	9b 81       	ldd	r25, Y+3	; 0x03
    18e0:	ac 81       	ldd	r26, Y+4	; 0x04
    18e2:	bd 81       	ldd	r27, Y+5	; 0x05
    18e4:	bb 23       	and	r27, r27
    18e6:	94 f4       	brge	.+36     	; 0x190c <CLCD_VoidWriteNumber+0x80>
	{
		CLCD_voidSendData('-');
    18e8:	8d e2       	ldi	r24, 0x2D	; 45
    18ea:	0e 94 0a 09 	call	0x1214	; 0x1214 <CLCD_voidSendData>
		Local_s32Number = Local_s32Number *(-1);
    18ee:	8a 81       	ldd	r24, Y+2	; 0x02
    18f0:	9b 81       	ldd	r25, Y+3	; 0x03
    18f2:	ac 81       	ldd	r26, Y+4	; 0x04
    18f4:	bd 81       	ldd	r27, Y+5	; 0x05
    18f6:	b0 95       	com	r27
    18f8:	a0 95       	com	r26
    18fa:	90 95       	com	r25
    18fc:	81 95       	neg	r24
    18fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1900:	af 4f       	sbci	r26, 0xFF	; 255
    1902:	bf 4f       	sbci	r27, 0xFF	; 255
    1904:	8a 83       	std	Y+2, r24	; 0x02
    1906:	9b 83       	std	Y+3, r25	; 0x03
    1908:	ac 83       	std	Y+4, r26	; 0x04
    190a:	bd 83       	std	Y+5, r27	; 0x05

	}
	u8 Local_u8Array[20]={0};
    190c:	84 e1       	ldi	r24, 0x14	; 20
    190e:	fe 01       	movw	r30, r28
    1910:	36 96       	adiw	r30, 0x06	; 6
    1912:	df 01       	movw	r26, r30
    1914:	98 2f       	mov	r25, r24
    1916:	1d 92       	st	X+, r1
    1918:	9a 95       	dec	r25
    191a:	e9 f7       	brne	.-6      	; 0x1916 <CLCD_VoidWriteNumber+0x8a>
	s8 local_s8Counter =0;
    191c:	19 82       	std	Y+1, r1	; 0x01
    191e:	2f c0       	rjmp	.+94     	; 0x197e <CLCD_VoidWriteNumber+0xf2>
	while (Local_s32Number != 0)
	{
		Local_u8Array[local_s8Counter]= Local_s32Number%10;
    1920:	89 81       	ldd	r24, Y+1	; 0x01
    1922:	08 2f       	mov	r16, r24
    1924:	11 27       	eor	r17, r17
    1926:	07 fd       	sbrc	r16, 7
    1928:	10 95       	com	r17
    192a:	8a 81       	ldd	r24, Y+2	; 0x02
    192c:	9b 81       	ldd	r25, Y+3	; 0x03
    192e:	ac 81       	ldd	r26, Y+4	; 0x04
    1930:	bd 81       	ldd	r27, Y+5	; 0x05
    1932:	2a e0       	ldi	r18, 0x0A	; 10
    1934:	30 e0       	ldi	r19, 0x00	; 0
    1936:	40 e0       	ldi	r20, 0x00	; 0
    1938:	50 e0       	ldi	r21, 0x00	; 0
    193a:	bc 01       	movw	r22, r24
    193c:	cd 01       	movw	r24, r26
    193e:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <__divmodsi4>
    1942:	dc 01       	movw	r26, r24
    1944:	cb 01       	movw	r24, r22
    1946:	28 2f       	mov	r18, r24
    1948:	ce 01       	movw	r24, r28
    194a:	06 96       	adiw	r24, 0x06	; 6
    194c:	fc 01       	movw	r30, r24
    194e:	e0 0f       	add	r30, r16
    1950:	f1 1f       	adc	r31, r17
    1952:	20 83       	st	Z, r18
		Local_s32Number/=10;
    1954:	8a 81       	ldd	r24, Y+2	; 0x02
    1956:	9b 81       	ldd	r25, Y+3	; 0x03
    1958:	ac 81       	ldd	r26, Y+4	; 0x04
    195a:	bd 81       	ldd	r27, Y+5	; 0x05
    195c:	2a e0       	ldi	r18, 0x0A	; 10
    195e:	30 e0       	ldi	r19, 0x00	; 0
    1960:	40 e0       	ldi	r20, 0x00	; 0
    1962:	50 e0       	ldi	r21, 0x00	; 0
    1964:	bc 01       	movw	r22, r24
    1966:	cd 01       	movw	r24, r26
    1968:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <__divmodsi4>
    196c:	da 01       	movw	r26, r20
    196e:	c9 01       	movw	r24, r18
    1970:	8a 83       	std	Y+2, r24	; 0x02
    1972:	9b 83       	std	Y+3, r25	; 0x03
    1974:	ac 83       	std	Y+4, r26	; 0x04
    1976:	bd 83       	std	Y+5, r27	; 0x05
		local_s8Counter++;
    1978:	89 81       	ldd	r24, Y+1	; 0x01
    197a:	8f 5f       	subi	r24, 0xFF	; 255
    197c:	89 83       	std	Y+1, r24	; 0x01
		Local_s32Number = Local_s32Number *(-1);

	}
	u8 Local_u8Array[20]={0};
	s8 local_s8Counter =0;
	while (Local_s32Number != 0)
    197e:	8a 81       	ldd	r24, Y+2	; 0x02
    1980:	9b 81       	ldd	r25, Y+3	; 0x03
    1982:	ac 81       	ldd	r26, Y+4	; 0x04
    1984:	bd 81       	ldd	r27, Y+5	; 0x05
    1986:	00 97       	sbiw	r24, 0x00	; 0
    1988:	a1 05       	cpc	r26, r1
    198a:	b1 05       	cpc	r27, r1
    198c:	49 f6       	brne	.-110    	; 0x1920 <CLCD_VoidWriteNumber+0x94>
	{
		Local_u8Array[local_s8Counter]= Local_s32Number%10;
		Local_s32Number/=10;
		local_s8Counter++;
	}
	local_s8Counter--;
    198e:	89 81       	ldd	r24, Y+1	; 0x01
    1990:	81 50       	subi	r24, 0x01	; 1
    1992:	89 83       	std	Y+1, r24	; 0x01
    1994:	11 c0       	rjmp	.+34     	; 0x19b8 <CLCD_VoidWriteNumber+0x12c>
	while (local_s8Counter>=0)
	{
		CLCD_voidSendData(Local_u8Array[local_s8Counter]+'0');
    1996:	89 81       	ldd	r24, Y+1	; 0x01
    1998:	28 2f       	mov	r18, r24
    199a:	33 27       	eor	r19, r19
    199c:	27 fd       	sbrc	r18, 7
    199e:	30 95       	com	r19
    19a0:	ce 01       	movw	r24, r28
    19a2:	06 96       	adiw	r24, 0x06	; 6
    19a4:	fc 01       	movw	r30, r24
    19a6:	e2 0f       	add	r30, r18
    19a8:	f3 1f       	adc	r31, r19
    19aa:	80 81       	ld	r24, Z
    19ac:	80 5d       	subi	r24, 0xD0	; 208
    19ae:	0e 94 0a 09 	call	0x1214	; 0x1214 <CLCD_voidSendData>
		local_s8Counter--;
    19b2:	89 81       	ldd	r24, Y+1	; 0x01
    19b4:	81 50       	subi	r24, 0x01	; 1
    19b6:	89 83       	std	Y+1, r24	; 0x01
		Local_u8Array[local_s8Counter]= Local_s32Number%10;
		Local_s32Number/=10;
		local_s8Counter++;
	}
	local_s8Counter--;
	while (local_s8Counter>=0)
    19b8:	89 81       	ldd	r24, Y+1	; 0x01
    19ba:	88 23       	and	r24, r24
    19bc:	64 f7       	brge	.-40     	; 0x1996 <CLCD_VoidWriteNumber+0x10a>
	{
		CLCD_voidSendData(Local_u8Array[local_s8Counter]+'0');
		local_s8Counter--;
	}
}
    19be:	6d 96       	adiw	r28, 0x1d	; 29
    19c0:	0f b6       	in	r0, 0x3f	; 63
    19c2:	f8 94       	cli
    19c4:	de bf       	out	0x3e, r29	; 62
    19c6:	0f be       	out	0x3f, r0	; 63
    19c8:	cd bf       	out	0x3d, r28	; 61
    19ca:	cf 91       	pop	r28
    19cc:	df 91       	pop	r29
    19ce:	1f 91       	pop	r17
    19d0:	0f 91       	pop	r16
    19d2:	08 95       	ret

000019d4 <CLCD_voidWriteFloatNumber>:

void CLCD_voidWriteFloatNumber(f32 Copy_f32FloatNumber )
{
    19d4:	df 93       	push	r29
    19d6:	cf 93       	push	r28
    19d8:	cd b7       	in	r28, 0x3d	; 61
    19da:	de b7       	in	r29, 0x3e	; 62
    19dc:	28 97       	sbiw	r28, 0x08	; 8
    19de:	0f b6       	in	r0, 0x3f	; 63
    19e0:	f8 94       	cli
    19e2:	de bf       	out	0x3e, r29	; 62
    19e4:	0f be       	out	0x3f, r0	; 63
    19e6:	cd bf       	out	0x3d, r28	; 61
    19e8:	6d 83       	std	Y+5, r22	; 0x05
    19ea:	7e 83       	std	Y+6, r23	; 0x06
    19ec:	8f 83       	std	Y+7, r24	; 0x07
    19ee:	98 87       	std	Y+8, r25	; 0x08

	if(Copy_f32FloatNumber == 0)
    19f0:	6d 81       	ldd	r22, Y+5	; 0x05
    19f2:	7e 81       	ldd	r23, Y+6	; 0x06
    19f4:	8f 81       	ldd	r24, Y+7	; 0x07
    19f6:	98 85       	ldd	r25, Y+8	; 0x08
    19f8:	20 e0       	ldi	r18, 0x00	; 0
    19fa:	30 e0       	ldi	r19, 0x00	; 0
    19fc:	40 e0       	ldi	r20, 0x00	; 0
    19fe:	50 e0       	ldi	r21, 0x00	; 0
    1a00:	0e 94 11 03 	call	0x622	; 0x622 <__eqsf2>
    1a04:	88 23       	and	r24, r24
    1a06:	39 f4       	brne	.+14     	; 0x1a16 <CLCD_voidWriteFloatNumber+0x42>
	{
		CLCD_VoidWriteNumber(0);
    1a08:	60 e0       	ldi	r22, 0x00	; 0
    1a0a:	70 e0       	ldi	r23, 0x00	; 0
    1a0c:	80 e0       	ldi	r24, 0x00	; 0
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	0e 94 46 0c 	call	0x188c	; 0x188c <CLCD_VoidWriteNumber>
    1a14:	7c c0       	rjmp	.+248    	; 0x1b0e <CLCD_voidWriteFloatNumber+0x13a>
	}

	else
	{
		s32 Local_s32DecemalNum=Copy_f32FloatNumber;
    1a16:	6d 81       	ldd	r22, Y+5	; 0x05
    1a18:	7e 81       	ldd	r23, Y+6	; 0x06
    1a1a:	8f 81       	ldd	r24, Y+7	; 0x07
    1a1c:	98 85       	ldd	r25, Y+8	; 0x08
    1a1e:	0e 94 2f 04 	call	0x85e	; 0x85e <__fixsfsi>
    1a22:	dc 01       	movw	r26, r24
    1a24:	cb 01       	movw	r24, r22
    1a26:	89 83       	std	Y+1, r24	; 0x01
    1a28:	9a 83       	std	Y+2, r25	; 0x02
    1a2a:	ab 83       	std	Y+3, r26	; 0x03
    1a2c:	bc 83       	std	Y+4, r27	; 0x04
		CLCD_VoidWriteNumber(Local_s32DecemalNum);
    1a2e:	69 81       	ldd	r22, Y+1	; 0x01
    1a30:	7a 81       	ldd	r23, Y+2	; 0x02
    1a32:	8b 81       	ldd	r24, Y+3	; 0x03
    1a34:	9c 81       	ldd	r25, Y+4	; 0x04
    1a36:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <__floatsisf>
    1a3a:	dc 01       	movw	r26, r24
    1a3c:	cb 01       	movw	r24, r22
    1a3e:	bc 01       	movw	r22, r24
    1a40:	cd 01       	movw	r24, r26
    1a42:	0e 94 46 0c 	call	0x188c	; 0x188c <CLCD_VoidWriteNumber>
		CLCD_voidSendData('.');
    1a46:	8e e2       	ldi	r24, 0x2E	; 46
    1a48:	0e 94 0a 09 	call	0x1214	; 0x1214 <CLCD_voidSendData>
		Copy_f32FloatNumber = Copy_f32FloatNumber -Local_s32DecemalNum;
    1a4c:	69 81       	ldd	r22, Y+1	; 0x01
    1a4e:	7a 81       	ldd	r23, Y+2	; 0x02
    1a50:	8b 81       	ldd	r24, Y+3	; 0x03
    1a52:	9c 81       	ldd	r25, Y+4	; 0x04
    1a54:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <__floatsisf>
    1a58:	9b 01       	movw	r18, r22
    1a5a:	ac 01       	movw	r20, r24
    1a5c:	6d 81       	ldd	r22, Y+5	; 0x05
    1a5e:	7e 81       	ldd	r23, Y+6	; 0x06
    1a60:	8f 81       	ldd	r24, Y+7	; 0x07
    1a62:	98 85       	ldd	r25, Y+8	; 0x08
    1a64:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
    1a68:	dc 01       	movw	r26, r24
    1a6a:	cb 01       	movw	r24, r22
    1a6c:	8d 83       	std	Y+5, r24	; 0x05
    1a6e:	9e 83       	std	Y+6, r25	; 0x06
    1a70:	af 83       	std	Y+7, r26	; 0x07
    1a72:	b8 87       	std	Y+8, r27	; 0x08

		Copy_f32FloatNumber*=100000;
    1a74:	6d 81       	ldd	r22, Y+5	; 0x05
    1a76:	7e 81       	ldd	r23, Y+6	; 0x06
    1a78:	8f 81       	ldd	r24, Y+7	; 0x07
    1a7a:	98 85       	ldd	r25, Y+8	; 0x08
    1a7c:	20 e0       	ldi	r18, 0x00	; 0
    1a7e:	30 e5       	ldi	r19, 0x50	; 80
    1a80:	43 ec       	ldi	r20, 0xC3	; 195
    1a82:	57 e4       	ldi	r21, 0x47	; 71
    1a84:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a88:	dc 01       	movw	r26, r24
    1a8a:	cb 01       	movw	r24, r22
    1a8c:	8d 83       	std	Y+5, r24	; 0x05
    1a8e:	9e 83       	std	Y+6, r25	; 0x06
    1a90:	af 83       	std	Y+7, r26	; 0x07
    1a92:	b8 87       	std	Y+8, r27	; 0x08
		Local_s32DecemalNum = Copy_f32FloatNumber;
    1a94:	6d 81       	ldd	r22, Y+5	; 0x05
    1a96:	7e 81       	ldd	r23, Y+6	; 0x06
    1a98:	8f 81       	ldd	r24, Y+7	; 0x07
    1a9a:	98 85       	ldd	r25, Y+8	; 0x08
    1a9c:	0e 94 2f 04 	call	0x85e	; 0x85e <__fixsfsi>
    1aa0:	dc 01       	movw	r26, r24
    1aa2:	cb 01       	movw	r24, r22
    1aa4:	89 83       	std	Y+1, r24	; 0x01
    1aa6:	9a 83       	std	Y+2, r25	; 0x02
    1aa8:	ab 83       	std	Y+3, r26	; 0x03
    1aaa:	bc 83       	std	Y+4, r27	; 0x04
    1aac:	12 c0       	rjmp	.+36     	; 0x1ad2 <CLCD_voidWriteFloatNumber+0xfe>

		while (Local_s32DecemalNum%10 == 0)
		{
			Local_s32DecemalNum/=10;
    1aae:	89 81       	ldd	r24, Y+1	; 0x01
    1ab0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ab2:	ab 81       	ldd	r26, Y+3	; 0x03
    1ab4:	bc 81       	ldd	r27, Y+4	; 0x04
    1ab6:	2a e0       	ldi	r18, 0x0A	; 10
    1ab8:	30 e0       	ldi	r19, 0x00	; 0
    1aba:	40 e0       	ldi	r20, 0x00	; 0
    1abc:	50 e0       	ldi	r21, 0x00	; 0
    1abe:	bc 01       	movw	r22, r24
    1ac0:	cd 01       	movw	r24, r26
    1ac2:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <__divmodsi4>
    1ac6:	da 01       	movw	r26, r20
    1ac8:	c9 01       	movw	r24, r18
    1aca:	89 83       	std	Y+1, r24	; 0x01
    1acc:	9a 83       	std	Y+2, r25	; 0x02
    1ace:	ab 83       	std	Y+3, r26	; 0x03
    1ad0:	bc 83       	std	Y+4, r27	; 0x04
		Copy_f32FloatNumber = Copy_f32FloatNumber -Local_s32DecemalNum;

		Copy_f32FloatNumber*=100000;
		Local_s32DecemalNum = Copy_f32FloatNumber;

		while (Local_s32DecemalNum%10 == 0)
    1ad2:	89 81       	ldd	r24, Y+1	; 0x01
    1ad4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ad6:	ab 81       	ldd	r26, Y+3	; 0x03
    1ad8:	bc 81       	ldd	r27, Y+4	; 0x04
    1ada:	2a e0       	ldi	r18, 0x0A	; 10
    1adc:	30 e0       	ldi	r19, 0x00	; 0
    1ade:	40 e0       	ldi	r20, 0x00	; 0
    1ae0:	50 e0       	ldi	r21, 0x00	; 0
    1ae2:	bc 01       	movw	r22, r24
    1ae4:	cd 01       	movw	r24, r26
    1ae6:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <__divmodsi4>
    1aea:	dc 01       	movw	r26, r24
    1aec:	cb 01       	movw	r24, r22
    1aee:	00 97       	sbiw	r24, 0x00	; 0
    1af0:	a1 05       	cpc	r26, r1
    1af2:	b1 05       	cpc	r27, r1
    1af4:	e1 f2       	breq	.-72     	; 0x1aae <CLCD_voidWriteFloatNumber+0xda>
		{
			Local_s32DecemalNum/=10;
		}
		CLCD_VoidWriteNumber(Local_s32DecemalNum);
    1af6:	69 81       	ldd	r22, Y+1	; 0x01
    1af8:	7a 81       	ldd	r23, Y+2	; 0x02
    1afa:	8b 81       	ldd	r24, Y+3	; 0x03
    1afc:	9c 81       	ldd	r25, Y+4	; 0x04
    1afe:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <__floatsisf>
    1b02:	dc 01       	movw	r26, r24
    1b04:	cb 01       	movw	r24, r22
    1b06:	bc 01       	movw	r22, r24
    1b08:	cd 01       	movw	r24, r26
    1b0a:	0e 94 46 0c 	call	0x188c	; 0x188c <CLCD_VoidWriteNumber>
	}
}
    1b0e:	28 96       	adiw	r28, 0x08	; 8
    1b10:	0f b6       	in	r0, 0x3f	; 63
    1b12:	f8 94       	cli
    1b14:	de bf       	out	0x3e, r29	; 62
    1b16:	0f be       	out	0x3f, r0	; 63
    1b18:	cd bf       	out	0x3d, r28	; 61
    1b1a:	cf 91       	pop	r28
    1b1c:	df 91       	pop	r29
    1b1e:	08 95       	ret

00001b20 <CLCD_voidClear>:
//}



void CLCD_voidClear()
{
    1b20:	df 93       	push	r29
    1b22:	cf 93       	push	r28
    1b24:	cd b7       	in	r28, 0x3d	; 61
    1b26:	de b7       	in	r29, 0x3e	; 62
	C_LCD_voidSendCommand(0x01);
    1b28:	81 e0       	ldi	r24, 0x01	; 1
    1b2a:	0e 94 f1 06 	call	0xde2	; 0xde2 <C_LCD_voidSendCommand>

}
    1b2e:	cf 91       	pop	r28
    1b30:	df 91       	pop	r29
    1b32:	08 95       	ret

00001b34 <DIO_u8SetPinValue>:
//
//	return Local_u8ErrorState;
//}

u8 DIO_u8SetPinValue(u8 Copy_u8port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
    1b34:	df 93       	push	r29
    1b36:	cf 93       	push	r28
    1b38:	cd b7       	in	r28, 0x3d	; 61
    1b3a:	de b7       	in	r29, 0x3e	; 62
    1b3c:	28 97       	sbiw	r28, 0x08	; 8
    1b3e:	0f b6       	in	r0, 0x3f	; 63
    1b40:	f8 94       	cli
    1b42:	de bf       	out	0x3e, r29	; 62
    1b44:	0f be       	out	0x3f, r0	; 63
    1b46:	cd bf       	out	0x3d, r28	; 61
    1b48:	8a 83       	std	Y+2, r24	; 0x02
    1b4a:	6b 83       	std	Y+3, r22	; 0x03
    1b4c:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    1b4e:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin<=DIO_u8PIN7)
    1b50:	8b 81       	ldd	r24, Y+3	; 0x03
    1b52:	88 30       	cpi	r24, 0x08	; 8
    1b54:	08 f0       	brcs	.+2      	; 0x1b58 <DIO_u8SetPinValue+0x24>
    1b56:	f4 c0       	rjmp	.+488    	; 0x1d40 <DIO_u8SetPinValue+0x20c>
	{
		if(Copy_u8Value == DIO_u8PIN_LOW)
    1b58:	8c 81       	ldd	r24, Y+4	; 0x04
    1b5a:	88 23       	and	r24, r24
    1b5c:	09 f0       	breq	.+2      	; 0x1b60 <DIO_u8SetPinValue+0x2c>
    1b5e:	77 c0       	rjmp	.+238    	; 0x1c4e <DIO_u8SetPinValue+0x11a>
		{

			switch(Copy_u8port)
    1b60:	8a 81       	ldd	r24, Y+2	; 0x02
    1b62:	28 2f       	mov	r18, r24
    1b64:	30 e0       	ldi	r19, 0x00	; 0
    1b66:	38 87       	std	Y+8, r19	; 0x08
    1b68:	2f 83       	std	Y+7, r18	; 0x07
    1b6a:	8f 81       	ldd	r24, Y+7	; 0x07
    1b6c:	98 85       	ldd	r25, Y+8	; 0x08
    1b6e:	81 30       	cpi	r24, 0x01	; 1
    1b70:	91 05       	cpc	r25, r1
    1b72:	59 f1       	breq	.+86     	; 0x1bca <DIO_u8SetPinValue+0x96>
    1b74:	2f 81       	ldd	r18, Y+7	; 0x07
    1b76:	38 85       	ldd	r19, Y+8	; 0x08
    1b78:	22 30       	cpi	r18, 0x02	; 2
    1b7a:	31 05       	cpc	r19, r1
    1b7c:	2c f4       	brge	.+10     	; 0x1b88 <DIO_u8SetPinValue+0x54>
    1b7e:	8f 81       	ldd	r24, Y+7	; 0x07
    1b80:	98 85       	ldd	r25, Y+8	; 0x08
    1b82:	00 97       	sbiw	r24, 0x00	; 0
    1b84:	69 f0       	breq	.+26     	; 0x1ba0 <DIO_u8SetPinValue+0x6c>
    1b86:	60 c0       	rjmp	.+192    	; 0x1c48 <DIO_u8SetPinValue+0x114>
    1b88:	2f 81       	ldd	r18, Y+7	; 0x07
    1b8a:	38 85       	ldd	r19, Y+8	; 0x08
    1b8c:	22 30       	cpi	r18, 0x02	; 2
    1b8e:	31 05       	cpc	r19, r1
    1b90:	89 f1       	breq	.+98     	; 0x1bf4 <DIO_u8SetPinValue+0xc0>
    1b92:	8f 81       	ldd	r24, Y+7	; 0x07
    1b94:	98 85       	ldd	r25, Y+8	; 0x08
    1b96:	83 30       	cpi	r24, 0x03	; 3
    1b98:	91 05       	cpc	r25, r1
    1b9a:	09 f4       	brne	.+2      	; 0x1b9e <DIO_u8SetPinValue+0x6a>
    1b9c:	40 c0       	rjmp	.+128    	; 0x1c1e <DIO_u8SetPinValue+0xea>
    1b9e:	54 c0       	rjmp	.+168    	; 0x1c48 <DIO_u8SetPinValue+0x114>
			{
			case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
    1ba0:	ab e3       	ldi	r26, 0x3B	; 59
    1ba2:	b0 e0       	ldi	r27, 0x00	; 0
    1ba4:	eb e3       	ldi	r30, 0x3B	; 59
    1ba6:	f0 e0       	ldi	r31, 0x00	; 0
    1ba8:	80 81       	ld	r24, Z
    1baa:	48 2f       	mov	r20, r24
    1bac:	8b 81       	ldd	r24, Y+3	; 0x03
    1bae:	28 2f       	mov	r18, r24
    1bb0:	30 e0       	ldi	r19, 0x00	; 0
    1bb2:	81 e0       	ldi	r24, 0x01	; 1
    1bb4:	90 e0       	ldi	r25, 0x00	; 0
    1bb6:	02 2e       	mov	r0, r18
    1bb8:	02 c0       	rjmp	.+4      	; 0x1bbe <DIO_u8SetPinValue+0x8a>
    1bba:	88 0f       	add	r24, r24
    1bbc:	99 1f       	adc	r25, r25
    1bbe:	0a 94       	dec	r0
    1bc0:	e2 f7       	brpl	.-8      	; 0x1bba <DIO_u8SetPinValue+0x86>
    1bc2:	80 95       	com	r24
    1bc4:	84 23       	and	r24, r20
    1bc6:	8c 93       	st	X, r24
    1bc8:	bd c0       	rjmp	.+378    	; 0x1d44 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
    1bca:	a8 e3       	ldi	r26, 0x38	; 56
    1bcc:	b0 e0       	ldi	r27, 0x00	; 0
    1bce:	e8 e3       	ldi	r30, 0x38	; 56
    1bd0:	f0 e0       	ldi	r31, 0x00	; 0
    1bd2:	80 81       	ld	r24, Z
    1bd4:	48 2f       	mov	r20, r24
    1bd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd8:	28 2f       	mov	r18, r24
    1bda:	30 e0       	ldi	r19, 0x00	; 0
    1bdc:	81 e0       	ldi	r24, 0x01	; 1
    1bde:	90 e0       	ldi	r25, 0x00	; 0
    1be0:	02 2e       	mov	r0, r18
    1be2:	02 c0       	rjmp	.+4      	; 0x1be8 <DIO_u8SetPinValue+0xb4>
    1be4:	88 0f       	add	r24, r24
    1be6:	99 1f       	adc	r25, r25
    1be8:	0a 94       	dec	r0
    1bea:	e2 f7       	brpl	.-8      	; 0x1be4 <DIO_u8SetPinValue+0xb0>
    1bec:	80 95       	com	r24
    1bee:	84 23       	and	r24, r20
    1bf0:	8c 93       	st	X, r24
    1bf2:	a8 c0       	rjmp	.+336    	; 0x1d44 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin); break;
    1bf4:	a5 e3       	ldi	r26, 0x35	; 53
    1bf6:	b0 e0       	ldi	r27, 0x00	; 0
    1bf8:	e5 e3       	ldi	r30, 0x35	; 53
    1bfa:	f0 e0       	ldi	r31, 0x00	; 0
    1bfc:	80 81       	ld	r24, Z
    1bfe:	48 2f       	mov	r20, r24
    1c00:	8b 81       	ldd	r24, Y+3	; 0x03
    1c02:	28 2f       	mov	r18, r24
    1c04:	30 e0       	ldi	r19, 0x00	; 0
    1c06:	81 e0       	ldi	r24, 0x01	; 1
    1c08:	90 e0       	ldi	r25, 0x00	; 0
    1c0a:	02 2e       	mov	r0, r18
    1c0c:	02 c0       	rjmp	.+4      	; 0x1c12 <DIO_u8SetPinValue+0xde>
    1c0e:	88 0f       	add	r24, r24
    1c10:	99 1f       	adc	r25, r25
    1c12:	0a 94       	dec	r0
    1c14:	e2 f7       	brpl	.-8      	; 0x1c0e <DIO_u8SetPinValue+0xda>
    1c16:	80 95       	com	r24
    1c18:	84 23       	and	r24, r20
    1c1a:	8c 93       	st	X, r24
    1c1c:	93 c0       	rjmp	.+294    	; 0x1d44 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin); break;
    1c1e:	a2 e3       	ldi	r26, 0x32	; 50
    1c20:	b0 e0       	ldi	r27, 0x00	; 0
    1c22:	e2 e3       	ldi	r30, 0x32	; 50
    1c24:	f0 e0       	ldi	r31, 0x00	; 0
    1c26:	80 81       	ld	r24, Z
    1c28:	48 2f       	mov	r20, r24
    1c2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c2c:	28 2f       	mov	r18, r24
    1c2e:	30 e0       	ldi	r19, 0x00	; 0
    1c30:	81 e0       	ldi	r24, 0x01	; 1
    1c32:	90 e0       	ldi	r25, 0x00	; 0
    1c34:	02 2e       	mov	r0, r18
    1c36:	02 c0       	rjmp	.+4      	; 0x1c3c <DIO_u8SetPinValue+0x108>
    1c38:	88 0f       	add	r24, r24
    1c3a:	99 1f       	adc	r25, r25
    1c3c:	0a 94       	dec	r0
    1c3e:	e2 f7       	brpl	.-8      	; 0x1c38 <DIO_u8SetPinValue+0x104>
    1c40:	80 95       	com	r24
    1c42:	84 23       	and	r24, r20
    1c44:	8c 93       	st	X, r24
    1c46:	7e c0       	rjmp	.+252    	; 0x1d44 <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState =1; break;
    1c48:	81 e0       	ldi	r24, 0x01	; 1
    1c4a:	89 83       	std	Y+1, r24	; 0x01
    1c4c:	7b c0       	rjmp	.+246    	; 0x1d44 <DIO_u8SetPinValue+0x210>

			}
		}
		else if(Copy_u8Value == DIO_u8PIN_HIGH)
    1c4e:	8c 81       	ldd	r24, Y+4	; 0x04
    1c50:	81 30       	cpi	r24, 0x01	; 1
    1c52:	09 f0       	breq	.+2      	; 0x1c56 <DIO_u8SetPinValue+0x122>
    1c54:	72 c0       	rjmp	.+228    	; 0x1d3a <DIO_u8SetPinValue+0x206>
		{

			switch(Copy_u8port)
    1c56:	8a 81       	ldd	r24, Y+2	; 0x02
    1c58:	28 2f       	mov	r18, r24
    1c5a:	30 e0       	ldi	r19, 0x00	; 0
    1c5c:	3e 83       	std	Y+6, r19	; 0x06
    1c5e:	2d 83       	std	Y+5, r18	; 0x05
    1c60:	8d 81       	ldd	r24, Y+5	; 0x05
    1c62:	9e 81       	ldd	r25, Y+6	; 0x06
    1c64:	81 30       	cpi	r24, 0x01	; 1
    1c66:	91 05       	cpc	r25, r1
    1c68:	49 f1       	breq	.+82     	; 0x1cbc <DIO_u8SetPinValue+0x188>
    1c6a:	2d 81       	ldd	r18, Y+5	; 0x05
    1c6c:	3e 81       	ldd	r19, Y+6	; 0x06
    1c6e:	22 30       	cpi	r18, 0x02	; 2
    1c70:	31 05       	cpc	r19, r1
    1c72:	2c f4       	brge	.+10     	; 0x1c7e <DIO_u8SetPinValue+0x14a>
    1c74:	8d 81       	ldd	r24, Y+5	; 0x05
    1c76:	9e 81       	ldd	r25, Y+6	; 0x06
    1c78:	00 97       	sbiw	r24, 0x00	; 0
    1c7a:	61 f0       	breq	.+24     	; 0x1c94 <DIO_u8SetPinValue+0x160>
    1c7c:	5b c0       	rjmp	.+182    	; 0x1d34 <DIO_u8SetPinValue+0x200>
    1c7e:	2d 81       	ldd	r18, Y+5	; 0x05
    1c80:	3e 81       	ldd	r19, Y+6	; 0x06
    1c82:	22 30       	cpi	r18, 0x02	; 2
    1c84:	31 05       	cpc	r19, r1
    1c86:	71 f1       	breq	.+92     	; 0x1ce4 <DIO_u8SetPinValue+0x1b0>
    1c88:	8d 81       	ldd	r24, Y+5	; 0x05
    1c8a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c8c:	83 30       	cpi	r24, 0x03	; 3
    1c8e:	91 05       	cpc	r25, r1
    1c90:	e9 f1       	breq	.+122    	; 0x1d0c <DIO_u8SetPinValue+0x1d8>
    1c92:	50 c0       	rjmp	.+160    	; 0x1d34 <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
    1c94:	ab e3       	ldi	r26, 0x3B	; 59
    1c96:	b0 e0       	ldi	r27, 0x00	; 0
    1c98:	eb e3       	ldi	r30, 0x3B	; 59
    1c9a:	f0 e0       	ldi	r31, 0x00	; 0
    1c9c:	80 81       	ld	r24, Z
    1c9e:	48 2f       	mov	r20, r24
    1ca0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca2:	28 2f       	mov	r18, r24
    1ca4:	30 e0       	ldi	r19, 0x00	; 0
    1ca6:	81 e0       	ldi	r24, 0x01	; 1
    1ca8:	90 e0       	ldi	r25, 0x00	; 0
    1caa:	02 2e       	mov	r0, r18
    1cac:	02 c0       	rjmp	.+4      	; 0x1cb2 <DIO_u8SetPinValue+0x17e>
    1cae:	88 0f       	add	r24, r24
    1cb0:	99 1f       	adc	r25, r25
    1cb2:	0a 94       	dec	r0
    1cb4:	e2 f7       	brpl	.-8      	; 0x1cae <DIO_u8SetPinValue+0x17a>
    1cb6:	84 2b       	or	r24, r20
    1cb8:	8c 93       	st	X, r24
    1cba:	44 c0       	rjmp	.+136    	; 0x1d44 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
    1cbc:	a8 e3       	ldi	r26, 0x38	; 56
    1cbe:	b0 e0       	ldi	r27, 0x00	; 0
    1cc0:	e8 e3       	ldi	r30, 0x38	; 56
    1cc2:	f0 e0       	ldi	r31, 0x00	; 0
    1cc4:	80 81       	ld	r24, Z
    1cc6:	48 2f       	mov	r20, r24
    1cc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cca:	28 2f       	mov	r18, r24
    1ccc:	30 e0       	ldi	r19, 0x00	; 0
    1cce:	81 e0       	ldi	r24, 0x01	; 1
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	02 2e       	mov	r0, r18
    1cd4:	02 c0       	rjmp	.+4      	; 0x1cda <DIO_u8SetPinValue+0x1a6>
    1cd6:	88 0f       	add	r24, r24
    1cd8:	99 1f       	adc	r25, r25
    1cda:	0a 94       	dec	r0
    1cdc:	e2 f7       	brpl	.-8      	; 0x1cd6 <DIO_u8SetPinValue+0x1a2>
    1cde:	84 2b       	or	r24, r20
    1ce0:	8c 93       	st	X, r24
    1ce2:	30 c0       	rjmp	.+96     	; 0x1d44 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin); break;
    1ce4:	a5 e3       	ldi	r26, 0x35	; 53
    1ce6:	b0 e0       	ldi	r27, 0x00	; 0
    1ce8:	e5 e3       	ldi	r30, 0x35	; 53
    1cea:	f0 e0       	ldi	r31, 0x00	; 0
    1cec:	80 81       	ld	r24, Z
    1cee:	48 2f       	mov	r20, r24
    1cf0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf2:	28 2f       	mov	r18, r24
    1cf4:	30 e0       	ldi	r19, 0x00	; 0
    1cf6:	81 e0       	ldi	r24, 0x01	; 1
    1cf8:	90 e0       	ldi	r25, 0x00	; 0
    1cfa:	02 2e       	mov	r0, r18
    1cfc:	02 c0       	rjmp	.+4      	; 0x1d02 <DIO_u8SetPinValue+0x1ce>
    1cfe:	88 0f       	add	r24, r24
    1d00:	99 1f       	adc	r25, r25
    1d02:	0a 94       	dec	r0
    1d04:	e2 f7       	brpl	.-8      	; 0x1cfe <DIO_u8SetPinValue+0x1ca>
    1d06:	84 2b       	or	r24, r20
    1d08:	8c 93       	st	X, r24
    1d0a:	1c c0       	rjmp	.+56     	; 0x1d44 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin); break;
    1d0c:	a2 e3       	ldi	r26, 0x32	; 50
    1d0e:	b0 e0       	ldi	r27, 0x00	; 0
    1d10:	e2 e3       	ldi	r30, 0x32	; 50
    1d12:	f0 e0       	ldi	r31, 0x00	; 0
    1d14:	80 81       	ld	r24, Z
    1d16:	48 2f       	mov	r20, r24
    1d18:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1a:	28 2f       	mov	r18, r24
    1d1c:	30 e0       	ldi	r19, 0x00	; 0
    1d1e:	81 e0       	ldi	r24, 0x01	; 1
    1d20:	90 e0       	ldi	r25, 0x00	; 0
    1d22:	02 2e       	mov	r0, r18
    1d24:	02 c0       	rjmp	.+4      	; 0x1d2a <DIO_u8SetPinValue+0x1f6>
    1d26:	88 0f       	add	r24, r24
    1d28:	99 1f       	adc	r25, r25
    1d2a:	0a 94       	dec	r0
    1d2c:	e2 f7       	brpl	.-8      	; 0x1d26 <DIO_u8SetPinValue+0x1f2>
    1d2e:	84 2b       	or	r24, r20
    1d30:	8c 93       	st	X, r24
    1d32:	08 c0       	rjmp	.+16     	; 0x1d44 <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState =1; break;
    1d34:	81 e0       	ldi	r24, 0x01	; 1
    1d36:	89 83       	std	Y+1, r24	; 0x01
    1d38:	05 c0       	rjmp	.+10     	; 0x1d44 <DIO_u8SetPinValue+0x210>

			}
		}
		else
		{
			Local_u8ErrorState = 1;
    1d3a:	81 e0       	ldi	r24, 0x01	; 1
    1d3c:	89 83       	std	Y+1, r24	; 0x01
    1d3e:	02 c0       	rjmp	.+4      	; 0x1d44 <DIO_u8SetPinValue+0x210>
		}

	}
	else
	{
		Local_u8ErrorState = 1;
    1d40:	81 e0       	ldi	r24, 0x01	; 1
    1d42:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1d44:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d46:	28 96       	adiw	r28, 0x08	; 8
    1d48:	0f b6       	in	r0, 0x3f	; 63
    1d4a:	f8 94       	cli
    1d4c:	de bf       	out	0x3e, r29	; 62
    1d4e:	0f be       	out	0x3f, r0	; 63
    1d50:	cd bf       	out	0x3d, r28	; 61
    1d52:	cf 91       	pop	r28
    1d54:	df 91       	pop	r29
    1d56:	08 95       	ret

00001d58 <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8port, u8 Copy_u8Value)
{
    1d58:	df 93       	push	r29
    1d5a:	cf 93       	push	r28
    1d5c:	00 d0       	rcall	.+0      	; 0x1d5e <DIO_u8SetPortValue+0x6>
    1d5e:	00 d0       	rcall	.+0      	; 0x1d60 <DIO_u8SetPortValue+0x8>
    1d60:	0f 92       	push	r0
    1d62:	cd b7       	in	r28, 0x3d	; 61
    1d64:	de b7       	in	r29, 0x3e	; 62
    1d66:	8a 83       	std	Y+2, r24	; 0x02
    1d68:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    1d6a:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8port<=DIO_u8PORTD)
    1d6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d6e:	84 30       	cpi	r24, 0x04	; 4
    1d70:	b0 f5       	brcc	.+108    	; 0x1dde <DIO_u8SetPortValue+0x86>
	{
		switch(Copy_u8port)
    1d72:	8a 81       	ldd	r24, Y+2	; 0x02
    1d74:	28 2f       	mov	r18, r24
    1d76:	30 e0       	ldi	r19, 0x00	; 0
    1d78:	3d 83       	std	Y+5, r19	; 0x05
    1d7a:	2c 83       	std	Y+4, r18	; 0x04
    1d7c:	8c 81       	ldd	r24, Y+4	; 0x04
    1d7e:	9d 81       	ldd	r25, Y+5	; 0x05
    1d80:	81 30       	cpi	r24, 0x01	; 1
    1d82:	91 05       	cpc	r25, r1
    1d84:	d1 f0       	breq	.+52     	; 0x1dba <DIO_u8SetPortValue+0x62>
    1d86:	2c 81       	ldd	r18, Y+4	; 0x04
    1d88:	3d 81       	ldd	r19, Y+5	; 0x05
    1d8a:	22 30       	cpi	r18, 0x02	; 2
    1d8c:	31 05       	cpc	r19, r1
    1d8e:	2c f4       	brge	.+10     	; 0x1d9a <DIO_u8SetPortValue+0x42>
    1d90:	8c 81       	ldd	r24, Y+4	; 0x04
    1d92:	9d 81       	ldd	r25, Y+5	; 0x05
    1d94:	00 97       	sbiw	r24, 0x00	; 0
    1d96:	61 f0       	breq	.+24     	; 0x1db0 <DIO_u8SetPortValue+0x58>
    1d98:	1f c0       	rjmp	.+62     	; 0x1dd8 <DIO_u8SetPortValue+0x80>
    1d9a:	2c 81       	ldd	r18, Y+4	; 0x04
    1d9c:	3d 81       	ldd	r19, Y+5	; 0x05
    1d9e:	22 30       	cpi	r18, 0x02	; 2
    1da0:	31 05       	cpc	r19, r1
    1da2:	81 f0       	breq	.+32     	; 0x1dc4 <DIO_u8SetPortValue+0x6c>
    1da4:	8c 81       	ldd	r24, Y+4	; 0x04
    1da6:	9d 81       	ldd	r25, Y+5	; 0x05
    1da8:	83 30       	cpi	r24, 0x03	; 3
    1daa:	91 05       	cpc	r25, r1
    1dac:	81 f0       	breq	.+32     	; 0x1dce <DIO_u8SetPortValue+0x76>
    1dae:	14 c0       	rjmp	.+40     	; 0x1dd8 <DIO_u8SetPortValue+0x80>
		{
		case DIO_u8PORTA: PORTA = Copy_u8Value; break;
    1db0:	eb e3       	ldi	r30, 0x3B	; 59
    1db2:	f0 e0       	ldi	r31, 0x00	; 0
    1db4:	8b 81       	ldd	r24, Y+3	; 0x03
    1db6:	80 83       	st	Z, r24
    1db8:	14 c0       	rjmp	.+40     	; 0x1de2 <DIO_u8SetPortValue+0x8a>
		case DIO_u8PORTB: PORTB = Copy_u8Value; break;
    1dba:	e8 e3       	ldi	r30, 0x38	; 56
    1dbc:	f0 e0       	ldi	r31, 0x00	; 0
    1dbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc0:	80 83       	st	Z, r24
    1dc2:	0f c0       	rjmp	.+30     	; 0x1de2 <DIO_u8SetPortValue+0x8a>
		case DIO_u8PORTC: PORTC = Copy_u8Value; break;
    1dc4:	e5 e3       	ldi	r30, 0x35	; 53
    1dc6:	f0 e0       	ldi	r31, 0x00	; 0
    1dc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dca:	80 83       	st	Z, r24
    1dcc:	0a c0       	rjmp	.+20     	; 0x1de2 <DIO_u8SetPortValue+0x8a>
		case DIO_u8PORTD: PORTD = Copy_u8Value; break;
    1dce:	e2 e3       	ldi	r30, 0x32	; 50
    1dd0:	f0 e0       	ldi	r31, 0x00	; 0
    1dd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd4:	80 83       	st	Z, r24
    1dd6:	05 c0       	rjmp	.+10     	; 0x1de2 <DIO_u8SetPortValue+0x8a>
		default: Local_u8ErrorState =1; break;
    1dd8:	81 e0       	ldi	r24, 0x01	; 1
    1dda:	89 83       	std	Y+1, r24	; 0x01
    1ddc:	02 c0       	rjmp	.+4      	; 0x1de2 <DIO_u8SetPortValue+0x8a>

		}
	}
	else
	{
		Local_u8ErrorState = 1;
    1dde:	81 e0       	ldi	r24, 0x01	; 1
    1de0:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_u8ErrorState;
    1de2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1de4:	0f 90       	pop	r0
    1de6:	0f 90       	pop	r0
    1de8:	0f 90       	pop	r0
    1dea:	0f 90       	pop	r0
    1dec:	0f 90       	pop	r0
    1dee:	cf 91       	pop	r28
    1df0:	df 91       	pop	r29
    1df2:	08 95       	ret

00001df4 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8port, u8 Copy_u8Pin, u8* Copy_Pu8Value)
{
    1df4:	df 93       	push	r29
    1df6:	cf 93       	push	r28
    1df8:	cd b7       	in	r28, 0x3d	; 61
    1dfa:	de b7       	in	r29, 0x3e	; 62
    1dfc:	27 97       	sbiw	r28, 0x07	; 7
    1dfe:	0f b6       	in	r0, 0x3f	; 63
    1e00:	f8 94       	cli
    1e02:	de bf       	out	0x3e, r29	; 62
    1e04:	0f be       	out	0x3f, r0	; 63
    1e06:	cd bf       	out	0x3d, r28	; 61
    1e08:	8a 83       	std	Y+2, r24	; 0x02
    1e0a:	6b 83       	std	Y+3, r22	; 0x03
    1e0c:	5d 83       	std	Y+5, r21	; 0x05
    1e0e:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    1e10:	19 82       	std	Y+1, r1	; 0x01

	if((Copy_Pu8Value != NULL )&&(Copy_u8Pin<=DIO_u8PIN7))
    1e12:	8c 81       	ldd	r24, Y+4	; 0x04
    1e14:	9d 81       	ldd	r25, Y+5	; 0x05
    1e16:	00 97       	sbiw	r24, 0x00	; 0
    1e18:	09 f4       	brne	.+2      	; 0x1e1c <DIO_u8GetPinValue+0x28>
    1e1a:	78 c0       	rjmp	.+240    	; 0x1f0c <DIO_u8GetPinValue+0x118>
    1e1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e1e:	88 30       	cpi	r24, 0x08	; 8
    1e20:	08 f0       	brcs	.+2      	; 0x1e24 <DIO_u8GetPinValue+0x30>
    1e22:	74 c0       	rjmp	.+232    	; 0x1f0c <DIO_u8GetPinValue+0x118>
	{


			switch(Copy_u8port)
    1e24:	8a 81       	ldd	r24, Y+2	; 0x02
    1e26:	28 2f       	mov	r18, r24
    1e28:	30 e0       	ldi	r19, 0x00	; 0
    1e2a:	3f 83       	std	Y+7, r19	; 0x07
    1e2c:	2e 83       	std	Y+6, r18	; 0x06
    1e2e:	4e 81       	ldd	r20, Y+6	; 0x06
    1e30:	5f 81       	ldd	r21, Y+7	; 0x07
    1e32:	41 30       	cpi	r20, 0x01	; 1
    1e34:	51 05       	cpc	r21, r1
    1e36:	59 f1       	breq	.+86     	; 0x1e8e <DIO_u8GetPinValue+0x9a>
    1e38:	8e 81       	ldd	r24, Y+6	; 0x06
    1e3a:	9f 81       	ldd	r25, Y+7	; 0x07
    1e3c:	82 30       	cpi	r24, 0x02	; 2
    1e3e:	91 05       	cpc	r25, r1
    1e40:	34 f4       	brge	.+12     	; 0x1e4e <DIO_u8GetPinValue+0x5a>
    1e42:	2e 81       	ldd	r18, Y+6	; 0x06
    1e44:	3f 81       	ldd	r19, Y+7	; 0x07
    1e46:	21 15       	cp	r18, r1
    1e48:	31 05       	cpc	r19, r1
    1e4a:	69 f0       	breq	.+26     	; 0x1e66 <DIO_u8GetPinValue+0x72>
    1e4c:	5c c0       	rjmp	.+184    	; 0x1f06 <DIO_u8GetPinValue+0x112>
    1e4e:	4e 81       	ldd	r20, Y+6	; 0x06
    1e50:	5f 81       	ldd	r21, Y+7	; 0x07
    1e52:	42 30       	cpi	r20, 0x02	; 2
    1e54:	51 05       	cpc	r21, r1
    1e56:	79 f1       	breq	.+94     	; 0x1eb6 <DIO_u8GetPinValue+0xc2>
    1e58:	8e 81       	ldd	r24, Y+6	; 0x06
    1e5a:	9f 81       	ldd	r25, Y+7	; 0x07
    1e5c:	83 30       	cpi	r24, 0x03	; 3
    1e5e:	91 05       	cpc	r25, r1
    1e60:	09 f4       	brne	.+2      	; 0x1e64 <DIO_u8GetPinValue+0x70>
    1e62:	3d c0       	rjmp	.+122    	; 0x1ede <DIO_u8GetPinValue+0xea>
    1e64:	50 c0       	rjmp	.+160    	; 0x1f06 <DIO_u8GetPinValue+0x112>
			{
			case DIO_u8PORTA: * Copy_Pu8Value = GET_BIT(PINA,Copy_u8Pin); break;
    1e66:	e9 e3       	ldi	r30, 0x39	; 57
    1e68:	f0 e0       	ldi	r31, 0x00	; 0
    1e6a:	80 81       	ld	r24, Z
    1e6c:	28 2f       	mov	r18, r24
    1e6e:	30 e0       	ldi	r19, 0x00	; 0
    1e70:	8b 81       	ldd	r24, Y+3	; 0x03
    1e72:	88 2f       	mov	r24, r24
    1e74:	90 e0       	ldi	r25, 0x00	; 0
    1e76:	a9 01       	movw	r20, r18
    1e78:	02 c0       	rjmp	.+4      	; 0x1e7e <DIO_u8GetPinValue+0x8a>
    1e7a:	55 95       	asr	r21
    1e7c:	47 95       	ror	r20
    1e7e:	8a 95       	dec	r24
    1e80:	e2 f7       	brpl	.-8      	; 0x1e7a <DIO_u8GetPinValue+0x86>
    1e82:	ca 01       	movw	r24, r20
    1e84:	81 70       	andi	r24, 0x01	; 1
    1e86:	ec 81       	ldd	r30, Y+4	; 0x04
    1e88:	fd 81       	ldd	r31, Y+5	; 0x05
    1e8a:	80 83       	st	Z, r24
    1e8c:	41 c0       	rjmp	.+130    	; 0x1f10 <DIO_u8GetPinValue+0x11c>
			case DIO_u8PORTB: * Copy_Pu8Value = GET_BIT(PINB,Copy_u8Pin); break;
    1e8e:	e6 e3       	ldi	r30, 0x36	; 54
    1e90:	f0 e0       	ldi	r31, 0x00	; 0
    1e92:	80 81       	ld	r24, Z
    1e94:	28 2f       	mov	r18, r24
    1e96:	30 e0       	ldi	r19, 0x00	; 0
    1e98:	8b 81       	ldd	r24, Y+3	; 0x03
    1e9a:	88 2f       	mov	r24, r24
    1e9c:	90 e0       	ldi	r25, 0x00	; 0
    1e9e:	a9 01       	movw	r20, r18
    1ea0:	02 c0       	rjmp	.+4      	; 0x1ea6 <DIO_u8GetPinValue+0xb2>
    1ea2:	55 95       	asr	r21
    1ea4:	47 95       	ror	r20
    1ea6:	8a 95       	dec	r24
    1ea8:	e2 f7       	brpl	.-8      	; 0x1ea2 <DIO_u8GetPinValue+0xae>
    1eaa:	ca 01       	movw	r24, r20
    1eac:	81 70       	andi	r24, 0x01	; 1
    1eae:	ec 81       	ldd	r30, Y+4	; 0x04
    1eb0:	fd 81       	ldd	r31, Y+5	; 0x05
    1eb2:	80 83       	st	Z, r24
    1eb4:	2d c0       	rjmp	.+90     	; 0x1f10 <DIO_u8GetPinValue+0x11c>
			case DIO_u8PORTC: * Copy_Pu8Value = GET_BIT(PINC,Copy_u8Pin); break;
    1eb6:	e3 e3       	ldi	r30, 0x33	; 51
    1eb8:	f0 e0       	ldi	r31, 0x00	; 0
    1eba:	80 81       	ld	r24, Z
    1ebc:	28 2f       	mov	r18, r24
    1ebe:	30 e0       	ldi	r19, 0x00	; 0
    1ec0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec2:	88 2f       	mov	r24, r24
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	a9 01       	movw	r20, r18
    1ec8:	02 c0       	rjmp	.+4      	; 0x1ece <DIO_u8GetPinValue+0xda>
    1eca:	55 95       	asr	r21
    1ecc:	47 95       	ror	r20
    1ece:	8a 95       	dec	r24
    1ed0:	e2 f7       	brpl	.-8      	; 0x1eca <DIO_u8GetPinValue+0xd6>
    1ed2:	ca 01       	movw	r24, r20
    1ed4:	81 70       	andi	r24, 0x01	; 1
    1ed6:	ec 81       	ldd	r30, Y+4	; 0x04
    1ed8:	fd 81       	ldd	r31, Y+5	; 0x05
    1eda:	80 83       	st	Z, r24
    1edc:	19 c0       	rjmp	.+50     	; 0x1f10 <DIO_u8GetPinValue+0x11c>
			case DIO_u8PORTD: * Copy_Pu8Value = GET_BIT(PIND,Copy_u8Pin); break;
    1ede:	e0 e3       	ldi	r30, 0x30	; 48
    1ee0:	f0 e0       	ldi	r31, 0x00	; 0
    1ee2:	80 81       	ld	r24, Z
    1ee4:	28 2f       	mov	r18, r24
    1ee6:	30 e0       	ldi	r19, 0x00	; 0
    1ee8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eea:	88 2f       	mov	r24, r24
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	a9 01       	movw	r20, r18
    1ef0:	02 c0       	rjmp	.+4      	; 0x1ef6 <DIO_u8GetPinValue+0x102>
    1ef2:	55 95       	asr	r21
    1ef4:	47 95       	ror	r20
    1ef6:	8a 95       	dec	r24
    1ef8:	e2 f7       	brpl	.-8      	; 0x1ef2 <DIO_u8GetPinValue+0xfe>
    1efa:	ca 01       	movw	r24, r20
    1efc:	81 70       	andi	r24, 0x01	; 1
    1efe:	ec 81       	ldd	r30, Y+4	; 0x04
    1f00:	fd 81       	ldd	r31, Y+5	; 0x05
    1f02:	80 83       	st	Z, r24
    1f04:	05 c0       	rjmp	.+10     	; 0x1f10 <DIO_u8GetPinValue+0x11c>
			default: Local_u8ErrorState =1; break;
    1f06:	81 e0       	ldi	r24, 0x01	; 1
    1f08:	89 83       	std	Y+1, r24	; 0x01
    1f0a:	02 c0       	rjmp	.+4      	; 0x1f10 <DIO_u8GetPinValue+0x11c>

			}
	}
	else
	{
		Local_u8ErrorState = 1;
    1f0c:	81 e0       	ldi	r24, 0x01	; 1
    1f0e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1f10:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f12:	27 96       	adiw	r28, 0x07	; 7
    1f14:	0f b6       	in	r0, 0x3f	; 63
    1f16:	f8 94       	cli
    1f18:	de bf       	out	0x3e, r29	; 62
    1f1a:	0f be       	out	0x3f, r0	; 63
    1f1c:	cd bf       	out	0x3d, r28	; 61
    1f1e:	cf 91       	pop	r28
    1f20:	df 91       	pop	r29
    1f22:	08 95       	ret

00001f24 <DIO_u8AndWithPort>:

u8 DIO_u8AndWithPort(u8 Copy_u8port, u8 Copy_u8Value)
{
    1f24:	df 93       	push	r29
    1f26:	cf 93       	push	r28
    1f28:	00 d0       	rcall	.+0      	; 0x1f2a <DIO_u8AndWithPort+0x6>
    1f2a:	00 d0       	rcall	.+0      	; 0x1f2c <DIO_u8AndWithPort+0x8>
    1f2c:	0f 92       	push	r0
    1f2e:	cd b7       	in	r28, 0x3d	; 61
    1f30:	de b7       	in	r29, 0x3e	; 62
    1f32:	8a 83       	std	Y+2, r24	; 0x02
    1f34:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Result = 0;
    1f36:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8port)
    1f38:	8a 81       	ldd	r24, Y+2	; 0x02
    1f3a:	28 2f       	mov	r18, r24
    1f3c:	30 e0       	ldi	r19, 0x00	; 0
    1f3e:	3d 83       	std	Y+5, r19	; 0x05
    1f40:	2c 83       	std	Y+4, r18	; 0x04
    1f42:	8c 81       	ldd	r24, Y+4	; 0x04
    1f44:	9d 81       	ldd	r25, Y+5	; 0x05
    1f46:	81 30       	cpi	r24, 0x01	; 1
    1f48:	91 05       	cpc	r25, r1
    1f4a:	e1 f0       	breq	.+56     	; 0x1f84 <DIO_u8AndWithPort+0x60>
    1f4c:	2c 81       	ldd	r18, Y+4	; 0x04
    1f4e:	3d 81       	ldd	r19, Y+5	; 0x05
    1f50:	22 30       	cpi	r18, 0x02	; 2
    1f52:	31 05       	cpc	r19, r1
    1f54:	2c f4       	brge	.+10     	; 0x1f60 <DIO_u8AndWithPort+0x3c>
    1f56:	8c 81       	ldd	r24, Y+4	; 0x04
    1f58:	9d 81       	ldd	r25, Y+5	; 0x05
    1f5a:	00 97       	sbiw	r24, 0x00	; 0
    1f5c:	61 f0       	breq	.+24     	; 0x1f76 <DIO_u8AndWithPort+0x52>
    1f5e:	26 c0       	rjmp	.+76     	; 0x1fac <DIO_u8AndWithPort+0x88>
    1f60:	2c 81       	ldd	r18, Y+4	; 0x04
    1f62:	3d 81       	ldd	r19, Y+5	; 0x05
    1f64:	22 30       	cpi	r18, 0x02	; 2
    1f66:	31 05       	cpc	r19, r1
    1f68:	a1 f0       	breq	.+40     	; 0x1f92 <DIO_u8AndWithPort+0x6e>
    1f6a:	8c 81       	ldd	r24, Y+4	; 0x04
    1f6c:	9d 81       	ldd	r25, Y+5	; 0x05
    1f6e:	83 30       	cpi	r24, 0x03	; 3
    1f70:	91 05       	cpc	r25, r1
    1f72:	b1 f0       	breq	.+44     	; 0x1fa0 <DIO_u8AndWithPort+0x7c>
    1f74:	1b c0       	rjmp	.+54     	; 0x1fac <DIO_u8AndWithPort+0x88>
			{
			case DIO_u8PORTA: Local_u8Result= PORTA & Copy_u8Value; break;
    1f76:	eb e3       	ldi	r30, 0x3B	; 59
    1f78:	f0 e0       	ldi	r31, 0x00	; 0
    1f7a:	90 81       	ld	r25, Z
    1f7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f7e:	89 23       	and	r24, r25
    1f80:	89 83       	std	Y+1, r24	; 0x01
    1f82:	14 c0       	rjmp	.+40     	; 0x1fac <DIO_u8AndWithPort+0x88>
			case DIO_u8PORTB: Local_u8Result= PORTB & Copy_u8Value; break;
    1f84:	e8 e3       	ldi	r30, 0x38	; 56
    1f86:	f0 e0       	ldi	r31, 0x00	; 0
    1f88:	90 81       	ld	r25, Z
    1f8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f8c:	89 23       	and	r24, r25
    1f8e:	89 83       	std	Y+1, r24	; 0x01
    1f90:	0d c0       	rjmp	.+26     	; 0x1fac <DIO_u8AndWithPort+0x88>
			case DIO_u8PORTC: Local_u8Result= PORTC & Copy_u8Value; break;
    1f92:	e5 e3       	ldi	r30, 0x35	; 53
    1f94:	f0 e0       	ldi	r31, 0x00	; 0
    1f96:	90 81       	ld	r25, Z
    1f98:	8b 81       	ldd	r24, Y+3	; 0x03
    1f9a:	89 23       	and	r24, r25
    1f9c:	89 83       	std	Y+1, r24	; 0x01
    1f9e:	06 c0       	rjmp	.+12     	; 0x1fac <DIO_u8AndWithPort+0x88>
			case DIO_u8PORTD: Local_u8Result = PORTD & Copy_u8Value; break;
    1fa0:	e2 e3       	ldi	r30, 0x32	; 50
    1fa2:	f0 e0       	ldi	r31, 0x00	; 0
    1fa4:	90 81       	ld	r25, Z
    1fa6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa8:	89 23       	and	r24, r25
    1faa:	89 83       	std	Y+1, r24	; 0x01
			default:  break;


			}
	return Local_u8Result;
    1fac:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fae:	0f 90       	pop	r0
    1fb0:	0f 90       	pop	r0
    1fb2:	0f 90       	pop	r0
    1fb4:	0f 90       	pop	r0
    1fb6:	0f 90       	pop	r0
    1fb8:	cf 91       	pop	r28
    1fba:	df 91       	pop	r29
    1fbc:	08 95       	ret

00001fbe <KPD_u8GetPressedKey>:
#include "KPD_private.h"



u8 KPD_u8GetPressedKey(void)
{
    1fbe:	df 93       	push	r29
    1fc0:	cf 93       	push	r28
    1fc2:	00 d0       	rcall	.+0      	; 0x1fc4 <KPD_u8GetPressedKey+0x6>
    1fc4:	00 d0       	rcall	.+0      	; 0x1fc6 <KPD_u8GetPressedKey+0x8>
    1fc6:	0f 92       	push	r0
    1fc8:	cd b7       	in	r28, 0x3d	; 61
    1fca:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8PressedKey = KPD_NO_PRESSED_KEY;
    1fcc:	8f ef       	ldi	r24, 0xFF	; 255
    1fce:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8PinState;
	static u8 Local_u8KPDColArr[COLUMN_NUM]= {KPD_COL_0_PIN,KPD_COL_1_PIN,KPD_COL_2_PIN,KPD_COL_3_PIN };
	static u8 Local_u8KPDRowArr[ROW_NUM]= {KPD_ROW_0_PIN,KPD_ROW_1_PIN,KPD_ROW_2_PIN,KPD_ROW_3_PIN };
	static u8 Local_u8KPDArr[ROW_NUM][COLUMN_NUM]=KPD_ARR_VAL;

	for (Local_u8ColCounter=0;Local_u8ColCounter<COLUMN_NUM;Local_u8ColCounter++)
    1fd0:	19 82       	std	Y+1, r1	; 0x01
    1fd2:	5e c0       	rjmp	.+188    	; 0x2090 <KPD_u8GetPressedKey+0xd2>
	{
		/* Activate current Cloumn*/
		DIO_u8SetPinValue(KPD_COL_PORT,Local_u8KPDColArr[Local_u8ColCounter],DIO_u8PIN_LOW);
    1fd4:	89 81       	ldd	r24, Y+1	; 0x01
    1fd6:	88 2f       	mov	r24, r24
    1fd8:	90 e0       	ldi	r25, 0x00	; 0
    1fda:	fc 01       	movw	r30, r24
    1fdc:	e0 57       	subi	r30, 0x70	; 112
    1fde:	fe 4f       	sbci	r31, 0xFE	; 254
    1fe0:	90 81       	ld	r25, Z
    1fe2:	83 e0       	ldi	r24, 0x03	; 3
    1fe4:	69 2f       	mov	r22, r25
    1fe6:	40 e0       	ldi	r20, 0x00	; 0
    1fe8:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <DIO_u8SetPinValue>

		for(Local_u8RowCounter=0;Local_u8RowCounter<ROW_NUM;Local_u8RowCounter++)
    1fec:	1a 82       	std	Y+2, r1	; 0x02
    1fee:	3d c0       	rjmp	.+122    	; 0x206a <KPD_u8GetPressedKey+0xac>
		{
			/* Read the current row */
			DIO_u8GetPinValue(KPD_ROW_PORT,Local_u8KPDRowArr[Local_u8RowCounter],&Local_u8PinState);
    1ff0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff2:	88 2f       	mov	r24, r24
    1ff4:	90 e0       	ldi	r25, 0x00	; 0
    1ff6:	fc 01       	movw	r30, r24
    1ff8:	e4 57       	subi	r30, 0x74	; 116
    1ffa:	fe 4f       	sbci	r31, 0xFE	; 254
    1ffc:	90 81       	ld	r25, Z
    1ffe:	9e 01       	movw	r18, r28
    2000:	2c 5f       	subi	r18, 0xFC	; 252
    2002:	3f 4f       	sbci	r19, 0xFF	; 255
    2004:	81 e0       	ldi	r24, 0x01	; 1
    2006:	69 2f       	mov	r22, r25
    2008:	a9 01       	movw	r20, r18
    200a:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <DIO_u8GetPinValue>
			/* Check if switch is pressed */

			if(DIO_u8PIN_LOW == Local_u8PinState )
    200e:	8c 81       	ldd	r24, Y+4	; 0x04
    2010:	88 23       	and	r24, r24
    2012:	41 f5       	brne	.+80     	; 0x2064 <KPD_u8GetPressedKey+0xa6>
			{

				Local_u8PressedKey = Local_u8KPDArr[Local_u8RowCounter][Local_u8ColCounter];
    2014:	8a 81       	ldd	r24, Y+2	; 0x02
    2016:	48 2f       	mov	r20, r24
    2018:	50 e0       	ldi	r21, 0x00	; 0
    201a:	89 81       	ldd	r24, Y+1	; 0x01
    201c:	28 2f       	mov	r18, r24
    201e:	30 e0       	ldi	r19, 0x00	; 0
    2020:	ca 01       	movw	r24, r20
    2022:	88 0f       	add	r24, r24
    2024:	99 1f       	adc	r25, r25
    2026:	88 0f       	add	r24, r24
    2028:	99 1f       	adc	r25, r25
    202a:	82 0f       	add	r24, r18
    202c:	93 1f       	adc	r25, r19
    202e:	fc 01       	movw	r30, r24
    2030:	e4 58       	subi	r30, 0x84	; 132
    2032:	fe 4f       	sbci	r31, 0xFE	; 254
    2034:	80 81       	ld	r24, Z
    2036:	8b 83       	std	Y+3, r24	; 0x03
    2038:	0f c0       	rjmp	.+30     	; 0x2058 <KPD_u8GetPressedKey+0x9a>
				/* Polling (busy waiting ) until the key is released */
				while (DIO_u8PIN_LOW == Local_u8PinState)
				{
					DIO_u8GetPinValue(KPD_ROW_PORT,Local_u8KPDRowArr[Local_u8RowCounter],&Local_u8PinState);
    203a:	8a 81       	ldd	r24, Y+2	; 0x02
    203c:	88 2f       	mov	r24, r24
    203e:	90 e0       	ldi	r25, 0x00	; 0
    2040:	fc 01       	movw	r30, r24
    2042:	e4 57       	subi	r30, 0x74	; 116
    2044:	fe 4f       	sbci	r31, 0xFE	; 254
    2046:	90 81       	ld	r25, Z
    2048:	9e 01       	movw	r18, r28
    204a:	2c 5f       	subi	r18, 0xFC	; 252
    204c:	3f 4f       	sbci	r19, 0xFF	; 255
    204e:	81 e0       	ldi	r24, 0x01	; 1
    2050:	69 2f       	mov	r22, r25
    2052:	a9 01       	movw	r20, r18
    2054:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <DIO_u8GetPinValue>
			if(DIO_u8PIN_LOW == Local_u8PinState )
			{

				Local_u8PressedKey = Local_u8KPDArr[Local_u8RowCounter][Local_u8ColCounter];
				/* Polling (busy waiting ) until the key is released */
				while (DIO_u8PIN_LOW == Local_u8PinState)
    2058:	8c 81       	ldd	r24, Y+4	; 0x04
    205a:	88 23       	and	r24, r24
    205c:	71 f3       	breq	.-36     	; 0x203a <KPD_u8GetPressedKey+0x7c>
				{
					DIO_u8GetPinValue(KPD_ROW_PORT,Local_u8KPDRowArr[Local_u8RowCounter],&Local_u8PinState);

				}
				return Local_u8PressedKey;
    205e:	8b 81       	ldd	r24, Y+3	; 0x03
    2060:	8d 83       	std	Y+5, r24	; 0x05
    2062:	1c c0       	rjmp	.+56     	; 0x209c <KPD_u8GetPressedKey+0xde>
	for (Local_u8ColCounter=0;Local_u8ColCounter<COLUMN_NUM;Local_u8ColCounter++)
	{
		/* Activate current Cloumn*/
		DIO_u8SetPinValue(KPD_COL_PORT,Local_u8KPDColArr[Local_u8ColCounter],DIO_u8PIN_LOW);

		for(Local_u8RowCounter=0;Local_u8RowCounter<ROW_NUM;Local_u8RowCounter++)
    2064:	8a 81       	ldd	r24, Y+2	; 0x02
    2066:	8f 5f       	subi	r24, 0xFF	; 255
    2068:	8a 83       	std	Y+2, r24	; 0x02
    206a:	8a 81       	ldd	r24, Y+2	; 0x02
    206c:	84 30       	cpi	r24, 0x04	; 4
    206e:	08 f4       	brcc	.+2      	; 0x2072 <KPD_u8GetPressedKey+0xb4>
    2070:	bf cf       	rjmp	.-130    	; 0x1ff0 <KPD_u8GetPressedKey+0x32>

		}

		/* Deactivate the current column */

		DIO_u8SetPinValue(KPD_COL_PORT,Local_u8KPDColArr[Local_u8ColCounter],DIO_u8PIN_HIGH);
    2072:	89 81       	ldd	r24, Y+1	; 0x01
    2074:	88 2f       	mov	r24, r24
    2076:	90 e0       	ldi	r25, 0x00	; 0
    2078:	fc 01       	movw	r30, r24
    207a:	e0 57       	subi	r30, 0x70	; 112
    207c:	fe 4f       	sbci	r31, 0xFE	; 254
    207e:	90 81       	ld	r25, Z
    2080:	83 e0       	ldi	r24, 0x03	; 3
    2082:	69 2f       	mov	r22, r25
    2084:	41 e0       	ldi	r20, 0x01	; 1
    2086:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <DIO_u8SetPinValue>
	u8 Local_u8PinState;
	static u8 Local_u8KPDColArr[COLUMN_NUM]= {KPD_COL_0_PIN,KPD_COL_1_PIN,KPD_COL_2_PIN,KPD_COL_3_PIN };
	static u8 Local_u8KPDRowArr[ROW_NUM]= {KPD_ROW_0_PIN,KPD_ROW_1_PIN,KPD_ROW_2_PIN,KPD_ROW_3_PIN };
	static u8 Local_u8KPDArr[ROW_NUM][COLUMN_NUM]=KPD_ARR_VAL;

	for (Local_u8ColCounter=0;Local_u8ColCounter<COLUMN_NUM;Local_u8ColCounter++)
    208a:	89 81       	ldd	r24, Y+1	; 0x01
    208c:	8f 5f       	subi	r24, 0xFF	; 255
    208e:	89 83       	std	Y+1, r24	; 0x01
    2090:	89 81       	ldd	r24, Y+1	; 0x01
    2092:	84 30       	cpi	r24, 0x04	; 4
    2094:	08 f4       	brcc	.+2      	; 0x2098 <KPD_u8GetPressedKey+0xda>
    2096:	9e cf       	rjmp	.-196    	; 0x1fd4 <KPD_u8GetPressedKey+0x16>

		DIO_u8SetPinValue(KPD_COL_PORT,Local_u8KPDColArr[Local_u8ColCounter],DIO_u8PIN_HIGH);

	}

	return Local_u8PressedKey;
    2098:	8b 81       	ldd	r24, Y+3	; 0x03
    209a:	8d 83       	std	Y+5, r24	; 0x05
    209c:	8d 81       	ldd	r24, Y+5	; 0x05





}
    209e:	0f 90       	pop	r0
    20a0:	0f 90       	pop	r0
    20a2:	0f 90       	pop	r0
    20a4:	0f 90       	pop	r0
    20a6:	0f 90       	pop	r0
    20a8:	cf 91       	pop	r28
    20aa:	df 91       	pop	r29
    20ac:	08 95       	ret

000020ae <PORT_VoidInit>:
#include "PORT_interface.h"
#include "PORT_register.h"


void PORT_VoidInit(void)
{
    20ae:	df 93       	push	r29
    20b0:	cf 93       	push	r28
    20b2:	cd b7       	in	r28, 0x3d	; 61
    20b4:	de b7       	in	r29, 0x3e	; 62
	DDRA = PORTA_DIR;
    20b6:	ea e3       	ldi	r30, 0x3A	; 58
    20b8:	f0 e0       	ldi	r31, 0x00	; 0
    20ba:	8f ef       	ldi	r24, 0xFF	; 255
    20bc:	80 83       	st	Z, r24
	DDRB = PORTB_DIR;
    20be:	e7 e3       	ldi	r30, 0x37	; 55
    20c0:	f0 e0       	ldi	r31, 0x00	; 0
    20c2:	10 82       	st	Z, r1
	DDRC = PORTC_DIR;
    20c4:	e4 e3       	ldi	r30, 0x34	; 52
    20c6:	f0 e0       	ldi	r31, 0x00	; 0
    20c8:	10 82       	st	Z, r1
	DDRD = PORTD_DIR;
    20ca:	e1 e3       	ldi	r30, 0x31	; 49
    20cc:	f0 e0       	ldi	r31, 0x00	; 0
    20ce:	8c e3       	ldi	r24, 0x3C	; 60
    20d0:	80 83       	st	Z, r24
	
	PORTA = PORTA_INITIAL_VALUE;
    20d2:	eb e3       	ldi	r30, 0x3B	; 59
    20d4:	f0 e0       	ldi	r31, 0x00	; 0
    20d6:	10 82       	st	Z, r1
	PORTB = PORTB_INITIAL_VALUE;
    20d8:	e8 e3       	ldi	r30, 0x38	; 56
    20da:	f0 e0       	ldi	r31, 0x00	; 0
    20dc:	80 ef       	ldi	r24, 0xF0	; 240
    20de:	80 83       	st	Z, r24
	PORTC = PORTC_INITIAL_VALUE;
    20e0:	e5 e3       	ldi	r30, 0x35	; 53
    20e2:	f0 e0       	ldi	r31, 0x00	; 0
    20e4:	10 82       	st	Z, r1
	PORTD = PORTD_INITIAL_VALUE;
    20e6:	e2 e3       	ldi	r30, 0x32	; 50
    20e8:	f0 e0       	ldi	r31, 0x00	; 0
    20ea:	10 82       	st	Z, r1


}
    20ec:	cf 91       	pop	r28
    20ee:	df 91       	pop	r29
    20f0:	08 95       	ret

000020f2 <main>:
/*********************Global Variables *****************************/


/************************ Main Prog *******************************/
void main(void)
{
    20f2:	0f 93       	push	r16
    20f4:	1f 93       	push	r17
    20f6:	df 93       	push	r29
    20f8:	cf 93       	push	r28
    20fa:	cd b7       	in	r28, 0x3d	; 61
    20fc:	de b7       	in	r29, 0x3e	; 62
    20fe:	28 97       	sbiw	r28, 0x08	; 8
    2100:	0f b6       	in	r0, 0x3f	; 63
    2102:	f8 94       	cli
    2104:	de bf       	out	0x3e, r29	; 62
    2106:	0f be       	out	0x3f, r0	; 63
    2108:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8Counter;
	u8 Local_u8CalcArr[5];


	/******************** Driver Init ***************************/
	PORT_VoidInit();
    210a:	0e 94 57 10 	call	0x20ae	; 0x20ae <PORT_VoidInit>
	CLCD_voidInit();
    210e:	0e 94 23 0b 	call	0x1646	; 0x1646 <CLCD_voidInit>



	while(1)
	{
		CLCD_voidGoToXY(0,0);
    2112:	80 e0       	ldi	r24, 0x00	; 0
    2114:	60 e0       	ldi	r22, 0x00	; 0
    2116:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <CLCD_voidGoToXY>
		CLCD_voidSendString("  Simple CalC");
    211a:	80 e6       	ldi	r24, 0x60	; 96
    211c:	90 e0       	ldi	r25, 0x00	; 0
    211e:	0e 94 bd 0b 	call	0x177a	; 0x177a <CLCD_voidSendString>
		CLCD_voidGoToXY(1,4);
    2122:	81 e0       	ldi	r24, 0x01	; 1
    2124:	64 e0       	ldi	r22, 0x04	; 4
    2126:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <CLCD_voidGoToXY>

		for(Local_u8Counter=0;Local_u8Counter<5;Local_u8Counter++)
    212a:	19 82       	std	Y+1, r1	; 0x01
    212c:	3b c1       	rjmp	.+630    	; 0x23a4 <main+0x2b2>
			//	for(;;)
		{
			do
			{
				Local_u8CalcArr[Local_u8Counter] = KPD_u8GetPressedKey();
    212e:	89 81       	ldd	r24, Y+1	; 0x01
    2130:	08 2f       	mov	r16, r24
    2132:	10 e0       	ldi	r17, 0x00	; 0
    2134:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <KPD_u8GetPressedKey>
    2138:	28 2f       	mov	r18, r24
    213a:	ce 01       	movw	r24, r28
    213c:	02 96       	adiw	r24, 0x02	; 2
    213e:	fc 01       	movw	r30, r24
    2140:	e0 0f       	add	r30, r16
    2142:	f1 1f       	adc	r31, r17
    2144:	20 83       	st	Z, r18
			}while(Local_u8CalcArr[Local_u8Counter] != '/'||Local_u8CalcArr[Local_u8Counter] !='*'||Local_u8CalcArr[Local_u8Counter] !='-'||Local_u8CalcArr[Local_u8Counter] !='+'||Local_u8CalcArr[Local_u8Counter] !='=');
    2146:	89 81       	ldd	r24, Y+1	; 0x01
    2148:	28 2f       	mov	r18, r24
    214a:	30 e0       	ldi	r19, 0x00	; 0
    214c:	ce 01       	movw	r24, r28
    214e:	02 96       	adiw	r24, 0x02	; 2
    2150:	fc 01       	movw	r30, r24
    2152:	e2 0f       	add	r30, r18
    2154:	f3 1f       	adc	r31, r19
    2156:	80 81       	ld	r24, Z
    2158:	8f 32       	cpi	r24, 0x2F	; 47
    215a:	49 f7       	brne	.-46     	; 0x212e <main+0x3c>
    215c:	89 81       	ldd	r24, Y+1	; 0x01
    215e:	28 2f       	mov	r18, r24
    2160:	30 e0       	ldi	r19, 0x00	; 0
    2162:	ce 01       	movw	r24, r28
    2164:	02 96       	adiw	r24, 0x02	; 2
    2166:	fc 01       	movw	r30, r24
    2168:	e2 0f       	add	r30, r18
    216a:	f3 1f       	adc	r31, r19
    216c:	80 81       	ld	r24, Z
    216e:	8a 32       	cpi	r24, 0x2A	; 42
    2170:	f1 f6       	brne	.-68     	; 0x212e <main+0x3c>
    2172:	89 81       	ldd	r24, Y+1	; 0x01
    2174:	28 2f       	mov	r18, r24
    2176:	30 e0       	ldi	r19, 0x00	; 0
    2178:	ce 01       	movw	r24, r28
    217a:	02 96       	adiw	r24, 0x02	; 2
    217c:	fc 01       	movw	r30, r24
    217e:	e2 0f       	add	r30, r18
    2180:	f3 1f       	adc	r31, r19
    2182:	80 81       	ld	r24, Z
    2184:	8d 32       	cpi	r24, 0x2D	; 45
    2186:	99 f6       	brne	.-90     	; 0x212e <main+0x3c>
    2188:	89 81       	ldd	r24, Y+1	; 0x01
    218a:	28 2f       	mov	r18, r24
    218c:	30 e0       	ldi	r19, 0x00	; 0
    218e:	ce 01       	movw	r24, r28
    2190:	02 96       	adiw	r24, 0x02	; 2
    2192:	fc 01       	movw	r30, r24
    2194:	e2 0f       	add	r30, r18
    2196:	f3 1f       	adc	r31, r19
    2198:	80 81       	ld	r24, Z
    219a:	8b 32       	cpi	r24, 0x2B	; 43
    219c:	41 f6       	brne	.-112    	; 0x212e <main+0x3c>
    219e:	89 81       	ldd	r24, Y+1	; 0x01
    21a0:	28 2f       	mov	r18, r24
    21a2:	30 e0       	ldi	r19, 0x00	; 0
    21a4:	ce 01       	movw	r24, r28
    21a6:	02 96       	adiw	r24, 0x02	; 2
    21a8:	fc 01       	movw	r30, r24
    21aa:	e2 0f       	add	r30, r18
    21ac:	f3 1f       	adc	r31, r19
    21ae:	80 81       	ld	r24, Z
    21b0:	8d 33       	cpi	r24, 0x3D	; 61
    21b2:	09 f0       	breq	.+2      	; 0x21b6 <main+0xc4>
    21b4:	bc cf       	rjmp	.-136    	; 0x212e <main+0x3c>
			if(Local_u8CalcArr[Local_u8Counter] == '/'||Local_u8CalcArr[Local_u8Counter] =='*'||Local_u8CalcArr[Local_u8Counter] =='-'||Local_u8CalcArr[Local_u8Counter] =='+'||Local_u8CalcArr[Local_u8Counter] =='=')
    21b6:	89 81       	ldd	r24, Y+1	; 0x01
    21b8:	28 2f       	mov	r18, r24
    21ba:	30 e0       	ldi	r19, 0x00	; 0
    21bc:	ce 01       	movw	r24, r28
    21be:	02 96       	adiw	r24, 0x02	; 2
    21c0:	fc 01       	movw	r30, r24
    21c2:	e2 0f       	add	r30, r18
    21c4:	f3 1f       	adc	r31, r19
    21c6:	80 81       	ld	r24, Z
    21c8:	8f 32       	cpi	r24, 0x2F	; 47
    21ca:	69 f1       	breq	.+90     	; 0x2226 <main+0x134>
    21cc:	89 81       	ldd	r24, Y+1	; 0x01
    21ce:	28 2f       	mov	r18, r24
    21d0:	30 e0       	ldi	r19, 0x00	; 0
    21d2:	ce 01       	movw	r24, r28
    21d4:	02 96       	adiw	r24, 0x02	; 2
    21d6:	fc 01       	movw	r30, r24
    21d8:	e2 0f       	add	r30, r18
    21da:	f3 1f       	adc	r31, r19
    21dc:	80 81       	ld	r24, Z
    21de:	8a 32       	cpi	r24, 0x2A	; 42
    21e0:	11 f1       	breq	.+68     	; 0x2226 <main+0x134>
    21e2:	89 81       	ldd	r24, Y+1	; 0x01
    21e4:	28 2f       	mov	r18, r24
    21e6:	30 e0       	ldi	r19, 0x00	; 0
    21e8:	ce 01       	movw	r24, r28
    21ea:	02 96       	adiw	r24, 0x02	; 2
    21ec:	fc 01       	movw	r30, r24
    21ee:	e2 0f       	add	r30, r18
    21f0:	f3 1f       	adc	r31, r19
    21f2:	80 81       	ld	r24, Z
    21f4:	8d 32       	cpi	r24, 0x2D	; 45
    21f6:	b9 f0       	breq	.+46     	; 0x2226 <main+0x134>
    21f8:	89 81       	ldd	r24, Y+1	; 0x01
    21fa:	28 2f       	mov	r18, r24
    21fc:	30 e0       	ldi	r19, 0x00	; 0
    21fe:	ce 01       	movw	r24, r28
    2200:	02 96       	adiw	r24, 0x02	; 2
    2202:	fc 01       	movw	r30, r24
    2204:	e2 0f       	add	r30, r18
    2206:	f3 1f       	adc	r31, r19
    2208:	80 81       	ld	r24, Z
    220a:	8b 32       	cpi	r24, 0x2B	; 43
    220c:	61 f0       	breq	.+24     	; 0x2226 <main+0x134>
    220e:	89 81       	ldd	r24, Y+1	; 0x01
    2210:	28 2f       	mov	r18, r24
    2212:	30 e0       	ldi	r19, 0x00	; 0
    2214:	ce 01       	movw	r24, r28
    2216:	02 96       	adiw	r24, 0x02	; 2
    2218:	fc 01       	movw	r30, r24
    221a:	e2 0f       	add	r30, r18
    221c:	f3 1f       	adc	r31, r19
    221e:	80 81       	ld	r24, Z
    2220:	8d 33       	cpi	r24, 0x3D	; 61
    2222:	09 f0       	breq	.+2      	; 0x2226 <main+0x134>
    2224:	97 c0       	rjmp	.+302    	; 0x2354 <main+0x262>
			{
				CLCD_voidSendData(Local_u8CalcArr[Local_u8Counter]);
    2226:	89 81       	ldd	r24, Y+1	; 0x01
    2228:	28 2f       	mov	r18, r24
    222a:	30 e0       	ldi	r19, 0x00	; 0
    222c:	ce 01       	movw	r24, r28
    222e:	02 96       	adiw	r24, 0x02	; 2
    2230:	fc 01       	movw	r30, r24
    2232:	e2 0f       	add	r30, r18
    2234:	f3 1f       	adc	r31, r19
    2236:	80 81       	ld	r24, Z
    2238:	0e 94 0a 09 	call	0x1214	; 0x1214 <CLCD_voidSendData>
				if(Local_u8CalcArr[Local_u8Counter] =='=')
    223c:	89 81       	ldd	r24, Y+1	; 0x01
    223e:	28 2f       	mov	r18, r24
    2240:	30 e0       	ldi	r19, 0x00	; 0
    2242:	ce 01       	movw	r24, r28
    2244:	02 96       	adiw	r24, 0x02	; 2
    2246:	fc 01       	movw	r30, r24
    2248:	e2 0f       	add	r30, r18
    224a:	f3 1f       	adc	r31, r19
    224c:	80 81       	ld	r24, Z
    224e:	8d 33       	cpi	r24, 0x3D	; 61
    2250:	09 f0       	breq	.+2      	; 0x2254 <main+0x162>
    2252:	a5 c0       	rjmp	.+330    	; 0x239e <main+0x2ac>
				{
					switch(Local_u8CalcArr[1])
    2254:	8b 81       	ldd	r24, Y+3	; 0x03
    2256:	28 2f       	mov	r18, r24
    2258:	30 e0       	ldi	r19, 0x00	; 0
    225a:	38 87       	std	Y+8, r19	; 0x08
    225c:	2f 83       	std	Y+7, r18	; 0x07
    225e:	8f 81       	ldd	r24, Y+7	; 0x07
    2260:	98 85       	ldd	r25, Y+8	; 0x08
    2262:	8b 32       	cpi	r24, 0x2B	; 43
    2264:	91 05       	cpc	r25, r1
    2266:	b9 f0       	breq	.+46     	; 0x2296 <main+0x1a4>
    2268:	2f 81       	ldd	r18, Y+7	; 0x07
    226a:	38 85       	ldd	r19, Y+8	; 0x08
    226c:	2c 32       	cpi	r18, 0x2C	; 44
    226e:	31 05       	cpc	r19, r1
    2270:	34 f4       	brge	.+12     	; 0x227e <main+0x18c>
    2272:	8f 81       	ldd	r24, Y+7	; 0x07
    2274:	98 85       	ldd	r25, Y+8	; 0x08
    2276:	8a 32       	cpi	r24, 0x2A	; 42
    2278:	91 05       	cpc	r25, r1
    227a:	b9 f1       	breq	.+110    	; 0x22ea <main+0x1f8>
    227c:	62 c0       	rjmp	.+196    	; 0x2342 <main+0x250>
    227e:	2f 81       	ldd	r18, Y+7	; 0x07
    2280:	38 85       	ldd	r19, Y+8	; 0x08
    2282:	2d 32       	cpi	r18, 0x2D	; 45
    2284:	31 05       	cpc	r19, r1
    2286:	d9 f0       	breq	.+54     	; 0x22be <main+0x1cc>
    2288:	8f 81       	ldd	r24, Y+7	; 0x07
    228a:	98 85       	ldd	r25, Y+8	; 0x08
    228c:	8f 32       	cpi	r24, 0x2F	; 47
    228e:	91 05       	cpc	r25, r1
    2290:	09 f4       	brne	.+2      	; 0x2294 <main+0x1a2>
    2292:	41 c0       	rjmp	.+130    	; 0x2316 <main+0x224>
    2294:	56 c0       	rjmp	.+172    	; 0x2342 <main+0x250>
					{
					case '+':
						Local_u8CalcArr[5] =Local_u8CalcArr[0]+Local_u8CalcArr[2];
    2296:	9a 81       	ldd	r25, Y+2	; 0x02
    2298:	8c 81       	ldd	r24, Y+4	; 0x04
    229a:	89 0f       	add	r24, r25
    229c:	8f 83       	std	Y+7, r24	; 0x07
						CLCD_VoidWriteNumber(Local_u8CalcArr[5]);
    229e:	8f 81       	ldd	r24, Y+7	; 0x07
    22a0:	88 2f       	mov	r24, r24
    22a2:	90 e0       	ldi	r25, 0x00	; 0
    22a4:	a0 e0       	ldi	r26, 0x00	; 0
    22a6:	b0 e0       	ldi	r27, 0x00	; 0
    22a8:	bc 01       	movw	r22, r24
    22aa:	cd 01       	movw	r24, r26
    22ac:	0e 94 83 04 	call	0x906	; 0x906 <__floatunsisf>
    22b0:	dc 01       	movw	r26, r24
    22b2:	cb 01       	movw	r24, r22
    22b4:	bc 01       	movw	r22, r24
    22b6:	cd 01       	movw	r24, r26
    22b8:	0e 94 46 0c 	call	0x188c	; 0x188c <CLCD_VoidWriteNumber>
    22bc:	70 c0       	rjmp	.+224    	; 0x239e <main+0x2ac>
						break;
					case '-':
						Local_u8CalcArr[5] =Local_u8CalcArr[0]-Local_u8CalcArr[2];
    22be:	9a 81       	ldd	r25, Y+2	; 0x02
    22c0:	8c 81       	ldd	r24, Y+4	; 0x04
    22c2:	29 2f       	mov	r18, r25
    22c4:	28 1b       	sub	r18, r24
    22c6:	82 2f       	mov	r24, r18
    22c8:	8f 83       	std	Y+7, r24	; 0x07
						CLCD_VoidWriteNumber(Local_u8CalcArr[5]);
    22ca:	8f 81       	ldd	r24, Y+7	; 0x07
    22cc:	88 2f       	mov	r24, r24
    22ce:	90 e0       	ldi	r25, 0x00	; 0
    22d0:	a0 e0       	ldi	r26, 0x00	; 0
    22d2:	b0 e0       	ldi	r27, 0x00	; 0
    22d4:	bc 01       	movw	r22, r24
    22d6:	cd 01       	movw	r24, r26
    22d8:	0e 94 83 04 	call	0x906	; 0x906 <__floatunsisf>
    22dc:	dc 01       	movw	r26, r24
    22de:	cb 01       	movw	r24, r22
    22e0:	bc 01       	movw	r22, r24
    22e2:	cd 01       	movw	r24, r26
    22e4:	0e 94 46 0c 	call	0x188c	; 0x188c <CLCD_VoidWriteNumber>
    22e8:	5a c0       	rjmp	.+180    	; 0x239e <main+0x2ac>
						break;
					case '*':
						Local_u8CalcArr[5] =Local_u8CalcArr[0]*Local_u8CalcArr[2];
    22ea:	9a 81       	ldd	r25, Y+2	; 0x02
    22ec:	8c 81       	ldd	r24, Y+4	; 0x04
    22ee:	98 9f       	mul	r25, r24
    22f0:	80 2d       	mov	r24, r0
    22f2:	11 24       	eor	r1, r1
    22f4:	8f 83       	std	Y+7, r24	; 0x07
						CLCD_VoidWriteNumber(Local_u8CalcArr[5]);
    22f6:	8f 81       	ldd	r24, Y+7	; 0x07
    22f8:	88 2f       	mov	r24, r24
    22fa:	90 e0       	ldi	r25, 0x00	; 0
    22fc:	a0 e0       	ldi	r26, 0x00	; 0
    22fe:	b0 e0       	ldi	r27, 0x00	; 0
    2300:	bc 01       	movw	r22, r24
    2302:	cd 01       	movw	r24, r26
    2304:	0e 94 83 04 	call	0x906	; 0x906 <__floatunsisf>
    2308:	dc 01       	movw	r26, r24
    230a:	cb 01       	movw	r24, r22
    230c:	bc 01       	movw	r22, r24
    230e:	cd 01       	movw	r24, r26
    2310:	0e 94 46 0c 	call	0x188c	; 0x188c <CLCD_VoidWriteNumber>
    2314:	44 c0       	rjmp	.+136    	; 0x239e <main+0x2ac>
						break;
					case '/':
						Local_u8CalcArr[5] =Local_u8CalcArr[0]/Local_u8CalcArr[2];
    2316:	8a 81       	ldd	r24, Y+2	; 0x02
    2318:	9c 81       	ldd	r25, Y+4	; 0x04
    231a:	69 2f       	mov	r22, r25
    231c:	0e 94 d7 11 	call	0x23ae	; 0x23ae <__udivmodqi4>
    2320:	8f 83       	std	Y+7, r24	; 0x07
						CLCD_VoidWriteNumber(Local_u8CalcArr[5]);
    2322:	8f 81       	ldd	r24, Y+7	; 0x07
    2324:	88 2f       	mov	r24, r24
    2326:	90 e0       	ldi	r25, 0x00	; 0
    2328:	a0 e0       	ldi	r26, 0x00	; 0
    232a:	b0 e0       	ldi	r27, 0x00	; 0
    232c:	bc 01       	movw	r22, r24
    232e:	cd 01       	movw	r24, r26
    2330:	0e 94 83 04 	call	0x906	; 0x906 <__floatunsisf>
    2334:	dc 01       	movw	r26, r24
    2336:	cb 01       	movw	r24, r22
    2338:	bc 01       	movw	r22, r24
    233a:	cd 01       	movw	r24, r26
    233c:	0e 94 46 0c 	call	0x188c	; 0x188c <CLCD_VoidWriteNumber>
    2340:	2e c0       	rjmp	.+92     	; 0x239e <main+0x2ac>
						break;
					default:
						CLCD_voidGoToXY(1,0);
    2342:	81 e0       	ldi	r24, 0x01	; 1
    2344:	60 e0       	ldi	r22, 0x00	; 0
    2346:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <CLCD_voidGoToXY>
						CLCD_voidSendString("ERORR");
    234a:	8e e6       	ldi	r24, 0x6E	; 110
    234c:	90 e0       	ldi	r25, 0x00	; 0
    234e:	0e 94 bd 0b 	call	0x177a	; 0x177a <CLCD_voidSendString>
    2352:	25 c0       	rjmp	.+74     	; 0x239e <main+0x2ac>
						break;
					}
				}
			}
			else if(Local_u8CalcArr[Local_u8Counter] == 'c')
    2354:	89 81       	ldd	r24, Y+1	; 0x01
    2356:	28 2f       	mov	r18, r24
    2358:	30 e0       	ldi	r19, 0x00	; 0
    235a:	ce 01       	movw	r24, r28
    235c:	02 96       	adiw	r24, 0x02	; 2
    235e:	fc 01       	movw	r30, r24
    2360:	e2 0f       	add	r30, r18
    2362:	f3 1f       	adc	r31, r19
    2364:	80 81       	ld	r24, Z
    2366:	83 36       	cpi	r24, 0x63	; 99
    2368:	19 f4       	brne	.+6      	; 0x2370 <main+0x27e>
			{
				CLCD_voidClear();
    236a:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <CLCD_voidClear>
    236e:	d1 ce       	rjmp	.-606    	; 0x2112 <main+0x20>
				break;
			}
			else
			{
				CLCD_VoidWriteNumber(Local_u8CalcArr[Local_u8Counter]);
    2370:	89 81       	ldd	r24, Y+1	; 0x01
    2372:	28 2f       	mov	r18, r24
    2374:	30 e0       	ldi	r19, 0x00	; 0
    2376:	ce 01       	movw	r24, r28
    2378:	02 96       	adiw	r24, 0x02	; 2
    237a:	fc 01       	movw	r30, r24
    237c:	e2 0f       	add	r30, r18
    237e:	f3 1f       	adc	r31, r19
    2380:	80 81       	ld	r24, Z
    2382:	88 2f       	mov	r24, r24
    2384:	90 e0       	ldi	r25, 0x00	; 0
    2386:	a0 e0       	ldi	r26, 0x00	; 0
    2388:	b0 e0       	ldi	r27, 0x00	; 0
    238a:	bc 01       	movw	r22, r24
    238c:	cd 01       	movw	r24, r26
    238e:	0e 94 83 04 	call	0x906	; 0x906 <__floatunsisf>
    2392:	dc 01       	movw	r26, r24
    2394:	cb 01       	movw	r24, r22
    2396:	bc 01       	movw	r22, r24
    2398:	cd 01       	movw	r24, r26
    239a:	0e 94 46 0c 	call	0x188c	; 0x188c <CLCD_VoidWriteNumber>
	{
		CLCD_voidGoToXY(0,0);
		CLCD_voidSendString("  Simple CalC");
		CLCD_voidGoToXY(1,4);

		for(Local_u8Counter=0;Local_u8Counter<5;Local_u8Counter++)
    239e:	89 81       	ldd	r24, Y+1	; 0x01
    23a0:	8f 5f       	subi	r24, 0xFF	; 255
    23a2:	89 83       	std	Y+1, r24	; 0x01
    23a4:	89 81       	ldd	r24, Y+1	; 0x01
    23a6:	85 30       	cpi	r24, 0x05	; 5
    23a8:	08 f4       	brcc	.+2      	; 0x23ac <main+0x2ba>
    23aa:	c1 ce       	rjmp	.-638    	; 0x212e <main+0x3c>
    23ac:	b2 ce       	rjmp	.-668    	; 0x2112 <main+0x20>

000023ae <__udivmodqi4>:
    23ae:	99 1b       	sub	r25, r25
    23b0:	79 e0       	ldi	r23, 0x09	; 9
    23b2:	04 c0       	rjmp	.+8      	; 0x23bc <__udivmodqi4_ep>

000023b4 <__udivmodqi4_loop>:
    23b4:	99 1f       	adc	r25, r25
    23b6:	96 17       	cp	r25, r22
    23b8:	08 f0       	brcs	.+2      	; 0x23bc <__udivmodqi4_ep>
    23ba:	96 1b       	sub	r25, r22

000023bc <__udivmodqi4_ep>:
    23bc:	88 1f       	adc	r24, r24
    23be:	7a 95       	dec	r23
    23c0:	c9 f7       	brne	.-14     	; 0x23b4 <__udivmodqi4_loop>
    23c2:	80 95       	com	r24
    23c4:	08 95       	ret

000023c6 <__divmodsi4>:
    23c6:	97 fb       	bst	r25, 7
    23c8:	09 2e       	mov	r0, r25
    23ca:	05 26       	eor	r0, r21
    23cc:	0e d0       	rcall	.+28     	; 0x23ea <__divmodsi4_neg1>
    23ce:	57 fd       	sbrc	r21, 7
    23d0:	04 d0       	rcall	.+8      	; 0x23da <__divmodsi4_neg2>
    23d2:	14 d0       	rcall	.+40     	; 0x23fc <__udivmodsi4>
    23d4:	0a d0       	rcall	.+20     	; 0x23ea <__divmodsi4_neg1>
    23d6:	00 1c       	adc	r0, r0
    23d8:	38 f4       	brcc	.+14     	; 0x23e8 <__divmodsi4_exit>

000023da <__divmodsi4_neg2>:
    23da:	50 95       	com	r21
    23dc:	40 95       	com	r20
    23de:	30 95       	com	r19
    23e0:	21 95       	neg	r18
    23e2:	3f 4f       	sbci	r19, 0xFF	; 255
    23e4:	4f 4f       	sbci	r20, 0xFF	; 255
    23e6:	5f 4f       	sbci	r21, 0xFF	; 255

000023e8 <__divmodsi4_exit>:
    23e8:	08 95       	ret

000023ea <__divmodsi4_neg1>:
    23ea:	f6 f7       	brtc	.-4      	; 0x23e8 <__divmodsi4_exit>
    23ec:	90 95       	com	r25
    23ee:	80 95       	com	r24
    23f0:	70 95       	com	r23
    23f2:	61 95       	neg	r22
    23f4:	7f 4f       	sbci	r23, 0xFF	; 255
    23f6:	8f 4f       	sbci	r24, 0xFF	; 255
    23f8:	9f 4f       	sbci	r25, 0xFF	; 255
    23fa:	08 95       	ret

000023fc <__udivmodsi4>:
    23fc:	a1 e2       	ldi	r26, 0x21	; 33
    23fe:	1a 2e       	mov	r1, r26
    2400:	aa 1b       	sub	r26, r26
    2402:	bb 1b       	sub	r27, r27
    2404:	fd 01       	movw	r30, r26
    2406:	0d c0       	rjmp	.+26     	; 0x2422 <__udivmodsi4_ep>

00002408 <__udivmodsi4_loop>:
    2408:	aa 1f       	adc	r26, r26
    240a:	bb 1f       	adc	r27, r27
    240c:	ee 1f       	adc	r30, r30
    240e:	ff 1f       	adc	r31, r31
    2410:	a2 17       	cp	r26, r18
    2412:	b3 07       	cpc	r27, r19
    2414:	e4 07       	cpc	r30, r20
    2416:	f5 07       	cpc	r31, r21
    2418:	20 f0       	brcs	.+8      	; 0x2422 <__udivmodsi4_ep>
    241a:	a2 1b       	sub	r26, r18
    241c:	b3 0b       	sbc	r27, r19
    241e:	e4 0b       	sbc	r30, r20
    2420:	f5 0b       	sbc	r31, r21

00002422 <__udivmodsi4_ep>:
    2422:	66 1f       	adc	r22, r22
    2424:	77 1f       	adc	r23, r23
    2426:	88 1f       	adc	r24, r24
    2428:	99 1f       	adc	r25, r25
    242a:	1a 94       	dec	r1
    242c:	69 f7       	brne	.-38     	; 0x2408 <__udivmodsi4_loop>
    242e:	60 95       	com	r22
    2430:	70 95       	com	r23
    2432:	80 95       	com	r24
    2434:	90 95       	com	r25
    2436:	9b 01       	movw	r18, r22
    2438:	ac 01       	movw	r20, r24
    243a:	bd 01       	movw	r22, r26
    243c:	cf 01       	movw	r24, r30
    243e:	08 95       	ret

00002440 <__prologue_saves__>:
    2440:	2f 92       	push	r2
    2442:	3f 92       	push	r3
    2444:	4f 92       	push	r4
    2446:	5f 92       	push	r5
    2448:	6f 92       	push	r6
    244a:	7f 92       	push	r7
    244c:	8f 92       	push	r8
    244e:	9f 92       	push	r9
    2450:	af 92       	push	r10
    2452:	bf 92       	push	r11
    2454:	cf 92       	push	r12
    2456:	df 92       	push	r13
    2458:	ef 92       	push	r14
    245a:	ff 92       	push	r15
    245c:	0f 93       	push	r16
    245e:	1f 93       	push	r17
    2460:	cf 93       	push	r28
    2462:	df 93       	push	r29
    2464:	cd b7       	in	r28, 0x3d	; 61
    2466:	de b7       	in	r29, 0x3e	; 62
    2468:	ca 1b       	sub	r28, r26
    246a:	db 0b       	sbc	r29, r27
    246c:	0f b6       	in	r0, 0x3f	; 63
    246e:	f8 94       	cli
    2470:	de bf       	out	0x3e, r29	; 62
    2472:	0f be       	out	0x3f, r0	; 63
    2474:	cd bf       	out	0x3d, r28	; 61
    2476:	09 94       	ijmp

00002478 <__epilogue_restores__>:
    2478:	2a 88       	ldd	r2, Y+18	; 0x12
    247a:	39 88       	ldd	r3, Y+17	; 0x11
    247c:	48 88       	ldd	r4, Y+16	; 0x10
    247e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2480:	6e 84       	ldd	r6, Y+14	; 0x0e
    2482:	7d 84       	ldd	r7, Y+13	; 0x0d
    2484:	8c 84       	ldd	r8, Y+12	; 0x0c
    2486:	9b 84       	ldd	r9, Y+11	; 0x0b
    2488:	aa 84       	ldd	r10, Y+10	; 0x0a
    248a:	b9 84       	ldd	r11, Y+9	; 0x09
    248c:	c8 84       	ldd	r12, Y+8	; 0x08
    248e:	df 80       	ldd	r13, Y+7	; 0x07
    2490:	ee 80       	ldd	r14, Y+6	; 0x06
    2492:	fd 80       	ldd	r15, Y+5	; 0x05
    2494:	0c 81       	ldd	r16, Y+4	; 0x04
    2496:	1b 81       	ldd	r17, Y+3	; 0x03
    2498:	aa 81       	ldd	r26, Y+2	; 0x02
    249a:	b9 81       	ldd	r27, Y+1	; 0x01
    249c:	ce 0f       	add	r28, r30
    249e:	d1 1d       	adc	r29, r1
    24a0:	0f b6       	in	r0, 0x3f	; 63
    24a2:	f8 94       	cli
    24a4:	de bf       	out	0x3e, r29	; 62
    24a6:	0f be       	out	0x3f, r0	; 63
    24a8:	cd bf       	out	0x3d, r28	; 61
    24aa:	ed 01       	movw	r28, r26
    24ac:	08 95       	ret

000024ae <_exit>:
    24ae:	f8 94       	cli

000024b0 <__stop_program>:
    24b0:	ff cf       	rjmp	.-2      	; 0x24b0 <__stop_program>
