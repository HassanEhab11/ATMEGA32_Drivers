
HW_ICU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000024cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011c  00800060  000024cc  00002560  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  0080017c  0080017c  0000267c  2**0
                  ALLOC
  3 .stab         000020b8  00000000  00000000  0000267c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000102a  00000000  00000000  00004734  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000575e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001ef  00000000  00000000  000058fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000228f  00000000  00000000  00005aed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000012bb  00000000  00000000  00007d7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000010d6  00000000  00000000  00009037  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000a110  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c6  00000000  00000000  0000a2d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000094a  00000000  00000000  0000a596  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000aee0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 50 11 	jmp	0x22a0	; 0x22a0 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 1d 11 	jmp	0x223a	; 0x223a <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ec       	ldi	r30, 0xCC	; 204
      68:	f4 e2       	ldi	r31, 0x24	; 36
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 37       	cpi	r26, 0x7C	; 124
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e7       	ldi	r26, 0x7C	; 124
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 38       	cpi	r26, 0x8D	; 141
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 83 11 	call	0x2306	; 0x2306 <main>
      8a:	0c 94 64 12 	jmp	0x24c8	; 0x24c8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 37 04 	call	0x86e	; 0x86e <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 37 04 	call	0x86e	; 0x86e <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 2d 12 	jmp	0x245a	; 0x245a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a4 e7       	ldi	r26, 0x74	; 116
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 49 12 	jmp	0x2492	; 0x2492 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 39 12 	jmp	0x2472	; 0x2472 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 af 05 	call	0xb5e	; 0xb5e <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 af 05 	call	0xb5e	; 0xb5e <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 da 04 	call	0x9b4	; 0x9b4 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 55 12 	jmp	0x24aa	; 0x24aa <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 39 12 	jmp	0x2472	; 0x2472 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 af 05 	call	0xb5e	; 0xb5e <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 af 05 	call	0xb5e	; 0xb5e <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 da 04 	call	0x9b4	; 0x9b4 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 55 12 	jmp	0x24aa	; 0x24aa <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 2d 12 	jmp	0x245a	; 0x245a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 af 05 	call	0xb5e	; 0xb5e <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 af 05 	call	0xb5e	; 0xb5e <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	84 e7       	ldi	r24, 0x74	; 116
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 da 04 	call	0x9b4	; 0x9b4 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 49 12 	jmp	0x2492	; 0x2492 <__epilogue_restores__>

00000632 <__eqsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 39 12 	jmp	0x2472	; 0x2472 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 af 05 	call	0xb5e	; 0xb5e <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 af 05 	call	0xb5e	; 0xb5e <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__eqsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__eqsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 27 06 	call	0xc4e	; 0xc4e <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__eqsf2+0x58>
     688:	81 e0       	ldi	r24, 0x01	; 1
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 55 12 	jmp	0x24aa	; 0x24aa <__epilogue_restores__+0x18>

00000692 <__gtsf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 39 12 	jmp	0x2472	; 0x2472 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 af 05 	call	0xb5e	; 0xb5e <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 af 05 	call	0xb5e	; 0xb5e <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gtsf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gtsf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 27 06 	call	0xc4e	; 0xc4e <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gtsf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 55 12 	jmp	0x24aa	; 0x24aa <__epilogue_restores__+0x18>

000006f2 <__gesf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 39 12 	jmp	0x2472	; 0x2472 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 af 05 	call	0xb5e	; 0xb5e <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 af 05 	call	0xb5e	; 0xb5e <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__gesf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__gesf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 27 06 	call	0xc4e	; 0xc4e <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__gesf2+0x58>
     748:	8f ef       	ldi	r24, 0xFF	; 255
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 55 12 	jmp	0x24aa	; 0x24aa <__epilogue_restores__+0x18>

00000752 <__ltsf2>:
     752:	a8 e1       	ldi	r26, 0x18	; 24
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 39 12 	jmp	0x2472	; 0x2472 <__prologue_saves__+0x18>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	2d 83       	std	Y+5, r18	; 0x05
     768:	3e 83       	std	Y+6, r19	; 0x06
     76a:	4f 83       	std	Y+7, r20	; 0x07
     76c:	58 87       	std	Y+8, r21	; 0x08
     76e:	89 e0       	ldi	r24, 0x09	; 9
     770:	e8 2e       	mov	r14, r24
     772:	f1 2c       	mov	r15, r1
     774:	ec 0e       	add	r14, r28
     776:	fd 1e       	adc	r15, r29
     778:	ce 01       	movw	r24, r28
     77a:	01 96       	adiw	r24, 0x01	; 1
     77c:	b7 01       	movw	r22, r14
     77e:	0e 94 af 05 	call	0xb5e	; 0xb5e <__unpack_f>
     782:	8e 01       	movw	r16, r28
     784:	0f 5e       	subi	r16, 0xEF	; 239
     786:	1f 4f       	sbci	r17, 0xFF	; 255
     788:	ce 01       	movw	r24, r28
     78a:	05 96       	adiw	r24, 0x05	; 5
     78c:	b8 01       	movw	r22, r16
     78e:	0e 94 af 05 	call	0xb5e	; 0xb5e <__unpack_f>
     792:	89 85       	ldd	r24, Y+9	; 0x09
     794:	82 30       	cpi	r24, 0x02	; 2
     796:	40 f0       	brcs	.+16     	; 0x7a8 <__ltsf2+0x56>
     798:	89 89       	ldd	r24, Y+17	; 0x11
     79a:	82 30       	cpi	r24, 0x02	; 2
     79c:	28 f0       	brcs	.+10     	; 0x7a8 <__ltsf2+0x56>
     79e:	c7 01       	movw	r24, r14
     7a0:	b8 01       	movw	r22, r16
     7a2:	0e 94 27 06 	call	0xc4e	; 0xc4e <__fpcmp_parts_f>
     7a6:	01 c0       	rjmp	.+2      	; 0x7aa <__ltsf2+0x58>
     7a8:	81 e0       	ldi	r24, 0x01	; 1
     7aa:	68 96       	adiw	r28, 0x18	; 24
     7ac:	e6 e0       	ldi	r30, 0x06	; 6
     7ae:	0c 94 55 12 	jmp	0x24aa	; 0x24aa <__epilogue_restores__+0x18>

000007b2 <__floatsisf>:
     7b2:	a8 e0       	ldi	r26, 0x08	; 8
     7b4:	b0 e0       	ldi	r27, 0x00	; 0
     7b6:	ef ed       	ldi	r30, 0xDF	; 223
     7b8:	f3 e0       	ldi	r31, 0x03	; 3
     7ba:	0c 94 36 12 	jmp	0x246c	; 0x246c <__prologue_saves__+0x12>
     7be:	9b 01       	movw	r18, r22
     7c0:	ac 01       	movw	r20, r24
     7c2:	83 e0       	ldi	r24, 0x03	; 3
     7c4:	89 83       	std	Y+1, r24	; 0x01
     7c6:	da 01       	movw	r26, r20
     7c8:	c9 01       	movw	r24, r18
     7ca:	88 27       	eor	r24, r24
     7cc:	b7 fd       	sbrc	r27, 7
     7ce:	83 95       	inc	r24
     7d0:	99 27       	eor	r25, r25
     7d2:	aa 27       	eor	r26, r26
     7d4:	bb 27       	eor	r27, r27
     7d6:	b8 2e       	mov	r11, r24
     7d8:	21 15       	cp	r18, r1
     7da:	31 05       	cpc	r19, r1
     7dc:	41 05       	cpc	r20, r1
     7de:	51 05       	cpc	r21, r1
     7e0:	19 f4       	brne	.+6      	; 0x7e8 <__floatsisf+0x36>
     7e2:	82 e0       	ldi	r24, 0x02	; 2
     7e4:	89 83       	std	Y+1, r24	; 0x01
     7e6:	3a c0       	rjmp	.+116    	; 0x85c <__floatsisf+0xaa>
     7e8:	88 23       	and	r24, r24
     7ea:	a9 f0       	breq	.+42     	; 0x816 <__floatsisf+0x64>
     7ec:	20 30       	cpi	r18, 0x00	; 0
     7ee:	80 e0       	ldi	r24, 0x00	; 0
     7f0:	38 07       	cpc	r19, r24
     7f2:	80 e0       	ldi	r24, 0x00	; 0
     7f4:	48 07       	cpc	r20, r24
     7f6:	80 e8       	ldi	r24, 0x80	; 128
     7f8:	58 07       	cpc	r21, r24
     7fa:	29 f4       	brne	.+10     	; 0x806 <__floatsisf+0x54>
     7fc:	60 e0       	ldi	r22, 0x00	; 0
     7fe:	70 e0       	ldi	r23, 0x00	; 0
     800:	80 e0       	ldi	r24, 0x00	; 0
     802:	9f ec       	ldi	r25, 0xCF	; 207
     804:	30 c0       	rjmp	.+96     	; 0x866 <__stack+0x7>
     806:	ee 24       	eor	r14, r14
     808:	ff 24       	eor	r15, r15
     80a:	87 01       	movw	r16, r14
     80c:	e2 1a       	sub	r14, r18
     80e:	f3 0a       	sbc	r15, r19
     810:	04 0b       	sbc	r16, r20
     812:	15 0b       	sbc	r17, r21
     814:	02 c0       	rjmp	.+4      	; 0x81a <__floatsisf+0x68>
     816:	79 01       	movw	r14, r18
     818:	8a 01       	movw	r16, r20
     81a:	8e e1       	ldi	r24, 0x1E	; 30
     81c:	c8 2e       	mov	r12, r24
     81e:	d1 2c       	mov	r13, r1
     820:	dc 82       	std	Y+4, r13	; 0x04
     822:	cb 82       	std	Y+3, r12	; 0x03
     824:	ed 82       	std	Y+5, r14	; 0x05
     826:	fe 82       	std	Y+6, r15	; 0x06
     828:	0f 83       	std	Y+7, r16	; 0x07
     82a:	18 87       	std	Y+8, r17	; 0x08
     82c:	c8 01       	movw	r24, r16
     82e:	b7 01       	movw	r22, r14
     830:	0e 94 8b 04 	call	0x916	; 0x916 <__clzsi2>
     834:	01 97       	sbiw	r24, 0x01	; 1
     836:	18 16       	cp	r1, r24
     838:	19 06       	cpc	r1, r25
     83a:	84 f4       	brge	.+32     	; 0x85c <__floatsisf+0xaa>
     83c:	08 2e       	mov	r0, r24
     83e:	04 c0       	rjmp	.+8      	; 0x848 <__floatsisf+0x96>
     840:	ee 0c       	add	r14, r14
     842:	ff 1c       	adc	r15, r15
     844:	00 1f       	adc	r16, r16
     846:	11 1f       	adc	r17, r17
     848:	0a 94       	dec	r0
     84a:	d2 f7       	brpl	.-12     	; 0x840 <__floatsisf+0x8e>
     84c:	ed 82       	std	Y+5, r14	; 0x05
     84e:	fe 82       	std	Y+6, r15	; 0x06
     850:	0f 83       	std	Y+7, r16	; 0x07
     852:	18 87       	std	Y+8, r17	; 0x08
     854:	c8 1a       	sub	r12, r24
     856:	d9 0a       	sbc	r13, r25
     858:	dc 82       	std	Y+4, r13	; 0x04
     85a:	cb 82       	std	Y+3, r12	; 0x03
     85c:	ba 82       	std	Y+2, r11	; 0x02
     85e:	ce 01       	movw	r24, r28
     860:	01 96       	adiw	r24, 0x01	; 1
     862:	0e 94 da 04 	call	0x9b4	; 0x9b4 <__pack_f>
     866:	28 96       	adiw	r28, 0x08	; 8
     868:	e9 e0       	ldi	r30, 0x09	; 9
     86a:	0c 94 52 12 	jmp	0x24a4	; 0x24a4 <__epilogue_restores__+0x12>

0000086e <__fixsfsi>:
     86e:	ac e0       	ldi	r26, 0x0C	; 12
     870:	b0 e0       	ldi	r27, 0x00	; 0
     872:	ed e3       	ldi	r30, 0x3D	; 61
     874:	f4 e0       	ldi	r31, 0x04	; 4
     876:	0c 94 3d 12 	jmp	0x247a	; 0x247a <__prologue_saves__+0x20>
     87a:	69 83       	std	Y+1, r22	; 0x01
     87c:	7a 83       	std	Y+2, r23	; 0x02
     87e:	8b 83       	std	Y+3, r24	; 0x03
     880:	9c 83       	std	Y+4, r25	; 0x04
     882:	ce 01       	movw	r24, r28
     884:	01 96       	adiw	r24, 0x01	; 1
     886:	be 01       	movw	r22, r28
     888:	6b 5f       	subi	r22, 0xFB	; 251
     88a:	7f 4f       	sbci	r23, 0xFF	; 255
     88c:	0e 94 af 05 	call	0xb5e	; 0xb5e <__unpack_f>
     890:	8d 81       	ldd	r24, Y+5	; 0x05
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	61 f1       	breq	.+88     	; 0x8ee <__fixsfsi+0x80>
     896:	82 30       	cpi	r24, 0x02	; 2
     898:	50 f1       	brcs	.+84     	; 0x8ee <__fixsfsi+0x80>
     89a:	84 30       	cpi	r24, 0x04	; 4
     89c:	21 f4       	brne	.+8      	; 0x8a6 <__fixsfsi+0x38>
     89e:	8e 81       	ldd	r24, Y+6	; 0x06
     8a0:	88 23       	and	r24, r24
     8a2:	51 f1       	breq	.+84     	; 0x8f8 <__fixsfsi+0x8a>
     8a4:	2e c0       	rjmp	.+92     	; 0x902 <__fixsfsi+0x94>
     8a6:	2f 81       	ldd	r18, Y+7	; 0x07
     8a8:	38 85       	ldd	r19, Y+8	; 0x08
     8aa:	37 fd       	sbrc	r19, 7
     8ac:	20 c0       	rjmp	.+64     	; 0x8ee <__fixsfsi+0x80>
     8ae:	6e 81       	ldd	r22, Y+6	; 0x06
     8b0:	2f 31       	cpi	r18, 0x1F	; 31
     8b2:	31 05       	cpc	r19, r1
     8b4:	1c f0       	brlt	.+6      	; 0x8bc <__fixsfsi+0x4e>
     8b6:	66 23       	and	r22, r22
     8b8:	f9 f0       	breq	.+62     	; 0x8f8 <__fixsfsi+0x8a>
     8ba:	23 c0       	rjmp	.+70     	; 0x902 <__fixsfsi+0x94>
     8bc:	8e e1       	ldi	r24, 0x1E	; 30
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	82 1b       	sub	r24, r18
     8c2:	93 0b       	sbc	r25, r19
     8c4:	29 85       	ldd	r18, Y+9	; 0x09
     8c6:	3a 85       	ldd	r19, Y+10	; 0x0a
     8c8:	4b 85       	ldd	r20, Y+11	; 0x0b
     8ca:	5c 85       	ldd	r21, Y+12	; 0x0c
     8cc:	04 c0       	rjmp	.+8      	; 0x8d6 <__fixsfsi+0x68>
     8ce:	56 95       	lsr	r21
     8d0:	47 95       	ror	r20
     8d2:	37 95       	ror	r19
     8d4:	27 95       	ror	r18
     8d6:	8a 95       	dec	r24
     8d8:	d2 f7       	brpl	.-12     	; 0x8ce <__fixsfsi+0x60>
     8da:	66 23       	and	r22, r22
     8dc:	b1 f0       	breq	.+44     	; 0x90a <__fixsfsi+0x9c>
     8de:	50 95       	com	r21
     8e0:	40 95       	com	r20
     8e2:	30 95       	com	r19
     8e4:	21 95       	neg	r18
     8e6:	3f 4f       	sbci	r19, 0xFF	; 255
     8e8:	4f 4f       	sbci	r20, 0xFF	; 255
     8ea:	5f 4f       	sbci	r21, 0xFF	; 255
     8ec:	0e c0       	rjmp	.+28     	; 0x90a <__fixsfsi+0x9c>
     8ee:	20 e0       	ldi	r18, 0x00	; 0
     8f0:	30 e0       	ldi	r19, 0x00	; 0
     8f2:	40 e0       	ldi	r20, 0x00	; 0
     8f4:	50 e0       	ldi	r21, 0x00	; 0
     8f6:	09 c0       	rjmp	.+18     	; 0x90a <__fixsfsi+0x9c>
     8f8:	2f ef       	ldi	r18, 0xFF	; 255
     8fa:	3f ef       	ldi	r19, 0xFF	; 255
     8fc:	4f ef       	ldi	r20, 0xFF	; 255
     8fe:	5f e7       	ldi	r21, 0x7F	; 127
     900:	04 c0       	rjmp	.+8      	; 0x90a <__fixsfsi+0x9c>
     902:	20 e0       	ldi	r18, 0x00	; 0
     904:	30 e0       	ldi	r19, 0x00	; 0
     906:	40 e0       	ldi	r20, 0x00	; 0
     908:	50 e8       	ldi	r21, 0x80	; 128
     90a:	b9 01       	movw	r22, r18
     90c:	ca 01       	movw	r24, r20
     90e:	2c 96       	adiw	r28, 0x0c	; 12
     910:	e2 e0       	ldi	r30, 0x02	; 2
     912:	0c 94 59 12 	jmp	0x24b2	; 0x24b2 <__epilogue_restores__+0x20>

00000916 <__clzsi2>:
     916:	ef 92       	push	r14
     918:	ff 92       	push	r15
     91a:	0f 93       	push	r16
     91c:	1f 93       	push	r17
     91e:	7b 01       	movw	r14, r22
     920:	8c 01       	movw	r16, r24
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	e8 16       	cp	r14, r24
     926:	80 e0       	ldi	r24, 0x00	; 0
     928:	f8 06       	cpc	r15, r24
     92a:	81 e0       	ldi	r24, 0x01	; 1
     92c:	08 07       	cpc	r16, r24
     92e:	80 e0       	ldi	r24, 0x00	; 0
     930:	18 07       	cpc	r17, r24
     932:	88 f4       	brcc	.+34     	; 0x956 <__clzsi2+0x40>
     934:	8f ef       	ldi	r24, 0xFF	; 255
     936:	e8 16       	cp	r14, r24
     938:	f1 04       	cpc	r15, r1
     93a:	01 05       	cpc	r16, r1
     93c:	11 05       	cpc	r17, r1
     93e:	31 f0       	breq	.+12     	; 0x94c <__clzsi2+0x36>
     940:	28 f0       	brcs	.+10     	; 0x94c <__clzsi2+0x36>
     942:	88 e0       	ldi	r24, 0x08	; 8
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	a0 e0       	ldi	r26, 0x00	; 0
     948:	b0 e0       	ldi	r27, 0x00	; 0
     94a:	17 c0       	rjmp	.+46     	; 0x97a <__clzsi2+0x64>
     94c:	80 e0       	ldi	r24, 0x00	; 0
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	a0 e0       	ldi	r26, 0x00	; 0
     952:	b0 e0       	ldi	r27, 0x00	; 0
     954:	12 c0       	rjmp	.+36     	; 0x97a <__clzsi2+0x64>
     956:	80 e0       	ldi	r24, 0x00	; 0
     958:	e8 16       	cp	r14, r24
     95a:	80 e0       	ldi	r24, 0x00	; 0
     95c:	f8 06       	cpc	r15, r24
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	08 07       	cpc	r16, r24
     962:	81 e0       	ldi	r24, 0x01	; 1
     964:	18 07       	cpc	r17, r24
     966:	28 f0       	brcs	.+10     	; 0x972 <__clzsi2+0x5c>
     968:	88 e1       	ldi	r24, 0x18	; 24
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	a0 e0       	ldi	r26, 0x00	; 0
     96e:	b0 e0       	ldi	r27, 0x00	; 0
     970:	04 c0       	rjmp	.+8      	; 0x97a <__clzsi2+0x64>
     972:	80 e1       	ldi	r24, 0x10	; 16
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	a0 e0       	ldi	r26, 0x00	; 0
     978:	b0 e0       	ldi	r27, 0x00	; 0
     97a:	20 e2       	ldi	r18, 0x20	; 32
     97c:	30 e0       	ldi	r19, 0x00	; 0
     97e:	40 e0       	ldi	r20, 0x00	; 0
     980:	50 e0       	ldi	r21, 0x00	; 0
     982:	28 1b       	sub	r18, r24
     984:	39 0b       	sbc	r19, r25
     986:	4a 0b       	sbc	r20, r26
     988:	5b 0b       	sbc	r21, r27
     98a:	04 c0       	rjmp	.+8      	; 0x994 <__clzsi2+0x7e>
     98c:	16 95       	lsr	r17
     98e:	07 95       	ror	r16
     990:	f7 94       	ror	r15
     992:	e7 94       	ror	r14
     994:	8a 95       	dec	r24
     996:	d2 f7       	brpl	.-12     	; 0x98c <__clzsi2+0x76>
     998:	f7 01       	movw	r30, r14
     99a:	e4 58       	subi	r30, 0x84	; 132
     99c:	ff 4f       	sbci	r31, 0xFF	; 255
     99e:	80 81       	ld	r24, Z
     9a0:	28 1b       	sub	r18, r24
     9a2:	31 09       	sbc	r19, r1
     9a4:	41 09       	sbc	r20, r1
     9a6:	51 09       	sbc	r21, r1
     9a8:	c9 01       	movw	r24, r18
     9aa:	1f 91       	pop	r17
     9ac:	0f 91       	pop	r16
     9ae:	ff 90       	pop	r15
     9b0:	ef 90       	pop	r14
     9b2:	08 95       	ret

000009b4 <__pack_f>:
     9b4:	df 92       	push	r13
     9b6:	ef 92       	push	r14
     9b8:	ff 92       	push	r15
     9ba:	0f 93       	push	r16
     9bc:	1f 93       	push	r17
     9be:	fc 01       	movw	r30, r24
     9c0:	e4 80       	ldd	r14, Z+4	; 0x04
     9c2:	f5 80       	ldd	r15, Z+5	; 0x05
     9c4:	06 81       	ldd	r16, Z+6	; 0x06
     9c6:	17 81       	ldd	r17, Z+7	; 0x07
     9c8:	d1 80       	ldd	r13, Z+1	; 0x01
     9ca:	80 81       	ld	r24, Z
     9cc:	82 30       	cpi	r24, 0x02	; 2
     9ce:	48 f4       	brcc	.+18     	; 0x9e2 <__pack_f+0x2e>
     9d0:	80 e0       	ldi	r24, 0x00	; 0
     9d2:	90 e0       	ldi	r25, 0x00	; 0
     9d4:	a0 e1       	ldi	r26, 0x10	; 16
     9d6:	b0 e0       	ldi	r27, 0x00	; 0
     9d8:	e8 2a       	or	r14, r24
     9da:	f9 2a       	or	r15, r25
     9dc:	0a 2b       	or	r16, r26
     9de:	1b 2b       	or	r17, r27
     9e0:	a5 c0       	rjmp	.+330    	; 0xb2c <__pack_f+0x178>
     9e2:	84 30       	cpi	r24, 0x04	; 4
     9e4:	09 f4       	brne	.+2      	; 0x9e8 <__pack_f+0x34>
     9e6:	9f c0       	rjmp	.+318    	; 0xb26 <__pack_f+0x172>
     9e8:	82 30       	cpi	r24, 0x02	; 2
     9ea:	21 f4       	brne	.+8      	; 0x9f4 <__pack_f+0x40>
     9ec:	ee 24       	eor	r14, r14
     9ee:	ff 24       	eor	r15, r15
     9f0:	87 01       	movw	r16, r14
     9f2:	05 c0       	rjmp	.+10     	; 0x9fe <__pack_f+0x4a>
     9f4:	e1 14       	cp	r14, r1
     9f6:	f1 04       	cpc	r15, r1
     9f8:	01 05       	cpc	r16, r1
     9fa:	11 05       	cpc	r17, r1
     9fc:	19 f4       	brne	.+6      	; 0xa04 <__pack_f+0x50>
     9fe:	e0 e0       	ldi	r30, 0x00	; 0
     a00:	f0 e0       	ldi	r31, 0x00	; 0
     a02:	96 c0       	rjmp	.+300    	; 0xb30 <__pack_f+0x17c>
     a04:	62 81       	ldd	r22, Z+2	; 0x02
     a06:	73 81       	ldd	r23, Z+3	; 0x03
     a08:	9f ef       	ldi	r25, 0xFF	; 255
     a0a:	62 38       	cpi	r22, 0x82	; 130
     a0c:	79 07       	cpc	r23, r25
     a0e:	0c f0       	brlt	.+2      	; 0xa12 <__pack_f+0x5e>
     a10:	5b c0       	rjmp	.+182    	; 0xac8 <__pack_f+0x114>
     a12:	22 e8       	ldi	r18, 0x82	; 130
     a14:	3f ef       	ldi	r19, 0xFF	; 255
     a16:	26 1b       	sub	r18, r22
     a18:	37 0b       	sbc	r19, r23
     a1a:	2a 31       	cpi	r18, 0x1A	; 26
     a1c:	31 05       	cpc	r19, r1
     a1e:	2c f0       	brlt	.+10     	; 0xa2a <__pack_f+0x76>
     a20:	20 e0       	ldi	r18, 0x00	; 0
     a22:	30 e0       	ldi	r19, 0x00	; 0
     a24:	40 e0       	ldi	r20, 0x00	; 0
     a26:	50 e0       	ldi	r21, 0x00	; 0
     a28:	2a c0       	rjmp	.+84     	; 0xa7e <__pack_f+0xca>
     a2a:	b8 01       	movw	r22, r16
     a2c:	a7 01       	movw	r20, r14
     a2e:	02 2e       	mov	r0, r18
     a30:	04 c0       	rjmp	.+8      	; 0xa3a <__pack_f+0x86>
     a32:	76 95       	lsr	r23
     a34:	67 95       	ror	r22
     a36:	57 95       	ror	r21
     a38:	47 95       	ror	r20
     a3a:	0a 94       	dec	r0
     a3c:	d2 f7       	brpl	.-12     	; 0xa32 <__pack_f+0x7e>
     a3e:	81 e0       	ldi	r24, 0x01	; 1
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	b0 e0       	ldi	r27, 0x00	; 0
     a46:	04 c0       	rjmp	.+8      	; 0xa50 <__pack_f+0x9c>
     a48:	88 0f       	add	r24, r24
     a4a:	99 1f       	adc	r25, r25
     a4c:	aa 1f       	adc	r26, r26
     a4e:	bb 1f       	adc	r27, r27
     a50:	2a 95       	dec	r18
     a52:	d2 f7       	brpl	.-12     	; 0xa48 <__pack_f+0x94>
     a54:	01 97       	sbiw	r24, 0x01	; 1
     a56:	a1 09       	sbc	r26, r1
     a58:	b1 09       	sbc	r27, r1
     a5a:	8e 21       	and	r24, r14
     a5c:	9f 21       	and	r25, r15
     a5e:	a0 23       	and	r26, r16
     a60:	b1 23       	and	r27, r17
     a62:	00 97       	sbiw	r24, 0x00	; 0
     a64:	a1 05       	cpc	r26, r1
     a66:	b1 05       	cpc	r27, r1
     a68:	21 f0       	breq	.+8      	; 0xa72 <__pack_f+0xbe>
     a6a:	81 e0       	ldi	r24, 0x01	; 1
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	9a 01       	movw	r18, r20
     a74:	ab 01       	movw	r20, r22
     a76:	28 2b       	or	r18, r24
     a78:	39 2b       	or	r19, r25
     a7a:	4a 2b       	or	r20, r26
     a7c:	5b 2b       	or	r21, r27
     a7e:	da 01       	movw	r26, r20
     a80:	c9 01       	movw	r24, r18
     a82:	8f 77       	andi	r24, 0x7F	; 127
     a84:	90 70       	andi	r25, 0x00	; 0
     a86:	a0 70       	andi	r26, 0x00	; 0
     a88:	b0 70       	andi	r27, 0x00	; 0
     a8a:	80 34       	cpi	r24, 0x40	; 64
     a8c:	91 05       	cpc	r25, r1
     a8e:	a1 05       	cpc	r26, r1
     a90:	b1 05       	cpc	r27, r1
     a92:	39 f4       	brne	.+14     	; 0xaa2 <__pack_f+0xee>
     a94:	27 ff       	sbrs	r18, 7
     a96:	09 c0       	rjmp	.+18     	; 0xaaa <__pack_f+0xf6>
     a98:	20 5c       	subi	r18, 0xC0	; 192
     a9a:	3f 4f       	sbci	r19, 0xFF	; 255
     a9c:	4f 4f       	sbci	r20, 0xFF	; 255
     a9e:	5f 4f       	sbci	r21, 0xFF	; 255
     aa0:	04 c0       	rjmp	.+8      	; 0xaaa <__pack_f+0xf6>
     aa2:	21 5c       	subi	r18, 0xC1	; 193
     aa4:	3f 4f       	sbci	r19, 0xFF	; 255
     aa6:	4f 4f       	sbci	r20, 0xFF	; 255
     aa8:	5f 4f       	sbci	r21, 0xFF	; 255
     aaa:	e0 e0       	ldi	r30, 0x00	; 0
     aac:	f0 e0       	ldi	r31, 0x00	; 0
     aae:	20 30       	cpi	r18, 0x00	; 0
     ab0:	a0 e0       	ldi	r26, 0x00	; 0
     ab2:	3a 07       	cpc	r19, r26
     ab4:	a0 e0       	ldi	r26, 0x00	; 0
     ab6:	4a 07       	cpc	r20, r26
     ab8:	a0 e4       	ldi	r26, 0x40	; 64
     aba:	5a 07       	cpc	r21, r26
     abc:	10 f0       	brcs	.+4      	; 0xac2 <__pack_f+0x10e>
     abe:	e1 e0       	ldi	r30, 0x01	; 1
     ac0:	f0 e0       	ldi	r31, 0x00	; 0
     ac2:	79 01       	movw	r14, r18
     ac4:	8a 01       	movw	r16, r20
     ac6:	27 c0       	rjmp	.+78     	; 0xb16 <__pack_f+0x162>
     ac8:	60 38       	cpi	r22, 0x80	; 128
     aca:	71 05       	cpc	r23, r1
     acc:	64 f5       	brge	.+88     	; 0xb26 <__pack_f+0x172>
     ace:	fb 01       	movw	r30, r22
     ad0:	e1 58       	subi	r30, 0x81	; 129
     ad2:	ff 4f       	sbci	r31, 0xFF	; 255
     ad4:	d8 01       	movw	r26, r16
     ad6:	c7 01       	movw	r24, r14
     ad8:	8f 77       	andi	r24, 0x7F	; 127
     ada:	90 70       	andi	r25, 0x00	; 0
     adc:	a0 70       	andi	r26, 0x00	; 0
     ade:	b0 70       	andi	r27, 0x00	; 0
     ae0:	80 34       	cpi	r24, 0x40	; 64
     ae2:	91 05       	cpc	r25, r1
     ae4:	a1 05       	cpc	r26, r1
     ae6:	b1 05       	cpc	r27, r1
     ae8:	39 f4       	brne	.+14     	; 0xaf8 <__pack_f+0x144>
     aea:	e7 fe       	sbrs	r14, 7
     aec:	0d c0       	rjmp	.+26     	; 0xb08 <__pack_f+0x154>
     aee:	80 e4       	ldi	r24, 0x40	; 64
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	a0 e0       	ldi	r26, 0x00	; 0
     af4:	b0 e0       	ldi	r27, 0x00	; 0
     af6:	04 c0       	rjmp	.+8      	; 0xb00 <__pack_f+0x14c>
     af8:	8f e3       	ldi	r24, 0x3F	; 63
     afa:	90 e0       	ldi	r25, 0x00	; 0
     afc:	a0 e0       	ldi	r26, 0x00	; 0
     afe:	b0 e0       	ldi	r27, 0x00	; 0
     b00:	e8 0e       	add	r14, r24
     b02:	f9 1e       	adc	r15, r25
     b04:	0a 1f       	adc	r16, r26
     b06:	1b 1f       	adc	r17, r27
     b08:	17 ff       	sbrs	r17, 7
     b0a:	05 c0       	rjmp	.+10     	; 0xb16 <__pack_f+0x162>
     b0c:	16 95       	lsr	r17
     b0e:	07 95       	ror	r16
     b10:	f7 94       	ror	r15
     b12:	e7 94       	ror	r14
     b14:	31 96       	adiw	r30, 0x01	; 1
     b16:	87 e0       	ldi	r24, 0x07	; 7
     b18:	16 95       	lsr	r17
     b1a:	07 95       	ror	r16
     b1c:	f7 94       	ror	r15
     b1e:	e7 94       	ror	r14
     b20:	8a 95       	dec	r24
     b22:	d1 f7       	brne	.-12     	; 0xb18 <__pack_f+0x164>
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__pack_f+0x17c>
     b26:	ee 24       	eor	r14, r14
     b28:	ff 24       	eor	r15, r15
     b2a:	87 01       	movw	r16, r14
     b2c:	ef ef       	ldi	r30, 0xFF	; 255
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	6e 2f       	mov	r22, r30
     b32:	67 95       	ror	r22
     b34:	66 27       	eor	r22, r22
     b36:	67 95       	ror	r22
     b38:	90 2f       	mov	r25, r16
     b3a:	9f 77       	andi	r25, 0x7F	; 127
     b3c:	d7 94       	ror	r13
     b3e:	dd 24       	eor	r13, r13
     b40:	d7 94       	ror	r13
     b42:	8e 2f       	mov	r24, r30
     b44:	86 95       	lsr	r24
     b46:	49 2f       	mov	r20, r25
     b48:	46 2b       	or	r20, r22
     b4a:	58 2f       	mov	r21, r24
     b4c:	5d 29       	or	r21, r13
     b4e:	b7 01       	movw	r22, r14
     b50:	ca 01       	movw	r24, r20
     b52:	1f 91       	pop	r17
     b54:	0f 91       	pop	r16
     b56:	ff 90       	pop	r15
     b58:	ef 90       	pop	r14
     b5a:	df 90       	pop	r13
     b5c:	08 95       	ret

00000b5e <__unpack_f>:
     b5e:	fc 01       	movw	r30, r24
     b60:	db 01       	movw	r26, r22
     b62:	40 81       	ld	r20, Z
     b64:	51 81       	ldd	r21, Z+1	; 0x01
     b66:	22 81       	ldd	r18, Z+2	; 0x02
     b68:	62 2f       	mov	r22, r18
     b6a:	6f 77       	andi	r22, 0x7F	; 127
     b6c:	70 e0       	ldi	r23, 0x00	; 0
     b6e:	22 1f       	adc	r18, r18
     b70:	22 27       	eor	r18, r18
     b72:	22 1f       	adc	r18, r18
     b74:	93 81       	ldd	r25, Z+3	; 0x03
     b76:	89 2f       	mov	r24, r25
     b78:	88 0f       	add	r24, r24
     b7a:	82 2b       	or	r24, r18
     b7c:	28 2f       	mov	r18, r24
     b7e:	30 e0       	ldi	r19, 0x00	; 0
     b80:	99 1f       	adc	r25, r25
     b82:	99 27       	eor	r25, r25
     b84:	99 1f       	adc	r25, r25
     b86:	11 96       	adiw	r26, 0x01	; 1
     b88:	9c 93       	st	X, r25
     b8a:	11 97       	sbiw	r26, 0x01	; 1
     b8c:	21 15       	cp	r18, r1
     b8e:	31 05       	cpc	r19, r1
     b90:	a9 f5       	brne	.+106    	; 0xbfc <__unpack_f+0x9e>
     b92:	41 15       	cp	r20, r1
     b94:	51 05       	cpc	r21, r1
     b96:	61 05       	cpc	r22, r1
     b98:	71 05       	cpc	r23, r1
     b9a:	11 f4       	brne	.+4      	; 0xba0 <__unpack_f+0x42>
     b9c:	82 e0       	ldi	r24, 0x02	; 2
     b9e:	37 c0       	rjmp	.+110    	; 0xc0e <__unpack_f+0xb0>
     ba0:	82 e8       	ldi	r24, 0x82	; 130
     ba2:	9f ef       	ldi	r25, 0xFF	; 255
     ba4:	13 96       	adiw	r26, 0x03	; 3
     ba6:	9c 93       	st	X, r25
     ba8:	8e 93       	st	-X, r24
     baa:	12 97       	sbiw	r26, 0x02	; 2
     bac:	9a 01       	movw	r18, r20
     bae:	ab 01       	movw	r20, r22
     bb0:	67 e0       	ldi	r22, 0x07	; 7
     bb2:	22 0f       	add	r18, r18
     bb4:	33 1f       	adc	r19, r19
     bb6:	44 1f       	adc	r20, r20
     bb8:	55 1f       	adc	r21, r21
     bba:	6a 95       	dec	r22
     bbc:	d1 f7       	brne	.-12     	; 0xbb2 <__unpack_f+0x54>
     bbe:	83 e0       	ldi	r24, 0x03	; 3
     bc0:	8c 93       	st	X, r24
     bc2:	0d c0       	rjmp	.+26     	; 0xbde <__unpack_f+0x80>
     bc4:	22 0f       	add	r18, r18
     bc6:	33 1f       	adc	r19, r19
     bc8:	44 1f       	adc	r20, r20
     bca:	55 1f       	adc	r21, r21
     bcc:	12 96       	adiw	r26, 0x02	; 2
     bce:	8d 91       	ld	r24, X+
     bd0:	9c 91       	ld	r25, X
     bd2:	13 97       	sbiw	r26, 0x03	; 3
     bd4:	01 97       	sbiw	r24, 0x01	; 1
     bd6:	13 96       	adiw	r26, 0x03	; 3
     bd8:	9c 93       	st	X, r25
     bda:	8e 93       	st	-X, r24
     bdc:	12 97       	sbiw	r26, 0x02	; 2
     bde:	20 30       	cpi	r18, 0x00	; 0
     be0:	80 e0       	ldi	r24, 0x00	; 0
     be2:	38 07       	cpc	r19, r24
     be4:	80 e0       	ldi	r24, 0x00	; 0
     be6:	48 07       	cpc	r20, r24
     be8:	80 e4       	ldi	r24, 0x40	; 64
     bea:	58 07       	cpc	r21, r24
     bec:	58 f3       	brcs	.-42     	; 0xbc4 <__unpack_f+0x66>
     bee:	14 96       	adiw	r26, 0x04	; 4
     bf0:	2d 93       	st	X+, r18
     bf2:	3d 93       	st	X+, r19
     bf4:	4d 93       	st	X+, r20
     bf6:	5c 93       	st	X, r21
     bf8:	17 97       	sbiw	r26, 0x07	; 7
     bfa:	08 95       	ret
     bfc:	2f 3f       	cpi	r18, 0xFF	; 255
     bfe:	31 05       	cpc	r19, r1
     c00:	79 f4       	brne	.+30     	; 0xc20 <__unpack_f+0xc2>
     c02:	41 15       	cp	r20, r1
     c04:	51 05       	cpc	r21, r1
     c06:	61 05       	cpc	r22, r1
     c08:	71 05       	cpc	r23, r1
     c0a:	19 f4       	brne	.+6      	; 0xc12 <__unpack_f+0xb4>
     c0c:	84 e0       	ldi	r24, 0x04	; 4
     c0e:	8c 93       	st	X, r24
     c10:	08 95       	ret
     c12:	64 ff       	sbrs	r22, 4
     c14:	03 c0       	rjmp	.+6      	; 0xc1c <__unpack_f+0xbe>
     c16:	81 e0       	ldi	r24, 0x01	; 1
     c18:	8c 93       	st	X, r24
     c1a:	12 c0       	rjmp	.+36     	; 0xc40 <__unpack_f+0xe2>
     c1c:	1c 92       	st	X, r1
     c1e:	10 c0       	rjmp	.+32     	; 0xc40 <__unpack_f+0xe2>
     c20:	2f 57       	subi	r18, 0x7F	; 127
     c22:	30 40       	sbci	r19, 0x00	; 0
     c24:	13 96       	adiw	r26, 0x03	; 3
     c26:	3c 93       	st	X, r19
     c28:	2e 93       	st	-X, r18
     c2a:	12 97       	sbiw	r26, 0x02	; 2
     c2c:	83 e0       	ldi	r24, 0x03	; 3
     c2e:	8c 93       	st	X, r24
     c30:	87 e0       	ldi	r24, 0x07	; 7
     c32:	44 0f       	add	r20, r20
     c34:	55 1f       	adc	r21, r21
     c36:	66 1f       	adc	r22, r22
     c38:	77 1f       	adc	r23, r23
     c3a:	8a 95       	dec	r24
     c3c:	d1 f7       	brne	.-12     	; 0xc32 <__unpack_f+0xd4>
     c3e:	70 64       	ori	r23, 0x40	; 64
     c40:	14 96       	adiw	r26, 0x04	; 4
     c42:	4d 93       	st	X+, r20
     c44:	5d 93       	st	X+, r21
     c46:	6d 93       	st	X+, r22
     c48:	7c 93       	st	X, r23
     c4a:	17 97       	sbiw	r26, 0x07	; 7
     c4c:	08 95       	ret

00000c4e <__fpcmp_parts_f>:
     c4e:	1f 93       	push	r17
     c50:	dc 01       	movw	r26, r24
     c52:	fb 01       	movw	r30, r22
     c54:	9c 91       	ld	r25, X
     c56:	92 30       	cpi	r25, 0x02	; 2
     c58:	08 f4       	brcc	.+2      	; 0xc5c <__fpcmp_parts_f+0xe>
     c5a:	47 c0       	rjmp	.+142    	; 0xcea <__fpcmp_parts_f+0x9c>
     c5c:	80 81       	ld	r24, Z
     c5e:	82 30       	cpi	r24, 0x02	; 2
     c60:	08 f4       	brcc	.+2      	; 0xc64 <__fpcmp_parts_f+0x16>
     c62:	43 c0       	rjmp	.+134    	; 0xcea <__fpcmp_parts_f+0x9c>
     c64:	94 30       	cpi	r25, 0x04	; 4
     c66:	51 f4       	brne	.+20     	; 0xc7c <__fpcmp_parts_f+0x2e>
     c68:	11 96       	adiw	r26, 0x01	; 1
     c6a:	1c 91       	ld	r17, X
     c6c:	84 30       	cpi	r24, 0x04	; 4
     c6e:	99 f5       	brne	.+102    	; 0xcd6 <__fpcmp_parts_f+0x88>
     c70:	81 81       	ldd	r24, Z+1	; 0x01
     c72:	68 2f       	mov	r22, r24
     c74:	70 e0       	ldi	r23, 0x00	; 0
     c76:	61 1b       	sub	r22, r17
     c78:	71 09       	sbc	r23, r1
     c7a:	3f c0       	rjmp	.+126    	; 0xcfa <__fpcmp_parts_f+0xac>
     c7c:	84 30       	cpi	r24, 0x04	; 4
     c7e:	21 f0       	breq	.+8      	; 0xc88 <__fpcmp_parts_f+0x3a>
     c80:	92 30       	cpi	r25, 0x02	; 2
     c82:	31 f4       	brne	.+12     	; 0xc90 <__fpcmp_parts_f+0x42>
     c84:	82 30       	cpi	r24, 0x02	; 2
     c86:	b9 f1       	breq	.+110    	; 0xcf6 <__fpcmp_parts_f+0xa8>
     c88:	81 81       	ldd	r24, Z+1	; 0x01
     c8a:	88 23       	and	r24, r24
     c8c:	89 f1       	breq	.+98     	; 0xcf0 <__fpcmp_parts_f+0xa2>
     c8e:	2d c0       	rjmp	.+90     	; 0xcea <__fpcmp_parts_f+0x9c>
     c90:	11 96       	adiw	r26, 0x01	; 1
     c92:	1c 91       	ld	r17, X
     c94:	11 97       	sbiw	r26, 0x01	; 1
     c96:	82 30       	cpi	r24, 0x02	; 2
     c98:	f1 f0       	breq	.+60     	; 0xcd6 <__fpcmp_parts_f+0x88>
     c9a:	81 81       	ldd	r24, Z+1	; 0x01
     c9c:	18 17       	cp	r17, r24
     c9e:	d9 f4       	brne	.+54     	; 0xcd6 <__fpcmp_parts_f+0x88>
     ca0:	12 96       	adiw	r26, 0x02	; 2
     ca2:	2d 91       	ld	r18, X+
     ca4:	3c 91       	ld	r19, X
     ca6:	13 97       	sbiw	r26, 0x03	; 3
     ca8:	82 81       	ldd	r24, Z+2	; 0x02
     caa:	93 81       	ldd	r25, Z+3	; 0x03
     cac:	82 17       	cp	r24, r18
     cae:	93 07       	cpc	r25, r19
     cb0:	94 f0       	brlt	.+36     	; 0xcd6 <__fpcmp_parts_f+0x88>
     cb2:	28 17       	cp	r18, r24
     cb4:	39 07       	cpc	r19, r25
     cb6:	bc f0       	brlt	.+46     	; 0xce6 <__fpcmp_parts_f+0x98>
     cb8:	14 96       	adiw	r26, 0x04	; 4
     cba:	8d 91       	ld	r24, X+
     cbc:	9d 91       	ld	r25, X+
     cbe:	0d 90       	ld	r0, X+
     cc0:	bc 91       	ld	r27, X
     cc2:	a0 2d       	mov	r26, r0
     cc4:	24 81       	ldd	r18, Z+4	; 0x04
     cc6:	35 81       	ldd	r19, Z+5	; 0x05
     cc8:	46 81       	ldd	r20, Z+6	; 0x06
     cca:	57 81       	ldd	r21, Z+7	; 0x07
     ccc:	28 17       	cp	r18, r24
     cce:	39 07       	cpc	r19, r25
     cd0:	4a 07       	cpc	r20, r26
     cd2:	5b 07       	cpc	r21, r27
     cd4:	18 f4       	brcc	.+6      	; 0xcdc <__fpcmp_parts_f+0x8e>
     cd6:	11 23       	and	r17, r17
     cd8:	41 f0       	breq	.+16     	; 0xcea <__fpcmp_parts_f+0x9c>
     cda:	0a c0       	rjmp	.+20     	; 0xcf0 <__fpcmp_parts_f+0xa2>
     cdc:	82 17       	cp	r24, r18
     cde:	93 07       	cpc	r25, r19
     ce0:	a4 07       	cpc	r26, r20
     ce2:	b5 07       	cpc	r27, r21
     ce4:	40 f4       	brcc	.+16     	; 0xcf6 <__fpcmp_parts_f+0xa8>
     ce6:	11 23       	and	r17, r17
     ce8:	19 f0       	breq	.+6      	; 0xcf0 <__fpcmp_parts_f+0xa2>
     cea:	61 e0       	ldi	r22, 0x01	; 1
     cec:	70 e0       	ldi	r23, 0x00	; 0
     cee:	05 c0       	rjmp	.+10     	; 0xcfa <__fpcmp_parts_f+0xac>
     cf0:	6f ef       	ldi	r22, 0xFF	; 255
     cf2:	7f ef       	ldi	r23, 0xFF	; 255
     cf4:	02 c0       	rjmp	.+4      	; 0xcfa <__fpcmp_parts_f+0xac>
     cf6:	60 e0       	ldi	r22, 0x00	; 0
     cf8:	70 e0       	ldi	r23, 0x00	; 0
     cfa:	cb 01       	movw	r24, r22
     cfc:	1f 91       	pop	r17
     cfe:	08 95       	ret

00000d00 <C_LCD_voidSendCommand>:
u8 Local_u8SetPositionX = X_INITIAL_POSITION;
u8 Local_u8SetPositionY = Y_INITIAL_POSITION;


void C_LCD_voidSendCommand(u8 Copy_u8Command)
{
     d00:	1f 93       	push	r17
     d02:	df 93       	push	r29
     d04:	cf 93       	push	r28
     d06:	cd b7       	in	r28, 0x3d	; 61
     d08:	de b7       	in	r29, 0x3e	; 62
     d0a:	ea 97       	sbiw	r28, 0x3a	; 58
     d0c:	0f b6       	in	r0, 0x3f	; 63
     d0e:	f8 94       	cli
     d10:	de bf       	out	0x3e, r29	; 62
     d12:	0f be       	out	0x3f, r0	; 63
     d14:	cd bf       	out	0x3d, r28	; 61
     d16:	8a af       	std	Y+58, r24	; 0x3a
	/*Set RS Pin to low to send command */
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_LOW);
     d18:	80 e0       	ldi	r24, 0x00	; 0
     d1a:	61 e0       	ldi	r22, 0x01	; 1
     d1c:	40 e0       	ldi	r20, 0x00	; 0
     d1e:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <DIO_u8SetPinValue>

#elif   MODE_SELECT ==_4_BIT_MODE
#if DRIVER_PURPOUSE == PROTEUS
	u8 Local_u8Command = (((Copy_u8Command ) & CLCD_COMMAND_PROTEUS_MASK) | DIO_u8AndWithPort(CLCD_DATA_PORT, CLCD_DATA_PORT_PROTEUS_MASK));
#elif DRIVER_PURPOUSE == ATMEGA_KIT
	u8 Local_u8Command = (((Copy_u8Command>>1 ) & CLCD_COMMAND_ATMEGA_KIT_MASK) | DIO_u8AndWithPort(CLCD_DATA_PORT, CLCD_DATA_PORT_ATMEGA_KIT_MASK));
     d22:	8a ad       	ldd	r24, Y+58	; 0x3a
     d24:	86 95       	lsr	r24
     d26:	18 2f       	mov	r17, r24
     d28:	18 77       	andi	r17, 0x78	; 120
     d2a:	80 e0       	ldi	r24, 0x00	; 0
     d2c:	67 e8       	ldi	r22, 0x87	; 135
     d2e:	0e 94 57 0f 	call	0x1eae	; 0x1eae <DIO_u8AndWithPort>
     d32:	81 2b       	or	r24, r17
     d34:	89 af       	std	Y+57, r24	; 0x39
#endif

	/* Set Command to data pins */
	DIO_u8SetPortValue(CLCD_DATA_PORT,Local_u8Command);
     d36:	80 e0       	ldi	r24, 0x00	; 0
     d38:	69 ad       	ldd	r22, Y+57	; 0x39
     d3a:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <DIO_u8SetPortValue>

	/*Send Enable pulse */
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
     d3e:	80 e0       	ldi	r24, 0x00	; 0
     d40:	62 e0       	ldi	r22, 0x02	; 2
     d42:	41 e0       	ldi	r20, 0x01	; 1
     d44:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <DIO_u8SetPinValue>
     d48:	80 e0       	ldi	r24, 0x00	; 0
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	a0 e0       	ldi	r26, 0x00	; 0
     d4e:	b0 e4       	ldi	r27, 0x40	; 64
     d50:	8d ab       	std	Y+53, r24	; 0x35
     d52:	9e ab       	std	Y+54, r25	; 0x36
     d54:	af ab       	std	Y+55, r26	; 0x37
     d56:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d58:	6d a9       	ldd	r22, Y+53	; 0x35
     d5a:	7e a9       	ldd	r23, Y+54	; 0x36
     d5c:	8f a9       	ldd	r24, Y+55	; 0x37
     d5e:	98 ad       	ldd	r25, Y+56	; 0x38
     d60:	20 e0       	ldi	r18, 0x00	; 0
     d62:	30 e0       	ldi	r19, 0x00	; 0
     d64:	4a ef       	ldi	r20, 0xFA	; 250
     d66:	54 e4       	ldi	r21, 0x44	; 68
     d68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d6c:	dc 01       	movw	r26, r24
     d6e:	cb 01       	movw	r24, r22
     d70:	89 ab       	std	Y+49, r24	; 0x31
     d72:	9a ab       	std	Y+50, r25	; 0x32
     d74:	ab ab       	std	Y+51, r26	; 0x33
     d76:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     d78:	69 a9       	ldd	r22, Y+49	; 0x31
     d7a:	7a a9       	ldd	r23, Y+50	; 0x32
     d7c:	8b a9       	ldd	r24, Y+51	; 0x33
     d7e:	9c a9       	ldd	r25, Y+52	; 0x34
     d80:	20 e0       	ldi	r18, 0x00	; 0
     d82:	30 e0       	ldi	r19, 0x00	; 0
     d84:	40 e8       	ldi	r20, 0x80	; 128
     d86:	5f e3       	ldi	r21, 0x3F	; 63
     d88:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
     d8c:	88 23       	and	r24, r24
     d8e:	2c f4       	brge	.+10     	; 0xd9a <C_LCD_voidSendCommand+0x9a>
		__ticks = 1;
     d90:	81 e0       	ldi	r24, 0x01	; 1
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	98 ab       	std	Y+48, r25	; 0x30
     d96:	8f a7       	std	Y+47, r24	; 0x2f
     d98:	3f c0       	rjmp	.+126    	; 0xe18 <C_LCD_voidSendCommand+0x118>
	else if (__tmp > 65535)
     d9a:	69 a9       	ldd	r22, Y+49	; 0x31
     d9c:	7a a9       	ldd	r23, Y+50	; 0x32
     d9e:	8b a9       	ldd	r24, Y+51	; 0x33
     da0:	9c a9       	ldd	r25, Y+52	; 0x34
     da2:	20 e0       	ldi	r18, 0x00	; 0
     da4:	3f ef       	ldi	r19, 0xFF	; 255
     da6:	4f e7       	ldi	r20, 0x7F	; 127
     da8:	57 e4       	ldi	r21, 0x47	; 71
     daa:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
     dae:	18 16       	cp	r1, r24
     db0:	4c f5       	brge	.+82     	; 0xe04 <C_LCD_voidSendCommand+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     db2:	6d a9       	ldd	r22, Y+53	; 0x35
     db4:	7e a9       	ldd	r23, Y+54	; 0x36
     db6:	8f a9       	ldd	r24, Y+55	; 0x37
     db8:	98 ad       	ldd	r25, Y+56	; 0x38
     dba:	20 e0       	ldi	r18, 0x00	; 0
     dbc:	30 e0       	ldi	r19, 0x00	; 0
     dbe:	40 e2       	ldi	r20, 0x20	; 32
     dc0:	51 e4       	ldi	r21, 0x41	; 65
     dc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dc6:	dc 01       	movw	r26, r24
     dc8:	cb 01       	movw	r24, r22
     dca:	bc 01       	movw	r22, r24
     dcc:	cd 01       	movw	r24, r26
     dce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dd2:	dc 01       	movw	r26, r24
     dd4:	cb 01       	movw	r24, r22
     dd6:	98 ab       	std	Y+48, r25	; 0x30
     dd8:	8f a7       	std	Y+47, r24	; 0x2f
     dda:	0f c0       	rjmp	.+30     	; 0xdfa <C_LCD_voidSendCommand+0xfa>
     ddc:	88 ec       	ldi	r24, 0xC8	; 200
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	9e a7       	std	Y+46, r25	; 0x2e
     de2:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     de4:	8d a5       	ldd	r24, Y+45	; 0x2d
     de6:	9e a5       	ldd	r25, Y+46	; 0x2e
     de8:	01 97       	sbiw	r24, 0x01	; 1
     dea:	f1 f7       	brne	.-4      	; 0xde8 <C_LCD_voidSendCommand+0xe8>
     dec:	9e a7       	std	Y+46, r25	; 0x2e
     dee:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     df0:	8f a5       	ldd	r24, Y+47	; 0x2f
     df2:	98 a9       	ldd	r25, Y+48	; 0x30
     df4:	01 97       	sbiw	r24, 0x01	; 1
     df6:	98 ab       	std	Y+48, r25	; 0x30
     df8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dfa:	8f a5       	ldd	r24, Y+47	; 0x2f
     dfc:	98 a9       	ldd	r25, Y+48	; 0x30
     dfe:	00 97       	sbiw	r24, 0x00	; 0
     e00:	69 f7       	brne	.-38     	; 0xddc <C_LCD_voidSendCommand+0xdc>
     e02:	14 c0       	rjmp	.+40     	; 0xe2c <C_LCD_voidSendCommand+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e04:	69 a9       	ldd	r22, Y+49	; 0x31
     e06:	7a a9       	ldd	r23, Y+50	; 0x32
     e08:	8b a9       	ldd	r24, Y+51	; 0x33
     e0a:	9c a9       	ldd	r25, Y+52	; 0x34
     e0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e10:	dc 01       	movw	r26, r24
     e12:	cb 01       	movw	r24, r22
     e14:	98 ab       	std	Y+48, r25	; 0x30
     e16:	8f a7       	std	Y+47, r24	; 0x2f
     e18:	8f a5       	ldd	r24, Y+47	; 0x2f
     e1a:	98 a9       	ldd	r25, Y+48	; 0x30
     e1c:	9c a7       	std	Y+44, r25	; 0x2c
     e1e:	8b a7       	std	Y+43, r24	; 0x2b
     e20:	8b a5       	ldd	r24, Y+43	; 0x2b
     e22:	9c a5       	ldd	r25, Y+44	; 0x2c
     e24:	01 97       	sbiw	r24, 0x01	; 1
     e26:	f1 f7       	brne	.-4      	; 0xe24 <C_LCD_voidSendCommand+0x124>
     e28:	9c a7       	std	Y+44, r25	; 0x2c
     e2a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
     e2c:	80 e0       	ldi	r24, 0x00	; 0
     e2e:	62 e0       	ldi	r22, 0x02	; 2
     e30:	40 e0       	ldi	r20, 0x00	; 0
     e32:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <DIO_u8SetPinValue>
     e36:	80 e0       	ldi	r24, 0x00	; 0
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	a0 ea       	ldi	r26, 0xA0	; 160
     e3c:	b0 e4       	ldi	r27, 0x40	; 64
     e3e:	8f a3       	std	Y+39, r24	; 0x27
     e40:	98 a7       	std	Y+40, r25	; 0x28
     e42:	a9 a7       	std	Y+41, r26	; 0x29
     e44:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e46:	6f a1       	ldd	r22, Y+39	; 0x27
     e48:	78 a5       	ldd	r23, Y+40	; 0x28
     e4a:	89 a5       	ldd	r24, Y+41	; 0x29
     e4c:	9a a5       	ldd	r25, Y+42	; 0x2a
     e4e:	20 e0       	ldi	r18, 0x00	; 0
     e50:	30 e0       	ldi	r19, 0x00	; 0
     e52:	4a ef       	ldi	r20, 0xFA	; 250
     e54:	54 e4       	ldi	r21, 0x44	; 68
     e56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e5a:	dc 01       	movw	r26, r24
     e5c:	cb 01       	movw	r24, r22
     e5e:	8b a3       	std	Y+35, r24	; 0x23
     e60:	9c a3       	std	Y+36, r25	; 0x24
     e62:	ad a3       	std	Y+37, r26	; 0x25
     e64:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     e66:	6b a1       	ldd	r22, Y+35	; 0x23
     e68:	7c a1       	ldd	r23, Y+36	; 0x24
     e6a:	8d a1       	ldd	r24, Y+37	; 0x25
     e6c:	9e a1       	ldd	r25, Y+38	; 0x26
     e6e:	20 e0       	ldi	r18, 0x00	; 0
     e70:	30 e0       	ldi	r19, 0x00	; 0
     e72:	40 e8       	ldi	r20, 0x80	; 128
     e74:	5f e3       	ldi	r21, 0x3F	; 63
     e76:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
     e7a:	88 23       	and	r24, r24
     e7c:	2c f4       	brge	.+10     	; 0xe88 <C_LCD_voidSendCommand+0x188>
		__ticks = 1;
     e7e:	81 e0       	ldi	r24, 0x01	; 1
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	9a a3       	std	Y+34, r25	; 0x22
     e84:	89 a3       	std	Y+33, r24	; 0x21
     e86:	3f c0       	rjmp	.+126    	; 0xf06 <C_LCD_voidSendCommand+0x206>
	else if (__tmp > 65535)
     e88:	6b a1       	ldd	r22, Y+35	; 0x23
     e8a:	7c a1       	ldd	r23, Y+36	; 0x24
     e8c:	8d a1       	ldd	r24, Y+37	; 0x25
     e8e:	9e a1       	ldd	r25, Y+38	; 0x26
     e90:	20 e0       	ldi	r18, 0x00	; 0
     e92:	3f ef       	ldi	r19, 0xFF	; 255
     e94:	4f e7       	ldi	r20, 0x7F	; 127
     e96:	57 e4       	ldi	r21, 0x47	; 71
     e98:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
     e9c:	18 16       	cp	r1, r24
     e9e:	4c f5       	brge	.+82     	; 0xef2 <C_LCD_voidSendCommand+0x1f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ea0:	6f a1       	ldd	r22, Y+39	; 0x27
     ea2:	78 a5       	ldd	r23, Y+40	; 0x28
     ea4:	89 a5       	ldd	r24, Y+41	; 0x29
     ea6:	9a a5       	ldd	r25, Y+42	; 0x2a
     ea8:	20 e0       	ldi	r18, 0x00	; 0
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	40 e2       	ldi	r20, 0x20	; 32
     eae:	51 e4       	ldi	r21, 0x41	; 65
     eb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eb4:	dc 01       	movw	r26, r24
     eb6:	cb 01       	movw	r24, r22
     eb8:	bc 01       	movw	r22, r24
     eba:	cd 01       	movw	r24, r26
     ebc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ec0:	dc 01       	movw	r26, r24
     ec2:	cb 01       	movw	r24, r22
     ec4:	9a a3       	std	Y+34, r25	; 0x22
     ec6:	89 a3       	std	Y+33, r24	; 0x21
     ec8:	0f c0       	rjmp	.+30     	; 0xee8 <C_LCD_voidSendCommand+0x1e8>
     eca:	88 ec       	ldi	r24, 0xC8	; 200
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	98 a3       	std	Y+32, r25	; 0x20
     ed0:	8f 8f       	std	Y+31, r24	; 0x1f
     ed2:	8f 8d       	ldd	r24, Y+31	; 0x1f
     ed4:	98 a1       	ldd	r25, Y+32	; 0x20
     ed6:	01 97       	sbiw	r24, 0x01	; 1
     ed8:	f1 f7       	brne	.-4      	; 0xed6 <C_LCD_voidSendCommand+0x1d6>
     eda:	98 a3       	std	Y+32, r25	; 0x20
     edc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ede:	89 a1       	ldd	r24, Y+33	; 0x21
     ee0:	9a a1       	ldd	r25, Y+34	; 0x22
     ee2:	01 97       	sbiw	r24, 0x01	; 1
     ee4:	9a a3       	std	Y+34, r25	; 0x22
     ee6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ee8:	89 a1       	ldd	r24, Y+33	; 0x21
     eea:	9a a1       	ldd	r25, Y+34	; 0x22
     eec:	00 97       	sbiw	r24, 0x00	; 0
     eee:	69 f7       	brne	.-38     	; 0xeca <C_LCD_voidSendCommand+0x1ca>
     ef0:	14 c0       	rjmp	.+40     	; 0xf1a <C_LCD_voidSendCommand+0x21a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ef2:	6b a1       	ldd	r22, Y+35	; 0x23
     ef4:	7c a1       	ldd	r23, Y+36	; 0x24
     ef6:	8d a1       	ldd	r24, Y+37	; 0x25
     ef8:	9e a1       	ldd	r25, Y+38	; 0x26
     efa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     efe:	dc 01       	movw	r26, r24
     f00:	cb 01       	movw	r24, r22
     f02:	9a a3       	std	Y+34, r25	; 0x22
     f04:	89 a3       	std	Y+33, r24	; 0x21
     f06:	89 a1       	ldd	r24, Y+33	; 0x21
     f08:	9a a1       	ldd	r25, Y+34	; 0x22
     f0a:	9e 8f       	std	Y+30, r25	; 0x1e
     f0c:	8d 8f       	std	Y+29, r24	; 0x1d
     f0e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f10:	9e 8d       	ldd	r25, Y+30	; 0x1e
     f12:	01 97       	sbiw	r24, 0x01	; 1
     f14:	f1 f7       	brne	.-4      	; 0xf12 <C_LCD_voidSendCommand+0x212>
     f16:	9e 8f       	std	Y+30, r25	; 0x1e
     f18:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);
#if DRIVER_PURPOUSE == PROTEUS
	Local_u8Command = ((Copy_u8Command <<4) |DIO_u8AndWithPort(CLCD_DATA_PORT, CLCD_DATA_PORT_PROTEUS_MASK));
#elif DRIVER_PURPOUSE == ATMEGA_KIT
	Local_u8Command = ((Copy_u8Command <<3) |DIO_u8AndWithPort(CLCD_DATA_PORT, CLCD_DATA_PORT_ATMEGA_KIT_MASK));
     f1a:	8a ad       	ldd	r24, Y+58	; 0x3a
     f1c:	88 2f       	mov	r24, r24
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	88 0f       	add	r24, r24
     f22:	99 1f       	adc	r25, r25
     f24:	88 0f       	add	r24, r24
     f26:	99 1f       	adc	r25, r25
     f28:	88 0f       	add	r24, r24
     f2a:	99 1f       	adc	r25, r25
     f2c:	18 2f       	mov	r17, r24
     f2e:	80 e0       	ldi	r24, 0x00	; 0
     f30:	67 e8       	ldi	r22, 0x87	; 135
     f32:	0e 94 57 0f 	call	0x1eae	; 0x1eae <DIO_u8AndWithPort>
     f36:	81 2b       	or	r24, r17
     f38:	89 af       	std	Y+57, r24	; 0x39
#endif

	DIO_u8SetPortValue(CLCD_DATA_PORT,Local_u8Command);
     f3a:	80 e0       	ldi	r24, 0x00	; 0
     f3c:	69 ad       	ldd	r22, Y+57	; 0x39
     f3e:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <DIO_u8SetPortValue>

	/*Send Enable pulse */
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
     f42:	80 e0       	ldi	r24, 0x00	; 0
     f44:	62 e0       	ldi	r22, 0x02	; 2
     f46:	41 e0       	ldi	r20, 0x01	; 1
     f48:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <DIO_u8SetPinValue>
     f4c:	80 e0       	ldi	r24, 0x00	; 0
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	a0 e0       	ldi	r26, 0x00	; 0
     f52:	b0 e4       	ldi	r27, 0x40	; 64
     f54:	89 8f       	std	Y+25, r24	; 0x19
     f56:	9a 8f       	std	Y+26, r25	; 0x1a
     f58:	ab 8f       	std	Y+27, r26	; 0x1b
     f5a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f5c:	69 8d       	ldd	r22, Y+25	; 0x19
     f5e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f60:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f62:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f64:	20 e0       	ldi	r18, 0x00	; 0
     f66:	30 e0       	ldi	r19, 0x00	; 0
     f68:	4a ef       	ldi	r20, 0xFA	; 250
     f6a:	54 e4       	ldi	r21, 0x44	; 68
     f6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f70:	dc 01       	movw	r26, r24
     f72:	cb 01       	movw	r24, r22
     f74:	8d 8b       	std	Y+21, r24	; 0x15
     f76:	9e 8b       	std	Y+22, r25	; 0x16
     f78:	af 8b       	std	Y+23, r26	; 0x17
     f7a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     f7c:	6d 89       	ldd	r22, Y+21	; 0x15
     f7e:	7e 89       	ldd	r23, Y+22	; 0x16
     f80:	8f 89       	ldd	r24, Y+23	; 0x17
     f82:	98 8d       	ldd	r25, Y+24	; 0x18
     f84:	20 e0       	ldi	r18, 0x00	; 0
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	40 e8       	ldi	r20, 0x80	; 128
     f8a:	5f e3       	ldi	r21, 0x3F	; 63
     f8c:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
     f90:	88 23       	and	r24, r24
     f92:	2c f4       	brge	.+10     	; 0xf9e <C_LCD_voidSendCommand+0x29e>
		__ticks = 1;
     f94:	81 e0       	ldi	r24, 0x01	; 1
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	9c 8b       	std	Y+20, r25	; 0x14
     f9a:	8b 8b       	std	Y+19, r24	; 0x13
     f9c:	3f c0       	rjmp	.+126    	; 0x101c <C_LCD_voidSendCommand+0x31c>
	else if (__tmp > 65535)
     f9e:	6d 89       	ldd	r22, Y+21	; 0x15
     fa0:	7e 89       	ldd	r23, Y+22	; 0x16
     fa2:	8f 89       	ldd	r24, Y+23	; 0x17
     fa4:	98 8d       	ldd	r25, Y+24	; 0x18
     fa6:	20 e0       	ldi	r18, 0x00	; 0
     fa8:	3f ef       	ldi	r19, 0xFF	; 255
     faa:	4f e7       	ldi	r20, 0x7F	; 127
     fac:	57 e4       	ldi	r21, 0x47	; 71
     fae:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
     fb2:	18 16       	cp	r1, r24
     fb4:	4c f5       	brge	.+82     	; 0x1008 <C_LCD_voidSendCommand+0x308>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fb6:	69 8d       	ldd	r22, Y+25	; 0x19
     fb8:	7a 8d       	ldd	r23, Y+26	; 0x1a
     fba:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fbc:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fbe:	20 e0       	ldi	r18, 0x00	; 0
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	40 e2       	ldi	r20, 0x20	; 32
     fc4:	51 e4       	ldi	r21, 0x41	; 65
     fc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fca:	dc 01       	movw	r26, r24
     fcc:	cb 01       	movw	r24, r22
     fce:	bc 01       	movw	r22, r24
     fd0:	cd 01       	movw	r24, r26
     fd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fd6:	dc 01       	movw	r26, r24
     fd8:	cb 01       	movw	r24, r22
     fda:	9c 8b       	std	Y+20, r25	; 0x14
     fdc:	8b 8b       	std	Y+19, r24	; 0x13
     fde:	0f c0       	rjmp	.+30     	; 0xffe <C_LCD_voidSendCommand+0x2fe>
     fe0:	88 ec       	ldi	r24, 0xC8	; 200
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	9a 8b       	std	Y+18, r25	; 0x12
     fe6:	89 8b       	std	Y+17, r24	; 0x11
     fe8:	89 89       	ldd	r24, Y+17	; 0x11
     fea:	9a 89       	ldd	r25, Y+18	; 0x12
     fec:	01 97       	sbiw	r24, 0x01	; 1
     fee:	f1 f7       	brne	.-4      	; 0xfec <C_LCD_voidSendCommand+0x2ec>
     ff0:	9a 8b       	std	Y+18, r25	; 0x12
     ff2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ff4:	8b 89       	ldd	r24, Y+19	; 0x13
     ff6:	9c 89       	ldd	r25, Y+20	; 0x14
     ff8:	01 97       	sbiw	r24, 0x01	; 1
     ffa:	9c 8b       	std	Y+20, r25	; 0x14
     ffc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ffe:	8b 89       	ldd	r24, Y+19	; 0x13
    1000:	9c 89       	ldd	r25, Y+20	; 0x14
    1002:	00 97       	sbiw	r24, 0x00	; 0
    1004:	69 f7       	brne	.-38     	; 0xfe0 <C_LCD_voidSendCommand+0x2e0>
    1006:	14 c0       	rjmp	.+40     	; 0x1030 <C_LCD_voidSendCommand+0x330>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1008:	6d 89       	ldd	r22, Y+21	; 0x15
    100a:	7e 89       	ldd	r23, Y+22	; 0x16
    100c:	8f 89       	ldd	r24, Y+23	; 0x17
    100e:	98 8d       	ldd	r25, Y+24	; 0x18
    1010:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1014:	dc 01       	movw	r26, r24
    1016:	cb 01       	movw	r24, r22
    1018:	9c 8b       	std	Y+20, r25	; 0x14
    101a:	8b 8b       	std	Y+19, r24	; 0x13
    101c:	8b 89       	ldd	r24, Y+19	; 0x13
    101e:	9c 89       	ldd	r25, Y+20	; 0x14
    1020:	98 8b       	std	Y+16, r25	; 0x10
    1022:	8f 87       	std	Y+15, r24	; 0x0f
    1024:	8f 85       	ldd	r24, Y+15	; 0x0f
    1026:	98 89       	ldd	r25, Y+16	; 0x10
    1028:	01 97       	sbiw	r24, 0x01	; 1
    102a:	f1 f7       	brne	.-4      	; 0x1028 <C_LCD_voidSendCommand+0x328>
    102c:	98 8b       	std	Y+16, r25	; 0x10
    102e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    1030:	80 e0       	ldi	r24, 0x00	; 0
    1032:	62 e0       	ldi	r22, 0x02	; 2
    1034:	40 e0       	ldi	r20, 0x00	; 0
    1036:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <DIO_u8SetPinValue>
    103a:	80 e0       	ldi	r24, 0x00	; 0
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	a0 ea       	ldi	r26, 0xA0	; 160
    1040:	b0 e4       	ldi	r27, 0x40	; 64
    1042:	8b 87       	std	Y+11, r24	; 0x0b
    1044:	9c 87       	std	Y+12, r25	; 0x0c
    1046:	ad 87       	std	Y+13, r26	; 0x0d
    1048:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    104a:	6b 85       	ldd	r22, Y+11	; 0x0b
    104c:	7c 85       	ldd	r23, Y+12	; 0x0c
    104e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1050:	9e 85       	ldd	r25, Y+14	; 0x0e
    1052:	20 e0       	ldi	r18, 0x00	; 0
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	4a ef       	ldi	r20, 0xFA	; 250
    1058:	54 e4       	ldi	r21, 0x44	; 68
    105a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    105e:	dc 01       	movw	r26, r24
    1060:	cb 01       	movw	r24, r22
    1062:	8f 83       	std	Y+7, r24	; 0x07
    1064:	98 87       	std	Y+8, r25	; 0x08
    1066:	a9 87       	std	Y+9, r26	; 0x09
    1068:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    106a:	6f 81       	ldd	r22, Y+7	; 0x07
    106c:	78 85       	ldd	r23, Y+8	; 0x08
    106e:	89 85       	ldd	r24, Y+9	; 0x09
    1070:	9a 85       	ldd	r25, Y+10	; 0x0a
    1072:	20 e0       	ldi	r18, 0x00	; 0
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	40 e8       	ldi	r20, 0x80	; 128
    1078:	5f e3       	ldi	r21, 0x3F	; 63
    107a:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    107e:	88 23       	and	r24, r24
    1080:	2c f4       	brge	.+10     	; 0x108c <C_LCD_voidSendCommand+0x38c>
		__ticks = 1;
    1082:	81 e0       	ldi	r24, 0x01	; 1
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	9e 83       	std	Y+6, r25	; 0x06
    1088:	8d 83       	std	Y+5, r24	; 0x05
    108a:	3f c0       	rjmp	.+126    	; 0x110a <C_LCD_voidSendCommand+0x40a>
	else if (__tmp > 65535)
    108c:	6f 81       	ldd	r22, Y+7	; 0x07
    108e:	78 85       	ldd	r23, Y+8	; 0x08
    1090:	89 85       	ldd	r24, Y+9	; 0x09
    1092:	9a 85       	ldd	r25, Y+10	; 0x0a
    1094:	20 e0       	ldi	r18, 0x00	; 0
    1096:	3f ef       	ldi	r19, 0xFF	; 255
    1098:	4f e7       	ldi	r20, 0x7F	; 127
    109a:	57 e4       	ldi	r21, 0x47	; 71
    109c:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    10a0:	18 16       	cp	r1, r24
    10a2:	4c f5       	brge	.+82     	; 0x10f6 <C_LCD_voidSendCommand+0x3f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    10a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    10a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    10aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    10ac:	20 e0       	ldi	r18, 0x00	; 0
    10ae:	30 e0       	ldi	r19, 0x00	; 0
    10b0:	40 e2       	ldi	r20, 0x20	; 32
    10b2:	51 e4       	ldi	r21, 0x41	; 65
    10b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10b8:	dc 01       	movw	r26, r24
    10ba:	cb 01       	movw	r24, r22
    10bc:	bc 01       	movw	r22, r24
    10be:	cd 01       	movw	r24, r26
    10c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10c4:	dc 01       	movw	r26, r24
    10c6:	cb 01       	movw	r24, r22
    10c8:	9e 83       	std	Y+6, r25	; 0x06
    10ca:	8d 83       	std	Y+5, r24	; 0x05
    10cc:	0f c0       	rjmp	.+30     	; 0x10ec <C_LCD_voidSendCommand+0x3ec>
    10ce:	88 ec       	ldi	r24, 0xC8	; 200
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	9c 83       	std	Y+4, r25	; 0x04
    10d4:	8b 83       	std	Y+3, r24	; 0x03
    10d6:	8b 81       	ldd	r24, Y+3	; 0x03
    10d8:	9c 81       	ldd	r25, Y+4	; 0x04
    10da:	01 97       	sbiw	r24, 0x01	; 1
    10dc:	f1 f7       	brne	.-4      	; 0x10da <C_LCD_voidSendCommand+0x3da>
    10de:	9c 83       	std	Y+4, r25	; 0x04
    10e0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10e2:	8d 81       	ldd	r24, Y+5	; 0x05
    10e4:	9e 81       	ldd	r25, Y+6	; 0x06
    10e6:	01 97       	sbiw	r24, 0x01	; 1
    10e8:	9e 83       	std	Y+6, r25	; 0x06
    10ea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10ec:	8d 81       	ldd	r24, Y+5	; 0x05
    10ee:	9e 81       	ldd	r25, Y+6	; 0x06
    10f0:	00 97       	sbiw	r24, 0x00	; 0
    10f2:	69 f7       	brne	.-38     	; 0x10ce <C_LCD_voidSendCommand+0x3ce>
    10f4:	14 c0       	rjmp	.+40     	; 0x111e <C_LCD_voidSendCommand+0x41e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10f6:	6f 81       	ldd	r22, Y+7	; 0x07
    10f8:	78 85       	ldd	r23, Y+8	; 0x08
    10fa:	89 85       	ldd	r24, Y+9	; 0x09
    10fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    10fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1102:	dc 01       	movw	r26, r24
    1104:	cb 01       	movw	r24, r22
    1106:	9e 83       	std	Y+6, r25	; 0x06
    1108:	8d 83       	std	Y+5, r24	; 0x05
    110a:	8d 81       	ldd	r24, Y+5	; 0x05
    110c:	9e 81       	ldd	r25, Y+6	; 0x06
    110e:	9a 83       	std	Y+2, r25	; 0x02
    1110:	89 83       	std	Y+1, r24	; 0x01
    1112:	89 81       	ldd	r24, Y+1	; 0x01
    1114:	9a 81       	ldd	r25, Y+2	; 0x02
    1116:	01 97       	sbiw	r24, 0x01	; 1
    1118:	f1 f7       	brne	.-4      	; 0x1116 <C_LCD_voidSendCommand+0x416>
    111a:	9a 83       	std	Y+2, r25	; 0x02
    111c:	89 83       	std	Y+1, r24	; 0x01

#endif



}
    111e:	ea 96       	adiw	r28, 0x3a	; 58
    1120:	0f b6       	in	r0, 0x3f	; 63
    1122:	f8 94       	cli
    1124:	de bf       	out	0x3e, r29	; 62
    1126:	0f be       	out	0x3f, r0	; 63
    1128:	cd bf       	out	0x3d, r28	; 61
    112a:	cf 91       	pop	r28
    112c:	df 91       	pop	r29
    112e:	1f 91       	pop	r17
    1130:	08 95       	ret

00001132 <CLCD_voidSendData>:

void CLCD_voidSendData(u8 Copy_u8Data)
{
    1132:	1f 93       	push	r17
    1134:	df 93       	push	r29
    1136:	cf 93       	push	r28
    1138:	cd b7       	in	r28, 0x3d	; 61
    113a:	de b7       	in	r29, 0x3e	; 62
    113c:	ea 97       	sbiw	r28, 0x3a	; 58
    113e:	0f b6       	in	r0, 0x3f	; 63
    1140:	f8 94       	cli
    1142:	de bf       	out	0x3e, r29	; 62
    1144:	0f be       	out	0x3f, r0	; 63
    1146:	cd bf       	out	0x3d, r28	; 61
    1148:	8a af       	std	Y+58, r24	; 0x3a

	if(Local_u8SetPositionY>CLCD_COL_NUM)
    114a:	80 91 7d 01 	lds	r24, 0x017D
    114e:	80 31       	cpi	r24, 0x10	; 16
    1150:	c8 f0       	brcs	.+50     	; 0x1184 <CLCD_voidSendData+0x52>
	{
		if(Local_u8SetPositionX>CLCD_ROW_NUM)
    1152:	80 91 7c 01 	lds	r24, 0x017C
    1156:	84 30       	cpi	r24, 0x04	; 4
    1158:	10 f0       	brcs	.+4      	; 0x115e <CLCD_voidSendData+0x2c>
		{
			Local_u8SetPositionX = X_INITIAL_POSITION;
    115a:	10 92 7c 01 	sts	0x017C, r1
		}
		DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN4,DIO_u8PIN_HIGH);
    115e:	80 e0       	ldi	r24, 0x00	; 0
    1160:	64 e0       	ldi	r22, 0x04	; 4
    1162:	41 e0       	ldi	r20, 0x01	; 1
    1164:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <DIO_u8SetPinValue>
		Local_u8SetPositionY = Y_INITIAL_POSITION;
    1168:	10 92 7d 01 	sts	0x017D, r1
		Local_u8SetPositionX++;
    116c:	80 91 7c 01 	lds	r24, 0x017C
    1170:	8f 5f       	subi	r24, 0xFF	; 255
    1172:	80 93 7c 01 	sts	0x017C, r24
		CLCD_voidGoToXY(Local_u8SetPositionX,Local_u8SetPositionY);
    1176:	80 91 7c 01 	lds	r24, 0x017C
    117a:	90 91 7d 01 	lds	r25, 0x017D
    117e:	69 2f       	mov	r22, r25
    1180:	0e 94 97 0b 	call	0x172e	; 0x172e <CLCD_voidGoToXY>
	}
	Local_u8SetPositionY++;
    1184:	80 91 7d 01 	lds	r24, 0x017D
    1188:	8f 5f       	subi	r24, 0xFF	; 255
    118a:	80 93 7d 01 	sts	0x017D, r24


	/*Set RS Pin to low to send data */
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_HIGH);
    118e:	80 e0       	ldi	r24, 0x00	; 0
    1190:	61 e0       	ldi	r22, 0x01	; 1
    1192:	41 e0       	ldi	r20, 0x01	; 1
    1194:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <DIO_u8SetPinValue>
#elif   MODE_SELECT ==_4_BIT_MODE

#if DRIVER_PURPOUSE == PROTEUS
	u8 Local_u8Data = (((Copy_u8Data) & CLCD_COMMAND_PROTEUS_MASK) | DIO_u8AndWithPort(CLCD_DATA_PORT, CLCD_DATA_PORT_PROTEUS_MASK));
#elif DRIVER_PURPOUSE == ATMEGA_KIT
	u8 Local_u8Data = (((Copy_u8Data>>1) & CLCD_COMMAND_ATMEGA_KIT_MASK) | DIO_u8AndWithPort(CLCD_DATA_PORT, CLCD_DATA_PORT_ATMEGA_KIT_MASK));
    1198:	8a ad       	ldd	r24, Y+58	; 0x3a
    119a:	86 95       	lsr	r24
    119c:	18 2f       	mov	r17, r24
    119e:	18 77       	andi	r17, 0x78	; 120
    11a0:	80 e0       	ldi	r24, 0x00	; 0
    11a2:	67 e8       	ldi	r22, 0x87	; 135
    11a4:	0e 94 57 0f 	call	0x1eae	; 0x1eae <DIO_u8AndWithPort>
    11a8:	81 2b       	or	r24, r17
    11aa:	89 af       	std	Y+57, r24	; 0x39
#endif
	/* Set Command to data pins */
	DIO_u8SetPortValue(CLCD_DATA_PORT,Local_u8Data);
    11ac:	80 e0       	ldi	r24, 0x00	; 0
    11ae:	69 ad       	ldd	r22, Y+57	; 0x39
    11b0:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <DIO_u8SetPortValue>

	/*Send Enable pulse */
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    11b4:	80 e0       	ldi	r24, 0x00	; 0
    11b6:	62 e0       	ldi	r22, 0x02	; 2
    11b8:	41 e0       	ldi	r20, 0x01	; 1
    11ba:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <DIO_u8SetPinValue>
    11be:	80 e0       	ldi	r24, 0x00	; 0
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	a0 e0       	ldi	r26, 0x00	; 0
    11c4:	b0 e4       	ldi	r27, 0x40	; 64
    11c6:	8d ab       	std	Y+53, r24	; 0x35
    11c8:	9e ab       	std	Y+54, r25	; 0x36
    11ca:	af ab       	std	Y+55, r26	; 0x37
    11cc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11ce:	6d a9       	ldd	r22, Y+53	; 0x35
    11d0:	7e a9       	ldd	r23, Y+54	; 0x36
    11d2:	8f a9       	ldd	r24, Y+55	; 0x37
    11d4:	98 ad       	ldd	r25, Y+56	; 0x38
    11d6:	20 e0       	ldi	r18, 0x00	; 0
    11d8:	30 e0       	ldi	r19, 0x00	; 0
    11da:	4a ef       	ldi	r20, 0xFA	; 250
    11dc:	54 e4       	ldi	r21, 0x44	; 68
    11de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11e2:	dc 01       	movw	r26, r24
    11e4:	cb 01       	movw	r24, r22
    11e6:	89 ab       	std	Y+49, r24	; 0x31
    11e8:	9a ab       	std	Y+50, r25	; 0x32
    11ea:	ab ab       	std	Y+51, r26	; 0x33
    11ec:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    11ee:	69 a9       	ldd	r22, Y+49	; 0x31
    11f0:	7a a9       	ldd	r23, Y+50	; 0x32
    11f2:	8b a9       	ldd	r24, Y+51	; 0x33
    11f4:	9c a9       	ldd	r25, Y+52	; 0x34
    11f6:	20 e0       	ldi	r18, 0x00	; 0
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	40 e8       	ldi	r20, 0x80	; 128
    11fc:	5f e3       	ldi	r21, 0x3F	; 63
    11fe:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    1202:	88 23       	and	r24, r24
    1204:	2c f4       	brge	.+10     	; 0x1210 <CLCD_voidSendData+0xde>
		__ticks = 1;
    1206:	81 e0       	ldi	r24, 0x01	; 1
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	98 ab       	std	Y+48, r25	; 0x30
    120c:	8f a7       	std	Y+47, r24	; 0x2f
    120e:	3f c0       	rjmp	.+126    	; 0x128e <CLCD_voidSendData+0x15c>
	else if (__tmp > 65535)
    1210:	69 a9       	ldd	r22, Y+49	; 0x31
    1212:	7a a9       	ldd	r23, Y+50	; 0x32
    1214:	8b a9       	ldd	r24, Y+51	; 0x33
    1216:	9c a9       	ldd	r25, Y+52	; 0x34
    1218:	20 e0       	ldi	r18, 0x00	; 0
    121a:	3f ef       	ldi	r19, 0xFF	; 255
    121c:	4f e7       	ldi	r20, 0x7F	; 127
    121e:	57 e4       	ldi	r21, 0x47	; 71
    1220:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    1224:	18 16       	cp	r1, r24
    1226:	4c f5       	brge	.+82     	; 0x127a <CLCD_voidSendData+0x148>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1228:	6d a9       	ldd	r22, Y+53	; 0x35
    122a:	7e a9       	ldd	r23, Y+54	; 0x36
    122c:	8f a9       	ldd	r24, Y+55	; 0x37
    122e:	98 ad       	ldd	r25, Y+56	; 0x38
    1230:	20 e0       	ldi	r18, 0x00	; 0
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	40 e2       	ldi	r20, 0x20	; 32
    1236:	51 e4       	ldi	r21, 0x41	; 65
    1238:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    123c:	dc 01       	movw	r26, r24
    123e:	cb 01       	movw	r24, r22
    1240:	bc 01       	movw	r22, r24
    1242:	cd 01       	movw	r24, r26
    1244:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1248:	dc 01       	movw	r26, r24
    124a:	cb 01       	movw	r24, r22
    124c:	98 ab       	std	Y+48, r25	; 0x30
    124e:	8f a7       	std	Y+47, r24	; 0x2f
    1250:	0f c0       	rjmp	.+30     	; 0x1270 <CLCD_voidSendData+0x13e>
    1252:	88 ec       	ldi	r24, 0xC8	; 200
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	9e a7       	std	Y+46, r25	; 0x2e
    1258:	8d a7       	std	Y+45, r24	; 0x2d
    125a:	8d a5       	ldd	r24, Y+45	; 0x2d
    125c:	9e a5       	ldd	r25, Y+46	; 0x2e
    125e:	01 97       	sbiw	r24, 0x01	; 1
    1260:	f1 f7       	brne	.-4      	; 0x125e <CLCD_voidSendData+0x12c>
    1262:	9e a7       	std	Y+46, r25	; 0x2e
    1264:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1266:	8f a5       	ldd	r24, Y+47	; 0x2f
    1268:	98 a9       	ldd	r25, Y+48	; 0x30
    126a:	01 97       	sbiw	r24, 0x01	; 1
    126c:	98 ab       	std	Y+48, r25	; 0x30
    126e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1270:	8f a5       	ldd	r24, Y+47	; 0x2f
    1272:	98 a9       	ldd	r25, Y+48	; 0x30
    1274:	00 97       	sbiw	r24, 0x00	; 0
    1276:	69 f7       	brne	.-38     	; 0x1252 <CLCD_voidSendData+0x120>
    1278:	14 c0       	rjmp	.+40     	; 0x12a2 <CLCD_voidSendData+0x170>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    127a:	69 a9       	ldd	r22, Y+49	; 0x31
    127c:	7a a9       	ldd	r23, Y+50	; 0x32
    127e:	8b a9       	ldd	r24, Y+51	; 0x33
    1280:	9c a9       	ldd	r25, Y+52	; 0x34
    1282:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1286:	dc 01       	movw	r26, r24
    1288:	cb 01       	movw	r24, r22
    128a:	98 ab       	std	Y+48, r25	; 0x30
    128c:	8f a7       	std	Y+47, r24	; 0x2f
    128e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1290:	98 a9       	ldd	r25, Y+48	; 0x30
    1292:	9c a7       	std	Y+44, r25	; 0x2c
    1294:	8b a7       	std	Y+43, r24	; 0x2b
    1296:	8b a5       	ldd	r24, Y+43	; 0x2b
    1298:	9c a5       	ldd	r25, Y+44	; 0x2c
    129a:	01 97       	sbiw	r24, 0x01	; 1
    129c:	f1 f7       	brne	.-4      	; 0x129a <CLCD_voidSendData+0x168>
    129e:	9c a7       	std	Y+44, r25	; 0x2c
    12a0:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    12a2:	80 e0       	ldi	r24, 0x00	; 0
    12a4:	62 e0       	ldi	r22, 0x02	; 2
    12a6:	40 e0       	ldi	r20, 0x00	; 0
    12a8:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <DIO_u8SetPinValue>
    12ac:	80 e0       	ldi	r24, 0x00	; 0
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	a0 ea       	ldi	r26, 0xA0	; 160
    12b2:	b0 e4       	ldi	r27, 0x40	; 64
    12b4:	8f a3       	std	Y+39, r24	; 0x27
    12b6:	98 a7       	std	Y+40, r25	; 0x28
    12b8:	a9 a7       	std	Y+41, r26	; 0x29
    12ba:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12bc:	6f a1       	ldd	r22, Y+39	; 0x27
    12be:	78 a5       	ldd	r23, Y+40	; 0x28
    12c0:	89 a5       	ldd	r24, Y+41	; 0x29
    12c2:	9a a5       	ldd	r25, Y+42	; 0x2a
    12c4:	20 e0       	ldi	r18, 0x00	; 0
    12c6:	30 e0       	ldi	r19, 0x00	; 0
    12c8:	4a ef       	ldi	r20, 0xFA	; 250
    12ca:	54 e4       	ldi	r21, 0x44	; 68
    12cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12d0:	dc 01       	movw	r26, r24
    12d2:	cb 01       	movw	r24, r22
    12d4:	8b a3       	std	Y+35, r24	; 0x23
    12d6:	9c a3       	std	Y+36, r25	; 0x24
    12d8:	ad a3       	std	Y+37, r26	; 0x25
    12da:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    12dc:	6b a1       	ldd	r22, Y+35	; 0x23
    12de:	7c a1       	ldd	r23, Y+36	; 0x24
    12e0:	8d a1       	ldd	r24, Y+37	; 0x25
    12e2:	9e a1       	ldd	r25, Y+38	; 0x26
    12e4:	20 e0       	ldi	r18, 0x00	; 0
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	40 e8       	ldi	r20, 0x80	; 128
    12ea:	5f e3       	ldi	r21, 0x3F	; 63
    12ec:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    12f0:	88 23       	and	r24, r24
    12f2:	2c f4       	brge	.+10     	; 0x12fe <CLCD_voidSendData+0x1cc>
		__ticks = 1;
    12f4:	81 e0       	ldi	r24, 0x01	; 1
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	9a a3       	std	Y+34, r25	; 0x22
    12fa:	89 a3       	std	Y+33, r24	; 0x21
    12fc:	3f c0       	rjmp	.+126    	; 0x137c <CLCD_voidSendData+0x24a>
	else if (__tmp > 65535)
    12fe:	6b a1       	ldd	r22, Y+35	; 0x23
    1300:	7c a1       	ldd	r23, Y+36	; 0x24
    1302:	8d a1       	ldd	r24, Y+37	; 0x25
    1304:	9e a1       	ldd	r25, Y+38	; 0x26
    1306:	20 e0       	ldi	r18, 0x00	; 0
    1308:	3f ef       	ldi	r19, 0xFF	; 255
    130a:	4f e7       	ldi	r20, 0x7F	; 127
    130c:	57 e4       	ldi	r21, 0x47	; 71
    130e:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    1312:	18 16       	cp	r1, r24
    1314:	4c f5       	brge	.+82     	; 0x1368 <CLCD_voidSendData+0x236>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1316:	6f a1       	ldd	r22, Y+39	; 0x27
    1318:	78 a5       	ldd	r23, Y+40	; 0x28
    131a:	89 a5       	ldd	r24, Y+41	; 0x29
    131c:	9a a5       	ldd	r25, Y+42	; 0x2a
    131e:	20 e0       	ldi	r18, 0x00	; 0
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	40 e2       	ldi	r20, 0x20	; 32
    1324:	51 e4       	ldi	r21, 0x41	; 65
    1326:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    132a:	dc 01       	movw	r26, r24
    132c:	cb 01       	movw	r24, r22
    132e:	bc 01       	movw	r22, r24
    1330:	cd 01       	movw	r24, r26
    1332:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1336:	dc 01       	movw	r26, r24
    1338:	cb 01       	movw	r24, r22
    133a:	9a a3       	std	Y+34, r25	; 0x22
    133c:	89 a3       	std	Y+33, r24	; 0x21
    133e:	0f c0       	rjmp	.+30     	; 0x135e <CLCD_voidSendData+0x22c>
    1340:	88 ec       	ldi	r24, 0xC8	; 200
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	98 a3       	std	Y+32, r25	; 0x20
    1346:	8f 8f       	std	Y+31, r24	; 0x1f
    1348:	8f 8d       	ldd	r24, Y+31	; 0x1f
    134a:	98 a1       	ldd	r25, Y+32	; 0x20
    134c:	01 97       	sbiw	r24, 0x01	; 1
    134e:	f1 f7       	brne	.-4      	; 0x134c <CLCD_voidSendData+0x21a>
    1350:	98 a3       	std	Y+32, r25	; 0x20
    1352:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1354:	89 a1       	ldd	r24, Y+33	; 0x21
    1356:	9a a1       	ldd	r25, Y+34	; 0x22
    1358:	01 97       	sbiw	r24, 0x01	; 1
    135a:	9a a3       	std	Y+34, r25	; 0x22
    135c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    135e:	89 a1       	ldd	r24, Y+33	; 0x21
    1360:	9a a1       	ldd	r25, Y+34	; 0x22
    1362:	00 97       	sbiw	r24, 0x00	; 0
    1364:	69 f7       	brne	.-38     	; 0x1340 <CLCD_voidSendData+0x20e>
    1366:	14 c0       	rjmp	.+40     	; 0x1390 <CLCD_voidSendData+0x25e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1368:	6b a1       	ldd	r22, Y+35	; 0x23
    136a:	7c a1       	ldd	r23, Y+36	; 0x24
    136c:	8d a1       	ldd	r24, Y+37	; 0x25
    136e:	9e a1       	ldd	r25, Y+38	; 0x26
    1370:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1374:	dc 01       	movw	r26, r24
    1376:	cb 01       	movw	r24, r22
    1378:	9a a3       	std	Y+34, r25	; 0x22
    137a:	89 a3       	std	Y+33, r24	; 0x21
    137c:	89 a1       	ldd	r24, Y+33	; 0x21
    137e:	9a a1       	ldd	r25, Y+34	; 0x22
    1380:	9e 8f       	std	Y+30, r25	; 0x1e
    1382:	8d 8f       	std	Y+29, r24	; 0x1d
    1384:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1386:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1388:	01 97       	sbiw	r24, 0x01	; 1
    138a:	f1 f7       	brne	.-4      	; 0x1388 <CLCD_voidSendData+0x256>
    138c:	9e 8f       	std	Y+30, r25	; 0x1e
    138e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);
#if DRIVER_PURPOUSE == PROTEUS
	Local_u8Data = ((Copy_u8Data <<4) |DIO_u8AndWithPort(CLCD_DATA_PORT, CLCD_DATA_PORT_PROTEUS_MASK));
#elif DRIVER_PURPOUSE == ATMEGA_KIT
	Local_u8Data = ((Copy_u8Data <<3) |DIO_u8AndWithPort(CLCD_DATA_PORT, CLCD_DATA_PORT_ATMEGA_KIT_MASK));
    1390:	8a ad       	ldd	r24, Y+58	; 0x3a
    1392:	88 2f       	mov	r24, r24
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	88 0f       	add	r24, r24
    1398:	99 1f       	adc	r25, r25
    139a:	88 0f       	add	r24, r24
    139c:	99 1f       	adc	r25, r25
    139e:	88 0f       	add	r24, r24
    13a0:	99 1f       	adc	r25, r25
    13a2:	18 2f       	mov	r17, r24
    13a4:	80 e0       	ldi	r24, 0x00	; 0
    13a6:	67 e8       	ldi	r22, 0x87	; 135
    13a8:	0e 94 57 0f 	call	0x1eae	; 0x1eae <DIO_u8AndWithPort>
    13ac:	81 2b       	or	r24, r17
    13ae:	89 af       	std	Y+57, r24	; 0x39
#endif
	DIO_u8SetPortValue(CLCD_DATA_PORT,Local_u8Data);
    13b0:	80 e0       	ldi	r24, 0x00	; 0
    13b2:	69 ad       	ldd	r22, Y+57	; 0x39
    13b4:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <DIO_u8SetPortValue>

	/*Send Enable pulse */
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    13b8:	80 e0       	ldi	r24, 0x00	; 0
    13ba:	62 e0       	ldi	r22, 0x02	; 2
    13bc:	41 e0       	ldi	r20, 0x01	; 1
    13be:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <DIO_u8SetPinValue>
    13c2:	80 e0       	ldi	r24, 0x00	; 0
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	a0 e0       	ldi	r26, 0x00	; 0
    13c8:	b0 e4       	ldi	r27, 0x40	; 64
    13ca:	89 8f       	std	Y+25, r24	; 0x19
    13cc:	9a 8f       	std	Y+26, r25	; 0x1a
    13ce:	ab 8f       	std	Y+27, r26	; 0x1b
    13d0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13d2:	69 8d       	ldd	r22, Y+25	; 0x19
    13d4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13da:	20 e0       	ldi	r18, 0x00	; 0
    13dc:	30 e0       	ldi	r19, 0x00	; 0
    13de:	4a ef       	ldi	r20, 0xFA	; 250
    13e0:	54 e4       	ldi	r21, 0x44	; 68
    13e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13e6:	dc 01       	movw	r26, r24
    13e8:	cb 01       	movw	r24, r22
    13ea:	8d 8b       	std	Y+21, r24	; 0x15
    13ec:	9e 8b       	std	Y+22, r25	; 0x16
    13ee:	af 8b       	std	Y+23, r26	; 0x17
    13f0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    13f2:	6d 89       	ldd	r22, Y+21	; 0x15
    13f4:	7e 89       	ldd	r23, Y+22	; 0x16
    13f6:	8f 89       	ldd	r24, Y+23	; 0x17
    13f8:	98 8d       	ldd	r25, Y+24	; 0x18
    13fa:	20 e0       	ldi	r18, 0x00	; 0
    13fc:	30 e0       	ldi	r19, 0x00	; 0
    13fe:	40 e8       	ldi	r20, 0x80	; 128
    1400:	5f e3       	ldi	r21, 0x3F	; 63
    1402:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    1406:	88 23       	and	r24, r24
    1408:	2c f4       	brge	.+10     	; 0x1414 <CLCD_voidSendData+0x2e2>
		__ticks = 1;
    140a:	81 e0       	ldi	r24, 0x01	; 1
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	9c 8b       	std	Y+20, r25	; 0x14
    1410:	8b 8b       	std	Y+19, r24	; 0x13
    1412:	3f c0       	rjmp	.+126    	; 0x1492 <CLCD_voidSendData+0x360>
	else if (__tmp > 65535)
    1414:	6d 89       	ldd	r22, Y+21	; 0x15
    1416:	7e 89       	ldd	r23, Y+22	; 0x16
    1418:	8f 89       	ldd	r24, Y+23	; 0x17
    141a:	98 8d       	ldd	r25, Y+24	; 0x18
    141c:	20 e0       	ldi	r18, 0x00	; 0
    141e:	3f ef       	ldi	r19, 0xFF	; 255
    1420:	4f e7       	ldi	r20, 0x7F	; 127
    1422:	57 e4       	ldi	r21, 0x47	; 71
    1424:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    1428:	18 16       	cp	r1, r24
    142a:	4c f5       	brge	.+82     	; 0x147e <CLCD_voidSendData+0x34c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    142c:	69 8d       	ldd	r22, Y+25	; 0x19
    142e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1430:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1432:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1434:	20 e0       	ldi	r18, 0x00	; 0
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	40 e2       	ldi	r20, 0x20	; 32
    143a:	51 e4       	ldi	r21, 0x41	; 65
    143c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1440:	dc 01       	movw	r26, r24
    1442:	cb 01       	movw	r24, r22
    1444:	bc 01       	movw	r22, r24
    1446:	cd 01       	movw	r24, r26
    1448:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    144c:	dc 01       	movw	r26, r24
    144e:	cb 01       	movw	r24, r22
    1450:	9c 8b       	std	Y+20, r25	; 0x14
    1452:	8b 8b       	std	Y+19, r24	; 0x13
    1454:	0f c0       	rjmp	.+30     	; 0x1474 <CLCD_voidSendData+0x342>
    1456:	88 ec       	ldi	r24, 0xC8	; 200
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	9a 8b       	std	Y+18, r25	; 0x12
    145c:	89 8b       	std	Y+17, r24	; 0x11
    145e:	89 89       	ldd	r24, Y+17	; 0x11
    1460:	9a 89       	ldd	r25, Y+18	; 0x12
    1462:	01 97       	sbiw	r24, 0x01	; 1
    1464:	f1 f7       	brne	.-4      	; 0x1462 <CLCD_voidSendData+0x330>
    1466:	9a 8b       	std	Y+18, r25	; 0x12
    1468:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    146a:	8b 89       	ldd	r24, Y+19	; 0x13
    146c:	9c 89       	ldd	r25, Y+20	; 0x14
    146e:	01 97       	sbiw	r24, 0x01	; 1
    1470:	9c 8b       	std	Y+20, r25	; 0x14
    1472:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1474:	8b 89       	ldd	r24, Y+19	; 0x13
    1476:	9c 89       	ldd	r25, Y+20	; 0x14
    1478:	00 97       	sbiw	r24, 0x00	; 0
    147a:	69 f7       	brne	.-38     	; 0x1456 <CLCD_voidSendData+0x324>
    147c:	14 c0       	rjmp	.+40     	; 0x14a6 <CLCD_voidSendData+0x374>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    147e:	6d 89       	ldd	r22, Y+21	; 0x15
    1480:	7e 89       	ldd	r23, Y+22	; 0x16
    1482:	8f 89       	ldd	r24, Y+23	; 0x17
    1484:	98 8d       	ldd	r25, Y+24	; 0x18
    1486:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    148a:	dc 01       	movw	r26, r24
    148c:	cb 01       	movw	r24, r22
    148e:	9c 8b       	std	Y+20, r25	; 0x14
    1490:	8b 8b       	std	Y+19, r24	; 0x13
    1492:	8b 89       	ldd	r24, Y+19	; 0x13
    1494:	9c 89       	ldd	r25, Y+20	; 0x14
    1496:	98 8b       	std	Y+16, r25	; 0x10
    1498:	8f 87       	std	Y+15, r24	; 0x0f
    149a:	8f 85       	ldd	r24, Y+15	; 0x0f
    149c:	98 89       	ldd	r25, Y+16	; 0x10
    149e:	01 97       	sbiw	r24, 0x01	; 1
    14a0:	f1 f7       	brne	.-4      	; 0x149e <CLCD_voidSendData+0x36c>
    14a2:	98 8b       	std	Y+16, r25	; 0x10
    14a4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    14a6:	80 e0       	ldi	r24, 0x00	; 0
    14a8:	62 e0       	ldi	r22, 0x02	; 2
    14aa:	40 e0       	ldi	r20, 0x00	; 0
    14ac:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <DIO_u8SetPinValue>
    14b0:	80 e0       	ldi	r24, 0x00	; 0
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	a0 ea       	ldi	r26, 0xA0	; 160
    14b6:	b0 e4       	ldi	r27, 0x40	; 64
    14b8:	8b 87       	std	Y+11, r24	; 0x0b
    14ba:	9c 87       	std	Y+12, r25	; 0x0c
    14bc:	ad 87       	std	Y+13, r26	; 0x0d
    14be:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    14c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    14c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    14c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    14c8:	20 e0       	ldi	r18, 0x00	; 0
    14ca:	30 e0       	ldi	r19, 0x00	; 0
    14cc:	4a ef       	ldi	r20, 0xFA	; 250
    14ce:	54 e4       	ldi	r21, 0x44	; 68
    14d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14d4:	dc 01       	movw	r26, r24
    14d6:	cb 01       	movw	r24, r22
    14d8:	8f 83       	std	Y+7, r24	; 0x07
    14da:	98 87       	std	Y+8, r25	; 0x08
    14dc:	a9 87       	std	Y+9, r26	; 0x09
    14de:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14e0:	6f 81       	ldd	r22, Y+7	; 0x07
    14e2:	78 85       	ldd	r23, Y+8	; 0x08
    14e4:	89 85       	ldd	r24, Y+9	; 0x09
    14e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    14e8:	20 e0       	ldi	r18, 0x00	; 0
    14ea:	30 e0       	ldi	r19, 0x00	; 0
    14ec:	40 e8       	ldi	r20, 0x80	; 128
    14ee:	5f e3       	ldi	r21, 0x3F	; 63
    14f0:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    14f4:	88 23       	and	r24, r24
    14f6:	2c f4       	brge	.+10     	; 0x1502 <CLCD_voidSendData+0x3d0>
		__ticks = 1;
    14f8:	81 e0       	ldi	r24, 0x01	; 1
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	9e 83       	std	Y+6, r25	; 0x06
    14fe:	8d 83       	std	Y+5, r24	; 0x05
    1500:	3f c0       	rjmp	.+126    	; 0x1580 <CLCD_voidSendData+0x44e>
	else if (__tmp > 65535)
    1502:	6f 81       	ldd	r22, Y+7	; 0x07
    1504:	78 85       	ldd	r23, Y+8	; 0x08
    1506:	89 85       	ldd	r24, Y+9	; 0x09
    1508:	9a 85       	ldd	r25, Y+10	; 0x0a
    150a:	20 e0       	ldi	r18, 0x00	; 0
    150c:	3f ef       	ldi	r19, 0xFF	; 255
    150e:	4f e7       	ldi	r20, 0x7F	; 127
    1510:	57 e4       	ldi	r21, 0x47	; 71
    1512:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    1516:	18 16       	cp	r1, r24
    1518:	4c f5       	brge	.+82     	; 0x156c <CLCD_voidSendData+0x43a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    151a:	6b 85       	ldd	r22, Y+11	; 0x0b
    151c:	7c 85       	ldd	r23, Y+12	; 0x0c
    151e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1520:	9e 85       	ldd	r25, Y+14	; 0x0e
    1522:	20 e0       	ldi	r18, 0x00	; 0
    1524:	30 e0       	ldi	r19, 0x00	; 0
    1526:	40 e2       	ldi	r20, 0x20	; 32
    1528:	51 e4       	ldi	r21, 0x41	; 65
    152a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    152e:	dc 01       	movw	r26, r24
    1530:	cb 01       	movw	r24, r22
    1532:	bc 01       	movw	r22, r24
    1534:	cd 01       	movw	r24, r26
    1536:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    153a:	dc 01       	movw	r26, r24
    153c:	cb 01       	movw	r24, r22
    153e:	9e 83       	std	Y+6, r25	; 0x06
    1540:	8d 83       	std	Y+5, r24	; 0x05
    1542:	0f c0       	rjmp	.+30     	; 0x1562 <CLCD_voidSendData+0x430>
    1544:	88 ec       	ldi	r24, 0xC8	; 200
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	9c 83       	std	Y+4, r25	; 0x04
    154a:	8b 83       	std	Y+3, r24	; 0x03
    154c:	8b 81       	ldd	r24, Y+3	; 0x03
    154e:	9c 81       	ldd	r25, Y+4	; 0x04
    1550:	01 97       	sbiw	r24, 0x01	; 1
    1552:	f1 f7       	brne	.-4      	; 0x1550 <CLCD_voidSendData+0x41e>
    1554:	9c 83       	std	Y+4, r25	; 0x04
    1556:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1558:	8d 81       	ldd	r24, Y+5	; 0x05
    155a:	9e 81       	ldd	r25, Y+6	; 0x06
    155c:	01 97       	sbiw	r24, 0x01	; 1
    155e:	9e 83       	std	Y+6, r25	; 0x06
    1560:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1562:	8d 81       	ldd	r24, Y+5	; 0x05
    1564:	9e 81       	ldd	r25, Y+6	; 0x06
    1566:	00 97       	sbiw	r24, 0x00	; 0
    1568:	69 f7       	brne	.-38     	; 0x1544 <CLCD_voidSendData+0x412>
    156a:	14 c0       	rjmp	.+40     	; 0x1594 <CLCD_voidSendData+0x462>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    156c:	6f 81       	ldd	r22, Y+7	; 0x07
    156e:	78 85       	ldd	r23, Y+8	; 0x08
    1570:	89 85       	ldd	r24, Y+9	; 0x09
    1572:	9a 85       	ldd	r25, Y+10	; 0x0a
    1574:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1578:	dc 01       	movw	r26, r24
    157a:	cb 01       	movw	r24, r22
    157c:	9e 83       	std	Y+6, r25	; 0x06
    157e:	8d 83       	std	Y+5, r24	; 0x05
    1580:	8d 81       	ldd	r24, Y+5	; 0x05
    1582:	9e 81       	ldd	r25, Y+6	; 0x06
    1584:	9a 83       	std	Y+2, r25	; 0x02
    1586:	89 83       	std	Y+1, r24	; 0x01
    1588:	89 81       	ldd	r24, Y+1	; 0x01
    158a:	9a 81       	ldd	r25, Y+2	; 0x02
    158c:	01 97       	sbiw	r24, 0x01	; 1
    158e:	f1 f7       	brne	.-4      	; 0x158c <CLCD_voidSendData+0x45a>
    1590:	9a 83       	std	Y+2, r25	; 0x02
    1592:	89 83       	std	Y+1, r24	; 0x01



#endif

}
    1594:	ea 96       	adiw	r28, 0x3a	; 58
    1596:	0f b6       	in	r0, 0x3f	; 63
    1598:	f8 94       	cli
    159a:	de bf       	out	0x3e, r29	; 62
    159c:	0f be       	out	0x3f, r0	; 63
    159e:	cd bf       	out	0x3d, r28	; 61
    15a0:	cf 91       	pop	r28
    15a2:	df 91       	pop	r29
    15a4:	1f 91       	pop	r17
    15a6:	08 95       	ret

000015a8 <CLCD_voidInit>:

void CLCD_voidInit(void)
{
    15a8:	df 93       	push	r29
    15aa:	cf 93       	push	r28
    15ac:	cd b7       	in	r28, 0x3d	; 61
    15ae:	de b7       	in	r29, 0x3e	; 62
    15b0:	2e 97       	sbiw	r28, 0x0e	; 14
    15b2:	0f b6       	in	r0, 0x3f	; 63
    15b4:	f8 94       	cli
    15b6:	de bf       	out	0x3e, r29	; 62
    15b8:	0f be       	out	0x3f, r0	; 63
    15ba:	cd bf       	out	0x3d, r28	; 61
    15bc:	80 e0       	ldi	r24, 0x00	; 0
    15be:	90 e0       	ldi	r25, 0x00	; 0
    15c0:	a0 e2       	ldi	r26, 0x20	; 32
    15c2:	b2 e4       	ldi	r27, 0x42	; 66
    15c4:	8b 87       	std	Y+11, r24	; 0x0b
    15c6:	9c 87       	std	Y+12, r25	; 0x0c
    15c8:	ad 87       	std	Y+13, r26	; 0x0d
    15ca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    15ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    15d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    15d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    15d4:	20 e0       	ldi	r18, 0x00	; 0
    15d6:	30 e0       	ldi	r19, 0x00	; 0
    15d8:	4a ef       	ldi	r20, 0xFA	; 250
    15da:	54 e4       	ldi	r21, 0x44	; 68
    15dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15e0:	dc 01       	movw	r26, r24
    15e2:	cb 01       	movw	r24, r22
    15e4:	8f 83       	std	Y+7, r24	; 0x07
    15e6:	98 87       	std	Y+8, r25	; 0x08
    15e8:	a9 87       	std	Y+9, r26	; 0x09
    15ea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    15ec:	6f 81       	ldd	r22, Y+7	; 0x07
    15ee:	78 85       	ldd	r23, Y+8	; 0x08
    15f0:	89 85       	ldd	r24, Y+9	; 0x09
    15f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    15f4:	20 e0       	ldi	r18, 0x00	; 0
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	40 e8       	ldi	r20, 0x80	; 128
    15fa:	5f e3       	ldi	r21, 0x3F	; 63
    15fc:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    1600:	88 23       	and	r24, r24
    1602:	2c f4       	brge	.+10     	; 0x160e <CLCD_voidInit+0x66>
		__ticks = 1;
    1604:	81 e0       	ldi	r24, 0x01	; 1
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	9e 83       	std	Y+6, r25	; 0x06
    160a:	8d 83       	std	Y+5, r24	; 0x05
    160c:	3f c0       	rjmp	.+126    	; 0x168c <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
    160e:	6f 81       	ldd	r22, Y+7	; 0x07
    1610:	78 85       	ldd	r23, Y+8	; 0x08
    1612:	89 85       	ldd	r24, Y+9	; 0x09
    1614:	9a 85       	ldd	r25, Y+10	; 0x0a
    1616:	20 e0       	ldi	r18, 0x00	; 0
    1618:	3f ef       	ldi	r19, 0xFF	; 255
    161a:	4f e7       	ldi	r20, 0x7F	; 127
    161c:	57 e4       	ldi	r21, 0x47	; 71
    161e:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    1622:	18 16       	cp	r1, r24
    1624:	4c f5       	brge	.+82     	; 0x1678 <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1626:	6b 85       	ldd	r22, Y+11	; 0x0b
    1628:	7c 85       	ldd	r23, Y+12	; 0x0c
    162a:	8d 85       	ldd	r24, Y+13	; 0x0d
    162c:	9e 85       	ldd	r25, Y+14	; 0x0e
    162e:	20 e0       	ldi	r18, 0x00	; 0
    1630:	30 e0       	ldi	r19, 0x00	; 0
    1632:	40 e2       	ldi	r20, 0x20	; 32
    1634:	51 e4       	ldi	r21, 0x41	; 65
    1636:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    163a:	dc 01       	movw	r26, r24
    163c:	cb 01       	movw	r24, r22
    163e:	bc 01       	movw	r22, r24
    1640:	cd 01       	movw	r24, r26
    1642:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1646:	dc 01       	movw	r26, r24
    1648:	cb 01       	movw	r24, r22
    164a:	9e 83       	std	Y+6, r25	; 0x06
    164c:	8d 83       	std	Y+5, r24	; 0x05
    164e:	0f c0       	rjmp	.+30     	; 0x166e <CLCD_voidInit+0xc6>
    1650:	88 ec       	ldi	r24, 0xC8	; 200
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	9c 83       	std	Y+4, r25	; 0x04
    1656:	8b 83       	std	Y+3, r24	; 0x03
    1658:	8b 81       	ldd	r24, Y+3	; 0x03
    165a:	9c 81       	ldd	r25, Y+4	; 0x04
    165c:	01 97       	sbiw	r24, 0x01	; 1
    165e:	f1 f7       	brne	.-4      	; 0x165c <CLCD_voidInit+0xb4>
    1660:	9c 83       	std	Y+4, r25	; 0x04
    1662:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1664:	8d 81       	ldd	r24, Y+5	; 0x05
    1666:	9e 81       	ldd	r25, Y+6	; 0x06
    1668:	01 97       	sbiw	r24, 0x01	; 1
    166a:	9e 83       	std	Y+6, r25	; 0x06
    166c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    166e:	8d 81       	ldd	r24, Y+5	; 0x05
    1670:	9e 81       	ldd	r25, Y+6	; 0x06
    1672:	00 97       	sbiw	r24, 0x00	; 0
    1674:	69 f7       	brne	.-38     	; 0x1650 <CLCD_voidInit+0xa8>
    1676:	14 c0       	rjmp	.+40     	; 0x16a0 <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1678:	6f 81       	ldd	r22, Y+7	; 0x07
    167a:	78 85       	ldd	r23, Y+8	; 0x08
    167c:	89 85       	ldd	r24, Y+9	; 0x09
    167e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1680:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1684:	dc 01       	movw	r26, r24
    1686:	cb 01       	movw	r24, r22
    1688:	9e 83       	std	Y+6, r25	; 0x06
    168a:	8d 83       	std	Y+5, r24	; 0x05
    168c:	8d 81       	ldd	r24, Y+5	; 0x05
    168e:	9e 81       	ldd	r25, Y+6	; 0x06
    1690:	9a 83       	std	Y+2, r25	; 0x02
    1692:	89 83       	std	Y+1, r24	; 0x01
    1694:	89 81       	ldd	r24, Y+1	; 0x01
    1696:	9a 81       	ldd	r25, Y+2	; 0x02
    1698:	01 97       	sbiw	r24, 0x01	; 1
    169a:	f1 f7       	brne	.-4      	; 0x1698 <CLCD_voidInit+0xf0>
    169c:	9a 83       	std	Y+2, r25	; 0x02
    169e:	89 83       	std	Y+1, r24	; 0x01
	C_LCD_voidSendCommand(0x01); /* 1 or 0x01 or 0b00000001*/

#elif   MODE_SELECT ==_4_BIT_MODE

	/* Function set command : 2 lines , 5*8 font size */
	C_LCD_voidSendCommand(0x33);
    16a0:	83 e3       	ldi	r24, 0x33	; 51
    16a2:	0e 94 80 06 	call	0xd00	; 0xd00 <C_LCD_voidSendCommand>
	C_LCD_voidSendCommand(0x32);
    16a6:	82 e3       	ldi	r24, 0x32	; 50
    16a8:	0e 94 80 06 	call	0xd00	; 0xd00 <C_LCD_voidSendCommand>
	C_LCD_voidSendCommand(0x28);   /* 0bNFXXXXXX  --> N: no of lines F: font size*/
    16ac:	88 e2       	ldi	r24, 0x28	; 40
    16ae:	0e 94 80 06 	call	0xd00	; 0xd00 <C_LCD_voidSendCommand>


	/*Display on off control : disable enable , disable cursor , no blink cursor*/
	C_LCD_voidSendCommand(0x0C);
    16b2:	8c e0       	ldi	r24, 0x0C	; 12
    16b4:	0e 94 80 06 	call	0xd00	; 0xd00 <C_LCD_voidSendCommand>
	C_LCD_voidSendCommand(0x02);
    16b8:	82 e0       	ldi	r24, 0x02	; 2
    16ba:	0e 94 80 06 	call	0xd00	; 0xd00 <C_LCD_voidSendCommand>

	C_LCD_voidSendCommand(0x06);
    16be:	86 e0       	ldi	r24, 0x06	; 6
    16c0:	0e 94 80 06 	call	0xd00	; 0xd00 <C_LCD_voidSendCommand>

	/* Clear display */
	C_LCD_voidSendCommand(0x01);
    16c4:	81 e0       	ldi	r24, 0x01	; 1
    16c6:	0e 94 80 06 	call	0xd00	; 0xd00 <C_LCD_voidSendCommand>


#endif


}
    16ca:	2e 96       	adiw	r28, 0x0e	; 14
    16cc:	0f b6       	in	r0, 0x3f	; 63
    16ce:	f8 94       	cli
    16d0:	de bf       	out	0x3e, r29	; 62
    16d2:	0f be       	out	0x3f, r0	; 63
    16d4:	cd bf       	out	0x3d, r28	; 61
    16d6:	cf 91       	pop	r28
    16d8:	df 91       	pop	r29
    16da:	08 95       	ret

000016dc <CLCD_voidSendString>:

void CLCD_voidSendString(const char* Copy_pcString )
{
    16dc:	df 93       	push	r29
    16de:	cf 93       	push	r28
    16e0:	00 d0       	rcall	.+0      	; 0x16e2 <CLCD_voidSendString+0x6>
    16e2:	0f 92       	push	r0
    16e4:	cd b7       	in	r28, 0x3d	; 61
    16e6:	de b7       	in	r29, 0x3e	; 62
    16e8:	9b 83       	std	Y+3, r25	; 0x03
    16ea:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Counter = 0;
    16ec:	19 82       	std	Y+1, r1	; 0x01
    16ee:	0e c0       	rjmp	.+28     	; 0x170c <CLCD_voidSendString+0x30>
	while (Copy_pcString[Local_u8Counter] != NULL)
	{
		CLCD_voidSendData(Copy_pcString[Local_u8Counter]);
    16f0:	89 81       	ldd	r24, Y+1	; 0x01
    16f2:	28 2f       	mov	r18, r24
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	8a 81       	ldd	r24, Y+2	; 0x02
    16f8:	9b 81       	ldd	r25, Y+3	; 0x03
    16fa:	fc 01       	movw	r30, r24
    16fc:	e2 0f       	add	r30, r18
    16fe:	f3 1f       	adc	r31, r19
    1700:	80 81       	ld	r24, Z
    1702:	0e 94 99 08 	call	0x1132	; 0x1132 <CLCD_voidSendData>
		Local_u8Counter++;
    1706:	89 81       	ldd	r24, Y+1	; 0x01
    1708:	8f 5f       	subi	r24, 0xFF	; 255
    170a:	89 83       	std	Y+1, r24	; 0x01
}

void CLCD_voidSendString(const char* Copy_pcString )
{
	u8 Local_u8Counter = 0;
	while (Copy_pcString[Local_u8Counter] != NULL)
    170c:	89 81       	ldd	r24, Y+1	; 0x01
    170e:	28 2f       	mov	r18, r24
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	8a 81       	ldd	r24, Y+2	; 0x02
    1714:	9b 81       	ldd	r25, Y+3	; 0x03
    1716:	fc 01       	movw	r30, r24
    1718:	e2 0f       	add	r30, r18
    171a:	f3 1f       	adc	r31, r19
    171c:	80 81       	ld	r24, Z
    171e:	88 23       	and	r24, r24
    1720:	39 f7       	brne	.-50     	; 0x16f0 <CLCD_voidSendString+0x14>
	{
		CLCD_voidSendData(Copy_pcString[Local_u8Counter]);
		Local_u8Counter++;
	}
}
    1722:	0f 90       	pop	r0
    1724:	0f 90       	pop	r0
    1726:	0f 90       	pop	r0
    1728:	cf 91       	pop	r28
    172a:	df 91       	pop	r29
    172c:	08 95       	ret

0000172e <CLCD_voidGoToXY>:

void CLCD_voidGoToXY(u8 Copy_u8Xpos, u8 Copy_u8Ypos)
{
    172e:	df 93       	push	r29
    1730:	cf 93       	push	r28
    1732:	00 d0       	rcall	.+0      	; 0x1734 <CLCD_voidGoToXY+0x6>
    1734:	0f 92       	push	r0
    1736:	cd b7       	in	r28, 0x3d	; 61
    1738:	de b7       	in	r29, 0x3e	; 62
    173a:	8a 83       	std	Y+2, r24	; 0x02
    173c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Adress=0;
    173e:	19 82       	std	Y+1, r1	; 0x01
	Local_u8SetPositionY = Copy_u8Ypos;
    1740:	8b 81       	ldd	r24, Y+3	; 0x03
    1742:	80 93 7d 01 	sts	0x017D, r24
	Local_u8SetPositionX = Copy_u8Xpos;
    1746:	8a 81       	ldd	r24, Y+2	; 0x02
    1748:	80 93 7c 01 	sts	0x017C, r24
	if (Copy_u8Xpos == 0)                      // First Line
    174c:	8a 81       	ldd	r24, Y+2	; 0x02
    174e:	88 23       	and	r24, r24
    1750:	19 f4       	brne	.+6      	; 0x1758 <CLCD_voidGoToXY+0x2a>
	{
		Local_u8Adress = Copy_u8Ypos;
    1752:	8b 81       	ldd	r24, Y+3	; 0x03
    1754:	89 83       	std	Y+1, r24	; 0x01
    1756:	14 c0       	rjmp	.+40     	; 0x1780 <CLCD_voidGoToXY+0x52>
	}
	else if (Copy_u8Xpos == 1)                // Second Line
    1758:	8a 81       	ldd	r24, Y+2	; 0x02
    175a:	81 30       	cpi	r24, 0x01	; 1
    175c:	21 f4       	brne	.+8      	; 0x1766 <CLCD_voidGoToXY+0x38>
	{
		Local_u8Adress = Copy_u8Ypos+0x40;
    175e:	8b 81       	ldd	r24, Y+3	; 0x03
    1760:	80 5c       	subi	r24, 0xC0	; 192
    1762:	89 83       	std	Y+1, r24	; 0x01
    1764:	0d c0       	rjmp	.+26     	; 0x1780 <CLCD_voidGoToXY+0x52>
	}
	else if (Copy_u8Xpos == 2)                // Third Line
    1766:	8a 81       	ldd	r24, Y+2	; 0x02
    1768:	82 30       	cpi	r24, 0x02	; 2
    176a:	21 f4       	brne	.+8      	; 0x1774 <CLCD_voidGoToXY+0x46>
	{
		Local_u8Adress = Copy_u8Ypos+0x10;
    176c:	8b 81       	ldd	r24, Y+3	; 0x03
    176e:	80 5f       	subi	r24, 0xF0	; 240
    1770:	89 83       	std	Y+1, r24	; 0x01
    1772:	06 c0       	rjmp	.+12     	; 0x1780 <CLCD_voidGoToXY+0x52>
	}
	else if (Copy_u8Xpos == 3)                // Fourth Line
    1774:	8a 81       	ldd	r24, Y+2	; 0x02
    1776:	83 30       	cpi	r24, 0x03	; 3
    1778:	19 f4       	brne	.+6      	; 0x1780 <CLCD_voidGoToXY+0x52>
	{
		Local_u8Adress = Copy_u8Ypos+0x50;
    177a:	8b 81       	ldd	r24, Y+3	; 0x03
    177c:	80 5b       	subi	r24, 0xB0	; 176
    177e:	89 83       	std	Y+1, r24	; 0x01
	}

	C_LCD_voidSendCommand(Local_u8Adress+128);
    1780:	89 81       	ldd	r24, Y+1	; 0x01
    1782:	80 58       	subi	r24, 0x80	; 128
    1784:	0e 94 80 06 	call	0xd00	; 0xd00 <C_LCD_voidSendCommand>



}
    1788:	0f 90       	pop	r0
    178a:	0f 90       	pop	r0
    178c:	0f 90       	pop	r0
    178e:	cf 91       	pop	r28
    1790:	df 91       	pop	r29
    1792:	08 95       	ret

00001794 <CLCD_voidWriteSpecialCharacter>:

void CLCD_voidWriteSpecialCharacter(u8* Copy_pu8Pattern, u8 Copy_u8PatternNumber, u8 Copy_u8XPos, u8 Copy_u8YPos)
{
    1794:	df 93       	push	r29
    1796:	cf 93       	push	r28
    1798:	cd b7       	in	r28, 0x3d	; 61
    179a:	de b7       	in	r29, 0x3e	; 62
    179c:	27 97       	sbiw	r28, 0x07	; 7
    179e:	0f b6       	in	r0, 0x3f	; 63
    17a0:	f8 94       	cli
    17a2:	de bf       	out	0x3e, r29	; 62
    17a4:	0f be       	out	0x3f, r0	; 63
    17a6:	cd bf       	out	0x3d, r28	; 61
    17a8:	9c 83       	std	Y+4, r25	; 0x04
    17aa:	8b 83       	std	Y+3, r24	; 0x03
    17ac:	6d 83       	std	Y+5, r22	; 0x05
    17ae:	4e 83       	std	Y+6, r20	; 0x06
    17b0:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8CGRAMAddress= 0, Local_u8Iterator;
    17b2:	1a 82       	std	Y+2, r1	; 0x02
	/* Calculate the CGRAM address whose each block is 8 bytes */
	Local_u8CGRAMAddress =Copy_u8PatternNumber*8;
    17b4:	8d 81       	ldd	r24, Y+5	; 0x05
    17b6:	88 2f       	mov	r24, r24
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	88 0f       	add	r24, r24
    17bc:	99 1f       	adc	r25, r25
    17be:	88 0f       	add	r24, r24
    17c0:	99 1f       	adc	r25, r25
    17c2:	88 0f       	add	r24, r24
    17c4:	99 1f       	adc	r25, r25
    17c6:	8a 83       	std	Y+2, r24	; 0x02

	/* Send CGRAM Address command to LCD, with setting bit 6, clearing bit 7*/
	C_LCD_voidSendCommand(Local_u8CGRAMAddress+64);
    17c8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ca:	80 5c       	subi	r24, 0xC0	; 192
    17cc:	0e 94 80 06 	call	0xd00	; 0xd00 <C_LCD_voidSendCommand>

	/* Write the pattern into CGRAM */

	for (Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++)
    17d0:	19 82       	std	Y+1, r1	; 0x01
    17d2:	0e c0       	rjmp	.+28     	; 0x17f0 <CLCD_voidWriteSpecialCharacter+0x5c>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Iterator]);
    17d4:	89 81       	ldd	r24, Y+1	; 0x01
    17d6:	28 2f       	mov	r18, r24
    17d8:	30 e0       	ldi	r19, 0x00	; 0
    17da:	8b 81       	ldd	r24, Y+3	; 0x03
    17dc:	9c 81       	ldd	r25, Y+4	; 0x04
    17de:	fc 01       	movw	r30, r24
    17e0:	e2 0f       	add	r30, r18
    17e2:	f3 1f       	adc	r31, r19
    17e4:	80 81       	ld	r24, Z
    17e6:	0e 94 99 08 	call	0x1132	; 0x1132 <CLCD_voidSendData>
	/* Send CGRAM Address command to LCD, with setting bit 6, clearing bit 7*/
	C_LCD_voidSendCommand(Local_u8CGRAMAddress+64);

	/* Write the pattern into CGRAM */

	for (Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++)
    17ea:	89 81       	ldd	r24, Y+1	; 0x01
    17ec:	8f 5f       	subi	r24, 0xFF	; 255
    17ee:	89 83       	std	Y+1, r24	; 0x01
    17f0:	89 81       	ldd	r24, Y+1	; 0x01
    17f2:	88 30       	cpi	r24, 0x08	; 8
    17f4:	78 f3       	brcs	.-34     	; 0x17d4 <CLCD_voidWriteSpecialCharacter+0x40>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Iterator]);
	}

	/* go back to the DDRAM to display the Pattern*/
	CLCD_voidGoToXY(Copy_u8XPos,Copy_u8YPos);
    17f6:	8e 81       	ldd	r24, Y+6	; 0x06
    17f8:	6f 81       	ldd	r22, Y+7	; 0x07
    17fa:	0e 94 97 0b 	call	0x172e	; 0x172e <CLCD_voidGoToXY>
	/* Display the pattern written in the CGRAM*/
	CLCD_voidSendData(Copy_u8PatternNumber);
    17fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1800:	0e 94 99 08 	call	0x1132	; 0x1132 <CLCD_voidSendData>
}
    1804:	27 96       	adiw	r28, 0x07	; 7
    1806:	0f b6       	in	r0, 0x3f	; 63
    1808:	f8 94       	cli
    180a:	de bf       	out	0x3e, r29	; 62
    180c:	0f be       	out	0x3f, r0	; 63
    180e:	cd bf       	out	0x3d, r28	; 61
    1810:	cf 91       	pop	r28
    1812:	df 91       	pop	r29
    1814:	08 95       	ret

00001816 <CLCD_VoidWriteNumber>:

void CLCD_VoidWriteNumber(f32 Copy_u32Number)
{
    1816:	0f 93       	push	r16
    1818:	1f 93       	push	r17
    181a:	df 93       	push	r29
    181c:	cf 93       	push	r28
    181e:	cd b7       	in	r28, 0x3d	; 61
    1820:	de b7       	in	r29, 0x3e	; 62
    1822:	6d 97       	sbiw	r28, 0x1d	; 29
    1824:	0f b6       	in	r0, 0x3f	; 63
    1826:	f8 94       	cli
    1828:	de bf       	out	0x3e, r29	; 62
    182a:	0f be       	out	0x3f, r0	; 63
    182c:	cd bf       	out	0x3d, r28	; 61
    182e:	6a 8f       	std	Y+26, r22	; 0x1a
    1830:	7b 8f       	std	Y+27, r23	; 0x1b
    1832:	8c 8f       	std	Y+28, r24	; 0x1c
    1834:	9d 8f       	std	Y+29, r25	; 0x1d
	s32 Local_s32Number = Copy_u32Number;
    1836:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1838:	7b 8d       	ldd	r23, Y+27	; 0x1b
    183a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    183c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    183e:	0e 94 37 04 	call	0x86e	; 0x86e <__fixsfsi>
    1842:	dc 01       	movw	r26, r24
    1844:	cb 01       	movw	r24, r22
    1846:	8a 83       	std	Y+2, r24	; 0x02
    1848:	9b 83       	std	Y+3, r25	; 0x03
    184a:	ac 83       	std	Y+4, r26	; 0x04
    184c:	bd 83       	std	Y+5, r27	; 0x05

	if(Local_s32Number == 0)
    184e:	8a 81       	ldd	r24, Y+2	; 0x02
    1850:	9b 81       	ldd	r25, Y+3	; 0x03
    1852:	ac 81       	ldd	r26, Y+4	; 0x04
    1854:	bd 81       	ldd	r27, Y+5	; 0x05
    1856:	00 97       	sbiw	r24, 0x00	; 0
    1858:	a1 05       	cpc	r26, r1
    185a:	b1 05       	cpc	r27, r1
    185c:	21 f4       	brne	.+8      	; 0x1866 <CLCD_VoidWriteNumber+0x50>
	{
		CLCD_voidSendData('0');
    185e:	80 e3       	ldi	r24, 0x30	; 48
    1860:	0e 94 99 08 	call	0x1132	; 0x1132 <CLCD_voidSendData>
    1864:	18 c0       	rjmp	.+48     	; 0x1896 <CLCD_VoidWriteNumber+0x80>
	}
	else if (Local_s32Number <0)
    1866:	8a 81       	ldd	r24, Y+2	; 0x02
    1868:	9b 81       	ldd	r25, Y+3	; 0x03
    186a:	ac 81       	ldd	r26, Y+4	; 0x04
    186c:	bd 81       	ldd	r27, Y+5	; 0x05
    186e:	bb 23       	and	r27, r27
    1870:	94 f4       	brge	.+36     	; 0x1896 <CLCD_VoidWriteNumber+0x80>
	{
		CLCD_voidSendData('-');
    1872:	8d e2       	ldi	r24, 0x2D	; 45
    1874:	0e 94 99 08 	call	0x1132	; 0x1132 <CLCD_voidSendData>
		Local_s32Number = Local_s32Number *(-1);
    1878:	8a 81       	ldd	r24, Y+2	; 0x02
    187a:	9b 81       	ldd	r25, Y+3	; 0x03
    187c:	ac 81       	ldd	r26, Y+4	; 0x04
    187e:	bd 81       	ldd	r27, Y+5	; 0x05
    1880:	b0 95       	com	r27
    1882:	a0 95       	com	r26
    1884:	90 95       	com	r25
    1886:	81 95       	neg	r24
    1888:	9f 4f       	sbci	r25, 0xFF	; 255
    188a:	af 4f       	sbci	r26, 0xFF	; 255
    188c:	bf 4f       	sbci	r27, 0xFF	; 255
    188e:	8a 83       	std	Y+2, r24	; 0x02
    1890:	9b 83       	std	Y+3, r25	; 0x03
    1892:	ac 83       	std	Y+4, r26	; 0x04
    1894:	bd 83       	std	Y+5, r27	; 0x05

	}
	u8 Local_u8Array[20]={0};
    1896:	84 e1       	ldi	r24, 0x14	; 20
    1898:	fe 01       	movw	r30, r28
    189a:	36 96       	adiw	r30, 0x06	; 6
    189c:	df 01       	movw	r26, r30
    189e:	98 2f       	mov	r25, r24
    18a0:	1d 92       	st	X+, r1
    18a2:	9a 95       	dec	r25
    18a4:	e9 f7       	brne	.-6      	; 0x18a0 <CLCD_VoidWriteNumber+0x8a>
	s8 local_s8Counter =0;
    18a6:	19 82       	std	Y+1, r1	; 0x01
    18a8:	2f c0       	rjmp	.+94     	; 0x1908 <CLCD_VoidWriteNumber+0xf2>
	while (Local_s32Number != 0)
	{
		Local_u8Array[local_s8Counter]= Local_s32Number%10;
    18aa:	89 81       	ldd	r24, Y+1	; 0x01
    18ac:	08 2f       	mov	r16, r24
    18ae:	11 27       	eor	r17, r17
    18b0:	07 fd       	sbrc	r16, 7
    18b2:	10 95       	com	r17
    18b4:	8a 81       	ldd	r24, Y+2	; 0x02
    18b6:	9b 81       	ldd	r25, Y+3	; 0x03
    18b8:	ac 81       	ldd	r26, Y+4	; 0x04
    18ba:	bd 81       	ldd	r27, Y+5	; 0x05
    18bc:	2a e0       	ldi	r18, 0x0A	; 10
    18be:	30 e0       	ldi	r19, 0x00	; 0
    18c0:	40 e0       	ldi	r20, 0x00	; 0
    18c2:	50 e0       	ldi	r21, 0x00	; 0
    18c4:	bc 01       	movw	r22, r24
    18c6:	cd 01       	movw	r24, r26
    18c8:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <__divmodsi4>
    18cc:	dc 01       	movw	r26, r24
    18ce:	cb 01       	movw	r24, r22
    18d0:	28 2f       	mov	r18, r24
    18d2:	ce 01       	movw	r24, r28
    18d4:	06 96       	adiw	r24, 0x06	; 6
    18d6:	fc 01       	movw	r30, r24
    18d8:	e0 0f       	add	r30, r16
    18da:	f1 1f       	adc	r31, r17
    18dc:	20 83       	st	Z, r18
		Local_s32Number/=10;
    18de:	8a 81       	ldd	r24, Y+2	; 0x02
    18e0:	9b 81       	ldd	r25, Y+3	; 0x03
    18e2:	ac 81       	ldd	r26, Y+4	; 0x04
    18e4:	bd 81       	ldd	r27, Y+5	; 0x05
    18e6:	2a e0       	ldi	r18, 0x0A	; 10
    18e8:	30 e0       	ldi	r19, 0x00	; 0
    18ea:	40 e0       	ldi	r20, 0x00	; 0
    18ec:	50 e0       	ldi	r21, 0x00	; 0
    18ee:	bc 01       	movw	r22, r24
    18f0:	cd 01       	movw	r24, r26
    18f2:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <__divmodsi4>
    18f6:	da 01       	movw	r26, r20
    18f8:	c9 01       	movw	r24, r18
    18fa:	8a 83       	std	Y+2, r24	; 0x02
    18fc:	9b 83       	std	Y+3, r25	; 0x03
    18fe:	ac 83       	std	Y+4, r26	; 0x04
    1900:	bd 83       	std	Y+5, r27	; 0x05
		local_s8Counter++;
    1902:	89 81       	ldd	r24, Y+1	; 0x01
    1904:	8f 5f       	subi	r24, 0xFF	; 255
    1906:	89 83       	std	Y+1, r24	; 0x01
		Local_s32Number = Local_s32Number *(-1);

	}
	u8 Local_u8Array[20]={0};
	s8 local_s8Counter =0;
	while (Local_s32Number != 0)
    1908:	8a 81       	ldd	r24, Y+2	; 0x02
    190a:	9b 81       	ldd	r25, Y+3	; 0x03
    190c:	ac 81       	ldd	r26, Y+4	; 0x04
    190e:	bd 81       	ldd	r27, Y+5	; 0x05
    1910:	00 97       	sbiw	r24, 0x00	; 0
    1912:	a1 05       	cpc	r26, r1
    1914:	b1 05       	cpc	r27, r1
    1916:	49 f6       	brne	.-110    	; 0x18aa <CLCD_VoidWriteNumber+0x94>
	{
		Local_u8Array[local_s8Counter]= Local_s32Number%10;
		Local_s32Number/=10;
		local_s8Counter++;
	}
	local_s8Counter--;
    1918:	89 81       	ldd	r24, Y+1	; 0x01
    191a:	81 50       	subi	r24, 0x01	; 1
    191c:	89 83       	std	Y+1, r24	; 0x01
    191e:	11 c0       	rjmp	.+34     	; 0x1942 <CLCD_VoidWriteNumber+0x12c>
	while (local_s8Counter>=0)
	{
		CLCD_voidSendData(Local_u8Array[local_s8Counter]+'0');
    1920:	89 81       	ldd	r24, Y+1	; 0x01
    1922:	28 2f       	mov	r18, r24
    1924:	33 27       	eor	r19, r19
    1926:	27 fd       	sbrc	r18, 7
    1928:	30 95       	com	r19
    192a:	ce 01       	movw	r24, r28
    192c:	06 96       	adiw	r24, 0x06	; 6
    192e:	fc 01       	movw	r30, r24
    1930:	e2 0f       	add	r30, r18
    1932:	f3 1f       	adc	r31, r19
    1934:	80 81       	ld	r24, Z
    1936:	80 5d       	subi	r24, 0xD0	; 208
    1938:	0e 94 99 08 	call	0x1132	; 0x1132 <CLCD_voidSendData>
		local_s8Counter--;
    193c:	89 81       	ldd	r24, Y+1	; 0x01
    193e:	81 50       	subi	r24, 0x01	; 1
    1940:	89 83       	std	Y+1, r24	; 0x01
		Local_u8Array[local_s8Counter]= Local_s32Number%10;
		Local_s32Number/=10;
		local_s8Counter++;
	}
	local_s8Counter--;
	while (local_s8Counter>=0)
    1942:	89 81       	ldd	r24, Y+1	; 0x01
    1944:	88 23       	and	r24, r24
    1946:	64 f7       	brge	.-40     	; 0x1920 <CLCD_VoidWriteNumber+0x10a>
	{
		CLCD_voidSendData(Local_u8Array[local_s8Counter]+'0');
		local_s8Counter--;
	}
}
    1948:	6d 96       	adiw	r28, 0x1d	; 29
    194a:	0f b6       	in	r0, 0x3f	; 63
    194c:	f8 94       	cli
    194e:	de bf       	out	0x3e, r29	; 62
    1950:	0f be       	out	0x3f, r0	; 63
    1952:	cd bf       	out	0x3d, r28	; 61
    1954:	cf 91       	pop	r28
    1956:	df 91       	pop	r29
    1958:	1f 91       	pop	r17
    195a:	0f 91       	pop	r16
    195c:	08 95       	ret

0000195e <CLCD_voidWriteFloatNumber>:

void CLCD_voidWriteFloatNumber(f32 Copy_f32FloatNumber )
{
    195e:	df 93       	push	r29
    1960:	cf 93       	push	r28
    1962:	cd b7       	in	r28, 0x3d	; 61
    1964:	de b7       	in	r29, 0x3e	; 62
    1966:	28 97       	sbiw	r28, 0x08	; 8
    1968:	0f b6       	in	r0, 0x3f	; 63
    196a:	f8 94       	cli
    196c:	de bf       	out	0x3e, r29	; 62
    196e:	0f be       	out	0x3f, r0	; 63
    1970:	cd bf       	out	0x3d, r28	; 61
    1972:	6d 83       	std	Y+5, r22	; 0x05
    1974:	7e 83       	std	Y+6, r23	; 0x06
    1976:	8f 83       	std	Y+7, r24	; 0x07
    1978:	98 87       	std	Y+8, r25	; 0x08

	if(Copy_f32FloatNumber == 0)
    197a:	6d 81       	ldd	r22, Y+5	; 0x05
    197c:	7e 81       	ldd	r23, Y+6	; 0x06
    197e:	8f 81       	ldd	r24, Y+7	; 0x07
    1980:	98 85       	ldd	r25, Y+8	; 0x08
    1982:	20 e0       	ldi	r18, 0x00	; 0
    1984:	30 e0       	ldi	r19, 0x00	; 0
    1986:	40 e0       	ldi	r20, 0x00	; 0
    1988:	50 e0       	ldi	r21, 0x00	; 0
    198a:	0e 94 19 03 	call	0x632	; 0x632 <__eqsf2>
    198e:	88 23       	and	r24, r24
    1990:	39 f4       	brne	.+14     	; 0x19a0 <CLCD_voidWriteFloatNumber+0x42>
	{
		CLCD_VoidWriteNumber(0);
    1992:	60 e0       	ldi	r22, 0x00	; 0
    1994:	70 e0       	ldi	r23, 0x00	; 0
    1996:	80 e0       	ldi	r24, 0x00	; 0
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	0e 94 0b 0c 	call	0x1816	; 0x1816 <CLCD_VoidWriteNumber>
    199e:	7c c0       	rjmp	.+248    	; 0x1a98 <CLCD_voidWriteFloatNumber+0x13a>
	}

	else
	{
		s32 Local_s32DecemalNum=Copy_f32FloatNumber;
    19a0:	6d 81       	ldd	r22, Y+5	; 0x05
    19a2:	7e 81       	ldd	r23, Y+6	; 0x06
    19a4:	8f 81       	ldd	r24, Y+7	; 0x07
    19a6:	98 85       	ldd	r25, Y+8	; 0x08
    19a8:	0e 94 37 04 	call	0x86e	; 0x86e <__fixsfsi>
    19ac:	dc 01       	movw	r26, r24
    19ae:	cb 01       	movw	r24, r22
    19b0:	89 83       	std	Y+1, r24	; 0x01
    19b2:	9a 83       	std	Y+2, r25	; 0x02
    19b4:	ab 83       	std	Y+3, r26	; 0x03
    19b6:	bc 83       	std	Y+4, r27	; 0x04
		CLCD_VoidWriteNumber(Local_s32DecemalNum);
    19b8:	69 81       	ldd	r22, Y+1	; 0x01
    19ba:	7a 81       	ldd	r23, Y+2	; 0x02
    19bc:	8b 81       	ldd	r24, Y+3	; 0x03
    19be:	9c 81       	ldd	r25, Y+4	; 0x04
    19c0:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <__floatsisf>
    19c4:	dc 01       	movw	r26, r24
    19c6:	cb 01       	movw	r24, r22
    19c8:	bc 01       	movw	r22, r24
    19ca:	cd 01       	movw	r24, r26
    19cc:	0e 94 0b 0c 	call	0x1816	; 0x1816 <CLCD_VoidWriteNumber>
		CLCD_voidSendData('.');
    19d0:	8e e2       	ldi	r24, 0x2E	; 46
    19d2:	0e 94 99 08 	call	0x1132	; 0x1132 <CLCD_voidSendData>
		Copy_f32FloatNumber = Copy_f32FloatNumber -Local_s32DecemalNum;
    19d6:	69 81       	ldd	r22, Y+1	; 0x01
    19d8:	7a 81       	ldd	r23, Y+2	; 0x02
    19da:	8b 81       	ldd	r24, Y+3	; 0x03
    19dc:	9c 81       	ldd	r25, Y+4	; 0x04
    19de:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <__floatsisf>
    19e2:	9b 01       	movw	r18, r22
    19e4:	ac 01       	movw	r20, r24
    19e6:	6d 81       	ldd	r22, Y+5	; 0x05
    19e8:	7e 81       	ldd	r23, Y+6	; 0x06
    19ea:	8f 81       	ldd	r24, Y+7	; 0x07
    19ec:	98 85       	ldd	r25, Y+8	; 0x08
    19ee:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    19f2:	dc 01       	movw	r26, r24
    19f4:	cb 01       	movw	r24, r22
    19f6:	8d 83       	std	Y+5, r24	; 0x05
    19f8:	9e 83       	std	Y+6, r25	; 0x06
    19fa:	af 83       	std	Y+7, r26	; 0x07
    19fc:	b8 87       	std	Y+8, r27	; 0x08

		Copy_f32FloatNumber*=100000;
    19fe:	6d 81       	ldd	r22, Y+5	; 0x05
    1a00:	7e 81       	ldd	r23, Y+6	; 0x06
    1a02:	8f 81       	ldd	r24, Y+7	; 0x07
    1a04:	98 85       	ldd	r25, Y+8	; 0x08
    1a06:	20 e0       	ldi	r18, 0x00	; 0
    1a08:	30 e5       	ldi	r19, 0x50	; 80
    1a0a:	43 ec       	ldi	r20, 0xC3	; 195
    1a0c:	57 e4       	ldi	r21, 0x47	; 71
    1a0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a12:	dc 01       	movw	r26, r24
    1a14:	cb 01       	movw	r24, r22
    1a16:	8d 83       	std	Y+5, r24	; 0x05
    1a18:	9e 83       	std	Y+6, r25	; 0x06
    1a1a:	af 83       	std	Y+7, r26	; 0x07
    1a1c:	b8 87       	std	Y+8, r27	; 0x08
		Local_s32DecemalNum = Copy_f32FloatNumber;
    1a1e:	6d 81       	ldd	r22, Y+5	; 0x05
    1a20:	7e 81       	ldd	r23, Y+6	; 0x06
    1a22:	8f 81       	ldd	r24, Y+7	; 0x07
    1a24:	98 85       	ldd	r25, Y+8	; 0x08
    1a26:	0e 94 37 04 	call	0x86e	; 0x86e <__fixsfsi>
    1a2a:	dc 01       	movw	r26, r24
    1a2c:	cb 01       	movw	r24, r22
    1a2e:	89 83       	std	Y+1, r24	; 0x01
    1a30:	9a 83       	std	Y+2, r25	; 0x02
    1a32:	ab 83       	std	Y+3, r26	; 0x03
    1a34:	bc 83       	std	Y+4, r27	; 0x04
    1a36:	12 c0       	rjmp	.+36     	; 0x1a5c <CLCD_voidWriteFloatNumber+0xfe>

		while (Local_s32DecemalNum%10 == 0)
		{
			Local_s32DecemalNum/=10;
    1a38:	89 81       	ldd	r24, Y+1	; 0x01
    1a3a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a3c:	ab 81       	ldd	r26, Y+3	; 0x03
    1a3e:	bc 81       	ldd	r27, Y+4	; 0x04
    1a40:	2a e0       	ldi	r18, 0x0A	; 10
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	40 e0       	ldi	r20, 0x00	; 0
    1a46:	50 e0       	ldi	r21, 0x00	; 0
    1a48:	bc 01       	movw	r22, r24
    1a4a:	cd 01       	movw	r24, r26
    1a4c:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <__divmodsi4>
    1a50:	da 01       	movw	r26, r20
    1a52:	c9 01       	movw	r24, r18
    1a54:	89 83       	std	Y+1, r24	; 0x01
    1a56:	9a 83       	std	Y+2, r25	; 0x02
    1a58:	ab 83       	std	Y+3, r26	; 0x03
    1a5a:	bc 83       	std	Y+4, r27	; 0x04
		Copy_f32FloatNumber = Copy_f32FloatNumber -Local_s32DecemalNum;

		Copy_f32FloatNumber*=100000;
		Local_s32DecemalNum = Copy_f32FloatNumber;

		while (Local_s32DecemalNum%10 == 0)
    1a5c:	89 81       	ldd	r24, Y+1	; 0x01
    1a5e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a60:	ab 81       	ldd	r26, Y+3	; 0x03
    1a62:	bc 81       	ldd	r27, Y+4	; 0x04
    1a64:	2a e0       	ldi	r18, 0x0A	; 10
    1a66:	30 e0       	ldi	r19, 0x00	; 0
    1a68:	40 e0       	ldi	r20, 0x00	; 0
    1a6a:	50 e0       	ldi	r21, 0x00	; 0
    1a6c:	bc 01       	movw	r22, r24
    1a6e:	cd 01       	movw	r24, r26
    1a70:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <__divmodsi4>
    1a74:	dc 01       	movw	r26, r24
    1a76:	cb 01       	movw	r24, r22
    1a78:	00 97       	sbiw	r24, 0x00	; 0
    1a7a:	a1 05       	cpc	r26, r1
    1a7c:	b1 05       	cpc	r27, r1
    1a7e:	e1 f2       	breq	.-72     	; 0x1a38 <CLCD_voidWriteFloatNumber+0xda>
		{
			Local_s32DecemalNum/=10;
		}
		CLCD_VoidWriteNumber(Local_s32DecemalNum);
    1a80:	69 81       	ldd	r22, Y+1	; 0x01
    1a82:	7a 81       	ldd	r23, Y+2	; 0x02
    1a84:	8b 81       	ldd	r24, Y+3	; 0x03
    1a86:	9c 81       	ldd	r25, Y+4	; 0x04
    1a88:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <__floatsisf>
    1a8c:	dc 01       	movw	r26, r24
    1a8e:	cb 01       	movw	r24, r22
    1a90:	bc 01       	movw	r22, r24
    1a92:	cd 01       	movw	r24, r26
    1a94:	0e 94 0b 0c 	call	0x1816	; 0x1816 <CLCD_VoidWriteNumber>
	}
}
    1a98:	28 96       	adiw	r28, 0x08	; 8
    1a9a:	0f b6       	in	r0, 0x3f	; 63
    1a9c:	f8 94       	cli
    1a9e:	de bf       	out	0x3e, r29	; 62
    1aa0:	0f be       	out	0x3f, r0	; 63
    1aa2:	cd bf       	out	0x3d, r28	; 61
    1aa4:	cf 91       	pop	r28
    1aa6:	df 91       	pop	r29
    1aa8:	08 95       	ret

00001aaa <CLCD_voidClear>:
//}



void CLCD_voidClear()
{
    1aaa:	df 93       	push	r29
    1aac:	cf 93       	push	r28
    1aae:	cd b7       	in	r28, 0x3d	; 61
    1ab0:	de b7       	in	r29, 0x3e	; 62
	C_LCD_voidSendCommand(0x01);
    1ab2:	81 e0       	ldi	r24, 0x01	; 1
    1ab4:	0e 94 80 06 	call	0xd00	; 0xd00 <C_LCD_voidSendCommand>

}
    1ab8:	cf 91       	pop	r28
    1aba:	df 91       	pop	r29
    1abc:	08 95       	ret

00001abe <DIO_u8SetPinValue>:
//
//	return Local_u8ErrorState;
//}

u8 DIO_u8SetPinValue(u8 Copy_u8port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
    1abe:	df 93       	push	r29
    1ac0:	cf 93       	push	r28
    1ac2:	cd b7       	in	r28, 0x3d	; 61
    1ac4:	de b7       	in	r29, 0x3e	; 62
    1ac6:	28 97       	sbiw	r28, 0x08	; 8
    1ac8:	0f b6       	in	r0, 0x3f	; 63
    1aca:	f8 94       	cli
    1acc:	de bf       	out	0x3e, r29	; 62
    1ace:	0f be       	out	0x3f, r0	; 63
    1ad0:	cd bf       	out	0x3d, r28	; 61
    1ad2:	8a 83       	std	Y+2, r24	; 0x02
    1ad4:	6b 83       	std	Y+3, r22	; 0x03
    1ad6:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    1ad8:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin<=DIO_u8PIN7)
    1ada:	8b 81       	ldd	r24, Y+3	; 0x03
    1adc:	88 30       	cpi	r24, 0x08	; 8
    1ade:	08 f0       	brcs	.+2      	; 0x1ae2 <DIO_u8SetPinValue+0x24>
    1ae0:	f4 c0       	rjmp	.+488    	; 0x1cca <DIO_u8SetPinValue+0x20c>
	{
		if(Copy_u8Value == DIO_u8PIN_LOW)
    1ae2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ae4:	88 23       	and	r24, r24
    1ae6:	09 f0       	breq	.+2      	; 0x1aea <DIO_u8SetPinValue+0x2c>
    1ae8:	77 c0       	rjmp	.+238    	; 0x1bd8 <DIO_u8SetPinValue+0x11a>
		{

			switch(Copy_u8port)
    1aea:	8a 81       	ldd	r24, Y+2	; 0x02
    1aec:	28 2f       	mov	r18, r24
    1aee:	30 e0       	ldi	r19, 0x00	; 0
    1af0:	38 87       	std	Y+8, r19	; 0x08
    1af2:	2f 83       	std	Y+7, r18	; 0x07
    1af4:	8f 81       	ldd	r24, Y+7	; 0x07
    1af6:	98 85       	ldd	r25, Y+8	; 0x08
    1af8:	81 30       	cpi	r24, 0x01	; 1
    1afa:	91 05       	cpc	r25, r1
    1afc:	59 f1       	breq	.+86     	; 0x1b54 <DIO_u8SetPinValue+0x96>
    1afe:	2f 81       	ldd	r18, Y+7	; 0x07
    1b00:	38 85       	ldd	r19, Y+8	; 0x08
    1b02:	22 30       	cpi	r18, 0x02	; 2
    1b04:	31 05       	cpc	r19, r1
    1b06:	2c f4       	brge	.+10     	; 0x1b12 <DIO_u8SetPinValue+0x54>
    1b08:	8f 81       	ldd	r24, Y+7	; 0x07
    1b0a:	98 85       	ldd	r25, Y+8	; 0x08
    1b0c:	00 97       	sbiw	r24, 0x00	; 0
    1b0e:	69 f0       	breq	.+26     	; 0x1b2a <DIO_u8SetPinValue+0x6c>
    1b10:	60 c0       	rjmp	.+192    	; 0x1bd2 <DIO_u8SetPinValue+0x114>
    1b12:	2f 81       	ldd	r18, Y+7	; 0x07
    1b14:	38 85       	ldd	r19, Y+8	; 0x08
    1b16:	22 30       	cpi	r18, 0x02	; 2
    1b18:	31 05       	cpc	r19, r1
    1b1a:	89 f1       	breq	.+98     	; 0x1b7e <DIO_u8SetPinValue+0xc0>
    1b1c:	8f 81       	ldd	r24, Y+7	; 0x07
    1b1e:	98 85       	ldd	r25, Y+8	; 0x08
    1b20:	83 30       	cpi	r24, 0x03	; 3
    1b22:	91 05       	cpc	r25, r1
    1b24:	09 f4       	brne	.+2      	; 0x1b28 <DIO_u8SetPinValue+0x6a>
    1b26:	40 c0       	rjmp	.+128    	; 0x1ba8 <DIO_u8SetPinValue+0xea>
    1b28:	54 c0       	rjmp	.+168    	; 0x1bd2 <DIO_u8SetPinValue+0x114>
			{
			case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
    1b2a:	ab e3       	ldi	r26, 0x3B	; 59
    1b2c:	b0 e0       	ldi	r27, 0x00	; 0
    1b2e:	eb e3       	ldi	r30, 0x3B	; 59
    1b30:	f0 e0       	ldi	r31, 0x00	; 0
    1b32:	80 81       	ld	r24, Z
    1b34:	48 2f       	mov	r20, r24
    1b36:	8b 81       	ldd	r24, Y+3	; 0x03
    1b38:	28 2f       	mov	r18, r24
    1b3a:	30 e0       	ldi	r19, 0x00	; 0
    1b3c:	81 e0       	ldi	r24, 0x01	; 1
    1b3e:	90 e0       	ldi	r25, 0x00	; 0
    1b40:	02 2e       	mov	r0, r18
    1b42:	02 c0       	rjmp	.+4      	; 0x1b48 <DIO_u8SetPinValue+0x8a>
    1b44:	88 0f       	add	r24, r24
    1b46:	99 1f       	adc	r25, r25
    1b48:	0a 94       	dec	r0
    1b4a:	e2 f7       	brpl	.-8      	; 0x1b44 <DIO_u8SetPinValue+0x86>
    1b4c:	80 95       	com	r24
    1b4e:	84 23       	and	r24, r20
    1b50:	8c 93       	st	X, r24
    1b52:	bd c0       	rjmp	.+378    	; 0x1cce <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
    1b54:	a8 e3       	ldi	r26, 0x38	; 56
    1b56:	b0 e0       	ldi	r27, 0x00	; 0
    1b58:	e8 e3       	ldi	r30, 0x38	; 56
    1b5a:	f0 e0       	ldi	r31, 0x00	; 0
    1b5c:	80 81       	ld	r24, Z
    1b5e:	48 2f       	mov	r20, r24
    1b60:	8b 81       	ldd	r24, Y+3	; 0x03
    1b62:	28 2f       	mov	r18, r24
    1b64:	30 e0       	ldi	r19, 0x00	; 0
    1b66:	81 e0       	ldi	r24, 0x01	; 1
    1b68:	90 e0       	ldi	r25, 0x00	; 0
    1b6a:	02 2e       	mov	r0, r18
    1b6c:	02 c0       	rjmp	.+4      	; 0x1b72 <DIO_u8SetPinValue+0xb4>
    1b6e:	88 0f       	add	r24, r24
    1b70:	99 1f       	adc	r25, r25
    1b72:	0a 94       	dec	r0
    1b74:	e2 f7       	brpl	.-8      	; 0x1b6e <DIO_u8SetPinValue+0xb0>
    1b76:	80 95       	com	r24
    1b78:	84 23       	and	r24, r20
    1b7a:	8c 93       	st	X, r24
    1b7c:	a8 c0       	rjmp	.+336    	; 0x1cce <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin); break;
    1b7e:	a5 e3       	ldi	r26, 0x35	; 53
    1b80:	b0 e0       	ldi	r27, 0x00	; 0
    1b82:	e5 e3       	ldi	r30, 0x35	; 53
    1b84:	f0 e0       	ldi	r31, 0x00	; 0
    1b86:	80 81       	ld	r24, Z
    1b88:	48 2f       	mov	r20, r24
    1b8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b8c:	28 2f       	mov	r18, r24
    1b8e:	30 e0       	ldi	r19, 0x00	; 0
    1b90:	81 e0       	ldi	r24, 0x01	; 1
    1b92:	90 e0       	ldi	r25, 0x00	; 0
    1b94:	02 2e       	mov	r0, r18
    1b96:	02 c0       	rjmp	.+4      	; 0x1b9c <DIO_u8SetPinValue+0xde>
    1b98:	88 0f       	add	r24, r24
    1b9a:	99 1f       	adc	r25, r25
    1b9c:	0a 94       	dec	r0
    1b9e:	e2 f7       	brpl	.-8      	; 0x1b98 <DIO_u8SetPinValue+0xda>
    1ba0:	80 95       	com	r24
    1ba2:	84 23       	and	r24, r20
    1ba4:	8c 93       	st	X, r24
    1ba6:	93 c0       	rjmp	.+294    	; 0x1cce <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin); break;
    1ba8:	a2 e3       	ldi	r26, 0x32	; 50
    1baa:	b0 e0       	ldi	r27, 0x00	; 0
    1bac:	e2 e3       	ldi	r30, 0x32	; 50
    1bae:	f0 e0       	ldi	r31, 0x00	; 0
    1bb0:	80 81       	ld	r24, Z
    1bb2:	48 2f       	mov	r20, r24
    1bb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb6:	28 2f       	mov	r18, r24
    1bb8:	30 e0       	ldi	r19, 0x00	; 0
    1bba:	81 e0       	ldi	r24, 0x01	; 1
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	02 2e       	mov	r0, r18
    1bc0:	02 c0       	rjmp	.+4      	; 0x1bc6 <DIO_u8SetPinValue+0x108>
    1bc2:	88 0f       	add	r24, r24
    1bc4:	99 1f       	adc	r25, r25
    1bc6:	0a 94       	dec	r0
    1bc8:	e2 f7       	brpl	.-8      	; 0x1bc2 <DIO_u8SetPinValue+0x104>
    1bca:	80 95       	com	r24
    1bcc:	84 23       	and	r24, r20
    1bce:	8c 93       	st	X, r24
    1bd0:	7e c0       	rjmp	.+252    	; 0x1cce <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState =1; break;
    1bd2:	81 e0       	ldi	r24, 0x01	; 1
    1bd4:	89 83       	std	Y+1, r24	; 0x01
    1bd6:	7b c0       	rjmp	.+246    	; 0x1cce <DIO_u8SetPinValue+0x210>

			}
		}
		else if(Copy_u8Value == DIO_u8PIN_HIGH)
    1bd8:	8c 81       	ldd	r24, Y+4	; 0x04
    1bda:	81 30       	cpi	r24, 0x01	; 1
    1bdc:	09 f0       	breq	.+2      	; 0x1be0 <DIO_u8SetPinValue+0x122>
    1bde:	72 c0       	rjmp	.+228    	; 0x1cc4 <DIO_u8SetPinValue+0x206>
		{

			switch(Copy_u8port)
    1be0:	8a 81       	ldd	r24, Y+2	; 0x02
    1be2:	28 2f       	mov	r18, r24
    1be4:	30 e0       	ldi	r19, 0x00	; 0
    1be6:	3e 83       	std	Y+6, r19	; 0x06
    1be8:	2d 83       	std	Y+5, r18	; 0x05
    1bea:	8d 81       	ldd	r24, Y+5	; 0x05
    1bec:	9e 81       	ldd	r25, Y+6	; 0x06
    1bee:	81 30       	cpi	r24, 0x01	; 1
    1bf0:	91 05       	cpc	r25, r1
    1bf2:	49 f1       	breq	.+82     	; 0x1c46 <DIO_u8SetPinValue+0x188>
    1bf4:	2d 81       	ldd	r18, Y+5	; 0x05
    1bf6:	3e 81       	ldd	r19, Y+6	; 0x06
    1bf8:	22 30       	cpi	r18, 0x02	; 2
    1bfa:	31 05       	cpc	r19, r1
    1bfc:	2c f4       	brge	.+10     	; 0x1c08 <DIO_u8SetPinValue+0x14a>
    1bfe:	8d 81       	ldd	r24, Y+5	; 0x05
    1c00:	9e 81       	ldd	r25, Y+6	; 0x06
    1c02:	00 97       	sbiw	r24, 0x00	; 0
    1c04:	61 f0       	breq	.+24     	; 0x1c1e <DIO_u8SetPinValue+0x160>
    1c06:	5b c0       	rjmp	.+182    	; 0x1cbe <DIO_u8SetPinValue+0x200>
    1c08:	2d 81       	ldd	r18, Y+5	; 0x05
    1c0a:	3e 81       	ldd	r19, Y+6	; 0x06
    1c0c:	22 30       	cpi	r18, 0x02	; 2
    1c0e:	31 05       	cpc	r19, r1
    1c10:	71 f1       	breq	.+92     	; 0x1c6e <DIO_u8SetPinValue+0x1b0>
    1c12:	8d 81       	ldd	r24, Y+5	; 0x05
    1c14:	9e 81       	ldd	r25, Y+6	; 0x06
    1c16:	83 30       	cpi	r24, 0x03	; 3
    1c18:	91 05       	cpc	r25, r1
    1c1a:	e9 f1       	breq	.+122    	; 0x1c96 <DIO_u8SetPinValue+0x1d8>
    1c1c:	50 c0       	rjmp	.+160    	; 0x1cbe <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
    1c1e:	ab e3       	ldi	r26, 0x3B	; 59
    1c20:	b0 e0       	ldi	r27, 0x00	; 0
    1c22:	eb e3       	ldi	r30, 0x3B	; 59
    1c24:	f0 e0       	ldi	r31, 0x00	; 0
    1c26:	80 81       	ld	r24, Z
    1c28:	48 2f       	mov	r20, r24
    1c2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c2c:	28 2f       	mov	r18, r24
    1c2e:	30 e0       	ldi	r19, 0x00	; 0
    1c30:	81 e0       	ldi	r24, 0x01	; 1
    1c32:	90 e0       	ldi	r25, 0x00	; 0
    1c34:	02 2e       	mov	r0, r18
    1c36:	02 c0       	rjmp	.+4      	; 0x1c3c <DIO_u8SetPinValue+0x17e>
    1c38:	88 0f       	add	r24, r24
    1c3a:	99 1f       	adc	r25, r25
    1c3c:	0a 94       	dec	r0
    1c3e:	e2 f7       	brpl	.-8      	; 0x1c38 <DIO_u8SetPinValue+0x17a>
    1c40:	84 2b       	or	r24, r20
    1c42:	8c 93       	st	X, r24
    1c44:	44 c0       	rjmp	.+136    	; 0x1cce <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
    1c46:	a8 e3       	ldi	r26, 0x38	; 56
    1c48:	b0 e0       	ldi	r27, 0x00	; 0
    1c4a:	e8 e3       	ldi	r30, 0x38	; 56
    1c4c:	f0 e0       	ldi	r31, 0x00	; 0
    1c4e:	80 81       	ld	r24, Z
    1c50:	48 2f       	mov	r20, r24
    1c52:	8b 81       	ldd	r24, Y+3	; 0x03
    1c54:	28 2f       	mov	r18, r24
    1c56:	30 e0       	ldi	r19, 0x00	; 0
    1c58:	81 e0       	ldi	r24, 0x01	; 1
    1c5a:	90 e0       	ldi	r25, 0x00	; 0
    1c5c:	02 2e       	mov	r0, r18
    1c5e:	02 c0       	rjmp	.+4      	; 0x1c64 <DIO_u8SetPinValue+0x1a6>
    1c60:	88 0f       	add	r24, r24
    1c62:	99 1f       	adc	r25, r25
    1c64:	0a 94       	dec	r0
    1c66:	e2 f7       	brpl	.-8      	; 0x1c60 <DIO_u8SetPinValue+0x1a2>
    1c68:	84 2b       	or	r24, r20
    1c6a:	8c 93       	st	X, r24
    1c6c:	30 c0       	rjmp	.+96     	; 0x1cce <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin); break;
    1c6e:	a5 e3       	ldi	r26, 0x35	; 53
    1c70:	b0 e0       	ldi	r27, 0x00	; 0
    1c72:	e5 e3       	ldi	r30, 0x35	; 53
    1c74:	f0 e0       	ldi	r31, 0x00	; 0
    1c76:	80 81       	ld	r24, Z
    1c78:	48 2f       	mov	r20, r24
    1c7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c7c:	28 2f       	mov	r18, r24
    1c7e:	30 e0       	ldi	r19, 0x00	; 0
    1c80:	81 e0       	ldi	r24, 0x01	; 1
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	02 2e       	mov	r0, r18
    1c86:	02 c0       	rjmp	.+4      	; 0x1c8c <DIO_u8SetPinValue+0x1ce>
    1c88:	88 0f       	add	r24, r24
    1c8a:	99 1f       	adc	r25, r25
    1c8c:	0a 94       	dec	r0
    1c8e:	e2 f7       	brpl	.-8      	; 0x1c88 <DIO_u8SetPinValue+0x1ca>
    1c90:	84 2b       	or	r24, r20
    1c92:	8c 93       	st	X, r24
    1c94:	1c c0       	rjmp	.+56     	; 0x1cce <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin); break;
    1c96:	a2 e3       	ldi	r26, 0x32	; 50
    1c98:	b0 e0       	ldi	r27, 0x00	; 0
    1c9a:	e2 e3       	ldi	r30, 0x32	; 50
    1c9c:	f0 e0       	ldi	r31, 0x00	; 0
    1c9e:	80 81       	ld	r24, Z
    1ca0:	48 2f       	mov	r20, r24
    1ca2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca4:	28 2f       	mov	r18, r24
    1ca6:	30 e0       	ldi	r19, 0x00	; 0
    1ca8:	81 e0       	ldi	r24, 0x01	; 1
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	02 2e       	mov	r0, r18
    1cae:	02 c0       	rjmp	.+4      	; 0x1cb4 <DIO_u8SetPinValue+0x1f6>
    1cb0:	88 0f       	add	r24, r24
    1cb2:	99 1f       	adc	r25, r25
    1cb4:	0a 94       	dec	r0
    1cb6:	e2 f7       	brpl	.-8      	; 0x1cb0 <DIO_u8SetPinValue+0x1f2>
    1cb8:	84 2b       	or	r24, r20
    1cba:	8c 93       	st	X, r24
    1cbc:	08 c0       	rjmp	.+16     	; 0x1cce <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState =1; break;
    1cbe:	81 e0       	ldi	r24, 0x01	; 1
    1cc0:	89 83       	std	Y+1, r24	; 0x01
    1cc2:	05 c0       	rjmp	.+10     	; 0x1cce <DIO_u8SetPinValue+0x210>

			}
		}
		else
		{
			Local_u8ErrorState = 1;
    1cc4:	81 e0       	ldi	r24, 0x01	; 1
    1cc6:	89 83       	std	Y+1, r24	; 0x01
    1cc8:	02 c0       	rjmp	.+4      	; 0x1cce <DIO_u8SetPinValue+0x210>
		}

	}
	else
	{
		Local_u8ErrorState = 1;
    1cca:	81 e0       	ldi	r24, 0x01	; 1
    1ccc:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1cce:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cd0:	28 96       	adiw	r28, 0x08	; 8
    1cd2:	0f b6       	in	r0, 0x3f	; 63
    1cd4:	f8 94       	cli
    1cd6:	de bf       	out	0x3e, r29	; 62
    1cd8:	0f be       	out	0x3f, r0	; 63
    1cda:	cd bf       	out	0x3d, r28	; 61
    1cdc:	cf 91       	pop	r28
    1cde:	df 91       	pop	r29
    1ce0:	08 95       	ret

00001ce2 <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8port, u8 Copy_u8Value)
{
    1ce2:	df 93       	push	r29
    1ce4:	cf 93       	push	r28
    1ce6:	00 d0       	rcall	.+0      	; 0x1ce8 <DIO_u8SetPortValue+0x6>
    1ce8:	00 d0       	rcall	.+0      	; 0x1cea <DIO_u8SetPortValue+0x8>
    1cea:	0f 92       	push	r0
    1cec:	cd b7       	in	r28, 0x3d	; 61
    1cee:	de b7       	in	r29, 0x3e	; 62
    1cf0:	8a 83       	std	Y+2, r24	; 0x02
    1cf2:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    1cf4:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8port<=DIO_u8PORTD)
    1cf6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf8:	84 30       	cpi	r24, 0x04	; 4
    1cfa:	b0 f5       	brcc	.+108    	; 0x1d68 <DIO_u8SetPortValue+0x86>
	{
		switch(Copy_u8port)
    1cfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cfe:	28 2f       	mov	r18, r24
    1d00:	30 e0       	ldi	r19, 0x00	; 0
    1d02:	3d 83       	std	Y+5, r19	; 0x05
    1d04:	2c 83       	std	Y+4, r18	; 0x04
    1d06:	8c 81       	ldd	r24, Y+4	; 0x04
    1d08:	9d 81       	ldd	r25, Y+5	; 0x05
    1d0a:	81 30       	cpi	r24, 0x01	; 1
    1d0c:	91 05       	cpc	r25, r1
    1d0e:	d1 f0       	breq	.+52     	; 0x1d44 <DIO_u8SetPortValue+0x62>
    1d10:	2c 81       	ldd	r18, Y+4	; 0x04
    1d12:	3d 81       	ldd	r19, Y+5	; 0x05
    1d14:	22 30       	cpi	r18, 0x02	; 2
    1d16:	31 05       	cpc	r19, r1
    1d18:	2c f4       	brge	.+10     	; 0x1d24 <DIO_u8SetPortValue+0x42>
    1d1a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d1c:	9d 81       	ldd	r25, Y+5	; 0x05
    1d1e:	00 97       	sbiw	r24, 0x00	; 0
    1d20:	61 f0       	breq	.+24     	; 0x1d3a <DIO_u8SetPortValue+0x58>
    1d22:	1f c0       	rjmp	.+62     	; 0x1d62 <DIO_u8SetPortValue+0x80>
    1d24:	2c 81       	ldd	r18, Y+4	; 0x04
    1d26:	3d 81       	ldd	r19, Y+5	; 0x05
    1d28:	22 30       	cpi	r18, 0x02	; 2
    1d2a:	31 05       	cpc	r19, r1
    1d2c:	81 f0       	breq	.+32     	; 0x1d4e <DIO_u8SetPortValue+0x6c>
    1d2e:	8c 81       	ldd	r24, Y+4	; 0x04
    1d30:	9d 81       	ldd	r25, Y+5	; 0x05
    1d32:	83 30       	cpi	r24, 0x03	; 3
    1d34:	91 05       	cpc	r25, r1
    1d36:	81 f0       	breq	.+32     	; 0x1d58 <DIO_u8SetPortValue+0x76>
    1d38:	14 c0       	rjmp	.+40     	; 0x1d62 <DIO_u8SetPortValue+0x80>
		{
		case DIO_u8PORTA: PORTA = Copy_u8Value; break;
    1d3a:	eb e3       	ldi	r30, 0x3B	; 59
    1d3c:	f0 e0       	ldi	r31, 0x00	; 0
    1d3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d40:	80 83       	st	Z, r24
    1d42:	14 c0       	rjmp	.+40     	; 0x1d6c <DIO_u8SetPortValue+0x8a>
		case DIO_u8PORTB: PORTB = Copy_u8Value; break;
    1d44:	e8 e3       	ldi	r30, 0x38	; 56
    1d46:	f0 e0       	ldi	r31, 0x00	; 0
    1d48:	8b 81       	ldd	r24, Y+3	; 0x03
    1d4a:	80 83       	st	Z, r24
    1d4c:	0f c0       	rjmp	.+30     	; 0x1d6c <DIO_u8SetPortValue+0x8a>
		case DIO_u8PORTC: PORTC = Copy_u8Value; break;
    1d4e:	e5 e3       	ldi	r30, 0x35	; 53
    1d50:	f0 e0       	ldi	r31, 0x00	; 0
    1d52:	8b 81       	ldd	r24, Y+3	; 0x03
    1d54:	80 83       	st	Z, r24
    1d56:	0a c0       	rjmp	.+20     	; 0x1d6c <DIO_u8SetPortValue+0x8a>
		case DIO_u8PORTD: PORTD = Copy_u8Value; break;
    1d58:	e2 e3       	ldi	r30, 0x32	; 50
    1d5a:	f0 e0       	ldi	r31, 0x00	; 0
    1d5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d5e:	80 83       	st	Z, r24
    1d60:	05 c0       	rjmp	.+10     	; 0x1d6c <DIO_u8SetPortValue+0x8a>
		default: Local_u8ErrorState =1; break;
    1d62:	81 e0       	ldi	r24, 0x01	; 1
    1d64:	89 83       	std	Y+1, r24	; 0x01
    1d66:	02 c0       	rjmp	.+4      	; 0x1d6c <DIO_u8SetPortValue+0x8a>

		}
	}
	else
	{
		Local_u8ErrorState = 1;
    1d68:	81 e0       	ldi	r24, 0x01	; 1
    1d6a:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_u8ErrorState;
    1d6c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d6e:	0f 90       	pop	r0
    1d70:	0f 90       	pop	r0
    1d72:	0f 90       	pop	r0
    1d74:	0f 90       	pop	r0
    1d76:	0f 90       	pop	r0
    1d78:	cf 91       	pop	r28
    1d7a:	df 91       	pop	r29
    1d7c:	08 95       	ret

00001d7e <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8port, u8 Copy_u8Pin, u8* Copy_Pu8Value)
{
    1d7e:	df 93       	push	r29
    1d80:	cf 93       	push	r28
    1d82:	cd b7       	in	r28, 0x3d	; 61
    1d84:	de b7       	in	r29, 0x3e	; 62
    1d86:	27 97       	sbiw	r28, 0x07	; 7
    1d88:	0f b6       	in	r0, 0x3f	; 63
    1d8a:	f8 94       	cli
    1d8c:	de bf       	out	0x3e, r29	; 62
    1d8e:	0f be       	out	0x3f, r0	; 63
    1d90:	cd bf       	out	0x3d, r28	; 61
    1d92:	8a 83       	std	Y+2, r24	; 0x02
    1d94:	6b 83       	std	Y+3, r22	; 0x03
    1d96:	5d 83       	std	Y+5, r21	; 0x05
    1d98:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    1d9a:	19 82       	std	Y+1, r1	; 0x01

	if((Copy_Pu8Value != NULL )&&(Copy_u8Pin<=DIO_u8PIN7))
    1d9c:	8c 81       	ldd	r24, Y+4	; 0x04
    1d9e:	9d 81       	ldd	r25, Y+5	; 0x05
    1da0:	00 97       	sbiw	r24, 0x00	; 0
    1da2:	09 f4       	brne	.+2      	; 0x1da6 <DIO_u8GetPinValue+0x28>
    1da4:	78 c0       	rjmp	.+240    	; 0x1e96 <DIO_u8GetPinValue+0x118>
    1da6:	8b 81       	ldd	r24, Y+3	; 0x03
    1da8:	88 30       	cpi	r24, 0x08	; 8
    1daa:	08 f0       	brcs	.+2      	; 0x1dae <DIO_u8GetPinValue+0x30>
    1dac:	74 c0       	rjmp	.+232    	; 0x1e96 <DIO_u8GetPinValue+0x118>
	{


			switch(Copy_u8port)
    1dae:	8a 81       	ldd	r24, Y+2	; 0x02
    1db0:	28 2f       	mov	r18, r24
    1db2:	30 e0       	ldi	r19, 0x00	; 0
    1db4:	3f 83       	std	Y+7, r19	; 0x07
    1db6:	2e 83       	std	Y+6, r18	; 0x06
    1db8:	4e 81       	ldd	r20, Y+6	; 0x06
    1dba:	5f 81       	ldd	r21, Y+7	; 0x07
    1dbc:	41 30       	cpi	r20, 0x01	; 1
    1dbe:	51 05       	cpc	r21, r1
    1dc0:	59 f1       	breq	.+86     	; 0x1e18 <DIO_u8GetPinValue+0x9a>
    1dc2:	8e 81       	ldd	r24, Y+6	; 0x06
    1dc4:	9f 81       	ldd	r25, Y+7	; 0x07
    1dc6:	82 30       	cpi	r24, 0x02	; 2
    1dc8:	91 05       	cpc	r25, r1
    1dca:	34 f4       	brge	.+12     	; 0x1dd8 <DIO_u8GetPinValue+0x5a>
    1dcc:	2e 81       	ldd	r18, Y+6	; 0x06
    1dce:	3f 81       	ldd	r19, Y+7	; 0x07
    1dd0:	21 15       	cp	r18, r1
    1dd2:	31 05       	cpc	r19, r1
    1dd4:	69 f0       	breq	.+26     	; 0x1df0 <DIO_u8GetPinValue+0x72>
    1dd6:	5c c0       	rjmp	.+184    	; 0x1e90 <DIO_u8GetPinValue+0x112>
    1dd8:	4e 81       	ldd	r20, Y+6	; 0x06
    1dda:	5f 81       	ldd	r21, Y+7	; 0x07
    1ddc:	42 30       	cpi	r20, 0x02	; 2
    1dde:	51 05       	cpc	r21, r1
    1de0:	79 f1       	breq	.+94     	; 0x1e40 <DIO_u8GetPinValue+0xc2>
    1de2:	8e 81       	ldd	r24, Y+6	; 0x06
    1de4:	9f 81       	ldd	r25, Y+7	; 0x07
    1de6:	83 30       	cpi	r24, 0x03	; 3
    1de8:	91 05       	cpc	r25, r1
    1dea:	09 f4       	brne	.+2      	; 0x1dee <DIO_u8GetPinValue+0x70>
    1dec:	3d c0       	rjmp	.+122    	; 0x1e68 <DIO_u8GetPinValue+0xea>
    1dee:	50 c0       	rjmp	.+160    	; 0x1e90 <DIO_u8GetPinValue+0x112>
			{
			case DIO_u8PORTA: * Copy_Pu8Value = GET_BIT(PINA,Copy_u8Pin); break;
    1df0:	e9 e3       	ldi	r30, 0x39	; 57
    1df2:	f0 e0       	ldi	r31, 0x00	; 0
    1df4:	80 81       	ld	r24, Z
    1df6:	28 2f       	mov	r18, r24
    1df8:	30 e0       	ldi	r19, 0x00	; 0
    1dfa:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfc:	88 2f       	mov	r24, r24
    1dfe:	90 e0       	ldi	r25, 0x00	; 0
    1e00:	a9 01       	movw	r20, r18
    1e02:	02 c0       	rjmp	.+4      	; 0x1e08 <DIO_u8GetPinValue+0x8a>
    1e04:	55 95       	asr	r21
    1e06:	47 95       	ror	r20
    1e08:	8a 95       	dec	r24
    1e0a:	e2 f7       	brpl	.-8      	; 0x1e04 <DIO_u8GetPinValue+0x86>
    1e0c:	ca 01       	movw	r24, r20
    1e0e:	81 70       	andi	r24, 0x01	; 1
    1e10:	ec 81       	ldd	r30, Y+4	; 0x04
    1e12:	fd 81       	ldd	r31, Y+5	; 0x05
    1e14:	80 83       	st	Z, r24
    1e16:	41 c0       	rjmp	.+130    	; 0x1e9a <DIO_u8GetPinValue+0x11c>
			case DIO_u8PORTB: * Copy_Pu8Value = GET_BIT(PINB,Copy_u8Pin); break;
    1e18:	e6 e3       	ldi	r30, 0x36	; 54
    1e1a:	f0 e0       	ldi	r31, 0x00	; 0
    1e1c:	80 81       	ld	r24, Z
    1e1e:	28 2f       	mov	r18, r24
    1e20:	30 e0       	ldi	r19, 0x00	; 0
    1e22:	8b 81       	ldd	r24, Y+3	; 0x03
    1e24:	88 2f       	mov	r24, r24
    1e26:	90 e0       	ldi	r25, 0x00	; 0
    1e28:	a9 01       	movw	r20, r18
    1e2a:	02 c0       	rjmp	.+4      	; 0x1e30 <DIO_u8GetPinValue+0xb2>
    1e2c:	55 95       	asr	r21
    1e2e:	47 95       	ror	r20
    1e30:	8a 95       	dec	r24
    1e32:	e2 f7       	brpl	.-8      	; 0x1e2c <DIO_u8GetPinValue+0xae>
    1e34:	ca 01       	movw	r24, r20
    1e36:	81 70       	andi	r24, 0x01	; 1
    1e38:	ec 81       	ldd	r30, Y+4	; 0x04
    1e3a:	fd 81       	ldd	r31, Y+5	; 0x05
    1e3c:	80 83       	st	Z, r24
    1e3e:	2d c0       	rjmp	.+90     	; 0x1e9a <DIO_u8GetPinValue+0x11c>
			case DIO_u8PORTC: * Copy_Pu8Value = GET_BIT(PINC,Copy_u8Pin); break;
    1e40:	e3 e3       	ldi	r30, 0x33	; 51
    1e42:	f0 e0       	ldi	r31, 0x00	; 0
    1e44:	80 81       	ld	r24, Z
    1e46:	28 2f       	mov	r18, r24
    1e48:	30 e0       	ldi	r19, 0x00	; 0
    1e4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e4c:	88 2f       	mov	r24, r24
    1e4e:	90 e0       	ldi	r25, 0x00	; 0
    1e50:	a9 01       	movw	r20, r18
    1e52:	02 c0       	rjmp	.+4      	; 0x1e58 <DIO_u8GetPinValue+0xda>
    1e54:	55 95       	asr	r21
    1e56:	47 95       	ror	r20
    1e58:	8a 95       	dec	r24
    1e5a:	e2 f7       	brpl	.-8      	; 0x1e54 <DIO_u8GetPinValue+0xd6>
    1e5c:	ca 01       	movw	r24, r20
    1e5e:	81 70       	andi	r24, 0x01	; 1
    1e60:	ec 81       	ldd	r30, Y+4	; 0x04
    1e62:	fd 81       	ldd	r31, Y+5	; 0x05
    1e64:	80 83       	st	Z, r24
    1e66:	19 c0       	rjmp	.+50     	; 0x1e9a <DIO_u8GetPinValue+0x11c>
			case DIO_u8PORTD: * Copy_Pu8Value = GET_BIT(PIND,Copy_u8Pin); break;
    1e68:	e0 e3       	ldi	r30, 0x30	; 48
    1e6a:	f0 e0       	ldi	r31, 0x00	; 0
    1e6c:	80 81       	ld	r24, Z
    1e6e:	28 2f       	mov	r18, r24
    1e70:	30 e0       	ldi	r19, 0x00	; 0
    1e72:	8b 81       	ldd	r24, Y+3	; 0x03
    1e74:	88 2f       	mov	r24, r24
    1e76:	90 e0       	ldi	r25, 0x00	; 0
    1e78:	a9 01       	movw	r20, r18
    1e7a:	02 c0       	rjmp	.+4      	; 0x1e80 <DIO_u8GetPinValue+0x102>
    1e7c:	55 95       	asr	r21
    1e7e:	47 95       	ror	r20
    1e80:	8a 95       	dec	r24
    1e82:	e2 f7       	brpl	.-8      	; 0x1e7c <DIO_u8GetPinValue+0xfe>
    1e84:	ca 01       	movw	r24, r20
    1e86:	81 70       	andi	r24, 0x01	; 1
    1e88:	ec 81       	ldd	r30, Y+4	; 0x04
    1e8a:	fd 81       	ldd	r31, Y+5	; 0x05
    1e8c:	80 83       	st	Z, r24
    1e8e:	05 c0       	rjmp	.+10     	; 0x1e9a <DIO_u8GetPinValue+0x11c>
			default: Local_u8ErrorState =1; break;
    1e90:	81 e0       	ldi	r24, 0x01	; 1
    1e92:	89 83       	std	Y+1, r24	; 0x01
    1e94:	02 c0       	rjmp	.+4      	; 0x1e9a <DIO_u8GetPinValue+0x11c>

			}
	}
	else
	{
		Local_u8ErrorState = 1;
    1e96:	81 e0       	ldi	r24, 0x01	; 1
    1e98:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1e9a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e9c:	27 96       	adiw	r28, 0x07	; 7
    1e9e:	0f b6       	in	r0, 0x3f	; 63
    1ea0:	f8 94       	cli
    1ea2:	de bf       	out	0x3e, r29	; 62
    1ea4:	0f be       	out	0x3f, r0	; 63
    1ea6:	cd bf       	out	0x3d, r28	; 61
    1ea8:	cf 91       	pop	r28
    1eaa:	df 91       	pop	r29
    1eac:	08 95       	ret

00001eae <DIO_u8AndWithPort>:

u8 DIO_u8AndWithPort(u8 Copy_u8port, u8 Copy_u8Value)
{
    1eae:	df 93       	push	r29
    1eb0:	cf 93       	push	r28
    1eb2:	00 d0       	rcall	.+0      	; 0x1eb4 <DIO_u8AndWithPort+0x6>
    1eb4:	00 d0       	rcall	.+0      	; 0x1eb6 <DIO_u8AndWithPort+0x8>
    1eb6:	0f 92       	push	r0
    1eb8:	cd b7       	in	r28, 0x3d	; 61
    1eba:	de b7       	in	r29, 0x3e	; 62
    1ebc:	8a 83       	std	Y+2, r24	; 0x02
    1ebe:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Result = 0;
    1ec0:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8port)
    1ec2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec4:	28 2f       	mov	r18, r24
    1ec6:	30 e0       	ldi	r19, 0x00	; 0
    1ec8:	3d 83       	std	Y+5, r19	; 0x05
    1eca:	2c 83       	std	Y+4, r18	; 0x04
    1ecc:	8c 81       	ldd	r24, Y+4	; 0x04
    1ece:	9d 81       	ldd	r25, Y+5	; 0x05
    1ed0:	81 30       	cpi	r24, 0x01	; 1
    1ed2:	91 05       	cpc	r25, r1
    1ed4:	e1 f0       	breq	.+56     	; 0x1f0e <DIO_u8AndWithPort+0x60>
    1ed6:	2c 81       	ldd	r18, Y+4	; 0x04
    1ed8:	3d 81       	ldd	r19, Y+5	; 0x05
    1eda:	22 30       	cpi	r18, 0x02	; 2
    1edc:	31 05       	cpc	r19, r1
    1ede:	2c f4       	brge	.+10     	; 0x1eea <DIO_u8AndWithPort+0x3c>
    1ee0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ee2:	9d 81       	ldd	r25, Y+5	; 0x05
    1ee4:	00 97       	sbiw	r24, 0x00	; 0
    1ee6:	61 f0       	breq	.+24     	; 0x1f00 <DIO_u8AndWithPort+0x52>
    1ee8:	26 c0       	rjmp	.+76     	; 0x1f36 <DIO_u8AndWithPort+0x88>
    1eea:	2c 81       	ldd	r18, Y+4	; 0x04
    1eec:	3d 81       	ldd	r19, Y+5	; 0x05
    1eee:	22 30       	cpi	r18, 0x02	; 2
    1ef0:	31 05       	cpc	r19, r1
    1ef2:	a1 f0       	breq	.+40     	; 0x1f1c <DIO_u8AndWithPort+0x6e>
    1ef4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ef6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ef8:	83 30       	cpi	r24, 0x03	; 3
    1efa:	91 05       	cpc	r25, r1
    1efc:	b1 f0       	breq	.+44     	; 0x1f2a <DIO_u8AndWithPort+0x7c>
    1efe:	1b c0       	rjmp	.+54     	; 0x1f36 <DIO_u8AndWithPort+0x88>
			{
			case DIO_u8PORTA: Local_u8Result= PORTA & Copy_u8Value; break;
    1f00:	eb e3       	ldi	r30, 0x3B	; 59
    1f02:	f0 e0       	ldi	r31, 0x00	; 0
    1f04:	90 81       	ld	r25, Z
    1f06:	8b 81       	ldd	r24, Y+3	; 0x03
    1f08:	89 23       	and	r24, r25
    1f0a:	89 83       	std	Y+1, r24	; 0x01
    1f0c:	14 c0       	rjmp	.+40     	; 0x1f36 <DIO_u8AndWithPort+0x88>
			case DIO_u8PORTB: Local_u8Result= PORTB & Copy_u8Value; break;
    1f0e:	e8 e3       	ldi	r30, 0x38	; 56
    1f10:	f0 e0       	ldi	r31, 0x00	; 0
    1f12:	90 81       	ld	r25, Z
    1f14:	8b 81       	ldd	r24, Y+3	; 0x03
    1f16:	89 23       	and	r24, r25
    1f18:	89 83       	std	Y+1, r24	; 0x01
    1f1a:	0d c0       	rjmp	.+26     	; 0x1f36 <DIO_u8AndWithPort+0x88>
			case DIO_u8PORTC: Local_u8Result= PORTC & Copy_u8Value; break;
    1f1c:	e5 e3       	ldi	r30, 0x35	; 53
    1f1e:	f0 e0       	ldi	r31, 0x00	; 0
    1f20:	90 81       	ld	r25, Z
    1f22:	8b 81       	ldd	r24, Y+3	; 0x03
    1f24:	89 23       	and	r24, r25
    1f26:	89 83       	std	Y+1, r24	; 0x01
    1f28:	06 c0       	rjmp	.+12     	; 0x1f36 <DIO_u8AndWithPort+0x88>
			case DIO_u8PORTD: Local_u8Result = PORTD & Copy_u8Value; break;
    1f2a:	e2 e3       	ldi	r30, 0x32	; 50
    1f2c:	f0 e0       	ldi	r31, 0x00	; 0
    1f2e:	90 81       	ld	r25, Z
    1f30:	8b 81       	ldd	r24, Y+3	; 0x03
    1f32:	89 23       	and	r24, r25
    1f34:	89 83       	std	Y+1, r24	; 0x01
			default:  break;


			}
	return Local_u8Result;
    1f36:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f38:	0f 90       	pop	r0
    1f3a:	0f 90       	pop	r0
    1f3c:	0f 90       	pop	r0
    1f3e:	0f 90       	pop	r0
    1f40:	0f 90       	pop	r0
    1f42:	cf 91       	pop	r28
    1f44:	df 91       	pop	r29
    1f46:	08 95       	ret

00001f48 <GIE_VoidEnable>:

#include "GIE_interface.h"
#include "GIE_register.h"

void GIE_VoidEnable(void)
{
    1f48:	df 93       	push	r29
    1f4a:	cf 93       	push	r28
    1f4c:	cd b7       	in	r28, 0x3d	; 61
    1f4e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
    1f50:	af e5       	ldi	r26, 0x5F	; 95
    1f52:	b0 e0       	ldi	r27, 0x00	; 0
    1f54:	ef e5       	ldi	r30, 0x5F	; 95
    1f56:	f0 e0       	ldi	r31, 0x00	; 0
    1f58:	80 81       	ld	r24, Z
    1f5a:	80 68       	ori	r24, 0x80	; 128
    1f5c:	8c 93       	st	X, r24
}
    1f5e:	cf 91       	pop	r28
    1f60:	df 91       	pop	r29
    1f62:	08 95       	ret

00001f64 <GIE_VoidDisable>:
void GIE_VoidDisable(void)
{
    1f64:	df 93       	push	r29
    1f66:	cf 93       	push	r28
    1f68:	cd b7       	in	r28, 0x3d	; 61
    1f6a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,SREG_I);
    1f6c:	af e5       	ldi	r26, 0x5F	; 95
    1f6e:	b0 e0       	ldi	r27, 0x00	; 0
    1f70:	ef e5       	ldi	r30, 0x5F	; 95
    1f72:	f0 e0       	ldi	r31, 0x00	; 0
    1f74:	80 81       	ld	r24, Z
    1f76:	8f 77       	andi	r24, 0x7F	; 127
    1f78:	8c 93       	st	X, r24
}
    1f7a:	cf 91       	pop	r28
    1f7c:	df 91       	pop	r29
    1f7e:	08 95       	ret

00001f80 <PORT_VoidInit>:
#include "PORT_interface.h"
#include "PORT_register.h"


void PORT_VoidInit(void)
{
    1f80:	df 93       	push	r29
    1f82:	cf 93       	push	r28
    1f84:	cd b7       	in	r28, 0x3d	; 61
    1f86:	de b7       	in	r29, 0x3e	; 62
	DDRA = PORTA_DIR;
    1f88:	ea e3       	ldi	r30, 0x3A	; 58
    1f8a:	f0 e0       	ldi	r31, 0x00	; 0
    1f8c:	8f ef       	ldi	r24, 0xFF	; 255
    1f8e:	80 83       	st	Z, r24
	DDRB = PORTB_DIR;
    1f90:	e7 e3       	ldi	r30, 0x37	; 55
    1f92:	f0 e0       	ldi	r31, 0x00	; 0
    1f94:	88 e0       	ldi	r24, 0x08	; 8
    1f96:	80 83       	st	Z, r24
	DDRC = PORTC_DIR;
    1f98:	e4 e3       	ldi	r30, 0x34	; 52
    1f9a:	f0 e0       	ldi	r31, 0x00	; 0
    1f9c:	8f ef       	ldi	r24, 0xFF	; 255
    1f9e:	80 83       	st	Z, r24
	DDRD = PORTD_DIR;
    1fa0:	e1 e3       	ldi	r30, 0x31	; 49
    1fa2:	f0 e0       	ldi	r31, 0x00	; 0
    1fa4:	10 82       	st	Z, r1
	
	PORTA = PORTA_INITIAL_VALUE;
    1fa6:	eb e3       	ldi	r30, 0x3B	; 59
    1fa8:	f0 e0       	ldi	r31, 0x00	; 0
    1faa:	10 82       	st	Z, r1
	PORTB = PORTB_INITIAL_VALUE;
    1fac:	e8 e3       	ldi	r30, 0x38	; 56
    1fae:	f0 e0       	ldi	r31, 0x00	; 0
    1fb0:	10 82       	st	Z, r1
	PORTC = PORTC_INITIAL_VALUE;
    1fb2:	e5 e3       	ldi	r30, 0x35	; 53
    1fb4:	f0 e0       	ldi	r31, 0x00	; 0
    1fb6:	10 82       	st	Z, r1
	PORTD = PORTD_INITIAL_VALUE;
    1fb8:	e2 e3       	ldi	r30, 0x32	; 50
    1fba:	f0 e0       	ldi	r31, 0x00	; 0
    1fbc:	10 82       	st	Z, r1


}
    1fbe:	cf 91       	pop	r28
    1fc0:	df 91       	pop	r29
    1fc2:	08 95       	ret

00001fc4 <TIMER0_voidInit>:

static void (*TIMER0_pvCallBackFunc)(void) = NULL;
static void (*ICU_pvCallBackFunc)(void) = NULL;

void TIMER0_voidInit(void)
{
    1fc4:	df 93       	push	r29
    1fc6:	cf 93       	push	r28
    1fc8:	cd b7       	in	r28, 0x3d	; 61
    1fca:	de b7       	in	r29, 0x3e	; 62
	/* Choose fast pwm mode*/
	SET_BIT(TCCR0,TCCR0_WGM00);
    1fcc:	a3 e5       	ldi	r26, 0x53	; 83
    1fce:	b0 e0       	ldi	r27, 0x00	; 0
    1fd0:	e3 e5       	ldi	r30, 0x53	; 83
    1fd2:	f0 e0       	ldi	r31, 0x00	; 0
    1fd4:	80 81       	ld	r24, Z
    1fd6:	80 64       	ori	r24, 0x40	; 64
    1fd8:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_WGM01);
    1fda:	a3 e5       	ldi	r26, 0x53	; 83
    1fdc:	b0 e0       	ldi	r27, 0x00	; 0
    1fde:	e3 e5       	ldi	r30, 0x53	; 83
    1fe0:	f0 e0       	ldi	r31, 0x00	; 0
    1fe2:	80 81       	ld	r24, Z
    1fe4:	88 60       	ori	r24, 0x08	; 8
    1fe6:	8c 93       	st	X, r24

	//	/* output compare match interrupt enable */
	//	SET_BIT(TIMSK,TIMSK_OCIE0);
	//
	/*Set compare match value to 250*/
	OCR0 = 63;
    1fe8:	ec e5       	ldi	r30, 0x5C	; 92
    1fea:	f0 e0       	ldi	r31, 0x00	; 0
    1fec:	8f e3       	ldi	r24, 0x3F	; 63
    1fee:	80 83       	st	Z, r24

	CLR_BIT(TCCR0,4);
    1ff0:	a3 e5       	ldi	r26, 0x53	; 83
    1ff2:	b0 e0       	ldi	r27, 0x00	; 0
    1ff4:	e3 e5       	ldi	r30, 0x53	; 83
    1ff6:	f0 e0       	ldi	r31, 0x00	; 0
    1ff8:	80 81       	ld	r24, Z
    1ffa:	8f 7e       	andi	r24, 0xEF	; 239
    1ffc:	8c 93       	st	X, r24
	SET_BIT(TCCR0,5);
    1ffe:	a3 e5       	ldi	r26, 0x53	; 83
    2000:	b0 e0       	ldi	r27, 0x00	; 0
    2002:	e3 e5       	ldi	r30, 0x53	; 83
    2004:	f0 e0       	ldi	r31, 0x00	; 0
    2006:	80 81       	ld	r24, Z
    2008:	80 62       	ori	r24, 0x20	; 32
    200a:	8c 93       	st	X, r24
	/*prescaller : Division by 64*/
	CLR_BIT(TCCR0,TCCR0_CS00);
    200c:	a3 e5       	ldi	r26, 0x53	; 83
    200e:	b0 e0       	ldi	r27, 0x00	; 0
    2010:	e3 e5       	ldi	r30, 0x53	; 83
    2012:	f0 e0       	ldi	r31, 0x00	; 0
    2014:	80 81       	ld	r24, Z
    2016:	8e 7f       	andi	r24, 0xFE	; 254
    2018:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_CS01);
    201a:	a3 e5       	ldi	r26, 0x53	; 83
    201c:	b0 e0       	ldi	r27, 0x00	; 0
    201e:	e3 e5       	ldi	r30, 0x53	; 83
    2020:	f0 e0       	ldi	r31, 0x00	; 0
    2022:	80 81       	ld	r24, Z
    2024:	82 60       	ori	r24, 0x02	; 2
    2026:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_CS02);
    2028:	a3 e5       	ldi	r26, 0x53	; 83
    202a:	b0 e0       	ldi	r27, 0x00	; 0
    202c:	e3 e5       	ldi	r30, 0x53	; 83
    202e:	f0 e0       	ldi	r31, 0x00	; 0
    2030:	80 81       	ld	r24, Z
    2032:	8e 7f       	andi	r24, 0xFE	; 254
    2034:	8c 93       	st	X, r24

}
    2036:	cf 91       	pop	r28
    2038:	df 91       	pop	r29
    203a:	08 95       	ret

0000203c <TIMER0_SetComMatchValue>:

void TIMER0_SetComMatchValue(u8 Copy_u8Value)
{
    203c:	df 93       	push	r29
    203e:	cf 93       	push	r28
    2040:	0f 92       	push	r0
    2042:	cd b7       	in	r28, 0x3d	; 61
    2044:	de b7       	in	r29, 0x3e	; 62
    2046:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Copy_u8Value;
    2048:	ec e5       	ldi	r30, 0x5C	; 92
    204a:	f0 e0       	ldi	r31, 0x00	; 0
    204c:	89 81       	ldd	r24, Y+1	; 0x01
    204e:	80 83       	st	Z, r24
}
    2050:	0f 90       	pop	r0
    2052:	cf 91       	pop	r28
    2054:	df 91       	pop	r29
    2056:	08 95       	ret

00002058 <TIMER0_u8SetCallBack>:

u8 TIMER0_u8SetCallBack(void(*Copy_pvCallBackFunc)(void))
{
    2058:	df 93       	push	r29
    205a:	cf 93       	push	r28
    205c:	00 d0       	rcall	.+0      	; 0x205e <TIMER0_u8SetCallBack+0x6>
    205e:	0f 92       	push	r0
    2060:	cd b7       	in	r28, 0x3d	; 61
    2062:	de b7       	in	r29, 0x3e	; 62
    2064:	9b 83       	std	Y+3, r25	; 0x03
    2066:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStatus = OK;
    2068:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvCallBackFunc != NULL)
    206a:	8a 81       	ldd	r24, Y+2	; 0x02
    206c:	9b 81       	ldd	r25, Y+3	; 0x03
    206e:	00 97       	sbiw	r24, 0x00	; 0
    2070:	39 f0       	breq	.+14     	; 0x2080 <TIMER0_u8SetCallBack+0x28>
	{
		TIMER0_pvCallBackFunc = Copy_pvCallBackFunc;
    2072:	8a 81       	ldd	r24, Y+2	; 0x02
    2074:	9b 81       	ldd	r25, Y+3	; 0x03
    2076:	90 93 7f 01 	sts	0x017F, r25
    207a:	80 93 7e 01 	sts	0x017E, r24
    207e:	02 c0       	rjmp	.+4      	; 0x2084 <TIMER0_u8SetCallBack+0x2c>
	}
	else
	{
		Local_u8ErrorStatus = NULL_POINTER;
    2080:	82 e0       	ldi	r24, 0x02	; 2
    2082:	89 83       	std	Y+1, r24	; 0x01

	}


	return Local_u8ErrorStatus;
    2084:	89 81       	ldd	r24, Y+1	; 0x01

}
    2086:	0f 90       	pop	r0
    2088:	0f 90       	pop	r0
    208a:	0f 90       	pop	r0
    208c:	cf 91       	pop	r28
    208e:	df 91       	pop	r29
    2090:	08 95       	ret

00002092 <TIMER1_voidInit>:
/******************************************************************************/
void TIMER1_voidInit(void)
{
    2092:	df 93       	push	r29
    2094:	cf 93       	push	r28
    2096:	cd b7       	in	r28, 0x3d	; 61
    2098:	de b7       	in	r29, 0x3e	; 62
	//	CLR_BIT(TCCR1A,TCCR1A_WGM10);
	//	SET_BIT(TCCR1A,TCCR1A_WGM11);
	//	SET_BIT(TCCR1B,TCCR1B_WGM12);
	//	SET_BIT(TCCR1B,TCCR1B_WGM13);
	/* Setting prescaller */
	TCCR1B &= PRESCALER_MASK;
    209a:	ae e4       	ldi	r26, 0x4E	; 78
    209c:	b0 e0       	ldi	r27, 0x00	; 0
    209e:	ee e4       	ldi	r30, 0x4E	; 78
    20a0:	f0 e0       	ldi	r31, 0x00	; 0
    20a2:	80 81       	ld	r24, Z
    20a4:	88 7f       	andi	r24, 0xF8	; 248
    20a6:	8c 93       	st	X, r24
	TCCR1B |= DIVIDE_BY_8;
    20a8:	ae e4       	ldi	r26, 0x4E	; 78
    20aa:	b0 e0       	ldi	r27, 0x00	; 0
    20ac:	ee e4       	ldi	r30, 0x4E	; 78
    20ae:	f0 e0       	ldi	r31, 0x00	; 0
    20b0:	80 81       	ld	r24, Z
    20b2:	82 60       	ori	r24, 0x02	; 2
    20b4:	8c 93       	st	X, r24


}
    20b6:	cf 91       	pop	r28
    20b8:	df 91       	pop	r29
    20ba:	08 95       	ret

000020bc <TIMER1_VoidSetTimerValue>:

void TIMER1_VoidSetTimerValue(u16 Copy_u16Value)
{
    20bc:	df 93       	push	r29
    20be:	cf 93       	push	r28
    20c0:	00 d0       	rcall	.+0      	; 0x20c2 <TIMER1_VoidSetTimerValue+0x6>
    20c2:	cd b7       	in	r28, 0x3d	; 61
    20c4:	de b7       	in	r29, 0x3e	; 62
    20c6:	9a 83       	std	Y+2, r25	; 0x02
    20c8:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = Copy_u16Value;
    20ca:	ec e4       	ldi	r30, 0x4C	; 76
    20cc:	f0 e0       	ldi	r31, 0x00	; 0
    20ce:	89 81       	ldd	r24, Y+1	; 0x01
    20d0:	9a 81       	ldd	r25, Y+2	; 0x02
    20d2:	91 83       	std	Z+1, r25	; 0x01
    20d4:	80 83       	st	Z, r24
}
    20d6:	0f 90       	pop	r0
    20d8:	0f 90       	pop	r0
    20da:	cf 91       	pop	r28
    20dc:	df 91       	pop	r29
    20de:	08 95       	ret

000020e0 <Timer1_u16ReadTimerValue>:

u16 Timer1_u16ReadTimerValue(void)
{
    20e0:	df 93       	push	r29
    20e2:	cf 93       	push	r28
    20e4:	cd b7       	in	r28, 0x3d	; 61
    20e6:	de b7       	in	r29, 0x3e	; 62
	return TCNT1;
    20e8:	ec e4       	ldi	r30, 0x4C	; 76
    20ea:	f0 e0       	ldi	r31, 0x00	; 0
    20ec:	80 81       	ld	r24, Z
    20ee:	91 81       	ldd	r25, Z+1	; 0x01
}
    20f0:	cf 91       	pop	r28
    20f2:	df 91       	pop	r29
    20f4:	08 95       	ret

000020f6 <TIMER1_voidSetICR>:
void TIMER1_voidSetICR(u16 Copt_u16TOP)
{
    20f6:	df 93       	push	r29
    20f8:	cf 93       	push	r28
    20fa:	00 d0       	rcall	.+0      	; 0x20fc <TIMER1_voidSetICR+0x6>
    20fc:	cd b7       	in	r28, 0x3d	; 61
    20fe:	de b7       	in	r29, 0x3e	; 62
    2100:	9a 83       	std	Y+2, r25	; 0x02
    2102:	89 83       	std	Y+1, r24	; 0x01
	ICR1 = Copt_u16TOP;
    2104:	e6 e4       	ldi	r30, 0x46	; 70
    2106:	f0 e0       	ldi	r31, 0x00	; 0
    2108:	89 81       	ldd	r24, Y+1	; 0x01
    210a:	9a 81       	ldd	r25, Y+2	; 0x02
    210c:	91 83       	std	Z+1, r25	; 0x01
    210e:	80 83       	st	Z, r24

}
    2110:	0f 90       	pop	r0
    2112:	0f 90       	pop	r0
    2114:	cf 91       	pop	r28
    2116:	df 91       	pop	r29
    2118:	08 95       	ret

0000211a <TIMER1_SetChannelAComMatchValue>:

void TIMER1_SetChannelAComMatchValue(u16 Copy_u16CompareMatch)
{
    211a:	df 93       	push	r29
    211c:	cf 93       	push	r28
    211e:	00 d0       	rcall	.+0      	; 0x2120 <TIMER1_SetChannelAComMatchValue+0x6>
    2120:	cd b7       	in	r28, 0x3d	; 61
    2122:	de b7       	in	r29, 0x3e	; 62
    2124:	9a 83       	std	Y+2, r25	; 0x02
    2126:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = Copy_u16CompareMatch;
    2128:	ea e4       	ldi	r30, 0x4A	; 74
    212a:	f0 e0       	ldi	r31, 0x00	; 0
    212c:	89 81       	ldd	r24, Y+1	; 0x01
    212e:	9a 81       	ldd	r25, Y+2	; 0x02
    2130:	91 83       	std	Z+1, r25	; 0x01
    2132:	80 83       	st	Z, r24

}
    2134:	0f 90       	pop	r0
    2136:	0f 90       	pop	r0
    2138:	cf 91       	pop	r28
    213a:	df 91       	pop	r29
    213c:	08 95       	ret

0000213e <ICU_voidInit>:


void ICU_voidInit(void)
{
    213e:	df 93       	push	r29
    2140:	cf 93       	push	r28
    2142:	cd b7       	in	r28, 0x3d	; 61
    2144:	de b7       	in	r29, 0x3e	; 62
	/* Set trigger source to rising edge initially */
	SET_BIT(TCCR1B,TCCR1B_ICES1);
    2146:	ae e4       	ldi	r26, 0x4E	; 78
    2148:	b0 e0       	ldi	r27, 0x00	; 0
    214a:	ee e4       	ldi	r30, 0x4E	; 78
    214c:	f0 e0       	ldi	r31, 0x00	; 0
    214e:	80 81       	ld	r24, Z
    2150:	80 64       	ori	r24, 0x40	; 64
    2152:	8c 93       	st	X, r24

	/* Enable Input Capture interrupt */
	SET_BIT(TIMSK,TIMSK_TICIE1);
    2154:	a9 e5       	ldi	r26, 0x59	; 89
    2156:	b0 e0       	ldi	r27, 0x00	; 0
    2158:	e9 e5       	ldi	r30, 0x59	; 89
    215a:	f0 e0       	ldi	r31, 0x00	; 0
    215c:	80 81       	ld	r24, Z
    215e:	80 62       	ori	r24, 0x20	; 32
    2160:	8c 93       	st	X, r24
}
    2162:	cf 91       	pop	r28
    2164:	df 91       	pop	r29
    2166:	08 95       	ret

00002168 <ICU_u8SetTriggerEdge>:

u8 ICU_u8SetTriggerEdge(u8 Copy_u8Edge)
{
    2168:	df 93       	push	r29
    216a:	cf 93       	push	r28
    216c:	00 d0       	rcall	.+0      	; 0x216e <ICU_u8SetTriggerEdge+0x6>
    216e:	cd b7       	in	r28, 0x3d	; 61
    2170:	de b7       	in	r29, 0x3e	; 62
    2172:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    2174:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8Edge == ICU_RISING_EDGE)
    2176:	8a 81       	ldd	r24, Y+2	; 0x02
    2178:	81 30       	cpi	r24, 0x01	; 1
    217a:	41 f4       	brne	.+16     	; 0x218c <ICU_u8SetTriggerEdge+0x24>
	{
		SET_BIT(TCCR1B,TCCR1B_ICES1);
    217c:	ae e4       	ldi	r26, 0x4E	; 78
    217e:	b0 e0       	ldi	r27, 0x00	; 0
    2180:	ee e4       	ldi	r30, 0x4E	; 78
    2182:	f0 e0       	ldi	r31, 0x00	; 0
    2184:	80 81       	ld	r24, Z
    2186:	80 64       	ori	r24, 0x40	; 64
    2188:	8c 93       	st	X, r24
    218a:	0d c0       	rjmp	.+26     	; 0x21a6 <ICU_u8SetTriggerEdge+0x3e>
	}
	else if (Copy_u8Edge == ICU_FALLING_EDGE)
    218c:	8a 81       	ldd	r24, Y+2	; 0x02
    218e:	88 23       	and	r24, r24
    2190:	41 f4       	brne	.+16     	; 0x21a2 <ICU_u8SetTriggerEdge+0x3a>
	{
		CLR_BIT(TCCR1B,TCCR1B_ICES1);
    2192:	ae e4       	ldi	r26, 0x4E	; 78
    2194:	b0 e0       	ldi	r27, 0x00	; 0
    2196:	ee e4       	ldi	r30, 0x4E	; 78
    2198:	f0 e0       	ldi	r31, 0x00	; 0
    219a:	80 81       	ld	r24, Z
    219c:	8f 7b       	andi	r24, 0xBF	; 191
    219e:	8c 93       	st	X, r24
    21a0:	02 c0       	rjmp	.+4      	; 0x21a6 <ICU_u8SetTriggerEdge+0x3e>
	}
	else
	{
		Local_u8ErrorState = NOK;
    21a2:	81 e0       	ldi	r24, 0x01	; 1
    21a4:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    21a6:	89 81       	ldd	r24, Y+1	; 0x01
}
    21a8:	0f 90       	pop	r0
    21aa:	0f 90       	pop	r0
    21ac:	cf 91       	pop	r28
    21ae:	df 91       	pop	r29
    21b0:	08 95       	ret

000021b2 <ICU_voidEnableInterrupt>:

void ICU_voidEnableInterrupt(void)
{
    21b2:	df 93       	push	r29
    21b4:	cf 93       	push	r28
    21b6:	cd b7       	in	r28, 0x3d	; 61
    21b8:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TIMSK_TICIE1);
    21ba:	a9 e5       	ldi	r26, 0x59	; 89
    21bc:	b0 e0       	ldi	r27, 0x00	; 0
    21be:	e9 e5       	ldi	r30, 0x59	; 89
    21c0:	f0 e0       	ldi	r31, 0x00	; 0
    21c2:	80 81       	ld	r24, Z
    21c4:	80 62       	ori	r24, 0x20	; 32
    21c6:	8c 93       	st	X, r24
}
    21c8:	cf 91       	pop	r28
    21ca:	df 91       	pop	r29
    21cc:	08 95       	ret

000021ce <ICU_voidDisableInterrupt>:
void ICU_voidDisableInterrupt(void)
{
    21ce:	df 93       	push	r29
    21d0:	cf 93       	push	r28
    21d2:	cd b7       	in	r28, 0x3d	; 61
    21d4:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TIMSK_TICIE1);
    21d6:	a9 e5       	ldi	r26, 0x59	; 89
    21d8:	b0 e0       	ldi	r27, 0x00	; 0
    21da:	e9 e5       	ldi	r30, 0x59	; 89
    21dc:	f0 e0       	ldi	r31, 0x00	; 0
    21de:	80 81       	ld	r24, Z
    21e0:	8f 7d       	andi	r24, 0xDF	; 223
    21e2:	8c 93       	st	X, r24
}
    21e4:	cf 91       	pop	r28
    21e6:	df 91       	pop	r29
    21e8:	08 95       	ret

000021ea <ICU_u16ReadInputCapture>:

u16 ICU_u16ReadInputCapture(void)
{
    21ea:	df 93       	push	r29
    21ec:	cf 93       	push	r28
    21ee:	cd b7       	in	r28, 0x3d	; 61
    21f0:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    21f2:	e6 e4       	ldi	r30, 0x46	; 70
    21f4:	f0 e0       	ldi	r31, 0x00	; 0
    21f6:	80 81       	ld	r24, Z
    21f8:	91 81       	ldd	r25, Z+1	; 0x01
}
    21fa:	cf 91       	pop	r28
    21fc:	df 91       	pop	r29
    21fe:	08 95       	ret

00002200 <ICU_u8SetCallBack>:

u8 ICU_u8SetCallBack(void (*Copy_pvCallBackFunc)(void))
{
    2200:	df 93       	push	r29
    2202:	cf 93       	push	r28
    2204:	00 d0       	rcall	.+0      	; 0x2206 <ICU_u8SetCallBack+0x6>
    2206:	0f 92       	push	r0
    2208:	cd b7       	in	r28, 0x3d	; 61
    220a:	de b7       	in	r29, 0x3e	; 62
    220c:	9b 83       	std	Y+3, r25	; 0x03
    220e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    2210:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvCallBackFunc != NULL)
    2212:	8a 81       	ldd	r24, Y+2	; 0x02
    2214:	9b 81       	ldd	r25, Y+3	; 0x03
    2216:	00 97       	sbiw	r24, 0x00	; 0
    2218:	39 f0       	breq	.+14     	; 0x2228 <ICU_u8SetCallBack+0x28>
	{
		ICU_pvCallBackFunc = Copy_pvCallBackFunc;
    221a:	8a 81       	ldd	r24, Y+2	; 0x02
    221c:	9b 81       	ldd	r25, Y+3	; 0x03
    221e:	90 93 81 01 	sts	0x0181, r25
    2222:	80 93 80 01 	sts	0x0180, r24
    2226:	02 c0       	rjmp	.+4      	; 0x222c <ICU_u8SetCallBack+0x2c>
	}
	else
	{
		Local_u8ErrorState = NULL_POINTER;
    2228:	82 e0       	ldi	r24, 0x02	; 2
    222a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    222c:	89 81       	ldd	r24, Y+1	; 0x01
}
    222e:	0f 90       	pop	r0
    2230:	0f 90       	pop	r0
    2232:	0f 90       	pop	r0
    2234:	cf 91       	pop	r28
    2236:	df 91       	pop	r29
    2238:	08 95       	ret

0000223a <__vector_10>:

/********************************* ISR ***********************************/

void __vector_10 (void) __attribute__((signal));
void __vector_10 (void)
{
    223a:	1f 92       	push	r1
    223c:	0f 92       	push	r0
    223e:	0f b6       	in	r0, 0x3f	; 63
    2240:	0f 92       	push	r0
    2242:	11 24       	eor	r1, r1
    2244:	2f 93       	push	r18
    2246:	3f 93       	push	r19
    2248:	4f 93       	push	r20
    224a:	5f 93       	push	r21
    224c:	6f 93       	push	r22
    224e:	7f 93       	push	r23
    2250:	8f 93       	push	r24
    2252:	9f 93       	push	r25
    2254:	af 93       	push	r26
    2256:	bf 93       	push	r27
    2258:	ef 93       	push	r30
    225a:	ff 93       	push	r31
    225c:	df 93       	push	r29
    225e:	cf 93       	push	r28
    2260:	cd b7       	in	r28, 0x3d	; 61
    2262:	de b7       	in	r29, 0x3e	; 62
	if(TIMER0_pvCallBackFunc != NULL)
    2264:	80 91 7e 01 	lds	r24, 0x017E
    2268:	90 91 7f 01 	lds	r25, 0x017F
    226c:	00 97       	sbiw	r24, 0x00	; 0
    226e:	29 f0       	breq	.+10     	; 0x227a <__vector_10+0x40>
	{
		TIMER0_pvCallBackFunc();
    2270:	e0 91 7e 01 	lds	r30, 0x017E
    2274:	f0 91 7f 01 	lds	r31, 0x017F
    2278:	09 95       	icall
	}
}
    227a:	cf 91       	pop	r28
    227c:	df 91       	pop	r29
    227e:	ff 91       	pop	r31
    2280:	ef 91       	pop	r30
    2282:	bf 91       	pop	r27
    2284:	af 91       	pop	r26
    2286:	9f 91       	pop	r25
    2288:	8f 91       	pop	r24
    228a:	7f 91       	pop	r23
    228c:	6f 91       	pop	r22
    228e:	5f 91       	pop	r21
    2290:	4f 91       	pop	r20
    2292:	3f 91       	pop	r19
    2294:	2f 91       	pop	r18
    2296:	0f 90       	pop	r0
    2298:	0f be       	out	0x3f, r0	; 63
    229a:	0f 90       	pop	r0
    229c:	1f 90       	pop	r1
    229e:	18 95       	reti

000022a0 <__vector_6>:
/********************** ICU_ISR  *****************************************/
void __vector_6 (void) __attribute__((signal));
void __vector_6 (void)
{
    22a0:	1f 92       	push	r1
    22a2:	0f 92       	push	r0
    22a4:	0f b6       	in	r0, 0x3f	; 63
    22a6:	0f 92       	push	r0
    22a8:	11 24       	eor	r1, r1
    22aa:	2f 93       	push	r18
    22ac:	3f 93       	push	r19
    22ae:	4f 93       	push	r20
    22b0:	5f 93       	push	r21
    22b2:	6f 93       	push	r22
    22b4:	7f 93       	push	r23
    22b6:	8f 93       	push	r24
    22b8:	9f 93       	push	r25
    22ba:	af 93       	push	r26
    22bc:	bf 93       	push	r27
    22be:	ef 93       	push	r30
    22c0:	ff 93       	push	r31
    22c2:	df 93       	push	r29
    22c4:	cf 93       	push	r28
    22c6:	cd b7       	in	r28, 0x3d	; 61
    22c8:	de b7       	in	r29, 0x3e	; 62
	if(ICU_pvCallBackFunc != NULL)
    22ca:	80 91 80 01 	lds	r24, 0x0180
    22ce:	90 91 81 01 	lds	r25, 0x0181
    22d2:	00 97       	sbiw	r24, 0x00	; 0
    22d4:	29 f0       	breq	.+10     	; 0x22e0 <__vector_6+0x40>
	{
		ICU_pvCallBackFunc();
    22d6:	e0 91 80 01 	lds	r30, 0x0180
    22da:	f0 91 81 01 	lds	r31, 0x0181
    22de:	09 95       	icall
	}
}
    22e0:	cf 91       	pop	r28
    22e2:	df 91       	pop	r29
    22e4:	ff 91       	pop	r31
    22e6:	ef 91       	pop	r30
    22e8:	bf 91       	pop	r27
    22ea:	af 91       	pop	r26
    22ec:	9f 91       	pop	r25
    22ee:	8f 91       	pop	r24
    22f0:	7f 91       	pop	r23
    22f2:	6f 91       	pop	r22
    22f4:	5f 91       	pop	r21
    22f6:	4f 91       	pop	r20
    22f8:	3f 91       	pop	r19
    22fa:	2f 91       	pop	r18
    22fc:	0f 90       	pop	r0
    22fe:	0f be       	out	0x3f, r0	; 63
    2300:	0f 90       	pop	r0
    2302:	1f 90       	pop	r1
    2304:	18 95       	reti

00002306 <main>:
static u16 OnTicks = 0;
void ICU_HW (void);

/************************ Main Prog *******************************/
void main(void)
{
    2306:	df 93       	push	r29
    2308:	cf 93       	push	r28
    230a:	cd b7       	in	r28, 0x3d	; 61
    230c:	de b7       	in	r29, 0x3e	; 62
	/****************** Local Variables **************************/



	/******************** Driver Init ***************************/
	PORT_VoidInit();
    230e:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <PORT_VoidInit>

	ICU_u8SetCallBack(&ICU_HW);
    2312:	80 ea       	ldi	r24, 0xA0	; 160
    2314:	91 e1       	ldi	r25, 0x11	; 17
    2316:	0e 94 00 11 	call	0x2200	; 0x2200 <ICU_u8SetCallBack>
	ICU_voidInit();
    231a:	0e 94 9f 10 	call	0x213e	; 0x213e <ICU_voidInit>

	TIMER1_voidInit();
    231e:	0e 94 49 10 	call	0x2092	; 0x2092 <TIMER1_voidInit>
	TIMER0_voidInit();
    2322:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <TIMER0_voidInit>

	CLCD_voidInit();
    2326:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <CLCD_voidInit>

	GIE_VoidEnable();
    232a:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <GIE_VoidEnable>

	/********************            *****************************/

	while(1)
	{
		CLCD_voidGoToXY(0,0);
    232e:	80 e0       	ldi	r24, 0x00	; 0
    2330:	60 e0       	ldi	r22, 0x00	; 0
    2332:	0e 94 97 0b 	call	0x172e	; 0x172e <CLCD_voidGoToXY>

		CLCD_voidSendString("Hello Hassan Gooood");
    2336:	80 e6       	ldi	r24, 0x60	; 96
    2338:	90 e0       	ldi	r25, 0x00	; 0
    233a:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <CLCD_voidSendString>
    233e:	f7 cf       	rjmp	.-18     	; 0x232e <main+0x28>

00002340 <ICU_HW>:

}

/******************************* ISR **********************************/
void ICU_HW (void)
{
    2340:	df 93       	push	r29
    2342:	cf 93       	push	r28
    2344:	cd b7       	in	r28, 0x3d	; 61
    2346:	de b7       	in	r29, 0x3e	; 62
	static u16 Reading1, Reading2, Reading3;
	static u8 Local_u8Counter = 0;
	Local_u8Counter ++;
    2348:	80 91 86 01 	lds	r24, 0x0186
    234c:	8f 5f       	subi	r24, 0xFF	; 255
    234e:	80 93 86 01 	sts	0x0186, r24

	if(Local_u8Counter == 1 )
    2352:	80 91 86 01 	lds	r24, 0x0186
    2356:	81 30       	cpi	r24, 0x01	; 1
    2358:	39 f4       	brne	.+14     	; 0x2368 <ICU_HW+0x28>
	{
		Reading1 = ICU_u16ReadInputCapture();
    235a:	0e 94 f5 10 	call	0x21ea	; 0x21ea <ICU_u16ReadInputCapture>
    235e:	90 93 8c 01 	sts	0x018C, r25
    2362:	80 93 8b 01 	sts	0x018B, r24
    2366:	1d c0       	rjmp	.+58     	; 0x23a2 <ICU_HW+0x62>

	}
	else if(Local_u8Counter == 2 )
    2368:	80 91 86 01 	lds	r24, 0x0186
    236c:	82 30       	cpi	r24, 0x02	; 2
    236e:	c9 f4       	brne	.+50     	; 0x23a2 <ICU_HW+0x62>
	{
		Reading2 = ICU_u16ReadInputCapture();
    2370:	0e 94 f5 10 	call	0x21ea	; 0x21ea <ICU_u16ReadInputCapture>
    2374:	90 93 8a 01 	sts	0x018A, r25
    2378:	80 93 89 01 	sts	0x0189, r24
		PeriodTicks = Reading2 - Reading1;
    237c:	20 91 89 01 	lds	r18, 0x0189
    2380:	30 91 8a 01 	lds	r19, 0x018A
    2384:	80 91 8b 01 	lds	r24, 0x018B
    2388:	90 91 8c 01 	lds	r25, 0x018C
    238c:	a9 01       	movw	r20, r18
    238e:	48 1b       	sub	r20, r24
    2390:	59 0b       	sbc	r21, r25
    2392:	ca 01       	movw	r24, r20
    2394:	90 93 83 01 	sts	0x0183, r25
    2398:	80 93 82 01 	sts	0x0182, r24
		ICU_u8SetTriggerEdge(ICU_FALLING_EDGE);
    239c:	80 e0       	ldi	r24, 0x00	; 0
    239e:	0e 94 b4 10 	call	0x2168	; 0x2168 <ICU_u8SetTriggerEdge>

	}
	if(Local_u8Counter == 3 )
    23a2:	80 91 86 01 	lds	r24, 0x0186
    23a6:	83 30       	cpi	r24, 0x03	; 3
    23a8:	c1 f4       	brne	.+48     	; 0x23da <ICU_HW+0x9a>
	{
		Reading3 = ICU_u16ReadInputCapture();
    23aa:	0e 94 f5 10 	call	0x21ea	; 0x21ea <ICU_u16ReadInputCapture>
    23ae:	90 93 88 01 	sts	0x0188, r25
    23b2:	80 93 87 01 	sts	0x0187, r24
		OnTicks = Reading3 -Reading2;
    23b6:	20 91 87 01 	lds	r18, 0x0187
    23ba:	30 91 88 01 	lds	r19, 0x0188
    23be:	80 91 89 01 	lds	r24, 0x0189
    23c2:	90 91 8a 01 	lds	r25, 0x018A
    23c6:	a9 01       	movw	r20, r18
    23c8:	48 1b       	sub	r20, r24
    23ca:	59 0b       	sbc	r21, r25
    23cc:	ca 01       	movw	r24, r20
    23ce:	90 93 85 01 	sts	0x0185, r25
    23d2:	80 93 84 01 	sts	0x0184, r24
		ICU_voidDisableInterrupt();
    23d6:	0e 94 e7 10 	call	0x21ce	; 0x21ce <ICU_voidDisableInterrupt>

	}
}
    23da:	cf 91       	pop	r28
    23dc:	df 91       	pop	r29
    23de:	08 95       	ret

000023e0 <__divmodsi4>:
    23e0:	97 fb       	bst	r25, 7
    23e2:	09 2e       	mov	r0, r25
    23e4:	05 26       	eor	r0, r21
    23e6:	0e d0       	rcall	.+28     	; 0x2404 <__divmodsi4_neg1>
    23e8:	57 fd       	sbrc	r21, 7
    23ea:	04 d0       	rcall	.+8      	; 0x23f4 <__divmodsi4_neg2>
    23ec:	14 d0       	rcall	.+40     	; 0x2416 <__udivmodsi4>
    23ee:	0a d0       	rcall	.+20     	; 0x2404 <__divmodsi4_neg1>
    23f0:	00 1c       	adc	r0, r0
    23f2:	38 f4       	brcc	.+14     	; 0x2402 <__divmodsi4_exit>

000023f4 <__divmodsi4_neg2>:
    23f4:	50 95       	com	r21
    23f6:	40 95       	com	r20
    23f8:	30 95       	com	r19
    23fa:	21 95       	neg	r18
    23fc:	3f 4f       	sbci	r19, 0xFF	; 255
    23fe:	4f 4f       	sbci	r20, 0xFF	; 255
    2400:	5f 4f       	sbci	r21, 0xFF	; 255

00002402 <__divmodsi4_exit>:
    2402:	08 95       	ret

00002404 <__divmodsi4_neg1>:
    2404:	f6 f7       	brtc	.-4      	; 0x2402 <__divmodsi4_exit>
    2406:	90 95       	com	r25
    2408:	80 95       	com	r24
    240a:	70 95       	com	r23
    240c:	61 95       	neg	r22
    240e:	7f 4f       	sbci	r23, 0xFF	; 255
    2410:	8f 4f       	sbci	r24, 0xFF	; 255
    2412:	9f 4f       	sbci	r25, 0xFF	; 255
    2414:	08 95       	ret

00002416 <__udivmodsi4>:
    2416:	a1 e2       	ldi	r26, 0x21	; 33
    2418:	1a 2e       	mov	r1, r26
    241a:	aa 1b       	sub	r26, r26
    241c:	bb 1b       	sub	r27, r27
    241e:	fd 01       	movw	r30, r26
    2420:	0d c0       	rjmp	.+26     	; 0x243c <__udivmodsi4_ep>

00002422 <__udivmodsi4_loop>:
    2422:	aa 1f       	adc	r26, r26
    2424:	bb 1f       	adc	r27, r27
    2426:	ee 1f       	adc	r30, r30
    2428:	ff 1f       	adc	r31, r31
    242a:	a2 17       	cp	r26, r18
    242c:	b3 07       	cpc	r27, r19
    242e:	e4 07       	cpc	r30, r20
    2430:	f5 07       	cpc	r31, r21
    2432:	20 f0       	brcs	.+8      	; 0x243c <__udivmodsi4_ep>
    2434:	a2 1b       	sub	r26, r18
    2436:	b3 0b       	sbc	r27, r19
    2438:	e4 0b       	sbc	r30, r20
    243a:	f5 0b       	sbc	r31, r21

0000243c <__udivmodsi4_ep>:
    243c:	66 1f       	adc	r22, r22
    243e:	77 1f       	adc	r23, r23
    2440:	88 1f       	adc	r24, r24
    2442:	99 1f       	adc	r25, r25
    2444:	1a 94       	dec	r1
    2446:	69 f7       	brne	.-38     	; 0x2422 <__udivmodsi4_loop>
    2448:	60 95       	com	r22
    244a:	70 95       	com	r23
    244c:	80 95       	com	r24
    244e:	90 95       	com	r25
    2450:	9b 01       	movw	r18, r22
    2452:	ac 01       	movw	r20, r24
    2454:	bd 01       	movw	r22, r26
    2456:	cf 01       	movw	r24, r30
    2458:	08 95       	ret

0000245a <__prologue_saves__>:
    245a:	2f 92       	push	r2
    245c:	3f 92       	push	r3
    245e:	4f 92       	push	r4
    2460:	5f 92       	push	r5
    2462:	6f 92       	push	r6
    2464:	7f 92       	push	r7
    2466:	8f 92       	push	r8
    2468:	9f 92       	push	r9
    246a:	af 92       	push	r10
    246c:	bf 92       	push	r11
    246e:	cf 92       	push	r12
    2470:	df 92       	push	r13
    2472:	ef 92       	push	r14
    2474:	ff 92       	push	r15
    2476:	0f 93       	push	r16
    2478:	1f 93       	push	r17
    247a:	cf 93       	push	r28
    247c:	df 93       	push	r29
    247e:	cd b7       	in	r28, 0x3d	; 61
    2480:	de b7       	in	r29, 0x3e	; 62
    2482:	ca 1b       	sub	r28, r26
    2484:	db 0b       	sbc	r29, r27
    2486:	0f b6       	in	r0, 0x3f	; 63
    2488:	f8 94       	cli
    248a:	de bf       	out	0x3e, r29	; 62
    248c:	0f be       	out	0x3f, r0	; 63
    248e:	cd bf       	out	0x3d, r28	; 61
    2490:	09 94       	ijmp

00002492 <__epilogue_restores__>:
    2492:	2a 88       	ldd	r2, Y+18	; 0x12
    2494:	39 88       	ldd	r3, Y+17	; 0x11
    2496:	48 88       	ldd	r4, Y+16	; 0x10
    2498:	5f 84       	ldd	r5, Y+15	; 0x0f
    249a:	6e 84       	ldd	r6, Y+14	; 0x0e
    249c:	7d 84       	ldd	r7, Y+13	; 0x0d
    249e:	8c 84       	ldd	r8, Y+12	; 0x0c
    24a0:	9b 84       	ldd	r9, Y+11	; 0x0b
    24a2:	aa 84       	ldd	r10, Y+10	; 0x0a
    24a4:	b9 84       	ldd	r11, Y+9	; 0x09
    24a6:	c8 84       	ldd	r12, Y+8	; 0x08
    24a8:	df 80       	ldd	r13, Y+7	; 0x07
    24aa:	ee 80       	ldd	r14, Y+6	; 0x06
    24ac:	fd 80       	ldd	r15, Y+5	; 0x05
    24ae:	0c 81       	ldd	r16, Y+4	; 0x04
    24b0:	1b 81       	ldd	r17, Y+3	; 0x03
    24b2:	aa 81       	ldd	r26, Y+2	; 0x02
    24b4:	b9 81       	ldd	r27, Y+1	; 0x01
    24b6:	ce 0f       	add	r28, r30
    24b8:	d1 1d       	adc	r29, r1
    24ba:	0f b6       	in	r0, 0x3f	; 63
    24bc:	f8 94       	cli
    24be:	de bf       	out	0x3e, r29	; 62
    24c0:	0f be       	out	0x3f, r0	; 63
    24c2:	cd bf       	out	0x3d, r28	; 61
    24c4:	ed 01       	movw	r28, r26
    24c6:	08 95       	ret

000024c8 <_exit>:
    24c8:	f8 94       	cli

000024ca <__stop_program>:
    24ca:	ff cf       	rjmp	.-2      	; 0x24ca <__stop_program>
