
RTOS_TCB.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000cf8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000022  00800060  00800060  00000d6c  2**0
                  ALLOC
  2 .stab         00001278  00000000  00000000  00000d6c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000008b0  00000000  00000000  00001fe4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 75 05 	jmp	0xaea	; 0xaea <__vector_10>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 38       	cpi	r26, 0x82	; 130
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 d2 05 	call	0xba4	; 0xba4 <main>
  74:	0c 94 7a 06 	jmp	0xcf4	; 0xcf4 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DIO_u8SetPinValue>:
//
//	return Local_u8ErrorState;
//}

u8 DIO_u8SetPinValue(u8 Copy_u8port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
  84:	28 97       	sbiw	r28, 0x08	; 8
  86:	0f b6       	in	r0, 0x3f	; 63
  88:	f8 94       	cli
  8a:	de bf       	out	0x3e, r29	; 62
  8c:	0f be       	out	0x3f, r0	; 63
  8e:	cd bf       	out	0x3d, r28	; 61
  90:	8a 83       	std	Y+2, r24	; 0x02
  92:	6b 83       	std	Y+3, r22	; 0x03
  94:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
  96:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin<=DIO_u8PIN7)
  98:	8b 81       	ldd	r24, Y+3	; 0x03
  9a:	88 30       	cpi	r24, 0x08	; 8
  9c:	08 f0       	brcs	.+2      	; 0xa0 <DIO_u8SetPinValue+0x24>
  9e:	f4 c0       	rjmp	.+488    	; 0x288 <DIO_u8SetPinValue+0x20c>
	{
		if(Copy_u8Value == DIO_u8PIN_LOW)
  a0:	8c 81       	ldd	r24, Y+4	; 0x04
  a2:	88 23       	and	r24, r24
  a4:	09 f0       	breq	.+2      	; 0xa8 <DIO_u8SetPinValue+0x2c>
  a6:	77 c0       	rjmp	.+238    	; 0x196 <DIO_u8SetPinValue+0x11a>
		{

			switch(Copy_u8port)
  a8:	8a 81       	ldd	r24, Y+2	; 0x02
  aa:	28 2f       	mov	r18, r24
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	38 87       	std	Y+8, r19	; 0x08
  b0:	2f 83       	std	Y+7, r18	; 0x07
  b2:	8f 81       	ldd	r24, Y+7	; 0x07
  b4:	98 85       	ldd	r25, Y+8	; 0x08
  b6:	81 30       	cpi	r24, 0x01	; 1
  b8:	91 05       	cpc	r25, r1
  ba:	59 f1       	breq	.+86     	; 0x112 <DIO_u8SetPinValue+0x96>
  bc:	2f 81       	ldd	r18, Y+7	; 0x07
  be:	38 85       	ldd	r19, Y+8	; 0x08
  c0:	22 30       	cpi	r18, 0x02	; 2
  c2:	31 05       	cpc	r19, r1
  c4:	2c f4       	brge	.+10     	; 0xd0 <DIO_u8SetPinValue+0x54>
  c6:	8f 81       	ldd	r24, Y+7	; 0x07
  c8:	98 85       	ldd	r25, Y+8	; 0x08
  ca:	00 97       	sbiw	r24, 0x00	; 0
  cc:	69 f0       	breq	.+26     	; 0xe8 <DIO_u8SetPinValue+0x6c>
  ce:	60 c0       	rjmp	.+192    	; 0x190 <DIO_u8SetPinValue+0x114>
  d0:	2f 81       	ldd	r18, Y+7	; 0x07
  d2:	38 85       	ldd	r19, Y+8	; 0x08
  d4:	22 30       	cpi	r18, 0x02	; 2
  d6:	31 05       	cpc	r19, r1
  d8:	89 f1       	breq	.+98     	; 0x13c <DIO_u8SetPinValue+0xc0>
  da:	8f 81       	ldd	r24, Y+7	; 0x07
  dc:	98 85       	ldd	r25, Y+8	; 0x08
  de:	83 30       	cpi	r24, 0x03	; 3
  e0:	91 05       	cpc	r25, r1
  e2:	09 f4       	brne	.+2      	; 0xe6 <DIO_u8SetPinValue+0x6a>
  e4:	40 c0       	rjmp	.+128    	; 0x166 <DIO_u8SetPinValue+0xea>
  e6:	54 c0       	rjmp	.+168    	; 0x190 <DIO_u8SetPinValue+0x114>
			{
			case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
  e8:	ab e3       	ldi	r26, 0x3B	; 59
  ea:	b0 e0       	ldi	r27, 0x00	; 0
  ec:	eb e3       	ldi	r30, 0x3B	; 59
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	48 2f       	mov	r20, r24
  f4:	8b 81       	ldd	r24, Y+3	; 0x03
  f6:	28 2f       	mov	r18, r24
  f8:	30 e0       	ldi	r19, 0x00	; 0
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	02 2e       	mov	r0, r18
 100:	02 c0       	rjmp	.+4      	; 0x106 <DIO_u8SetPinValue+0x8a>
 102:	88 0f       	add	r24, r24
 104:	99 1f       	adc	r25, r25
 106:	0a 94       	dec	r0
 108:	e2 f7       	brpl	.-8      	; 0x102 <DIO_u8SetPinValue+0x86>
 10a:	80 95       	com	r24
 10c:	84 23       	and	r24, r20
 10e:	8c 93       	st	X, r24
 110:	bd c0       	rjmp	.+378    	; 0x28c <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
 112:	a8 e3       	ldi	r26, 0x38	; 56
 114:	b0 e0       	ldi	r27, 0x00	; 0
 116:	e8 e3       	ldi	r30, 0x38	; 56
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	80 81       	ld	r24, Z
 11c:	48 2f       	mov	r20, r24
 11e:	8b 81       	ldd	r24, Y+3	; 0x03
 120:	28 2f       	mov	r18, r24
 122:	30 e0       	ldi	r19, 0x00	; 0
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	02 2e       	mov	r0, r18
 12a:	02 c0       	rjmp	.+4      	; 0x130 <DIO_u8SetPinValue+0xb4>
 12c:	88 0f       	add	r24, r24
 12e:	99 1f       	adc	r25, r25
 130:	0a 94       	dec	r0
 132:	e2 f7       	brpl	.-8      	; 0x12c <DIO_u8SetPinValue+0xb0>
 134:	80 95       	com	r24
 136:	84 23       	and	r24, r20
 138:	8c 93       	st	X, r24
 13a:	a8 c0       	rjmp	.+336    	; 0x28c <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin); break;
 13c:	a5 e3       	ldi	r26, 0x35	; 53
 13e:	b0 e0       	ldi	r27, 0x00	; 0
 140:	e5 e3       	ldi	r30, 0x35	; 53
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	80 81       	ld	r24, Z
 146:	48 2f       	mov	r20, r24
 148:	8b 81       	ldd	r24, Y+3	; 0x03
 14a:	28 2f       	mov	r18, r24
 14c:	30 e0       	ldi	r19, 0x00	; 0
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	02 2e       	mov	r0, r18
 154:	02 c0       	rjmp	.+4      	; 0x15a <DIO_u8SetPinValue+0xde>
 156:	88 0f       	add	r24, r24
 158:	99 1f       	adc	r25, r25
 15a:	0a 94       	dec	r0
 15c:	e2 f7       	brpl	.-8      	; 0x156 <DIO_u8SetPinValue+0xda>
 15e:	80 95       	com	r24
 160:	84 23       	and	r24, r20
 162:	8c 93       	st	X, r24
 164:	93 c0       	rjmp	.+294    	; 0x28c <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin); break;
 166:	a2 e3       	ldi	r26, 0x32	; 50
 168:	b0 e0       	ldi	r27, 0x00	; 0
 16a:	e2 e3       	ldi	r30, 0x32	; 50
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	80 81       	ld	r24, Z
 170:	48 2f       	mov	r20, r24
 172:	8b 81       	ldd	r24, Y+3	; 0x03
 174:	28 2f       	mov	r18, r24
 176:	30 e0       	ldi	r19, 0x00	; 0
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	02 2e       	mov	r0, r18
 17e:	02 c0       	rjmp	.+4      	; 0x184 <DIO_u8SetPinValue+0x108>
 180:	88 0f       	add	r24, r24
 182:	99 1f       	adc	r25, r25
 184:	0a 94       	dec	r0
 186:	e2 f7       	brpl	.-8      	; 0x180 <DIO_u8SetPinValue+0x104>
 188:	80 95       	com	r24
 18a:	84 23       	and	r24, r20
 18c:	8c 93       	st	X, r24
 18e:	7e c0       	rjmp	.+252    	; 0x28c <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState =1; break;
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	89 83       	std	Y+1, r24	; 0x01
 194:	7b c0       	rjmp	.+246    	; 0x28c <DIO_u8SetPinValue+0x210>

			}
		}
		else if(Copy_u8Value == DIO_u8PIN_HIGH)
 196:	8c 81       	ldd	r24, Y+4	; 0x04
 198:	81 30       	cpi	r24, 0x01	; 1
 19a:	09 f0       	breq	.+2      	; 0x19e <DIO_u8SetPinValue+0x122>
 19c:	72 c0       	rjmp	.+228    	; 0x282 <DIO_u8SetPinValue+0x206>
		{

			switch(Copy_u8port)
 19e:	8a 81       	ldd	r24, Y+2	; 0x02
 1a0:	28 2f       	mov	r18, r24
 1a2:	30 e0       	ldi	r19, 0x00	; 0
 1a4:	3e 83       	std	Y+6, r19	; 0x06
 1a6:	2d 83       	std	Y+5, r18	; 0x05
 1a8:	8d 81       	ldd	r24, Y+5	; 0x05
 1aa:	9e 81       	ldd	r25, Y+6	; 0x06
 1ac:	81 30       	cpi	r24, 0x01	; 1
 1ae:	91 05       	cpc	r25, r1
 1b0:	49 f1       	breq	.+82     	; 0x204 <DIO_u8SetPinValue+0x188>
 1b2:	2d 81       	ldd	r18, Y+5	; 0x05
 1b4:	3e 81       	ldd	r19, Y+6	; 0x06
 1b6:	22 30       	cpi	r18, 0x02	; 2
 1b8:	31 05       	cpc	r19, r1
 1ba:	2c f4       	brge	.+10     	; 0x1c6 <DIO_u8SetPinValue+0x14a>
 1bc:	8d 81       	ldd	r24, Y+5	; 0x05
 1be:	9e 81       	ldd	r25, Y+6	; 0x06
 1c0:	00 97       	sbiw	r24, 0x00	; 0
 1c2:	61 f0       	breq	.+24     	; 0x1dc <DIO_u8SetPinValue+0x160>
 1c4:	5b c0       	rjmp	.+182    	; 0x27c <DIO_u8SetPinValue+0x200>
 1c6:	2d 81       	ldd	r18, Y+5	; 0x05
 1c8:	3e 81       	ldd	r19, Y+6	; 0x06
 1ca:	22 30       	cpi	r18, 0x02	; 2
 1cc:	31 05       	cpc	r19, r1
 1ce:	71 f1       	breq	.+92     	; 0x22c <DIO_u8SetPinValue+0x1b0>
 1d0:	8d 81       	ldd	r24, Y+5	; 0x05
 1d2:	9e 81       	ldd	r25, Y+6	; 0x06
 1d4:	83 30       	cpi	r24, 0x03	; 3
 1d6:	91 05       	cpc	r25, r1
 1d8:	e9 f1       	breq	.+122    	; 0x254 <DIO_u8SetPinValue+0x1d8>
 1da:	50 c0       	rjmp	.+160    	; 0x27c <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
 1dc:	ab e3       	ldi	r26, 0x3B	; 59
 1de:	b0 e0       	ldi	r27, 0x00	; 0
 1e0:	eb e3       	ldi	r30, 0x3B	; 59
 1e2:	f0 e0       	ldi	r31, 0x00	; 0
 1e4:	80 81       	ld	r24, Z
 1e6:	48 2f       	mov	r20, r24
 1e8:	8b 81       	ldd	r24, Y+3	; 0x03
 1ea:	28 2f       	mov	r18, r24
 1ec:	30 e0       	ldi	r19, 0x00	; 0
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	02 2e       	mov	r0, r18
 1f4:	02 c0       	rjmp	.+4      	; 0x1fa <DIO_u8SetPinValue+0x17e>
 1f6:	88 0f       	add	r24, r24
 1f8:	99 1f       	adc	r25, r25
 1fa:	0a 94       	dec	r0
 1fc:	e2 f7       	brpl	.-8      	; 0x1f6 <DIO_u8SetPinValue+0x17a>
 1fe:	84 2b       	or	r24, r20
 200:	8c 93       	st	X, r24
 202:	44 c0       	rjmp	.+136    	; 0x28c <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
 204:	a8 e3       	ldi	r26, 0x38	; 56
 206:	b0 e0       	ldi	r27, 0x00	; 0
 208:	e8 e3       	ldi	r30, 0x38	; 56
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	80 81       	ld	r24, Z
 20e:	48 2f       	mov	r20, r24
 210:	8b 81       	ldd	r24, Y+3	; 0x03
 212:	28 2f       	mov	r18, r24
 214:	30 e0       	ldi	r19, 0x00	; 0
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	02 2e       	mov	r0, r18
 21c:	02 c0       	rjmp	.+4      	; 0x222 <DIO_u8SetPinValue+0x1a6>
 21e:	88 0f       	add	r24, r24
 220:	99 1f       	adc	r25, r25
 222:	0a 94       	dec	r0
 224:	e2 f7       	brpl	.-8      	; 0x21e <DIO_u8SetPinValue+0x1a2>
 226:	84 2b       	or	r24, r20
 228:	8c 93       	st	X, r24
 22a:	30 c0       	rjmp	.+96     	; 0x28c <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin); break;
 22c:	a5 e3       	ldi	r26, 0x35	; 53
 22e:	b0 e0       	ldi	r27, 0x00	; 0
 230:	e5 e3       	ldi	r30, 0x35	; 53
 232:	f0 e0       	ldi	r31, 0x00	; 0
 234:	80 81       	ld	r24, Z
 236:	48 2f       	mov	r20, r24
 238:	8b 81       	ldd	r24, Y+3	; 0x03
 23a:	28 2f       	mov	r18, r24
 23c:	30 e0       	ldi	r19, 0x00	; 0
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	02 2e       	mov	r0, r18
 244:	02 c0       	rjmp	.+4      	; 0x24a <DIO_u8SetPinValue+0x1ce>
 246:	88 0f       	add	r24, r24
 248:	99 1f       	adc	r25, r25
 24a:	0a 94       	dec	r0
 24c:	e2 f7       	brpl	.-8      	; 0x246 <DIO_u8SetPinValue+0x1ca>
 24e:	84 2b       	or	r24, r20
 250:	8c 93       	st	X, r24
 252:	1c c0       	rjmp	.+56     	; 0x28c <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin); break;
 254:	a2 e3       	ldi	r26, 0x32	; 50
 256:	b0 e0       	ldi	r27, 0x00	; 0
 258:	e2 e3       	ldi	r30, 0x32	; 50
 25a:	f0 e0       	ldi	r31, 0x00	; 0
 25c:	80 81       	ld	r24, Z
 25e:	48 2f       	mov	r20, r24
 260:	8b 81       	ldd	r24, Y+3	; 0x03
 262:	28 2f       	mov	r18, r24
 264:	30 e0       	ldi	r19, 0x00	; 0
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	02 2e       	mov	r0, r18
 26c:	02 c0       	rjmp	.+4      	; 0x272 <DIO_u8SetPinValue+0x1f6>
 26e:	88 0f       	add	r24, r24
 270:	99 1f       	adc	r25, r25
 272:	0a 94       	dec	r0
 274:	e2 f7       	brpl	.-8      	; 0x26e <DIO_u8SetPinValue+0x1f2>
 276:	84 2b       	or	r24, r20
 278:	8c 93       	st	X, r24
 27a:	08 c0       	rjmp	.+16     	; 0x28c <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState =1; break;
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	89 83       	std	Y+1, r24	; 0x01
 280:	05 c0       	rjmp	.+10     	; 0x28c <DIO_u8SetPinValue+0x210>

			}
		}
		else
		{
			Local_u8ErrorState = 1;
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	89 83       	std	Y+1, r24	; 0x01
 286:	02 c0       	rjmp	.+4      	; 0x28c <DIO_u8SetPinValue+0x210>
		}

	}
	else
	{
		Local_u8ErrorState = 1;
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
 28c:	89 81       	ldd	r24, Y+1	; 0x01
}
 28e:	28 96       	adiw	r28, 0x08	; 8
 290:	0f b6       	in	r0, 0x3f	; 63
 292:	f8 94       	cli
 294:	de bf       	out	0x3e, r29	; 62
 296:	0f be       	out	0x3f, r0	; 63
 298:	cd bf       	out	0x3d, r28	; 61
 29a:	cf 91       	pop	r28
 29c:	df 91       	pop	r29
 29e:	08 95       	ret

000002a0 <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8port, u8 Copy_u8Value)
{
 2a0:	df 93       	push	r29
 2a2:	cf 93       	push	r28
 2a4:	00 d0       	rcall	.+0      	; 0x2a6 <DIO_u8SetPortValue+0x6>
 2a6:	00 d0       	rcall	.+0      	; 0x2a8 <DIO_u8SetPortValue+0x8>
 2a8:	0f 92       	push	r0
 2aa:	cd b7       	in	r28, 0x3d	; 61
 2ac:	de b7       	in	r29, 0x3e	; 62
 2ae:	8a 83       	std	Y+2, r24	; 0x02
 2b0:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
 2b2:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8port<=DIO_u8PORTD)
 2b4:	8a 81       	ldd	r24, Y+2	; 0x02
 2b6:	84 30       	cpi	r24, 0x04	; 4
 2b8:	b0 f5       	brcc	.+108    	; 0x326 <DIO_u8SetPortValue+0x86>
	{
		switch(Copy_u8port)
 2ba:	8a 81       	ldd	r24, Y+2	; 0x02
 2bc:	28 2f       	mov	r18, r24
 2be:	30 e0       	ldi	r19, 0x00	; 0
 2c0:	3d 83       	std	Y+5, r19	; 0x05
 2c2:	2c 83       	std	Y+4, r18	; 0x04
 2c4:	8c 81       	ldd	r24, Y+4	; 0x04
 2c6:	9d 81       	ldd	r25, Y+5	; 0x05
 2c8:	81 30       	cpi	r24, 0x01	; 1
 2ca:	91 05       	cpc	r25, r1
 2cc:	d1 f0       	breq	.+52     	; 0x302 <DIO_u8SetPortValue+0x62>
 2ce:	2c 81       	ldd	r18, Y+4	; 0x04
 2d0:	3d 81       	ldd	r19, Y+5	; 0x05
 2d2:	22 30       	cpi	r18, 0x02	; 2
 2d4:	31 05       	cpc	r19, r1
 2d6:	2c f4       	brge	.+10     	; 0x2e2 <DIO_u8SetPortValue+0x42>
 2d8:	8c 81       	ldd	r24, Y+4	; 0x04
 2da:	9d 81       	ldd	r25, Y+5	; 0x05
 2dc:	00 97       	sbiw	r24, 0x00	; 0
 2de:	61 f0       	breq	.+24     	; 0x2f8 <DIO_u8SetPortValue+0x58>
 2e0:	1f c0       	rjmp	.+62     	; 0x320 <DIO_u8SetPortValue+0x80>
 2e2:	2c 81       	ldd	r18, Y+4	; 0x04
 2e4:	3d 81       	ldd	r19, Y+5	; 0x05
 2e6:	22 30       	cpi	r18, 0x02	; 2
 2e8:	31 05       	cpc	r19, r1
 2ea:	81 f0       	breq	.+32     	; 0x30c <DIO_u8SetPortValue+0x6c>
 2ec:	8c 81       	ldd	r24, Y+4	; 0x04
 2ee:	9d 81       	ldd	r25, Y+5	; 0x05
 2f0:	83 30       	cpi	r24, 0x03	; 3
 2f2:	91 05       	cpc	r25, r1
 2f4:	81 f0       	breq	.+32     	; 0x316 <DIO_u8SetPortValue+0x76>
 2f6:	14 c0       	rjmp	.+40     	; 0x320 <DIO_u8SetPortValue+0x80>
		{
		case DIO_u8PORTA: PORTA = Copy_u8Value; break;
 2f8:	eb e3       	ldi	r30, 0x3B	; 59
 2fa:	f0 e0       	ldi	r31, 0x00	; 0
 2fc:	8b 81       	ldd	r24, Y+3	; 0x03
 2fe:	80 83       	st	Z, r24
 300:	14 c0       	rjmp	.+40     	; 0x32a <DIO_u8SetPortValue+0x8a>
		case DIO_u8PORTB: PORTB = Copy_u8Value; break;
 302:	e8 e3       	ldi	r30, 0x38	; 56
 304:	f0 e0       	ldi	r31, 0x00	; 0
 306:	8b 81       	ldd	r24, Y+3	; 0x03
 308:	80 83       	st	Z, r24
 30a:	0f c0       	rjmp	.+30     	; 0x32a <DIO_u8SetPortValue+0x8a>
		case DIO_u8PORTC: PORTC = Copy_u8Value; break;
 30c:	e5 e3       	ldi	r30, 0x35	; 53
 30e:	f0 e0       	ldi	r31, 0x00	; 0
 310:	8b 81       	ldd	r24, Y+3	; 0x03
 312:	80 83       	st	Z, r24
 314:	0a c0       	rjmp	.+20     	; 0x32a <DIO_u8SetPortValue+0x8a>
		case DIO_u8PORTD: PORTD = Copy_u8Value; break;
 316:	e2 e3       	ldi	r30, 0x32	; 50
 318:	f0 e0       	ldi	r31, 0x00	; 0
 31a:	8b 81       	ldd	r24, Y+3	; 0x03
 31c:	80 83       	st	Z, r24
 31e:	05 c0       	rjmp	.+10     	; 0x32a <DIO_u8SetPortValue+0x8a>
		default: Local_u8ErrorState =1; break;
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	89 83       	std	Y+1, r24	; 0x01
 324:	02 c0       	rjmp	.+4      	; 0x32a <DIO_u8SetPortValue+0x8a>

		}
	}
	else
	{
		Local_u8ErrorState = 1;
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_u8ErrorState;
 32a:	89 81       	ldd	r24, Y+1	; 0x01
}
 32c:	0f 90       	pop	r0
 32e:	0f 90       	pop	r0
 330:	0f 90       	pop	r0
 332:	0f 90       	pop	r0
 334:	0f 90       	pop	r0
 336:	cf 91       	pop	r28
 338:	df 91       	pop	r29
 33a:	08 95       	ret

0000033c <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8port, u8 Copy_u8Pin, u8* Copy_Pu8Value)
{
 33c:	df 93       	push	r29
 33e:	cf 93       	push	r28
 340:	cd b7       	in	r28, 0x3d	; 61
 342:	de b7       	in	r29, 0x3e	; 62
 344:	27 97       	sbiw	r28, 0x07	; 7
 346:	0f b6       	in	r0, 0x3f	; 63
 348:	f8 94       	cli
 34a:	de bf       	out	0x3e, r29	; 62
 34c:	0f be       	out	0x3f, r0	; 63
 34e:	cd bf       	out	0x3d, r28	; 61
 350:	8a 83       	std	Y+2, r24	; 0x02
 352:	6b 83       	std	Y+3, r22	; 0x03
 354:	5d 83       	std	Y+5, r21	; 0x05
 356:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
 358:	19 82       	std	Y+1, r1	; 0x01

	if((Copy_Pu8Value != NULL )&&(Copy_u8Pin<=DIO_u8PIN7))
 35a:	8c 81       	ldd	r24, Y+4	; 0x04
 35c:	9d 81       	ldd	r25, Y+5	; 0x05
 35e:	00 97       	sbiw	r24, 0x00	; 0
 360:	09 f4       	brne	.+2      	; 0x364 <DIO_u8GetPinValue+0x28>
 362:	78 c0       	rjmp	.+240    	; 0x454 <DIO_u8GetPinValue+0x118>
 364:	8b 81       	ldd	r24, Y+3	; 0x03
 366:	88 30       	cpi	r24, 0x08	; 8
 368:	08 f0       	brcs	.+2      	; 0x36c <DIO_u8GetPinValue+0x30>
 36a:	74 c0       	rjmp	.+232    	; 0x454 <DIO_u8GetPinValue+0x118>
	{


			switch(Copy_u8port)
 36c:	8a 81       	ldd	r24, Y+2	; 0x02
 36e:	28 2f       	mov	r18, r24
 370:	30 e0       	ldi	r19, 0x00	; 0
 372:	3f 83       	std	Y+7, r19	; 0x07
 374:	2e 83       	std	Y+6, r18	; 0x06
 376:	4e 81       	ldd	r20, Y+6	; 0x06
 378:	5f 81       	ldd	r21, Y+7	; 0x07
 37a:	41 30       	cpi	r20, 0x01	; 1
 37c:	51 05       	cpc	r21, r1
 37e:	59 f1       	breq	.+86     	; 0x3d6 <DIO_u8GetPinValue+0x9a>
 380:	8e 81       	ldd	r24, Y+6	; 0x06
 382:	9f 81       	ldd	r25, Y+7	; 0x07
 384:	82 30       	cpi	r24, 0x02	; 2
 386:	91 05       	cpc	r25, r1
 388:	34 f4       	brge	.+12     	; 0x396 <DIO_u8GetPinValue+0x5a>
 38a:	2e 81       	ldd	r18, Y+6	; 0x06
 38c:	3f 81       	ldd	r19, Y+7	; 0x07
 38e:	21 15       	cp	r18, r1
 390:	31 05       	cpc	r19, r1
 392:	69 f0       	breq	.+26     	; 0x3ae <DIO_u8GetPinValue+0x72>
 394:	5c c0       	rjmp	.+184    	; 0x44e <DIO_u8GetPinValue+0x112>
 396:	4e 81       	ldd	r20, Y+6	; 0x06
 398:	5f 81       	ldd	r21, Y+7	; 0x07
 39a:	42 30       	cpi	r20, 0x02	; 2
 39c:	51 05       	cpc	r21, r1
 39e:	79 f1       	breq	.+94     	; 0x3fe <DIO_u8GetPinValue+0xc2>
 3a0:	8e 81       	ldd	r24, Y+6	; 0x06
 3a2:	9f 81       	ldd	r25, Y+7	; 0x07
 3a4:	83 30       	cpi	r24, 0x03	; 3
 3a6:	91 05       	cpc	r25, r1
 3a8:	09 f4       	brne	.+2      	; 0x3ac <DIO_u8GetPinValue+0x70>
 3aa:	3d c0       	rjmp	.+122    	; 0x426 <DIO_u8GetPinValue+0xea>
 3ac:	50 c0       	rjmp	.+160    	; 0x44e <DIO_u8GetPinValue+0x112>
			{
			case DIO_u8PORTA: * Copy_Pu8Value = GET_BIT(PINA,Copy_u8Pin); break;
 3ae:	e9 e3       	ldi	r30, 0x39	; 57
 3b0:	f0 e0       	ldi	r31, 0x00	; 0
 3b2:	80 81       	ld	r24, Z
 3b4:	28 2f       	mov	r18, r24
 3b6:	30 e0       	ldi	r19, 0x00	; 0
 3b8:	8b 81       	ldd	r24, Y+3	; 0x03
 3ba:	88 2f       	mov	r24, r24
 3bc:	90 e0       	ldi	r25, 0x00	; 0
 3be:	a9 01       	movw	r20, r18
 3c0:	02 c0       	rjmp	.+4      	; 0x3c6 <DIO_u8GetPinValue+0x8a>
 3c2:	55 95       	asr	r21
 3c4:	47 95       	ror	r20
 3c6:	8a 95       	dec	r24
 3c8:	e2 f7       	brpl	.-8      	; 0x3c2 <DIO_u8GetPinValue+0x86>
 3ca:	ca 01       	movw	r24, r20
 3cc:	81 70       	andi	r24, 0x01	; 1
 3ce:	ec 81       	ldd	r30, Y+4	; 0x04
 3d0:	fd 81       	ldd	r31, Y+5	; 0x05
 3d2:	80 83       	st	Z, r24
 3d4:	41 c0       	rjmp	.+130    	; 0x458 <DIO_u8GetPinValue+0x11c>
			case DIO_u8PORTB: * Copy_Pu8Value = GET_BIT(PINB,Copy_u8Pin); break;
 3d6:	e6 e3       	ldi	r30, 0x36	; 54
 3d8:	f0 e0       	ldi	r31, 0x00	; 0
 3da:	80 81       	ld	r24, Z
 3dc:	28 2f       	mov	r18, r24
 3de:	30 e0       	ldi	r19, 0x00	; 0
 3e0:	8b 81       	ldd	r24, Y+3	; 0x03
 3e2:	88 2f       	mov	r24, r24
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	a9 01       	movw	r20, r18
 3e8:	02 c0       	rjmp	.+4      	; 0x3ee <DIO_u8GetPinValue+0xb2>
 3ea:	55 95       	asr	r21
 3ec:	47 95       	ror	r20
 3ee:	8a 95       	dec	r24
 3f0:	e2 f7       	brpl	.-8      	; 0x3ea <DIO_u8GetPinValue+0xae>
 3f2:	ca 01       	movw	r24, r20
 3f4:	81 70       	andi	r24, 0x01	; 1
 3f6:	ec 81       	ldd	r30, Y+4	; 0x04
 3f8:	fd 81       	ldd	r31, Y+5	; 0x05
 3fa:	80 83       	st	Z, r24
 3fc:	2d c0       	rjmp	.+90     	; 0x458 <DIO_u8GetPinValue+0x11c>
			case DIO_u8PORTC: * Copy_Pu8Value = GET_BIT(PINC,Copy_u8Pin); break;
 3fe:	e3 e3       	ldi	r30, 0x33	; 51
 400:	f0 e0       	ldi	r31, 0x00	; 0
 402:	80 81       	ld	r24, Z
 404:	28 2f       	mov	r18, r24
 406:	30 e0       	ldi	r19, 0x00	; 0
 408:	8b 81       	ldd	r24, Y+3	; 0x03
 40a:	88 2f       	mov	r24, r24
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	a9 01       	movw	r20, r18
 410:	02 c0       	rjmp	.+4      	; 0x416 <DIO_u8GetPinValue+0xda>
 412:	55 95       	asr	r21
 414:	47 95       	ror	r20
 416:	8a 95       	dec	r24
 418:	e2 f7       	brpl	.-8      	; 0x412 <DIO_u8GetPinValue+0xd6>
 41a:	ca 01       	movw	r24, r20
 41c:	81 70       	andi	r24, 0x01	; 1
 41e:	ec 81       	ldd	r30, Y+4	; 0x04
 420:	fd 81       	ldd	r31, Y+5	; 0x05
 422:	80 83       	st	Z, r24
 424:	19 c0       	rjmp	.+50     	; 0x458 <DIO_u8GetPinValue+0x11c>
			case DIO_u8PORTD: * Copy_Pu8Value = GET_BIT(PIND,Copy_u8Pin); break;
 426:	e0 e3       	ldi	r30, 0x30	; 48
 428:	f0 e0       	ldi	r31, 0x00	; 0
 42a:	80 81       	ld	r24, Z
 42c:	28 2f       	mov	r18, r24
 42e:	30 e0       	ldi	r19, 0x00	; 0
 430:	8b 81       	ldd	r24, Y+3	; 0x03
 432:	88 2f       	mov	r24, r24
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	a9 01       	movw	r20, r18
 438:	02 c0       	rjmp	.+4      	; 0x43e <DIO_u8GetPinValue+0x102>
 43a:	55 95       	asr	r21
 43c:	47 95       	ror	r20
 43e:	8a 95       	dec	r24
 440:	e2 f7       	brpl	.-8      	; 0x43a <DIO_u8GetPinValue+0xfe>
 442:	ca 01       	movw	r24, r20
 444:	81 70       	andi	r24, 0x01	; 1
 446:	ec 81       	ldd	r30, Y+4	; 0x04
 448:	fd 81       	ldd	r31, Y+5	; 0x05
 44a:	80 83       	st	Z, r24
 44c:	05 c0       	rjmp	.+10     	; 0x458 <DIO_u8GetPinValue+0x11c>
			default: Local_u8ErrorState =1; break;
 44e:	81 e0       	ldi	r24, 0x01	; 1
 450:	89 83       	std	Y+1, r24	; 0x01
 452:	02 c0       	rjmp	.+4      	; 0x458 <DIO_u8GetPinValue+0x11c>

			}
	}
	else
	{
		Local_u8ErrorState = 1;
 454:	81 e0       	ldi	r24, 0x01	; 1
 456:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
 458:	89 81       	ldd	r24, Y+1	; 0x01
}
 45a:	27 96       	adiw	r28, 0x07	; 7
 45c:	0f b6       	in	r0, 0x3f	; 63
 45e:	f8 94       	cli
 460:	de bf       	out	0x3e, r29	; 62
 462:	0f be       	out	0x3f, r0	; 63
 464:	cd bf       	out	0x3d, r28	; 61
 466:	cf 91       	pop	r28
 468:	df 91       	pop	r29
 46a:	08 95       	ret

0000046c <DIO_u8AndWithPort>:

u8 DIO_u8AndWithPort(u8 Copy_u8port, u8 Copy_u8Value)
{
 46c:	df 93       	push	r29
 46e:	cf 93       	push	r28
 470:	00 d0       	rcall	.+0      	; 0x472 <DIO_u8AndWithPort+0x6>
 472:	00 d0       	rcall	.+0      	; 0x474 <DIO_u8AndWithPort+0x8>
 474:	0f 92       	push	r0
 476:	cd b7       	in	r28, 0x3d	; 61
 478:	de b7       	in	r29, 0x3e	; 62
 47a:	8a 83       	std	Y+2, r24	; 0x02
 47c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Result = 0;
 47e:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8port)
 480:	8a 81       	ldd	r24, Y+2	; 0x02
 482:	28 2f       	mov	r18, r24
 484:	30 e0       	ldi	r19, 0x00	; 0
 486:	3d 83       	std	Y+5, r19	; 0x05
 488:	2c 83       	std	Y+4, r18	; 0x04
 48a:	8c 81       	ldd	r24, Y+4	; 0x04
 48c:	9d 81       	ldd	r25, Y+5	; 0x05
 48e:	81 30       	cpi	r24, 0x01	; 1
 490:	91 05       	cpc	r25, r1
 492:	e1 f0       	breq	.+56     	; 0x4cc <DIO_u8AndWithPort+0x60>
 494:	2c 81       	ldd	r18, Y+4	; 0x04
 496:	3d 81       	ldd	r19, Y+5	; 0x05
 498:	22 30       	cpi	r18, 0x02	; 2
 49a:	31 05       	cpc	r19, r1
 49c:	2c f4       	brge	.+10     	; 0x4a8 <DIO_u8AndWithPort+0x3c>
 49e:	8c 81       	ldd	r24, Y+4	; 0x04
 4a0:	9d 81       	ldd	r25, Y+5	; 0x05
 4a2:	00 97       	sbiw	r24, 0x00	; 0
 4a4:	61 f0       	breq	.+24     	; 0x4be <DIO_u8AndWithPort+0x52>
 4a6:	26 c0       	rjmp	.+76     	; 0x4f4 <DIO_u8AndWithPort+0x88>
 4a8:	2c 81       	ldd	r18, Y+4	; 0x04
 4aa:	3d 81       	ldd	r19, Y+5	; 0x05
 4ac:	22 30       	cpi	r18, 0x02	; 2
 4ae:	31 05       	cpc	r19, r1
 4b0:	a1 f0       	breq	.+40     	; 0x4da <DIO_u8AndWithPort+0x6e>
 4b2:	8c 81       	ldd	r24, Y+4	; 0x04
 4b4:	9d 81       	ldd	r25, Y+5	; 0x05
 4b6:	83 30       	cpi	r24, 0x03	; 3
 4b8:	91 05       	cpc	r25, r1
 4ba:	b1 f0       	breq	.+44     	; 0x4e8 <DIO_u8AndWithPort+0x7c>
 4bc:	1b c0       	rjmp	.+54     	; 0x4f4 <DIO_u8AndWithPort+0x88>
			{
			case DIO_u8PORTA: Local_u8Result= PORTA & Copy_u8Value; break;
 4be:	eb e3       	ldi	r30, 0x3B	; 59
 4c0:	f0 e0       	ldi	r31, 0x00	; 0
 4c2:	90 81       	ld	r25, Z
 4c4:	8b 81       	ldd	r24, Y+3	; 0x03
 4c6:	89 23       	and	r24, r25
 4c8:	89 83       	std	Y+1, r24	; 0x01
 4ca:	14 c0       	rjmp	.+40     	; 0x4f4 <DIO_u8AndWithPort+0x88>
			case DIO_u8PORTB: Local_u8Result= PORTB & Copy_u8Value; break;
 4cc:	e8 e3       	ldi	r30, 0x38	; 56
 4ce:	f0 e0       	ldi	r31, 0x00	; 0
 4d0:	90 81       	ld	r25, Z
 4d2:	8b 81       	ldd	r24, Y+3	; 0x03
 4d4:	89 23       	and	r24, r25
 4d6:	89 83       	std	Y+1, r24	; 0x01
 4d8:	0d c0       	rjmp	.+26     	; 0x4f4 <DIO_u8AndWithPort+0x88>
			case DIO_u8PORTC: Local_u8Result= PORTC & Copy_u8Value; break;
 4da:	e5 e3       	ldi	r30, 0x35	; 53
 4dc:	f0 e0       	ldi	r31, 0x00	; 0
 4de:	90 81       	ld	r25, Z
 4e0:	8b 81       	ldd	r24, Y+3	; 0x03
 4e2:	89 23       	and	r24, r25
 4e4:	89 83       	std	Y+1, r24	; 0x01
 4e6:	06 c0       	rjmp	.+12     	; 0x4f4 <DIO_u8AndWithPort+0x88>
			case DIO_u8PORTD: Local_u8Result = PORTD & Copy_u8Value; break;
 4e8:	e2 e3       	ldi	r30, 0x32	; 50
 4ea:	f0 e0       	ldi	r31, 0x00	; 0
 4ec:	90 81       	ld	r25, Z
 4ee:	8b 81       	ldd	r24, Y+3	; 0x03
 4f0:	89 23       	and	r24, r25
 4f2:	89 83       	std	Y+1, r24	; 0x01
			default:  break;


			}
	return Local_u8Result;
 4f4:	89 81       	ldd	r24, Y+1	; 0x01
}
 4f6:	0f 90       	pop	r0
 4f8:	0f 90       	pop	r0
 4fa:	0f 90       	pop	r0
 4fc:	0f 90       	pop	r0
 4fe:	0f 90       	pop	r0
 500:	cf 91       	pop	r28
 502:	df 91       	pop	r29
 504:	08 95       	ret

00000506 <GIE_VoidEnable>:

#include "GIE_interface.h"
#include "GIE_register.h"

void GIE_VoidEnable(void)
{
 506:	df 93       	push	r29
 508:	cf 93       	push	r28
 50a:	cd b7       	in	r28, 0x3d	; 61
 50c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
 50e:	af e5       	ldi	r26, 0x5F	; 95
 510:	b0 e0       	ldi	r27, 0x00	; 0
 512:	ef e5       	ldi	r30, 0x5F	; 95
 514:	f0 e0       	ldi	r31, 0x00	; 0
 516:	80 81       	ld	r24, Z
 518:	80 68       	ori	r24, 0x80	; 128
 51a:	8c 93       	st	X, r24
}
 51c:	cf 91       	pop	r28
 51e:	df 91       	pop	r29
 520:	08 95       	ret

00000522 <GIE_VoidDisable>:
void GIE_VoidDisable(void)
{
 522:	df 93       	push	r29
 524:	cf 93       	push	r28
 526:	cd b7       	in	r28, 0x3d	; 61
 528:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,SREG_I);
 52a:	af e5       	ldi	r26, 0x5F	; 95
 52c:	b0 e0       	ldi	r27, 0x00	; 0
 52e:	ef e5       	ldi	r30, 0x5F	; 95
 530:	f0 e0       	ldi	r31, 0x00	; 0
 532:	80 81       	ld	r24, Z
 534:	8f 77       	andi	r24, 0x7F	; 127
 536:	8c 93       	st	X, r24
}
 538:	cf 91       	pop	r28
 53a:	df 91       	pop	r29
 53c:	08 95       	ret

0000053e <PORT_VoidInit>:
#include "PORT_interface.h"
#include "PORT_register.h"


void PORT_VoidInit(void)
{
 53e:	df 93       	push	r29
 540:	cf 93       	push	r28
 542:	cd b7       	in	r28, 0x3d	; 61
 544:	de b7       	in	r29, 0x3e	; 62
	DDRA = PORTA_DIR;
 546:	ea e3       	ldi	r30, 0x3A	; 58
 548:	f0 e0       	ldi	r31, 0x00	; 0
 54a:	10 82       	st	Z, r1
	DDRB = PORTB_DIR;
 54c:	e7 e3       	ldi	r30, 0x37	; 55
 54e:	f0 e0       	ldi	r31, 0x00	; 0
 550:	10 82       	st	Z, r1
	DDRC = PORTC_DIR;
 552:	e4 e3       	ldi	r30, 0x34	; 52
 554:	f0 e0       	ldi	r31, 0x00	; 0
 556:	87 e0       	ldi	r24, 0x07	; 7
 558:	80 83       	st	Z, r24
	DDRD = PORTD_DIR;
 55a:	e1 e3       	ldi	r30, 0x31	; 49
 55c:	f0 e0       	ldi	r31, 0x00	; 0
 55e:	10 82       	st	Z, r1
	
	PORTA = PORTA_INITIAL_VALUE;
 560:	eb e3       	ldi	r30, 0x3B	; 59
 562:	f0 e0       	ldi	r31, 0x00	; 0
 564:	10 82       	st	Z, r1
	PORTB = PORTB_INITIAL_VALUE;
 566:	e8 e3       	ldi	r30, 0x38	; 56
 568:	f0 e0       	ldi	r31, 0x00	; 0
 56a:	10 82       	st	Z, r1
	PORTC = PORTC_INITIAL_VALUE;
 56c:	e5 e3       	ldi	r30, 0x35	; 53
 56e:	f0 e0       	ldi	r31, 0x00	; 0
 570:	10 82       	st	Z, r1
	PORTD = PORTD_INITIAL_VALUE;
 572:	e2 e3       	ldi	r30, 0x32	; 50
 574:	f0 e0       	ldi	r31, 0x00	; 0
 576:	10 82       	st	Z, r1


}
 578:	cf 91       	pop	r28
 57a:	df 91       	pop	r29
 57c:	08 95       	ret

0000057e <RTOS_voidStart>:
#include "RTOS_private.h"

Task_t SystemTasks[TASK_NUM] = {{NULL}};

void RTOS_voidStart(u32 Copy_u8SystemTick)
{
 57e:	df 93       	push	r29
 580:	cf 93       	push	r28
 582:	00 d0       	rcall	.+0      	; 0x584 <RTOS_voidStart+0x6>
 584:	00 d0       	rcall	.+0      	; 0x586 <RTOS_voidStart+0x8>
 586:	cd b7       	in	r28, 0x3d	; 61
 588:	de b7       	in	r29, 0x3e	; 62
 58a:	69 83       	std	Y+1, r22	; 0x01
 58c:	7a 83       	std	Y+2, r23	; 0x02
 58e:	8b 83       	std	Y+3, r24	; 0x03
 590:	9c 83       	std	Y+4, r25	; 0x04
	TIMER0_u8SetCallBack(&voidScheduler);
 592:	8f ea       	ldi	r24, 0xAF	; 175
 594:	93 e0       	ldi	r25, 0x03	; 3
 596:	0e 94 24 05 	call	0xa48	; 0xa48 <TIMER0_u8SetCallBack>
	GIE_VoidEnable();
 59a:	0e 94 83 02 	call	0x506	; 0x506 <GIE_VoidEnable>
	TIMER0_voidInit();
 59e:	0e 94 57 04 	call	0x8ae	; 0x8ae <TIMER0_voidInit>
	TIMER0_voidSetTime_ms(Copy_u8SystemTick);
 5a2:	89 81       	ldd	r24, Y+1	; 0x01
 5a4:	9a 81       	ldd	r25, Y+2	; 0x02
 5a6:	ab 81       	ldd	r26, Y+3	; 0x03
 5a8:	bc 81       	ldd	r27, Y+4	; 0x04
 5aa:	bc 01       	movw	r22, r24
 5ac:	cd 01       	movw	r24, r26
 5ae:	0e 94 81 04 	call	0x902	; 0x902 <TIMER0_voidSetTime_ms>
	TIMER0_voidStart();
 5b2:	0e 94 01 05 	call	0xa02	; 0xa02 <TIMER0_voidStart>

}
 5b6:	0f 90       	pop	r0
 5b8:	0f 90       	pop	r0
 5ba:	0f 90       	pop	r0
 5bc:	0f 90       	pop	r0
 5be:	cf 91       	pop	r28
 5c0:	df 91       	pop	r29
 5c2:	08 95       	ret

000005c4 <RTOS_u8CreateTask>:

u8 RTOS_u8CreateTask(u8 Copy_u8Priority, u16 Copy_u16Periodicity, void (*Copy_pvTaskFunc) (void), u16 Copy_u16FirstDelay)
{
 5c4:	df 93       	push	r29
 5c6:	cf 93       	push	r28
 5c8:	cd b7       	in	r28, 0x3d	; 61
 5ca:	de b7       	in	r29, 0x3e	; 62
 5cc:	28 97       	sbiw	r28, 0x08	; 8
 5ce:	0f b6       	in	r0, 0x3f	; 63
 5d0:	f8 94       	cli
 5d2:	de bf       	out	0x3e, r29	; 62
 5d4:	0f be       	out	0x3f, r0	; 63
 5d6:	cd bf       	out	0x3d, r28	; 61
 5d8:	8a 83       	std	Y+2, r24	; 0x02
 5da:	7c 83       	std	Y+4, r23	; 0x04
 5dc:	6b 83       	std	Y+3, r22	; 0x03
 5de:	5e 83       	std	Y+6, r21	; 0x06
 5e0:	4d 83       	std	Y+5, r20	; 0x05
 5e2:	38 87       	std	Y+8, r19	; 0x08
 5e4:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8ErrorState = OK;
 5e6:	19 82       	std	Y+1, r1	; 0x01
	/* Check if the required priority is empty or used before for another task*/
	if(SystemTasks[Copy_u8Priority].TaskFunc == NULL)
 5e8:	8a 81       	ldd	r24, Y+2	; 0x02
 5ea:	28 2f       	mov	r18, r24
 5ec:	30 e0       	ldi	r19, 0x00	; 0
 5ee:	c9 01       	movw	r24, r18
 5f0:	88 0f       	add	r24, r24
 5f2:	99 1f       	adc	r25, r25
 5f4:	88 0f       	add	r24, r24
 5f6:	99 1f       	adc	r25, r25
 5f8:	88 0f       	add	r24, r24
 5fa:	99 1f       	adc	r25, r25
 5fc:	82 1b       	sub	r24, r18
 5fe:	93 0b       	sbc	r25, r19
 600:	fc 01       	movw	r30, r24
 602:	ee 59       	subi	r30, 0x9E	; 158
 604:	ff 4f       	sbci	r31, 0xFF	; 255
 606:	80 81       	ld	r24, Z
 608:	91 81       	ldd	r25, Z+1	; 0x01
 60a:	00 97       	sbiw	r24, 0x00	; 0
 60c:	09 f0       	breq	.+2      	; 0x610 <RTOS_u8CreateTask+0x4c>
 60e:	4b c0       	rjmp	.+150    	; 0x6a6 <RTOS_u8CreateTask+0xe2>
	{
		SystemTasks[Copy_u8Priority].State = TASK_RESUMED; /* Initialized task state*/
 610:	8a 81       	ldd	r24, Y+2	; 0x02
 612:	28 2f       	mov	r18, r24
 614:	30 e0       	ldi	r19, 0x00	; 0
 616:	c9 01       	movw	r24, r18
 618:	88 0f       	add	r24, r24
 61a:	99 1f       	adc	r25, r25
 61c:	88 0f       	add	r24, r24
 61e:	99 1f       	adc	r25, r25
 620:	88 0f       	add	r24, r24
 622:	99 1f       	adc	r25, r25
 624:	82 1b       	sub	r24, r18
 626:	93 0b       	sbc	r25, r19
 628:	fc 01       	movw	r30, r24
 62a:	ec 59       	subi	r30, 0x9C	; 156
 62c:	ff 4f       	sbci	r31, 0xFF	; 255
 62e:	81 e0       	ldi	r24, 0x01	; 1
 630:	80 83       	st	Z, r24
		SystemTasks[Copy_u8Priority].Periodicity = Copy_u16Periodicity;
 632:	8a 81       	ldd	r24, Y+2	; 0x02
 634:	28 2f       	mov	r18, r24
 636:	30 e0       	ldi	r19, 0x00	; 0
 638:	c9 01       	movw	r24, r18
 63a:	88 0f       	add	r24, r24
 63c:	99 1f       	adc	r25, r25
 63e:	88 0f       	add	r24, r24
 640:	99 1f       	adc	r25, r25
 642:	88 0f       	add	r24, r24
 644:	99 1f       	adc	r25, r25
 646:	82 1b       	sub	r24, r18
 648:	93 0b       	sbc	r25, r19
 64a:	fc 01       	movw	r30, r24
 64c:	e0 5a       	subi	r30, 0xA0	; 160
 64e:	ff 4f       	sbci	r31, 0xFF	; 255
 650:	8b 81       	ldd	r24, Y+3	; 0x03
 652:	9c 81       	ldd	r25, Y+4	; 0x04
 654:	91 83       	std	Z+1, r25	; 0x01
 656:	80 83       	st	Z, r24
		SystemTasks[Copy_u8Priority].TaskFunc = Copy_pvTaskFunc;
 658:	8a 81       	ldd	r24, Y+2	; 0x02
 65a:	28 2f       	mov	r18, r24
 65c:	30 e0       	ldi	r19, 0x00	; 0
 65e:	c9 01       	movw	r24, r18
 660:	88 0f       	add	r24, r24
 662:	99 1f       	adc	r25, r25
 664:	88 0f       	add	r24, r24
 666:	99 1f       	adc	r25, r25
 668:	88 0f       	add	r24, r24
 66a:	99 1f       	adc	r25, r25
 66c:	82 1b       	sub	r24, r18
 66e:	93 0b       	sbc	r25, r19
 670:	fc 01       	movw	r30, r24
 672:	ee 59       	subi	r30, 0x9E	; 158
 674:	ff 4f       	sbci	r31, 0xFF	; 255
 676:	8d 81       	ldd	r24, Y+5	; 0x05
 678:	9e 81       	ldd	r25, Y+6	; 0x06
 67a:	91 83       	std	Z+1, r25	; 0x01
 67c:	80 83       	st	Z, r24
		SystemTasks[Copy_u8Priority].FirstDelay = Copy_u16FirstDelay;
 67e:	8a 81       	ldd	r24, Y+2	; 0x02
 680:	28 2f       	mov	r18, r24
 682:	30 e0       	ldi	r19, 0x00	; 0
 684:	c9 01       	movw	r24, r18
 686:	88 0f       	add	r24, r24
 688:	99 1f       	adc	r25, r25
 68a:	88 0f       	add	r24, r24
 68c:	99 1f       	adc	r25, r25
 68e:	88 0f       	add	r24, r24
 690:	99 1f       	adc	r25, r25
 692:	82 1b       	sub	r24, r18
 694:	93 0b       	sbc	r25, r19
 696:	fc 01       	movw	r30, r24
 698:	eb 59       	subi	r30, 0x9B	; 155
 69a:	ff 4f       	sbci	r31, 0xFF	; 255
 69c:	8f 81       	ldd	r24, Y+7	; 0x07
 69e:	98 85       	ldd	r25, Y+8	; 0x08
 6a0:	91 83       	std	Z+1, r25	; 0x01
 6a2:	80 83       	st	Z, r24
 6a4:	02 c0       	rjmp	.+4      	; 0x6aa <RTOS_u8CreateTask+0xe6>
	}
	else
	{
		/* Priority is reserved before, don't create the task */
		Local_u8ErrorState = NOK;
 6a6:	81 e0       	ldi	r24, 0x01	; 1
 6a8:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
 6aa:	89 81       	ldd	r24, Y+1	; 0x01
}
 6ac:	28 96       	adiw	r28, 0x08	; 8
 6ae:	0f b6       	in	r0, 0x3f	; 63
 6b0:	f8 94       	cli
 6b2:	de bf       	out	0x3e, r29	; 62
 6b4:	0f be       	out	0x3f, r0	; 63
 6b6:	cd bf       	out	0x3d, r28	; 61
 6b8:	cf 91       	pop	r28
 6ba:	df 91       	pop	r29
 6bc:	08 95       	ret

000006be <RTOS_voidSuspendTask>:

void RTOS_voidSuspendTask(u8 Copy_u8Priority)
{
 6be:	df 93       	push	r29
 6c0:	cf 93       	push	r28
 6c2:	0f 92       	push	r0
 6c4:	cd b7       	in	r28, 0x3d	; 61
 6c6:	de b7       	in	r29, 0x3e	; 62
 6c8:	89 83       	std	Y+1, r24	; 0x01
	SystemTasks[Copy_u8Priority].State =TASK_SUSPENDED;
 6ca:	89 81       	ldd	r24, Y+1	; 0x01
 6cc:	28 2f       	mov	r18, r24
 6ce:	30 e0       	ldi	r19, 0x00	; 0
 6d0:	c9 01       	movw	r24, r18
 6d2:	88 0f       	add	r24, r24
 6d4:	99 1f       	adc	r25, r25
 6d6:	88 0f       	add	r24, r24
 6d8:	99 1f       	adc	r25, r25
 6da:	88 0f       	add	r24, r24
 6dc:	99 1f       	adc	r25, r25
 6de:	82 1b       	sub	r24, r18
 6e0:	93 0b       	sbc	r25, r19
 6e2:	fc 01       	movw	r30, r24
 6e4:	ec 59       	subi	r30, 0x9C	; 156
 6e6:	ff 4f       	sbci	r31, 0xFF	; 255
 6e8:	10 82       	st	Z, r1
}
 6ea:	0f 90       	pop	r0
 6ec:	cf 91       	pop	r28
 6ee:	df 91       	pop	r29
 6f0:	08 95       	ret

000006f2 <RTOS_voidResumeTask>:

void RTOS_voidResumeTask(u8 Copy_u8Priority)
{
 6f2:	df 93       	push	r29
 6f4:	cf 93       	push	r28
 6f6:	0f 92       	push	r0
 6f8:	cd b7       	in	r28, 0x3d	; 61
 6fa:	de b7       	in	r29, 0x3e	; 62
 6fc:	89 83       	std	Y+1, r24	; 0x01
	SystemTasks[Copy_u8Priority].State =TASK_RESUMED;
 6fe:	89 81       	ldd	r24, Y+1	; 0x01
 700:	28 2f       	mov	r18, r24
 702:	30 e0       	ldi	r19, 0x00	; 0
 704:	c9 01       	movw	r24, r18
 706:	88 0f       	add	r24, r24
 708:	99 1f       	adc	r25, r25
 70a:	88 0f       	add	r24, r24
 70c:	99 1f       	adc	r25, r25
 70e:	88 0f       	add	r24, r24
 710:	99 1f       	adc	r25, r25
 712:	82 1b       	sub	r24, r18
 714:	93 0b       	sbc	r25, r19
 716:	fc 01       	movw	r30, r24
 718:	ec 59       	subi	r30, 0x9C	; 156
 71a:	ff 4f       	sbci	r31, 0xFF	; 255
 71c:	81 e0       	ldi	r24, 0x01	; 1
 71e:	80 83       	st	Z, r24
}
 720:	0f 90       	pop	r0
 722:	cf 91       	pop	r28
 724:	df 91       	pop	r29
 726:	08 95       	ret

00000728 <RTOS_voidDeleteTask>:

void RTOS_voidDeleteTask(u8 Copy_u8Priority)
{
 728:	df 93       	push	r29
 72a:	cf 93       	push	r28
 72c:	0f 92       	push	r0
 72e:	cd b7       	in	r28, 0x3d	; 61
 730:	de b7       	in	r29, 0x3e	; 62
 732:	89 83       	std	Y+1, r24	; 0x01
	SystemTasks[Copy_u8Priority].TaskFunc = NULL;
 734:	89 81       	ldd	r24, Y+1	; 0x01
 736:	28 2f       	mov	r18, r24
 738:	30 e0       	ldi	r19, 0x00	; 0
 73a:	c9 01       	movw	r24, r18
 73c:	88 0f       	add	r24, r24
 73e:	99 1f       	adc	r25, r25
 740:	88 0f       	add	r24, r24
 742:	99 1f       	adc	r25, r25
 744:	88 0f       	add	r24, r24
 746:	99 1f       	adc	r25, r25
 748:	82 1b       	sub	r24, r18
 74a:	93 0b       	sbc	r25, r19
 74c:	fc 01       	movw	r30, r24
 74e:	ee 59       	subi	r30, 0x9E	; 158
 750:	ff 4f       	sbci	r31, 0xFF	; 255
 752:	11 82       	std	Z+1, r1	; 0x01
 754:	10 82       	st	Z, r1
}
 756:	0f 90       	pop	r0
 758:	cf 91       	pop	r28
 75a:	df 91       	pop	r29
 75c:	08 95       	ret

0000075e <voidScheduler>:

static void voidScheduler(void)
{
 75e:	df 93       	push	r29
 760:	cf 93       	push	r28
 762:	0f 92       	push	r0
 764:	cd b7       	in	r28, 0x3d	; 61
 766:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8TaskCounter;

	/* Loop On all Tasks to check their periodicity*/

	for(Local_u8TaskCounter=0;Local_u8TaskCounter<TASK_NUM;Local_u8TaskCounter++)
 768:	19 82       	std	Y+1, r1	; 0x01
 76a:	99 c0       	rjmp	.+306    	; 0x89e <__stack+0x3f>
	{
		/* Check is the Task is suspended or not */
		if(SystemTasks[Local_u8TaskCounter].State == TASK_RESUMED)
 76c:	89 81       	ldd	r24, Y+1	; 0x01
 76e:	28 2f       	mov	r18, r24
 770:	30 e0       	ldi	r19, 0x00	; 0
 772:	c9 01       	movw	r24, r18
 774:	88 0f       	add	r24, r24
 776:	99 1f       	adc	r25, r25
 778:	88 0f       	add	r24, r24
 77a:	99 1f       	adc	r25, r25
 77c:	88 0f       	add	r24, r24
 77e:	99 1f       	adc	r25, r25
 780:	82 1b       	sub	r24, r18
 782:	93 0b       	sbc	r25, r19
 784:	fc 01       	movw	r30, r24
 786:	ec 59       	subi	r30, 0x9C	; 156
 788:	ff 4f       	sbci	r31, 0xFF	; 255
 78a:	80 81       	ld	r24, Z
 78c:	81 30       	cpi	r24, 0x01	; 1
 78e:	09 f0       	breq	.+2      	; 0x792 <voidScheduler+0x34>
 790:	83 c0       	rjmp	.+262    	; 0x898 <__stack+0x39>
		{
			if((SystemTasks[Local_u8TaskCounter].FirstDelay) == 0)
 792:	89 81       	ldd	r24, Y+1	; 0x01
 794:	28 2f       	mov	r18, r24
 796:	30 e0       	ldi	r19, 0x00	; 0
 798:	c9 01       	movw	r24, r18
 79a:	88 0f       	add	r24, r24
 79c:	99 1f       	adc	r25, r25
 79e:	88 0f       	add	r24, r24
 7a0:	99 1f       	adc	r25, r25
 7a2:	88 0f       	add	r24, r24
 7a4:	99 1f       	adc	r25, r25
 7a6:	82 1b       	sub	r24, r18
 7a8:	93 0b       	sbc	r25, r19
 7aa:	fc 01       	movw	r30, r24
 7ac:	eb 59       	subi	r30, 0x9B	; 155
 7ae:	ff 4f       	sbci	r31, 0xFF	; 255
 7b0:	80 81       	ld	r24, Z
 7b2:	91 81       	ldd	r25, Z+1	; 0x01
 7b4:	00 97       	sbiw	r24, 0x00	; 0
 7b6:	09 f0       	breq	.+2      	; 0x7ba <voidScheduler+0x5c>
 7b8:	4d c0       	rjmp	.+154    	; 0x854 <voidScheduler+0xf6>
			{
				/*Invoke the Task function*/
				if(SystemTasks[Local_u8TaskCounter].TaskFunc != NULL)
 7ba:	89 81       	ldd	r24, Y+1	; 0x01
 7bc:	28 2f       	mov	r18, r24
 7be:	30 e0       	ldi	r19, 0x00	; 0
 7c0:	c9 01       	movw	r24, r18
 7c2:	88 0f       	add	r24, r24
 7c4:	99 1f       	adc	r25, r25
 7c6:	88 0f       	add	r24, r24
 7c8:	99 1f       	adc	r25, r25
 7ca:	88 0f       	add	r24, r24
 7cc:	99 1f       	adc	r25, r25
 7ce:	82 1b       	sub	r24, r18
 7d0:	93 0b       	sbc	r25, r19
 7d2:	fc 01       	movw	r30, r24
 7d4:	ee 59       	subi	r30, 0x9E	; 158
 7d6:	ff 4f       	sbci	r31, 0xFF	; 255
 7d8:	80 81       	ld	r24, Z
 7da:	91 81       	ldd	r25, Z+1	; 0x01
 7dc:	00 97       	sbiw	r24, 0x00	; 0
 7de:	09 f4       	brne	.+2      	; 0x7e2 <voidScheduler+0x84>
 7e0:	5b c0       	rjmp	.+182    	; 0x898 <__stack+0x39>
				{
					SystemTasks[Local_u8TaskCounter].TaskFunc();
 7e2:	89 81       	ldd	r24, Y+1	; 0x01
 7e4:	28 2f       	mov	r18, r24
 7e6:	30 e0       	ldi	r19, 0x00	; 0
 7e8:	c9 01       	movw	r24, r18
 7ea:	88 0f       	add	r24, r24
 7ec:	99 1f       	adc	r25, r25
 7ee:	88 0f       	add	r24, r24
 7f0:	99 1f       	adc	r25, r25
 7f2:	88 0f       	add	r24, r24
 7f4:	99 1f       	adc	r25, r25
 7f6:	82 1b       	sub	r24, r18
 7f8:	93 0b       	sbc	r25, r19
 7fa:	fc 01       	movw	r30, r24
 7fc:	ee 59       	subi	r30, 0x9E	; 158
 7fe:	ff 4f       	sbci	r31, 0xFF	; 255
 800:	01 90       	ld	r0, Z+
 802:	f0 81       	ld	r31, Z
 804:	e0 2d       	mov	r30, r0
 806:	09 95       	icall
					/* Assign the first delay parameter to the periodicity minus 1*/
					SystemTasks[Local_u8TaskCounter].FirstDelay = SystemTasks[Local_u8TaskCounter].Periodicity -1;
 808:	89 81       	ldd	r24, Y+1	; 0x01
 80a:	48 2f       	mov	r20, r24
 80c:	50 e0       	ldi	r21, 0x00	; 0
 80e:	89 81       	ldd	r24, Y+1	; 0x01
 810:	28 2f       	mov	r18, r24
 812:	30 e0       	ldi	r19, 0x00	; 0
 814:	c9 01       	movw	r24, r18
 816:	88 0f       	add	r24, r24
 818:	99 1f       	adc	r25, r25
 81a:	88 0f       	add	r24, r24
 81c:	99 1f       	adc	r25, r25
 81e:	88 0f       	add	r24, r24
 820:	99 1f       	adc	r25, r25
 822:	82 1b       	sub	r24, r18
 824:	93 0b       	sbc	r25, r19
 826:	fc 01       	movw	r30, r24
 828:	e0 5a       	subi	r30, 0xA0	; 160
 82a:	ff 4f       	sbci	r31, 0xFF	; 255
 82c:	80 81       	ld	r24, Z
 82e:	91 81       	ldd	r25, Z+1	; 0x01
 830:	9c 01       	movw	r18, r24
 832:	21 50       	subi	r18, 0x01	; 1
 834:	30 40       	sbci	r19, 0x00	; 0
 836:	ca 01       	movw	r24, r20
 838:	88 0f       	add	r24, r24
 83a:	99 1f       	adc	r25, r25
 83c:	88 0f       	add	r24, r24
 83e:	99 1f       	adc	r25, r25
 840:	88 0f       	add	r24, r24
 842:	99 1f       	adc	r25, r25
 844:	84 1b       	sub	r24, r20
 846:	95 0b       	sbc	r25, r21
 848:	fc 01       	movw	r30, r24
 84a:	eb 59       	subi	r30, 0x9B	; 155
 84c:	ff 4f       	sbci	r31, 0xFF	; 255
 84e:	31 83       	std	Z+1, r19	; 0x01
 850:	20 83       	st	Z, r18
 852:	22 c0       	rjmp	.+68     	; 0x898 <__stack+0x39>

			}
			else
			{
				/* Decrement the first delay*/
				SystemTasks[Local_u8TaskCounter].FirstDelay --;
 854:	89 81       	ldd	r24, Y+1	; 0x01
 856:	28 2f       	mov	r18, r24
 858:	30 e0       	ldi	r19, 0x00	; 0
 85a:	c9 01       	movw	r24, r18
 85c:	88 0f       	add	r24, r24
 85e:	99 1f       	adc	r25, r25
 860:	88 0f       	add	r24, r24
 862:	99 1f       	adc	r25, r25
 864:	88 0f       	add	r24, r24
 866:	99 1f       	adc	r25, r25
 868:	82 1b       	sub	r24, r18
 86a:	93 0b       	sbc	r25, r19
 86c:	fc 01       	movw	r30, r24
 86e:	eb 59       	subi	r30, 0x9B	; 155
 870:	ff 4f       	sbci	r31, 0xFF	; 255
 872:	80 81       	ld	r24, Z
 874:	91 81       	ldd	r25, Z+1	; 0x01
 876:	ac 01       	movw	r20, r24
 878:	41 50       	subi	r20, 0x01	; 1
 87a:	50 40       	sbci	r21, 0x00	; 0
 87c:	c9 01       	movw	r24, r18
 87e:	88 0f       	add	r24, r24
 880:	99 1f       	adc	r25, r25
 882:	88 0f       	add	r24, r24
 884:	99 1f       	adc	r25, r25
 886:	88 0f       	add	r24, r24
 888:	99 1f       	adc	r25, r25
 88a:	82 1b       	sub	r24, r18
 88c:	93 0b       	sbc	r25, r19
 88e:	fc 01       	movw	r30, r24
 890:	eb 59       	subi	r30, 0x9B	; 155
 892:	ff 4f       	sbci	r31, 0xFF	; 255
 894:	51 83       	std	Z+1, r21	; 0x01
 896:	40 83       	st	Z, r20
{
	u8 Local_u8TaskCounter;

	/* Loop On all Tasks to check their periodicity*/

	for(Local_u8TaskCounter=0;Local_u8TaskCounter<TASK_NUM;Local_u8TaskCounter++)
 898:	89 81       	ldd	r24, Y+1	; 0x01
 89a:	8f 5f       	subi	r24, 0xFF	; 255
 89c:	89 83       	std	Y+1, r24	; 0x01
 89e:	89 81       	ldd	r24, Y+1	; 0x01
 8a0:	83 30       	cpi	r24, 0x03	; 3
 8a2:	08 f4       	brcc	.+2      	; 0x8a6 <__stack+0x47>
 8a4:	63 cf       	rjmp	.-314    	; 0x76c <voidScheduler+0xe>
			/* Task is suspended do noting*/

		}
	}

}
 8a6:	0f 90       	pop	r0
 8a8:	cf 91       	pop	r28
 8aa:	df 91       	pop	r29
 8ac:	08 95       	ret

000008ae <TIMER0_voidInit>:
#elif TIMER0_MODE == TIMER0_CTC_MODE
static u32 	CTC_u32NoOfCompMatch;
#endif

void TIMER0_voidInit(void)
{
 8ae:	df 93       	push	r29
 8b0:	cf 93       	push	r28
 8b2:	cd b7       	in	r28, 0x3d	; 61
 8b4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TIMSK_TOIE0);


#elif TIMER0_MODE == TIMER0_CTC_MODE
	/* Enable CTC Mode */
	CLR_BIT(TCCR0,TCCR0_WGM00);
 8b6:	a3 e5       	ldi	r26, 0x53	; 83
 8b8:	b0 e0       	ldi	r27, 0x00	; 0
 8ba:	e3 e5       	ldi	r30, 0x53	; 83
 8bc:	f0 e0       	ldi	r31, 0x00	; 0
 8be:	80 81       	ld	r24, Z
 8c0:	8f 7b       	andi	r24, 0xBF	; 191
 8c2:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_WGM01);
 8c4:	a3 e5       	ldi	r26, 0x53	; 83
 8c6:	b0 e0       	ldi	r27, 0x00	; 0
 8c8:	e3 e5       	ldi	r30, 0x53	; 83
 8ca:	f0 e0       	ldi	r31, 0x00	; 0
 8cc:	80 81       	ld	r24, Z
 8ce:	88 60       	ori	r24, 0x08	; 8
 8d0:	8c 93       	st	X, r24
	switch (OC0_MODE)
	{
	case OC0_DISCONNECTED:
		CLR_BIT(TCCR0,TCCR0_COM00);
 8d2:	a3 e5       	ldi	r26, 0x53	; 83
 8d4:	b0 e0       	ldi	r27, 0x00	; 0
 8d6:	e3 e5       	ldi	r30, 0x53	; 83
 8d8:	f0 e0       	ldi	r31, 0x00	; 0
 8da:	80 81       	ld	r24, Z
 8dc:	8f 7e       	andi	r24, 0xEF	; 239
 8de:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,TCCR0_COM01);
 8e0:	a3 e5       	ldi	r26, 0x53	; 83
 8e2:	b0 e0       	ldi	r27, 0x00	; 0
 8e4:	e3 e5       	ldi	r30, 0x53	; 83
 8e6:	f0 e0       	ldi	r31, 0x00	; 0
 8e8:	80 81       	ld	r24, Z
 8ea:	8f 7d       	andi	r24, 0xDF	; 223
 8ec:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
	/* Enable CTC INT */
	SET_BIT(TIMSK,TIMSK_OCIE0);
 8ee:	a9 e5       	ldi	r26, 0x59	; 89
 8f0:	b0 e0       	ldi	r27, 0x00	; 0
 8f2:	e9 e5       	ldi	r30, 0x59	; 89
 8f4:	f0 e0       	ldi	r31, 0x00	; 0
 8f6:	80 81       	ld	r24, Z
 8f8:	82 60       	ori	r24, 0x02	; 2
 8fa:	8c 93       	st	X, r24


#endif


}
 8fc:	cf 91       	pop	r28
 8fe:	df 91       	pop	r29
 900:	08 95       	ret

00000902 <TIMER0_voidSetTime_ms>:
void TIMER0_voidSetTime_ms(u32 Copy_u32DesiredTime)
{
 902:	df 93       	push	r29
 904:	cf 93       	push	r28
 906:	cd b7       	in	r28, 0x3d	; 61
 908:	de b7       	in	r29, 0x3e	; 62
 90a:	61 97       	sbiw	r28, 0x11	; 17
 90c:	0f b6       	in	r0, 0x3f	; 63
 90e:	f8 94       	cli
 910:	de bf       	out	0x3e, r29	; 62
 912:	0f be       	out	0x3f, r0	; 63
 914:	cd bf       	out	0x3d, r28	; 61
 916:	6e 87       	std	Y+14, r22	; 0x0e
 918:	7f 87       	std	Y+15, r23	; 0x0f
 91a:	88 8b       	std	Y+16, r24	; 0x10
 91c:	99 8b       	std	Y+17, r25	; 0x11
#if  TIMER0_PRESCALLER_SELEC  ==  DIV_BY_1
	Local_u32PrescDivFact  = 1;
#elif TIMER0_PRESCALLER_SELEC  == DIV_BY_8
	Local_u32PrescDivFact = 8;
#elif TIMER0_PRESCALLER_SELEC  == DIV_BY_64
	Local_u32PrescDivFact = 64;
 91e:	80 e4       	ldi	r24, 0x40	; 64
 920:	90 e0       	ldi	r25, 0x00	; 0
 922:	a0 e0       	ldi	r26, 0x00	; 0
 924:	b0 e0       	ldi	r27, 0x00	; 0
 926:	8a 87       	std	Y+10, r24	; 0x0a
 928:	9b 87       	std	Y+11, r25	; 0x0b
 92a:	ac 87       	std	Y+12, r26	; 0x0c
 92c:	bd 87       	std	Y+13, r27	; 0x0d
#elif TIMER0_PRESCALLER_SELEC  == DIV_BY_1024
			Local_u32PrescDivFact = 1024;

#endif

	u32 Local_u32TickTime = Local_u32PrescDivFact / CRYSTAL_FREQ;    // in Micro Second
 92e:	8a 85       	ldd	r24, Y+10	; 0x0a
 930:	9b 85       	ldd	r25, Y+11	; 0x0b
 932:	ac 85       	ldd	r26, Y+12	; 0x0c
 934:	bd 85       	ldd	r27, Y+13	; 0x0d
 936:	68 94       	set
 938:	13 f8       	bld	r1, 3
 93a:	b6 95       	lsr	r27
 93c:	a7 95       	ror	r26
 93e:	97 95       	ror	r25
 940:	87 95       	ror	r24
 942:	16 94       	lsr	r1
 944:	d1 f7       	brne	.-12     	; 0x93a <TIMER0_voidSetTime_ms+0x38>
 946:	8e 83       	std	Y+6, r24	; 0x06
 948:	9f 83       	std	Y+7, r25	; 0x07
 94a:	a8 87       	std	Y+8, r26	; 0x08
 94c:	b9 87       	std	Y+9, r27	; 0x09
	u32 Local_u32TotalTicks = (Copy_u32DesiredTime *1000 ) / Local_u32TickTime;
 94e:	8e 85       	ldd	r24, Y+14	; 0x0e
 950:	9f 85       	ldd	r25, Y+15	; 0x0f
 952:	a8 89       	ldd	r26, Y+16	; 0x10
 954:	b9 89       	ldd	r27, Y+17	; 0x11
 956:	28 ee       	ldi	r18, 0xE8	; 232
 958:	33 e0       	ldi	r19, 0x03	; 3
 95a:	40 e0       	ldi	r20, 0x00	; 0
 95c:	50 e0       	ldi	r21, 0x00	; 0
 95e:	bc 01       	movw	r22, r24
 960:	cd 01       	movw	r24, r26
 962:	0e 94 39 06 	call	0xc72	; 0xc72 <__mulsi3>
 966:	dc 01       	movw	r26, r24
 968:	cb 01       	movw	r24, r22
 96a:	2e 81       	ldd	r18, Y+6	; 0x06
 96c:	3f 81       	ldd	r19, Y+7	; 0x07
 96e:	48 85       	ldd	r20, Y+8	; 0x08
 970:	59 85       	ldd	r21, Y+9	; 0x09
 972:	bc 01       	movw	r22, r24
 974:	cd 01       	movw	r24, r26
 976:	0e 94 58 06 	call	0xcb0	; 0xcb0 <__udivmodsi4>
 97a:	da 01       	movw	r26, r20
 97c:	c9 01       	movw	r24, r18
 97e:	8a 83       	std	Y+2, r24	; 0x02
 980:	9b 83       	std	Y+3, r25	; 0x03
 982:	ac 83       	std	Y+4, r26	; 0x04
 984:	bd 83       	std	Y+5, r27	; 0x05
		NORMAL_u32NoOfOverFlow ++;
	}


#elif TIMER0_MODE == TIMER0_CTC_MODE
	u8 Local_u8DivisionValue = 255;
 986:	8f ef       	ldi	r24, 0xFF	; 255
 988:	89 83       	std	Y+1, r24	; 0x01
 98a:	03 c0       	rjmp	.+6      	; 0x992 <TIMER0_voidSetTime_ms+0x90>
	while(Local_u32TotalTicks % Local_u8DivisionValue != 0)
	{
		Local_u8DivisionValue --;
 98c:	89 81       	ldd	r24, Y+1	; 0x01
 98e:	81 50       	subi	r24, 0x01	; 1
 990:	89 83       	std	Y+1, r24	; 0x01
	}


#elif TIMER0_MODE == TIMER0_CTC_MODE
	u8 Local_u8DivisionValue = 255;
	while(Local_u32TotalTicks % Local_u8DivisionValue != 0)
 992:	89 81       	ldd	r24, Y+1	; 0x01
 994:	28 2f       	mov	r18, r24
 996:	30 e0       	ldi	r19, 0x00	; 0
 998:	40 e0       	ldi	r20, 0x00	; 0
 99a:	50 e0       	ldi	r21, 0x00	; 0
 99c:	8a 81       	ldd	r24, Y+2	; 0x02
 99e:	9b 81       	ldd	r25, Y+3	; 0x03
 9a0:	ac 81       	ldd	r26, Y+4	; 0x04
 9a2:	bd 81       	ldd	r27, Y+5	; 0x05
 9a4:	bc 01       	movw	r22, r24
 9a6:	cd 01       	movw	r24, r26
 9a8:	0e 94 58 06 	call	0xcb0	; 0xcb0 <__udivmodsi4>
 9ac:	dc 01       	movw	r26, r24
 9ae:	cb 01       	movw	r24, r22
 9b0:	00 97       	sbiw	r24, 0x00	; 0
 9b2:	a1 05       	cpc	r26, r1
 9b4:	b1 05       	cpc	r27, r1
 9b6:	51 f7       	brne	.-44     	; 0x98c <TIMER0_voidSetTime_ms+0x8a>
	{
		Local_u8DivisionValue --;
	}
	CTC_u32NoOfCompMatch = Local_u32TotalTicks /Local_u8DivisionValue;
 9b8:	89 81       	ldd	r24, Y+1	; 0x01
 9ba:	28 2f       	mov	r18, r24
 9bc:	30 e0       	ldi	r19, 0x00	; 0
 9be:	40 e0       	ldi	r20, 0x00	; 0
 9c0:	50 e0       	ldi	r21, 0x00	; 0
 9c2:	8a 81       	ldd	r24, Y+2	; 0x02
 9c4:	9b 81       	ldd	r25, Y+3	; 0x03
 9c6:	ac 81       	ldd	r26, Y+4	; 0x04
 9c8:	bd 81       	ldd	r27, Y+5	; 0x05
 9ca:	bc 01       	movw	r22, r24
 9cc:	cd 01       	movw	r24, r26
 9ce:	0e 94 58 06 	call	0xcb0	; 0xcb0 <__udivmodsi4>
 9d2:	da 01       	movw	r26, r20
 9d4:	c9 01       	movw	r24, r18
 9d6:	80 93 7b 00 	sts	0x007B, r24
 9da:	90 93 7c 00 	sts	0x007C, r25
 9de:	a0 93 7d 00 	sts	0x007D, r26
 9e2:	b0 93 7e 00 	sts	0x007E, r27
	OCR0 = Local_u8DivisionValue -1;
 9e6:	ec e5       	ldi	r30, 0x5C	; 92
 9e8:	f0 e0       	ldi	r31, 0x00	; 0
 9ea:	89 81       	ldd	r24, Y+1	; 0x01
 9ec:	81 50       	subi	r24, 0x01	; 1
 9ee:	80 83       	st	Z, r24


#endif


}
 9f0:	61 96       	adiw	r28, 0x11	; 17
 9f2:	0f b6       	in	r0, 0x3f	; 63
 9f4:	f8 94       	cli
 9f6:	de bf       	out	0x3e, r29	; 62
 9f8:	0f be       	out	0x3f, r0	; 63
 9fa:	cd bf       	out	0x3d, r28	; 61
 9fc:	cf 91       	pop	r28
 9fe:	df 91       	pop	r29
 a00:	08 95       	ret

00000a02 <TIMER0_voidStart>:
void TIMER0_voidStart(void)
{
 a02:	df 93       	push	r29
 a04:	cf 93       	push	r28
 a06:	cd b7       	in	r28, 0x3d	; 61
 a08:	de b7       	in	r29, 0x3e	; 62
	TCCR0 &= TIMER0_PRESCALLER_MASK;
 a0a:	a3 e5       	ldi	r26, 0x53	; 83
 a0c:	b0 e0       	ldi	r27, 0x00	; 0
 a0e:	e3 e5       	ldi	r30, 0x53	; 83
 a10:	f0 e0       	ldi	r31, 0x00	; 0
 a12:	80 81       	ld	r24, Z
 a14:	88 7f       	andi	r24, 0xF8	; 248
 a16:	8c 93       	st	X, r24
	TCCR0 |= TIMER0_PRESCALLER_SELEC;
 a18:	a3 e5       	ldi	r26, 0x53	; 83
 a1a:	b0 e0       	ldi	r27, 0x00	; 0
 a1c:	e3 e5       	ldi	r30, 0x53	; 83
 a1e:	f0 e0       	ldi	r31, 0x00	; 0
 a20:	80 81       	ld	r24, Z
 a22:	83 60       	ori	r24, 0x03	; 3
 a24:	8c 93       	st	X, r24

}
 a26:	cf 91       	pop	r28
 a28:	df 91       	pop	r29
 a2a:	08 95       	ret

00000a2c <TIMER0_voidStop>:
void TIMER0_voidStop(void)
{
 a2c:	df 93       	push	r29
 a2e:	cf 93       	push	r28
 a30:	cd b7       	in	r28, 0x3d	; 61
 a32:	de b7       	in	r29, 0x3e	; 62
	TCCR0 &= TIMER0_PRESCALLER_MASK;
 a34:	a3 e5       	ldi	r26, 0x53	; 83
 a36:	b0 e0       	ldi	r27, 0x00	; 0
 a38:	e3 e5       	ldi	r30, 0x53	; 83
 a3a:	f0 e0       	ldi	r31, 0x00	; 0
 a3c:	80 81       	ld	r24, Z
 a3e:	88 7f       	andi	r24, 0xF8	; 248
 a40:	8c 93       	st	X, r24

}
 a42:	cf 91       	pop	r28
 a44:	df 91       	pop	r29
 a46:	08 95       	ret

00000a48 <TIMER0_u8SetCallBack>:
u8 TIMER0_u8SetCallBack(void(*Copy_pvCallBackFunc)(void))
{
 a48:	df 93       	push	r29
 a4a:	cf 93       	push	r28
 a4c:	00 d0       	rcall	.+0      	; 0xa4e <TIMER0_u8SetCallBack+0x6>
 a4e:	0f 92       	push	r0
 a50:	cd b7       	in	r28, 0x3d	; 61
 a52:	de b7       	in	r29, 0x3e	; 62
 a54:	9b 83       	std	Y+3, r25	; 0x03
 a56:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
 a58:	19 82       	std	Y+1, r1	; 0x01
	if( Copy_pvCallBackFunc != NULL)
 a5a:	8a 81       	ldd	r24, Y+2	; 0x02
 a5c:	9b 81       	ldd	r25, Y+3	; 0x03
 a5e:	00 97       	sbiw	r24, 0x00	; 0
 a60:	39 f0       	breq	.+14     	; 0xa70 <TIMER0_u8SetCallBack+0x28>
	{
		TIMER0_pvCallBackNotificationFunc = Copy_pvCallBackFunc;
 a62:	8a 81       	ldd	r24, Y+2	; 0x02
 a64:	9b 81       	ldd	r25, Y+3	; 0x03
 a66:	90 93 76 00 	sts	0x0076, r25
 a6a:	80 93 75 00 	sts	0x0075, r24
 a6e:	02 c0       	rjmp	.+4      	; 0xa74 <TIMER0_u8SetCallBack+0x2c>

	}
	else
	{
		Local_u8ErrorState = NULL_POINTER;
 a70:	82 e0       	ldi	r24, 0x02	; 2
 a72:	89 83       	std	Y+1, r24	; 0x01

	}
	return Local_u8ErrorState;
 a74:	89 81       	ldd	r24, Y+1	; 0x01
}
 a76:	0f 90       	pop	r0
 a78:	0f 90       	pop	r0
 a7a:	0f 90       	pop	r0
 a7c:	cf 91       	pop	r28
 a7e:	df 91       	pop	r29
 a80:	08 95       	ret

00000a82 <PWM0_voidInit>:

/*************************************** PWM FUNCTION *************************************/
void PWM0_voidInit(void)
{
 a82:	df 93       	push	r29
 a84:	cf 93       	push	r28
 a86:	cd b7       	in	r28, 0x3d	; 61
 a88:	de b7       	in	r29, 0x3e	; 62
		CLR_BIT(TCCR0,TCCR0_COM00);
		SET_BIT(TCCR0,TCCR0_COM01);
	}

#endif
}
 a8a:	cf 91       	pop	r28
 a8c:	df 91       	pop	r29
 a8e:	08 95       	ret

00000a90 <PWM0_voidSetDutyCycle>:
void PWM0_voidSetDutyCycle(u8 Copy_u8DutyCycle)
{
 a90:	df 93       	push	r29
 a92:	cf 93       	push	r28
 a94:	0f 92       	push	r0
 a96:	cd b7       	in	r28, 0x3d	; 61
 a98:	de b7       	in	r29, 0x3e	; 62
 a9a:	89 83       	std	Y+1, r24	; 0x01
	{
		OCR0 = ((Copy_u8DutyCycle * (TIMER0_MAX -1 ) ) / 100) ;
	}
#endif

}
 a9c:	0f 90       	pop	r0
 a9e:	cf 91       	pop	r28
 aa0:	df 91       	pop	r29
 aa2:	08 95       	ret

00000aa4 <PWM0_voidStart>:
void PWM0_voidStart(void)
{
 aa4:	df 93       	push	r29
 aa6:	cf 93       	push	r28
 aa8:	cd b7       	in	r28, 0x3d	; 61
 aaa:	de b7       	in	r29, 0x3e	; 62
	TCCR0 &= TIMER0_PRESCALLER_MASK;
 aac:	a3 e5       	ldi	r26, 0x53	; 83
 aae:	b0 e0       	ldi	r27, 0x00	; 0
 ab0:	e3 e5       	ldi	r30, 0x53	; 83
 ab2:	f0 e0       	ldi	r31, 0x00	; 0
 ab4:	80 81       	ld	r24, Z
 ab6:	88 7f       	andi	r24, 0xF8	; 248
 ab8:	8c 93       	st	X, r24
	TCCR0 |= TIMER0_PRESCALLER_SELEC;
 aba:	a3 e5       	ldi	r26, 0x53	; 83
 abc:	b0 e0       	ldi	r27, 0x00	; 0
 abe:	e3 e5       	ldi	r30, 0x53	; 83
 ac0:	f0 e0       	ldi	r31, 0x00	; 0
 ac2:	80 81       	ld	r24, Z
 ac4:	83 60       	ori	r24, 0x03	; 3
 ac6:	8c 93       	st	X, r24
}
 ac8:	cf 91       	pop	r28
 aca:	df 91       	pop	r29
 acc:	08 95       	ret

00000ace <PWM0_voidStop>:

void PWM0_voidStop(void)
{
 ace:	df 93       	push	r29
 ad0:	cf 93       	push	r28
 ad2:	cd b7       	in	r28, 0x3d	; 61
 ad4:	de b7       	in	r29, 0x3e	; 62
	TCCR0 &= TIMER0_PRESCALLER_MASK;
 ad6:	a3 e5       	ldi	r26, 0x53	; 83
 ad8:	b0 e0       	ldi	r27, 0x00	; 0
 ada:	e3 e5       	ldi	r30, 0x53	; 83
 adc:	f0 e0       	ldi	r31, 0x00	; 0
 ade:	80 81       	ld	r24, Z
 ae0:	88 7f       	andi	r24, 0xF8	; 248
 ae2:	8c 93       	st	X, r24
}
 ae4:	cf 91       	pop	r28
 ae6:	df 91       	pop	r29
 ae8:	08 95       	ret

00000aea <__vector_10>:
#elif TIMER0_MODE == TIMER0_CTC_MODE
/********************** ISR Timer/Counter0 Overflow  *****************************************/

void __vector_10 (void) __attribute__((signal));
void __vector_10 (void)
{
 aea:	1f 92       	push	r1
 aec:	0f 92       	push	r0
 aee:	0f b6       	in	r0, 0x3f	; 63
 af0:	0f 92       	push	r0
 af2:	11 24       	eor	r1, r1
 af4:	2f 93       	push	r18
 af6:	3f 93       	push	r19
 af8:	4f 93       	push	r20
 afa:	5f 93       	push	r21
 afc:	6f 93       	push	r22
 afe:	7f 93       	push	r23
 b00:	8f 93       	push	r24
 b02:	9f 93       	push	r25
 b04:	af 93       	push	r26
 b06:	bf 93       	push	r27
 b08:	ef 93       	push	r30
 b0a:	ff 93       	push	r31
 b0c:	df 93       	push	r29
 b0e:	cf 93       	push	r28
 b10:	cd b7       	in	r28, 0x3d	; 61
 b12:	de b7       	in	r29, 0x3e	; 62
	static u32 Local_u32Counter = 0;
	Local_u32Counter ++;
 b14:	80 91 77 00 	lds	r24, 0x0077
 b18:	90 91 78 00 	lds	r25, 0x0078
 b1c:	a0 91 79 00 	lds	r26, 0x0079
 b20:	b0 91 7a 00 	lds	r27, 0x007A
 b24:	01 96       	adiw	r24, 0x01	; 1
 b26:	a1 1d       	adc	r26, r1
 b28:	b1 1d       	adc	r27, r1
 b2a:	80 93 77 00 	sts	0x0077, r24
 b2e:	90 93 78 00 	sts	0x0078, r25
 b32:	a0 93 79 00 	sts	0x0079, r26
 b36:	b0 93 7a 00 	sts	0x007A, r27
	if(Local_u32Counter == CTC_u32NoOfCompMatch)
 b3a:	20 91 77 00 	lds	r18, 0x0077
 b3e:	30 91 78 00 	lds	r19, 0x0078
 b42:	40 91 79 00 	lds	r20, 0x0079
 b46:	50 91 7a 00 	lds	r21, 0x007A
 b4a:	80 91 7b 00 	lds	r24, 0x007B
 b4e:	90 91 7c 00 	lds	r25, 0x007C
 b52:	a0 91 7d 00 	lds	r26, 0x007D
 b56:	b0 91 7e 00 	lds	r27, 0x007E
 b5a:	28 17       	cp	r18, r24
 b5c:	39 07       	cpc	r19, r25
 b5e:	4a 07       	cpc	r20, r26
 b60:	5b 07       	cpc	r21, r27
 b62:	69 f4       	brne	.+26     	; 0xb7e <__vector_10+0x94>
	{
		TIMER0_pvCallBackNotificationFunc();
 b64:	e0 91 75 00 	lds	r30, 0x0075
 b68:	f0 91 76 00 	lds	r31, 0x0076
 b6c:	09 95       	icall
		Local_u32Counter = 0;
 b6e:	10 92 77 00 	sts	0x0077, r1
 b72:	10 92 78 00 	sts	0x0078, r1
 b76:	10 92 79 00 	sts	0x0079, r1
 b7a:	10 92 7a 00 	sts	0x007A, r1
	}

}
 b7e:	cf 91       	pop	r28
 b80:	df 91       	pop	r29
 b82:	ff 91       	pop	r31
 b84:	ef 91       	pop	r30
 b86:	bf 91       	pop	r27
 b88:	af 91       	pop	r26
 b8a:	9f 91       	pop	r25
 b8c:	8f 91       	pop	r24
 b8e:	7f 91       	pop	r23
 b90:	6f 91       	pop	r22
 b92:	5f 91       	pop	r21
 b94:	4f 91       	pop	r20
 b96:	3f 91       	pop	r19
 b98:	2f 91       	pop	r18
 b9a:	0f 90       	pop	r0
 b9c:	0f be       	out	0x3f, r0	; 63
 b9e:	0f 90       	pop	r0
 ba0:	1f 90       	pop	r1
 ba2:	18 95       	reti

00000ba4 <main>:
void LED_3(void);



void main(void)
{
 ba4:	df 93       	push	r29
 ba6:	cf 93       	push	r28
 ba8:	cd b7       	in	r28, 0x3d	; 61
 baa:	de b7       	in	r29, 0x3e	; 62
	PORT_VoidInit();
 bac:	0e 94 9f 02 	call	0x53e	; 0x53e <PORT_VoidInit>

	RTOS_u8CreateTask(0,1000,&LED_1,1000);
 bb0:	2d ef       	ldi	r18, 0xFD	; 253
 bb2:	35 e0       	ldi	r19, 0x05	; 5
 bb4:	80 e0       	ldi	r24, 0x00	; 0
 bb6:	68 ee       	ldi	r22, 0xE8	; 232
 bb8:	73 e0       	ldi	r23, 0x03	; 3
 bba:	a9 01       	movw	r20, r18
 bbc:	28 ee       	ldi	r18, 0xE8	; 232
 bbe:	33 e0       	ldi	r19, 0x03	; 3
 bc0:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <RTOS_u8CreateTask>
	RTOS_u8CreateTask(1,2000,&LED_2,1000);
 bc4:	21 e1       	ldi	r18, 0x11	; 17
 bc6:	36 e0       	ldi	r19, 0x06	; 6
 bc8:	81 e0       	ldi	r24, 0x01	; 1
 bca:	60 ed       	ldi	r22, 0xD0	; 208
 bcc:	77 e0       	ldi	r23, 0x07	; 7
 bce:	a9 01       	movw	r20, r18
 bd0:	28 ee       	ldi	r18, 0xE8	; 232
 bd2:	33 e0       	ldi	r19, 0x03	; 3
 bd4:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <RTOS_u8CreateTask>
	RTOS_u8CreateTask(2,3000,&LED_3,1000);
 bd8:	25 e2       	ldi	r18, 0x25	; 37
 bda:	36 e0       	ldi	r19, 0x06	; 6
 bdc:	82 e0       	ldi	r24, 0x02	; 2
 bde:	68 eb       	ldi	r22, 0xB8	; 184
 be0:	7b e0       	ldi	r23, 0x0B	; 11
 be2:	a9 01       	movw	r20, r18
 be4:	28 ee       	ldi	r18, 0xE8	; 232
 be6:	33 e0       	ldi	r19, 0x03	; 3
 be8:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <RTOS_u8CreateTask>

	RTOS_voidStart(1);
 bec:	61 e0       	ldi	r22, 0x01	; 1
 bee:	70 e0       	ldi	r23, 0x00	; 0
 bf0:	80 e0       	ldi	r24, 0x00	; 0
 bf2:	90 e0       	ldi	r25, 0x00	; 0
 bf4:	0e 94 bf 02 	call	0x57e	; 0x57e <RTOS_voidStart>
 bf8:	ff cf       	rjmp	.-2      	; 0xbf8 <main+0x54>

00000bfa <LED_1>:

	}
}

void LED_1(void)
{
 bfa:	df 93       	push	r29
 bfc:	cf 93       	push	r28
 bfe:	cd b7       	in	r28, 0x3d	; 61
 c00:	de b7       	in	r29, 0x3e	; 62
	static u8 Local_u8LedState = 0;
	TOGGLE_BIT(Local_u8LedState,0);
 c02:	90 91 7f 00 	lds	r25, 0x007F
 c06:	81 e0       	ldi	r24, 0x01	; 1
 c08:	89 27       	eor	r24, r25
 c0a:	80 93 7f 00 	sts	0x007F, r24
	DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN0,Local_u8LedState);
 c0e:	90 91 7f 00 	lds	r25, 0x007F
 c12:	82 e0       	ldi	r24, 0x02	; 2
 c14:	60 e0       	ldi	r22, 0x00	; 0
 c16:	49 2f       	mov	r20, r25
 c18:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_u8SetPinValue>

}
 c1c:	cf 91       	pop	r28
 c1e:	df 91       	pop	r29
 c20:	08 95       	ret

00000c22 <LED_2>:
void LED_2(void)
{
 c22:	df 93       	push	r29
 c24:	cf 93       	push	r28
 c26:	cd b7       	in	r28, 0x3d	; 61
 c28:	de b7       	in	r29, 0x3e	; 62
	static u8 Local_u8LedState = 0;
	TOGGLE_BIT(Local_u8LedState,0);
 c2a:	90 91 80 00 	lds	r25, 0x0080
 c2e:	81 e0       	ldi	r24, 0x01	; 1
 c30:	89 27       	eor	r24, r25
 c32:	80 93 80 00 	sts	0x0080, r24
	DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN1,Local_u8LedState);
 c36:	90 91 80 00 	lds	r25, 0x0080
 c3a:	82 e0       	ldi	r24, 0x02	; 2
 c3c:	61 e0       	ldi	r22, 0x01	; 1
 c3e:	49 2f       	mov	r20, r25
 c40:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_u8SetPinValue>

}
 c44:	cf 91       	pop	r28
 c46:	df 91       	pop	r29
 c48:	08 95       	ret

00000c4a <LED_3>:
void LED_3(void)
{
 c4a:	df 93       	push	r29
 c4c:	cf 93       	push	r28
 c4e:	cd b7       	in	r28, 0x3d	; 61
 c50:	de b7       	in	r29, 0x3e	; 62
	static u8 Local_u8LedState = 0;
	TOGGLE_BIT(Local_u8LedState,0);
 c52:	90 91 81 00 	lds	r25, 0x0081
 c56:	81 e0       	ldi	r24, 0x01	; 1
 c58:	89 27       	eor	r24, r25
 c5a:	80 93 81 00 	sts	0x0081, r24
	DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN2,Local_u8LedState);
 c5e:	90 91 81 00 	lds	r25, 0x0081
 c62:	82 e0       	ldi	r24, 0x02	; 2
 c64:	62 e0       	ldi	r22, 0x02	; 2
 c66:	49 2f       	mov	r20, r25
 c68:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_u8SetPinValue>

}
 c6c:	cf 91       	pop	r28
 c6e:	df 91       	pop	r29
 c70:	08 95       	ret

00000c72 <__mulsi3>:
 c72:	62 9f       	mul	r22, r18
 c74:	d0 01       	movw	r26, r0
 c76:	73 9f       	mul	r23, r19
 c78:	f0 01       	movw	r30, r0
 c7a:	82 9f       	mul	r24, r18
 c7c:	e0 0d       	add	r30, r0
 c7e:	f1 1d       	adc	r31, r1
 c80:	64 9f       	mul	r22, r20
 c82:	e0 0d       	add	r30, r0
 c84:	f1 1d       	adc	r31, r1
 c86:	92 9f       	mul	r25, r18
 c88:	f0 0d       	add	r31, r0
 c8a:	83 9f       	mul	r24, r19
 c8c:	f0 0d       	add	r31, r0
 c8e:	74 9f       	mul	r23, r20
 c90:	f0 0d       	add	r31, r0
 c92:	65 9f       	mul	r22, r21
 c94:	f0 0d       	add	r31, r0
 c96:	99 27       	eor	r25, r25
 c98:	72 9f       	mul	r23, r18
 c9a:	b0 0d       	add	r27, r0
 c9c:	e1 1d       	adc	r30, r1
 c9e:	f9 1f       	adc	r31, r25
 ca0:	63 9f       	mul	r22, r19
 ca2:	b0 0d       	add	r27, r0
 ca4:	e1 1d       	adc	r30, r1
 ca6:	f9 1f       	adc	r31, r25
 ca8:	bd 01       	movw	r22, r26
 caa:	cf 01       	movw	r24, r30
 cac:	11 24       	eor	r1, r1
 cae:	08 95       	ret

00000cb0 <__udivmodsi4>:
 cb0:	a1 e2       	ldi	r26, 0x21	; 33
 cb2:	1a 2e       	mov	r1, r26
 cb4:	aa 1b       	sub	r26, r26
 cb6:	bb 1b       	sub	r27, r27
 cb8:	fd 01       	movw	r30, r26
 cba:	0d c0       	rjmp	.+26     	; 0xcd6 <__udivmodsi4_ep>

00000cbc <__udivmodsi4_loop>:
 cbc:	aa 1f       	adc	r26, r26
 cbe:	bb 1f       	adc	r27, r27
 cc0:	ee 1f       	adc	r30, r30
 cc2:	ff 1f       	adc	r31, r31
 cc4:	a2 17       	cp	r26, r18
 cc6:	b3 07       	cpc	r27, r19
 cc8:	e4 07       	cpc	r30, r20
 cca:	f5 07       	cpc	r31, r21
 ccc:	20 f0       	brcs	.+8      	; 0xcd6 <__udivmodsi4_ep>
 cce:	a2 1b       	sub	r26, r18
 cd0:	b3 0b       	sbc	r27, r19
 cd2:	e4 0b       	sbc	r30, r20
 cd4:	f5 0b       	sbc	r31, r21

00000cd6 <__udivmodsi4_ep>:
 cd6:	66 1f       	adc	r22, r22
 cd8:	77 1f       	adc	r23, r23
 cda:	88 1f       	adc	r24, r24
 cdc:	99 1f       	adc	r25, r25
 cde:	1a 94       	dec	r1
 ce0:	69 f7       	brne	.-38     	; 0xcbc <__udivmodsi4_loop>
 ce2:	60 95       	com	r22
 ce4:	70 95       	com	r23
 ce6:	80 95       	com	r24
 ce8:	90 95       	com	r25
 cea:	9b 01       	movw	r18, r22
 cec:	ac 01       	movw	r20, r24
 cee:	bd 01       	movw	r22, r26
 cf0:	cf 01       	movw	r24, r30
 cf2:	08 95       	ret

00000cf4 <_exit>:
 cf4:	f8 94       	cli

00000cf6 <__stop_program>:
 cf6:	ff cf       	rjmp	.-2      	; 0xcf6 <__stop_program>
