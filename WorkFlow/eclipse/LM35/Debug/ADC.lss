
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000662  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000aec  00000000  00000000  000006b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      000004ac  00000000  00000000  000011a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 1d 03 	call	0x63a	; 0x63a <main>
  64:	0c 94 2f 03 	jmp	0x65e	; 0x65e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <ADC_voidInit>:




void ADC_voidInit(void)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
	/* AVCC as reference voltage */
	SET_BIT(ADMUX,ADMUX_REFS0);
  74:	a7 e2       	ldi	r26, 0x27	; 39
  76:	b0 e0       	ldi	r27, 0x00	; 0
  78:	e7 e2       	ldi	r30, 0x27	; 39
  7a:	f0 e0       	ldi	r31, 0x00	; 0
  7c:	80 81       	ld	r24, Z
  7e:	80 64       	ori	r24, 0x40	; 64
  80:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,ADMUX_REFS1);
  82:	a7 e2       	ldi	r26, 0x27	; 39
  84:	b0 e0       	ldi	r27, 0x00	; 0
  86:	e7 e2       	ldi	r30, 0x27	; 39
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	80 81       	ld	r24, Z
  8c:	8f 77       	andi	r24, 0x7F	; 127
  8e:	8c 93       	st	X, r24

	/* Activate Left Adjust result */
	SET_BIT(ADMUX,ADMUX_ADLAR);
  90:	a7 e2       	ldi	r26, 0x27	; 39
  92:	b0 e0       	ldi	r27, 0x00	; 0
  94:	e7 e2       	ldi	r30, 0x27	; 39
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	80 81       	ld	r24, Z
  9a:	80 62       	ori	r24, 0x20	; 32
  9c:	8c 93       	st	X, r24

	/* Prescaler Selection */
	ADCSRA &= ADC_PRESC_MASK;
  9e:	a6 e2       	ldi	r26, 0x26	; 38
  a0:	b0 e0       	ldi	r27, 0x00	; 0
  a2:	e6 e2       	ldi	r30, 0x26	; 38
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	80 81       	ld	r24, Z
  a8:	88 7f       	andi	r24, 0xF8	; 248
  aa:	8c 93       	st	X, r24
	ADCSRA |= ADC_PRESC_SELEC;
  ac:	a6 e2       	ldi	r26, 0x26	; 38
  ae:	b0 e0       	ldi	r27, 0x00	; 0
  b0:	e6 e2       	ldi	r30, 0x26	; 38
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	87 60       	ori	r24, 0x07	; 7
  b8:	8c 93       	st	X, r24

	/* Enable peripheral*/
	SET_BIT(ADCSRA,ADCSRA_ADEN);
  ba:	a6 e2       	ldi	r26, 0x26	; 38
  bc:	b0 e0       	ldi	r27, 0x00	; 0
  be:	e6 e2       	ldi	r30, 0x26	; 38
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	80 68       	ori	r24, 0x80	; 128
  c6:	8c 93       	st	X, r24

}
  c8:	cf 91       	pop	r28
  ca:	df 91       	pop	r29
  cc:	08 95       	ret

000000ce <ADC_u8GetChannelReading>:
u8 ADC_u8GetChannelReading(u8 Copy_u8Channel)
{
  ce:	df 93       	push	r29
  d0:	cf 93       	push	r28
  d2:	0f 92       	push	r0
  d4:	cd b7       	in	r28, 0x3d	; 61
  d6:	de b7       	in	r29, 0x3e	; 62
  d8:	89 83       	std	Y+1, r24	; 0x01

	/* Clear the MUX bits in ADMUX register*/
	ADMUX &= ADC_SELEC_CHANNEL_MASK;
  da:	a7 e2       	ldi	r26, 0x27	; 39
  dc:	b0 e0       	ldi	r27, 0x00	; 0
  de:	e7 e2       	ldi	r30, 0x27	; 39
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	80 7e       	andi	r24, 0xE0	; 224
  e6:	8c 93       	st	X, r24

	/*Set the required channel into the MUX bits*/
	ADMUX |= Copy_u8Channel;
  e8:	a7 e2       	ldi	r26, 0x27	; 39
  ea:	b0 e0       	ldi	r27, 0x00	; 0
  ec:	e7 e2       	ldi	r30, 0x27	; 39
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	90 81       	ld	r25, Z
  f2:	89 81       	ldd	r24, Y+1	; 0x01
  f4:	89 2b       	or	r24, r25
  f6:	8c 93       	st	X, r24

	/* Start Conversion */
	SET_BIT(ADCSRA,ADCSRA_ADSC);
  f8:	a6 e2       	ldi	r26, 0x26	; 38
  fa:	b0 e0       	ldi	r27, 0x00	; 0
  fc:	e6 e2       	ldi	r30, 0x26	; 38
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	80 64       	ori	r24, 0x40	; 64
 104:	8c 93       	st	X, r24

	/* Polling (Busy Waiting) until the conversion complete flag is set */
	while((GET_BIT(ADCSRA,ADCSRA_ADIF))==0);
 106:	e6 e2       	ldi	r30, 0x26	; 38
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	82 95       	swap	r24
 10e:	8f 70       	andi	r24, 0x0F	; 15
 110:	88 2f       	mov	r24, r24
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	81 70       	andi	r24, 0x01	; 1
 116:	90 70       	andi	r25, 0x00	; 0
 118:	00 97       	sbiw	r24, 0x00	; 0
 11a:	a9 f3       	breq	.-22     	; 0x106 <ADC_u8GetChannelReading+0x38>

	/* Clear the conversion complete flag*/
	SET_BIT(ADCSRA,ADCSRA_ADIF);
 11c:	a6 e2       	ldi	r26, 0x26	; 38
 11e:	b0 e0       	ldi	r27, 0x00	; 0
 120:	e6 e2       	ldi	r30, 0x26	; 38
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	80 81       	ld	r24, Z
 126:	80 61       	ori	r24, 0x10	; 16
 128:	8c 93       	st	X, r24

	/* Return the reading*/
	return ADCH;
 12a:	e5 e2       	ldi	r30, 0x25	; 37
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z

}
 130:	0f 90       	pop	r0
 132:	cf 91       	pop	r28
 134:	df 91       	pop	r29
 136:	08 95       	ret

00000138 <DIO_u8SetPinValue>:
//
//	return Local_u8ErrorState;
//}

u8 DIO_u8SetPinValue(u8 Copy_u8port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
 138:	df 93       	push	r29
 13a:	cf 93       	push	r28
 13c:	cd b7       	in	r28, 0x3d	; 61
 13e:	de b7       	in	r29, 0x3e	; 62
 140:	28 97       	sbiw	r28, 0x08	; 8
 142:	0f b6       	in	r0, 0x3f	; 63
 144:	f8 94       	cli
 146:	de bf       	out	0x3e, r29	; 62
 148:	0f be       	out	0x3f, r0	; 63
 14a:	cd bf       	out	0x3d, r28	; 61
 14c:	8a 83       	std	Y+2, r24	; 0x02
 14e:	6b 83       	std	Y+3, r22	; 0x03
 150:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
 152:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin<=DIO_u8PIN7)
 154:	8b 81       	ldd	r24, Y+3	; 0x03
 156:	88 30       	cpi	r24, 0x08	; 8
 158:	08 f0       	brcs	.+2      	; 0x15c <DIO_u8SetPinValue+0x24>
 15a:	f4 c0       	rjmp	.+488    	; 0x344 <DIO_u8SetPinValue+0x20c>
	{
		if(Copy_u8Value == DIO_u8PIN_LOW)
 15c:	8c 81       	ldd	r24, Y+4	; 0x04
 15e:	88 23       	and	r24, r24
 160:	09 f0       	breq	.+2      	; 0x164 <DIO_u8SetPinValue+0x2c>
 162:	77 c0       	rjmp	.+238    	; 0x252 <DIO_u8SetPinValue+0x11a>
		{

			switch(Copy_u8port)
 164:	8a 81       	ldd	r24, Y+2	; 0x02
 166:	28 2f       	mov	r18, r24
 168:	30 e0       	ldi	r19, 0x00	; 0
 16a:	38 87       	std	Y+8, r19	; 0x08
 16c:	2f 83       	std	Y+7, r18	; 0x07
 16e:	8f 81       	ldd	r24, Y+7	; 0x07
 170:	98 85       	ldd	r25, Y+8	; 0x08
 172:	81 30       	cpi	r24, 0x01	; 1
 174:	91 05       	cpc	r25, r1
 176:	59 f1       	breq	.+86     	; 0x1ce <DIO_u8SetPinValue+0x96>
 178:	2f 81       	ldd	r18, Y+7	; 0x07
 17a:	38 85       	ldd	r19, Y+8	; 0x08
 17c:	22 30       	cpi	r18, 0x02	; 2
 17e:	31 05       	cpc	r19, r1
 180:	2c f4       	brge	.+10     	; 0x18c <DIO_u8SetPinValue+0x54>
 182:	8f 81       	ldd	r24, Y+7	; 0x07
 184:	98 85       	ldd	r25, Y+8	; 0x08
 186:	00 97       	sbiw	r24, 0x00	; 0
 188:	69 f0       	breq	.+26     	; 0x1a4 <DIO_u8SetPinValue+0x6c>
 18a:	60 c0       	rjmp	.+192    	; 0x24c <DIO_u8SetPinValue+0x114>
 18c:	2f 81       	ldd	r18, Y+7	; 0x07
 18e:	38 85       	ldd	r19, Y+8	; 0x08
 190:	22 30       	cpi	r18, 0x02	; 2
 192:	31 05       	cpc	r19, r1
 194:	89 f1       	breq	.+98     	; 0x1f8 <DIO_u8SetPinValue+0xc0>
 196:	8f 81       	ldd	r24, Y+7	; 0x07
 198:	98 85       	ldd	r25, Y+8	; 0x08
 19a:	83 30       	cpi	r24, 0x03	; 3
 19c:	91 05       	cpc	r25, r1
 19e:	09 f4       	brne	.+2      	; 0x1a2 <DIO_u8SetPinValue+0x6a>
 1a0:	40 c0       	rjmp	.+128    	; 0x222 <DIO_u8SetPinValue+0xea>
 1a2:	54 c0       	rjmp	.+168    	; 0x24c <DIO_u8SetPinValue+0x114>
			{
			case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
 1a4:	ab e3       	ldi	r26, 0x3B	; 59
 1a6:	b0 e0       	ldi	r27, 0x00	; 0
 1a8:	eb e3       	ldi	r30, 0x3B	; 59
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	80 81       	ld	r24, Z
 1ae:	48 2f       	mov	r20, r24
 1b0:	8b 81       	ldd	r24, Y+3	; 0x03
 1b2:	28 2f       	mov	r18, r24
 1b4:	30 e0       	ldi	r19, 0x00	; 0
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	02 2e       	mov	r0, r18
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <DIO_u8SetPinValue+0x8a>
 1be:	88 0f       	add	r24, r24
 1c0:	99 1f       	adc	r25, r25
 1c2:	0a 94       	dec	r0
 1c4:	e2 f7       	brpl	.-8      	; 0x1be <DIO_u8SetPinValue+0x86>
 1c6:	80 95       	com	r24
 1c8:	84 23       	and	r24, r20
 1ca:	8c 93       	st	X, r24
 1cc:	bd c0       	rjmp	.+378    	; 0x348 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
 1ce:	a8 e3       	ldi	r26, 0x38	; 56
 1d0:	b0 e0       	ldi	r27, 0x00	; 0
 1d2:	e8 e3       	ldi	r30, 0x38	; 56
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	80 81       	ld	r24, Z
 1d8:	48 2f       	mov	r20, r24
 1da:	8b 81       	ldd	r24, Y+3	; 0x03
 1dc:	28 2f       	mov	r18, r24
 1de:	30 e0       	ldi	r19, 0x00	; 0
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	02 2e       	mov	r0, r18
 1e6:	02 c0       	rjmp	.+4      	; 0x1ec <DIO_u8SetPinValue+0xb4>
 1e8:	88 0f       	add	r24, r24
 1ea:	99 1f       	adc	r25, r25
 1ec:	0a 94       	dec	r0
 1ee:	e2 f7       	brpl	.-8      	; 0x1e8 <DIO_u8SetPinValue+0xb0>
 1f0:	80 95       	com	r24
 1f2:	84 23       	and	r24, r20
 1f4:	8c 93       	st	X, r24
 1f6:	a8 c0       	rjmp	.+336    	; 0x348 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin); break;
 1f8:	a5 e3       	ldi	r26, 0x35	; 53
 1fa:	b0 e0       	ldi	r27, 0x00	; 0
 1fc:	e5 e3       	ldi	r30, 0x35	; 53
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	80 81       	ld	r24, Z
 202:	48 2f       	mov	r20, r24
 204:	8b 81       	ldd	r24, Y+3	; 0x03
 206:	28 2f       	mov	r18, r24
 208:	30 e0       	ldi	r19, 0x00	; 0
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	02 2e       	mov	r0, r18
 210:	02 c0       	rjmp	.+4      	; 0x216 <DIO_u8SetPinValue+0xde>
 212:	88 0f       	add	r24, r24
 214:	99 1f       	adc	r25, r25
 216:	0a 94       	dec	r0
 218:	e2 f7       	brpl	.-8      	; 0x212 <DIO_u8SetPinValue+0xda>
 21a:	80 95       	com	r24
 21c:	84 23       	and	r24, r20
 21e:	8c 93       	st	X, r24
 220:	93 c0       	rjmp	.+294    	; 0x348 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin); break;
 222:	a2 e3       	ldi	r26, 0x32	; 50
 224:	b0 e0       	ldi	r27, 0x00	; 0
 226:	e2 e3       	ldi	r30, 0x32	; 50
 228:	f0 e0       	ldi	r31, 0x00	; 0
 22a:	80 81       	ld	r24, Z
 22c:	48 2f       	mov	r20, r24
 22e:	8b 81       	ldd	r24, Y+3	; 0x03
 230:	28 2f       	mov	r18, r24
 232:	30 e0       	ldi	r19, 0x00	; 0
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	02 2e       	mov	r0, r18
 23a:	02 c0       	rjmp	.+4      	; 0x240 <DIO_u8SetPinValue+0x108>
 23c:	88 0f       	add	r24, r24
 23e:	99 1f       	adc	r25, r25
 240:	0a 94       	dec	r0
 242:	e2 f7       	brpl	.-8      	; 0x23c <DIO_u8SetPinValue+0x104>
 244:	80 95       	com	r24
 246:	84 23       	and	r24, r20
 248:	8c 93       	st	X, r24
 24a:	7e c0       	rjmp	.+252    	; 0x348 <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState =1; break;
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	89 83       	std	Y+1, r24	; 0x01
 250:	7b c0       	rjmp	.+246    	; 0x348 <DIO_u8SetPinValue+0x210>

			}
		}
		else if(Copy_u8Value == DIO_u8PIN_HIGH)
 252:	8c 81       	ldd	r24, Y+4	; 0x04
 254:	81 30       	cpi	r24, 0x01	; 1
 256:	09 f0       	breq	.+2      	; 0x25a <DIO_u8SetPinValue+0x122>
 258:	72 c0       	rjmp	.+228    	; 0x33e <DIO_u8SetPinValue+0x206>
		{

			switch(Copy_u8port)
 25a:	8a 81       	ldd	r24, Y+2	; 0x02
 25c:	28 2f       	mov	r18, r24
 25e:	30 e0       	ldi	r19, 0x00	; 0
 260:	3e 83       	std	Y+6, r19	; 0x06
 262:	2d 83       	std	Y+5, r18	; 0x05
 264:	8d 81       	ldd	r24, Y+5	; 0x05
 266:	9e 81       	ldd	r25, Y+6	; 0x06
 268:	81 30       	cpi	r24, 0x01	; 1
 26a:	91 05       	cpc	r25, r1
 26c:	49 f1       	breq	.+82     	; 0x2c0 <DIO_u8SetPinValue+0x188>
 26e:	2d 81       	ldd	r18, Y+5	; 0x05
 270:	3e 81       	ldd	r19, Y+6	; 0x06
 272:	22 30       	cpi	r18, 0x02	; 2
 274:	31 05       	cpc	r19, r1
 276:	2c f4       	brge	.+10     	; 0x282 <DIO_u8SetPinValue+0x14a>
 278:	8d 81       	ldd	r24, Y+5	; 0x05
 27a:	9e 81       	ldd	r25, Y+6	; 0x06
 27c:	00 97       	sbiw	r24, 0x00	; 0
 27e:	61 f0       	breq	.+24     	; 0x298 <DIO_u8SetPinValue+0x160>
 280:	5b c0       	rjmp	.+182    	; 0x338 <DIO_u8SetPinValue+0x200>
 282:	2d 81       	ldd	r18, Y+5	; 0x05
 284:	3e 81       	ldd	r19, Y+6	; 0x06
 286:	22 30       	cpi	r18, 0x02	; 2
 288:	31 05       	cpc	r19, r1
 28a:	71 f1       	breq	.+92     	; 0x2e8 <DIO_u8SetPinValue+0x1b0>
 28c:	8d 81       	ldd	r24, Y+5	; 0x05
 28e:	9e 81       	ldd	r25, Y+6	; 0x06
 290:	83 30       	cpi	r24, 0x03	; 3
 292:	91 05       	cpc	r25, r1
 294:	e9 f1       	breq	.+122    	; 0x310 <DIO_u8SetPinValue+0x1d8>
 296:	50 c0       	rjmp	.+160    	; 0x338 <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
 298:	ab e3       	ldi	r26, 0x3B	; 59
 29a:	b0 e0       	ldi	r27, 0x00	; 0
 29c:	eb e3       	ldi	r30, 0x3B	; 59
 29e:	f0 e0       	ldi	r31, 0x00	; 0
 2a0:	80 81       	ld	r24, Z
 2a2:	48 2f       	mov	r20, r24
 2a4:	8b 81       	ldd	r24, Y+3	; 0x03
 2a6:	28 2f       	mov	r18, r24
 2a8:	30 e0       	ldi	r19, 0x00	; 0
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	02 2e       	mov	r0, r18
 2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <DIO_u8SetPinValue+0x17e>
 2b2:	88 0f       	add	r24, r24
 2b4:	99 1f       	adc	r25, r25
 2b6:	0a 94       	dec	r0
 2b8:	e2 f7       	brpl	.-8      	; 0x2b2 <DIO_u8SetPinValue+0x17a>
 2ba:	84 2b       	or	r24, r20
 2bc:	8c 93       	st	X, r24
 2be:	44 c0       	rjmp	.+136    	; 0x348 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
 2c0:	a8 e3       	ldi	r26, 0x38	; 56
 2c2:	b0 e0       	ldi	r27, 0x00	; 0
 2c4:	e8 e3       	ldi	r30, 0x38	; 56
 2c6:	f0 e0       	ldi	r31, 0x00	; 0
 2c8:	80 81       	ld	r24, Z
 2ca:	48 2f       	mov	r20, r24
 2cc:	8b 81       	ldd	r24, Y+3	; 0x03
 2ce:	28 2f       	mov	r18, r24
 2d0:	30 e0       	ldi	r19, 0x00	; 0
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	02 2e       	mov	r0, r18
 2d8:	02 c0       	rjmp	.+4      	; 0x2de <DIO_u8SetPinValue+0x1a6>
 2da:	88 0f       	add	r24, r24
 2dc:	99 1f       	adc	r25, r25
 2de:	0a 94       	dec	r0
 2e0:	e2 f7       	brpl	.-8      	; 0x2da <DIO_u8SetPinValue+0x1a2>
 2e2:	84 2b       	or	r24, r20
 2e4:	8c 93       	st	X, r24
 2e6:	30 c0       	rjmp	.+96     	; 0x348 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin); break;
 2e8:	a5 e3       	ldi	r26, 0x35	; 53
 2ea:	b0 e0       	ldi	r27, 0x00	; 0
 2ec:	e5 e3       	ldi	r30, 0x35	; 53
 2ee:	f0 e0       	ldi	r31, 0x00	; 0
 2f0:	80 81       	ld	r24, Z
 2f2:	48 2f       	mov	r20, r24
 2f4:	8b 81       	ldd	r24, Y+3	; 0x03
 2f6:	28 2f       	mov	r18, r24
 2f8:	30 e0       	ldi	r19, 0x00	; 0
 2fa:	81 e0       	ldi	r24, 0x01	; 1
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	02 2e       	mov	r0, r18
 300:	02 c0       	rjmp	.+4      	; 0x306 <DIO_u8SetPinValue+0x1ce>
 302:	88 0f       	add	r24, r24
 304:	99 1f       	adc	r25, r25
 306:	0a 94       	dec	r0
 308:	e2 f7       	brpl	.-8      	; 0x302 <DIO_u8SetPinValue+0x1ca>
 30a:	84 2b       	or	r24, r20
 30c:	8c 93       	st	X, r24
 30e:	1c c0       	rjmp	.+56     	; 0x348 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin); break;
 310:	a2 e3       	ldi	r26, 0x32	; 50
 312:	b0 e0       	ldi	r27, 0x00	; 0
 314:	e2 e3       	ldi	r30, 0x32	; 50
 316:	f0 e0       	ldi	r31, 0x00	; 0
 318:	80 81       	ld	r24, Z
 31a:	48 2f       	mov	r20, r24
 31c:	8b 81       	ldd	r24, Y+3	; 0x03
 31e:	28 2f       	mov	r18, r24
 320:	30 e0       	ldi	r19, 0x00	; 0
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	02 2e       	mov	r0, r18
 328:	02 c0       	rjmp	.+4      	; 0x32e <DIO_u8SetPinValue+0x1f6>
 32a:	88 0f       	add	r24, r24
 32c:	99 1f       	adc	r25, r25
 32e:	0a 94       	dec	r0
 330:	e2 f7       	brpl	.-8      	; 0x32a <DIO_u8SetPinValue+0x1f2>
 332:	84 2b       	or	r24, r20
 334:	8c 93       	st	X, r24
 336:	08 c0       	rjmp	.+16     	; 0x348 <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState =1; break;
 338:	81 e0       	ldi	r24, 0x01	; 1
 33a:	89 83       	std	Y+1, r24	; 0x01
 33c:	05 c0       	rjmp	.+10     	; 0x348 <DIO_u8SetPinValue+0x210>

			}
		}
		else
		{
			Local_u8ErrorState = 1;
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	89 83       	std	Y+1, r24	; 0x01
 342:	02 c0       	rjmp	.+4      	; 0x348 <DIO_u8SetPinValue+0x210>
		}

	}
	else
	{
		Local_u8ErrorState = 1;
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
 348:	89 81       	ldd	r24, Y+1	; 0x01
}
 34a:	28 96       	adiw	r28, 0x08	; 8
 34c:	0f b6       	in	r0, 0x3f	; 63
 34e:	f8 94       	cli
 350:	de bf       	out	0x3e, r29	; 62
 352:	0f be       	out	0x3f, r0	; 63
 354:	cd bf       	out	0x3d, r28	; 61
 356:	cf 91       	pop	r28
 358:	df 91       	pop	r29
 35a:	08 95       	ret

0000035c <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8port, u8 Copy_u8Value)
{
 35c:	df 93       	push	r29
 35e:	cf 93       	push	r28
 360:	00 d0       	rcall	.+0      	; 0x362 <DIO_u8SetPortValue+0x6>
 362:	00 d0       	rcall	.+0      	; 0x364 <DIO_u8SetPortValue+0x8>
 364:	0f 92       	push	r0
 366:	cd b7       	in	r28, 0x3d	; 61
 368:	de b7       	in	r29, 0x3e	; 62
 36a:	8a 83       	std	Y+2, r24	; 0x02
 36c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
 36e:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8port<=DIO_u8PORTD)
 370:	8a 81       	ldd	r24, Y+2	; 0x02
 372:	84 30       	cpi	r24, 0x04	; 4
 374:	b0 f5       	brcc	.+108    	; 0x3e2 <DIO_u8SetPortValue+0x86>
	{
		switch(Copy_u8port)
 376:	8a 81       	ldd	r24, Y+2	; 0x02
 378:	28 2f       	mov	r18, r24
 37a:	30 e0       	ldi	r19, 0x00	; 0
 37c:	3d 83       	std	Y+5, r19	; 0x05
 37e:	2c 83       	std	Y+4, r18	; 0x04
 380:	8c 81       	ldd	r24, Y+4	; 0x04
 382:	9d 81       	ldd	r25, Y+5	; 0x05
 384:	81 30       	cpi	r24, 0x01	; 1
 386:	91 05       	cpc	r25, r1
 388:	d1 f0       	breq	.+52     	; 0x3be <DIO_u8SetPortValue+0x62>
 38a:	2c 81       	ldd	r18, Y+4	; 0x04
 38c:	3d 81       	ldd	r19, Y+5	; 0x05
 38e:	22 30       	cpi	r18, 0x02	; 2
 390:	31 05       	cpc	r19, r1
 392:	2c f4       	brge	.+10     	; 0x39e <DIO_u8SetPortValue+0x42>
 394:	8c 81       	ldd	r24, Y+4	; 0x04
 396:	9d 81       	ldd	r25, Y+5	; 0x05
 398:	00 97       	sbiw	r24, 0x00	; 0
 39a:	61 f0       	breq	.+24     	; 0x3b4 <DIO_u8SetPortValue+0x58>
 39c:	1f c0       	rjmp	.+62     	; 0x3dc <DIO_u8SetPortValue+0x80>
 39e:	2c 81       	ldd	r18, Y+4	; 0x04
 3a0:	3d 81       	ldd	r19, Y+5	; 0x05
 3a2:	22 30       	cpi	r18, 0x02	; 2
 3a4:	31 05       	cpc	r19, r1
 3a6:	81 f0       	breq	.+32     	; 0x3c8 <DIO_u8SetPortValue+0x6c>
 3a8:	8c 81       	ldd	r24, Y+4	; 0x04
 3aa:	9d 81       	ldd	r25, Y+5	; 0x05
 3ac:	83 30       	cpi	r24, 0x03	; 3
 3ae:	91 05       	cpc	r25, r1
 3b0:	81 f0       	breq	.+32     	; 0x3d2 <DIO_u8SetPortValue+0x76>
 3b2:	14 c0       	rjmp	.+40     	; 0x3dc <DIO_u8SetPortValue+0x80>
		{
		case DIO_u8PORTA: PORTA = Copy_u8Value; break;
 3b4:	eb e3       	ldi	r30, 0x3B	; 59
 3b6:	f0 e0       	ldi	r31, 0x00	; 0
 3b8:	8b 81       	ldd	r24, Y+3	; 0x03
 3ba:	80 83       	st	Z, r24
 3bc:	14 c0       	rjmp	.+40     	; 0x3e6 <DIO_u8SetPortValue+0x8a>
		case DIO_u8PORTB: PORTB = Copy_u8Value; break;
 3be:	e8 e3       	ldi	r30, 0x38	; 56
 3c0:	f0 e0       	ldi	r31, 0x00	; 0
 3c2:	8b 81       	ldd	r24, Y+3	; 0x03
 3c4:	80 83       	st	Z, r24
 3c6:	0f c0       	rjmp	.+30     	; 0x3e6 <DIO_u8SetPortValue+0x8a>
		case DIO_u8PORTC: PORTC = Copy_u8Value; break;
 3c8:	e5 e3       	ldi	r30, 0x35	; 53
 3ca:	f0 e0       	ldi	r31, 0x00	; 0
 3cc:	8b 81       	ldd	r24, Y+3	; 0x03
 3ce:	80 83       	st	Z, r24
 3d0:	0a c0       	rjmp	.+20     	; 0x3e6 <DIO_u8SetPortValue+0x8a>
		case DIO_u8PORTD: PORTD = Copy_u8Value; break;
 3d2:	e2 e3       	ldi	r30, 0x32	; 50
 3d4:	f0 e0       	ldi	r31, 0x00	; 0
 3d6:	8b 81       	ldd	r24, Y+3	; 0x03
 3d8:	80 83       	st	Z, r24
 3da:	05 c0       	rjmp	.+10     	; 0x3e6 <DIO_u8SetPortValue+0x8a>
		default: Local_u8ErrorState =1; break;
 3dc:	81 e0       	ldi	r24, 0x01	; 1
 3de:	89 83       	std	Y+1, r24	; 0x01
 3e0:	02 c0       	rjmp	.+4      	; 0x3e6 <DIO_u8SetPortValue+0x8a>

		}
	}
	else
	{
		Local_u8ErrorState = 1;
 3e2:	81 e0       	ldi	r24, 0x01	; 1
 3e4:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_u8ErrorState;
 3e6:	89 81       	ldd	r24, Y+1	; 0x01
}
 3e8:	0f 90       	pop	r0
 3ea:	0f 90       	pop	r0
 3ec:	0f 90       	pop	r0
 3ee:	0f 90       	pop	r0
 3f0:	0f 90       	pop	r0
 3f2:	cf 91       	pop	r28
 3f4:	df 91       	pop	r29
 3f6:	08 95       	ret

000003f8 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8port, u8 Copy_u8Pin, u8* Copy_Pu8Value)
{
 3f8:	df 93       	push	r29
 3fa:	cf 93       	push	r28
 3fc:	cd b7       	in	r28, 0x3d	; 61
 3fe:	de b7       	in	r29, 0x3e	; 62
 400:	27 97       	sbiw	r28, 0x07	; 7
 402:	0f b6       	in	r0, 0x3f	; 63
 404:	f8 94       	cli
 406:	de bf       	out	0x3e, r29	; 62
 408:	0f be       	out	0x3f, r0	; 63
 40a:	cd bf       	out	0x3d, r28	; 61
 40c:	8a 83       	std	Y+2, r24	; 0x02
 40e:	6b 83       	std	Y+3, r22	; 0x03
 410:	5d 83       	std	Y+5, r21	; 0x05
 412:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
 414:	19 82       	std	Y+1, r1	; 0x01

	if((Copy_Pu8Value != NULL )&&(Copy_u8Pin<=DIO_u8PIN7))
 416:	8c 81       	ldd	r24, Y+4	; 0x04
 418:	9d 81       	ldd	r25, Y+5	; 0x05
 41a:	00 97       	sbiw	r24, 0x00	; 0
 41c:	09 f4       	brne	.+2      	; 0x420 <DIO_u8GetPinValue+0x28>
 41e:	78 c0       	rjmp	.+240    	; 0x510 <DIO_u8GetPinValue+0x118>
 420:	8b 81       	ldd	r24, Y+3	; 0x03
 422:	88 30       	cpi	r24, 0x08	; 8
 424:	08 f0       	brcs	.+2      	; 0x428 <DIO_u8GetPinValue+0x30>
 426:	74 c0       	rjmp	.+232    	; 0x510 <DIO_u8GetPinValue+0x118>
	{


			switch(Copy_u8port)
 428:	8a 81       	ldd	r24, Y+2	; 0x02
 42a:	28 2f       	mov	r18, r24
 42c:	30 e0       	ldi	r19, 0x00	; 0
 42e:	3f 83       	std	Y+7, r19	; 0x07
 430:	2e 83       	std	Y+6, r18	; 0x06
 432:	4e 81       	ldd	r20, Y+6	; 0x06
 434:	5f 81       	ldd	r21, Y+7	; 0x07
 436:	41 30       	cpi	r20, 0x01	; 1
 438:	51 05       	cpc	r21, r1
 43a:	59 f1       	breq	.+86     	; 0x492 <DIO_u8GetPinValue+0x9a>
 43c:	8e 81       	ldd	r24, Y+6	; 0x06
 43e:	9f 81       	ldd	r25, Y+7	; 0x07
 440:	82 30       	cpi	r24, 0x02	; 2
 442:	91 05       	cpc	r25, r1
 444:	34 f4       	brge	.+12     	; 0x452 <DIO_u8GetPinValue+0x5a>
 446:	2e 81       	ldd	r18, Y+6	; 0x06
 448:	3f 81       	ldd	r19, Y+7	; 0x07
 44a:	21 15       	cp	r18, r1
 44c:	31 05       	cpc	r19, r1
 44e:	69 f0       	breq	.+26     	; 0x46a <DIO_u8GetPinValue+0x72>
 450:	5c c0       	rjmp	.+184    	; 0x50a <DIO_u8GetPinValue+0x112>
 452:	4e 81       	ldd	r20, Y+6	; 0x06
 454:	5f 81       	ldd	r21, Y+7	; 0x07
 456:	42 30       	cpi	r20, 0x02	; 2
 458:	51 05       	cpc	r21, r1
 45a:	79 f1       	breq	.+94     	; 0x4ba <DIO_u8GetPinValue+0xc2>
 45c:	8e 81       	ldd	r24, Y+6	; 0x06
 45e:	9f 81       	ldd	r25, Y+7	; 0x07
 460:	83 30       	cpi	r24, 0x03	; 3
 462:	91 05       	cpc	r25, r1
 464:	09 f4       	brne	.+2      	; 0x468 <DIO_u8GetPinValue+0x70>
 466:	3d c0       	rjmp	.+122    	; 0x4e2 <DIO_u8GetPinValue+0xea>
 468:	50 c0       	rjmp	.+160    	; 0x50a <DIO_u8GetPinValue+0x112>
			{
			case DIO_u8PORTA: * Copy_Pu8Value = GET_BIT(PINA,Copy_u8Pin); break;
 46a:	e9 e3       	ldi	r30, 0x39	; 57
 46c:	f0 e0       	ldi	r31, 0x00	; 0
 46e:	80 81       	ld	r24, Z
 470:	28 2f       	mov	r18, r24
 472:	30 e0       	ldi	r19, 0x00	; 0
 474:	8b 81       	ldd	r24, Y+3	; 0x03
 476:	88 2f       	mov	r24, r24
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	a9 01       	movw	r20, r18
 47c:	02 c0       	rjmp	.+4      	; 0x482 <DIO_u8GetPinValue+0x8a>
 47e:	55 95       	asr	r21
 480:	47 95       	ror	r20
 482:	8a 95       	dec	r24
 484:	e2 f7       	brpl	.-8      	; 0x47e <DIO_u8GetPinValue+0x86>
 486:	ca 01       	movw	r24, r20
 488:	81 70       	andi	r24, 0x01	; 1
 48a:	ec 81       	ldd	r30, Y+4	; 0x04
 48c:	fd 81       	ldd	r31, Y+5	; 0x05
 48e:	80 83       	st	Z, r24
 490:	41 c0       	rjmp	.+130    	; 0x514 <DIO_u8GetPinValue+0x11c>
			case DIO_u8PORTB: * Copy_Pu8Value = GET_BIT(PINB,Copy_u8Pin); break;
 492:	e6 e3       	ldi	r30, 0x36	; 54
 494:	f0 e0       	ldi	r31, 0x00	; 0
 496:	80 81       	ld	r24, Z
 498:	28 2f       	mov	r18, r24
 49a:	30 e0       	ldi	r19, 0x00	; 0
 49c:	8b 81       	ldd	r24, Y+3	; 0x03
 49e:	88 2f       	mov	r24, r24
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	a9 01       	movw	r20, r18
 4a4:	02 c0       	rjmp	.+4      	; 0x4aa <DIO_u8GetPinValue+0xb2>
 4a6:	55 95       	asr	r21
 4a8:	47 95       	ror	r20
 4aa:	8a 95       	dec	r24
 4ac:	e2 f7       	brpl	.-8      	; 0x4a6 <DIO_u8GetPinValue+0xae>
 4ae:	ca 01       	movw	r24, r20
 4b0:	81 70       	andi	r24, 0x01	; 1
 4b2:	ec 81       	ldd	r30, Y+4	; 0x04
 4b4:	fd 81       	ldd	r31, Y+5	; 0x05
 4b6:	80 83       	st	Z, r24
 4b8:	2d c0       	rjmp	.+90     	; 0x514 <DIO_u8GetPinValue+0x11c>
			case DIO_u8PORTC: * Copy_Pu8Value = GET_BIT(PINC,Copy_u8Pin); break;
 4ba:	e3 e3       	ldi	r30, 0x33	; 51
 4bc:	f0 e0       	ldi	r31, 0x00	; 0
 4be:	80 81       	ld	r24, Z
 4c0:	28 2f       	mov	r18, r24
 4c2:	30 e0       	ldi	r19, 0x00	; 0
 4c4:	8b 81       	ldd	r24, Y+3	; 0x03
 4c6:	88 2f       	mov	r24, r24
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	a9 01       	movw	r20, r18
 4cc:	02 c0       	rjmp	.+4      	; 0x4d2 <DIO_u8GetPinValue+0xda>
 4ce:	55 95       	asr	r21
 4d0:	47 95       	ror	r20
 4d2:	8a 95       	dec	r24
 4d4:	e2 f7       	brpl	.-8      	; 0x4ce <DIO_u8GetPinValue+0xd6>
 4d6:	ca 01       	movw	r24, r20
 4d8:	81 70       	andi	r24, 0x01	; 1
 4da:	ec 81       	ldd	r30, Y+4	; 0x04
 4dc:	fd 81       	ldd	r31, Y+5	; 0x05
 4de:	80 83       	st	Z, r24
 4e0:	19 c0       	rjmp	.+50     	; 0x514 <DIO_u8GetPinValue+0x11c>
			case DIO_u8PORTD: * Copy_Pu8Value = GET_BIT(PIND,Copy_u8Pin); break;
 4e2:	e0 e3       	ldi	r30, 0x30	; 48
 4e4:	f0 e0       	ldi	r31, 0x00	; 0
 4e6:	80 81       	ld	r24, Z
 4e8:	28 2f       	mov	r18, r24
 4ea:	30 e0       	ldi	r19, 0x00	; 0
 4ec:	8b 81       	ldd	r24, Y+3	; 0x03
 4ee:	88 2f       	mov	r24, r24
 4f0:	90 e0       	ldi	r25, 0x00	; 0
 4f2:	a9 01       	movw	r20, r18
 4f4:	02 c0       	rjmp	.+4      	; 0x4fa <DIO_u8GetPinValue+0x102>
 4f6:	55 95       	asr	r21
 4f8:	47 95       	ror	r20
 4fa:	8a 95       	dec	r24
 4fc:	e2 f7       	brpl	.-8      	; 0x4f6 <DIO_u8GetPinValue+0xfe>
 4fe:	ca 01       	movw	r24, r20
 500:	81 70       	andi	r24, 0x01	; 1
 502:	ec 81       	ldd	r30, Y+4	; 0x04
 504:	fd 81       	ldd	r31, Y+5	; 0x05
 506:	80 83       	st	Z, r24
 508:	05 c0       	rjmp	.+10     	; 0x514 <DIO_u8GetPinValue+0x11c>
			default: Local_u8ErrorState =1; break;
 50a:	81 e0       	ldi	r24, 0x01	; 1
 50c:	89 83       	std	Y+1, r24	; 0x01
 50e:	02 c0       	rjmp	.+4      	; 0x514 <DIO_u8GetPinValue+0x11c>

			}
	}
	else
	{
		Local_u8ErrorState = 1;
 510:	81 e0       	ldi	r24, 0x01	; 1
 512:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
 514:	89 81       	ldd	r24, Y+1	; 0x01
}
 516:	27 96       	adiw	r28, 0x07	; 7
 518:	0f b6       	in	r0, 0x3f	; 63
 51a:	f8 94       	cli
 51c:	de bf       	out	0x3e, r29	; 62
 51e:	0f be       	out	0x3f, r0	; 63
 520:	cd bf       	out	0x3d, r28	; 61
 522:	cf 91       	pop	r28
 524:	df 91       	pop	r29
 526:	08 95       	ret

00000528 <DIO_u8AndWithPort>:

u8 DIO_u8AndWithPort(u8 Copy_u8port, u8 Copy_u8Value)
{
 528:	df 93       	push	r29
 52a:	cf 93       	push	r28
 52c:	00 d0       	rcall	.+0      	; 0x52e <DIO_u8AndWithPort+0x6>
 52e:	00 d0       	rcall	.+0      	; 0x530 <DIO_u8AndWithPort+0x8>
 530:	0f 92       	push	r0
 532:	cd b7       	in	r28, 0x3d	; 61
 534:	de b7       	in	r29, 0x3e	; 62
 536:	8a 83       	std	Y+2, r24	; 0x02
 538:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Result = 0;
 53a:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8port)
 53c:	8a 81       	ldd	r24, Y+2	; 0x02
 53e:	28 2f       	mov	r18, r24
 540:	30 e0       	ldi	r19, 0x00	; 0
 542:	3d 83       	std	Y+5, r19	; 0x05
 544:	2c 83       	std	Y+4, r18	; 0x04
 546:	8c 81       	ldd	r24, Y+4	; 0x04
 548:	9d 81       	ldd	r25, Y+5	; 0x05
 54a:	81 30       	cpi	r24, 0x01	; 1
 54c:	91 05       	cpc	r25, r1
 54e:	e1 f0       	breq	.+56     	; 0x588 <DIO_u8AndWithPort+0x60>
 550:	2c 81       	ldd	r18, Y+4	; 0x04
 552:	3d 81       	ldd	r19, Y+5	; 0x05
 554:	22 30       	cpi	r18, 0x02	; 2
 556:	31 05       	cpc	r19, r1
 558:	2c f4       	brge	.+10     	; 0x564 <DIO_u8AndWithPort+0x3c>
 55a:	8c 81       	ldd	r24, Y+4	; 0x04
 55c:	9d 81       	ldd	r25, Y+5	; 0x05
 55e:	00 97       	sbiw	r24, 0x00	; 0
 560:	61 f0       	breq	.+24     	; 0x57a <DIO_u8AndWithPort+0x52>
 562:	26 c0       	rjmp	.+76     	; 0x5b0 <DIO_u8AndWithPort+0x88>
 564:	2c 81       	ldd	r18, Y+4	; 0x04
 566:	3d 81       	ldd	r19, Y+5	; 0x05
 568:	22 30       	cpi	r18, 0x02	; 2
 56a:	31 05       	cpc	r19, r1
 56c:	a1 f0       	breq	.+40     	; 0x596 <DIO_u8AndWithPort+0x6e>
 56e:	8c 81       	ldd	r24, Y+4	; 0x04
 570:	9d 81       	ldd	r25, Y+5	; 0x05
 572:	83 30       	cpi	r24, 0x03	; 3
 574:	91 05       	cpc	r25, r1
 576:	b1 f0       	breq	.+44     	; 0x5a4 <DIO_u8AndWithPort+0x7c>
 578:	1b c0       	rjmp	.+54     	; 0x5b0 <DIO_u8AndWithPort+0x88>
			{
			case DIO_u8PORTA: Local_u8Result= PORTA & Copy_u8Value; break;
 57a:	eb e3       	ldi	r30, 0x3B	; 59
 57c:	f0 e0       	ldi	r31, 0x00	; 0
 57e:	90 81       	ld	r25, Z
 580:	8b 81       	ldd	r24, Y+3	; 0x03
 582:	89 23       	and	r24, r25
 584:	89 83       	std	Y+1, r24	; 0x01
 586:	14 c0       	rjmp	.+40     	; 0x5b0 <DIO_u8AndWithPort+0x88>
			case DIO_u8PORTB: Local_u8Result= PORTB & Copy_u8Value; break;
 588:	e8 e3       	ldi	r30, 0x38	; 56
 58a:	f0 e0       	ldi	r31, 0x00	; 0
 58c:	90 81       	ld	r25, Z
 58e:	8b 81       	ldd	r24, Y+3	; 0x03
 590:	89 23       	and	r24, r25
 592:	89 83       	std	Y+1, r24	; 0x01
 594:	0d c0       	rjmp	.+26     	; 0x5b0 <DIO_u8AndWithPort+0x88>
			case DIO_u8PORTC: Local_u8Result= PORTC & Copy_u8Value; break;
 596:	e5 e3       	ldi	r30, 0x35	; 53
 598:	f0 e0       	ldi	r31, 0x00	; 0
 59a:	90 81       	ld	r25, Z
 59c:	8b 81       	ldd	r24, Y+3	; 0x03
 59e:	89 23       	and	r24, r25
 5a0:	89 83       	std	Y+1, r24	; 0x01
 5a2:	06 c0       	rjmp	.+12     	; 0x5b0 <DIO_u8AndWithPort+0x88>
			case DIO_u8PORTD: Local_u8Result = PORTD & Copy_u8Value; break;
 5a4:	e2 e3       	ldi	r30, 0x32	; 50
 5a6:	f0 e0       	ldi	r31, 0x00	; 0
 5a8:	90 81       	ld	r25, Z
 5aa:	8b 81       	ldd	r24, Y+3	; 0x03
 5ac:	89 23       	and	r24, r25
 5ae:	89 83       	std	Y+1, r24	; 0x01
			default:  break;


			}
	return Local_u8Result;
 5b0:	89 81       	ldd	r24, Y+1	; 0x01
}
 5b2:	0f 90       	pop	r0
 5b4:	0f 90       	pop	r0
 5b6:	0f 90       	pop	r0
 5b8:	0f 90       	pop	r0
 5ba:	0f 90       	pop	r0
 5bc:	cf 91       	pop	r28
 5be:	df 91       	pop	r29
 5c0:	08 95       	ret

000005c2 <GIE_VoidEnable>:

#include "GIE_interface.h"
#include "GIE_register.h"

void GIE_VoidEnable(void)
{
 5c2:	df 93       	push	r29
 5c4:	cf 93       	push	r28
 5c6:	cd b7       	in	r28, 0x3d	; 61
 5c8:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
 5ca:	af e5       	ldi	r26, 0x5F	; 95
 5cc:	b0 e0       	ldi	r27, 0x00	; 0
 5ce:	ef e5       	ldi	r30, 0x5F	; 95
 5d0:	f0 e0       	ldi	r31, 0x00	; 0
 5d2:	80 81       	ld	r24, Z
 5d4:	80 68       	ori	r24, 0x80	; 128
 5d6:	8c 93       	st	X, r24
}
 5d8:	cf 91       	pop	r28
 5da:	df 91       	pop	r29
 5dc:	08 95       	ret

000005de <GIE_VoidDisable>:
void GIE_VoidDisable(void)
{
 5de:	df 93       	push	r29
 5e0:	cf 93       	push	r28
 5e2:	cd b7       	in	r28, 0x3d	; 61
 5e4:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,SREG_I);
 5e6:	af e5       	ldi	r26, 0x5F	; 95
 5e8:	b0 e0       	ldi	r27, 0x00	; 0
 5ea:	ef e5       	ldi	r30, 0x5F	; 95
 5ec:	f0 e0       	ldi	r31, 0x00	; 0
 5ee:	80 81       	ld	r24, Z
 5f0:	8f 77       	andi	r24, 0x7F	; 127
 5f2:	8c 93       	st	X, r24
}
 5f4:	cf 91       	pop	r28
 5f6:	df 91       	pop	r29
 5f8:	08 95       	ret

000005fa <PORT_VoidInit>:
#include "PORT_interface.h"
#include "PORT_register.h"


void PORT_VoidInit(void)
{
 5fa:	df 93       	push	r29
 5fc:	cf 93       	push	r28
 5fe:	cd b7       	in	r28, 0x3d	; 61
 600:	de b7       	in	r29, 0x3e	; 62
	DDRA = PORTA_DIR;
 602:	ea e3       	ldi	r30, 0x3A	; 58
 604:	f0 e0       	ldi	r31, 0x00	; 0
 606:	10 82       	st	Z, r1
	DDRB = PORTB_DIR;
 608:	e7 e3       	ldi	r30, 0x37	; 55
 60a:	f0 e0       	ldi	r31, 0x00	; 0
 60c:	10 82       	st	Z, r1
	DDRC = PORTC_DIR;
 60e:	e4 e3       	ldi	r30, 0x34	; 52
 610:	f0 e0       	ldi	r31, 0x00	; 0
 612:	8f ef       	ldi	r24, 0xFF	; 255
 614:	80 83       	st	Z, r24
	DDRD = PORTD_DIR;
 616:	e1 e3       	ldi	r30, 0x31	; 49
 618:	f0 e0       	ldi	r31, 0x00	; 0
 61a:	10 82       	st	Z, r1
	
	PORTA = PORTA_INITIAL_VALUE;
 61c:	eb e3       	ldi	r30, 0x3B	; 59
 61e:	f0 e0       	ldi	r31, 0x00	; 0
 620:	10 82       	st	Z, r1
	PORTB = PORTB_INITIAL_VALUE;
 622:	e8 e3       	ldi	r30, 0x38	; 56
 624:	f0 e0       	ldi	r31, 0x00	; 0
 626:	10 82       	st	Z, r1
	PORTC = PORTC_INITIAL_VALUE;
 628:	e5 e3       	ldi	r30, 0x35	; 53
 62a:	f0 e0       	ldi	r31, 0x00	; 0
 62c:	10 82       	st	Z, r1
	PORTD = PORTD_INITIAL_VALUE;
 62e:	e2 e3       	ldi	r30, 0x32	; 50
 630:	f0 e0       	ldi	r31, 0x00	; 0
 632:	10 82       	st	Z, r1


}
 634:	cf 91       	pop	r28
 636:	df 91       	pop	r29
 638:	08 95       	ret

0000063a <main>:

#include "ADC_interface.h"


void main(void)
{
 63a:	df 93       	push	r29
 63c:	cf 93       	push	r28
 63e:	0f 92       	push	r0
 640:	cd b7       	in	r28, 0x3d	; 61
 642:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8ADCReading;

	PORT_VoidInit();
 644:	0e 94 fd 02 	call	0x5fa	; 0x5fa <PORT_VoidInit>
	ADC_voidInit();
 648:	0e 94 36 00 	call	0x6c	; 0x6c <ADC_voidInit>

	while(1)
	{
		Local_u8ADCReading = ADC_u8GetChannelReading(0);
 64c:	80 e0       	ldi	r24, 0x00	; 0
 64e:	0e 94 67 00 	call	0xce	; 0xce <ADC_u8GetChannelReading>
 652:	89 83       	std	Y+1, r24	; 0x01
		DIO_u8SetPortValue(DIO_u8PORTC,Local_u8ADCReading);
 654:	82 e0       	ldi	r24, 0x02	; 2
 656:	69 81       	ldd	r22, Y+1	; 0x01
 658:	0e 94 ae 01 	call	0x35c	; 0x35c <DIO_u8SetPortValue>
 65c:	f7 cf       	rjmp	.-18     	; 0x64c <main+0x12>

0000065e <_exit>:
 65e:	f8 94       	cli

00000660 <__stop_program>:
 660:	ff cf       	rjmp	.-2      	; 0x660 <__stop_program>
