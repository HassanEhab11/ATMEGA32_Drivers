
Timer_version1_Kit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003580  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000013c  00800060  00003580  00003614  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000016  0080019c  0080019c  00003750  2**0
                  ALLOC
  3 .stab         0000345c  00000000  00000000  00003750  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000014a4  00000000  00000000  00006bac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  00008050  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000213  00000000  00000000  00008210  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002495  00000000  00000000  00008423  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001412  00000000  00000000  0000a8b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001209  00000000  00000000  0000bcca  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0000ced4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002da  00000000  00000000  0000d0b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000996  00000000  00000000  0000d38e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000dd24  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 0e 12 	jmp	0x241c	; 0x241c <__vector_1>
       8:	0c 94 41 12 	jmp	0x2482	; 0x2482 <__vector_2>
       c:	0c 94 74 12 	jmp	0x24e8	; 0x24e8 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 68 19 	jmp	0x32d0	; 0x32d0 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 35 19 	jmp	0x326a	; 0x326a <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e8       	ldi	r30, 0x80	; 128
      68:	f5 e3       	ldi	r31, 0x35	; 53
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 39       	cpi	r26, 0x9C	; 156
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e9       	ldi	r26, 0x9C	; 156
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 3b       	cpi	r26, 0xB2	; 178
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 9b 19 	call	0x3336	; 0x3336 <main>
      8a:	0c 94 be 1a 	jmp	0x357c	; 0x357c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 37 04 	call	0x86e	; 0x86e <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 37 04 	call	0x86e	; 0x86e <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 87 1a 	jmp	0x350e	; 0x350e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a1 e7       	ldi	r26, 0x71	; 113
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 a3 1a 	jmp	0x3546	; 0x3546 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 93 1a 	jmp	0x3526	; 0x3526 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 28 06 	call	0xc50	; 0xc50 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 28 06 	call	0xc50	; 0xc50 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 53 05 	call	0xaa6	; 0xaa6 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 af 1a 	jmp	0x355e	; 0x355e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 93 1a 	jmp	0x3526	; 0x3526 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 28 06 	call	0xc50	; 0xc50 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 28 06 	call	0xc50	; 0xc50 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 53 05 	call	0xaa6	; 0xaa6 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 af 1a 	jmp	0x355e	; 0x355e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 87 1a 	jmp	0x350e	; 0x350e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 28 06 	call	0xc50	; 0xc50 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 28 06 	call	0xc50	; 0xc50 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	81 e7       	ldi	r24, 0x71	; 113
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 53 05 	call	0xaa6	; 0xaa6 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 a3 1a 	jmp	0x3546	; 0x3546 <__epilogue_restores__>

00000632 <__eqsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 93 1a 	jmp	0x3526	; 0x3526 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 28 06 	call	0xc50	; 0xc50 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 28 06 	call	0xc50	; 0xc50 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__eqsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__eqsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 a0 06 	call	0xd40	; 0xd40 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__eqsf2+0x58>
     688:	81 e0       	ldi	r24, 0x01	; 1
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 af 1a 	jmp	0x355e	; 0x355e <__epilogue_restores__+0x18>

00000692 <__gtsf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 93 1a 	jmp	0x3526	; 0x3526 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 28 06 	call	0xc50	; 0xc50 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 28 06 	call	0xc50	; 0xc50 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gtsf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gtsf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 a0 06 	call	0xd40	; 0xd40 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gtsf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 af 1a 	jmp	0x355e	; 0x355e <__epilogue_restores__+0x18>

000006f2 <__gesf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 93 1a 	jmp	0x3526	; 0x3526 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 28 06 	call	0xc50	; 0xc50 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 28 06 	call	0xc50	; 0xc50 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__gesf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__gesf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 a0 06 	call	0xd40	; 0xd40 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__gesf2+0x58>
     748:	8f ef       	ldi	r24, 0xFF	; 255
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 af 1a 	jmp	0x355e	; 0x355e <__epilogue_restores__+0x18>

00000752 <__ltsf2>:
     752:	a8 e1       	ldi	r26, 0x18	; 24
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 93 1a 	jmp	0x3526	; 0x3526 <__prologue_saves__+0x18>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	2d 83       	std	Y+5, r18	; 0x05
     768:	3e 83       	std	Y+6, r19	; 0x06
     76a:	4f 83       	std	Y+7, r20	; 0x07
     76c:	58 87       	std	Y+8, r21	; 0x08
     76e:	89 e0       	ldi	r24, 0x09	; 9
     770:	e8 2e       	mov	r14, r24
     772:	f1 2c       	mov	r15, r1
     774:	ec 0e       	add	r14, r28
     776:	fd 1e       	adc	r15, r29
     778:	ce 01       	movw	r24, r28
     77a:	01 96       	adiw	r24, 0x01	; 1
     77c:	b7 01       	movw	r22, r14
     77e:	0e 94 28 06 	call	0xc50	; 0xc50 <__unpack_f>
     782:	8e 01       	movw	r16, r28
     784:	0f 5e       	subi	r16, 0xEF	; 239
     786:	1f 4f       	sbci	r17, 0xFF	; 255
     788:	ce 01       	movw	r24, r28
     78a:	05 96       	adiw	r24, 0x05	; 5
     78c:	b8 01       	movw	r22, r16
     78e:	0e 94 28 06 	call	0xc50	; 0xc50 <__unpack_f>
     792:	89 85       	ldd	r24, Y+9	; 0x09
     794:	82 30       	cpi	r24, 0x02	; 2
     796:	40 f0       	brcs	.+16     	; 0x7a8 <__ltsf2+0x56>
     798:	89 89       	ldd	r24, Y+17	; 0x11
     79a:	82 30       	cpi	r24, 0x02	; 2
     79c:	28 f0       	brcs	.+10     	; 0x7a8 <__ltsf2+0x56>
     79e:	c7 01       	movw	r24, r14
     7a0:	b8 01       	movw	r22, r16
     7a2:	0e 94 a0 06 	call	0xd40	; 0xd40 <__fpcmp_parts_f>
     7a6:	01 c0       	rjmp	.+2      	; 0x7aa <__ltsf2+0x58>
     7a8:	81 e0       	ldi	r24, 0x01	; 1
     7aa:	68 96       	adiw	r28, 0x18	; 24
     7ac:	e6 e0       	ldi	r30, 0x06	; 6
     7ae:	0c 94 af 1a 	jmp	0x355e	; 0x355e <__epilogue_restores__+0x18>

000007b2 <__floatsisf>:
     7b2:	a8 e0       	ldi	r26, 0x08	; 8
     7b4:	b0 e0       	ldi	r27, 0x00	; 0
     7b6:	ef ed       	ldi	r30, 0xDF	; 223
     7b8:	f3 e0       	ldi	r31, 0x03	; 3
     7ba:	0c 94 90 1a 	jmp	0x3520	; 0x3520 <__prologue_saves__+0x12>
     7be:	9b 01       	movw	r18, r22
     7c0:	ac 01       	movw	r20, r24
     7c2:	83 e0       	ldi	r24, 0x03	; 3
     7c4:	89 83       	std	Y+1, r24	; 0x01
     7c6:	da 01       	movw	r26, r20
     7c8:	c9 01       	movw	r24, r18
     7ca:	88 27       	eor	r24, r24
     7cc:	b7 fd       	sbrc	r27, 7
     7ce:	83 95       	inc	r24
     7d0:	99 27       	eor	r25, r25
     7d2:	aa 27       	eor	r26, r26
     7d4:	bb 27       	eor	r27, r27
     7d6:	b8 2e       	mov	r11, r24
     7d8:	21 15       	cp	r18, r1
     7da:	31 05       	cpc	r19, r1
     7dc:	41 05       	cpc	r20, r1
     7de:	51 05       	cpc	r21, r1
     7e0:	19 f4       	brne	.+6      	; 0x7e8 <__floatsisf+0x36>
     7e2:	82 e0       	ldi	r24, 0x02	; 2
     7e4:	89 83       	std	Y+1, r24	; 0x01
     7e6:	3a c0       	rjmp	.+116    	; 0x85c <__floatsisf+0xaa>
     7e8:	88 23       	and	r24, r24
     7ea:	a9 f0       	breq	.+42     	; 0x816 <__floatsisf+0x64>
     7ec:	20 30       	cpi	r18, 0x00	; 0
     7ee:	80 e0       	ldi	r24, 0x00	; 0
     7f0:	38 07       	cpc	r19, r24
     7f2:	80 e0       	ldi	r24, 0x00	; 0
     7f4:	48 07       	cpc	r20, r24
     7f6:	80 e8       	ldi	r24, 0x80	; 128
     7f8:	58 07       	cpc	r21, r24
     7fa:	29 f4       	brne	.+10     	; 0x806 <__floatsisf+0x54>
     7fc:	60 e0       	ldi	r22, 0x00	; 0
     7fe:	70 e0       	ldi	r23, 0x00	; 0
     800:	80 e0       	ldi	r24, 0x00	; 0
     802:	9f ec       	ldi	r25, 0xCF	; 207
     804:	30 c0       	rjmp	.+96     	; 0x866 <__stack+0x7>
     806:	ee 24       	eor	r14, r14
     808:	ff 24       	eor	r15, r15
     80a:	87 01       	movw	r16, r14
     80c:	e2 1a       	sub	r14, r18
     80e:	f3 0a       	sbc	r15, r19
     810:	04 0b       	sbc	r16, r20
     812:	15 0b       	sbc	r17, r21
     814:	02 c0       	rjmp	.+4      	; 0x81a <__floatsisf+0x68>
     816:	79 01       	movw	r14, r18
     818:	8a 01       	movw	r16, r20
     81a:	8e e1       	ldi	r24, 0x1E	; 30
     81c:	c8 2e       	mov	r12, r24
     81e:	d1 2c       	mov	r13, r1
     820:	dc 82       	std	Y+4, r13	; 0x04
     822:	cb 82       	std	Y+3, r12	; 0x03
     824:	ed 82       	std	Y+5, r14	; 0x05
     826:	fe 82       	std	Y+6, r15	; 0x06
     828:	0f 83       	std	Y+7, r16	; 0x07
     82a:	18 87       	std	Y+8, r17	; 0x08
     82c:	c8 01       	movw	r24, r16
     82e:	b7 01       	movw	r22, r14
     830:	0e 94 04 05 	call	0xa08	; 0xa08 <__clzsi2>
     834:	01 97       	sbiw	r24, 0x01	; 1
     836:	18 16       	cp	r1, r24
     838:	19 06       	cpc	r1, r25
     83a:	84 f4       	brge	.+32     	; 0x85c <__floatsisf+0xaa>
     83c:	08 2e       	mov	r0, r24
     83e:	04 c0       	rjmp	.+8      	; 0x848 <__floatsisf+0x96>
     840:	ee 0c       	add	r14, r14
     842:	ff 1c       	adc	r15, r15
     844:	00 1f       	adc	r16, r16
     846:	11 1f       	adc	r17, r17
     848:	0a 94       	dec	r0
     84a:	d2 f7       	brpl	.-12     	; 0x840 <__floatsisf+0x8e>
     84c:	ed 82       	std	Y+5, r14	; 0x05
     84e:	fe 82       	std	Y+6, r15	; 0x06
     850:	0f 83       	std	Y+7, r16	; 0x07
     852:	18 87       	std	Y+8, r17	; 0x08
     854:	c8 1a       	sub	r12, r24
     856:	d9 0a       	sbc	r13, r25
     858:	dc 82       	std	Y+4, r13	; 0x04
     85a:	cb 82       	std	Y+3, r12	; 0x03
     85c:	ba 82       	std	Y+2, r11	; 0x02
     85e:	ce 01       	movw	r24, r28
     860:	01 96       	adiw	r24, 0x01	; 1
     862:	0e 94 53 05 	call	0xaa6	; 0xaa6 <__pack_f>
     866:	28 96       	adiw	r28, 0x08	; 8
     868:	e9 e0       	ldi	r30, 0x09	; 9
     86a:	0c 94 ac 1a 	jmp	0x3558	; 0x3558 <__epilogue_restores__+0x12>

0000086e <__fixsfsi>:
     86e:	ac e0       	ldi	r26, 0x0C	; 12
     870:	b0 e0       	ldi	r27, 0x00	; 0
     872:	ed e3       	ldi	r30, 0x3D	; 61
     874:	f4 e0       	ldi	r31, 0x04	; 4
     876:	0c 94 97 1a 	jmp	0x352e	; 0x352e <__prologue_saves__+0x20>
     87a:	69 83       	std	Y+1, r22	; 0x01
     87c:	7a 83       	std	Y+2, r23	; 0x02
     87e:	8b 83       	std	Y+3, r24	; 0x03
     880:	9c 83       	std	Y+4, r25	; 0x04
     882:	ce 01       	movw	r24, r28
     884:	01 96       	adiw	r24, 0x01	; 1
     886:	be 01       	movw	r22, r28
     888:	6b 5f       	subi	r22, 0xFB	; 251
     88a:	7f 4f       	sbci	r23, 0xFF	; 255
     88c:	0e 94 28 06 	call	0xc50	; 0xc50 <__unpack_f>
     890:	8d 81       	ldd	r24, Y+5	; 0x05
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	61 f1       	breq	.+88     	; 0x8ee <__fixsfsi+0x80>
     896:	82 30       	cpi	r24, 0x02	; 2
     898:	50 f1       	brcs	.+84     	; 0x8ee <__fixsfsi+0x80>
     89a:	84 30       	cpi	r24, 0x04	; 4
     89c:	21 f4       	brne	.+8      	; 0x8a6 <__fixsfsi+0x38>
     89e:	8e 81       	ldd	r24, Y+6	; 0x06
     8a0:	88 23       	and	r24, r24
     8a2:	51 f1       	breq	.+84     	; 0x8f8 <__fixsfsi+0x8a>
     8a4:	2e c0       	rjmp	.+92     	; 0x902 <__fixsfsi+0x94>
     8a6:	2f 81       	ldd	r18, Y+7	; 0x07
     8a8:	38 85       	ldd	r19, Y+8	; 0x08
     8aa:	37 fd       	sbrc	r19, 7
     8ac:	20 c0       	rjmp	.+64     	; 0x8ee <__fixsfsi+0x80>
     8ae:	6e 81       	ldd	r22, Y+6	; 0x06
     8b0:	2f 31       	cpi	r18, 0x1F	; 31
     8b2:	31 05       	cpc	r19, r1
     8b4:	1c f0       	brlt	.+6      	; 0x8bc <__fixsfsi+0x4e>
     8b6:	66 23       	and	r22, r22
     8b8:	f9 f0       	breq	.+62     	; 0x8f8 <__fixsfsi+0x8a>
     8ba:	23 c0       	rjmp	.+70     	; 0x902 <__fixsfsi+0x94>
     8bc:	8e e1       	ldi	r24, 0x1E	; 30
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	82 1b       	sub	r24, r18
     8c2:	93 0b       	sbc	r25, r19
     8c4:	29 85       	ldd	r18, Y+9	; 0x09
     8c6:	3a 85       	ldd	r19, Y+10	; 0x0a
     8c8:	4b 85       	ldd	r20, Y+11	; 0x0b
     8ca:	5c 85       	ldd	r21, Y+12	; 0x0c
     8cc:	04 c0       	rjmp	.+8      	; 0x8d6 <__fixsfsi+0x68>
     8ce:	56 95       	lsr	r21
     8d0:	47 95       	ror	r20
     8d2:	37 95       	ror	r19
     8d4:	27 95       	ror	r18
     8d6:	8a 95       	dec	r24
     8d8:	d2 f7       	brpl	.-12     	; 0x8ce <__fixsfsi+0x60>
     8da:	66 23       	and	r22, r22
     8dc:	b1 f0       	breq	.+44     	; 0x90a <__fixsfsi+0x9c>
     8de:	50 95       	com	r21
     8e0:	40 95       	com	r20
     8e2:	30 95       	com	r19
     8e4:	21 95       	neg	r18
     8e6:	3f 4f       	sbci	r19, 0xFF	; 255
     8e8:	4f 4f       	sbci	r20, 0xFF	; 255
     8ea:	5f 4f       	sbci	r21, 0xFF	; 255
     8ec:	0e c0       	rjmp	.+28     	; 0x90a <__fixsfsi+0x9c>
     8ee:	20 e0       	ldi	r18, 0x00	; 0
     8f0:	30 e0       	ldi	r19, 0x00	; 0
     8f2:	40 e0       	ldi	r20, 0x00	; 0
     8f4:	50 e0       	ldi	r21, 0x00	; 0
     8f6:	09 c0       	rjmp	.+18     	; 0x90a <__fixsfsi+0x9c>
     8f8:	2f ef       	ldi	r18, 0xFF	; 255
     8fa:	3f ef       	ldi	r19, 0xFF	; 255
     8fc:	4f ef       	ldi	r20, 0xFF	; 255
     8fe:	5f e7       	ldi	r21, 0x7F	; 127
     900:	04 c0       	rjmp	.+8      	; 0x90a <__fixsfsi+0x9c>
     902:	20 e0       	ldi	r18, 0x00	; 0
     904:	30 e0       	ldi	r19, 0x00	; 0
     906:	40 e0       	ldi	r20, 0x00	; 0
     908:	50 e8       	ldi	r21, 0x80	; 128
     90a:	b9 01       	movw	r22, r18
     90c:	ca 01       	movw	r24, r20
     90e:	2c 96       	adiw	r28, 0x0c	; 12
     910:	e2 e0       	ldi	r30, 0x02	; 2
     912:	0c 94 b3 1a 	jmp	0x3566	; 0x3566 <__epilogue_restores__+0x20>

00000916 <__floatunsisf>:
     916:	a8 e0       	ldi	r26, 0x08	; 8
     918:	b0 e0       	ldi	r27, 0x00	; 0
     91a:	e1 e9       	ldi	r30, 0x91	; 145
     91c:	f4 e0       	ldi	r31, 0x04	; 4
     91e:	0c 94 8f 1a 	jmp	0x351e	; 0x351e <__prologue_saves__+0x10>
     922:	7b 01       	movw	r14, r22
     924:	8c 01       	movw	r16, r24
     926:	61 15       	cp	r22, r1
     928:	71 05       	cpc	r23, r1
     92a:	81 05       	cpc	r24, r1
     92c:	91 05       	cpc	r25, r1
     92e:	19 f4       	brne	.+6      	; 0x936 <__floatunsisf+0x20>
     930:	82 e0       	ldi	r24, 0x02	; 2
     932:	89 83       	std	Y+1, r24	; 0x01
     934:	60 c0       	rjmp	.+192    	; 0x9f6 <__floatunsisf+0xe0>
     936:	83 e0       	ldi	r24, 0x03	; 3
     938:	89 83       	std	Y+1, r24	; 0x01
     93a:	8e e1       	ldi	r24, 0x1E	; 30
     93c:	c8 2e       	mov	r12, r24
     93e:	d1 2c       	mov	r13, r1
     940:	dc 82       	std	Y+4, r13	; 0x04
     942:	cb 82       	std	Y+3, r12	; 0x03
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 01       	movw	r24, r16
     94e:	b7 01       	movw	r22, r14
     950:	0e 94 04 05 	call	0xa08	; 0xa08 <__clzsi2>
     954:	fc 01       	movw	r30, r24
     956:	31 97       	sbiw	r30, 0x01	; 1
     958:	f7 ff       	sbrs	r31, 7
     95a:	3b c0       	rjmp	.+118    	; 0x9d2 <__floatunsisf+0xbc>
     95c:	22 27       	eor	r18, r18
     95e:	33 27       	eor	r19, r19
     960:	2e 1b       	sub	r18, r30
     962:	3f 0b       	sbc	r19, r31
     964:	57 01       	movw	r10, r14
     966:	68 01       	movw	r12, r16
     968:	02 2e       	mov	r0, r18
     96a:	04 c0       	rjmp	.+8      	; 0x974 <__floatunsisf+0x5e>
     96c:	d6 94       	lsr	r13
     96e:	c7 94       	ror	r12
     970:	b7 94       	ror	r11
     972:	a7 94       	ror	r10
     974:	0a 94       	dec	r0
     976:	d2 f7       	brpl	.-12     	; 0x96c <__floatunsisf+0x56>
     978:	40 e0       	ldi	r20, 0x00	; 0
     97a:	50 e0       	ldi	r21, 0x00	; 0
     97c:	60 e0       	ldi	r22, 0x00	; 0
     97e:	70 e0       	ldi	r23, 0x00	; 0
     980:	81 e0       	ldi	r24, 0x01	; 1
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	a0 e0       	ldi	r26, 0x00	; 0
     986:	b0 e0       	ldi	r27, 0x00	; 0
     988:	04 c0       	rjmp	.+8      	; 0x992 <__floatunsisf+0x7c>
     98a:	88 0f       	add	r24, r24
     98c:	99 1f       	adc	r25, r25
     98e:	aa 1f       	adc	r26, r26
     990:	bb 1f       	adc	r27, r27
     992:	2a 95       	dec	r18
     994:	d2 f7       	brpl	.-12     	; 0x98a <__floatunsisf+0x74>
     996:	01 97       	sbiw	r24, 0x01	; 1
     998:	a1 09       	sbc	r26, r1
     99a:	b1 09       	sbc	r27, r1
     99c:	8e 21       	and	r24, r14
     99e:	9f 21       	and	r25, r15
     9a0:	a0 23       	and	r26, r16
     9a2:	b1 23       	and	r27, r17
     9a4:	00 97       	sbiw	r24, 0x00	; 0
     9a6:	a1 05       	cpc	r26, r1
     9a8:	b1 05       	cpc	r27, r1
     9aa:	21 f0       	breq	.+8      	; 0x9b4 <__floatunsisf+0x9e>
     9ac:	41 e0       	ldi	r20, 0x01	; 1
     9ae:	50 e0       	ldi	r21, 0x00	; 0
     9b0:	60 e0       	ldi	r22, 0x00	; 0
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	4a 29       	or	r20, r10
     9b6:	5b 29       	or	r21, r11
     9b8:	6c 29       	or	r22, r12
     9ba:	7d 29       	or	r23, r13
     9bc:	4d 83       	std	Y+5, r20	; 0x05
     9be:	5e 83       	std	Y+6, r21	; 0x06
     9c0:	6f 83       	std	Y+7, r22	; 0x07
     9c2:	78 87       	std	Y+8, r23	; 0x08
     9c4:	8e e1       	ldi	r24, 0x1E	; 30
     9c6:	90 e0       	ldi	r25, 0x00	; 0
     9c8:	8e 1b       	sub	r24, r30
     9ca:	9f 0b       	sbc	r25, r31
     9cc:	9c 83       	std	Y+4, r25	; 0x04
     9ce:	8b 83       	std	Y+3, r24	; 0x03
     9d0:	12 c0       	rjmp	.+36     	; 0x9f6 <__floatunsisf+0xe0>
     9d2:	30 97       	sbiw	r30, 0x00	; 0
     9d4:	81 f0       	breq	.+32     	; 0x9f6 <__floatunsisf+0xe0>
     9d6:	0e 2e       	mov	r0, r30
     9d8:	04 c0       	rjmp	.+8      	; 0x9e2 <__floatunsisf+0xcc>
     9da:	ee 0c       	add	r14, r14
     9dc:	ff 1c       	adc	r15, r15
     9de:	00 1f       	adc	r16, r16
     9e0:	11 1f       	adc	r17, r17
     9e2:	0a 94       	dec	r0
     9e4:	d2 f7       	brpl	.-12     	; 0x9da <__floatunsisf+0xc4>
     9e6:	ed 82       	std	Y+5, r14	; 0x05
     9e8:	fe 82       	std	Y+6, r15	; 0x06
     9ea:	0f 83       	std	Y+7, r16	; 0x07
     9ec:	18 87       	std	Y+8, r17	; 0x08
     9ee:	ce 1a       	sub	r12, r30
     9f0:	df 0a       	sbc	r13, r31
     9f2:	dc 82       	std	Y+4, r13	; 0x04
     9f4:	cb 82       	std	Y+3, r12	; 0x03
     9f6:	1a 82       	std	Y+2, r1	; 0x02
     9f8:	ce 01       	movw	r24, r28
     9fa:	01 96       	adiw	r24, 0x01	; 1
     9fc:	0e 94 53 05 	call	0xaa6	; 0xaa6 <__pack_f>
     a00:	28 96       	adiw	r28, 0x08	; 8
     a02:	ea e0       	ldi	r30, 0x0A	; 10
     a04:	0c 94 ab 1a 	jmp	0x3556	; 0x3556 <__epilogue_restores__+0x10>

00000a08 <__clzsi2>:
     a08:	ef 92       	push	r14
     a0a:	ff 92       	push	r15
     a0c:	0f 93       	push	r16
     a0e:	1f 93       	push	r17
     a10:	7b 01       	movw	r14, r22
     a12:	8c 01       	movw	r16, r24
     a14:	80 e0       	ldi	r24, 0x00	; 0
     a16:	e8 16       	cp	r14, r24
     a18:	80 e0       	ldi	r24, 0x00	; 0
     a1a:	f8 06       	cpc	r15, r24
     a1c:	81 e0       	ldi	r24, 0x01	; 1
     a1e:	08 07       	cpc	r16, r24
     a20:	80 e0       	ldi	r24, 0x00	; 0
     a22:	18 07       	cpc	r17, r24
     a24:	88 f4       	brcc	.+34     	; 0xa48 <__clzsi2+0x40>
     a26:	8f ef       	ldi	r24, 0xFF	; 255
     a28:	e8 16       	cp	r14, r24
     a2a:	f1 04       	cpc	r15, r1
     a2c:	01 05       	cpc	r16, r1
     a2e:	11 05       	cpc	r17, r1
     a30:	31 f0       	breq	.+12     	; 0xa3e <__clzsi2+0x36>
     a32:	28 f0       	brcs	.+10     	; 0xa3e <__clzsi2+0x36>
     a34:	88 e0       	ldi	r24, 0x08	; 8
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	a0 e0       	ldi	r26, 0x00	; 0
     a3a:	b0 e0       	ldi	r27, 0x00	; 0
     a3c:	17 c0       	rjmp	.+46     	; 0xa6c <__clzsi2+0x64>
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	b0 e0       	ldi	r27, 0x00	; 0
     a46:	12 c0       	rjmp	.+36     	; 0xa6c <__clzsi2+0x64>
     a48:	80 e0       	ldi	r24, 0x00	; 0
     a4a:	e8 16       	cp	r14, r24
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	f8 06       	cpc	r15, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	08 07       	cpc	r16, r24
     a54:	81 e0       	ldi	r24, 0x01	; 1
     a56:	18 07       	cpc	r17, r24
     a58:	28 f0       	brcs	.+10     	; 0xa64 <__clzsi2+0x5c>
     a5a:	88 e1       	ldi	r24, 0x18	; 24
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	a0 e0       	ldi	r26, 0x00	; 0
     a60:	b0 e0       	ldi	r27, 0x00	; 0
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__clzsi2+0x64>
     a64:	80 e1       	ldi	r24, 0x10	; 16
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	a0 e0       	ldi	r26, 0x00	; 0
     a6a:	b0 e0       	ldi	r27, 0x00	; 0
     a6c:	20 e2       	ldi	r18, 0x20	; 32
     a6e:	30 e0       	ldi	r19, 0x00	; 0
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	28 1b       	sub	r18, r24
     a76:	39 0b       	sbc	r19, r25
     a78:	4a 0b       	sbc	r20, r26
     a7a:	5b 0b       	sbc	r21, r27
     a7c:	04 c0       	rjmp	.+8      	; 0xa86 <__clzsi2+0x7e>
     a7e:	16 95       	lsr	r17
     a80:	07 95       	ror	r16
     a82:	f7 94       	ror	r15
     a84:	e7 94       	ror	r14
     a86:	8a 95       	dec	r24
     a88:	d2 f7       	brpl	.-12     	; 0xa7e <__clzsi2+0x76>
     a8a:	f7 01       	movw	r30, r14
     a8c:	e7 58       	subi	r30, 0x87	; 135
     a8e:	ff 4f       	sbci	r31, 0xFF	; 255
     a90:	80 81       	ld	r24, Z
     a92:	28 1b       	sub	r18, r24
     a94:	31 09       	sbc	r19, r1
     a96:	41 09       	sbc	r20, r1
     a98:	51 09       	sbc	r21, r1
     a9a:	c9 01       	movw	r24, r18
     a9c:	1f 91       	pop	r17
     a9e:	0f 91       	pop	r16
     aa0:	ff 90       	pop	r15
     aa2:	ef 90       	pop	r14
     aa4:	08 95       	ret

00000aa6 <__pack_f>:
     aa6:	df 92       	push	r13
     aa8:	ef 92       	push	r14
     aaa:	ff 92       	push	r15
     aac:	0f 93       	push	r16
     aae:	1f 93       	push	r17
     ab0:	fc 01       	movw	r30, r24
     ab2:	e4 80       	ldd	r14, Z+4	; 0x04
     ab4:	f5 80       	ldd	r15, Z+5	; 0x05
     ab6:	06 81       	ldd	r16, Z+6	; 0x06
     ab8:	17 81       	ldd	r17, Z+7	; 0x07
     aba:	d1 80       	ldd	r13, Z+1	; 0x01
     abc:	80 81       	ld	r24, Z
     abe:	82 30       	cpi	r24, 0x02	; 2
     ac0:	48 f4       	brcc	.+18     	; 0xad4 <__pack_f+0x2e>
     ac2:	80 e0       	ldi	r24, 0x00	; 0
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	a0 e1       	ldi	r26, 0x10	; 16
     ac8:	b0 e0       	ldi	r27, 0x00	; 0
     aca:	e8 2a       	or	r14, r24
     acc:	f9 2a       	or	r15, r25
     ace:	0a 2b       	or	r16, r26
     ad0:	1b 2b       	or	r17, r27
     ad2:	a5 c0       	rjmp	.+330    	; 0xc1e <__pack_f+0x178>
     ad4:	84 30       	cpi	r24, 0x04	; 4
     ad6:	09 f4       	brne	.+2      	; 0xada <__pack_f+0x34>
     ad8:	9f c0       	rjmp	.+318    	; 0xc18 <__pack_f+0x172>
     ada:	82 30       	cpi	r24, 0x02	; 2
     adc:	21 f4       	brne	.+8      	; 0xae6 <__pack_f+0x40>
     ade:	ee 24       	eor	r14, r14
     ae0:	ff 24       	eor	r15, r15
     ae2:	87 01       	movw	r16, r14
     ae4:	05 c0       	rjmp	.+10     	; 0xaf0 <__pack_f+0x4a>
     ae6:	e1 14       	cp	r14, r1
     ae8:	f1 04       	cpc	r15, r1
     aea:	01 05       	cpc	r16, r1
     aec:	11 05       	cpc	r17, r1
     aee:	19 f4       	brne	.+6      	; 0xaf6 <__pack_f+0x50>
     af0:	e0 e0       	ldi	r30, 0x00	; 0
     af2:	f0 e0       	ldi	r31, 0x00	; 0
     af4:	96 c0       	rjmp	.+300    	; 0xc22 <__pack_f+0x17c>
     af6:	62 81       	ldd	r22, Z+2	; 0x02
     af8:	73 81       	ldd	r23, Z+3	; 0x03
     afa:	9f ef       	ldi	r25, 0xFF	; 255
     afc:	62 38       	cpi	r22, 0x82	; 130
     afe:	79 07       	cpc	r23, r25
     b00:	0c f0       	brlt	.+2      	; 0xb04 <__pack_f+0x5e>
     b02:	5b c0       	rjmp	.+182    	; 0xbba <__pack_f+0x114>
     b04:	22 e8       	ldi	r18, 0x82	; 130
     b06:	3f ef       	ldi	r19, 0xFF	; 255
     b08:	26 1b       	sub	r18, r22
     b0a:	37 0b       	sbc	r19, r23
     b0c:	2a 31       	cpi	r18, 0x1A	; 26
     b0e:	31 05       	cpc	r19, r1
     b10:	2c f0       	brlt	.+10     	; 0xb1c <__pack_f+0x76>
     b12:	20 e0       	ldi	r18, 0x00	; 0
     b14:	30 e0       	ldi	r19, 0x00	; 0
     b16:	40 e0       	ldi	r20, 0x00	; 0
     b18:	50 e0       	ldi	r21, 0x00	; 0
     b1a:	2a c0       	rjmp	.+84     	; 0xb70 <__pack_f+0xca>
     b1c:	b8 01       	movw	r22, r16
     b1e:	a7 01       	movw	r20, r14
     b20:	02 2e       	mov	r0, r18
     b22:	04 c0       	rjmp	.+8      	; 0xb2c <__pack_f+0x86>
     b24:	76 95       	lsr	r23
     b26:	67 95       	ror	r22
     b28:	57 95       	ror	r21
     b2a:	47 95       	ror	r20
     b2c:	0a 94       	dec	r0
     b2e:	d2 f7       	brpl	.-12     	; 0xb24 <__pack_f+0x7e>
     b30:	81 e0       	ldi	r24, 0x01	; 1
     b32:	90 e0       	ldi	r25, 0x00	; 0
     b34:	a0 e0       	ldi	r26, 0x00	; 0
     b36:	b0 e0       	ldi	r27, 0x00	; 0
     b38:	04 c0       	rjmp	.+8      	; 0xb42 <__pack_f+0x9c>
     b3a:	88 0f       	add	r24, r24
     b3c:	99 1f       	adc	r25, r25
     b3e:	aa 1f       	adc	r26, r26
     b40:	bb 1f       	adc	r27, r27
     b42:	2a 95       	dec	r18
     b44:	d2 f7       	brpl	.-12     	; 0xb3a <__pack_f+0x94>
     b46:	01 97       	sbiw	r24, 0x01	; 1
     b48:	a1 09       	sbc	r26, r1
     b4a:	b1 09       	sbc	r27, r1
     b4c:	8e 21       	and	r24, r14
     b4e:	9f 21       	and	r25, r15
     b50:	a0 23       	and	r26, r16
     b52:	b1 23       	and	r27, r17
     b54:	00 97       	sbiw	r24, 0x00	; 0
     b56:	a1 05       	cpc	r26, r1
     b58:	b1 05       	cpc	r27, r1
     b5a:	21 f0       	breq	.+8      	; 0xb64 <__pack_f+0xbe>
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	9a 01       	movw	r18, r20
     b66:	ab 01       	movw	r20, r22
     b68:	28 2b       	or	r18, r24
     b6a:	39 2b       	or	r19, r25
     b6c:	4a 2b       	or	r20, r26
     b6e:	5b 2b       	or	r21, r27
     b70:	da 01       	movw	r26, r20
     b72:	c9 01       	movw	r24, r18
     b74:	8f 77       	andi	r24, 0x7F	; 127
     b76:	90 70       	andi	r25, 0x00	; 0
     b78:	a0 70       	andi	r26, 0x00	; 0
     b7a:	b0 70       	andi	r27, 0x00	; 0
     b7c:	80 34       	cpi	r24, 0x40	; 64
     b7e:	91 05       	cpc	r25, r1
     b80:	a1 05       	cpc	r26, r1
     b82:	b1 05       	cpc	r27, r1
     b84:	39 f4       	brne	.+14     	; 0xb94 <__pack_f+0xee>
     b86:	27 ff       	sbrs	r18, 7
     b88:	09 c0       	rjmp	.+18     	; 0xb9c <__pack_f+0xf6>
     b8a:	20 5c       	subi	r18, 0xC0	; 192
     b8c:	3f 4f       	sbci	r19, 0xFF	; 255
     b8e:	4f 4f       	sbci	r20, 0xFF	; 255
     b90:	5f 4f       	sbci	r21, 0xFF	; 255
     b92:	04 c0       	rjmp	.+8      	; 0xb9c <__pack_f+0xf6>
     b94:	21 5c       	subi	r18, 0xC1	; 193
     b96:	3f 4f       	sbci	r19, 0xFF	; 255
     b98:	4f 4f       	sbci	r20, 0xFF	; 255
     b9a:	5f 4f       	sbci	r21, 0xFF	; 255
     b9c:	e0 e0       	ldi	r30, 0x00	; 0
     b9e:	f0 e0       	ldi	r31, 0x00	; 0
     ba0:	20 30       	cpi	r18, 0x00	; 0
     ba2:	a0 e0       	ldi	r26, 0x00	; 0
     ba4:	3a 07       	cpc	r19, r26
     ba6:	a0 e0       	ldi	r26, 0x00	; 0
     ba8:	4a 07       	cpc	r20, r26
     baa:	a0 e4       	ldi	r26, 0x40	; 64
     bac:	5a 07       	cpc	r21, r26
     bae:	10 f0       	brcs	.+4      	; 0xbb4 <__pack_f+0x10e>
     bb0:	e1 e0       	ldi	r30, 0x01	; 1
     bb2:	f0 e0       	ldi	r31, 0x00	; 0
     bb4:	79 01       	movw	r14, r18
     bb6:	8a 01       	movw	r16, r20
     bb8:	27 c0       	rjmp	.+78     	; 0xc08 <__pack_f+0x162>
     bba:	60 38       	cpi	r22, 0x80	; 128
     bbc:	71 05       	cpc	r23, r1
     bbe:	64 f5       	brge	.+88     	; 0xc18 <__pack_f+0x172>
     bc0:	fb 01       	movw	r30, r22
     bc2:	e1 58       	subi	r30, 0x81	; 129
     bc4:	ff 4f       	sbci	r31, 0xFF	; 255
     bc6:	d8 01       	movw	r26, r16
     bc8:	c7 01       	movw	r24, r14
     bca:	8f 77       	andi	r24, 0x7F	; 127
     bcc:	90 70       	andi	r25, 0x00	; 0
     bce:	a0 70       	andi	r26, 0x00	; 0
     bd0:	b0 70       	andi	r27, 0x00	; 0
     bd2:	80 34       	cpi	r24, 0x40	; 64
     bd4:	91 05       	cpc	r25, r1
     bd6:	a1 05       	cpc	r26, r1
     bd8:	b1 05       	cpc	r27, r1
     bda:	39 f4       	brne	.+14     	; 0xbea <__pack_f+0x144>
     bdc:	e7 fe       	sbrs	r14, 7
     bde:	0d c0       	rjmp	.+26     	; 0xbfa <__pack_f+0x154>
     be0:	80 e4       	ldi	r24, 0x40	; 64
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	a0 e0       	ldi	r26, 0x00	; 0
     be6:	b0 e0       	ldi	r27, 0x00	; 0
     be8:	04 c0       	rjmp	.+8      	; 0xbf2 <__pack_f+0x14c>
     bea:	8f e3       	ldi	r24, 0x3F	; 63
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	a0 e0       	ldi	r26, 0x00	; 0
     bf0:	b0 e0       	ldi	r27, 0x00	; 0
     bf2:	e8 0e       	add	r14, r24
     bf4:	f9 1e       	adc	r15, r25
     bf6:	0a 1f       	adc	r16, r26
     bf8:	1b 1f       	adc	r17, r27
     bfa:	17 ff       	sbrs	r17, 7
     bfc:	05 c0       	rjmp	.+10     	; 0xc08 <__pack_f+0x162>
     bfe:	16 95       	lsr	r17
     c00:	07 95       	ror	r16
     c02:	f7 94       	ror	r15
     c04:	e7 94       	ror	r14
     c06:	31 96       	adiw	r30, 0x01	; 1
     c08:	87 e0       	ldi	r24, 0x07	; 7
     c0a:	16 95       	lsr	r17
     c0c:	07 95       	ror	r16
     c0e:	f7 94       	ror	r15
     c10:	e7 94       	ror	r14
     c12:	8a 95       	dec	r24
     c14:	d1 f7       	brne	.-12     	; 0xc0a <__pack_f+0x164>
     c16:	05 c0       	rjmp	.+10     	; 0xc22 <__pack_f+0x17c>
     c18:	ee 24       	eor	r14, r14
     c1a:	ff 24       	eor	r15, r15
     c1c:	87 01       	movw	r16, r14
     c1e:	ef ef       	ldi	r30, 0xFF	; 255
     c20:	f0 e0       	ldi	r31, 0x00	; 0
     c22:	6e 2f       	mov	r22, r30
     c24:	67 95       	ror	r22
     c26:	66 27       	eor	r22, r22
     c28:	67 95       	ror	r22
     c2a:	90 2f       	mov	r25, r16
     c2c:	9f 77       	andi	r25, 0x7F	; 127
     c2e:	d7 94       	ror	r13
     c30:	dd 24       	eor	r13, r13
     c32:	d7 94       	ror	r13
     c34:	8e 2f       	mov	r24, r30
     c36:	86 95       	lsr	r24
     c38:	49 2f       	mov	r20, r25
     c3a:	46 2b       	or	r20, r22
     c3c:	58 2f       	mov	r21, r24
     c3e:	5d 29       	or	r21, r13
     c40:	b7 01       	movw	r22, r14
     c42:	ca 01       	movw	r24, r20
     c44:	1f 91       	pop	r17
     c46:	0f 91       	pop	r16
     c48:	ff 90       	pop	r15
     c4a:	ef 90       	pop	r14
     c4c:	df 90       	pop	r13
     c4e:	08 95       	ret

00000c50 <__unpack_f>:
     c50:	fc 01       	movw	r30, r24
     c52:	db 01       	movw	r26, r22
     c54:	40 81       	ld	r20, Z
     c56:	51 81       	ldd	r21, Z+1	; 0x01
     c58:	22 81       	ldd	r18, Z+2	; 0x02
     c5a:	62 2f       	mov	r22, r18
     c5c:	6f 77       	andi	r22, 0x7F	; 127
     c5e:	70 e0       	ldi	r23, 0x00	; 0
     c60:	22 1f       	adc	r18, r18
     c62:	22 27       	eor	r18, r18
     c64:	22 1f       	adc	r18, r18
     c66:	93 81       	ldd	r25, Z+3	; 0x03
     c68:	89 2f       	mov	r24, r25
     c6a:	88 0f       	add	r24, r24
     c6c:	82 2b       	or	r24, r18
     c6e:	28 2f       	mov	r18, r24
     c70:	30 e0       	ldi	r19, 0x00	; 0
     c72:	99 1f       	adc	r25, r25
     c74:	99 27       	eor	r25, r25
     c76:	99 1f       	adc	r25, r25
     c78:	11 96       	adiw	r26, 0x01	; 1
     c7a:	9c 93       	st	X, r25
     c7c:	11 97       	sbiw	r26, 0x01	; 1
     c7e:	21 15       	cp	r18, r1
     c80:	31 05       	cpc	r19, r1
     c82:	a9 f5       	brne	.+106    	; 0xcee <__unpack_f+0x9e>
     c84:	41 15       	cp	r20, r1
     c86:	51 05       	cpc	r21, r1
     c88:	61 05       	cpc	r22, r1
     c8a:	71 05       	cpc	r23, r1
     c8c:	11 f4       	brne	.+4      	; 0xc92 <__unpack_f+0x42>
     c8e:	82 e0       	ldi	r24, 0x02	; 2
     c90:	37 c0       	rjmp	.+110    	; 0xd00 <__unpack_f+0xb0>
     c92:	82 e8       	ldi	r24, 0x82	; 130
     c94:	9f ef       	ldi	r25, 0xFF	; 255
     c96:	13 96       	adiw	r26, 0x03	; 3
     c98:	9c 93       	st	X, r25
     c9a:	8e 93       	st	-X, r24
     c9c:	12 97       	sbiw	r26, 0x02	; 2
     c9e:	9a 01       	movw	r18, r20
     ca0:	ab 01       	movw	r20, r22
     ca2:	67 e0       	ldi	r22, 0x07	; 7
     ca4:	22 0f       	add	r18, r18
     ca6:	33 1f       	adc	r19, r19
     ca8:	44 1f       	adc	r20, r20
     caa:	55 1f       	adc	r21, r21
     cac:	6a 95       	dec	r22
     cae:	d1 f7       	brne	.-12     	; 0xca4 <__unpack_f+0x54>
     cb0:	83 e0       	ldi	r24, 0x03	; 3
     cb2:	8c 93       	st	X, r24
     cb4:	0d c0       	rjmp	.+26     	; 0xcd0 <__unpack_f+0x80>
     cb6:	22 0f       	add	r18, r18
     cb8:	33 1f       	adc	r19, r19
     cba:	44 1f       	adc	r20, r20
     cbc:	55 1f       	adc	r21, r21
     cbe:	12 96       	adiw	r26, 0x02	; 2
     cc0:	8d 91       	ld	r24, X+
     cc2:	9c 91       	ld	r25, X
     cc4:	13 97       	sbiw	r26, 0x03	; 3
     cc6:	01 97       	sbiw	r24, 0x01	; 1
     cc8:	13 96       	adiw	r26, 0x03	; 3
     cca:	9c 93       	st	X, r25
     ccc:	8e 93       	st	-X, r24
     cce:	12 97       	sbiw	r26, 0x02	; 2
     cd0:	20 30       	cpi	r18, 0x00	; 0
     cd2:	80 e0       	ldi	r24, 0x00	; 0
     cd4:	38 07       	cpc	r19, r24
     cd6:	80 e0       	ldi	r24, 0x00	; 0
     cd8:	48 07       	cpc	r20, r24
     cda:	80 e4       	ldi	r24, 0x40	; 64
     cdc:	58 07       	cpc	r21, r24
     cde:	58 f3       	brcs	.-42     	; 0xcb6 <__unpack_f+0x66>
     ce0:	14 96       	adiw	r26, 0x04	; 4
     ce2:	2d 93       	st	X+, r18
     ce4:	3d 93       	st	X+, r19
     ce6:	4d 93       	st	X+, r20
     ce8:	5c 93       	st	X, r21
     cea:	17 97       	sbiw	r26, 0x07	; 7
     cec:	08 95       	ret
     cee:	2f 3f       	cpi	r18, 0xFF	; 255
     cf0:	31 05       	cpc	r19, r1
     cf2:	79 f4       	brne	.+30     	; 0xd12 <__unpack_f+0xc2>
     cf4:	41 15       	cp	r20, r1
     cf6:	51 05       	cpc	r21, r1
     cf8:	61 05       	cpc	r22, r1
     cfa:	71 05       	cpc	r23, r1
     cfc:	19 f4       	brne	.+6      	; 0xd04 <__unpack_f+0xb4>
     cfe:	84 e0       	ldi	r24, 0x04	; 4
     d00:	8c 93       	st	X, r24
     d02:	08 95       	ret
     d04:	64 ff       	sbrs	r22, 4
     d06:	03 c0       	rjmp	.+6      	; 0xd0e <__unpack_f+0xbe>
     d08:	81 e0       	ldi	r24, 0x01	; 1
     d0a:	8c 93       	st	X, r24
     d0c:	12 c0       	rjmp	.+36     	; 0xd32 <__unpack_f+0xe2>
     d0e:	1c 92       	st	X, r1
     d10:	10 c0       	rjmp	.+32     	; 0xd32 <__unpack_f+0xe2>
     d12:	2f 57       	subi	r18, 0x7F	; 127
     d14:	30 40       	sbci	r19, 0x00	; 0
     d16:	13 96       	adiw	r26, 0x03	; 3
     d18:	3c 93       	st	X, r19
     d1a:	2e 93       	st	-X, r18
     d1c:	12 97       	sbiw	r26, 0x02	; 2
     d1e:	83 e0       	ldi	r24, 0x03	; 3
     d20:	8c 93       	st	X, r24
     d22:	87 e0       	ldi	r24, 0x07	; 7
     d24:	44 0f       	add	r20, r20
     d26:	55 1f       	adc	r21, r21
     d28:	66 1f       	adc	r22, r22
     d2a:	77 1f       	adc	r23, r23
     d2c:	8a 95       	dec	r24
     d2e:	d1 f7       	brne	.-12     	; 0xd24 <__unpack_f+0xd4>
     d30:	70 64       	ori	r23, 0x40	; 64
     d32:	14 96       	adiw	r26, 0x04	; 4
     d34:	4d 93       	st	X+, r20
     d36:	5d 93       	st	X+, r21
     d38:	6d 93       	st	X+, r22
     d3a:	7c 93       	st	X, r23
     d3c:	17 97       	sbiw	r26, 0x07	; 7
     d3e:	08 95       	ret

00000d40 <__fpcmp_parts_f>:
     d40:	1f 93       	push	r17
     d42:	dc 01       	movw	r26, r24
     d44:	fb 01       	movw	r30, r22
     d46:	9c 91       	ld	r25, X
     d48:	92 30       	cpi	r25, 0x02	; 2
     d4a:	08 f4       	brcc	.+2      	; 0xd4e <__fpcmp_parts_f+0xe>
     d4c:	47 c0       	rjmp	.+142    	; 0xddc <__fpcmp_parts_f+0x9c>
     d4e:	80 81       	ld	r24, Z
     d50:	82 30       	cpi	r24, 0x02	; 2
     d52:	08 f4       	brcc	.+2      	; 0xd56 <__fpcmp_parts_f+0x16>
     d54:	43 c0       	rjmp	.+134    	; 0xddc <__fpcmp_parts_f+0x9c>
     d56:	94 30       	cpi	r25, 0x04	; 4
     d58:	51 f4       	brne	.+20     	; 0xd6e <__fpcmp_parts_f+0x2e>
     d5a:	11 96       	adiw	r26, 0x01	; 1
     d5c:	1c 91       	ld	r17, X
     d5e:	84 30       	cpi	r24, 0x04	; 4
     d60:	99 f5       	brne	.+102    	; 0xdc8 <__fpcmp_parts_f+0x88>
     d62:	81 81       	ldd	r24, Z+1	; 0x01
     d64:	68 2f       	mov	r22, r24
     d66:	70 e0       	ldi	r23, 0x00	; 0
     d68:	61 1b       	sub	r22, r17
     d6a:	71 09       	sbc	r23, r1
     d6c:	3f c0       	rjmp	.+126    	; 0xdec <__fpcmp_parts_f+0xac>
     d6e:	84 30       	cpi	r24, 0x04	; 4
     d70:	21 f0       	breq	.+8      	; 0xd7a <__fpcmp_parts_f+0x3a>
     d72:	92 30       	cpi	r25, 0x02	; 2
     d74:	31 f4       	brne	.+12     	; 0xd82 <__fpcmp_parts_f+0x42>
     d76:	82 30       	cpi	r24, 0x02	; 2
     d78:	b9 f1       	breq	.+110    	; 0xde8 <__fpcmp_parts_f+0xa8>
     d7a:	81 81       	ldd	r24, Z+1	; 0x01
     d7c:	88 23       	and	r24, r24
     d7e:	89 f1       	breq	.+98     	; 0xde2 <__fpcmp_parts_f+0xa2>
     d80:	2d c0       	rjmp	.+90     	; 0xddc <__fpcmp_parts_f+0x9c>
     d82:	11 96       	adiw	r26, 0x01	; 1
     d84:	1c 91       	ld	r17, X
     d86:	11 97       	sbiw	r26, 0x01	; 1
     d88:	82 30       	cpi	r24, 0x02	; 2
     d8a:	f1 f0       	breq	.+60     	; 0xdc8 <__fpcmp_parts_f+0x88>
     d8c:	81 81       	ldd	r24, Z+1	; 0x01
     d8e:	18 17       	cp	r17, r24
     d90:	d9 f4       	brne	.+54     	; 0xdc8 <__fpcmp_parts_f+0x88>
     d92:	12 96       	adiw	r26, 0x02	; 2
     d94:	2d 91       	ld	r18, X+
     d96:	3c 91       	ld	r19, X
     d98:	13 97       	sbiw	r26, 0x03	; 3
     d9a:	82 81       	ldd	r24, Z+2	; 0x02
     d9c:	93 81       	ldd	r25, Z+3	; 0x03
     d9e:	82 17       	cp	r24, r18
     da0:	93 07       	cpc	r25, r19
     da2:	94 f0       	brlt	.+36     	; 0xdc8 <__fpcmp_parts_f+0x88>
     da4:	28 17       	cp	r18, r24
     da6:	39 07       	cpc	r19, r25
     da8:	bc f0       	brlt	.+46     	; 0xdd8 <__fpcmp_parts_f+0x98>
     daa:	14 96       	adiw	r26, 0x04	; 4
     dac:	8d 91       	ld	r24, X+
     dae:	9d 91       	ld	r25, X+
     db0:	0d 90       	ld	r0, X+
     db2:	bc 91       	ld	r27, X
     db4:	a0 2d       	mov	r26, r0
     db6:	24 81       	ldd	r18, Z+4	; 0x04
     db8:	35 81       	ldd	r19, Z+5	; 0x05
     dba:	46 81       	ldd	r20, Z+6	; 0x06
     dbc:	57 81       	ldd	r21, Z+7	; 0x07
     dbe:	28 17       	cp	r18, r24
     dc0:	39 07       	cpc	r19, r25
     dc2:	4a 07       	cpc	r20, r26
     dc4:	5b 07       	cpc	r21, r27
     dc6:	18 f4       	brcc	.+6      	; 0xdce <__fpcmp_parts_f+0x8e>
     dc8:	11 23       	and	r17, r17
     dca:	41 f0       	breq	.+16     	; 0xddc <__fpcmp_parts_f+0x9c>
     dcc:	0a c0       	rjmp	.+20     	; 0xde2 <__fpcmp_parts_f+0xa2>
     dce:	82 17       	cp	r24, r18
     dd0:	93 07       	cpc	r25, r19
     dd2:	a4 07       	cpc	r26, r20
     dd4:	b5 07       	cpc	r27, r21
     dd6:	40 f4       	brcc	.+16     	; 0xde8 <__fpcmp_parts_f+0xa8>
     dd8:	11 23       	and	r17, r17
     dda:	19 f0       	breq	.+6      	; 0xde2 <__fpcmp_parts_f+0xa2>
     ddc:	61 e0       	ldi	r22, 0x01	; 1
     dde:	70 e0       	ldi	r23, 0x00	; 0
     de0:	05 c0       	rjmp	.+10     	; 0xdec <__fpcmp_parts_f+0xac>
     de2:	6f ef       	ldi	r22, 0xFF	; 255
     de4:	7f ef       	ldi	r23, 0xFF	; 255
     de6:	02 c0       	rjmp	.+4      	; 0xdec <__fpcmp_parts_f+0xac>
     de8:	60 e0       	ldi	r22, 0x00	; 0
     dea:	70 e0       	ldi	r23, 0x00	; 0
     dec:	cb 01       	movw	r24, r22
     dee:	1f 91       	pop	r17
     df0:	08 95       	ret

00000df2 <C_LCD_voidSendCommand>:

#include "CLCD_private.h"


void C_LCD_voidSendCommand(u8 Copy_u8Command)
{
     df2:	1f 93       	push	r17
     df4:	df 93       	push	r29
     df6:	cf 93       	push	r28
     df8:	cd b7       	in	r28, 0x3d	; 61
     dfa:	de b7       	in	r29, 0x3e	; 62
     dfc:	ea 97       	sbiw	r28, 0x3a	; 58
     dfe:	0f b6       	in	r0, 0x3f	; 63
     e00:	f8 94       	cli
     e02:	de bf       	out	0x3e, r29	; 62
     e04:	0f be       	out	0x3f, r0	; 63
     e06:	cd bf       	out	0x3d, r28	; 61
     e08:	8a af       	std	Y+58, r24	; 0x3a
	/*Set RS Pin to low to send command */
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_LOW);
     e0a:	80 e0       	ldi	r24, 0x00	; 0
     e0c:	61 e0       	ldi	r22, 0x01	; 1
     e0e:	40 e0       	ldi	r20, 0x00	; 0
     e10:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <DIO_u8SetPinValue>
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);

#elif   MODE_SELECT ==_4_BIT_MODE

	u8 Local_u8Command = (((Copy_u8Command>>1 ) & CLCD_COMMAND_MASK) | DIO_u8AndWithPort(CLCD_DATA_PORT, CLCD_DATA_PORT_MASK));
     e14:	8a ad       	ldd	r24, Y+58	; 0x3a
     e16:	86 95       	lsr	r24
     e18:	18 2f       	mov	r17, r24
     e1a:	18 77       	andi	r17, 0x78	; 120
     e1c:	80 e0       	ldi	r24, 0x00	; 0
     e1e:	67 e8       	ldi	r22, 0x87	; 135
     e20:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <DIO_u8AndWithPort>
     e24:	81 2b       	or	r24, r17
     e26:	89 af       	std	Y+57, r24	; 0x39
	/* Set Command to data pins */
	DIO_u8SetPortValue(CLCD_DATA_PORT,Local_u8Command);
     e28:	80 e0       	ldi	r24, 0x00	; 0
     e2a:	69 ad       	ldd	r22, Y+57	; 0x39
     e2c:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <DIO_u8SetPortValue>

	/*Send Enable pulse */
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
     e30:	80 e0       	ldi	r24, 0x00	; 0
     e32:	62 e0       	ldi	r22, 0x02	; 2
     e34:	41 e0       	ldi	r20, 0x01	; 1
     e36:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <DIO_u8SetPinValue>
     e3a:	80 e0       	ldi	r24, 0x00	; 0
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	a0 e0       	ldi	r26, 0x00	; 0
     e40:	b0 e4       	ldi	r27, 0x40	; 64
     e42:	8d ab       	std	Y+53, r24	; 0x35
     e44:	9e ab       	std	Y+54, r25	; 0x36
     e46:	af ab       	std	Y+55, r26	; 0x37
     e48:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e4a:	6d a9       	ldd	r22, Y+53	; 0x35
     e4c:	7e a9       	ldd	r23, Y+54	; 0x36
     e4e:	8f a9       	ldd	r24, Y+55	; 0x37
     e50:	98 ad       	ldd	r25, Y+56	; 0x38
     e52:	20 e0       	ldi	r18, 0x00	; 0
     e54:	30 e0       	ldi	r19, 0x00	; 0
     e56:	4a ef       	ldi	r20, 0xFA	; 250
     e58:	54 e4       	ldi	r21, 0x44	; 68
     e5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e5e:	dc 01       	movw	r26, r24
     e60:	cb 01       	movw	r24, r22
     e62:	89 ab       	std	Y+49, r24	; 0x31
     e64:	9a ab       	std	Y+50, r25	; 0x32
     e66:	ab ab       	std	Y+51, r26	; 0x33
     e68:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     e6a:	69 a9       	ldd	r22, Y+49	; 0x31
     e6c:	7a a9       	ldd	r23, Y+50	; 0x32
     e6e:	8b a9       	ldd	r24, Y+51	; 0x33
     e70:	9c a9       	ldd	r25, Y+52	; 0x34
     e72:	20 e0       	ldi	r18, 0x00	; 0
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	40 e8       	ldi	r20, 0x80	; 128
     e78:	5f e3       	ldi	r21, 0x3F	; 63
     e7a:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
     e7e:	88 23       	and	r24, r24
     e80:	2c f4       	brge	.+10     	; 0xe8c <C_LCD_voidSendCommand+0x9a>
		__ticks = 1;
     e82:	81 e0       	ldi	r24, 0x01	; 1
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	98 ab       	std	Y+48, r25	; 0x30
     e88:	8f a7       	std	Y+47, r24	; 0x2f
     e8a:	3f c0       	rjmp	.+126    	; 0xf0a <C_LCD_voidSendCommand+0x118>
	else if (__tmp > 65535)
     e8c:	69 a9       	ldd	r22, Y+49	; 0x31
     e8e:	7a a9       	ldd	r23, Y+50	; 0x32
     e90:	8b a9       	ldd	r24, Y+51	; 0x33
     e92:	9c a9       	ldd	r25, Y+52	; 0x34
     e94:	20 e0       	ldi	r18, 0x00	; 0
     e96:	3f ef       	ldi	r19, 0xFF	; 255
     e98:	4f e7       	ldi	r20, 0x7F	; 127
     e9a:	57 e4       	ldi	r21, 0x47	; 71
     e9c:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
     ea0:	18 16       	cp	r1, r24
     ea2:	4c f5       	brge	.+82     	; 0xef6 <C_LCD_voidSendCommand+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ea4:	6d a9       	ldd	r22, Y+53	; 0x35
     ea6:	7e a9       	ldd	r23, Y+54	; 0x36
     ea8:	8f a9       	ldd	r24, Y+55	; 0x37
     eaa:	98 ad       	ldd	r25, Y+56	; 0x38
     eac:	20 e0       	ldi	r18, 0x00	; 0
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	40 e2       	ldi	r20, 0x20	; 32
     eb2:	51 e4       	ldi	r21, 0x41	; 65
     eb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eb8:	dc 01       	movw	r26, r24
     eba:	cb 01       	movw	r24, r22
     ebc:	bc 01       	movw	r22, r24
     ebe:	cd 01       	movw	r24, r26
     ec0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ec4:	dc 01       	movw	r26, r24
     ec6:	cb 01       	movw	r24, r22
     ec8:	98 ab       	std	Y+48, r25	; 0x30
     eca:	8f a7       	std	Y+47, r24	; 0x2f
     ecc:	0f c0       	rjmp	.+30     	; 0xeec <C_LCD_voidSendCommand+0xfa>
     ece:	88 ec       	ldi	r24, 0xC8	; 200
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	9e a7       	std	Y+46, r25	; 0x2e
     ed4:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ed6:	8d a5       	ldd	r24, Y+45	; 0x2d
     ed8:	9e a5       	ldd	r25, Y+46	; 0x2e
     eda:	01 97       	sbiw	r24, 0x01	; 1
     edc:	f1 f7       	brne	.-4      	; 0xeda <C_LCD_voidSendCommand+0xe8>
     ede:	9e a7       	std	Y+46, r25	; 0x2e
     ee0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ee2:	8f a5       	ldd	r24, Y+47	; 0x2f
     ee4:	98 a9       	ldd	r25, Y+48	; 0x30
     ee6:	01 97       	sbiw	r24, 0x01	; 1
     ee8:	98 ab       	std	Y+48, r25	; 0x30
     eea:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     eec:	8f a5       	ldd	r24, Y+47	; 0x2f
     eee:	98 a9       	ldd	r25, Y+48	; 0x30
     ef0:	00 97       	sbiw	r24, 0x00	; 0
     ef2:	69 f7       	brne	.-38     	; 0xece <C_LCD_voidSendCommand+0xdc>
     ef4:	14 c0       	rjmp	.+40     	; 0xf1e <C_LCD_voidSendCommand+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ef6:	69 a9       	ldd	r22, Y+49	; 0x31
     ef8:	7a a9       	ldd	r23, Y+50	; 0x32
     efa:	8b a9       	ldd	r24, Y+51	; 0x33
     efc:	9c a9       	ldd	r25, Y+52	; 0x34
     efe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f02:	dc 01       	movw	r26, r24
     f04:	cb 01       	movw	r24, r22
     f06:	98 ab       	std	Y+48, r25	; 0x30
     f08:	8f a7       	std	Y+47, r24	; 0x2f
     f0a:	8f a5       	ldd	r24, Y+47	; 0x2f
     f0c:	98 a9       	ldd	r25, Y+48	; 0x30
     f0e:	9c a7       	std	Y+44, r25	; 0x2c
     f10:	8b a7       	std	Y+43, r24	; 0x2b
     f12:	8b a5       	ldd	r24, Y+43	; 0x2b
     f14:	9c a5       	ldd	r25, Y+44	; 0x2c
     f16:	01 97       	sbiw	r24, 0x01	; 1
     f18:	f1 f7       	brne	.-4      	; 0xf16 <C_LCD_voidSendCommand+0x124>
     f1a:	9c a7       	std	Y+44, r25	; 0x2c
     f1c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
     f1e:	80 e0       	ldi	r24, 0x00	; 0
     f20:	62 e0       	ldi	r22, 0x02	; 2
     f22:	40 e0       	ldi	r20, 0x00	; 0
     f24:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <DIO_u8SetPinValue>
     f28:	80 e0       	ldi	r24, 0x00	; 0
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	a0 ea       	ldi	r26, 0xA0	; 160
     f2e:	b0 e4       	ldi	r27, 0x40	; 64
     f30:	8f a3       	std	Y+39, r24	; 0x27
     f32:	98 a7       	std	Y+40, r25	; 0x28
     f34:	a9 a7       	std	Y+41, r26	; 0x29
     f36:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f38:	6f a1       	ldd	r22, Y+39	; 0x27
     f3a:	78 a5       	ldd	r23, Y+40	; 0x28
     f3c:	89 a5       	ldd	r24, Y+41	; 0x29
     f3e:	9a a5       	ldd	r25, Y+42	; 0x2a
     f40:	20 e0       	ldi	r18, 0x00	; 0
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	4a ef       	ldi	r20, 0xFA	; 250
     f46:	54 e4       	ldi	r21, 0x44	; 68
     f48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f4c:	dc 01       	movw	r26, r24
     f4e:	cb 01       	movw	r24, r22
     f50:	8b a3       	std	Y+35, r24	; 0x23
     f52:	9c a3       	std	Y+36, r25	; 0x24
     f54:	ad a3       	std	Y+37, r26	; 0x25
     f56:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     f58:	6b a1       	ldd	r22, Y+35	; 0x23
     f5a:	7c a1       	ldd	r23, Y+36	; 0x24
     f5c:	8d a1       	ldd	r24, Y+37	; 0x25
     f5e:	9e a1       	ldd	r25, Y+38	; 0x26
     f60:	20 e0       	ldi	r18, 0x00	; 0
     f62:	30 e0       	ldi	r19, 0x00	; 0
     f64:	40 e8       	ldi	r20, 0x80	; 128
     f66:	5f e3       	ldi	r21, 0x3F	; 63
     f68:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
     f6c:	88 23       	and	r24, r24
     f6e:	2c f4       	brge	.+10     	; 0xf7a <C_LCD_voidSendCommand+0x188>
		__ticks = 1;
     f70:	81 e0       	ldi	r24, 0x01	; 1
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	9a a3       	std	Y+34, r25	; 0x22
     f76:	89 a3       	std	Y+33, r24	; 0x21
     f78:	3f c0       	rjmp	.+126    	; 0xff8 <C_LCD_voidSendCommand+0x206>
	else if (__tmp > 65535)
     f7a:	6b a1       	ldd	r22, Y+35	; 0x23
     f7c:	7c a1       	ldd	r23, Y+36	; 0x24
     f7e:	8d a1       	ldd	r24, Y+37	; 0x25
     f80:	9e a1       	ldd	r25, Y+38	; 0x26
     f82:	20 e0       	ldi	r18, 0x00	; 0
     f84:	3f ef       	ldi	r19, 0xFF	; 255
     f86:	4f e7       	ldi	r20, 0x7F	; 127
     f88:	57 e4       	ldi	r21, 0x47	; 71
     f8a:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
     f8e:	18 16       	cp	r1, r24
     f90:	4c f5       	brge	.+82     	; 0xfe4 <C_LCD_voidSendCommand+0x1f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f92:	6f a1       	ldd	r22, Y+39	; 0x27
     f94:	78 a5       	ldd	r23, Y+40	; 0x28
     f96:	89 a5       	ldd	r24, Y+41	; 0x29
     f98:	9a a5       	ldd	r25, Y+42	; 0x2a
     f9a:	20 e0       	ldi	r18, 0x00	; 0
     f9c:	30 e0       	ldi	r19, 0x00	; 0
     f9e:	40 e2       	ldi	r20, 0x20	; 32
     fa0:	51 e4       	ldi	r21, 0x41	; 65
     fa2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fa6:	dc 01       	movw	r26, r24
     fa8:	cb 01       	movw	r24, r22
     faa:	bc 01       	movw	r22, r24
     fac:	cd 01       	movw	r24, r26
     fae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fb2:	dc 01       	movw	r26, r24
     fb4:	cb 01       	movw	r24, r22
     fb6:	9a a3       	std	Y+34, r25	; 0x22
     fb8:	89 a3       	std	Y+33, r24	; 0x21
     fba:	0f c0       	rjmp	.+30     	; 0xfda <C_LCD_voidSendCommand+0x1e8>
     fbc:	88 ec       	ldi	r24, 0xC8	; 200
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	98 a3       	std	Y+32, r25	; 0x20
     fc2:	8f 8f       	std	Y+31, r24	; 0x1f
     fc4:	8f 8d       	ldd	r24, Y+31	; 0x1f
     fc6:	98 a1       	ldd	r25, Y+32	; 0x20
     fc8:	01 97       	sbiw	r24, 0x01	; 1
     fca:	f1 f7       	brne	.-4      	; 0xfc8 <C_LCD_voidSendCommand+0x1d6>
     fcc:	98 a3       	std	Y+32, r25	; 0x20
     fce:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fd0:	89 a1       	ldd	r24, Y+33	; 0x21
     fd2:	9a a1       	ldd	r25, Y+34	; 0x22
     fd4:	01 97       	sbiw	r24, 0x01	; 1
     fd6:	9a a3       	std	Y+34, r25	; 0x22
     fd8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fda:	89 a1       	ldd	r24, Y+33	; 0x21
     fdc:	9a a1       	ldd	r25, Y+34	; 0x22
     fde:	00 97       	sbiw	r24, 0x00	; 0
     fe0:	69 f7       	brne	.-38     	; 0xfbc <C_LCD_voidSendCommand+0x1ca>
     fe2:	14 c0       	rjmp	.+40     	; 0x100c <C_LCD_voidSendCommand+0x21a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fe4:	6b a1       	ldd	r22, Y+35	; 0x23
     fe6:	7c a1       	ldd	r23, Y+36	; 0x24
     fe8:	8d a1       	ldd	r24, Y+37	; 0x25
     fea:	9e a1       	ldd	r25, Y+38	; 0x26
     fec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ff0:	dc 01       	movw	r26, r24
     ff2:	cb 01       	movw	r24, r22
     ff4:	9a a3       	std	Y+34, r25	; 0x22
     ff6:	89 a3       	std	Y+33, r24	; 0x21
     ff8:	89 a1       	ldd	r24, Y+33	; 0x21
     ffa:	9a a1       	ldd	r25, Y+34	; 0x22
     ffc:	9e 8f       	std	Y+30, r25	; 0x1e
     ffe:	8d 8f       	std	Y+29, r24	; 0x1d
    1000:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1002:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1004:	01 97       	sbiw	r24, 0x01	; 1
    1006:	f1 f7       	brne	.-4      	; 0x1004 <C_LCD_voidSendCommand+0x212>
    1008:	9e 8f       	std	Y+30, r25	; 0x1e
    100a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);

	Local_u8Command = ((Copy_u8Command <<3) |DIO_u8AndWithPort(CLCD_DATA_PORT, CLCD_DATA_PORT_MASK));
    100c:	8a ad       	ldd	r24, Y+58	; 0x3a
    100e:	88 2f       	mov	r24, r24
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	88 0f       	add	r24, r24
    1014:	99 1f       	adc	r25, r25
    1016:	88 0f       	add	r24, r24
    1018:	99 1f       	adc	r25, r25
    101a:	88 0f       	add	r24, r24
    101c:	99 1f       	adc	r25, r25
    101e:	18 2f       	mov	r17, r24
    1020:	80 e0       	ldi	r24, 0x00	; 0
    1022:	67 e8       	ldi	r22, 0x87	; 135
    1024:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <DIO_u8AndWithPort>
    1028:	81 2b       	or	r24, r17
    102a:	89 af       	std	Y+57, r24	; 0x39
	DIO_u8SetPortValue(CLCD_DATA_PORT,Local_u8Command);
    102c:	80 e0       	ldi	r24, 0x00	; 0
    102e:	69 ad       	ldd	r22, Y+57	; 0x39
    1030:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <DIO_u8SetPortValue>

	/*Send Enable pulse */
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    1034:	80 e0       	ldi	r24, 0x00	; 0
    1036:	62 e0       	ldi	r22, 0x02	; 2
    1038:	41 e0       	ldi	r20, 0x01	; 1
    103a:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <DIO_u8SetPinValue>
    103e:	80 e0       	ldi	r24, 0x00	; 0
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	a0 e0       	ldi	r26, 0x00	; 0
    1044:	b0 e4       	ldi	r27, 0x40	; 64
    1046:	89 8f       	std	Y+25, r24	; 0x19
    1048:	9a 8f       	std	Y+26, r25	; 0x1a
    104a:	ab 8f       	std	Y+27, r26	; 0x1b
    104c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    104e:	69 8d       	ldd	r22, Y+25	; 0x19
    1050:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1052:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1054:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1056:	20 e0       	ldi	r18, 0x00	; 0
    1058:	30 e0       	ldi	r19, 0x00	; 0
    105a:	4a ef       	ldi	r20, 0xFA	; 250
    105c:	54 e4       	ldi	r21, 0x44	; 68
    105e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1062:	dc 01       	movw	r26, r24
    1064:	cb 01       	movw	r24, r22
    1066:	8d 8b       	std	Y+21, r24	; 0x15
    1068:	9e 8b       	std	Y+22, r25	; 0x16
    106a:	af 8b       	std	Y+23, r26	; 0x17
    106c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    106e:	6d 89       	ldd	r22, Y+21	; 0x15
    1070:	7e 89       	ldd	r23, Y+22	; 0x16
    1072:	8f 89       	ldd	r24, Y+23	; 0x17
    1074:	98 8d       	ldd	r25, Y+24	; 0x18
    1076:	20 e0       	ldi	r18, 0x00	; 0
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	40 e8       	ldi	r20, 0x80	; 128
    107c:	5f e3       	ldi	r21, 0x3F	; 63
    107e:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    1082:	88 23       	and	r24, r24
    1084:	2c f4       	brge	.+10     	; 0x1090 <C_LCD_voidSendCommand+0x29e>
		__ticks = 1;
    1086:	81 e0       	ldi	r24, 0x01	; 1
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	9c 8b       	std	Y+20, r25	; 0x14
    108c:	8b 8b       	std	Y+19, r24	; 0x13
    108e:	3f c0       	rjmp	.+126    	; 0x110e <C_LCD_voidSendCommand+0x31c>
	else if (__tmp > 65535)
    1090:	6d 89       	ldd	r22, Y+21	; 0x15
    1092:	7e 89       	ldd	r23, Y+22	; 0x16
    1094:	8f 89       	ldd	r24, Y+23	; 0x17
    1096:	98 8d       	ldd	r25, Y+24	; 0x18
    1098:	20 e0       	ldi	r18, 0x00	; 0
    109a:	3f ef       	ldi	r19, 0xFF	; 255
    109c:	4f e7       	ldi	r20, 0x7F	; 127
    109e:	57 e4       	ldi	r21, 0x47	; 71
    10a0:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    10a4:	18 16       	cp	r1, r24
    10a6:	4c f5       	brge	.+82     	; 0x10fa <C_LCD_voidSendCommand+0x308>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10a8:	69 8d       	ldd	r22, Y+25	; 0x19
    10aa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    10ac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    10ae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    10b0:	20 e0       	ldi	r18, 0x00	; 0
    10b2:	30 e0       	ldi	r19, 0x00	; 0
    10b4:	40 e2       	ldi	r20, 0x20	; 32
    10b6:	51 e4       	ldi	r21, 0x41	; 65
    10b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10bc:	dc 01       	movw	r26, r24
    10be:	cb 01       	movw	r24, r22
    10c0:	bc 01       	movw	r22, r24
    10c2:	cd 01       	movw	r24, r26
    10c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10c8:	dc 01       	movw	r26, r24
    10ca:	cb 01       	movw	r24, r22
    10cc:	9c 8b       	std	Y+20, r25	; 0x14
    10ce:	8b 8b       	std	Y+19, r24	; 0x13
    10d0:	0f c0       	rjmp	.+30     	; 0x10f0 <C_LCD_voidSendCommand+0x2fe>
    10d2:	88 ec       	ldi	r24, 0xC8	; 200
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	9a 8b       	std	Y+18, r25	; 0x12
    10d8:	89 8b       	std	Y+17, r24	; 0x11
    10da:	89 89       	ldd	r24, Y+17	; 0x11
    10dc:	9a 89       	ldd	r25, Y+18	; 0x12
    10de:	01 97       	sbiw	r24, 0x01	; 1
    10e0:	f1 f7       	brne	.-4      	; 0x10de <C_LCD_voidSendCommand+0x2ec>
    10e2:	9a 8b       	std	Y+18, r25	; 0x12
    10e4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10e6:	8b 89       	ldd	r24, Y+19	; 0x13
    10e8:	9c 89       	ldd	r25, Y+20	; 0x14
    10ea:	01 97       	sbiw	r24, 0x01	; 1
    10ec:	9c 8b       	std	Y+20, r25	; 0x14
    10ee:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10f0:	8b 89       	ldd	r24, Y+19	; 0x13
    10f2:	9c 89       	ldd	r25, Y+20	; 0x14
    10f4:	00 97       	sbiw	r24, 0x00	; 0
    10f6:	69 f7       	brne	.-38     	; 0x10d2 <C_LCD_voidSendCommand+0x2e0>
    10f8:	14 c0       	rjmp	.+40     	; 0x1122 <C_LCD_voidSendCommand+0x330>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10fa:	6d 89       	ldd	r22, Y+21	; 0x15
    10fc:	7e 89       	ldd	r23, Y+22	; 0x16
    10fe:	8f 89       	ldd	r24, Y+23	; 0x17
    1100:	98 8d       	ldd	r25, Y+24	; 0x18
    1102:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1106:	dc 01       	movw	r26, r24
    1108:	cb 01       	movw	r24, r22
    110a:	9c 8b       	std	Y+20, r25	; 0x14
    110c:	8b 8b       	std	Y+19, r24	; 0x13
    110e:	8b 89       	ldd	r24, Y+19	; 0x13
    1110:	9c 89       	ldd	r25, Y+20	; 0x14
    1112:	98 8b       	std	Y+16, r25	; 0x10
    1114:	8f 87       	std	Y+15, r24	; 0x0f
    1116:	8f 85       	ldd	r24, Y+15	; 0x0f
    1118:	98 89       	ldd	r25, Y+16	; 0x10
    111a:	01 97       	sbiw	r24, 0x01	; 1
    111c:	f1 f7       	brne	.-4      	; 0x111a <C_LCD_voidSendCommand+0x328>
    111e:	98 8b       	std	Y+16, r25	; 0x10
    1120:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    1122:	80 e0       	ldi	r24, 0x00	; 0
    1124:	62 e0       	ldi	r22, 0x02	; 2
    1126:	40 e0       	ldi	r20, 0x00	; 0
    1128:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <DIO_u8SetPinValue>
    112c:	80 e0       	ldi	r24, 0x00	; 0
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	a0 ea       	ldi	r26, 0xA0	; 160
    1132:	b0 e4       	ldi	r27, 0x40	; 64
    1134:	8b 87       	std	Y+11, r24	; 0x0b
    1136:	9c 87       	std	Y+12, r25	; 0x0c
    1138:	ad 87       	std	Y+13, r26	; 0x0d
    113a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    113c:	6b 85       	ldd	r22, Y+11	; 0x0b
    113e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1140:	8d 85       	ldd	r24, Y+13	; 0x0d
    1142:	9e 85       	ldd	r25, Y+14	; 0x0e
    1144:	20 e0       	ldi	r18, 0x00	; 0
    1146:	30 e0       	ldi	r19, 0x00	; 0
    1148:	4a ef       	ldi	r20, 0xFA	; 250
    114a:	54 e4       	ldi	r21, 0x44	; 68
    114c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1150:	dc 01       	movw	r26, r24
    1152:	cb 01       	movw	r24, r22
    1154:	8f 83       	std	Y+7, r24	; 0x07
    1156:	98 87       	std	Y+8, r25	; 0x08
    1158:	a9 87       	std	Y+9, r26	; 0x09
    115a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    115c:	6f 81       	ldd	r22, Y+7	; 0x07
    115e:	78 85       	ldd	r23, Y+8	; 0x08
    1160:	89 85       	ldd	r24, Y+9	; 0x09
    1162:	9a 85       	ldd	r25, Y+10	; 0x0a
    1164:	20 e0       	ldi	r18, 0x00	; 0
    1166:	30 e0       	ldi	r19, 0x00	; 0
    1168:	40 e8       	ldi	r20, 0x80	; 128
    116a:	5f e3       	ldi	r21, 0x3F	; 63
    116c:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    1170:	88 23       	and	r24, r24
    1172:	2c f4       	brge	.+10     	; 0x117e <C_LCD_voidSendCommand+0x38c>
		__ticks = 1;
    1174:	81 e0       	ldi	r24, 0x01	; 1
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	9e 83       	std	Y+6, r25	; 0x06
    117a:	8d 83       	std	Y+5, r24	; 0x05
    117c:	3f c0       	rjmp	.+126    	; 0x11fc <C_LCD_voidSendCommand+0x40a>
	else if (__tmp > 65535)
    117e:	6f 81       	ldd	r22, Y+7	; 0x07
    1180:	78 85       	ldd	r23, Y+8	; 0x08
    1182:	89 85       	ldd	r24, Y+9	; 0x09
    1184:	9a 85       	ldd	r25, Y+10	; 0x0a
    1186:	20 e0       	ldi	r18, 0x00	; 0
    1188:	3f ef       	ldi	r19, 0xFF	; 255
    118a:	4f e7       	ldi	r20, 0x7F	; 127
    118c:	57 e4       	ldi	r21, 0x47	; 71
    118e:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    1192:	18 16       	cp	r1, r24
    1194:	4c f5       	brge	.+82     	; 0x11e8 <C_LCD_voidSendCommand+0x3f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1196:	6b 85       	ldd	r22, Y+11	; 0x0b
    1198:	7c 85       	ldd	r23, Y+12	; 0x0c
    119a:	8d 85       	ldd	r24, Y+13	; 0x0d
    119c:	9e 85       	ldd	r25, Y+14	; 0x0e
    119e:	20 e0       	ldi	r18, 0x00	; 0
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	40 e2       	ldi	r20, 0x20	; 32
    11a4:	51 e4       	ldi	r21, 0x41	; 65
    11a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11aa:	dc 01       	movw	r26, r24
    11ac:	cb 01       	movw	r24, r22
    11ae:	bc 01       	movw	r22, r24
    11b0:	cd 01       	movw	r24, r26
    11b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11b6:	dc 01       	movw	r26, r24
    11b8:	cb 01       	movw	r24, r22
    11ba:	9e 83       	std	Y+6, r25	; 0x06
    11bc:	8d 83       	std	Y+5, r24	; 0x05
    11be:	0f c0       	rjmp	.+30     	; 0x11de <C_LCD_voidSendCommand+0x3ec>
    11c0:	88 ec       	ldi	r24, 0xC8	; 200
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	9c 83       	std	Y+4, r25	; 0x04
    11c6:	8b 83       	std	Y+3, r24	; 0x03
    11c8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ca:	9c 81       	ldd	r25, Y+4	; 0x04
    11cc:	01 97       	sbiw	r24, 0x01	; 1
    11ce:	f1 f7       	brne	.-4      	; 0x11cc <C_LCD_voidSendCommand+0x3da>
    11d0:	9c 83       	std	Y+4, r25	; 0x04
    11d2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11d4:	8d 81       	ldd	r24, Y+5	; 0x05
    11d6:	9e 81       	ldd	r25, Y+6	; 0x06
    11d8:	01 97       	sbiw	r24, 0x01	; 1
    11da:	9e 83       	std	Y+6, r25	; 0x06
    11dc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11de:	8d 81       	ldd	r24, Y+5	; 0x05
    11e0:	9e 81       	ldd	r25, Y+6	; 0x06
    11e2:	00 97       	sbiw	r24, 0x00	; 0
    11e4:	69 f7       	brne	.-38     	; 0x11c0 <C_LCD_voidSendCommand+0x3ce>
    11e6:	14 c0       	rjmp	.+40     	; 0x1210 <C_LCD_voidSendCommand+0x41e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11e8:	6f 81       	ldd	r22, Y+7	; 0x07
    11ea:	78 85       	ldd	r23, Y+8	; 0x08
    11ec:	89 85       	ldd	r24, Y+9	; 0x09
    11ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    11f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11f4:	dc 01       	movw	r26, r24
    11f6:	cb 01       	movw	r24, r22
    11f8:	9e 83       	std	Y+6, r25	; 0x06
    11fa:	8d 83       	std	Y+5, r24	; 0x05
    11fc:	8d 81       	ldd	r24, Y+5	; 0x05
    11fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1200:	9a 83       	std	Y+2, r25	; 0x02
    1202:	89 83       	std	Y+1, r24	; 0x01
    1204:	89 81       	ldd	r24, Y+1	; 0x01
    1206:	9a 81       	ldd	r25, Y+2	; 0x02
    1208:	01 97       	sbiw	r24, 0x01	; 1
    120a:	f1 f7       	brne	.-4      	; 0x1208 <C_LCD_voidSendCommand+0x416>
    120c:	9a 83       	std	Y+2, r25	; 0x02
    120e:	89 83       	std	Y+1, r24	; 0x01

#endif



}
    1210:	ea 96       	adiw	r28, 0x3a	; 58
    1212:	0f b6       	in	r0, 0x3f	; 63
    1214:	f8 94       	cli
    1216:	de bf       	out	0x3e, r29	; 62
    1218:	0f be       	out	0x3f, r0	; 63
    121a:	cd bf       	out	0x3d, r28	; 61
    121c:	cf 91       	pop	r28
    121e:	df 91       	pop	r29
    1220:	1f 91       	pop	r17
    1222:	08 95       	ret

00001224 <CLCD_voidSendData>:

void CLCD_voidSendData(u8 Copy_u8Data)
{
    1224:	1f 93       	push	r17
    1226:	df 93       	push	r29
    1228:	cf 93       	push	r28
    122a:	cd b7       	in	r28, 0x3d	; 61
    122c:	de b7       	in	r29, 0x3e	; 62
    122e:	ea 97       	sbiw	r28, 0x3a	; 58
    1230:	0f b6       	in	r0, 0x3f	; 63
    1232:	f8 94       	cli
    1234:	de bf       	out	0x3e, r29	; 62
    1236:	0f be       	out	0x3f, r0	; 63
    1238:	cd bf       	out	0x3d, r28	; 61
    123a:	8a af       	std	Y+58, r24	; 0x3a
	/*Set RS Pin to low to send data */
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_HIGH);
    123c:	80 e0       	ldi	r24, 0x00	; 0
    123e:	61 e0       	ldi	r22, 0x01	; 1
    1240:	41 e0       	ldi	r20, 0x01	; 1
    1242:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <DIO_u8SetPinValue>
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);

#elif   MODE_SELECT ==_4_BIT_MODE

	u8 Local_u8Data = (((Copy_u8Data>>1) & CLCD_COMMAND_MASK) | DIO_u8AndWithPort(CLCD_DATA_PORT, CLCD_DATA_PORT_MASK));
    1246:	8a ad       	ldd	r24, Y+58	; 0x3a
    1248:	86 95       	lsr	r24
    124a:	18 2f       	mov	r17, r24
    124c:	18 77       	andi	r17, 0x78	; 120
    124e:	80 e0       	ldi	r24, 0x00	; 0
    1250:	67 e8       	ldi	r22, 0x87	; 135
    1252:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <DIO_u8AndWithPort>
    1256:	81 2b       	or	r24, r17
    1258:	89 af       	std	Y+57, r24	; 0x39
	/* Set Command to data pins */
	DIO_u8SetPortValue(CLCD_DATA_PORT,Local_u8Data);
    125a:	80 e0       	ldi	r24, 0x00	; 0
    125c:	69 ad       	ldd	r22, Y+57	; 0x39
    125e:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <DIO_u8SetPortValue>

	/*Send Enable pulse */
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    1262:	80 e0       	ldi	r24, 0x00	; 0
    1264:	62 e0       	ldi	r22, 0x02	; 2
    1266:	41 e0       	ldi	r20, 0x01	; 1
    1268:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <DIO_u8SetPinValue>
    126c:	80 e0       	ldi	r24, 0x00	; 0
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	a0 e0       	ldi	r26, 0x00	; 0
    1272:	b0 e4       	ldi	r27, 0x40	; 64
    1274:	8d ab       	std	Y+53, r24	; 0x35
    1276:	9e ab       	std	Y+54, r25	; 0x36
    1278:	af ab       	std	Y+55, r26	; 0x37
    127a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    127c:	6d a9       	ldd	r22, Y+53	; 0x35
    127e:	7e a9       	ldd	r23, Y+54	; 0x36
    1280:	8f a9       	ldd	r24, Y+55	; 0x37
    1282:	98 ad       	ldd	r25, Y+56	; 0x38
    1284:	20 e0       	ldi	r18, 0x00	; 0
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	4a ef       	ldi	r20, 0xFA	; 250
    128a:	54 e4       	ldi	r21, 0x44	; 68
    128c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1290:	dc 01       	movw	r26, r24
    1292:	cb 01       	movw	r24, r22
    1294:	89 ab       	std	Y+49, r24	; 0x31
    1296:	9a ab       	std	Y+50, r25	; 0x32
    1298:	ab ab       	std	Y+51, r26	; 0x33
    129a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    129c:	69 a9       	ldd	r22, Y+49	; 0x31
    129e:	7a a9       	ldd	r23, Y+50	; 0x32
    12a0:	8b a9       	ldd	r24, Y+51	; 0x33
    12a2:	9c a9       	ldd	r25, Y+52	; 0x34
    12a4:	20 e0       	ldi	r18, 0x00	; 0
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	40 e8       	ldi	r20, 0x80	; 128
    12aa:	5f e3       	ldi	r21, 0x3F	; 63
    12ac:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    12b0:	88 23       	and	r24, r24
    12b2:	2c f4       	brge	.+10     	; 0x12be <CLCD_voidSendData+0x9a>
		__ticks = 1;
    12b4:	81 e0       	ldi	r24, 0x01	; 1
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	98 ab       	std	Y+48, r25	; 0x30
    12ba:	8f a7       	std	Y+47, r24	; 0x2f
    12bc:	3f c0       	rjmp	.+126    	; 0x133c <CLCD_voidSendData+0x118>
	else if (__tmp > 65535)
    12be:	69 a9       	ldd	r22, Y+49	; 0x31
    12c0:	7a a9       	ldd	r23, Y+50	; 0x32
    12c2:	8b a9       	ldd	r24, Y+51	; 0x33
    12c4:	9c a9       	ldd	r25, Y+52	; 0x34
    12c6:	20 e0       	ldi	r18, 0x00	; 0
    12c8:	3f ef       	ldi	r19, 0xFF	; 255
    12ca:	4f e7       	ldi	r20, 0x7F	; 127
    12cc:	57 e4       	ldi	r21, 0x47	; 71
    12ce:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    12d2:	18 16       	cp	r1, r24
    12d4:	4c f5       	brge	.+82     	; 0x1328 <CLCD_voidSendData+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12d6:	6d a9       	ldd	r22, Y+53	; 0x35
    12d8:	7e a9       	ldd	r23, Y+54	; 0x36
    12da:	8f a9       	ldd	r24, Y+55	; 0x37
    12dc:	98 ad       	ldd	r25, Y+56	; 0x38
    12de:	20 e0       	ldi	r18, 0x00	; 0
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	40 e2       	ldi	r20, 0x20	; 32
    12e4:	51 e4       	ldi	r21, 0x41	; 65
    12e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12ea:	dc 01       	movw	r26, r24
    12ec:	cb 01       	movw	r24, r22
    12ee:	bc 01       	movw	r22, r24
    12f0:	cd 01       	movw	r24, r26
    12f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12f6:	dc 01       	movw	r26, r24
    12f8:	cb 01       	movw	r24, r22
    12fa:	98 ab       	std	Y+48, r25	; 0x30
    12fc:	8f a7       	std	Y+47, r24	; 0x2f
    12fe:	0f c0       	rjmp	.+30     	; 0x131e <CLCD_voidSendData+0xfa>
    1300:	88 ec       	ldi	r24, 0xC8	; 200
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	9e a7       	std	Y+46, r25	; 0x2e
    1306:	8d a7       	std	Y+45, r24	; 0x2d
    1308:	8d a5       	ldd	r24, Y+45	; 0x2d
    130a:	9e a5       	ldd	r25, Y+46	; 0x2e
    130c:	01 97       	sbiw	r24, 0x01	; 1
    130e:	f1 f7       	brne	.-4      	; 0x130c <CLCD_voidSendData+0xe8>
    1310:	9e a7       	std	Y+46, r25	; 0x2e
    1312:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1314:	8f a5       	ldd	r24, Y+47	; 0x2f
    1316:	98 a9       	ldd	r25, Y+48	; 0x30
    1318:	01 97       	sbiw	r24, 0x01	; 1
    131a:	98 ab       	std	Y+48, r25	; 0x30
    131c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    131e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1320:	98 a9       	ldd	r25, Y+48	; 0x30
    1322:	00 97       	sbiw	r24, 0x00	; 0
    1324:	69 f7       	brne	.-38     	; 0x1300 <CLCD_voidSendData+0xdc>
    1326:	14 c0       	rjmp	.+40     	; 0x1350 <CLCD_voidSendData+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1328:	69 a9       	ldd	r22, Y+49	; 0x31
    132a:	7a a9       	ldd	r23, Y+50	; 0x32
    132c:	8b a9       	ldd	r24, Y+51	; 0x33
    132e:	9c a9       	ldd	r25, Y+52	; 0x34
    1330:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1334:	dc 01       	movw	r26, r24
    1336:	cb 01       	movw	r24, r22
    1338:	98 ab       	std	Y+48, r25	; 0x30
    133a:	8f a7       	std	Y+47, r24	; 0x2f
    133c:	8f a5       	ldd	r24, Y+47	; 0x2f
    133e:	98 a9       	ldd	r25, Y+48	; 0x30
    1340:	9c a7       	std	Y+44, r25	; 0x2c
    1342:	8b a7       	std	Y+43, r24	; 0x2b
    1344:	8b a5       	ldd	r24, Y+43	; 0x2b
    1346:	9c a5       	ldd	r25, Y+44	; 0x2c
    1348:	01 97       	sbiw	r24, 0x01	; 1
    134a:	f1 f7       	brne	.-4      	; 0x1348 <CLCD_voidSendData+0x124>
    134c:	9c a7       	std	Y+44, r25	; 0x2c
    134e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    1350:	80 e0       	ldi	r24, 0x00	; 0
    1352:	62 e0       	ldi	r22, 0x02	; 2
    1354:	40 e0       	ldi	r20, 0x00	; 0
    1356:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <DIO_u8SetPinValue>
    135a:	80 e0       	ldi	r24, 0x00	; 0
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	a0 ea       	ldi	r26, 0xA0	; 160
    1360:	b0 e4       	ldi	r27, 0x40	; 64
    1362:	8f a3       	std	Y+39, r24	; 0x27
    1364:	98 a7       	std	Y+40, r25	; 0x28
    1366:	a9 a7       	std	Y+41, r26	; 0x29
    1368:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    136a:	6f a1       	ldd	r22, Y+39	; 0x27
    136c:	78 a5       	ldd	r23, Y+40	; 0x28
    136e:	89 a5       	ldd	r24, Y+41	; 0x29
    1370:	9a a5       	ldd	r25, Y+42	; 0x2a
    1372:	20 e0       	ldi	r18, 0x00	; 0
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	4a ef       	ldi	r20, 0xFA	; 250
    1378:	54 e4       	ldi	r21, 0x44	; 68
    137a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    137e:	dc 01       	movw	r26, r24
    1380:	cb 01       	movw	r24, r22
    1382:	8b a3       	std	Y+35, r24	; 0x23
    1384:	9c a3       	std	Y+36, r25	; 0x24
    1386:	ad a3       	std	Y+37, r26	; 0x25
    1388:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    138a:	6b a1       	ldd	r22, Y+35	; 0x23
    138c:	7c a1       	ldd	r23, Y+36	; 0x24
    138e:	8d a1       	ldd	r24, Y+37	; 0x25
    1390:	9e a1       	ldd	r25, Y+38	; 0x26
    1392:	20 e0       	ldi	r18, 0x00	; 0
    1394:	30 e0       	ldi	r19, 0x00	; 0
    1396:	40 e8       	ldi	r20, 0x80	; 128
    1398:	5f e3       	ldi	r21, 0x3F	; 63
    139a:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    139e:	88 23       	and	r24, r24
    13a0:	2c f4       	brge	.+10     	; 0x13ac <CLCD_voidSendData+0x188>
		__ticks = 1;
    13a2:	81 e0       	ldi	r24, 0x01	; 1
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	9a a3       	std	Y+34, r25	; 0x22
    13a8:	89 a3       	std	Y+33, r24	; 0x21
    13aa:	3f c0       	rjmp	.+126    	; 0x142a <CLCD_voidSendData+0x206>
	else if (__tmp > 65535)
    13ac:	6b a1       	ldd	r22, Y+35	; 0x23
    13ae:	7c a1       	ldd	r23, Y+36	; 0x24
    13b0:	8d a1       	ldd	r24, Y+37	; 0x25
    13b2:	9e a1       	ldd	r25, Y+38	; 0x26
    13b4:	20 e0       	ldi	r18, 0x00	; 0
    13b6:	3f ef       	ldi	r19, 0xFF	; 255
    13b8:	4f e7       	ldi	r20, 0x7F	; 127
    13ba:	57 e4       	ldi	r21, 0x47	; 71
    13bc:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    13c0:	18 16       	cp	r1, r24
    13c2:	4c f5       	brge	.+82     	; 0x1416 <CLCD_voidSendData+0x1f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13c4:	6f a1       	ldd	r22, Y+39	; 0x27
    13c6:	78 a5       	ldd	r23, Y+40	; 0x28
    13c8:	89 a5       	ldd	r24, Y+41	; 0x29
    13ca:	9a a5       	ldd	r25, Y+42	; 0x2a
    13cc:	20 e0       	ldi	r18, 0x00	; 0
    13ce:	30 e0       	ldi	r19, 0x00	; 0
    13d0:	40 e2       	ldi	r20, 0x20	; 32
    13d2:	51 e4       	ldi	r21, 0x41	; 65
    13d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13d8:	dc 01       	movw	r26, r24
    13da:	cb 01       	movw	r24, r22
    13dc:	bc 01       	movw	r22, r24
    13de:	cd 01       	movw	r24, r26
    13e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13e4:	dc 01       	movw	r26, r24
    13e6:	cb 01       	movw	r24, r22
    13e8:	9a a3       	std	Y+34, r25	; 0x22
    13ea:	89 a3       	std	Y+33, r24	; 0x21
    13ec:	0f c0       	rjmp	.+30     	; 0x140c <CLCD_voidSendData+0x1e8>
    13ee:	88 ec       	ldi	r24, 0xC8	; 200
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	98 a3       	std	Y+32, r25	; 0x20
    13f4:	8f 8f       	std	Y+31, r24	; 0x1f
    13f6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    13f8:	98 a1       	ldd	r25, Y+32	; 0x20
    13fa:	01 97       	sbiw	r24, 0x01	; 1
    13fc:	f1 f7       	brne	.-4      	; 0x13fa <CLCD_voidSendData+0x1d6>
    13fe:	98 a3       	std	Y+32, r25	; 0x20
    1400:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1402:	89 a1       	ldd	r24, Y+33	; 0x21
    1404:	9a a1       	ldd	r25, Y+34	; 0x22
    1406:	01 97       	sbiw	r24, 0x01	; 1
    1408:	9a a3       	std	Y+34, r25	; 0x22
    140a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    140c:	89 a1       	ldd	r24, Y+33	; 0x21
    140e:	9a a1       	ldd	r25, Y+34	; 0x22
    1410:	00 97       	sbiw	r24, 0x00	; 0
    1412:	69 f7       	brne	.-38     	; 0x13ee <CLCD_voidSendData+0x1ca>
    1414:	14 c0       	rjmp	.+40     	; 0x143e <CLCD_voidSendData+0x21a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1416:	6b a1       	ldd	r22, Y+35	; 0x23
    1418:	7c a1       	ldd	r23, Y+36	; 0x24
    141a:	8d a1       	ldd	r24, Y+37	; 0x25
    141c:	9e a1       	ldd	r25, Y+38	; 0x26
    141e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1422:	dc 01       	movw	r26, r24
    1424:	cb 01       	movw	r24, r22
    1426:	9a a3       	std	Y+34, r25	; 0x22
    1428:	89 a3       	std	Y+33, r24	; 0x21
    142a:	89 a1       	ldd	r24, Y+33	; 0x21
    142c:	9a a1       	ldd	r25, Y+34	; 0x22
    142e:	9e 8f       	std	Y+30, r25	; 0x1e
    1430:	8d 8f       	std	Y+29, r24	; 0x1d
    1432:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1434:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1436:	01 97       	sbiw	r24, 0x01	; 1
    1438:	f1 f7       	brne	.-4      	; 0x1436 <CLCD_voidSendData+0x212>
    143a:	9e 8f       	std	Y+30, r25	; 0x1e
    143c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);

	Local_u8Data = ((Copy_u8Data <<3) |DIO_u8AndWithPort(CLCD_DATA_PORT, CLCD_DATA_PORT_MASK));
    143e:	8a ad       	ldd	r24, Y+58	; 0x3a
    1440:	88 2f       	mov	r24, r24
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	88 0f       	add	r24, r24
    1446:	99 1f       	adc	r25, r25
    1448:	88 0f       	add	r24, r24
    144a:	99 1f       	adc	r25, r25
    144c:	88 0f       	add	r24, r24
    144e:	99 1f       	adc	r25, r25
    1450:	18 2f       	mov	r17, r24
    1452:	80 e0       	ldi	r24, 0x00	; 0
    1454:	67 e8       	ldi	r22, 0x87	; 135
    1456:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <DIO_u8AndWithPort>
    145a:	81 2b       	or	r24, r17
    145c:	89 af       	std	Y+57, r24	; 0x39

	DIO_u8SetPortValue(CLCD_DATA_PORT,Local_u8Data);
    145e:	80 e0       	ldi	r24, 0x00	; 0
    1460:	69 ad       	ldd	r22, Y+57	; 0x39
    1462:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <DIO_u8SetPortValue>

	/*Send Enable pulse */
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    1466:	80 e0       	ldi	r24, 0x00	; 0
    1468:	62 e0       	ldi	r22, 0x02	; 2
    146a:	41 e0       	ldi	r20, 0x01	; 1
    146c:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <DIO_u8SetPinValue>
    1470:	80 e0       	ldi	r24, 0x00	; 0
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	a0 e0       	ldi	r26, 0x00	; 0
    1476:	b0 e4       	ldi	r27, 0x40	; 64
    1478:	89 8f       	std	Y+25, r24	; 0x19
    147a:	9a 8f       	std	Y+26, r25	; 0x1a
    147c:	ab 8f       	std	Y+27, r26	; 0x1b
    147e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1480:	69 8d       	ldd	r22, Y+25	; 0x19
    1482:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1484:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1486:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1488:	20 e0       	ldi	r18, 0x00	; 0
    148a:	30 e0       	ldi	r19, 0x00	; 0
    148c:	4a ef       	ldi	r20, 0xFA	; 250
    148e:	54 e4       	ldi	r21, 0x44	; 68
    1490:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1494:	dc 01       	movw	r26, r24
    1496:	cb 01       	movw	r24, r22
    1498:	8d 8b       	std	Y+21, r24	; 0x15
    149a:	9e 8b       	std	Y+22, r25	; 0x16
    149c:	af 8b       	std	Y+23, r26	; 0x17
    149e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    14a0:	6d 89       	ldd	r22, Y+21	; 0x15
    14a2:	7e 89       	ldd	r23, Y+22	; 0x16
    14a4:	8f 89       	ldd	r24, Y+23	; 0x17
    14a6:	98 8d       	ldd	r25, Y+24	; 0x18
    14a8:	20 e0       	ldi	r18, 0x00	; 0
    14aa:	30 e0       	ldi	r19, 0x00	; 0
    14ac:	40 e8       	ldi	r20, 0x80	; 128
    14ae:	5f e3       	ldi	r21, 0x3F	; 63
    14b0:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    14b4:	88 23       	and	r24, r24
    14b6:	2c f4       	brge	.+10     	; 0x14c2 <CLCD_voidSendData+0x29e>
		__ticks = 1;
    14b8:	81 e0       	ldi	r24, 0x01	; 1
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	9c 8b       	std	Y+20, r25	; 0x14
    14be:	8b 8b       	std	Y+19, r24	; 0x13
    14c0:	3f c0       	rjmp	.+126    	; 0x1540 <CLCD_voidSendData+0x31c>
	else if (__tmp > 65535)
    14c2:	6d 89       	ldd	r22, Y+21	; 0x15
    14c4:	7e 89       	ldd	r23, Y+22	; 0x16
    14c6:	8f 89       	ldd	r24, Y+23	; 0x17
    14c8:	98 8d       	ldd	r25, Y+24	; 0x18
    14ca:	20 e0       	ldi	r18, 0x00	; 0
    14cc:	3f ef       	ldi	r19, 0xFF	; 255
    14ce:	4f e7       	ldi	r20, 0x7F	; 127
    14d0:	57 e4       	ldi	r21, 0x47	; 71
    14d2:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    14d6:	18 16       	cp	r1, r24
    14d8:	4c f5       	brge	.+82     	; 0x152c <CLCD_voidSendData+0x308>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14da:	69 8d       	ldd	r22, Y+25	; 0x19
    14dc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14de:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14e0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14e2:	20 e0       	ldi	r18, 0x00	; 0
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	40 e2       	ldi	r20, 0x20	; 32
    14e8:	51 e4       	ldi	r21, 0x41	; 65
    14ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14ee:	dc 01       	movw	r26, r24
    14f0:	cb 01       	movw	r24, r22
    14f2:	bc 01       	movw	r22, r24
    14f4:	cd 01       	movw	r24, r26
    14f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14fa:	dc 01       	movw	r26, r24
    14fc:	cb 01       	movw	r24, r22
    14fe:	9c 8b       	std	Y+20, r25	; 0x14
    1500:	8b 8b       	std	Y+19, r24	; 0x13
    1502:	0f c0       	rjmp	.+30     	; 0x1522 <CLCD_voidSendData+0x2fe>
    1504:	88 ec       	ldi	r24, 0xC8	; 200
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	9a 8b       	std	Y+18, r25	; 0x12
    150a:	89 8b       	std	Y+17, r24	; 0x11
    150c:	89 89       	ldd	r24, Y+17	; 0x11
    150e:	9a 89       	ldd	r25, Y+18	; 0x12
    1510:	01 97       	sbiw	r24, 0x01	; 1
    1512:	f1 f7       	brne	.-4      	; 0x1510 <CLCD_voidSendData+0x2ec>
    1514:	9a 8b       	std	Y+18, r25	; 0x12
    1516:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1518:	8b 89       	ldd	r24, Y+19	; 0x13
    151a:	9c 89       	ldd	r25, Y+20	; 0x14
    151c:	01 97       	sbiw	r24, 0x01	; 1
    151e:	9c 8b       	std	Y+20, r25	; 0x14
    1520:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1522:	8b 89       	ldd	r24, Y+19	; 0x13
    1524:	9c 89       	ldd	r25, Y+20	; 0x14
    1526:	00 97       	sbiw	r24, 0x00	; 0
    1528:	69 f7       	brne	.-38     	; 0x1504 <CLCD_voidSendData+0x2e0>
    152a:	14 c0       	rjmp	.+40     	; 0x1554 <CLCD_voidSendData+0x330>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    152c:	6d 89       	ldd	r22, Y+21	; 0x15
    152e:	7e 89       	ldd	r23, Y+22	; 0x16
    1530:	8f 89       	ldd	r24, Y+23	; 0x17
    1532:	98 8d       	ldd	r25, Y+24	; 0x18
    1534:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1538:	dc 01       	movw	r26, r24
    153a:	cb 01       	movw	r24, r22
    153c:	9c 8b       	std	Y+20, r25	; 0x14
    153e:	8b 8b       	std	Y+19, r24	; 0x13
    1540:	8b 89       	ldd	r24, Y+19	; 0x13
    1542:	9c 89       	ldd	r25, Y+20	; 0x14
    1544:	98 8b       	std	Y+16, r25	; 0x10
    1546:	8f 87       	std	Y+15, r24	; 0x0f
    1548:	8f 85       	ldd	r24, Y+15	; 0x0f
    154a:	98 89       	ldd	r25, Y+16	; 0x10
    154c:	01 97       	sbiw	r24, 0x01	; 1
    154e:	f1 f7       	brne	.-4      	; 0x154c <CLCD_voidSendData+0x328>
    1550:	98 8b       	std	Y+16, r25	; 0x10
    1552:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    1554:	80 e0       	ldi	r24, 0x00	; 0
    1556:	62 e0       	ldi	r22, 0x02	; 2
    1558:	40 e0       	ldi	r20, 0x00	; 0
    155a:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <DIO_u8SetPinValue>
    155e:	80 e0       	ldi	r24, 0x00	; 0
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	a0 ea       	ldi	r26, 0xA0	; 160
    1564:	b0 e4       	ldi	r27, 0x40	; 64
    1566:	8b 87       	std	Y+11, r24	; 0x0b
    1568:	9c 87       	std	Y+12, r25	; 0x0c
    156a:	ad 87       	std	Y+13, r26	; 0x0d
    156c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    156e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1570:	7c 85       	ldd	r23, Y+12	; 0x0c
    1572:	8d 85       	ldd	r24, Y+13	; 0x0d
    1574:	9e 85       	ldd	r25, Y+14	; 0x0e
    1576:	20 e0       	ldi	r18, 0x00	; 0
    1578:	30 e0       	ldi	r19, 0x00	; 0
    157a:	4a ef       	ldi	r20, 0xFA	; 250
    157c:	54 e4       	ldi	r21, 0x44	; 68
    157e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1582:	dc 01       	movw	r26, r24
    1584:	cb 01       	movw	r24, r22
    1586:	8f 83       	std	Y+7, r24	; 0x07
    1588:	98 87       	std	Y+8, r25	; 0x08
    158a:	a9 87       	std	Y+9, r26	; 0x09
    158c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    158e:	6f 81       	ldd	r22, Y+7	; 0x07
    1590:	78 85       	ldd	r23, Y+8	; 0x08
    1592:	89 85       	ldd	r24, Y+9	; 0x09
    1594:	9a 85       	ldd	r25, Y+10	; 0x0a
    1596:	20 e0       	ldi	r18, 0x00	; 0
    1598:	30 e0       	ldi	r19, 0x00	; 0
    159a:	40 e8       	ldi	r20, 0x80	; 128
    159c:	5f e3       	ldi	r21, 0x3F	; 63
    159e:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    15a2:	88 23       	and	r24, r24
    15a4:	2c f4       	brge	.+10     	; 0x15b0 <CLCD_voidSendData+0x38c>
		__ticks = 1;
    15a6:	81 e0       	ldi	r24, 0x01	; 1
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	9e 83       	std	Y+6, r25	; 0x06
    15ac:	8d 83       	std	Y+5, r24	; 0x05
    15ae:	3f c0       	rjmp	.+126    	; 0x162e <CLCD_voidSendData+0x40a>
	else if (__tmp > 65535)
    15b0:	6f 81       	ldd	r22, Y+7	; 0x07
    15b2:	78 85       	ldd	r23, Y+8	; 0x08
    15b4:	89 85       	ldd	r24, Y+9	; 0x09
    15b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    15b8:	20 e0       	ldi	r18, 0x00	; 0
    15ba:	3f ef       	ldi	r19, 0xFF	; 255
    15bc:	4f e7       	ldi	r20, 0x7F	; 127
    15be:	57 e4       	ldi	r21, 0x47	; 71
    15c0:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    15c4:	18 16       	cp	r1, r24
    15c6:	4c f5       	brge	.+82     	; 0x161a <CLCD_voidSendData+0x3f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    15ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    15cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    15ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    15d0:	20 e0       	ldi	r18, 0x00	; 0
    15d2:	30 e0       	ldi	r19, 0x00	; 0
    15d4:	40 e2       	ldi	r20, 0x20	; 32
    15d6:	51 e4       	ldi	r21, 0x41	; 65
    15d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15dc:	dc 01       	movw	r26, r24
    15de:	cb 01       	movw	r24, r22
    15e0:	bc 01       	movw	r22, r24
    15e2:	cd 01       	movw	r24, r26
    15e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15e8:	dc 01       	movw	r26, r24
    15ea:	cb 01       	movw	r24, r22
    15ec:	9e 83       	std	Y+6, r25	; 0x06
    15ee:	8d 83       	std	Y+5, r24	; 0x05
    15f0:	0f c0       	rjmp	.+30     	; 0x1610 <CLCD_voidSendData+0x3ec>
    15f2:	88 ec       	ldi	r24, 0xC8	; 200
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	9c 83       	std	Y+4, r25	; 0x04
    15f8:	8b 83       	std	Y+3, r24	; 0x03
    15fa:	8b 81       	ldd	r24, Y+3	; 0x03
    15fc:	9c 81       	ldd	r25, Y+4	; 0x04
    15fe:	01 97       	sbiw	r24, 0x01	; 1
    1600:	f1 f7       	brne	.-4      	; 0x15fe <CLCD_voidSendData+0x3da>
    1602:	9c 83       	std	Y+4, r25	; 0x04
    1604:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1606:	8d 81       	ldd	r24, Y+5	; 0x05
    1608:	9e 81       	ldd	r25, Y+6	; 0x06
    160a:	01 97       	sbiw	r24, 0x01	; 1
    160c:	9e 83       	std	Y+6, r25	; 0x06
    160e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1610:	8d 81       	ldd	r24, Y+5	; 0x05
    1612:	9e 81       	ldd	r25, Y+6	; 0x06
    1614:	00 97       	sbiw	r24, 0x00	; 0
    1616:	69 f7       	brne	.-38     	; 0x15f2 <CLCD_voidSendData+0x3ce>
    1618:	14 c0       	rjmp	.+40     	; 0x1642 <CLCD_voidSendData+0x41e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    161a:	6f 81       	ldd	r22, Y+7	; 0x07
    161c:	78 85       	ldd	r23, Y+8	; 0x08
    161e:	89 85       	ldd	r24, Y+9	; 0x09
    1620:	9a 85       	ldd	r25, Y+10	; 0x0a
    1622:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1626:	dc 01       	movw	r26, r24
    1628:	cb 01       	movw	r24, r22
    162a:	9e 83       	std	Y+6, r25	; 0x06
    162c:	8d 83       	std	Y+5, r24	; 0x05
    162e:	8d 81       	ldd	r24, Y+5	; 0x05
    1630:	9e 81       	ldd	r25, Y+6	; 0x06
    1632:	9a 83       	std	Y+2, r25	; 0x02
    1634:	89 83       	std	Y+1, r24	; 0x01
    1636:	89 81       	ldd	r24, Y+1	; 0x01
    1638:	9a 81       	ldd	r25, Y+2	; 0x02
    163a:	01 97       	sbiw	r24, 0x01	; 1
    163c:	f1 f7       	brne	.-4      	; 0x163a <CLCD_voidSendData+0x416>
    163e:	9a 83       	std	Y+2, r25	; 0x02
    1640:	89 83       	std	Y+1, r24	; 0x01



#endif

}
    1642:	ea 96       	adiw	r28, 0x3a	; 58
    1644:	0f b6       	in	r0, 0x3f	; 63
    1646:	f8 94       	cli
    1648:	de bf       	out	0x3e, r29	; 62
    164a:	0f be       	out	0x3f, r0	; 63
    164c:	cd bf       	out	0x3d, r28	; 61
    164e:	cf 91       	pop	r28
    1650:	df 91       	pop	r29
    1652:	1f 91       	pop	r17
    1654:	08 95       	ret

00001656 <CLCD_voidInit>:

void CLCD_voidInit(void)
{
    1656:	df 93       	push	r29
    1658:	cf 93       	push	r28
    165a:	cd b7       	in	r28, 0x3d	; 61
    165c:	de b7       	in	r29, 0x3e	; 62
    165e:	2e 97       	sbiw	r28, 0x0e	; 14
    1660:	0f b6       	in	r0, 0x3f	; 63
    1662:	f8 94       	cli
    1664:	de bf       	out	0x3e, r29	; 62
    1666:	0f be       	out	0x3f, r0	; 63
    1668:	cd bf       	out	0x3d, r28	; 61
    166a:	80 e0       	ldi	r24, 0x00	; 0
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	a0 e2       	ldi	r26, 0x20	; 32
    1670:	b2 e4       	ldi	r27, 0x42	; 66
    1672:	8b 87       	std	Y+11, r24	; 0x0b
    1674:	9c 87       	std	Y+12, r25	; 0x0c
    1676:	ad 87       	std	Y+13, r26	; 0x0d
    1678:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    167a:	6b 85       	ldd	r22, Y+11	; 0x0b
    167c:	7c 85       	ldd	r23, Y+12	; 0x0c
    167e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1680:	9e 85       	ldd	r25, Y+14	; 0x0e
    1682:	20 e0       	ldi	r18, 0x00	; 0
    1684:	30 e0       	ldi	r19, 0x00	; 0
    1686:	4a ef       	ldi	r20, 0xFA	; 250
    1688:	54 e4       	ldi	r21, 0x44	; 68
    168a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    168e:	dc 01       	movw	r26, r24
    1690:	cb 01       	movw	r24, r22
    1692:	8f 83       	std	Y+7, r24	; 0x07
    1694:	98 87       	std	Y+8, r25	; 0x08
    1696:	a9 87       	std	Y+9, r26	; 0x09
    1698:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    169a:	6f 81       	ldd	r22, Y+7	; 0x07
    169c:	78 85       	ldd	r23, Y+8	; 0x08
    169e:	89 85       	ldd	r24, Y+9	; 0x09
    16a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    16a2:	20 e0       	ldi	r18, 0x00	; 0
    16a4:	30 e0       	ldi	r19, 0x00	; 0
    16a6:	40 e8       	ldi	r20, 0x80	; 128
    16a8:	5f e3       	ldi	r21, 0x3F	; 63
    16aa:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    16ae:	88 23       	and	r24, r24
    16b0:	2c f4       	brge	.+10     	; 0x16bc <CLCD_voidInit+0x66>
		__ticks = 1;
    16b2:	81 e0       	ldi	r24, 0x01	; 1
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	9e 83       	std	Y+6, r25	; 0x06
    16b8:	8d 83       	std	Y+5, r24	; 0x05
    16ba:	3f c0       	rjmp	.+126    	; 0x173a <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
    16bc:	6f 81       	ldd	r22, Y+7	; 0x07
    16be:	78 85       	ldd	r23, Y+8	; 0x08
    16c0:	89 85       	ldd	r24, Y+9	; 0x09
    16c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    16c4:	20 e0       	ldi	r18, 0x00	; 0
    16c6:	3f ef       	ldi	r19, 0xFF	; 255
    16c8:	4f e7       	ldi	r20, 0x7F	; 127
    16ca:	57 e4       	ldi	r21, 0x47	; 71
    16cc:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    16d0:	18 16       	cp	r1, r24
    16d2:	4c f5       	brge	.+82     	; 0x1726 <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    16d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    16d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    16da:	9e 85       	ldd	r25, Y+14	; 0x0e
    16dc:	20 e0       	ldi	r18, 0x00	; 0
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	40 e2       	ldi	r20, 0x20	; 32
    16e2:	51 e4       	ldi	r21, 0x41	; 65
    16e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16e8:	dc 01       	movw	r26, r24
    16ea:	cb 01       	movw	r24, r22
    16ec:	bc 01       	movw	r22, r24
    16ee:	cd 01       	movw	r24, r26
    16f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16f4:	dc 01       	movw	r26, r24
    16f6:	cb 01       	movw	r24, r22
    16f8:	9e 83       	std	Y+6, r25	; 0x06
    16fa:	8d 83       	std	Y+5, r24	; 0x05
    16fc:	0f c0       	rjmp	.+30     	; 0x171c <CLCD_voidInit+0xc6>
    16fe:	88 ec       	ldi	r24, 0xC8	; 200
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	9c 83       	std	Y+4, r25	; 0x04
    1704:	8b 83       	std	Y+3, r24	; 0x03
    1706:	8b 81       	ldd	r24, Y+3	; 0x03
    1708:	9c 81       	ldd	r25, Y+4	; 0x04
    170a:	01 97       	sbiw	r24, 0x01	; 1
    170c:	f1 f7       	brne	.-4      	; 0x170a <CLCD_voidInit+0xb4>
    170e:	9c 83       	std	Y+4, r25	; 0x04
    1710:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1712:	8d 81       	ldd	r24, Y+5	; 0x05
    1714:	9e 81       	ldd	r25, Y+6	; 0x06
    1716:	01 97       	sbiw	r24, 0x01	; 1
    1718:	9e 83       	std	Y+6, r25	; 0x06
    171a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    171c:	8d 81       	ldd	r24, Y+5	; 0x05
    171e:	9e 81       	ldd	r25, Y+6	; 0x06
    1720:	00 97       	sbiw	r24, 0x00	; 0
    1722:	69 f7       	brne	.-38     	; 0x16fe <CLCD_voidInit+0xa8>
    1724:	14 c0       	rjmp	.+40     	; 0x174e <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1726:	6f 81       	ldd	r22, Y+7	; 0x07
    1728:	78 85       	ldd	r23, Y+8	; 0x08
    172a:	89 85       	ldd	r24, Y+9	; 0x09
    172c:	9a 85       	ldd	r25, Y+10	; 0x0a
    172e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1732:	dc 01       	movw	r26, r24
    1734:	cb 01       	movw	r24, r22
    1736:	9e 83       	std	Y+6, r25	; 0x06
    1738:	8d 83       	std	Y+5, r24	; 0x05
    173a:	8d 81       	ldd	r24, Y+5	; 0x05
    173c:	9e 81       	ldd	r25, Y+6	; 0x06
    173e:	9a 83       	std	Y+2, r25	; 0x02
    1740:	89 83       	std	Y+1, r24	; 0x01
    1742:	89 81       	ldd	r24, Y+1	; 0x01
    1744:	9a 81       	ldd	r25, Y+2	; 0x02
    1746:	01 97       	sbiw	r24, 0x01	; 1
    1748:	f1 f7       	brne	.-4      	; 0x1746 <CLCD_voidInit+0xf0>
    174a:	9a 83       	std	Y+2, r25	; 0x02
    174c:	89 83       	std	Y+1, r24	; 0x01
	C_LCD_voidSendCommand(0x01); /* 1 or 0x01 or 0b00000001*/

#elif   MODE_SELECT ==_4_BIT_MODE

	/* Function set command : 2 lines , 5*8 font size */
	C_LCD_voidSendCommand(0x33);
    174e:	83 e3       	ldi	r24, 0x33	; 51
    1750:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <C_LCD_voidSendCommand>
	C_LCD_voidSendCommand(0x32);
    1754:	82 e3       	ldi	r24, 0x32	; 50
    1756:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <C_LCD_voidSendCommand>
	C_LCD_voidSendCommand(0x28);   /* 0bNFXXXXXX  --> N: no of lines F: font size*/
    175a:	88 e2       	ldi	r24, 0x28	; 40
    175c:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <C_LCD_voidSendCommand>


	/*Display on off control : disable enable , disable cursor , no blink cursor*/
	C_LCD_voidSendCommand(0x0C);
    1760:	8c e0       	ldi	r24, 0x0C	; 12
    1762:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <C_LCD_voidSendCommand>
	C_LCD_voidSendCommand(0x02);
    1766:	82 e0       	ldi	r24, 0x02	; 2
    1768:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <C_LCD_voidSendCommand>

	C_LCD_voidSendCommand(0x06);
    176c:	86 e0       	ldi	r24, 0x06	; 6
    176e:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <C_LCD_voidSendCommand>

	/* Clear display */
	C_LCD_voidSendCommand(0x01);
    1772:	81 e0       	ldi	r24, 0x01	; 1
    1774:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <C_LCD_voidSendCommand>


#endif


}
    1778:	2e 96       	adiw	r28, 0x0e	; 14
    177a:	0f b6       	in	r0, 0x3f	; 63
    177c:	f8 94       	cli
    177e:	de bf       	out	0x3e, r29	; 62
    1780:	0f be       	out	0x3f, r0	; 63
    1782:	cd bf       	out	0x3d, r28	; 61
    1784:	cf 91       	pop	r28
    1786:	df 91       	pop	r29
    1788:	08 95       	ret

0000178a <CLCD_voidSendString>:

void CLCD_voidSendString(const char* Copy_pcString )
{
    178a:	df 93       	push	r29
    178c:	cf 93       	push	r28
    178e:	00 d0       	rcall	.+0      	; 0x1790 <CLCD_voidSendString+0x6>
    1790:	0f 92       	push	r0
    1792:	cd b7       	in	r28, 0x3d	; 61
    1794:	de b7       	in	r29, 0x3e	; 62
    1796:	9b 83       	std	Y+3, r25	; 0x03
    1798:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Counter = 0;
    179a:	19 82       	std	Y+1, r1	; 0x01
    179c:	0e c0       	rjmp	.+28     	; 0x17ba <CLCD_voidSendString+0x30>
	while (Copy_pcString[Local_u8Counter] != NULL)
	{
		CLCD_voidSendData(Copy_pcString[Local_u8Counter]);
    179e:	89 81       	ldd	r24, Y+1	; 0x01
    17a0:	28 2f       	mov	r18, r24
    17a2:	30 e0       	ldi	r19, 0x00	; 0
    17a4:	8a 81       	ldd	r24, Y+2	; 0x02
    17a6:	9b 81       	ldd	r25, Y+3	; 0x03
    17a8:	fc 01       	movw	r30, r24
    17aa:	e2 0f       	add	r30, r18
    17ac:	f3 1f       	adc	r31, r19
    17ae:	80 81       	ld	r24, Z
    17b0:	0e 94 12 09 	call	0x1224	; 0x1224 <CLCD_voidSendData>
		Local_u8Counter++;
    17b4:	89 81       	ldd	r24, Y+1	; 0x01
    17b6:	8f 5f       	subi	r24, 0xFF	; 255
    17b8:	89 83       	std	Y+1, r24	; 0x01
}

void CLCD_voidSendString(const char* Copy_pcString )
{
	u8 Local_u8Counter = 0;
	while (Copy_pcString[Local_u8Counter] != NULL)
    17ba:	89 81       	ldd	r24, Y+1	; 0x01
    17bc:	28 2f       	mov	r18, r24
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	8a 81       	ldd	r24, Y+2	; 0x02
    17c2:	9b 81       	ldd	r25, Y+3	; 0x03
    17c4:	fc 01       	movw	r30, r24
    17c6:	e2 0f       	add	r30, r18
    17c8:	f3 1f       	adc	r31, r19
    17ca:	80 81       	ld	r24, Z
    17cc:	88 23       	and	r24, r24
    17ce:	39 f7       	brne	.-50     	; 0x179e <CLCD_voidSendString+0x14>
	{
		CLCD_voidSendData(Copy_pcString[Local_u8Counter]);
		Local_u8Counter++;
	}
}
    17d0:	0f 90       	pop	r0
    17d2:	0f 90       	pop	r0
    17d4:	0f 90       	pop	r0
    17d6:	cf 91       	pop	r28
    17d8:	df 91       	pop	r29
    17da:	08 95       	ret

000017dc <CLCD_voidGoToXY>:

void CLCD_voidGoToXY(u8 Copy_u8Xpos, u8 Copy_u8Ypos)
{
    17dc:	df 93       	push	r29
    17de:	cf 93       	push	r28
    17e0:	00 d0       	rcall	.+0      	; 0x17e2 <CLCD_voidGoToXY+0x6>
    17e2:	0f 92       	push	r0
    17e4:	cd b7       	in	r28, 0x3d	; 61
    17e6:	de b7       	in	r29, 0x3e	; 62
    17e8:	8a 83       	std	Y+2, r24	; 0x02
    17ea:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Adress=0;
    17ec:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8Xpos == 0)
    17ee:	8a 81       	ldd	r24, Y+2	; 0x02
    17f0:	88 23       	and	r24, r24
    17f2:	19 f4       	brne	.+6      	; 0x17fa <CLCD_voidGoToXY+0x1e>
	{
		Local_u8Adress = Copy_u8Ypos;
    17f4:	8b 81       	ldd	r24, Y+3	; 0x03
    17f6:	89 83       	std	Y+1, r24	; 0x01
    17f8:	06 c0       	rjmp	.+12     	; 0x1806 <CLCD_voidGoToXY+0x2a>
	}
	else if (Copy_u8Xpos == 1)
    17fa:	8a 81       	ldd	r24, Y+2	; 0x02
    17fc:	81 30       	cpi	r24, 0x01	; 1
    17fe:	19 f4       	brne	.+6      	; 0x1806 <CLCD_voidGoToXY+0x2a>
	{
		Local_u8Adress = Copy_u8Ypos+0x40;
    1800:	8b 81       	ldd	r24, Y+3	; 0x03
    1802:	80 5c       	subi	r24, 0xC0	; 192
    1804:	89 83       	std	Y+1, r24	; 0x01
	}

	C_LCD_voidSendCommand(Local_u8Adress+128);
    1806:	89 81       	ldd	r24, Y+1	; 0x01
    1808:	80 58       	subi	r24, 0x80	; 128
    180a:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <C_LCD_voidSendCommand>



}
    180e:	0f 90       	pop	r0
    1810:	0f 90       	pop	r0
    1812:	0f 90       	pop	r0
    1814:	cf 91       	pop	r28
    1816:	df 91       	pop	r29
    1818:	08 95       	ret

0000181a <CLCD_voidWriteSpecialCharacter>:

void CLCD_voidWriteSpecialCharacter(u8* Copy_pu8Pattern, u8 Copy_u8PatternNumber, u8 Copy_u8XPos, u8 Copy_u8YPos)
{
    181a:	df 93       	push	r29
    181c:	cf 93       	push	r28
    181e:	cd b7       	in	r28, 0x3d	; 61
    1820:	de b7       	in	r29, 0x3e	; 62
    1822:	27 97       	sbiw	r28, 0x07	; 7
    1824:	0f b6       	in	r0, 0x3f	; 63
    1826:	f8 94       	cli
    1828:	de bf       	out	0x3e, r29	; 62
    182a:	0f be       	out	0x3f, r0	; 63
    182c:	cd bf       	out	0x3d, r28	; 61
    182e:	9c 83       	std	Y+4, r25	; 0x04
    1830:	8b 83       	std	Y+3, r24	; 0x03
    1832:	6d 83       	std	Y+5, r22	; 0x05
    1834:	4e 83       	std	Y+6, r20	; 0x06
    1836:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8CGRAMAddress= 0, Local_u8Iterator;
    1838:	1a 82       	std	Y+2, r1	; 0x02
	/* Calculate the CGRAM address whose each block is 8 bytes */
	Local_u8CGRAMAddress =Copy_u8PatternNumber*8;
    183a:	8d 81       	ldd	r24, Y+5	; 0x05
    183c:	88 2f       	mov	r24, r24
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	88 0f       	add	r24, r24
    1842:	99 1f       	adc	r25, r25
    1844:	88 0f       	add	r24, r24
    1846:	99 1f       	adc	r25, r25
    1848:	88 0f       	add	r24, r24
    184a:	99 1f       	adc	r25, r25
    184c:	8a 83       	std	Y+2, r24	; 0x02

	/* Send CGRAM Address command to LCD, with setting bit 6, clearing bit 7*/
	C_LCD_voidSendCommand(Local_u8CGRAMAddress+64);
    184e:	8a 81       	ldd	r24, Y+2	; 0x02
    1850:	80 5c       	subi	r24, 0xC0	; 192
    1852:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <C_LCD_voidSendCommand>

	/* Write the pattern into CGRAM */

	for (Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++)
    1856:	19 82       	std	Y+1, r1	; 0x01
    1858:	0e c0       	rjmp	.+28     	; 0x1876 <CLCD_voidWriteSpecialCharacter+0x5c>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Iterator]);
    185a:	89 81       	ldd	r24, Y+1	; 0x01
    185c:	28 2f       	mov	r18, r24
    185e:	30 e0       	ldi	r19, 0x00	; 0
    1860:	8b 81       	ldd	r24, Y+3	; 0x03
    1862:	9c 81       	ldd	r25, Y+4	; 0x04
    1864:	fc 01       	movw	r30, r24
    1866:	e2 0f       	add	r30, r18
    1868:	f3 1f       	adc	r31, r19
    186a:	80 81       	ld	r24, Z
    186c:	0e 94 12 09 	call	0x1224	; 0x1224 <CLCD_voidSendData>
	/* Send CGRAM Address command to LCD, with setting bit 6, clearing bit 7*/
	C_LCD_voidSendCommand(Local_u8CGRAMAddress+64);

	/* Write the pattern into CGRAM */

	for (Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++)
    1870:	89 81       	ldd	r24, Y+1	; 0x01
    1872:	8f 5f       	subi	r24, 0xFF	; 255
    1874:	89 83       	std	Y+1, r24	; 0x01
    1876:	89 81       	ldd	r24, Y+1	; 0x01
    1878:	88 30       	cpi	r24, 0x08	; 8
    187a:	78 f3       	brcs	.-34     	; 0x185a <CLCD_voidWriteSpecialCharacter+0x40>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Iterator]);
	}

	/* go back to the DDRAM to display the Pattern*/
	CLCD_voidGoToXY(Copy_u8XPos,Copy_u8YPos);
    187c:	8e 81       	ldd	r24, Y+6	; 0x06
    187e:	6f 81       	ldd	r22, Y+7	; 0x07
    1880:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <CLCD_voidGoToXY>
	/* Display the pattern written in the CGRAM*/
	CLCD_voidSendData(Copy_u8PatternNumber);
    1884:	8d 81       	ldd	r24, Y+5	; 0x05
    1886:	0e 94 12 09 	call	0x1224	; 0x1224 <CLCD_voidSendData>
}
    188a:	27 96       	adiw	r28, 0x07	; 7
    188c:	0f b6       	in	r0, 0x3f	; 63
    188e:	f8 94       	cli
    1890:	de bf       	out	0x3e, r29	; 62
    1892:	0f be       	out	0x3f, r0	; 63
    1894:	cd bf       	out	0x3d, r28	; 61
    1896:	cf 91       	pop	r28
    1898:	df 91       	pop	r29
    189a:	08 95       	ret

0000189c <CLCD_VoidWriteNumber>:

void CLCD_VoidWriteNumber(f32 Copy_u32Number)
{
    189c:	0f 93       	push	r16
    189e:	1f 93       	push	r17
    18a0:	df 93       	push	r29
    18a2:	cf 93       	push	r28
    18a4:	cd b7       	in	r28, 0x3d	; 61
    18a6:	de b7       	in	r29, 0x3e	; 62
    18a8:	6d 97       	sbiw	r28, 0x1d	; 29
    18aa:	0f b6       	in	r0, 0x3f	; 63
    18ac:	f8 94       	cli
    18ae:	de bf       	out	0x3e, r29	; 62
    18b0:	0f be       	out	0x3f, r0	; 63
    18b2:	cd bf       	out	0x3d, r28	; 61
    18b4:	6a 8f       	std	Y+26, r22	; 0x1a
    18b6:	7b 8f       	std	Y+27, r23	; 0x1b
    18b8:	8c 8f       	std	Y+28, r24	; 0x1c
    18ba:	9d 8f       	std	Y+29, r25	; 0x1d
	s32 Local_s32Number = Copy_u32Number;
    18bc:	6a 8d       	ldd	r22, Y+26	; 0x1a
    18be:	7b 8d       	ldd	r23, Y+27	; 0x1b
    18c0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    18c2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    18c4:	0e 94 37 04 	call	0x86e	; 0x86e <__fixsfsi>
    18c8:	dc 01       	movw	r26, r24
    18ca:	cb 01       	movw	r24, r22
    18cc:	8a 83       	std	Y+2, r24	; 0x02
    18ce:	9b 83       	std	Y+3, r25	; 0x03
    18d0:	ac 83       	std	Y+4, r26	; 0x04
    18d2:	bd 83       	std	Y+5, r27	; 0x05

	if(Local_s32Number == 0)
    18d4:	8a 81       	ldd	r24, Y+2	; 0x02
    18d6:	9b 81       	ldd	r25, Y+3	; 0x03
    18d8:	ac 81       	ldd	r26, Y+4	; 0x04
    18da:	bd 81       	ldd	r27, Y+5	; 0x05
    18dc:	00 97       	sbiw	r24, 0x00	; 0
    18de:	a1 05       	cpc	r26, r1
    18e0:	b1 05       	cpc	r27, r1
    18e2:	21 f4       	brne	.+8      	; 0x18ec <CLCD_VoidWriteNumber+0x50>
	{
		CLCD_voidSendData('0');
    18e4:	80 e3       	ldi	r24, 0x30	; 48
    18e6:	0e 94 12 09 	call	0x1224	; 0x1224 <CLCD_voidSendData>
    18ea:	18 c0       	rjmp	.+48     	; 0x191c <CLCD_VoidWriteNumber+0x80>
	}
	else if (Local_s32Number <0)
    18ec:	8a 81       	ldd	r24, Y+2	; 0x02
    18ee:	9b 81       	ldd	r25, Y+3	; 0x03
    18f0:	ac 81       	ldd	r26, Y+4	; 0x04
    18f2:	bd 81       	ldd	r27, Y+5	; 0x05
    18f4:	bb 23       	and	r27, r27
    18f6:	94 f4       	brge	.+36     	; 0x191c <CLCD_VoidWriteNumber+0x80>
	{
		CLCD_voidSendData('-');
    18f8:	8d e2       	ldi	r24, 0x2D	; 45
    18fa:	0e 94 12 09 	call	0x1224	; 0x1224 <CLCD_voidSendData>
		Local_s32Number = Local_s32Number *(-1);
    18fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1900:	9b 81       	ldd	r25, Y+3	; 0x03
    1902:	ac 81       	ldd	r26, Y+4	; 0x04
    1904:	bd 81       	ldd	r27, Y+5	; 0x05
    1906:	b0 95       	com	r27
    1908:	a0 95       	com	r26
    190a:	90 95       	com	r25
    190c:	81 95       	neg	r24
    190e:	9f 4f       	sbci	r25, 0xFF	; 255
    1910:	af 4f       	sbci	r26, 0xFF	; 255
    1912:	bf 4f       	sbci	r27, 0xFF	; 255
    1914:	8a 83       	std	Y+2, r24	; 0x02
    1916:	9b 83       	std	Y+3, r25	; 0x03
    1918:	ac 83       	std	Y+4, r26	; 0x04
    191a:	bd 83       	std	Y+5, r27	; 0x05

	}
	u8 Local_u8Array[20]={0};
    191c:	84 e1       	ldi	r24, 0x14	; 20
    191e:	fe 01       	movw	r30, r28
    1920:	36 96       	adiw	r30, 0x06	; 6
    1922:	df 01       	movw	r26, r30
    1924:	98 2f       	mov	r25, r24
    1926:	1d 92       	st	X+, r1
    1928:	9a 95       	dec	r25
    192a:	e9 f7       	brne	.-6      	; 0x1926 <CLCD_VoidWriteNumber+0x8a>
	s8 local_s8Counter =0;
    192c:	19 82       	std	Y+1, r1	; 0x01
    192e:	2f c0       	rjmp	.+94     	; 0x198e <CLCD_VoidWriteNumber+0xf2>
	while (Local_s32Number != 0)
	{
		Local_u8Array[local_s8Counter]= Local_s32Number%10;
    1930:	89 81       	ldd	r24, Y+1	; 0x01
    1932:	08 2f       	mov	r16, r24
    1934:	11 27       	eor	r17, r17
    1936:	07 fd       	sbrc	r16, 7
    1938:	10 95       	com	r17
    193a:	8a 81       	ldd	r24, Y+2	; 0x02
    193c:	9b 81       	ldd	r25, Y+3	; 0x03
    193e:	ac 81       	ldd	r26, Y+4	; 0x04
    1940:	bd 81       	ldd	r27, Y+5	; 0x05
    1942:	2a e0       	ldi	r18, 0x0A	; 10
    1944:	30 e0       	ldi	r19, 0x00	; 0
    1946:	40 e0       	ldi	r20, 0x00	; 0
    1948:	50 e0       	ldi	r21, 0x00	; 0
    194a:	bc 01       	movw	r22, r24
    194c:	cd 01       	movw	r24, r26
    194e:	0e 94 4a 1a 	call	0x3494	; 0x3494 <__divmodsi4>
    1952:	dc 01       	movw	r26, r24
    1954:	cb 01       	movw	r24, r22
    1956:	28 2f       	mov	r18, r24
    1958:	ce 01       	movw	r24, r28
    195a:	06 96       	adiw	r24, 0x06	; 6
    195c:	fc 01       	movw	r30, r24
    195e:	e0 0f       	add	r30, r16
    1960:	f1 1f       	adc	r31, r17
    1962:	20 83       	st	Z, r18
		Local_s32Number/=10;
    1964:	8a 81       	ldd	r24, Y+2	; 0x02
    1966:	9b 81       	ldd	r25, Y+3	; 0x03
    1968:	ac 81       	ldd	r26, Y+4	; 0x04
    196a:	bd 81       	ldd	r27, Y+5	; 0x05
    196c:	2a e0       	ldi	r18, 0x0A	; 10
    196e:	30 e0       	ldi	r19, 0x00	; 0
    1970:	40 e0       	ldi	r20, 0x00	; 0
    1972:	50 e0       	ldi	r21, 0x00	; 0
    1974:	bc 01       	movw	r22, r24
    1976:	cd 01       	movw	r24, r26
    1978:	0e 94 4a 1a 	call	0x3494	; 0x3494 <__divmodsi4>
    197c:	da 01       	movw	r26, r20
    197e:	c9 01       	movw	r24, r18
    1980:	8a 83       	std	Y+2, r24	; 0x02
    1982:	9b 83       	std	Y+3, r25	; 0x03
    1984:	ac 83       	std	Y+4, r26	; 0x04
    1986:	bd 83       	std	Y+5, r27	; 0x05
		local_s8Counter++;
    1988:	89 81       	ldd	r24, Y+1	; 0x01
    198a:	8f 5f       	subi	r24, 0xFF	; 255
    198c:	89 83       	std	Y+1, r24	; 0x01
		Local_s32Number = Local_s32Number *(-1);

	}
	u8 Local_u8Array[20]={0};
	s8 local_s8Counter =0;
	while (Local_s32Number != 0)
    198e:	8a 81       	ldd	r24, Y+2	; 0x02
    1990:	9b 81       	ldd	r25, Y+3	; 0x03
    1992:	ac 81       	ldd	r26, Y+4	; 0x04
    1994:	bd 81       	ldd	r27, Y+5	; 0x05
    1996:	00 97       	sbiw	r24, 0x00	; 0
    1998:	a1 05       	cpc	r26, r1
    199a:	b1 05       	cpc	r27, r1
    199c:	49 f6       	brne	.-110    	; 0x1930 <CLCD_VoidWriteNumber+0x94>
	{
		Local_u8Array[local_s8Counter]= Local_s32Number%10;
		Local_s32Number/=10;
		local_s8Counter++;
	}
	local_s8Counter--;
    199e:	89 81       	ldd	r24, Y+1	; 0x01
    19a0:	81 50       	subi	r24, 0x01	; 1
    19a2:	89 83       	std	Y+1, r24	; 0x01
    19a4:	11 c0       	rjmp	.+34     	; 0x19c8 <CLCD_VoidWriteNumber+0x12c>
	while (local_s8Counter>=0)
	{
		CLCD_voidSendData(Local_u8Array[local_s8Counter]+'0');
    19a6:	89 81       	ldd	r24, Y+1	; 0x01
    19a8:	28 2f       	mov	r18, r24
    19aa:	33 27       	eor	r19, r19
    19ac:	27 fd       	sbrc	r18, 7
    19ae:	30 95       	com	r19
    19b0:	ce 01       	movw	r24, r28
    19b2:	06 96       	adiw	r24, 0x06	; 6
    19b4:	fc 01       	movw	r30, r24
    19b6:	e2 0f       	add	r30, r18
    19b8:	f3 1f       	adc	r31, r19
    19ba:	80 81       	ld	r24, Z
    19bc:	80 5d       	subi	r24, 0xD0	; 208
    19be:	0e 94 12 09 	call	0x1224	; 0x1224 <CLCD_voidSendData>
		local_s8Counter--;
    19c2:	89 81       	ldd	r24, Y+1	; 0x01
    19c4:	81 50       	subi	r24, 0x01	; 1
    19c6:	89 83       	std	Y+1, r24	; 0x01
		Local_u8Array[local_s8Counter]= Local_s32Number%10;
		Local_s32Number/=10;
		local_s8Counter++;
	}
	local_s8Counter--;
	while (local_s8Counter>=0)
    19c8:	89 81       	ldd	r24, Y+1	; 0x01
    19ca:	88 23       	and	r24, r24
    19cc:	64 f7       	brge	.-40     	; 0x19a6 <CLCD_VoidWriteNumber+0x10a>
	{
		CLCD_voidSendData(Local_u8Array[local_s8Counter]+'0');
		local_s8Counter--;
	}
}
    19ce:	6d 96       	adiw	r28, 0x1d	; 29
    19d0:	0f b6       	in	r0, 0x3f	; 63
    19d2:	f8 94       	cli
    19d4:	de bf       	out	0x3e, r29	; 62
    19d6:	0f be       	out	0x3f, r0	; 63
    19d8:	cd bf       	out	0x3d, r28	; 61
    19da:	cf 91       	pop	r28
    19dc:	df 91       	pop	r29
    19de:	1f 91       	pop	r17
    19e0:	0f 91       	pop	r16
    19e2:	08 95       	ret

000019e4 <CLCD_voidWriteFloatNumber>:

void CLCD_voidWriteFloatNumber(f32 Copy_f32FloatNumber )
{
    19e4:	df 93       	push	r29
    19e6:	cf 93       	push	r28
    19e8:	cd b7       	in	r28, 0x3d	; 61
    19ea:	de b7       	in	r29, 0x3e	; 62
    19ec:	28 97       	sbiw	r28, 0x08	; 8
    19ee:	0f b6       	in	r0, 0x3f	; 63
    19f0:	f8 94       	cli
    19f2:	de bf       	out	0x3e, r29	; 62
    19f4:	0f be       	out	0x3f, r0	; 63
    19f6:	cd bf       	out	0x3d, r28	; 61
    19f8:	6d 83       	std	Y+5, r22	; 0x05
    19fa:	7e 83       	std	Y+6, r23	; 0x06
    19fc:	8f 83       	std	Y+7, r24	; 0x07
    19fe:	98 87       	std	Y+8, r25	; 0x08

	if(Copy_f32FloatNumber == 0)
    1a00:	6d 81       	ldd	r22, Y+5	; 0x05
    1a02:	7e 81       	ldd	r23, Y+6	; 0x06
    1a04:	8f 81       	ldd	r24, Y+7	; 0x07
    1a06:	98 85       	ldd	r25, Y+8	; 0x08
    1a08:	20 e0       	ldi	r18, 0x00	; 0
    1a0a:	30 e0       	ldi	r19, 0x00	; 0
    1a0c:	40 e0       	ldi	r20, 0x00	; 0
    1a0e:	50 e0       	ldi	r21, 0x00	; 0
    1a10:	0e 94 19 03 	call	0x632	; 0x632 <__eqsf2>
    1a14:	88 23       	and	r24, r24
    1a16:	39 f4       	brne	.+14     	; 0x1a26 <CLCD_voidWriteFloatNumber+0x42>
	{
		CLCD_VoidWriteNumber(0);
    1a18:	60 e0       	ldi	r22, 0x00	; 0
    1a1a:	70 e0       	ldi	r23, 0x00	; 0
    1a1c:	80 e0       	ldi	r24, 0x00	; 0
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	0e 94 4e 0c 	call	0x189c	; 0x189c <CLCD_VoidWriteNumber>
    1a24:	7c c0       	rjmp	.+248    	; 0x1b1e <CLCD_voidWriteFloatNumber+0x13a>
	}

	else
	{
		s32 Local_s32DecemalNum=Copy_f32FloatNumber;
    1a26:	6d 81       	ldd	r22, Y+5	; 0x05
    1a28:	7e 81       	ldd	r23, Y+6	; 0x06
    1a2a:	8f 81       	ldd	r24, Y+7	; 0x07
    1a2c:	98 85       	ldd	r25, Y+8	; 0x08
    1a2e:	0e 94 37 04 	call	0x86e	; 0x86e <__fixsfsi>
    1a32:	dc 01       	movw	r26, r24
    1a34:	cb 01       	movw	r24, r22
    1a36:	89 83       	std	Y+1, r24	; 0x01
    1a38:	9a 83       	std	Y+2, r25	; 0x02
    1a3a:	ab 83       	std	Y+3, r26	; 0x03
    1a3c:	bc 83       	std	Y+4, r27	; 0x04
		CLCD_VoidWriteNumber(Local_s32DecemalNum);
    1a3e:	69 81       	ldd	r22, Y+1	; 0x01
    1a40:	7a 81       	ldd	r23, Y+2	; 0x02
    1a42:	8b 81       	ldd	r24, Y+3	; 0x03
    1a44:	9c 81       	ldd	r25, Y+4	; 0x04
    1a46:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <__floatsisf>
    1a4a:	dc 01       	movw	r26, r24
    1a4c:	cb 01       	movw	r24, r22
    1a4e:	bc 01       	movw	r22, r24
    1a50:	cd 01       	movw	r24, r26
    1a52:	0e 94 4e 0c 	call	0x189c	; 0x189c <CLCD_VoidWriteNumber>
		CLCD_voidSendData('.');
    1a56:	8e e2       	ldi	r24, 0x2E	; 46
    1a58:	0e 94 12 09 	call	0x1224	; 0x1224 <CLCD_voidSendData>
		Copy_f32FloatNumber = Copy_f32FloatNumber -Local_s32DecemalNum;
    1a5c:	69 81       	ldd	r22, Y+1	; 0x01
    1a5e:	7a 81       	ldd	r23, Y+2	; 0x02
    1a60:	8b 81       	ldd	r24, Y+3	; 0x03
    1a62:	9c 81       	ldd	r25, Y+4	; 0x04
    1a64:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <__floatsisf>
    1a68:	9b 01       	movw	r18, r22
    1a6a:	ac 01       	movw	r20, r24
    1a6c:	6d 81       	ldd	r22, Y+5	; 0x05
    1a6e:	7e 81       	ldd	r23, Y+6	; 0x06
    1a70:	8f 81       	ldd	r24, Y+7	; 0x07
    1a72:	98 85       	ldd	r25, Y+8	; 0x08
    1a74:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1a78:	dc 01       	movw	r26, r24
    1a7a:	cb 01       	movw	r24, r22
    1a7c:	8d 83       	std	Y+5, r24	; 0x05
    1a7e:	9e 83       	std	Y+6, r25	; 0x06
    1a80:	af 83       	std	Y+7, r26	; 0x07
    1a82:	b8 87       	std	Y+8, r27	; 0x08

		Copy_f32FloatNumber*=100000;
    1a84:	6d 81       	ldd	r22, Y+5	; 0x05
    1a86:	7e 81       	ldd	r23, Y+6	; 0x06
    1a88:	8f 81       	ldd	r24, Y+7	; 0x07
    1a8a:	98 85       	ldd	r25, Y+8	; 0x08
    1a8c:	20 e0       	ldi	r18, 0x00	; 0
    1a8e:	30 e5       	ldi	r19, 0x50	; 80
    1a90:	43 ec       	ldi	r20, 0xC3	; 195
    1a92:	57 e4       	ldi	r21, 0x47	; 71
    1a94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a98:	dc 01       	movw	r26, r24
    1a9a:	cb 01       	movw	r24, r22
    1a9c:	8d 83       	std	Y+5, r24	; 0x05
    1a9e:	9e 83       	std	Y+6, r25	; 0x06
    1aa0:	af 83       	std	Y+7, r26	; 0x07
    1aa2:	b8 87       	std	Y+8, r27	; 0x08
		Local_s32DecemalNum = Copy_f32FloatNumber;
    1aa4:	6d 81       	ldd	r22, Y+5	; 0x05
    1aa6:	7e 81       	ldd	r23, Y+6	; 0x06
    1aa8:	8f 81       	ldd	r24, Y+7	; 0x07
    1aaa:	98 85       	ldd	r25, Y+8	; 0x08
    1aac:	0e 94 37 04 	call	0x86e	; 0x86e <__fixsfsi>
    1ab0:	dc 01       	movw	r26, r24
    1ab2:	cb 01       	movw	r24, r22
    1ab4:	89 83       	std	Y+1, r24	; 0x01
    1ab6:	9a 83       	std	Y+2, r25	; 0x02
    1ab8:	ab 83       	std	Y+3, r26	; 0x03
    1aba:	bc 83       	std	Y+4, r27	; 0x04
    1abc:	12 c0       	rjmp	.+36     	; 0x1ae2 <CLCD_voidWriteFloatNumber+0xfe>

		while (Local_s32DecemalNum%10 == 0)
		{
			Local_s32DecemalNum/=10;
    1abe:	89 81       	ldd	r24, Y+1	; 0x01
    1ac0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ac2:	ab 81       	ldd	r26, Y+3	; 0x03
    1ac4:	bc 81       	ldd	r27, Y+4	; 0x04
    1ac6:	2a e0       	ldi	r18, 0x0A	; 10
    1ac8:	30 e0       	ldi	r19, 0x00	; 0
    1aca:	40 e0       	ldi	r20, 0x00	; 0
    1acc:	50 e0       	ldi	r21, 0x00	; 0
    1ace:	bc 01       	movw	r22, r24
    1ad0:	cd 01       	movw	r24, r26
    1ad2:	0e 94 4a 1a 	call	0x3494	; 0x3494 <__divmodsi4>
    1ad6:	da 01       	movw	r26, r20
    1ad8:	c9 01       	movw	r24, r18
    1ada:	89 83       	std	Y+1, r24	; 0x01
    1adc:	9a 83       	std	Y+2, r25	; 0x02
    1ade:	ab 83       	std	Y+3, r26	; 0x03
    1ae0:	bc 83       	std	Y+4, r27	; 0x04
		Copy_f32FloatNumber = Copy_f32FloatNumber -Local_s32DecemalNum;

		Copy_f32FloatNumber*=100000;
		Local_s32DecemalNum = Copy_f32FloatNumber;

		while (Local_s32DecemalNum%10 == 0)
    1ae2:	89 81       	ldd	r24, Y+1	; 0x01
    1ae4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ae6:	ab 81       	ldd	r26, Y+3	; 0x03
    1ae8:	bc 81       	ldd	r27, Y+4	; 0x04
    1aea:	2a e0       	ldi	r18, 0x0A	; 10
    1aec:	30 e0       	ldi	r19, 0x00	; 0
    1aee:	40 e0       	ldi	r20, 0x00	; 0
    1af0:	50 e0       	ldi	r21, 0x00	; 0
    1af2:	bc 01       	movw	r22, r24
    1af4:	cd 01       	movw	r24, r26
    1af6:	0e 94 4a 1a 	call	0x3494	; 0x3494 <__divmodsi4>
    1afa:	dc 01       	movw	r26, r24
    1afc:	cb 01       	movw	r24, r22
    1afe:	00 97       	sbiw	r24, 0x00	; 0
    1b00:	a1 05       	cpc	r26, r1
    1b02:	b1 05       	cpc	r27, r1
    1b04:	e1 f2       	breq	.-72     	; 0x1abe <CLCD_voidWriteFloatNumber+0xda>
		{
			Local_s32DecemalNum/=10;
		}
		CLCD_VoidWriteNumber(Local_s32DecemalNum);
    1b06:	69 81       	ldd	r22, Y+1	; 0x01
    1b08:	7a 81       	ldd	r23, Y+2	; 0x02
    1b0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b0e:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <__floatsisf>
    1b12:	dc 01       	movw	r26, r24
    1b14:	cb 01       	movw	r24, r22
    1b16:	bc 01       	movw	r22, r24
    1b18:	cd 01       	movw	r24, r26
    1b1a:	0e 94 4e 0c 	call	0x189c	; 0x189c <CLCD_VoidWriteNumber>
	}
}
    1b1e:	28 96       	adiw	r28, 0x08	; 8
    1b20:	0f b6       	in	r0, 0x3f	; 63
    1b22:	f8 94       	cli
    1b24:	de bf       	out	0x3e, r29	; 62
    1b26:	0f be       	out	0x3f, r0	; 63
    1b28:	cd bf       	out	0x3d, r28	; 61
    1b2a:	cf 91       	pop	r28
    1b2c:	df 91       	pop	r29
    1b2e:	08 95       	ret

00001b30 <CLCD_voidClear>:
//}



void CLCD_voidClear()
{
    1b30:	df 93       	push	r29
    1b32:	cf 93       	push	r28
    1b34:	cd b7       	in	r28, 0x3d	; 61
    1b36:	de b7       	in	r29, 0x3e	; 62
	C_LCD_voidSendCommand(0x01);
    1b38:	81 e0       	ldi	r24, 0x01	; 1
    1b3a:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <C_LCD_voidSendCommand>

}
    1b3e:	cf 91       	pop	r28
    1b40:	df 91       	pop	r29
    1b42:	08 95       	ret

00001b44 <DIO_u8SetPinValue>:
//
//	return Local_u8ErrorState;
//}

u8 DIO_u8SetPinValue(u8 Copy_u8port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
    1b44:	df 93       	push	r29
    1b46:	cf 93       	push	r28
    1b48:	cd b7       	in	r28, 0x3d	; 61
    1b4a:	de b7       	in	r29, 0x3e	; 62
    1b4c:	28 97       	sbiw	r28, 0x08	; 8
    1b4e:	0f b6       	in	r0, 0x3f	; 63
    1b50:	f8 94       	cli
    1b52:	de bf       	out	0x3e, r29	; 62
    1b54:	0f be       	out	0x3f, r0	; 63
    1b56:	cd bf       	out	0x3d, r28	; 61
    1b58:	8a 83       	std	Y+2, r24	; 0x02
    1b5a:	6b 83       	std	Y+3, r22	; 0x03
    1b5c:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    1b5e:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin<=DIO_u8PIN7)
    1b60:	8b 81       	ldd	r24, Y+3	; 0x03
    1b62:	88 30       	cpi	r24, 0x08	; 8
    1b64:	08 f0       	brcs	.+2      	; 0x1b68 <DIO_u8SetPinValue+0x24>
    1b66:	f4 c0       	rjmp	.+488    	; 0x1d50 <DIO_u8SetPinValue+0x20c>
	{
		if(Copy_u8Value == DIO_u8PIN_LOW)
    1b68:	8c 81       	ldd	r24, Y+4	; 0x04
    1b6a:	88 23       	and	r24, r24
    1b6c:	09 f0       	breq	.+2      	; 0x1b70 <DIO_u8SetPinValue+0x2c>
    1b6e:	77 c0       	rjmp	.+238    	; 0x1c5e <DIO_u8SetPinValue+0x11a>
		{

			switch(Copy_u8port)
    1b70:	8a 81       	ldd	r24, Y+2	; 0x02
    1b72:	28 2f       	mov	r18, r24
    1b74:	30 e0       	ldi	r19, 0x00	; 0
    1b76:	38 87       	std	Y+8, r19	; 0x08
    1b78:	2f 83       	std	Y+7, r18	; 0x07
    1b7a:	8f 81       	ldd	r24, Y+7	; 0x07
    1b7c:	98 85       	ldd	r25, Y+8	; 0x08
    1b7e:	81 30       	cpi	r24, 0x01	; 1
    1b80:	91 05       	cpc	r25, r1
    1b82:	59 f1       	breq	.+86     	; 0x1bda <DIO_u8SetPinValue+0x96>
    1b84:	2f 81       	ldd	r18, Y+7	; 0x07
    1b86:	38 85       	ldd	r19, Y+8	; 0x08
    1b88:	22 30       	cpi	r18, 0x02	; 2
    1b8a:	31 05       	cpc	r19, r1
    1b8c:	2c f4       	brge	.+10     	; 0x1b98 <DIO_u8SetPinValue+0x54>
    1b8e:	8f 81       	ldd	r24, Y+7	; 0x07
    1b90:	98 85       	ldd	r25, Y+8	; 0x08
    1b92:	00 97       	sbiw	r24, 0x00	; 0
    1b94:	69 f0       	breq	.+26     	; 0x1bb0 <DIO_u8SetPinValue+0x6c>
    1b96:	60 c0       	rjmp	.+192    	; 0x1c58 <DIO_u8SetPinValue+0x114>
    1b98:	2f 81       	ldd	r18, Y+7	; 0x07
    1b9a:	38 85       	ldd	r19, Y+8	; 0x08
    1b9c:	22 30       	cpi	r18, 0x02	; 2
    1b9e:	31 05       	cpc	r19, r1
    1ba0:	89 f1       	breq	.+98     	; 0x1c04 <DIO_u8SetPinValue+0xc0>
    1ba2:	8f 81       	ldd	r24, Y+7	; 0x07
    1ba4:	98 85       	ldd	r25, Y+8	; 0x08
    1ba6:	83 30       	cpi	r24, 0x03	; 3
    1ba8:	91 05       	cpc	r25, r1
    1baa:	09 f4       	brne	.+2      	; 0x1bae <DIO_u8SetPinValue+0x6a>
    1bac:	40 c0       	rjmp	.+128    	; 0x1c2e <DIO_u8SetPinValue+0xea>
    1bae:	54 c0       	rjmp	.+168    	; 0x1c58 <DIO_u8SetPinValue+0x114>
			{
			case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
    1bb0:	ab e3       	ldi	r26, 0x3B	; 59
    1bb2:	b0 e0       	ldi	r27, 0x00	; 0
    1bb4:	eb e3       	ldi	r30, 0x3B	; 59
    1bb6:	f0 e0       	ldi	r31, 0x00	; 0
    1bb8:	80 81       	ld	r24, Z
    1bba:	48 2f       	mov	r20, r24
    1bbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bbe:	28 2f       	mov	r18, r24
    1bc0:	30 e0       	ldi	r19, 0x00	; 0
    1bc2:	81 e0       	ldi	r24, 0x01	; 1
    1bc4:	90 e0       	ldi	r25, 0x00	; 0
    1bc6:	02 2e       	mov	r0, r18
    1bc8:	02 c0       	rjmp	.+4      	; 0x1bce <DIO_u8SetPinValue+0x8a>
    1bca:	88 0f       	add	r24, r24
    1bcc:	99 1f       	adc	r25, r25
    1bce:	0a 94       	dec	r0
    1bd0:	e2 f7       	brpl	.-8      	; 0x1bca <DIO_u8SetPinValue+0x86>
    1bd2:	80 95       	com	r24
    1bd4:	84 23       	and	r24, r20
    1bd6:	8c 93       	st	X, r24
    1bd8:	bd c0       	rjmp	.+378    	; 0x1d54 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
    1bda:	a8 e3       	ldi	r26, 0x38	; 56
    1bdc:	b0 e0       	ldi	r27, 0x00	; 0
    1bde:	e8 e3       	ldi	r30, 0x38	; 56
    1be0:	f0 e0       	ldi	r31, 0x00	; 0
    1be2:	80 81       	ld	r24, Z
    1be4:	48 2f       	mov	r20, r24
    1be6:	8b 81       	ldd	r24, Y+3	; 0x03
    1be8:	28 2f       	mov	r18, r24
    1bea:	30 e0       	ldi	r19, 0x00	; 0
    1bec:	81 e0       	ldi	r24, 0x01	; 1
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	02 2e       	mov	r0, r18
    1bf2:	02 c0       	rjmp	.+4      	; 0x1bf8 <DIO_u8SetPinValue+0xb4>
    1bf4:	88 0f       	add	r24, r24
    1bf6:	99 1f       	adc	r25, r25
    1bf8:	0a 94       	dec	r0
    1bfa:	e2 f7       	brpl	.-8      	; 0x1bf4 <DIO_u8SetPinValue+0xb0>
    1bfc:	80 95       	com	r24
    1bfe:	84 23       	and	r24, r20
    1c00:	8c 93       	st	X, r24
    1c02:	a8 c0       	rjmp	.+336    	; 0x1d54 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin); break;
    1c04:	a5 e3       	ldi	r26, 0x35	; 53
    1c06:	b0 e0       	ldi	r27, 0x00	; 0
    1c08:	e5 e3       	ldi	r30, 0x35	; 53
    1c0a:	f0 e0       	ldi	r31, 0x00	; 0
    1c0c:	80 81       	ld	r24, Z
    1c0e:	48 2f       	mov	r20, r24
    1c10:	8b 81       	ldd	r24, Y+3	; 0x03
    1c12:	28 2f       	mov	r18, r24
    1c14:	30 e0       	ldi	r19, 0x00	; 0
    1c16:	81 e0       	ldi	r24, 0x01	; 1
    1c18:	90 e0       	ldi	r25, 0x00	; 0
    1c1a:	02 2e       	mov	r0, r18
    1c1c:	02 c0       	rjmp	.+4      	; 0x1c22 <DIO_u8SetPinValue+0xde>
    1c1e:	88 0f       	add	r24, r24
    1c20:	99 1f       	adc	r25, r25
    1c22:	0a 94       	dec	r0
    1c24:	e2 f7       	brpl	.-8      	; 0x1c1e <DIO_u8SetPinValue+0xda>
    1c26:	80 95       	com	r24
    1c28:	84 23       	and	r24, r20
    1c2a:	8c 93       	st	X, r24
    1c2c:	93 c0       	rjmp	.+294    	; 0x1d54 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin); break;
    1c2e:	a2 e3       	ldi	r26, 0x32	; 50
    1c30:	b0 e0       	ldi	r27, 0x00	; 0
    1c32:	e2 e3       	ldi	r30, 0x32	; 50
    1c34:	f0 e0       	ldi	r31, 0x00	; 0
    1c36:	80 81       	ld	r24, Z
    1c38:	48 2f       	mov	r20, r24
    1c3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3c:	28 2f       	mov	r18, r24
    1c3e:	30 e0       	ldi	r19, 0x00	; 0
    1c40:	81 e0       	ldi	r24, 0x01	; 1
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	02 2e       	mov	r0, r18
    1c46:	02 c0       	rjmp	.+4      	; 0x1c4c <DIO_u8SetPinValue+0x108>
    1c48:	88 0f       	add	r24, r24
    1c4a:	99 1f       	adc	r25, r25
    1c4c:	0a 94       	dec	r0
    1c4e:	e2 f7       	brpl	.-8      	; 0x1c48 <DIO_u8SetPinValue+0x104>
    1c50:	80 95       	com	r24
    1c52:	84 23       	and	r24, r20
    1c54:	8c 93       	st	X, r24
    1c56:	7e c0       	rjmp	.+252    	; 0x1d54 <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState =1; break;
    1c58:	81 e0       	ldi	r24, 0x01	; 1
    1c5a:	89 83       	std	Y+1, r24	; 0x01
    1c5c:	7b c0       	rjmp	.+246    	; 0x1d54 <DIO_u8SetPinValue+0x210>

			}
		}
		else if(Copy_u8Value == DIO_u8PIN_HIGH)
    1c5e:	8c 81       	ldd	r24, Y+4	; 0x04
    1c60:	81 30       	cpi	r24, 0x01	; 1
    1c62:	09 f0       	breq	.+2      	; 0x1c66 <DIO_u8SetPinValue+0x122>
    1c64:	72 c0       	rjmp	.+228    	; 0x1d4a <DIO_u8SetPinValue+0x206>
		{

			switch(Copy_u8port)
    1c66:	8a 81       	ldd	r24, Y+2	; 0x02
    1c68:	28 2f       	mov	r18, r24
    1c6a:	30 e0       	ldi	r19, 0x00	; 0
    1c6c:	3e 83       	std	Y+6, r19	; 0x06
    1c6e:	2d 83       	std	Y+5, r18	; 0x05
    1c70:	8d 81       	ldd	r24, Y+5	; 0x05
    1c72:	9e 81       	ldd	r25, Y+6	; 0x06
    1c74:	81 30       	cpi	r24, 0x01	; 1
    1c76:	91 05       	cpc	r25, r1
    1c78:	49 f1       	breq	.+82     	; 0x1ccc <DIO_u8SetPinValue+0x188>
    1c7a:	2d 81       	ldd	r18, Y+5	; 0x05
    1c7c:	3e 81       	ldd	r19, Y+6	; 0x06
    1c7e:	22 30       	cpi	r18, 0x02	; 2
    1c80:	31 05       	cpc	r19, r1
    1c82:	2c f4       	brge	.+10     	; 0x1c8e <DIO_u8SetPinValue+0x14a>
    1c84:	8d 81       	ldd	r24, Y+5	; 0x05
    1c86:	9e 81       	ldd	r25, Y+6	; 0x06
    1c88:	00 97       	sbiw	r24, 0x00	; 0
    1c8a:	61 f0       	breq	.+24     	; 0x1ca4 <DIO_u8SetPinValue+0x160>
    1c8c:	5b c0       	rjmp	.+182    	; 0x1d44 <DIO_u8SetPinValue+0x200>
    1c8e:	2d 81       	ldd	r18, Y+5	; 0x05
    1c90:	3e 81       	ldd	r19, Y+6	; 0x06
    1c92:	22 30       	cpi	r18, 0x02	; 2
    1c94:	31 05       	cpc	r19, r1
    1c96:	71 f1       	breq	.+92     	; 0x1cf4 <DIO_u8SetPinValue+0x1b0>
    1c98:	8d 81       	ldd	r24, Y+5	; 0x05
    1c9a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c9c:	83 30       	cpi	r24, 0x03	; 3
    1c9e:	91 05       	cpc	r25, r1
    1ca0:	e9 f1       	breq	.+122    	; 0x1d1c <DIO_u8SetPinValue+0x1d8>
    1ca2:	50 c0       	rjmp	.+160    	; 0x1d44 <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
    1ca4:	ab e3       	ldi	r26, 0x3B	; 59
    1ca6:	b0 e0       	ldi	r27, 0x00	; 0
    1ca8:	eb e3       	ldi	r30, 0x3B	; 59
    1caa:	f0 e0       	ldi	r31, 0x00	; 0
    1cac:	80 81       	ld	r24, Z
    1cae:	48 2f       	mov	r20, r24
    1cb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb2:	28 2f       	mov	r18, r24
    1cb4:	30 e0       	ldi	r19, 0x00	; 0
    1cb6:	81 e0       	ldi	r24, 0x01	; 1
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	02 2e       	mov	r0, r18
    1cbc:	02 c0       	rjmp	.+4      	; 0x1cc2 <DIO_u8SetPinValue+0x17e>
    1cbe:	88 0f       	add	r24, r24
    1cc0:	99 1f       	adc	r25, r25
    1cc2:	0a 94       	dec	r0
    1cc4:	e2 f7       	brpl	.-8      	; 0x1cbe <DIO_u8SetPinValue+0x17a>
    1cc6:	84 2b       	or	r24, r20
    1cc8:	8c 93       	st	X, r24
    1cca:	44 c0       	rjmp	.+136    	; 0x1d54 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
    1ccc:	a8 e3       	ldi	r26, 0x38	; 56
    1cce:	b0 e0       	ldi	r27, 0x00	; 0
    1cd0:	e8 e3       	ldi	r30, 0x38	; 56
    1cd2:	f0 e0       	ldi	r31, 0x00	; 0
    1cd4:	80 81       	ld	r24, Z
    1cd6:	48 2f       	mov	r20, r24
    1cd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cda:	28 2f       	mov	r18, r24
    1cdc:	30 e0       	ldi	r19, 0x00	; 0
    1cde:	81 e0       	ldi	r24, 0x01	; 1
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	02 2e       	mov	r0, r18
    1ce4:	02 c0       	rjmp	.+4      	; 0x1cea <DIO_u8SetPinValue+0x1a6>
    1ce6:	88 0f       	add	r24, r24
    1ce8:	99 1f       	adc	r25, r25
    1cea:	0a 94       	dec	r0
    1cec:	e2 f7       	brpl	.-8      	; 0x1ce6 <DIO_u8SetPinValue+0x1a2>
    1cee:	84 2b       	or	r24, r20
    1cf0:	8c 93       	st	X, r24
    1cf2:	30 c0       	rjmp	.+96     	; 0x1d54 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin); break;
    1cf4:	a5 e3       	ldi	r26, 0x35	; 53
    1cf6:	b0 e0       	ldi	r27, 0x00	; 0
    1cf8:	e5 e3       	ldi	r30, 0x35	; 53
    1cfa:	f0 e0       	ldi	r31, 0x00	; 0
    1cfc:	80 81       	ld	r24, Z
    1cfe:	48 2f       	mov	r20, r24
    1d00:	8b 81       	ldd	r24, Y+3	; 0x03
    1d02:	28 2f       	mov	r18, r24
    1d04:	30 e0       	ldi	r19, 0x00	; 0
    1d06:	81 e0       	ldi	r24, 0x01	; 1
    1d08:	90 e0       	ldi	r25, 0x00	; 0
    1d0a:	02 2e       	mov	r0, r18
    1d0c:	02 c0       	rjmp	.+4      	; 0x1d12 <DIO_u8SetPinValue+0x1ce>
    1d0e:	88 0f       	add	r24, r24
    1d10:	99 1f       	adc	r25, r25
    1d12:	0a 94       	dec	r0
    1d14:	e2 f7       	brpl	.-8      	; 0x1d0e <DIO_u8SetPinValue+0x1ca>
    1d16:	84 2b       	or	r24, r20
    1d18:	8c 93       	st	X, r24
    1d1a:	1c c0       	rjmp	.+56     	; 0x1d54 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin); break;
    1d1c:	a2 e3       	ldi	r26, 0x32	; 50
    1d1e:	b0 e0       	ldi	r27, 0x00	; 0
    1d20:	e2 e3       	ldi	r30, 0x32	; 50
    1d22:	f0 e0       	ldi	r31, 0x00	; 0
    1d24:	80 81       	ld	r24, Z
    1d26:	48 2f       	mov	r20, r24
    1d28:	8b 81       	ldd	r24, Y+3	; 0x03
    1d2a:	28 2f       	mov	r18, r24
    1d2c:	30 e0       	ldi	r19, 0x00	; 0
    1d2e:	81 e0       	ldi	r24, 0x01	; 1
    1d30:	90 e0       	ldi	r25, 0x00	; 0
    1d32:	02 2e       	mov	r0, r18
    1d34:	02 c0       	rjmp	.+4      	; 0x1d3a <DIO_u8SetPinValue+0x1f6>
    1d36:	88 0f       	add	r24, r24
    1d38:	99 1f       	adc	r25, r25
    1d3a:	0a 94       	dec	r0
    1d3c:	e2 f7       	brpl	.-8      	; 0x1d36 <DIO_u8SetPinValue+0x1f2>
    1d3e:	84 2b       	or	r24, r20
    1d40:	8c 93       	st	X, r24
    1d42:	08 c0       	rjmp	.+16     	; 0x1d54 <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState =1; break;
    1d44:	81 e0       	ldi	r24, 0x01	; 1
    1d46:	89 83       	std	Y+1, r24	; 0x01
    1d48:	05 c0       	rjmp	.+10     	; 0x1d54 <DIO_u8SetPinValue+0x210>

			}
		}
		else
		{
			Local_u8ErrorState = 1;
    1d4a:	81 e0       	ldi	r24, 0x01	; 1
    1d4c:	89 83       	std	Y+1, r24	; 0x01
    1d4e:	02 c0       	rjmp	.+4      	; 0x1d54 <DIO_u8SetPinValue+0x210>
		}

	}
	else
	{
		Local_u8ErrorState = 1;
    1d50:	81 e0       	ldi	r24, 0x01	; 1
    1d52:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1d54:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d56:	28 96       	adiw	r28, 0x08	; 8
    1d58:	0f b6       	in	r0, 0x3f	; 63
    1d5a:	f8 94       	cli
    1d5c:	de bf       	out	0x3e, r29	; 62
    1d5e:	0f be       	out	0x3f, r0	; 63
    1d60:	cd bf       	out	0x3d, r28	; 61
    1d62:	cf 91       	pop	r28
    1d64:	df 91       	pop	r29
    1d66:	08 95       	ret

00001d68 <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8port, u8 Copy_u8Value)
{
    1d68:	df 93       	push	r29
    1d6a:	cf 93       	push	r28
    1d6c:	00 d0       	rcall	.+0      	; 0x1d6e <DIO_u8SetPortValue+0x6>
    1d6e:	00 d0       	rcall	.+0      	; 0x1d70 <DIO_u8SetPortValue+0x8>
    1d70:	0f 92       	push	r0
    1d72:	cd b7       	in	r28, 0x3d	; 61
    1d74:	de b7       	in	r29, 0x3e	; 62
    1d76:	8a 83       	std	Y+2, r24	; 0x02
    1d78:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    1d7a:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8port<=DIO_u8PORTD)
    1d7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d7e:	84 30       	cpi	r24, 0x04	; 4
    1d80:	b0 f5       	brcc	.+108    	; 0x1dee <DIO_u8SetPortValue+0x86>
	{
		switch(Copy_u8port)
    1d82:	8a 81       	ldd	r24, Y+2	; 0x02
    1d84:	28 2f       	mov	r18, r24
    1d86:	30 e0       	ldi	r19, 0x00	; 0
    1d88:	3d 83       	std	Y+5, r19	; 0x05
    1d8a:	2c 83       	std	Y+4, r18	; 0x04
    1d8c:	8c 81       	ldd	r24, Y+4	; 0x04
    1d8e:	9d 81       	ldd	r25, Y+5	; 0x05
    1d90:	81 30       	cpi	r24, 0x01	; 1
    1d92:	91 05       	cpc	r25, r1
    1d94:	d1 f0       	breq	.+52     	; 0x1dca <DIO_u8SetPortValue+0x62>
    1d96:	2c 81       	ldd	r18, Y+4	; 0x04
    1d98:	3d 81       	ldd	r19, Y+5	; 0x05
    1d9a:	22 30       	cpi	r18, 0x02	; 2
    1d9c:	31 05       	cpc	r19, r1
    1d9e:	2c f4       	brge	.+10     	; 0x1daa <DIO_u8SetPortValue+0x42>
    1da0:	8c 81       	ldd	r24, Y+4	; 0x04
    1da2:	9d 81       	ldd	r25, Y+5	; 0x05
    1da4:	00 97       	sbiw	r24, 0x00	; 0
    1da6:	61 f0       	breq	.+24     	; 0x1dc0 <DIO_u8SetPortValue+0x58>
    1da8:	1f c0       	rjmp	.+62     	; 0x1de8 <DIO_u8SetPortValue+0x80>
    1daa:	2c 81       	ldd	r18, Y+4	; 0x04
    1dac:	3d 81       	ldd	r19, Y+5	; 0x05
    1dae:	22 30       	cpi	r18, 0x02	; 2
    1db0:	31 05       	cpc	r19, r1
    1db2:	81 f0       	breq	.+32     	; 0x1dd4 <DIO_u8SetPortValue+0x6c>
    1db4:	8c 81       	ldd	r24, Y+4	; 0x04
    1db6:	9d 81       	ldd	r25, Y+5	; 0x05
    1db8:	83 30       	cpi	r24, 0x03	; 3
    1dba:	91 05       	cpc	r25, r1
    1dbc:	81 f0       	breq	.+32     	; 0x1dde <DIO_u8SetPortValue+0x76>
    1dbe:	14 c0       	rjmp	.+40     	; 0x1de8 <DIO_u8SetPortValue+0x80>
		{
		case DIO_u8PORTA: PORTA = Copy_u8Value; break;
    1dc0:	eb e3       	ldi	r30, 0x3B	; 59
    1dc2:	f0 e0       	ldi	r31, 0x00	; 0
    1dc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc6:	80 83       	st	Z, r24
    1dc8:	14 c0       	rjmp	.+40     	; 0x1df2 <DIO_u8SetPortValue+0x8a>
		case DIO_u8PORTB: PORTB = Copy_u8Value; break;
    1dca:	e8 e3       	ldi	r30, 0x38	; 56
    1dcc:	f0 e0       	ldi	r31, 0x00	; 0
    1dce:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd0:	80 83       	st	Z, r24
    1dd2:	0f c0       	rjmp	.+30     	; 0x1df2 <DIO_u8SetPortValue+0x8a>
		case DIO_u8PORTC: PORTC = Copy_u8Value; break;
    1dd4:	e5 e3       	ldi	r30, 0x35	; 53
    1dd6:	f0 e0       	ldi	r31, 0x00	; 0
    1dd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dda:	80 83       	st	Z, r24
    1ddc:	0a c0       	rjmp	.+20     	; 0x1df2 <DIO_u8SetPortValue+0x8a>
		case DIO_u8PORTD: PORTD = Copy_u8Value; break;
    1dde:	e2 e3       	ldi	r30, 0x32	; 50
    1de0:	f0 e0       	ldi	r31, 0x00	; 0
    1de2:	8b 81       	ldd	r24, Y+3	; 0x03
    1de4:	80 83       	st	Z, r24
    1de6:	05 c0       	rjmp	.+10     	; 0x1df2 <DIO_u8SetPortValue+0x8a>
		default: Local_u8ErrorState =1; break;
    1de8:	81 e0       	ldi	r24, 0x01	; 1
    1dea:	89 83       	std	Y+1, r24	; 0x01
    1dec:	02 c0       	rjmp	.+4      	; 0x1df2 <DIO_u8SetPortValue+0x8a>

		}
	}
	else
	{
		Local_u8ErrorState = 1;
    1dee:	81 e0       	ldi	r24, 0x01	; 1
    1df0:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_u8ErrorState;
    1df2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1df4:	0f 90       	pop	r0
    1df6:	0f 90       	pop	r0
    1df8:	0f 90       	pop	r0
    1dfa:	0f 90       	pop	r0
    1dfc:	0f 90       	pop	r0
    1dfe:	cf 91       	pop	r28
    1e00:	df 91       	pop	r29
    1e02:	08 95       	ret

00001e04 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8port, u8 Copy_u8Pin, u8* Copy_Pu8Value)
{
    1e04:	df 93       	push	r29
    1e06:	cf 93       	push	r28
    1e08:	cd b7       	in	r28, 0x3d	; 61
    1e0a:	de b7       	in	r29, 0x3e	; 62
    1e0c:	27 97       	sbiw	r28, 0x07	; 7
    1e0e:	0f b6       	in	r0, 0x3f	; 63
    1e10:	f8 94       	cli
    1e12:	de bf       	out	0x3e, r29	; 62
    1e14:	0f be       	out	0x3f, r0	; 63
    1e16:	cd bf       	out	0x3d, r28	; 61
    1e18:	8a 83       	std	Y+2, r24	; 0x02
    1e1a:	6b 83       	std	Y+3, r22	; 0x03
    1e1c:	5d 83       	std	Y+5, r21	; 0x05
    1e1e:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    1e20:	19 82       	std	Y+1, r1	; 0x01

	if((Copy_Pu8Value != NULL )&&(Copy_u8Pin<=DIO_u8PIN7))
    1e22:	8c 81       	ldd	r24, Y+4	; 0x04
    1e24:	9d 81       	ldd	r25, Y+5	; 0x05
    1e26:	00 97       	sbiw	r24, 0x00	; 0
    1e28:	09 f4       	brne	.+2      	; 0x1e2c <DIO_u8GetPinValue+0x28>
    1e2a:	78 c0       	rjmp	.+240    	; 0x1f1c <DIO_u8GetPinValue+0x118>
    1e2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e2e:	88 30       	cpi	r24, 0x08	; 8
    1e30:	08 f0       	brcs	.+2      	; 0x1e34 <DIO_u8GetPinValue+0x30>
    1e32:	74 c0       	rjmp	.+232    	; 0x1f1c <DIO_u8GetPinValue+0x118>
	{


			switch(Copy_u8port)
    1e34:	8a 81       	ldd	r24, Y+2	; 0x02
    1e36:	28 2f       	mov	r18, r24
    1e38:	30 e0       	ldi	r19, 0x00	; 0
    1e3a:	3f 83       	std	Y+7, r19	; 0x07
    1e3c:	2e 83       	std	Y+6, r18	; 0x06
    1e3e:	4e 81       	ldd	r20, Y+6	; 0x06
    1e40:	5f 81       	ldd	r21, Y+7	; 0x07
    1e42:	41 30       	cpi	r20, 0x01	; 1
    1e44:	51 05       	cpc	r21, r1
    1e46:	59 f1       	breq	.+86     	; 0x1e9e <DIO_u8GetPinValue+0x9a>
    1e48:	8e 81       	ldd	r24, Y+6	; 0x06
    1e4a:	9f 81       	ldd	r25, Y+7	; 0x07
    1e4c:	82 30       	cpi	r24, 0x02	; 2
    1e4e:	91 05       	cpc	r25, r1
    1e50:	34 f4       	brge	.+12     	; 0x1e5e <DIO_u8GetPinValue+0x5a>
    1e52:	2e 81       	ldd	r18, Y+6	; 0x06
    1e54:	3f 81       	ldd	r19, Y+7	; 0x07
    1e56:	21 15       	cp	r18, r1
    1e58:	31 05       	cpc	r19, r1
    1e5a:	69 f0       	breq	.+26     	; 0x1e76 <DIO_u8GetPinValue+0x72>
    1e5c:	5c c0       	rjmp	.+184    	; 0x1f16 <DIO_u8GetPinValue+0x112>
    1e5e:	4e 81       	ldd	r20, Y+6	; 0x06
    1e60:	5f 81       	ldd	r21, Y+7	; 0x07
    1e62:	42 30       	cpi	r20, 0x02	; 2
    1e64:	51 05       	cpc	r21, r1
    1e66:	79 f1       	breq	.+94     	; 0x1ec6 <DIO_u8GetPinValue+0xc2>
    1e68:	8e 81       	ldd	r24, Y+6	; 0x06
    1e6a:	9f 81       	ldd	r25, Y+7	; 0x07
    1e6c:	83 30       	cpi	r24, 0x03	; 3
    1e6e:	91 05       	cpc	r25, r1
    1e70:	09 f4       	brne	.+2      	; 0x1e74 <DIO_u8GetPinValue+0x70>
    1e72:	3d c0       	rjmp	.+122    	; 0x1eee <DIO_u8GetPinValue+0xea>
    1e74:	50 c0       	rjmp	.+160    	; 0x1f16 <DIO_u8GetPinValue+0x112>
			{
			case DIO_u8PORTA: * Copy_Pu8Value = GET_BIT(PINA,Copy_u8Pin); break;
    1e76:	e9 e3       	ldi	r30, 0x39	; 57
    1e78:	f0 e0       	ldi	r31, 0x00	; 0
    1e7a:	80 81       	ld	r24, Z
    1e7c:	28 2f       	mov	r18, r24
    1e7e:	30 e0       	ldi	r19, 0x00	; 0
    1e80:	8b 81       	ldd	r24, Y+3	; 0x03
    1e82:	88 2f       	mov	r24, r24
    1e84:	90 e0       	ldi	r25, 0x00	; 0
    1e86:	a9 01       	movw	r20, r18
    1e88:	02 c0       	rjmp	.+4      	; 0x1e8e <DIO_u8GetPinValue+0x8a>
    1e8a:	55 95       	asr	r21
    1e8c:	47 95       	ror	r20
    1e8e:	8a 95       	dec	r24
    1e90:	e2 f7       	brpl	.-8      	; 0x1e8a <DIO_u8GetPinValue+0x86>
    1e92:	ca 01       	movw	r24, r20
    1e94:	81 70       	andi	r24, 0x01	; 1
    1e96:	ec 81       	ldd	r30, Y+4	; 0x04
    1e98:	fd 81       	ldd	r31, Y+5	; 0x05
    1e9a:	80 83       	st	Z, r24
    1e9c:	41 c0       	rjmp	.+130    	; 0x1f20 <DIO_u8GetPinValue+0x11c>
			case DIO_u8PORTB: * Copy_Pu8Value = GET_BIT(PINB,Copy_u8Pin); break;
    1e9e:	e6 e3       	ldi	r30, 0x36	; 54
    1ea0:	f0 e0       	ldi	r31, 0x00	; 0
    1ea2:	80 81       	ld	r24, Z
    1ea4:	28 2f       	mov	r18, r24
    1ea6:	30 e0       	ldi	r19, 0x00	; 0
    1ea8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eaa:	88 2f       	mov	r24, r24
    1eac:	90 e0       	ldi	r25, 0x00	; 0
    1eae:	a9 01       	movw	r20, r18
    1eb0:	02 c0       	rjmp	.+4      	; 0x1eb6 <DIO_u8GetPinValue+0xb2>
    1eb2:	55 95       	asr	r21
    1eb4:	47 95       	ror	r20
    1eb6:	8a 95       	dec	r24
    1eb8:	e2 f7       	brpl	.-8      	; 0x1eb2 <DIO_u8GetPinValue+0xae>
    1eba:	ca 01       	movw	r24, r20
    1ebc:	81 70       	andi	r24, 0x01	; 1
    1ebe:	ec 81       	ldd	r30, Y+4	; 0x04
    1ec0:	fd 81       	ldd	r31, Y+5	; 0x05
    1ec2:	80 83       	st	Z, r24
    1ec4:	2d c0       	rjmp	.+90     	; 0x1f20 <DIO_u8GetPinValue+0x11c>
			case DIO_u8PORTC: * Copy_Pu8Value = GET_BIT(PINC,Copy_u8Pin); break;
    1ec6:	e3 e3       	ldi	r30, 0x33	; 51
    1ec8:	f0 e0       	ldi	r31, 0x00	; 0
    1eca:	80 81       	ld	r24, Z
    1ecc:	28 2f       	mov	r18, r24
    1ece:	30 e0       	ldi	r19, 0x00	; 0
    1ed0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed2:	88 2f       	mov	r24, r24
    1ed4:	90 e0       	ldi	r25, 0x00	; 0
    1ed6:	a9 01       	movw	r20, r18
    1ed8:	02 c0       	rjmp	.+4      	; 0x1ede <DIO_u8GetPinValue+0xda>
    1eda:	55 95       	asr	r21
    1edc:	47 95       	ror	r20
    1ede:	8a 95       	dec	r24
    1ee0:	e2 f7       	brpl	.-8      	; 0x1eda <DIO_u8GetPinValue+0xd6>
    1ee2:	ca 01       	movw	r24, r20
    1ee4:	81 70       	andi	r24, 0x01	; 1
    1ee6:	ec 81       	ldd	r30, Y+4	; 0x04
    1ee8:	fd 81       	ldd	r31, Y+5	; 0x05
    1eea:	80 83       	st	Z, r24
    1eec:	19 c0       	rjmp	.+50     	; 0x1f20 <DIO_u8GetPinValue+0x11c>
			case DIO_u8PORTD: * Copy_Pu8Value = GET_BIT(PIND,Copy_u8Pin); break;
    1eee:	e0 e3       	ldi	r30, 0x30	; 48
    1ef0:	f0 e0       	ldi	r31, 0x00	; 0
    1ef2:	80 81       	ld	r24, Z
    1ef4:	28 2f       	mov	r18, r24
    1ef6:	30 e0       	ldi	r19, 0x00	; 0
    1ef8:	8b 81       	ldd	r24, Y+3	; 0x03
    1efa:	88 2f       	mov	r24, r24
    1efc:	90 e0       	ldi	r25, 0x00	; 0
    1efe:	a9 01       	movw	r20, r18
    1f00:	02 c0       	rjmp	.+4      	; 0x1f06 <DIO_u8GetPinValue+0x102>
    1f02:	55 95       	asr	r21
    1f04:	47 95       	ror	r20
    1f06:	8a 95       	dec	r24
    1f08:	e2 f7       	brpl	.-8      	; 0x1f02 <DIO_u8GetPinValue+0xfe>
    1f0a:	ca 01       	movw	r24, r20
    1f0c:	81 70       	andi	r24, 0x01	; 1
    1f0e:	ec 81       	ldd	r30, Y+4	; 0x04
    1f10:	fd 81       	ldd	r31, Y+5	; 0x05
    1f12:	80 83       	st	Z, r24
    1f14:	05 c0       	rjmp	.+10     	; 0x1f20 <DIO_u8GetPinValue+0x11c>
			default: Local_u8ErrorState =1; break;
    1f16:	81 e0       	ldi	r24, 0x01	; 1
    1f18:	89 83       	std	Y+1, r24	; 0x01
    1f1a:	02 c0       	rjmp	.+4      	; 0x1f20 <DIO_u8GetPinValue+0x11c>

			}
	}
	else
	{
		Local_u8ErrorState = 1;
    1f1c:	81 e0       	ldi	r24, 0x01	; 1
    1f1e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1f20:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f22:	27 96       	adiw	r28, 0x07	; 7
    1f24:	0f b6       	in	r0, 0x3f	; 63
    1f26:	f8 94       	cli
    1f28:	de bf       	out	0x3e, r29	; 62
    1f2a:	0f be       	out	0x3f, r0	; 63
    1f2c:	cd bf       	out	0x3d, r28	; 61
    1f2e:	cf 91       	pop	r28
    1f30:	df 91       	pop	r29
    1f32:	08 95       	ret

00001f34 <DIO_u8AndWithPort>:

u8 DIO_u8AndWithPort(u8 Copy_u8port, u8 Copy_u8Value)
{
    1f34:	df 93       	push	r29
    1f36:	cf 93       	push	r28
    1f38:	00 d0       	rcall	.+0      	; 0x1f3a <DIO_u8AndWithPort+0x6>
    1f3a:	00 d0       	rcall	.+0      	; 0x1f3c <DIO_u8AndWithPort+0x8>
    1f3c:	0f 92       	push	r0
    1f3e:	cd b7       	in	r28, 0x3d	; 61
    1f40:	de b7       	in	r29, 0x3e	; 62
    1f42:	8a 83       	std	Y+2, r24	; 0x02
    1f44:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Result = 0;
    1f46:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8port)
    1f48:	8a 81       	ldd	r24, Y+2	; 0x02
    1f4a:	28 2f       	mov	r18, r24
    1f4c:	30 e0       	ldi	r19, 0x00	; 0
    1f4e:	3d 83       	std	Y+5, r19	; 0x05
    1f50:	2c 83       	std	Y+4, r18	; 0x04
    1f52:	8c 81       	ldd	r24, Y+4	; 0x04
    1f54:	9d 81       	ldd	r25, Y+5	; 0x05
    1f56:	81 30       	cpi	r24, 0x01	; 1
    1f58:	91 05       	cpc	r25, r1
    1f5a:	e1 f0       	breq	.+56     	; 0x1f94 <DIO_u8AndWithPort+0x60>
    1f5c:	2c 81       	ldd	r18, Y+4	; 0x04
    1f5e:	3d 81       	ldd	r19, Y+5	; 0x05
    1f60:	22 30       	cpi	r18, 0x02	; 2
    1f62:	31 05       	cpc	r19, r1
    1f64:	2c f4       	brge	.+10     	; 0x1f70 <DIO_u8AndWithPort+0x3c>
    1f66:	8c 81       	ldd	r24, Y+4	; 0x04
    1f68:	9d 81       	ldd	r25, Y+5	; 0x05
    1f6a:	00 97       	sbiw	r24, 0x00	; 0
    1f6c:	61 f0       	breq	.+24     	; 0x1f86 <DIO_u8AndWithPort+0x52>
    1f6e:	26 c0       	rjmp	.+76     	; 0x1fbc <DIO_u8AndWithPort+0x88>
    1f70:	2c 81       	ldd	r18, Y+4	; 0x04
    1f72:	3d 81       	ldd	r19, Y+5	; 0x05
    1f74:	22 30       	cpi	r18, 0x02	; 2
    1f76:	31 05       	cpc	r19, r1
    1f78:	a1 f0       	breq	.+40     	; 0x1fa2 <DIO_u8AndWithPort+0x6e>
    1f7a:	8c 81       	ldd	r24, Y+4	; 0x04
    1f7c:	9d 81       	ldd	r25, Y+5	; 0x05
    1f7e:	83 30       	cpi	r24, 0x03	; 3
    1f80:	91 05       	cpc	r25, r1
    1f82:	b1 f0       	breq	.+44     	; 0x1fb0 <DIO_u8AndWithPort+0x7c>
    1f84:	1b c0       	rjmp	.+54     	; 0x1fbc <DIO_u8AndWithPort+0x88>
			{
			case DIO_u8PORTA: Local_u8Result= PORTA & Copy_u8Value; break;
    1f86:	eb e3       	ldi	r30, 0x3B	; 59
    1f88:	f0 e0       	ldi	r31, 0x00	; 0
    1f8a:	90 81       	ld	r25, Z
    1f8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f8e:	89 23       	and	r24, r25
    1f90:	89 83       	std	Y+1, r24	; 0x01
    1f92:	14 c0       	rjmp	.+40     	; 0x1fbc <DIO_u8AndWithPort+0x88>
			case DIO_u8PORTB: Local_u8Result= PORTB & Copy_u8Value; break;
    1f94:	e8 e3       	ldi	r30, 0x38	; 56
    1f96:	f0 e0       	ldi	r31, 0x00	; 0
    1f98:	90 81       	ld	r25, Z
    1f9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f9c:	89 23       	and	r24, r25
    1f9e:	89 83       	std	Y+1, r24	; 0x01
    1fa0:	0d c0       	rjmp	.+26     	; 0x1fbc <DIO_u8AndWithPort+0x88>
			case DIO_u8PORTC: Local_u8Result= PORTC & Copy_u8Value; break;
    1fa2:	e5 e3       	ldi	r30, 0x35	; 53
    1fa4:	f0 e0       	ldi	r31, 0x00	; 0
    1fa6:	90 81       	ld	r25, Z
    1fa8:	8b 81       	ldd	r24, Y+3	; 0x03
    1faa:	89 23       	and	r24, r25
    1fac:	89 83       	std	Y+1, r24	; 0x01
    1fae:	06 c0       	rjmp	.+12     	; 0x1fbc <DIO_u8AndWithPort+0x88>
			case DIO_u8PORTD: Local_u8Result = PORTD & Copy_u8Value; break;
    1fb0:	e2 e3       	ldi	r30, 0x32	; 50
    1fb2:	f0 e0       	ldi	r31, 0x00	; 0
    1fb4:	90 81       	ld	r25, Z
    1fb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb8:	89 23       	and	r24, r25
    1fba:	89 83       	std	Y+1, r24	; 0x01
			default:  break;


			}
	return Local_u8Result;
    1fbc:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fbe:	0f 90       	pop	r0
    1fc0:	0f 90       	pop	r0
    1fc2:	0f 90       	pop	r0
    1fc4:	0f 90       	pop	r0
    1fc6:	0f 90       	pop	r0
    1fc8:	cf 91       	pop	r28
    1fca:	df 91       	pop	r29
    1fcc:	08 95       	ret

00001fce <EXTI_VoidInt0Init>:
/****************************************************************************************************/

/*****************************************     INT0Init    ******************************************/

void EXTI_VoidInt0Init(void)
{
    1fce:	df 93       	push	r29
    1fd0:	cf 93       	push	r28
    1fd2:	cd b7       	in	r28, 0x3d	; 61
    1fd4:	de b7       	in	r29, 0x3e	; 62

	}
#elif INT0_SENSE == RISING_EDGE
	{
		/* Set Sense Control for INT0 for RISING_EDGE*/
		SET_BIT(MCUCR,MCUCR_ISC01);
    1fd6:	a5 e5       	ldi	r26, 0x55	; 85
    1fd8:	b0 e0       	ldi	r27, 0x00	; 0
    1fda:	e5 e5       	ldi	r30, 0x55	; 85
    1fdc:	f0 e0       	ldi	r31, 0x00	; 0
    1fde:	80 81       	ld	r24, Z
    1fe0:	82 60       	ori	r24, 0x02	; 2
    1fe2:	8c 93       	st	X, r24
		SET_BIT(MCUCR,MCUCR_ISC00);
    1fe4:	a5 e5       	ldi	r26, 0x55	; 85
    1fe6:	b0 e0       	ldi	r27, 0x00	; 0
    1fe8:	e5 e5       	ldi	r30, 0x55	; 85
    1fea:	f0 e0       	ldi	r31, 0x00	; 0
    1fec:	80 81       	ld	r24, Z
    1fee:	81 60       	ori	r24, 0x01	; 1
    1ff0:	8c 93       	st	X, r24

	/*Check Peripheral interrupt enable for INT0_INTIAL_STATE */

#if  INT0_INTIAL_STATE == ENABLED
	{
		SET_BIT(GICR,GICR_INT0);
    1ff2:	ab e5       	ldi	r26, 0x5B	; 91
    1ff4:	b0 e0       	ldi	r27, 0x00	; 0
    1ff6:	eb e5       	ldi	r30, 0x5B	; 91
    1ff8:	f0 e0       	ldi	r31, 0x00	; 0
    1ffa:	80 81       	ld	r24, Z
    1ffc:	80 64       	ori	r24, 0x40	; 64
    1ffe:	8c 93       	st	X, r24
#else
	{
#error "Wrong INT0_INTIAL_STATE Configuration option"
	}
#endif
}
    2000:	cf 91       	pop	r28
    2002:	df 91       	pop	r29
    2004:	08 95       	ret

00002006 <EXTI_VoidInt1Init>:

/*****************************************     INT1Init    ******************************************/

void EXTI_VoidInt1Init(void)
{
    2006:	df 93       	push	r29
    2008:	cf 93       	push	r28
    200a:	cd b7       	in	r28, 0x3d	; 61
    200c:	de b7       	in	r29, 0x3e	; 62

	}
#elif INT1_SENSE == FALLING_EDGE
	{
		/* Set Sense Control for INT1 for falling edge*/
		SET_BIT(MCUCR,MCUCR_ISC11);
    200e:	a5 e5       	ldi	r26, 0x55	; 85
    2010:	b0 e0       	ldi	r27, 0x00	; 0
    2012:	e5 e5       	ldi	r30, 0x55	; 85
    2014:	f0 e0       	ldi	r31, 0x00	; 0
    2016:	80 81       	ld	r24, Z
    2018:	88 60       	ori	r24, 0x08	; 8
    201a:	8c 93       	st	X, r24
		CLR_BIT(MCUCR,MCUCR_ISC10);
    201c:	a5 e5       	ldi	r26, 0x55	; 85
    201e:	b0 e0       	ldi	r27, 0x00	; 0
    2020:	e5 e5       	ldi	r30, 0x55	; 85
    2022:	f0 e0       	ldi	r31, 0x00	; 0
    2024:	80 81       	ld	r24, Z
    2026:	8b 7f       	andi	r24, 0xFB	; 251
    2028:	8c 93       	st	X, r24

	/*Check Peripheral interrupt enable for INT1_INTIAL_STATE */

#if  INT1_INTIAL_STATE == ENABLED
	{
		SET_BIT(GICR,GICR_INT1);
    202a:	ab e5       	ldi	r26, 0x5B	; 91
    202c:	b0 e0       	ldi	r27, 0x00	; 0
    202e:	eb e5       	ldi	r30, 0x5B	; 91
    2030:	f0 e0       	ldi	r31, 0x00	; 0
    2032:	80 81       	ld	r24, Z
    2034:	80 68       	ori	r24, 0x80	; 128
    2036:	8c 93       	st	X, r24
#else
	{
#error "Wrong INT1_INTIAL_STATE Configuration option"
	}
#endif
}
    2038:	cf 91       	pop	r28
    203a:	df 91       	pop	r29
    203c:	08 95       	ret

0000203e <EXTI_VoidInt2Init>:

/*****************************************     INT2Init    ******************************************/

void EXTI_VoidInt2Init(void)
{
    203e:	df 93       	push	r29
    2040:	cf 93       	push	r28
    2042:	cd b7       	in	r28, 0x3d	; 61
    2044:	de b7       	in	r29, 0x3e	; 62

	}
#elif INT2_SENSE == RISING_EDGE
	{
		/* Set Sense Control for INT2 for RISING_EDGE*/
		SET_BIT(MCUCSR,MCUCSR_ISC2);
    2046:	a4 e5       	ldi	r26, 0x54	; 84
    2048:	b0 e0       	ldi	r27, 0x00	; 0
    204a:	e4 e5       	ldi	r30, 0x54	; 84
    204c:	f0 e0       	ldi	r31, 0x00	; 0
    204e:	80 81       	ld	r24, Z
    2050:	80 64       	ori	r24, 0x40	; 64
    2052:	8c 93       	st	X, r24

	/*Check Peripheral interrupt enable for INT2_INTIAL_STATE */

#if  INT2_INTIAL_STATE == ENABLED
	{
		SET_BIT(GICR,GICR_INT2);
    2054:	ab e5       	ldi	r26, 0x5B	; 91
    2056:	b0 e0       	ldi	r27, 0x00	; 0
    2058:	eb e5       	ldi	r30, 0x5B	; 91
    205a:	f0 e0       	ldi	r31, 0x00	; 0
    205c:	80 81       	ld	r24, Z
    205e:	80 62       	ori	r24, 0x20	; 32
    2060:	8c 93       	st	X, r24
#else
	{
#error "Wrong INT2_INTIAL_STATE Configuration option"
	}
#endif
}
    2062:	cf 91       	pop	r28
    2064:	df 91       	pop	r29
    2066:	08 95       	ret

00002068 <EXTI_u8IntSetSenseControl>:
/****************************************************************************************************/
/********************************     Init Function By Post Build Method   **************************/
/****************************************************************************************************/

u8 EXTI_u8IntSetSenseControl(u8 Copy_u8Int,u8 Copy_u8Sense)
{
    2068:	df 93       	push	r29
    206a:	cf 93       	push	r28
    206c:	cd b7       	in	r28, 0x3d	; 61
    206e:	de b7       	in	r29, 0x3e	; 62
    2070:	29 97       	sbiw	r28, 0x09	; 9
    2072:	0f b6       	in	r0, 0x3f	; 63
    2074:	f8 94       	cli
    2076:	de bf       	out	0x3e, r29	; 62
    2078:	0f be       	out	0x3f, r0	; 63
    207a:	cd bf       	out	0x3d, r28	; 61
    207c:	8a 83       	std	Y+2, r24	; 0x02
    207e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = OK;
    2080:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Int == INT0)
    2082:	8a 81       	ldd	r24, Y+2	; 0x02
    2084:	86 30       	cpi	r24, 0x06	; 6
    2086:	09 f0       	breq	.+2      	; 0x208a <EXTI_u8IntSetSenseControl+0x22>
    2088:	5f c0       	rjmp	.+190    	; 0x2148 <EXTI_u8IntSetSenseControl+0xe0>
	{
		switch(Copy_u8Sense)
    208a:	8b 81       	ldd	r24, Y+3	; 0x03
    208c:	28 2f       	mov	r18, r24
    208e:	30 e0       	ldi	r19, 0x00	; 0
    2090:	39 87       	std	Y+9, r19	; 0x09
    2092:	28 87       	std	Y+8, r18	; 0x08
    2094:	88 85       	ldd	r24, Y+8	; 0x08
    2096:	99 85       	ldd	r25, Y+9	; 0x09
    2098:	82 30       	cpi	r24, 0x02	; 2
    209a:	91 05       	cpc	r25, r1
    209c:	29 f1       	breq	.+74     	; 0x20e8 <EXTI_u8IntSetSenseControl+0x80>
    209e:	28 85       	ldd	r18, Y+8	; 0x08
    20a0:	39 85       	ldd	r19, Y+9	; 0x09
    20a2:	23 30       	cpi	r18, 0x03	; 3
    20a4:	31 05       	cpc	r19, r1
    20a6:	34 f4       	brge	.+12     	; 0x20b4 <EXTI_u8IntSetSenseControl+0x4c>
    20a8:	88 85       	ldd	r24, Y+8	; 0x08
    20aa:	99 85       	ldd	r25, Y+9	; 0x09
    20ac:	81 30       	cpi	r24, 0x01	; 1
    20ae:	91 05       	cpc	r25, r1
    20b0:	61 f0       	breq	.+24     	; 0x20ca <EXTI_u8IntSetSenseControl+0x62>
    20b2:	47 c0       	rjmp	.+142    	; 0x2142 <EXTI_u8IntSetSenseControl+0xda>
    20b4:	28 85       	ldd	r18, Y+8	; 0x08
    20b6:	39 85       	ldd	r19, Y+9	; 0x09
    20b8:	23 30       	cpi	r18, 0x03	; 3
    20ba:	31 05       	cpc	r19, r1
    20bc:	21 f1       	breq	.+72     	; 0x2106 <EXTI_u8IntSetSenseControl+0x9e>
    20be:	88 85       	ldd	r24, Y+8	; 0x08
    20c0:	99 85       	ldd	r25, Y+9	; 0x09
    20c2:	84 30       	cpi	r24, 0x04	; 4
    20c4:	91 05       	cpc	r25, r1
    20c6:	71 f1       	breq	.+92     	; 0x2124 <EXTI_u8IntSetSenseControl+0xbc>
    20c8:	3c c0       	rjmp	.+120    	; 0x2142 <EXTI_u8IntSetSenseControl+0xda>
		{
		case LOW_LEVEL:    CLR_BIT(MCUCR,MCUCR_ISC00);    CLR_BIT(MCUCR,MCUCR_ISC01);    break;
    20ca:	a5 e5       	ldi	r26, 0x55	; 85
    20cc:	b0 e0       	ldi	r27, 0x00	; 0
    20ce:	e5 e5       	ldi	r30, 0x55	; 85
    20d0:	f0 e0       	ldi	r31, 0x00	; 0
    20d2:	80 81       	ld	r24, Z
    20d4:	8e 7f       	andi	r24, 0xFE	; 254
    20d6:	8c 93       	st	X, r24
    20d8:	a5 e5       	ldi	r26, 0x55	; 85
    20da:	b0 e0       	ldi	r27, 0x00	; 0
    20dc:	e5 e5       	ldi	r30, 0x55	; 85
    20de:	f0 e0       	ldi	r31, 0x00	; 0
    20e0:	80 81       	ld	r24, Z
    20e2:	8d 7f       	andi	r24, 0xFD	; 253
    20e4:	8c 93       	st	X, r24
    20e6:	bb c0       	rjmp	.+374    	; 0x225e <EXTI_u8IntSetSenseControl+0x1f6>
		case ON_CHANGE:    SET_BIT(MCUCR,MCUCR_ISC00);    CLR_BIT(MCUCR,MCUCR_ISC01);    break;
    20e8:	a5 e5       	ldi	r26, 0x55	; 85
    20ea:	b0 e0       	ldi	r27, 0x00	; 0
    20ec:	e5 e5       	ldi	r30, 0x55	; 85
    20ee:	f0 e0       	ldi	r31, 0x00	; 0
    20f0:	80 81       	ld	r24, Z
    20f2:	81 60       	ori	r24, 0x01	; 1
    20f4:	8c 93       	st	X, r24
    20f6:	a5 e5       	ldi	r26, 0x55	; 85
    20f8:	b0 e0       	ldi	r27, 0x00	; 0
    20fa:	e5 e5       	ldi	r30, 0x55	; 85
    20fc:	f0 e0       	ldi	r31, 0x00	; 0
    20fe:	80 81       	ld	r24, Z
    2100:	8d 7f       	andi	r24, 0xFD	; 253
    2102:	8c 93       	st	X, r24
    2104:	ac c0       	rjmp	.+344    	; 0x225e <EXTI_u8IntSetSenseControl+0x1f6>
		case FALLING_EDGE: SET_BIT(MCUCR,MCUCR_ISC01);    CLR_BIT(MCUCR,MCUCR_ISC00);    break;
    2106:	a5 e5       	ldi	r26, 0x55	; 85
    2108:	b0 e0       	ldi	r27, 0x00	; 0
    210a:	e5 e5       	ldi	r30, 0x55	; 85
    210c:	f0 e0       	ldi	r31, 0x00	; 0
    210e:	80 81       	ld	r24, Z
    2110:	82 60       	ori	r24, 0x02	; 2
    2112:	8c 93       	st	X, r24
    2114:	a5 e5       	ldi	r26, 0x55	; 85
    2116:	b0 e0       	ldi	r27, 0x00	; 0
    2118:	e5 e5       	ldi	r30, 0x55	; 85
    211a:	f0 e0       	ldi	r31, 0x00	; 0
    211c:	80 81       	ld	r24, Z
    211e:	8e 7f       	andi	r24, 0xFE	; 254
    2120:	8c 93       	st	X, r24
    2122:	9d c0       	rjmp	.+314    	; 0x225e <EXTI_u8IntSetSenseControl+0x1f6>
		case RISING_EDGE:  SET_BIT(MCUCR,MCUCR_ISC01);    SET_BIT(MCUCR,MCUCR_ISC00);    break;
    2124:	a5 e5       	ldi	r26, 0x55	; 85
    2126:	b0 e0       	ldi	r27, 0x00	; 0
    2128:	e5 e5       	ldi	r30, 0x55	; 85
    212a:	f0 e0       	ldi	r31, 0x00	; 0
    212c:	80 81       	ld	r24, Z
    212e:	82 60       	ori	r24, 0x02	; 2
    2130:	8c 93       	st	X, r24
    2132:	a5 e5       	ldi	r26, 0x55	; 85
    2134:	b0 e0       	ldi	r27, 0x00	; 0
    2136:	e5 e5       	ldi	r30, 0x55	; 85
    2138:	f0 e0       	ldi	r31, 0x00	; 0
    213a:	80 81       	ld	r24, Z
    213c:	81 60       	ori	r24, 0x01	; 1
    213e:	8c 93       	st	X, r24
    2140:	8e c0       	rjmp	.+284    	; 0x225e <EXTI_u8IntSetSenseControl+0x1f6>
		default:           Local_u8ErrorState = NOK;                                     break;
    2142:	81 e0       	ldi	r24, 0x01	; 1
    2144:	89 83       	std	Y+1, r24	; 0x01
    2146:	8b c0       	rjmp	.+278    	; 0x225e <EXTI_u8IntSetSenseControl+0x1f6>
		}
	}
	else if(Copy_u8Int == INT1)
    2148:	8a 81       	ldd	r24, Y+2	; 0x02
    214a:	87 30       	cpi	r24, 0x07	; 7
    214c:	09 f0       	breq	.+2      	; 0x2150 <EXTI_u8IntSetSenseControl+0xe8>
    214e:	5f c0       	rjmp	.+190    	; 0x220e <EXTI_u8IntSetSenseControl+0x1a6>
	{
		switch(Copy_u8Sense)
    2150:	8b 81       	ldd	r24, Y+3	; 0x03
    2152:	28 2f       	mov	r18, r24
    2154:	30 e0       	ldi	r19, 0x00	; 0
    2156:	3f 83       	std	Y+7, r19	; 0x07
    2158:	2e 83       	std	Y+6, r18	; 0x06
    215a:	8e 81       	ldd	r24, Y+6	; 0x06
    215c:	9f 81       	ldd	r25, Y+7	; 0x07
    215e:	82 30       	cpi	r24, 0x02	; 2
    2160:	91 05       	cpc	r25, r1
    2162:	29 f1       	breq	.+74     	; 0x21ae <EXTI_u8IntSetSenseControl+0x146>
    2164:	2e 81       	ldd	r18, Y+6	; 0x06
    2166:	3f 81       	ldd	r19, Y+7	; 0x07
    2168:	23 30       	cpi	r18, 0x03	; 3
    216a:	31 05       	cpc	r19, r1
    216c:	34 f4       	brge	.+12     	; 0x217a <EXTI_u8IntSetSenseControl+0x112>
    216e:	8e 81       	ldd	r24, Y+6	; 0x06
    2170:	9f 81       	ldd	r25, Y+7	; 0x07
    2172:	81 30       	cpi	r24, 0x01	; 1
    2174:	91 05       	cpc	r25, r1
    2176:	61 f0       	breq	.+24     	; 0x2190 <EXTI_u8IntSetSenseControl+0x128>
    2178:	47 c0       	rjmp	.+142    	; 0x2208 <EXTI_u8IntSetSenseControl+0x1a0>
    217a:	2e 81       	ldd	r18, Y+6	; 0x06
    217c:	3f 81       	ldd	r19, Y+7	; 0x07
    217e:	23 30       	cpi	r18, 0x03	; 3
    2180:	31 05       	cpc	r19, r1
    2182:	21 f1       	breq	.+72     	; 0x21cc <EXTI_u8IntSetSenseControl+0x164>
    2184:	8e 81       	ldd	r24, Y+6	; 0x06
    2186:	9f 81       	ldd	r25, Y+7	; 0x07
    2188:	84 30       	cpi	r24, 0x04	; 4
    218a:	91 05       	cpc	r25, r1
    218c:	71 f1       	breq	.+92     	; 0x21ea <EXTI_u8IntSetSenseControl+0x182>
    218e:	3c c0       	rjmp	.+120    	; 0x2208 <EXTI_u8IntSetSenseControl+0x1a0>
		{
		case LOW_LEVEL:    CLR_BIT(MCUCR,MCUCR_ISC10);    CLR_BIT(MCUCR,MCUCR_ISC11);    break;
    2190:	a5 e5       	ldi	r26, 0x55	; 85
    2192:	b0 e0       	ldi	r27, 0x00	; 0
    2194:	e5 e5       	ldi	r30, 0x55	; 85
    2196:	f0 e0       	ldi	r31, 0x00	; 0
    2198:	80 81       	ld	r24, Z
    219a:	8b 7f       	andi	r24, 0xFB	; 251
    219c:	8c 93       	st	X, r24
    219e:	a5 e5       	ldi	r26, 0x55	; 85
    21a0:	b0 e0       	ldi	r27, 0x00	; 0
    21a2:	e5 e5       	ldi	r30, 0x55	; 85
    21a4:	f0 e0       	ldi	r31, 0x00	; 0
    21a6:	80 81       	ld	r24, Z
    21a8:	87 7f       	andi	r24, 0xF7	; 247
    21aa:	8c 93       	st	X, r24
    21ac:	58 c0       	rjmp	.+176    	; 0x225e <EXTI_u8IntSetSenseControl+0x1f6>
		case ON_CHANGE:    SET_BIT(MCUCR,MCUCR_ISC10);    CLR_BIT(MCUCR,MCUCR_ISC11);    break;
    21ae:	a5 e5       	ldi	r26, 0x55	; 85
    21b0:	b0 e0       	ldi	r27, 0x00	; 0
    21b2:	e5 e5       	ldi	r30, 0x55	; 85
    21b4:	f0 e0       	ldi	r31, 0x00	; 0
    21b6:	80 81       	ld	r24, Z
    21b8:	84 60       	ori	r24, 0x04	; 4
    21ba:	8c 93       	st	X, r24
    21bc:	a5 e5       	ldi	r26, 0x55	; 85
    21be:	b0 e0       	ldi	r27, 0x00	; 0
    21c0:	e5 e5       	ldi	r30, 0x55	; 85
    21c2:	f0 e0       	ldi	r31, 0x00	; 0
    21c4:	80 81       	ld	r24, Z
    21c6:	87 7f       	andi	r24, 0xF7	; 247
    21c8:	8c 93       	st	X, r24
    21ca:	49 c0       	rjmp	.+146    	; 0x225e <EXTI_u8IntSetSenseControl+0x1f6>
		case FALLING_EDGE: SET_BIT(MCUCR,MCUCR_ISC11);    CLR_BIT(MCUCR,MCUCR_ISC10);    break;
    21cc:	a5 e5       	ldi	r26, 0x55	; 85
    21ce:	b0 e0       	ldi	r27, 0x00	; 0
    21d0:	e5 e5       	ldi	r30, 0x55	; 85
    21d2:	f0 e0       	ldi	r31, 0x00	; 0
    21d4:	80 81       	ld	r24, Z
    21d6:	88 60       	ori	r24, 0x08	; 8
    21d8:	8c 93       	st	X, r24
    21da:	a5 e5       	ldi	r26, 0x55	; 85
    21dc:	b0 e0       	ldi	r27, 0x00	; 0
    21de:	e5 e5       	ldi	r30, 0x55	; 85
    21e0:	f0 e0       	ldi	r31, 0x00	; 0
    21e2:	80 81       	ld	r24, Z
    21e4:	8b 7f       	andi	r24, 0xFB	; 251
    21e6:	8c 93       	st	X, r24
    21e8:	3a c0       	rjmp	.+116    	; 0x225e <EXTI_u8IntSetSenseControl+0x1f6>
		case RISING_EDGE:  SET_BIT(MCUCR,MCUCR_ISC11);    SET_BIT(MCUCR,MCUCR_ISC10);    break;
    21ea:	a5 e5       	ldi	r26, 0x55	; 85
    21ec:	b0 e0       	ldi	r27, 0x00	; 0
    21ee:	e5 e5       	ldi	r30, 0x55	; 85
    21f0:	f0 e0       	ldi	r31, 0x00	; 0
    21f2:	80 81       	ld	r24, Z
    21f4:	88 60       	ori	r24, 0x08	; 8
    21f6:	8c 93       	st	X, r24
    21f8:	a5 e5       	ldi	r26, 0x55	; 85
    21fa:	b0 e0       	ldi	r27, 0x00	; 0
    21fc:	e5 e5       	ldi	r30, 0x55	; 85
    21fe:	f0 e0       	ldi	r31, 0x00	; 0
    2200:	80 81       	ld	r24, Z
    2202:	84 60       	ori	r24, 0x04	; 4
    2204:	8c 93       	st	X, r24
    2206:	2b c0       	rjmp	.+86     	; 0x225e <EXTI_u8IntSetSenseControl+0x1f6>
		default:           Local_u8ErrorState = NOK;                                     break;
    2208:	81 e0       	ldi	r24, 0x01	; 1
    220a:	89 83       	std	Y+1, r24	; 0x01
    220c:	28 c0       	rjmp	.+80     	; 0x225e <EXTI_u8IntSetSenseControl+0x1f6>
		}
	}
	else if(Copy_u8Int == INT2)
    220e:	8a 81       	ldd	r24, Y+2	; 0x02
    2210:	85 30       	cpi	r24, 0x05	; 5
    2212:	19 f5       	brne	.+70     	; 0x225a <EXTI_u8IntSetSenseControl+0x1f2>
	{
		switch(Copy_u8Sense)
    2214:	8b 81       	ldd	r24, Y+3	; 0x03
    2216:	28 2f       	mov	r18, r24
    2218:	30 e0       	ldi	r19, 0x00	; 0
    221a:	3d 83       	std	Y+5, r19	; 0x05
    221c:	2c 83       	std	Y+4, r18	; 0x04
    221e:	8c 81       	ldd	r24, Y+4	; 0x04
    2220:	9d 81       	ldd	r25, Y+5	; 0x05
    2222:	83 30       	cpi	r24, 0x03	; 3
    2224:	91 05       	cpc	r25, r1
    2226:	31 f0       	breq	.+12     	; 0x2234 <EXTI_u8IntSetSenseControl+0x1cc>
    2228:	2c 81       	ldd	r18, Y+4	; 0x04
    222a:	3d 81       	ldd	r19, Y+5	; 0x05
    222c:	24 30       	cpi	r18, 0x04	; 4
    222e:	31 05       	cpc	r19, r1
    2230:	49 f0       	breq	.+18     	; 0x2244 <EXTI_u8IntSetSenseControl+0x1dc>
    2232:	10 c0       	rjmp	.+32     	; 0x2254 <EXTI_u8IntSetSenseControl+0x1ec>
		{
		case FALLING_EDGE: CLR_BIT(MCUCSR,MCUCSR_ISC2);    break;
    2234:	a4 e5       	ldi	r26, 0x54	; 84
    2236:	b0 e0       	ldi	r27, 0x00	; 0
    2238:	e4 e5       	ldi	r30, 0x54	; 84
    223a:	f0 e0       	ldi	r31, 0x00	; 0
    223c:	80 81       	ld	r24, Z
    223e:	8f 7b       	andi	r24, 0xBF	; 191
    2240:	8c 93       	st	X, r24
    2242:	0d c0       	rjmp	.+26     	; 0x225e <EXTI_u8IntSetSenseControl+0x1f6>
		case RISING_EDGE:  SET_BIT(MCUCSR,MCUCSR_ISC2);    break;
    2244:	a4 e5       	ldi	r26, 0x54	; 84
    2246:	b0 e0       	ldi	r27, 0x00	; 0
    2248:	e4 e5       	ldi	r30, 0x54	; 84
    224a:	f0 e0       	ldi	r31, 0x00	; 0
    224c:	80 81       	ld	r24, Z
    224e:	80 64       	ori	r24, 0x40	; 64
    2250:	8c 93       	st	X, r24
    2252:	05 c0       	rjmp	.+10     	; 0x225e <EXTI_u8IntSetSenseControl+0x1f6>
		default:           Local_u8ErrorState = NOK;                                     break;
    2254:	81 e0       	ldi	r24, 0x01	; 1
    2256:	89 83       	std	Y+1, r24	; 0x01
    2258:	02 c0       	rjmp	.+4      	; 0x225e <EXTI_u8IntSetSenseControl+0x1f6>
		}
	}
	else
	{
		Local_u8ErrorState = NOK;
    225a:	81 e0       	ldi	r24, 0x01	; 1
    225c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    225e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2260:	29 96       	adiw	r28, 0x09	; 9
    2262:	0f b6       	in	r0, 0x3f	; 63
    2264:	f8 94       	cli
    2266:	de bf       	out	0x3e, r29	; 62
    2268:	0f be       	out	0x3f, r0	; 63
    226a:	cd bf       	out	0x3d, r28	; 61
    226c:	cf 91       	pop	r28
    226e:	df 91       	pop	r29
    2270:	08 95       	ret

00002272 <EXTI_u8IntEnable>:
/*******************************************  IntEnable   ******************************************/
u8 EXTI_u8IntEnable(u8 Copy_u8Int)
{
    2272:	df 93       	push	r29
    2274:	cf 93       	push	r28
    2276:	00 d0       	rcall	.+0      	; 0x2278 <EXTI_u8IntEnable+0x6>
    2278:	00 d0       	rcall	.+0      	; 0x227a <EXTI_u8IntEnable+0x8>
    227a:	cd b7       	in	r28, 0x3d	; 61
    227c:	de b7       	in	r29, 0x3e	; 62
    227e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    2280:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Int)
    2282:	8a 81       	ldd	r24, Y+2	; 0x02
    2284:	28 2f       	mov	r18, r24
    2286:	30 e0       	ldi	r19, 0x00	; 0
    2288:	3c 83       	std	Y+4, r19	; 0x04
    228a:	2b 83       	std	Y+3, r18	; 0x03
    228c:	8b 81       	ldd	r24, Y+3	; 0x03
    228e:	9c 81       	ldd	r25, Y+4	; 0x04
    2290:	86 30       	cpi	r24, 0x06	; 6
    2292:	91 05       	cpc	r25, r1
    2294:	59 f0       	breq	.+22     	; 0x22ac <EXTI_u8IntEnable+0x3a>
    2296:	2b 81       	ldd	r18, Y+3	; 0x03
    2298:	3c 81       	ldd	r19, Y+4	; 0x04
    229a:	27 30       	cpi	r18, 0x07	; 7
    229c:	31 05       	cpc	r19, r1
    229e:	71 f0       	breq	.+28     	; 0x22bc <EXTI_u8IntEnable+0x4a>
    22a0:	8b 81       	ldd	r24, Y+3	; 0x03
    22a2:	9c 81       	ldd	r25, Y+4	; 0x04
    22a4:	85 30       	cpi	r24, 0x05	; 5
    22a6:	91 05       	cpc	r25, r1
    22a8:	89 f0       	breq	.+34     	; 0x22cc <EXTI_u8IntEnable+0x5a>
    22aa:	18 c0       	rjmp	.+48     	; 0x22dc <EXTI_u8IntEnable+0x6a>
	{
	case INT0:  SET_BIT(GICR,GICR_INT0);  break;
    22ac:	ab e5       	ldi	r26, 0x5B	; 91
    22ae:	b0 e0       	ldi	r27, 0x00	; 0
    22b0:	eb e5       	ldi	r30, 0x5B	; 91
    22b2:	f0 e0       	ldi	r31, 0x00	; 0
    22b4:	80 81       	ld	r24, Z
    22b6:	80 64       	ori	r24, 0x40	; 64
    22b8:	8c 93       	st	X, r24
    22ba:	12 c0       	rjmp	.+36     	; 0x22e0 <EXTI_u8IntEnable+0x6e>
	case INT1:  SET_BIT(GICR,GICR_INT1);  break;
    22bc:	ab e5       	ldi	r26, 0x5B	; 91
    22be:	b0 e0       	ldi	r27, 0x00	; 0
    22c0:	eb e5       	ldi	r30, 0x5B	; 91
    22c2:	f0 e0       	ldi	r31, 0x00	; 0
    22c4:	80 81       	ld	r24, Z
    22c6:	80 68       	ori	r24, 0x80	; 128
    22c8:	8c 93       	st	X, r24
    22ca:	0a c0       	rjmp	.+20     	; 0x22e0 <EXTI_u8IntEnable+0x6e>
	case INT2:  SET_BIT(GICR,GICR_INT2);  break;
    22cc:	ab e5       	ldi	r26, 0x5B	; 91
    22ce:	b0 e0       	ldi	r27, 0x00	; 0
    22d0:	eb e5       	ldi	r30, 0x5B	; 91
    22d2:	f0 e0       	ldi	r31, 0x00	; 0
    22d4:	80 81       	ld	r24, Z
    22d6:	80 62       	ori	r24, 0x20	; 32
    22d8:	8c 93       	st	X, r24
    22da:	02 c0       	rjmp	.+4      	; 0x22e0 <EXTI_u8IntEnable+0x6e>
	default:    Local_u8ErrorState = NOK; break;
    22dc:	81 e0       	ldi	r24, 0x01	; 1
    22de:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    22e0:	89 81       	ldd	r24, Y+1	; 0x01
}
    22e2:	0f 90       	pop	r0
    22e4:	0f 90       	pop	r0
    22e6:	0f 90       	pop	r0
    22e8:	0f 90       	pop	r0
    22ea:	cf 91       	pop	r28
    22ec:	df 91       	pop	r29
    22ee:	08 95       	ret

000022f0 <EXTI_u8IntDisable>:

/*******************************************  IntDisable   ******************************************/
u8 EXTI_u8IntDisable(u8 Copy_u8Int)
{
    22f0:	df 93       	push	r29
    22f2:	cf 93       	push	r28
    22f4:	00 d0       	rcall	.+0      	; 0x22f6 <EXTI_u8IntDisable+0x6>
    22f6:	00 d0       	rcall	.+0      	; 0x22f8 <EXTI_u8IntDisable+0x8>
    22f8:	cd b7       	in	r28, 0x3d	; 61
    22fa:	de b7       	in	r29, 0x3e	; 62
    22fc:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    22fe:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Int)
    2300:	8a 81       	ldd	r24, Y+2	; 0x02
    2302:	28 2f       	mov	r18, r24
    2304:	30 e0       	ldi	r19, 0x00	; 0
    2306:	3c 83       	std	Y+4, r19	; 0x04
    2308:	2b 83       	std	Y+3, r18	; 0x03
    230a:	8b 81       	ldd	r24, Y+3	; 0x03
    230c:	9c 81       	ldd	r25, Y+4	; 0x04
    230e:	86 30       	cpi	r24, 0x06	; 6
    2310:	91 05       	cpc	r25, r1
    2312:	59 f0       	breq	.+22     	; 0x232a <EXTI_u8IntDisable+0x3a>
    2314:	2b 81       	ldd	r18, Y+3	; 0x03
    2316:	3c 81       	ldd	r19, Y+4	; 0x04
    2318:	27 30       	cpi	r18, 0x07	; 7
    231a:	31 05       	cpc	r19, r1
    231c:	71 f0       	breq	.+28     	; 0x233a <EXTI_u8IntDisable+0x4a>
    231e:	8b 81       	ldd	r24, Y+3	; 0x03
    2320:	9c 81       	ldd	r25, Y+4	; 0x04
    2322:	85 30       	cpi	r24, 0x05	; 5
    2324:	91 05       	cpc	r25, r1
    2326:	89 f0       	breq	.+34     	; 0x234a <EXTI_u8IntDisable+0x5a>
    2328:	18 c0       	rjmp	.+48     	; 0x235a <EXTI_u8IntDisable+0x6a>
	{
	case INT0:  CLR_BIT(GICR,GICR_INT0);  break;
    232a:	ab e5       	ldi	r26, 0x5B	; 91
    232c:	b0 e0       	ldi	r27, 0x00	; 0
    232e:	eb e5       	ldi	r30, 0x5B	; 91
    2330:	f0 e0       	ldi	r31, 0x00	; 0
    2332:	80 81       	ld	r24, Z
    2334:	8f 7b       	andi	r24, 0xBF	; 191
    2336:	8c 93       	st	X, r24
    2338:	12 c0       	rjmp	.+36     	; 0x235e <EXTI_u8IntDisable+0x6e>
	case INT1:  CLR_BIT(GICR,GICR_INT1);  break;
    233a:	ab e5       	ldi	r26, 0x5B	; 91
    233c:	b0 e0       	ldi	r27, 0x00	; 0
    233e:	eb e5       	ldi	r30, 0x5B	; 91
    2340:	f0 e0       	ldi	r31, 0x00	; 0
    2342:	80 81       	ld	r24, Z
    2344:	8f 77       	andi	r24, 0x7F	; 127
    2346:	8c 93       	st	X, r24
    2348:	0a c0       	rjmp	.+20     	; 0x235e <EXTI_u8IntDisable+0x6e>
	case INT2:  CLR_BIT(GICR,GICR_INT2);  break;
    234a:	ab e5       	ldi	r26, 0x5B	; 91
    234c:	b0 e0       	ldi	r27, 0x00	; 0
    234e:	eb e5       	ldi	r30, 0x5B	; 91
    2350:	f0 e0       	ldi	r31, 0x00	; 0
    2352:	80 81       	ld	r24, Z
    2354:	8f 7d       	andi	r24, 0xDF	; 223
    2356:	8c 93       	st	X, r24
    2358:	02 c0       	rjmp	.+4      	; 0x235e <EXTI_u8IntDisable+0x6e>
	default:    Local_u8ErrorState = NOK; break;
    235a:	81 e0       	ldi	r24, 0x01	; 1
    235c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    235e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2360:	0f 90       	pop	r0
    2362:	0f 90       	pop	r0
    2364:	0f 90       	pop	r0
    2366:	0f 90       	pop	r0
    2368:	cf 91       	pop	r28
    236a:	df 91       	pop	r29
    236c:	08 95       	ret

0000236e <EXTI_u8Int0SetCallBack>:
/****************************************************************************************************/
/*******************************************Call Back Function **************************************/
/****************************************************************************************************/

u8 EXTI_u8Int0SetCallBack(void(*Copy_pvInt0Func)(void))
{
    236e:	df 93       	push	r29
    2370:	cf 93       	push	r28
    2372:	00 d0       	rcall	.+0      	; 0x2374 <EXTI_u8Int0SetCallBack+0x6>
    2374:	0f 92       	push	r0
    2376:	cd b7       	in	r28, 0x3d	; 61
    2378:	de b7       	in	r29, 0x3e	; 62
    237a:	9b 83       	std	Y+3, r25	; 0x03
    237c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
    237e:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_pvInt0Func != NULL)
    2380:	8a 81       	ldd	r24, Y+2	; 0x02
    2382:	9b 81       	ldd	r25, Y+3	; 0x03
    2384:	00 97       	sbiw	r24, 0x00	; 0
    2386:	39 f0       	breq	.+14     	; 0x2396 <EXTI_u8Int0SetCallBack+0x28>
	{
		EXTI_pvInt0Func = Copy_pvInt0Func;
    2388:	8a 81       	ldd	r24, Y+2	; 0x02
    238a:	9b 81       	ldd	r25, Y+3	; 0x03
    238c:	90 93 9d 01 	sts	0x019D, r25
    2390:	80 93 9c 01 	sts	0x019C, r24
    2394:	02 c0       	rjmp	.+4      	; 0x239a <EXTI_u8Int0SetCallBack+0x2c>

	}
	else {

		Local_u8ErrorState = NULL_POINTER;
    2396:	82 e0       	ldi	r24, 0x02	; 2
    2398:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_u8ErrorState;
    239a:	89 81       	ldd	r24, Y+1	; 0x01
}
    239c:	0f 90       	pop	r0
    239e:	0f 90       	pop	r0
    23a0:	0f 90       	pop	r0
    23a2:	cf 91       	pop	r28
    23a4:	df 91       	pop	r29
    23a6:	08 95       	ret

000023a8 <EXTI_u8Int1SetCallBack>:

u8 EXTI_u8Int1SetCallBack(void(*Copy_pvInt1Func)(void))
{
    23a8:	df 93       	push	r29
    23aa:	cf 93       	push	r28
    23ac:	00 d0       	rcall	.+0      	; 0x23ae <EXTI_u8Int1SetCallBack+0x6>
    23ae:	0f 92       	push	r0
    23b0:	cd b7       	in	r28, 0x3d	; 61
    23b2:	de b7       	in	r29, 0x3e	; 62
    23b4:	9b 83       	std	Y+3, r25	; 0x03
    23b6:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
    23b8:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_pvInt1Func != NULL)
    23ba:	8a 81       	ldd	r24, Y+2	; 0x02
    23bc:	9b 81       	ldd	r25, Y+3	; 0x03
    23be:	00 97       	sbiw	r24, 0x00	; 0
    23c0:	39 f0       	breq	.+14     	; 0x23d0 <EXTI_u8Int1SetCallBack+0x28>
	{
		EXTI_pvInt1Func = Copy_pvInt1Func;
    23c2:	8a 81       	ldd	r24, Y+2	; 0x02
    23c4:	9b 81       	ldd	r25, Y+3	; 0x03
    23c6:	90 93 9f 01 	sts	0x019F, r25
    23ca:	80 93 9e 01 	sts	0x019E, r24
    23ce:	02 c0       	rjmp	.+4      	; 0x23d4 <EXTI_u8Int1SetCallBack+0x2c>

	}
	else {

		Local_u8ErrorState = NULL_POINTER;
    23d0:	82 e0       	ldi	r24, 0x02	; 2
    23d2:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_u8ErrorState;
    23d4:	89 81       	ldd	r24, Y+1	; 0x01
}
    23d6:	0f 90       	pop	r0
    23d8:	0f 90       	pop	r0
    23da:	0f 90       	pop	r0
    23dc:	cf 91       	pop	r28
    23de:	df 91       	pop	r29
    23e0:	08 95       	ret

000023e2 <EXTI_u8Int2SetCallBack>:

u8 EXTI_u8Int2SetCallBack(void(*Copy_pvInt2Func)(void))
{
    23e2:	df 93       	push	r29
    23e4:	cf 93       	push	r28
    23e6:	00 d0       	rcall	.+0      	; 0x23e8 <EXTI_u8Int2SetCallBack+0x6>
    23e8:	0f 92       	push	r0
    23ea:	cd b7       	in	r28, 0x3d	; 61
    23ec:	de b7       	in	r29, 0x3e	; 62
    23ee:	9b 83       	std	Y+3, r25	; 0x03
    23f0:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState =OK;
    23f2:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvInt2Func != NULL)
    23f4:	8a 81       	ldd	r24, Y+2	; 0x02
    23f6:	9b 81       	ldd	r25, Y+3	; 0x03
    23f8:	00 97       	sbiw	r24, 0x00	; 0
    23fa:	39 f0       	breq	.+14     	; 0x240a <EXTI_u8Int2SetCallBack+0x28>
	{
		EXTI_pvInt2Func = Copy_pvInt2Func;
    23fc:	8a 81       	ldd	r24, Y+2	; 0x02
    23fe:	9b 81       	ldd	r25, Y+3	; 0x03
    2400:	90 93 a1 01 	sts	0x01A1, r25
    2404:	80 93 a0 01 	sts	0x01A0, r24
    2408:	02 c0       	rjmp	.+4      	; 0x240e <EXTI_u8Int2SetCallBack+0x2c>
	}
	else {

		Local_u8ErrorState = NULL_POINTER;
    240a:	82 e0       	ldi	r24, 0x02	; 2
    240c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    240e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2410:	0f 90       	pop	r0
    2412:	0f 90       	pop	r0
    2414:	0f 90       	pop	r0
    2416:	cf 91       	pop	r28
    2418:	df 91       	pop	r29
    241a:	08 95       	ret

0000241c <__vector_1>:
/****************************************************************************************************/
/****************************************************************************************************/
/* ISR of INT0*/
void __vector_1(void)   __attribute__((signal));
void __vector_1(void)
{
    241c:	1f 92       	push	r1
    241e:	0f 92       	push	r0
    2420:	0f b6       	in	r0, 0x3f	; 63
    2422:	0f 92       	push	r0
    2424:	11 24       	eor	r1, r1
    2426:	2f 93       	push	r18
    2428:	3f 93       	push	r19
    242a:	4f 93       	push	r20
    242c:	5f 93       	push	r21
    242e:	6f 93       	push	r22
    2430:	7f 93       	push	r23
    2432:	8f 93       	push	r24
    2434:	9f 93       	push	r25
    2436:	af 93       	push	r26
    2438:	bf 93       	push	r27
    243a:	ef 93       	push	r30
    243c:	ff 93       	push	r31
    243e:	df 93       	push	r29
    2440:	cf 93       	push	r28
    2442:	cd b7       	in	r28, 0x3d	; 61
    2444:	de b7       	in	r29, 0x3e	; 62
	if (EXTI_pvInt0Func != NULL)
    2446:	80 91 9c 01 	lds	r24, 0x019C
    244a:	90 91 9d 01 	lds	r25, 0x019D
    244e:	00 97       	sbiw	r24, 0x00	; 0
    2450:	29 f0       	breq	.+10     	; 0x245c <__vector_1+0x40>
	{
		EXTI_pvInt0Func();
    2452:	e0 91 9c 01 	lds	r30, 0x019C
    2456:	f0 91 9d 01 	lds	r31, 0x019D
    245a:	09 95       	icall
	else {
		/* Do nothing*/
	}


}
    245c:	cf 91       	pop	r28
    245e:	df 91       	pop	r29
    2460:	ff 91       	pop	r31
    2462:	ef 91       	pop	r30
    2464:	bf 91       	pop	r27
    2466:	af 91       	pop	r26
    2468:	9f 91       	pop	r25
    246a:	8f 91       	pop	r24
    246c:	7f 91       	pop	r23
    246e:	6f 91       	pop	r22
    2470:	5f 91       	pop	r21
    2472:	4f 91       	pop	r20
    2474:	3f 91       	pop	r19
    2476:	2f 91       	pop	r18
    2478:	0f 90       	pop	r0
    247a:	0f be       	out	0x3f, r0	; 63
    247c:	0f 90       	pop	r0
    247e:	1f 90       	pop	r1
    2480:	18 95       	reti

00002482 <__vector_2>:

/* ISR of INT1*/
void __vector_2(void)   __attribute__((signal));
void __vector_2(void)
{
    2482:	1f 92       	push	r1
    2484:	0f 92       	push	r0
    2486:	0f b6       	in	r0, 0x3f	; 63
    2488:	0f 92       	push	r0
    248a:	11 24       	eor	r1, r1
    248c:	2f 93       	push	r18
    248e:	3f 93       	push	r19
    2490:	4f 93       	push	r20
    2492:	5f 93       	push	r21
    2494:	6f 93       	push	r22
    2496:	7f 93       	push	r23
    2498:	8f 93       	push	r24
    249a:	9f 93       	push	r25
    249c:	af 93       	push	r26
    249e:	bf 93       	push	r27
    24a0:	ef 93       	push	r30
    24a2:	ff 93       	push	r31
    24a4:	df 93       	push	r29
    24a6:	cf 93       	push	r28
    24a8:	cd b7       	in	r28, 0x3d	; 61
    24aa:	de b7       	in	r29, 0x3e	; 62
	if (EXTI_pvInt1Func != NULL)
    24ac:	80 91 9e 01 	lds	r24, 0x019E
    24b0:	90 91 9f 01 	lds	r25, 0x019F
    24b4:	00 97       	sbiw	r24, 0x00	; 0
    24b6:	29 f0       	breq	.+10     	; 0x24c2 <__vector_2+0x40>
	{
		EXTI_pvInt1Func();
    24b8:	e0 91 9e 01 	lds	r30, 0x019E
    24bc:	f0 91 9f 01 	lds	r31, 0x019F
    24c0:	09 95       	icall
	else {
		/* Do nothing*/
	}


}
    24c2:	cf 91       	pop	r28
    24c4:	df 91       	pop	r29
    24c6:	ff 91       	pop	r31
    24c8:	ef 91       	pop	r30
    24ca:	bf 91       	pop	r27
    24cc:	af 91       	pop	r26
    24ce:	9f 91       	pop	r25
    24d0:	8f 91       	pop	r24
    24d2:	7f 91       	pop	r23
    24d4:	6f 91       	pop	r22
    24d6:	5f 91       	pop	r21
    24d8:	4f 91       	pop	r20
    24da:	3f 91       	pop	r19
    24dc:	2f 91       	pop	r18
    24de:	0f 90       	pop	r0
    24e0:	0f be       	out	0x3f, r0	; 63
    24e2:	0f 90       	pop	r0
    24e4:	1f 90       	pop	r1
    24e6:	18 95       	reti

000024e8 <__vector_3>:

/* ISR of INT2*/
void __vector_3(void)   __attribute__((signal));
void __vector_3(void)
{
    24e8:	1f 92       	push	r1
    24ea:	0f 92       	push	r0
    24ec:	0f b6       	in	r0, 0x3f	; 63
    24ee:	0f 92       	push	r0
    24f0:	11 24       	eor	r1, r1
    24f2:	2f 93       	push	r18
    24f4:	3f 93       	push	r19
    24f6:	4f 93       	push	r20
    24f8:	5f 93       	push	r21
    24fa:	6f 93       	push	r22
    24fc:	7f 93       	push	r23
    24fe:	8f 93       	push	r24
    2500:	9f 93       	push	r25
    2502:	af 93       	push	r26
    2504:	bf 93       	push	r27
    2506:	ef 93       	push	r30
    2508:	ff 93       	push	r31
    250a:	df 93       	push	r29
    250c:	cf 93       	push	r28
    250e:	cd b7       	in	r28, 0x3d	; 61
    2510:	de b7       	in	r29, 0x3e	; 62
	if (EXTI_pvInt2Func != NULL)
    2512:	80 91 a0 01 	lds	r24, 0x01A0
    2516:	90 91 a1 01 	lds	r25, 0x01A1
    251a:	00 97       	sbiw	r24, 0x00	; 0
    251c:	29 f0       	breq	.+10     	; 0x2528 <__vector_3+0x40>
	{
		EXTI_pvInt2Func();
    251e:	e0 91 a0 01 	lds	r30, 0x01A0
    2522:	f0 91 a1 01 	lds	r31, 0x01A1
    2526:	09 95       	icall
	else {
		/* Do nothing*/
	}


}
    2528:	cf 91       	pop	r28
    252a:	df 91       	pop	r29
    252c:	ff 91       	pop	r31
    252e:	ef 91       	pop	r30
    2530:	bf 91       	pop	r27
    2532:	af 91       	pop	r26
    2534:	9f 91       	pop	r25
    2536:	8f 91       	pop	r24
    2538:	7f 91       	pop	r23
    253a:	6f 91       	pop	r22
    253c:	5f 91       	pop	r21
    253e:	4f 91       	pop	r20
    2540:	3f 91       	pop	r19
    2542:	2f 91       	pop	r18
    2544:	0f 90       	pop	r0
    2546:	0f be       	out	0x3f, r0	; 63
    2548:	0f 90       	pop	r0
    254a:	1f 90       	pop	r1
    254c:	18 95       	reti

0000254e <GIE_VoidEnable>:

#include "GIE_interface.h"
#include "GIE_register.h"

void GIE_VoidEnable(void)
{
    254e:	df 93       	push	r29
    2550:	cf 93       	push	r28
    2552:	cd b7       	in	r28, 0x3d	; 61
    2554:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
    2556:	af e5       	ldi	r26, 0x5F	; 95
    2558:	b0 e0       	ldi	r27, 0x00	; 0
    255a:	ef e5       	ldi	r30, 0x5F	; 95
    255c:	f0 e0       	ldi	r31, 0x00	; 0
    255e:	80 81       	ld	r24, Z
    2560:	80 68       	ori	r24, 0x80	; 128
    2562:	8c 93       	st	X, r24
}
    2564:	cf 91       	pop	r28
    2566:	df 91       	pop	r29
    2568:	08 95       	ret

0000256a <GIE_VoidDisable>:
void GIE_VoidDisable(void)
{
    256a:	df 93       	push	r29
    256c:	cf 93       	push	r28
    256e:	cd b7       	in	r28, 0x3d	; 61
    2570:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,SREG_I);
    2572:	af e5       	ldi	r26, 0x5F	; 95
    2574:	b0 e0       	ldi	r27, 0x00	; 0
    2576:	ef e5       	ldi	r30, 0x5F	; 95
    2578:	f0 e0       	ldi	r31, 0x00	; 0
    257a:	80 81       	ld	r24, Z
    257c:	8f 77       	andi	r24, 0x7F	; 127
    257e:	8c 93       	st	X, r24
}
    2580:	cf 91       	pop	r28
    2582:	df 91       	pop	r29
    2584:	08 95       	ret

00002586 <KPD_u8GetPressedKey>:
#include "KPD_private.h"



u8 KPD_u8GetPressedKey(void)
{
    2586:	df 93       	push	r29
    2588:	cf 93       	push	r28
    258a:	00 d0       	rcall	.+0      	; 0x258c <KPD_u8GetPressedKey+0x6>
    258c:	00 d0       	rcall	.+0      	; 0x258e <KPD_u8GetPressedKey+0x8>
    258e:	0f 92       	push	r0
    2590:	cd b7       	in	r28, 0x3d	; 61
    2592:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8PressedKey = KPD_NO_PRESSED_KEY;
    2594:	8f ef       	ldi	r24, 0xFF	; 255
    2596:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8PinState;
	static u8 Local_u8KPDColArr[COLUMN_NUM]= {KPD_COL_0_PIN,KPD_COL_1_PIN,KPD_COL_2_PIN,KPD_COL_3_PIN };
	static u8 Local_u8KPDRowArr[ROW_NUM]= {KPD_ROW_0_PIN,KPD_ROW_1_PIN,KPD_ROW_2_PIN,KPD_ROW_3_PIN };
	static u8 Local_u8KPDArr[ROW_NUM][COLUMN_NUM]=KPD_ARR_VAL;

	for (Local_u8ColCounter=0;Local_u8ColCounter<COLUMN_NUM;Local_u8ColCounter++)
    2598:	19 82       	std	Y+1, r1	; 0x01
    259a:	5e c0       	rjmp	.+188    	; 0x2658 <KPD_u8GetPressedKey+0xd2>
	{
		/* Activate current Cloumn*/
		DIO_u8SetPinValue(KPD_COL_PORT,Local_u8KPDColArr[Local_u8ColCounter],DIO_u8PIN_LOW);
    259c:	89 81       	ldd	r24, Y+1	; 0x01
    259e:	88 2f       	mov	r24, r24
    25a0:	90 e0       	ldi	r25, 0x00	; 0
    25a2:	fc 01       	movw	r30, r24
    25a4:	e3 57       	subi	r30, 0x73	; 115
    25a6:	fe 4f       	sbci	r31, 0xFE	; 254
    25a8:	90 81       	ld	r25, Z
    25aa:	83 e0       	ldi	r24, 0x03	; 3
    25ac:	69 2f       	mov	r22, r25
    25ae:	40 e0       	ldi	r20, 0x00	; 0
    25b0:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <DIO_u8SetPinValue>

		for(Local_u8RowCounter=0;Local_u8RowCounter<ROW_NUM;Local_u8RowCounter++)
    25b4:	1a 82       	std	Y+2, r1	; 0x02
    25b6:	3d c0       	rjmp	.+122    	; 0x2632 <KPD_u8GetPressedKey+0xac>
		{
			/* Read the current row */
			DIO_u8GetPinValue(KPD_ROW_PORT,Local_u8KPDRowArr[Local_u8RowCounter],&Local_u8PinState);
    25b8:	8a 81       	ldd	r24, Y+2	; 0x02
    25ba:	88 2f       	mov	r24, r24
    25bc:	90 e0       	ldi	r25, 0x00	; 0
    25be:	fc 01       	movw	r30, r24
    25c0:	e7 57       	subi	r30, 0x77	; 119
    25c2:	fe 4f       	sbci	r31, 0xFE	; 254
    25c4:	90 81       	ld	r25, Z
    25c6:	9e 01       	movw	r18, r28
    25c8:	2c 5f       	subi	r18, 0xFC	; 252
    25ca:	3f 4f       	sbci	r19, 0xFF	; 255
    25cc:	81 e0       	ldi	r24, 0x01	; 1
    25ce:	69 2f       	mov	r22, r25
    25d0:	a9 01       	movw	r20, r18
    25d2:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <DIO_u8GetPinValue>
			/* Check if switch is pressed */

			if(DIO_u8PIN_LOW == Local_u8PinState )
    25d6:	8c 81       	ldd	r24, Y+4	; 0x04
    25d8:	88 23       	and	r24, r24
    25da:	41 f5       	brne	.+80     	; 0x262c <KPD_u8GetPressedKey+0xa6>
			{

				Local_u8PressedKey = Local_u8KPDArr[Local_u8RowCounter][Local_u8ColCounter];
    25dc:	8a 81       	ldd	r24, Y+2	; 0x02
    25de:	48 2f       	mov	r20, r24
    25e0:	50 e0       	ldi	r21, 0x00	; 0
    25e2:	89 81       	ldd	r24, Y+1	; 0x01
    25e4:	28 2f       	mov	r18, r24
    25e6:	30 e0       	ldi	r19, 0x00	; 0
    25e8:	ca 01       	movw	r24, r20
    25ea:	88 0f       	add	r24, r24
    25ec:	99 1f       	adc	r25, r25
    25ee:	88 0f       	add	r24, r24
    25f0:	99 1f       	adc	r25, r25
    25f2:	82 0f       	add	r24, r18
    25f4:	93 1f       	adc	r25, r19
    25f6:	fc 01       	movw	r30, r24
    25f8:	e7 58       	subi	r30, 0x87	; 135
    25fa:	fe 4f       	sbci	r31, 0xFE	; 254
    25fc:	80 81       	ld	r24, Z
    25fe:	8b 83       	std	Y+3, r24	; 0x03
    2600:	0f c0       	rjmp	.+30     	; 0x2620 <KPD_u8GetPressedKey+0x9a>
				/* Polling (busy waiting ) until the key is released */
				while (DIO_u8PIN_LOW == Local_u8PinState)
				{
					DIO_u8GetPinValue(KPD_ROW_PORT,Local_u8KPDRowArr[Local_u8RowCounter],&Local_u8PinState);
    2602:	8a 81       	ldd	r24, Y+2	; 0x02
    2604:	88 2f       	mov	r24, r24
    2606:	90 e0       	ldi	r25, 0x00	; 0
    2608:	fc 01       	movw	r30, r24
    260a:	e7 57       	subi	r30, 0x77	; 119
    260c:	fe 4f       	sbci	r31, 0xFE	; 254
    260e:	90 81       	ld	r25, Z
    2610:	9e 01       	movw	r18, r28
    2612:	2c 5f       	subi	r18, 0xFC	; 252
    2614:	3f 4f       	sbci	r19, 0xFF	; 255
    2616:	81 e0       	ldi	r24, 0x01	; 1
    2618:	69 2f       	mov	r22, r25
    261a:	a9 01       	movw	r20, r18
    261c:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <DIO_u8GetPinValue>
			if(DIO_u8PIN_LOW == Local_u8PinState )
			{

				Local_u8PressedKey = Local_u8KPDArr[Local_u8RowCounter][Local_u8ColCounter];
				/* Polling (busy waiting ) until the key is released */
				while (DIO_u8PIN_LOW == Local_u8PinState)
    2620:	8c 81       	ldd	r24, Y+4	; 0x04
    2622:	88 23       	and	r24, r24
    2624:	71 f3       	breq	.-36     	; 0x2602 <KPD_u8GetPressedKey+0x7c>
				{
					DIO_u8GetPinValue(KPD_ROW_PORT,Local_u8KPDRowArr[Local_u8RowCounter],&Local_u8PinState);

				}
				return Local_u8PressedKey;
    2626:	8b 81       	ldd	r24, Y+3	; 0x03
    2628:	8d 83       	std	Y+5, r24	; 0x05
    262a:	1c c0       	rjmp	.+56     	; 0x2664 <KPD_u8GetPressedKey+0xde>
	for (Local_u8ColCounter=0;Local_u8ColCounter<COLUMN_NUM;Local_u8ColCounter++)
	{
		/* Activate current Cloumn*/
		DIO_u8SetPinValue(KPD_COL_PORT,Local_u8KPDColArr[Local_u8ColCounter],DIO_u8PIN_LOW);

		for(Local_u8RowCounter=0;Local_u8RowCounter<ROW_NUM;Local_u8RowCounter++)
    262c:	8a 81       	ldd	r24, Y+2	; 0x02
    262e:	8f 5f       	subi	r24, 0xFF	; 255
    2630:	8a 83       	std	Y+2, r24	; 0x02
    2632:	8a 81       	ldd	r24, Y+2	; 0x02
    2634:	84 30       	cpi	r24, 0x04	; 4
    2636:	08 f4       	brcc	.+2      	; 0x263a <KPD_u8GetPressedKey+0xb4>
    2638:	bf cf       	rjmp	.-130    	; 0x25b8 <KPD_u8GetPressedKey+0x32>

		}

		/* Deactivate the current column */

		DIO_u8SetPinValue(KPD_COL_PORT,Local_u8KPDColArr[Local_u8ColCounter],DIO_u8PIN_HIGH);
    263a:	89 81       	ldd	r24, Y+1	; 0x01
    263c:	88 2f       	mov	r24, r24
    263e:	90 e0       	ldi	r25, 0x00	; 0
    2640:	fc 01       	movw	r30, r24
    2642:	e3 57       	subi	r30, 0x73	; 115
    2644:	fe 4f       	sbci	r31, 0xFE	; 254
    2646:	90 81       	ld	r25, Z
    2648:	83 e0       	ldi	r24, 0x03	; 3
    264a:	69 2f       	mov	r22, r25
    264c:	41 e0       	ldi	r20, 0x01	; 1
    264e:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <DIO_u8SetPinValue>
	u8 Local_u8PinState;
	static u8 Local_u8KPDColArr[COLUMN_NUM]= {KPD_COL_0_PIN,KPD_COL_1_PIN,KPD_COL_2_PIN,KPD_COL_3_PIN };
	static u8 Local_u8KPDRowArr[ROW_NUM]= {KPD_ROW_0_PIN,KPD_ROW_1_PIN,KPD_ROW_2_PIN,KPD_ROW_3_PIN };
	static u8 Local_u8KPDArr[ROW_NUM][COLUMN_NUM]=KPD_ARR_VAL;

	for (Local_u8ColCounter=0;Local_u8ColCounter<COLUMN_NUM;Local_u8ColCounter++)
    2652:	89 81       	ldd	r24, Y+1	; 0x01
    2654:	8f 5f       	subi	r24, 0xFF	; 255
    2656:	89 83       	std	Y+1, r24	; 0x01
    2658:	89 81       	ldd	r24, Y+1	; 0x01
    265a:	84 30       	cpi	r24, 0x04	; 4
    265c:	08 f4       	brcc	.+2      	; 0x2660 <KPD_u8GetPressedKey+0xda>
    265e:	9e cf       	rjmp	.-196    	; 0x259c <KPD_u8GetPressedKey+0x16>

		DIO_u8SetPinValue(KPD_COL_PORT,Local_u8KPDColArr[Local_u8ColCounter],DIO_u8PIN_HIGH);

	}

	return Local_u8PressedKey;
    2660:	8b 81       	ldd	r24, Y+3	; 0x03
    2662:	8d 83       	std	Y+5, r24	; 0x05
    2664:	8d 81       	ldd	r24, Y+5	; 0x05





}
    2666:	0f 90       	pop	r0
    2668:	0f 90       	pop	r0
    266a:	0f 90       	pop	r0
    266c:	0f 90       	pop	r0
    266e:	0f 90       	pop	r0
    2670:	cf 91       	pop	r28
    2672:	df 91       	pop	r29
    2674:	08 95       	ret

00002676 <PORT_VoidInit>:
#include "PORT_interface.h"
#include "PORT_register.h"


void PORT_VoidInit(void)
{
    2676:	df 93       	push	r29
    2678:	cf 93       	push	r28
    267a:	cd b7       	in	r28, 0x3d	; 61
    267c:	de b7       	in	r29, 0x3e	; 62
	DDRA = PORTA_DIR;
    267e:	ea e3       	ldi	r30, 0x3A	; 58
    2680:	f0 e0       	ldi	r31, 0x00	; 0
    2682:	8f ef       	ldi	r24, 0xFF	; 255
    2684:	80 83       	st	Z, r24
	DDRB = PORTB_DIR;
    2686:	e7 e3       	ldi	r30, 0x37	; 55
    2688:	f0 e0       	ldi	r31, 0x00	; 0
    268a:	88 e0       	ldi	r24, 0x08	; 8
    268c:	80 83       	st	Z, r24
	DDRC = PORTC_DIR;
    268e:	e4 e3       	ldi	r30, 0x34	; 52
    2690:	f0 e0       	ldi	r31, 0x00	; 0
    2692:	80 ec       	ldi	r24, 0xC0	; 192
    2694:	80 83       	st	Z, r24
	DDRD = PORTD_DIR;
    2696:	e1 e3       	ldi	r30, 0x31	; 49
    2698:	f0 e0       	ldi	r31, 0x00	; 0
    269a:	10 82       	st	Z, r1
	
	PORTA = PORTA_INITIAL_VALUE;
    269c:	eb e3       	ldi	r30, 0x3B	; 59
    269e:	f0 e0       	ldi	r31, 0x00	; 0
    26a0:	10 82       	st	Z, r1
	PORTB = PORTB_INITIAL_VALUE;
    26a2:	e8 e3       	ldi	r30, 0x38	; 56
    26a4:	f0 e0       	ldi	r31, 0x00	; 0
    26a6:	10 82       	st	Z, r1
	PORTC = PORTC_INITIAL_VALUE;
    26a8:	e5 e3       	ldi	r30, 0x35	; 53
    26aa:	f0 e0       	ldi	r31, 0x00	; 0
    26ac:	10 82       	st	Z, r1
	PORTD = PORTD_INITIAL_VALUE;
    26ae:	e2 e3       	ldi	r30, 0x32	; 50
    26b0:	f0 e0       	ldi	r31, 0x00	; 0
    26b2:	10 82       	st	Z, r1


}
    26b4:	cf 91       	pop	r28
    26b6:	df 91       	pop	r29
    26b8:	08 95       	ret

000026ba <SSD_u8SingleNumDisplayBlink>:


u8 seven_seg[10]={ZERO,ONE,TWO,THREE,FOUR,FIVE,SIX,SEVEN,EIGHT,NINE};

u8 SSD_u8SingleNumDisplayBlink(u8 number)
{
    26ba:	df 93       	push	r29
    26bc:	cf 93       	push	r28
    26be:	00 d0       	rcall	.+0      	; 0x26c0 <SSD_u8SingleNumDisplayBlink+0x6>
    26c0:	00 d0       	rcall	.+0      	; 0x26c2 <SSD_u8SingleNumDisplayBlink+0x8>
    26c2:	cd b7       	in	r28, 0x3d	; 61
    26c4:	de b7       	in	r29, 0x3e	; 62
    26c6:	8c 83       	std	Y+4, r24	; 0x04
	u8 Local_u8ErrorState = 0;
    26c8:	1b 82       	std	Y+3, r1	; 0x03
	u8 Local_u8Counter;
	u8 Local_u8PortMask;

	for(Local_u8Counter=0;Local_u8Counter<100;Local_u8Counter++)
    26ca:	1a 82       	std	Y+2, r1	; 0x02
    26cc:	28 c0       	rjmp	.+80     	; 0x271e <SSD_u8SingleNumDisplayBlink+0x64>
	{
		DIO_u8SetPinValue(SSD_EN_PORT,SSD_1_EN_PIN,DIO_u8PIN_HIGH);
    26ce:	82 e0       	ldi	r24, 0x02	; 2
    26d0:	66 e0       	ldi	r22, 0x06	; 6
    26d2:	41 e0       	ldi	r20, 0x01	; 1
    26d4:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <DIO_u8SetPinValue>
		Local_u8PortMask = DIO_u8AndWithPort(SSD_DATA_PORT,SSD_DATA_MASK);
    26d8:	80 e0       	ldi	r24, 0x00	; 0
    26da:	61 e0       	ldi	r22, 0x01	; 1
    26dc:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <DIO_u8AndWithPort>
    26e0:	89 83       	std	Y+1, r24	; 0x01

		seven_seg[number]|=Local_u8PortMask;
    26e2:	8c 81       	ldd	r24, Y+4	; 0x04
    26e4:	28 2f       	mov	r18, r24
    26e6:	30 e0       	ldi	r19, 0x00	; 0
    26e8:	8c 81       	ldd	r24, Y+4	; 0x04
    26ea:	88 2f       	mov	r24, r24
    26ec:	90 e0       	ldi	r25, 0x00	; 0
    26ee:	fc 01       	movw	r30, r24
    26f0:	ef 56       	subi	r30, 0x6F	; 111
    26f2:	fe 4f       	sbci	r31, 0xFE	; 254
    26f4:	90 81       	ld	r25, Z
    26f6:	89 81       	ldd	r24, Y+1	; 0x01
    26f8:	89 2b       	or	r24, r25
    26fa:	f9 01       	movw	r30, r18
    26fc:	ef 56       	subi	r30, 0x6F	; 111
    26fe:	fe 4f       	sbci	r31, 0xFE	; 254
    2700:	80 83       	st	Z, r24
		DIO_u8SetPortValue(SSD_DATA_PORT,seven_seg[number]);
    2702:	8c 81       	ldd	r24, Y+4	; 0x04
    2704:	88 2f       	mov	r24, r24
    2706:	90 e0       	ldi	r25, 0x00	; 0
    2708:	fc 01       	movw	r30, r24
    270a:	ef 56       	subi	r30, 0x6F	; 111
    270c:	fe 4f       	sbci	r31, 0xFE	; 254
    270e:	90 81       	ld	r25, Z
    2710:	80 e0       	ldi	r24, 0x00	; 0
    2712:	69 2f       	mov	r22, r25
    2714:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <DIO_u8SetPortValue>
{
	u8 Local_u8ErrorState = 0;
	u8 Local_u8Counter;
	u8 Local_u8PortMask;

	for(Local_u8Counter=0;Local_u8Counter<100;Local_u8Counter++)
    2718:	8a 81       	ldd	r24, Y+2	; 0x02
    271a:	8f 5f       	subi	r24, 0xFF	; 255
    271c:	8a 83       	std	Y+2, r24	; 0x02
    271e:	8a 81       	ldd	r24, Y+2	; 0x02
    2720:	84 36       	cpi	r24, 0x64	; 100
    2722:	a8 f2       	brcs	.-86     	; 0x26ce <SSD_u8SingleNumDisplayBlink+0x14>
		seven_seg[number]|=Local_u8PortMask;
		DIO_u8SetPortValue(SSD_DATA_PORT,seven_seg[number]);
		//		_delay_ms(5);
		//		DIO_u8SetPinValue(SSD_EN_PORT,SSD_1_EN_PIN,DIO_u8PIN_LOW);
	}
	return Local_u8ErrorState;
    2724:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2726:	0f 90       	pop	r0
    2728:	0f 90       	pop	r0
    272a:	0f 90       	pop	r0
    272c:	0f 90       	pop	r0
    272e:	cf 91       	pop	r28
    2730:	df 91       	pop	r29
    2732:	08 95       	ret

00002734 <SSD_u8DisplayBlink>:

u8 SSD_u8DisplayBlink(u8 number)
{
    2734:	df 93       	push	r29
    2736:	cf 93       	push	r28
    2738:	cd b7       	in	r28, 0x3d	; 61
    273a:	de b7       	in	r29, 0x3e	; 62
    273c:	a2 97       	sbiw	r28, 0x22	; 34
    273e:	0f b6       	in	r0, 0x3f	; 63
    2740:	f8 94       	cli
    2742:	de bf       	out	0x3e, r29	; 62
    2744:	0f be       	out	0x3f, r0	; 63
    2746:	cd bf       	out	0x3d, r28	; 61
    2748:	8a a3       	std	Y+34, r24	; 0x22
	u8 Local_u8ErrorState = 0;
    274a:	19 a2       	std	Y+33, r1	; 0x21
	u8 Local_u8PortMask;

	u8 Local_u8Counter;
	u8 ones = number%10;
    274c:	8a a1       	ldd	r24, Y+34	; 0x22
    274e:	9a e0       	ldi	r25, 0x0A	; 10
    2750:	69 2f       	mov	r22, r25
    2752:	0e 94 3e 1a 	call	0x347c	; 0x347c <__udivmodqi4>
    2756:	89 2f       	mov	r24, r25
    2758:	8e 8f       	std	Y+30, r24	; 0x1e
	u8 tens = number/10;
    275a:	8a a1       	ldd	r24, Y+34	; 0x22
    275c:	9a e0       	ldi	r25, 0x0A	; 10
    275e:	69 2f       	mov	r22, r25
    2760:	0e 94 3e 1a 	call	0x347c	; 0x347c <__udivmodqi4>
    2764:	8d 8f       	std	Y+29, r24	; 0x1d

	Local_u8PortMask = DIO_u8AndWithPort(SSD_DATA_PORT,SSD_DATA_MASK);
    2766:	80 e0       	ldi	r24, 0x00	; 0
    2768:	61 e0       	ldi	r22, 0x01	; 1
    276a:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <DIO_u8AndWithPort>
    276e:	88 a3       	std	Y+32, r24	; 0x20
	seven_seg[ones]|=Local_u8PortMask;
    2770:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2772:	28 2f       	mov	r18, r24
    2774:	30 e0       	ldi	r19, 0x00	; 0
    2776:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2778:	88 2f       	mov	r24, r24
    277a:	90 e0       	ldi	r25, 0x00	; 0
    277c:	fc 01       	movw	r30, r24
    277e:	ef 56       	subi	r30, 0x6F	; 111
    2780:	fe 4f       	sbci	r31, 0xFE	; 254
    2782:	90 81       	ld	r25, Z
    2784:	88 a1       	ldd	r24, Y+32	; 0x20
    2786:	89 2b       	or	r24, r25
    2788:	f9 01       	movw	r30, r18
    278a:	ef 56       	subi	r30, 0x6F	; 111
    278c:	fe 4f       	sbci	r31, 0xFE	; 254
    278e:	80 83       	st	Z, r24

	Local_u8PortMask = DIO_u8AndWithPort(SSD_DATA_PORT,SSD_DATA_MASK);
    2790:	80 e0       	ldi	r24, 0x00	; 0
    2792:	61 e0       	ldi	r22, 0x01	; 1
    2794:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <DIO_u8AndWithPort>
    2798:	88 a3       	std	Y+32, r24	; 0x20
	seven_seg[tens]|=Local_u8PortMask;
    279a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    279c:	28 2f       	mov	r18, r24
    279e:	30 e0       	ldi	r19, 0x00	; 0
    27a0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    27a2:	88 2f       	mov	r24, r24
    27a4:	90 e0       	ldi	r25, 0x00	; 0
    27a6:	fc 01       	movw	r30, r24
    27a8:	ef 56       	subi	r30, 0x6F	; 111
    27aa:	fe 4f       	sbci	r31, 0xFE	; 254
    27ac:	90 81       	ld	r25, Z
    27ae:	88 a1       	ldd	r24, Y+32	; 0x20
    27b0:	89 2b       	or	r24, r25
    27b2:	f9 01       	movw	r30, r18
    27b4:	ef 56       	subi	r30, 0x6F	; 111
    27b6:	fe 4f       	sbci	r31, 0xFE	; 254
    27b8:	80 83       	st	Z, r24

	for(Local_u8Counter=0;Local_u8Counter<100;Local_u8Counter++)
    27ba:	1f 8e       	std	Y+31, r1	; 0x1f
    27bc:	1b c1       	rjmp	.+566    	; 0x29f4 <SSD_u8DisplayBlink+0x2c0>
	{
		DIO_u8SetPinValue(SSD_EN_PORT,SSD_1_EN_PIN,DIO_u8PIN_HIGH);
    27be:	82 e0       	ldi	r24, 0x02	; 2
    27c0:	66 e0       	ldi	r22, 0x06	; 6
    27c2:	41 e0       	ldi	r20, 0x01	; 1
    27c4:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(SSD_EN_PORT,SSD_2_EN_PIN,DIO_u8PIN_LOW);
    27c8:	82 e0       	ldi	r24, 0x02	; 2
    27ca:	67 e0       	ldi	r22, 0x07	; 7
    27cc:	40 e0       	ldi	r20, 0x00	; 0
    27ce:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <DIO_u8SetPinValue>
		DIO_u8SetPortValue(SSD_DATA_PORT,seven_seg[ones]);
    27d2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    27d4:	88 2f       	mov	r24, r24
    27d6:	90 e0       	ldi	r25, 0x00	; 0
    27d8:	fc 01       	movw	r30, r24
    27da:	ef 56       	subi	r30, 0x6F	; 111
    27dc:	fe 4f       	sbci	r31, 0xFE	; 254
    27de:	90 81       	ld	r25, Z
    27e0:	80 e0       	ldi	r24, 0x00	; 0
    27e2:	69 2f       	mov	r22, r25
    27e4:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <DIO_u8SetPortValue>
    27e8:	80 e0       	ldi	r24, 0x00	; 0
    27ea:	90 e0       	ldi	r25, 0x00	; 0
    27ec:	a0 ea       	ldi	r26, 0xA0	; 160
    27ee:	b1 e4       	ldi	r27, 0x41	; 65
    27f0:	89 8f       	std	Y+25, r24	; 0x19
    27f2:	9a 8f       	std	Y+26, r25	; 0x1a
    27f4:	ab 8f       	std	Y+27, r26	; 0x1b
    27f6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27f8:	69 8d       	ldd	r22, Y+25	; 0x19
    27fa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27fc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27fe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2800:	20 e0       	ldi	r18, 0x00	; 0
    2802:	30 e0       	ldi	r19, 0x00	; 0
    2804:	4a ef       	ldi	r20, 0xFA	; 250
    2806:	54 e4       	ldi	r21, 0x44	; 68
    2808:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    280c:	dc 01       	movw	r26, r24
    280e:	cb 01       	movw	r24, r22
    2810:	8d 8b       	std	Y+21, r24	; 0x15
    2812:	9e 8b       	std	Y+22, r25	; 0x16
    2814:	af 8b       	std	Y+23, r26	; 0x17
    2816:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2818:	6d 89       	ldd	r22, Y+21	; 0x15
    281a:	7e 89       	ldd	r23, Y+22	; 0x16
    281c:	8f 89       	ldd	r24, Y+23	; 0x17
    281e:	98 8d       	ldd	r25, Y+24	; 0x18
    2820:	20 e0       	ldi	r18, 0x00	; 0
    2822:	30 e0       	ldi	r19, 0x00	; 0
    2824:	40 e8       	ldi	r20, 0x80	; 128
    2826:	5f e3       	ldi	r21, 0x3F	; 63
    2828:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    282c:	88 23       	and	r24, r24
    282e:	2c f4       	brge	.+10     	; 0x283a <SSD_u8DisplayBlink+0x106>
		__ticks = 1;
    2830:	81 e0       	ldi	r24, 0x01	; 1
    2832:	90 e0       	ldi	r25, 0x00	; 0
    2834:	9c 8b       	std	Y+20, r25	; 0x14
    2836:	8b 8b       	std	Y+19, r24	; 0x13
    2838:	3f c0       	rjmp	.+126    	; 0x28b8 <SSD_u8DisplayBlink+0x184>
	else if (__tmp > 65535)
    283a:	6d 89       	ldd	r22, Y+21	; 0x15
    283c:	7e 89       	ldd	r23, Y+22	; 0x16
    283e:	8f 89       	ldd	r24, Y+23	; 0x17
    2840:	98 8d       	ldd	r25, Y+24	; 0x18
    2842:	20 e0       	ldi	r18, 0x00	; 0
    2844:	3f ef       	ldi	r19, 0xFF	; 255
    2846:	4f e7       	ldi	r20, 0x7F	; 127
    2848:	57 e4       	ldi	r21, 0x47	; 71
    284a:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    284e:	18 16       	cp	r1, r24
    2850:	4c f5       	brge	.+82     	; 0x28a4 <SSD_u8DisplayBlink+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2852:	69 8d       	ldd	r22, Y+25	; 0x19
    2854:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2856:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2858:	9c 8d       	ldd	r25, Y+28	; 0x1c
    285a:	20 e0       	ldi	r18, 0x00	; 0
    285c:	30 e0       	ldi	r19, 0x00	; 0
    285e:	40 e2       	ldi	r20, 0x20	; 32
    2860:	51 e4       	ldi	r21, 0x41	; 65
    2862:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2866:	dc 01       	movw	r26, r24
    2868:	cb 01       	movw	r24, r22
    286a:	bc 01       	movw	r22, r24
    286c:	cd 01       	movw	r24, r26
    286e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2872:	dc 01       	movw	r26, r24
    2874:	cb 01       	movw	r24, r22
    2876:	9c 8b       	std	Y+20, r25	; 0x14
    2878:	8b 8b       	std	Y+19, r24	; 0x13
    287a:	0f c0       	rjmp	.+30     	; 0x289a <SSD_u8DisplayBlink+0x166>
    287c:	88 ec       	ldi	r24, 0xC8	; 200
    287e:	90 e0       	ldi	r25, 0x00	; 0
    2880:	9a 8b       	std	Y+18, r25	; 0x12
    2882:	89 8b       	std	Y+17, r24	; 0x11
    2884:	89 89       	ldd	r24, Y+17	; 0x11
    2886:	9a 89       	ldd	r25, Y+18	; 0x12
    2888:	01 97       	sbiw	r24, 0x01	; 1
    288a:	f1 f7       	brne	.-4      	; 0x2888 <SSD_u8DisplayBlink+0x154>
    288c:	9a 8b       	std	Y+18, r25	; 0x12
    288e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2890:	8b 89       	ldd	r24, Y+19	; 0x13
    2892:	9c 89       	ldd	r25, Y+20	; 0x14
    2894:	01 97       	sbiw	r24, 0x01	; 1
    2896:	9c 8b       	std	Y+20, r25	; 0x14
    2898:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    289a:	8b 89       	ldd	r24, Y+19	; 0x13
    289c:	9c 89       	ldd	r25, Y+20	; 0x14
    289e:	00 97       	sbiw	r24, 0x00	; 0
    28a0:	69 f7       	brne	.-38     	; 0x287c <SSD_u8DisplayBlink+0x148>
    28a2:	14 c0       	rjmp	.+40     	; 0x28cc <SSD_u8DisplayBlink+0x198>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28a4:	6d 89       	ldd	r22, Y+21	; 0x15
    28a6:	7e 89       	ldd	r23, Y+22	; 0x16
    28a8:	8f 89       	ldd	r24, Y+23	; 0x17
    28aa:	98 8d       	ldd	r25, Y+24	; 0x18
    28ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28b0:	dc 01       	movw	r26, r24
    28b2:	cb 01       	movw	r24, r22
    28b4:	9c 8b       	std	Y+20, r25	; 0x14
    28b6:	8b 8b       	std	Y+19, r24	; 0x13
    28b8:	8b 89       	ldd	r24, Y+19	; 0x13
    28ba:	9c 89       	ldd	r25, Y+20	; 0x14
    28bc:	98 8b       	std	Y+16, r25	; 0x10
    28be:	8f 87       	std	Y+15, r24	; 0x0f
    28c0:	8f 85       	ldd	r24, Y+15	; 0x0f
    28c2:	98 89       	ldd	r25, Y+16	; 0x10
    28c4:	01 97       	sbiw	r24, 0x01	; 1
    28c6:	f1 f7       	brne	.-4      	; 0x28c4 <SSD_u8DisplayBlink+0x190>
    28c8:	98 8b       	std	Y+16, r25	; 0x10
    28ca:	8f 87       	std	Y+15, r24	; 0x0f

		_delay_ms(20);
		DIO_u8SetPinValue(SSD_EN_PORT,SSD_1_EN_PIN,DIO_u8PIN_LOW);
    28cc:	82 e0       	ldi	r24, 0x02	; 2
    28ce:	66 e0       	ldi	r22, 0x06	; 6
    28d0:	40 e0       	ldi	r20, 0x00	; 0
    28d2:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(SSD_EN_PORT,SSD_2_EN_PIN,DIO_u8PIN_HIGH);
    28d6:	82 e0       	ldi	r24, 0x02	; 2
    28d8:	67 e0       	ldi	r22, 0x07	; 7
    28da:	41 e0       	ldi	r20, 0x01	; 1
    28dc:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <DIO_u8SetPinValue>
		DIO_u8SetPortValue(SSD_DATA_PORT,seven_seg[tens]);
    28e0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    28e2:	88 2f       	mov	r24, r24
    28e4:	90 e0       	ldi	r25, 0x00	; 0
    28e6:	fc 01       	movw	r30, r24
    28e8:	ef 56       	subi	r30, 0x6F	; 111
    28ea:	fe 4f       	sbci	r31, 0xFE	; 254
    28ec:	90 81       	ld	r25, Z
    28ee:	80 e0       	ldi	r24, 0x00	; 0
    28f0:	69 2f       	mov	r22, r25
    28f2:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <DIO_u8SetPortValue>
    28f6:	80 e0       	ldi	r24, 0x00	; 0
    28f8:	90 e0       	ldi	r25, 0x00	; 0
    28fa:	a0 ea       	ldi	r26, 0xA0	; 160
    28fc:	b1 e4       	ldi	r27, 0x41	; 65
    28fe:	8b 87       	std	Y+11, r24	; 0x0b
    2900:	9c 87       	std	Y+12, r25	; 0x0c
    2902:	ad 87       	std	Y+13, r26	; 0x0d
    2904:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2906:	6b 85       	ldd	r22, Y+11	; 0x0b
    2908:	7c 85       	ldd	r23, Y+12	; 0x0c
    290a:	8d 85       	ldd	r24, Y+13	; 0x0d
    290c:	9e 85       	ldd	r25, Y+14	; 0x0e
    290e:	20 e0       	ldi	r18, 0x00	; 0
    2910:	30 e0       	ldi	r19, 0x00	; 0
    2912:	4a ef       	ldi	r20, 0xFA	; 250
    2914:	54 e4       	ldi	r21, 0x44	; 68
    2916:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    291a:	dc 01       	movw	r26, r24
    291c:	cb 01       	movw	r24, r22
    291e:	8f 83       	std	Y+7, r24	; 0x07
    2920:	98 87       	std	Y+8, r25	; 0x08
    2922:	a9 87       	std	Y+9, r26	; 0x09
    2924:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2926:	6f 81       	ldd	r22, Y+7	; 0x07
    2928:	78 85       	ldd	r23, Y+8	; 0x08
    292a:	89 85       	ldd	r24, Y+9	; 0x09
    292c:	9a 85       	ldd	r25, Y+10	; 0x0a
    292e:	20 e0       	ldi	r18, 0x00	; 0
    2930:	30 e0       	ldi	r19, 0x00	; 0
    2932:	40 e8       	ldi	r20, 0x80	; 128
    2934:	5f e3       	ldi	r21, 0x3F	; 63
    2936:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    293a:	88 23       	and	r24, r24
    293c:	2c f4       	brge	.+10     	; 0x2948 <SSD_u8DisplayBlink+0x214>
		__ticks = 1;
    293e:	81 e0       	ldi	r24, 0x01	; 1
    2940:	90 e0       	ldi	r25, 0x00	; 0
    2942:	9e 83       	std	Y+6, r25	; 0x06
    2944:	8d 83       	std	Y+5, r24	; 0x05
    2946:	3f c0       	rjmp	.+126    	; 0x29c6 <SSD_u8DisplayBlink+0x292>
	else if (__tmp > 65535)
    2948:	6f 81       	ldd	r22, Y+7	; 0x07
    294a:	78 85       	ldd	r23, Y+8	; 0x08
    294c:	89 85       	ldd	r24, Y+9	; 0x09
    294e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2950:	20 e0       	ldi	r18, 0x00	; 0
    2952:	3f ef       	ldi	r19, 0xFF	; 255
    2954:	4f e7       	ldi	r20, 0x7F	; 127
    2956:	57 e4       	ldi	r21, 0x47	; 71
    2958:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    295c:	18 16       	cp	r1, r24
    295e:	4c f5       	brge	.+82     	; 0x29b2 <SSD_u8DisplayBlink+0x27e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2960:	6b 85       	ldd	r22, Y+11	; 0x0b
    2962:	7c 85       	ldd	r23, Y+12	; 0x0c
    2964:	8d 85       	ldd	r24, Y+13	; 0x0d
    2966:	9e 85       	ldd	r25, Y+14	; 0x0e
    2968:	20 e0       	ldi	r18, 0x00	; 0
    296a:	30 e0       	ldi	r19, 0x00	; 0
    296c:	40 e2       	ldi	r20, 0x20	; 32
    296e:	51 e4       	ldi	r21, 0x41	; 65
    2970:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2974:	dc 01       	movw	r26, r24
    2976:	cb 01       	movw	r24, r22
    2978:	bc 01       	movw	r22, r24
    297a:	cd 01       	movw	r24, r26
    297c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2980:	dc 01       	movw	r26, r24
    2982:	cb 01       	movw	r24, r22
    2984:	9e 83       	std	Y+6, r25	; 0x06
    2986:	8d 83       	std	Y+5, r24	; 0x05
    2988:	0f c0       	rjmp	.+30     	; 0x29a8 <SSD_u8DisplayBlink+0x274>
    298a:	88 ec       	ldi	r24, 0xC8	; 200
    298c:	90 e0       	ldi	r25, 0x00	; 0
    298e:	9c 83       	std	Y+4, r25	; 0x04
    2990:	8b 83       	std	Y+3, r24	; 0x03
    2992:	8b 81       	ldd	r24, Y+3	; 0x03
    2994:	9c 81       	ldd	r25, Y+4	; 0x04
    2996:	01 97       	sbiw	r24, 0x01	; 1
    2998:	f1 f7       	brne	.-4      	; 0x2996 <SSD_u8DisplayBlink+0x262>
    299a:	9c 83       	std	Y+4, r25	; 0x04
    299c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    299e:	8d 81       	ldd	r24, Y+5	; 0x05
    29a0:	9e 81       	ldd	r25, Y+6	; 0x06
    29a2:	01 97       	sbiw	r24, 0x01	; 1
    29a4:	9e 83       	std	Y+6, r25	; 0x06
    29a6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29a8:	8d 81       	ldd	r24, Y+5	; 0x05
    29aa:	9e 81       	ldd	r25, Y+6	; 0x06
    29ac:	00 97       	sbiw	r24, 0x00	; 0
    29ae:	69 f7       	brne	.-38     	; 0x298a <SSD_u8DisplayBlink+0x256>
    29b0:	14 c0       	rjmp	.+40     	; 0x29da <SSD_u8DisplayBlink+0x2a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29b2:	6f 81       	ldd	r22, Y+7	; 0x07
    29b4:	78 85       	ldd	r23, Y+8	; 0x08
    29b6:	89 85       	ldd	r24, Y+9	; 0x09
    29b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    29ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29be:	dc 01       	movw	r26, r24
    29c0:	cb 01       	movw	r24, r22
    29c2:	9e 83       	std	Y+6, r25	; 0x06
    29c4:	8d 83       	std	Y+5, r24	; 0x05
    29c6:	8d 81       	ldd	r24, Y+5	; 0x05
    29c8:	9e 81       	ldd	r25, Y+6	; 0x06
    29ca:	9a 83       	std	Y+2, r25	; 0x02
    29cc:	89 83       	std	Y+1, r24	; 0x01
    29ce:	89 81       	ldd	r24, Y+1	; 0x01
    29d0:	9a 81       	ldd	r25, Y+2	; 0x02
    29d2:	01 97       	sbiw	r24, 0x01	; 1
    29d4:	f1 f7       	brne	.-4      	; 0x29d2 <SSD_u8DisplayBlink+0x29e>
    29d6:	9a 83       	std	Y+2, r25	; 0x02
    29d8:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(20);
		DIO_u8SetPinValue(SSD_EN_PORT,SSD_1_EN_PIN,DIO_u8PIN_LOW);
    29da:	82 e0       	ldi	r24, 0x02	; 2
    29dc:	66 e0       	ldi	r22, 0x06	; 6
    29de:	40 e0       	ldi	r20, 0x00	; 0
    29e0:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(SSD_EN_PORT,SSD_2_EN_PIN,DIO_u8PIN_LOW);
    29e4:	82 e0       	ldi	r24, 0x02	; 2
    29e6:	67 e0       	ldi	r22, 0x07	; 7
    29e8:	40 e0       	ldi	r20, 0x00	; 0
    29ea:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <DIO_u8SetPinValue>
	seven_seg[ones]|=Local_u8PortMask;

	Local_u8PortMask = DIO_u8AndWithPort(SSD_DATA_PORT,SSD_DATA_MASK);
	seven_seg[tens]|=Local_u8PortMask;

	for(Local_u8Counter=0;Local_u8Counter<100;Local_u8Counter++)
    29ee:	8f 8d       	ldd	r24, Y+31	; 0x1f
    29f0:	8f 5f       	subi	r24, 0xFF	; 255
    29f2:	8f 8f       	std	Y+31, r24	; 0x1f
    29f4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    29f6:	84 36       	cpi	r24, 0x64	; 100
    29f8:	08 f4       	brcc	.+2      	; 0x29fc <SSD_u8DisplayBlink+0x2c8>
    29fa:	e1 ce       	rjmp	.-574    	; 0x27be <SSD_u8DisplayBlink+0x8a>
		DIO_u8SetPinValue(SSD_EN_PORT,SSD_1_EN_PIN,DIO_u8PIN_LOW);
		DIO_u8SetPinValue(SSD_EN_PORT,SSD_2_EN_PIN,DIO_u8PIN_LOW);


	}
	return Local_u8ErrorState;
    29fc:	89 a1       	ldd	r24, Y+33	; 0x21
}
    29fe:	a2 96       	adiw	r28, 0x22	; 34
    2a00:	0f b6       	in	r0, 0x3f	; 63
    2a02:	f8 94       	cli
    2a04:	de bf       	out	0x3e, r29	; 62
    2a06:	0f be       	out	0x3f, r0	; 63
    2a08:	cd bf       	out	0x3d, r28	; 61
    2a0a:	cf 91       	pop	r28
    2a0c:	df 91       	pop	r29
    2a0e:	08 95       	ret

00002a10 <SSD_u8Displaynum>:

u8 SSD_u8Displaynum(u8 number)
{
    2a10:	df 93       	push	r29
    2a12:	cf 93       	push	r28
    2a14:	cd b7       	in	r28, 0x3d	; 61
    2a16:	de b7       	in	r29, 0x3e	; 62
    2a18:	a0 97       	sbiw	r28, 0x20	; 32
    2a1a:	0f b6       	in	r0, 0x3f	; 63
    2a1c:	f8 94       	cli
    2a1e:	de bf       	out	0x3e, r29	; 62
    2a20:	0f be       	out	0x3f, r0	; 63
    2a22:	cd bf       	out	0x3d, r28	; 61
    2a24:	88 a3       	std	Y+32, r24	; 0x20
	u8 Local_u8ErrorState = 0;
    2a26:	1f 8e       	std	Y+31, r1	; 0x1f

	u8 ones = number%10;
    2a28:	88 a1       	ldd	r24, Y+32	; 0x20
    2a2a:	9a e0       	ldi	r25, 0x0A	; 10
    2a2c:	69 2f       	mov	r22, r25
    2a2e:	0e 94 3e 1a 	call	0x347c	; 0x347c <__udivmodqi4>
    2a32:	89 2f       	mov	r24, r25
    2a34:	8e 8f       	std	Y+30, r24	; 0x1e
	u8 tens = number/10;
    2a36:	88 a1       	ldd	r24, Y+32	; 0x20
    2a38:	9a e0       	ldi	r25, 0x0A	; 10
    2a3a:	69 2f       	mov	r22, r25
    2a3c:	0e 94 3e 1a 	call	0x347c	; 0x347c <__udivmodqi4>
    2a40:	8d 8f       	std	Y+29, r24	; 0x1d

	for(;;)
	{
		DIO_u8SetPinValue(SSD_EN_PORT,SSD_1_EN_PIN,DIO_u8PIN_HIGH);
    2a42:	82 e0       	ldi	r24, 0x02	; 2
    2a44:	66 e0       	ldi	r22, 0x06	; 6
    2a46:	41 e0       	ldi	r20, 0x01	; 1
    2a48:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(SSD_EN_PORT,SSD_2_EN_PIN,DIO_u8PIN_LOW);
    2a4c:	82 e0       	ldi	r24, 0x02	; 2
    2a4e:	67 e0       	ldi	r22, 0x07	; 7
    2a50:	40 e0       	ldi	r20, 0x00	; 0
    2a52:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <DIO_u8SetPinValue>
		DIO_u8SetPortValue(SSD_DATA_PORT,seven_seg[ones]);
    2a56:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2a58:	88 2f       	mov	r24, r24
    2a5a:	90 e0       	ldi	r25, 0x00	; 0
    2a5c:	fc 01       	movw	r30, r24
    2a5e:	ef 56       	subi	r30, 0x6F	; 111
    2a60:	fe 4f       	sbci	r31, 0xFE	; 254
    2a62:	90 81       	ld	r25, Z
    2a64:	80 e0       	ldi	r24, 0x00	; 0
    2a66:	69 2f       	mov	r22, r25
    2a68:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <DIO_u8SetPortValue>
    2a6c:	80 e0       	ldi	r24, 0x00	; 0
    2a6e:	90 e0       	ldi	r25, 0x00	; 0
    2a70:	a0 ea       	ldi	r26, 0xA0	; 160
    2a72:	b0 e4       	ldi	r27, 0x40	; 64
    2a74:	89 8f       	std	Y+25, r24	; 0x19
    2a76:	9a 8f       	std	Y+26, r25	; 0x1a
    2a78:	ab 8f       	std	Y+27, r26	; 0x1b
    2a7a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a7c:	69 8d       	ldd	r22, Y+25	; 0x19
    2a7e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a80:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a82:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a84:	20 e0       	ldi	r18, 0x00	; 0
    2a86:	30 e0       	ldi	r19, 0x00	; 0
    2a88:	4a ef       	ldi	r20, 0xFA	; 250
    2a8a:	54 e4       	ldi	r21, 0x44	; 68
    2a8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a90:	dc 01       	movw	r26, r24
    2a92:	cb 01       	movw	r24, r22
    2a94:	8d 8b       	std	Y+21, r24	; 0x15
    2a96:	9e 8b       	std	Y+22, r25	; 0x16
    2a98:	af 8b       	std	Y+23, r26	; 0x17
    2a9a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2a9c:	6d 89       	ldd	r22, Y+21	; 0x15
    2a9e:	7e 89       	ldd	r23, Y+22	; 0x16
    2aa0:	8f 89       	ldd	r24, Y+23	; 0x17
    2aa2:	98 8d       	ldd	r25, Y+24	; 0x18
    2aa4:	20 e0       	ldi	r18, 0x00	; 0
    2aa6:	30 e0       	ldi	r19, 0x00	; 0
    2aa8:	40 e8       	ldi	r20, 0x80	; 128
    2aaa:	5f e3       	ldi	r21, 0x3F	; 63
    2aac:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    2ab0:	88 23       	and	r24, r24
    2ab2:	2c f4       	brge	.+10     	; 0x2abe <SSD_u8Displaynum+0xae>
		__ticks = 1;
    2ab4:	81 e0       	ldi	r24, 0x01	; 1
    2ab6:	90 e0       	ldi	r25, 0x00	; 0
    2ab8:	9c 8b       	std	Y+20, r25	; 0x14
    2aba:	8b 8b       	std	Y+19, r24	; 0x13
    2abc:	3f c0       	rjmp	.+126    	; 0x2b3c <SSD_u8Displaynum+0x12c>
	else if (__tmp > 65535)
    2abe:	6d 89       	ldd	r22, Y+21	; 0x15
    2ac0:	7e 89       	ldd	r23, Y+22	; 0x16
    2ac2:	8f 89       	ldd	r24, Y+23	; 0x17
    2ac4:	98 8d       	ldd	r25, Y+24	; 0x18
    2ac6:	20 e0       	ldi	r18, 0x00	; 0
    2ac8:	3f ef       	ldi	r19, 0xFF	; 255
    2aca:	4f e7       	ldi	r20, 0x7F	; 127
    2acc:	57 e4       	ldi	r21, 0x47	; 71
    2ace:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    2ad2:	18 16       	cp	r1, r24
    2ad4:	4c f5       	brge	.+82     	; 0x2b28 <SSD_u8Displaynum+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ad6:	69 8d       	ldd	r22, Y+25	; 0x19
    2ad8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ada:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2adc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ade:	20 e0       	ldi	r18, 0x00	; 0
    2ae0:	30 e0       	ldi	r19, 0x00	; 0
    2ae2:	40 e2       	ldi	r20, 0x20	; 32
    2ae4:	51 e4       	ldi	r21, 0x41	; 65
    2ae6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aea:	dc 01       	movw	r26, r24
    2aec:	cb 01       	movw	r24, r22
    2aee:	bc 01       	movw	r22, r24
    2af0:	cd 01       	movw	r24, r26
    2af2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2af6:	dc 01       	movw	r26, r24
    2af8:	cb 01       	movw	r24, r22
    2afa:	9c 8b       	std	Y+20, r25	; 0x14
    2afc:	8b 8b       	std	Y+19, r24	; 0x13
    2afe:	0f c0       	rjmp	.+30     	; 0x2b1e <SSD_u8Displaynum+0x10e>
    2b00:	88 ec       	ldi	r24, 0xC8	; 200
    2b02:	90 e0       	ldi	r25, 0x00	; 0
    2b04:	9a 8b       	std	Y+18, r25	; 0x12
    2b06:	89 8b       	std	Y+17, r24	; 0x11
    2b08:	89 89       	ldd	r24, Y+17	; 0x11
    2b0a:	9a 89       	ldd	r25, Y+18	; 0x12
    2b0c:	01 97       	sbiw	r24, 0x01	; 1
    2b0e:	f1 f7       	brne	.-4      	; 0x2b0c <SSD_u8Displaynum+0xfc>
    2b10:	9a 8b       	std	Y+18, r25	; 0x12
    2b12:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b14:	8b 89       	ldd	r24, Y+19	; 0x13
    2b16:	9c 89       	ldd	r25, Y+20	; 0x14
    2b18:	01 97       	sbiw	r24, 0x01	; 1
    2b1a:	9c 8b       	std	Y+20, r25	; 0x14
    2b1c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b1e:	8b 89       	ldd	r24, Y+19	; 0x13
    2b20:	9c 89       	ldd	r25, Y+20	; 0x14
    2b22:	00 97       	sbiw	r24, 0x00	; 0
    2b24:	69 f7       	brne	.-38     	; 0x2b00 <SSD_u8Displaynum+0xf0>
    2b26:	14 c0       	rjmp	.+40     	; 0x2b50 <SSD_u8Displaynum+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b28:	6d 89       	ldd	r22, Y+21	; 0x15
    2b2a:	7e 89       	ldd	r23, Y+22	; 0x16
    2b2c:	8f 89       	ldd	r24, Y+23	; 0x17
    2b2e:	98 8d       	ldd	r25, Y+24	; 0x18
    2b30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b34:	dc 01       	movw	r26, r24
    2b36:	cb 01       	movw	r24, r22
    2b38:	9c 8b       	std	Y+20, r25	; 0x14
    2b3a:	8b 8b       	std	Y+19, r24	; 0x13
    2b3c:	8b 89       	ldd	r24, Y+19	; 0x13
    2b3e:	9c 89       	ldd	r25, Y+20	; 0x14
    2b40:	98 8b       	std	Y+16, r25	; 0x10
    2b42:	8f 87       	std	Y+15, r24	; 0x0f
    2b44:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b46:	98 89       	ldd	r25, Y+16	; 0x10
    2b48:	01 97       	sbiw	r24, 0x01	; 1
    2b4a:	f1 f7       	brne	.-4      	; 0x2b48 <SSD_u8Displaynum+0x138>
    2b4c:	98 8b       	std	Y+16, r25	; 0x10
    2b4e:	8f 87       	std	Y+15, r24	; 0x0f

		_delay_ms(5);
		DIO_u8SetPinValue(SSD_EN_PORT,SSD_1_EN_PIN,DIO_u8PIN_LOW);
    2b50:	82 e0       	ldi	r24, 0x02	; 2
    2b52:	66 e0       	ldi	r22, 0x06	; 6
    2b54:	40 e0       	ldi	r20, 0x00	; 0
    2b56:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(SSD_EN_PORT,SSD_2_EN_PIN,DIO_u8PIN_HIGH);
    2b5a:	82 e0       	ldi	r24, 0x02	; 2
    2b5c:	67 e0       	ldi	r22, 0x07	; 7
    2b5e:	41 e0       	ldi	r20, 0x01	; 1
    2b60:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <DIO_u8SetPinValue>
		DIO_u8SetPortValue(SSD_DATA_PORT,seven_seg[tens]);
    2b64:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b66:	88 2f       	mov	r24, r24
    2b68:	90 e0       	ldi	r25, 0x00	; 0
    2b6a:	fc 01       	movw	r30, r24
    2b6c:	ef 56       	subi	r30, 0x6F	; 111
    2b6e:	fe 4f       	sbci	r31, 0xFE	; 254
    2b70:	90 81       	ld	r25, Z
    2b72:	80 e0       	ldi	r24, 0x00	; 0
    2b74:	69 2f       	mov	r22, r25
    2b76:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <DIO_u8SetPortValue>
    2b7a:	80 e0       	ldi	r24, 0x00	; 0
    2b7c:	90 e0       	ldi	r25, 0x00	; 0
    2b7e:	a0 ea       	ldi	r26, 0xA0	; 160
    2b80:	b0 e4       	ldi	r27, 0x40	; 64
    2b82:	8b 87       	std	Y+11, r24	; 0x0b
    2b84:	9c 87       	std	Y+12, r25	; 0x0c
    2b86:	ad 87       	std	Y+13, r26	; 0x0d
    2b88:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b8a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b8c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b90:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b92:	20 e0       	ldi	r18, 0x00	; 0
    2b94:	30 e0       	ldi	r19, 0x00	; 0
    2b96:	4a ef       	ldi	r20, 0xFA	; 250
    2b98:	54 e4       	ldi	r21, 0x44	; 68
    2b9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b9e:	dc 01       	movw	r26, r24
    2ba0:	cb 01       	movw	r24, r22
    2ba2:	8f 83       	std	Y+7, r24	; 0x07
    2ba4:	98 87       	std	Y+8, r25	; 0x08
    2ba6:	a9 87       	std	Y+9, r26	; 0x09
    2ba8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2baa:	6f 81       	ldd	r22, Y+7	; 0x07
    2bac:	78 85       	ldd	r23, Y+8	; 0x08
    2bae:	89 85       	ldd	r24, Y+9	; 0x09
    2bb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bb2:	20 e0       	ldi	r18, 0x00	; 0
    2bb4:	30 e0       	ldi	r19, 0x00	; 0
    2bb6:	40 e8       	ldi	r20, 0x80	; 128
    2bb8:	5f e3       	ldi	r21, 0x3F	; 63
    2bba:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    2bbe:	88 23       	and	r24, r24
    2bc0:	2c f4       	brge	.+10     	; 0x2bcc <SSD_u8Displaynum+0x1bc>
		__ticks = 1;
    2bc2:	81 e0       	ldi	r24, 0x01	; 1
    2bc4:	90 e0       	ldi	r25, 0x00	; 0
    2bc6:	9e 83       	std	Y+6, r25	; 0x06
    2bc8:	8d 83       	std	Y+5, r24	; 0x05
    2bca:	3f c0       	rjmp	.+126    	; 0x2c4a <SSD_u8Displaynum+0x23a>
	else if (__tmp > 65535)
    2bcc:	6f 81       	ldd	r22, Y+7	; 0x07
    2bce:	78 85       	ldd	r23, Y+8	; 0x08
    2bd0:	89 85       	ldd	r24, Y+9	; 0x09
    2bd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bd4:	20 e0       	ldi	r18, 0x00	; 0
    2bd6:	3f ef       	ldi	r19, 0xFF	; 255
    2bd8:	4f e7       	ldi	r20, 0x7F	; 127
    2bda:	57 e4       	ldi	r21, 0x47	; 71
    2bdc:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    2be0:	18 16       	cp	r1, r24
    2be2:	4c f5       	brge	.+82     	; 0x2c36 <SSD_u8Displaynum+0x226>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2be4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2be6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2be8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bea:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bec:	20 e0       	ldi	r18, 0x00	; 0
    2bee:	30 e0       	ldi	r19, 0x00	; 0
    2bf0:	40 e2       	ldi	r20, 0x20	; 32
    2bf2:	51 e4       	ldi	r21, 0x41	; 65
    2bf4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bf8:	dc 01       	movw	r26, r24
    2bfa:	cb 01       	movw	r24, r22
    2bfc:	bc 01       	movw	r22, r24
    2bfe:	cd 01       	movw	r24, r26
    2c00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c04:	dc 01       	movw	r26, r24
    2c06:	cb 01       	movw	r24, r22
    2c08:	9e 83       	std	Y+6, r25	; 0x06
    2c0a:	8d 83       	std	Y+5, r24	; 0x05
    2c0c:	0f c0       	rjmp	.+30     	; 0x2c2c <SSD_u8Displaynum+0x21c>
    2c0e:	88 ec       	ldi	r24, 0xC8	; 200
    2c10:	90 e0       	ldi	r25, 0x00	; 0
    2c12:	9c 83       	std	Y+4, r25	; 0x04
    2c14:	8b 83       	std	Y+3, r24	; 0x03
    2c16:	8b 81       	ldd	r24, Y+3	; 0x03
    2c18:	9c 81       	ldd	r25, Y+4	; 0x04
    2c1a:	01 97       	sbiw	r24, 0x01	; 1
    2c1c:	f1 f7       	brne	.-4      	; 0x2c1a <SSD_u8Displaynum+0x20a>
    2c1e:	9c 83       	std	Y+4, r25	; 0x04
    2c20:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c22:	8d 81       	ldd	r24, Y+5	; 0x05
    2c24:	9e 81       	ldd	r25, Y+6	; 0x06
    2c26:	01 97       	sbiw	r24, 0x01	; 1
    2c28:	9e 83       	std	Y+6, r25	; 0x06
    2c2a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c2c:	8d 81       	ldd	r24, Y+5	; 0x05
    2c2e:	9e 81       	ldd	r25, Y+6	; 0x06
    2c30:	00 97       	sbiw	r24, 0x00	; 0
    2c32:	69 f7       	brne	.-38     	; 0x2c0e <SSD_u8Displaynum+0x1fe>
    2c34:	14 c0       	rjmp	.+40     	; 0x2c5e <SSD_u8Displaynum+0x24e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c36:	6f 81       	ldd	r22, Y+7	; 0x07
    2c38:	78 85       	ldd	r23, Y+8	; 0x08
    2c3a:	89 85       	ldd	r24, Y+9	; 0x09
    2c3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c42:	dc 01       	movw	r26, r24
    2c44:	cb 01       	movw	r24, r22
    2c46:	9e 83       	std	Y+6, r25	; 0x06
    2c48:	8d 83       	std	Y+5, r24	; 0x05
    2c4a:	8d 81       	ldd	r24, Y+5	; 0x05
    2c4c:	9e 81       	ldd	r25, Y+6	; 0x06
    2c4e:	9a 83       	std	Y+2, r25	; 0x02
    2c50:	89 83       	std	Y+1, r24	; 0x01
    2c52:	89 81       	ldd	r24, Y+1	; 0x01
    2c54:	9a 81       	ldd	r25, Y+2	; 0x02
    2c56:	01 97       	sbiw	r24, 0x01	; 1
    2c58:	f1 f7       	brne	.-4      	; 0x2c56 <SSD_u8Displaynum+0x246>
    2c5a:	9a 83       	std	Y+2, r25	; 0x02
    2c5c:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(5);
		DIO_u8SetPinValue(SSD_EN_PORT,SSD_1_EN_PIN,DIO_u8PIN_LOW);
    2c5e:	82 e0       	ldi	r24, 0x02	; 2
    2c60:	66 e0       	ldi	r22, 0x06	; 6
    2c62:	40 e0       	ldi	r20, 0x00	; 0
    2c64:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(SSD_EN_PORT,SSD_2_EN_PIN,DIO_u8PIN_LOW);
    2c68:	82 e0       	ldi	r24, 0x02	; 2
    2c6a:	67 e0       	ldi	r22, 0x07	; 7
    2c6c:	40 e0       	ldi	r20, 0x00	; 0
    2c6e:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <DIO_u8SetPinValue>
    2c72:	e7 ce       	rjmp	.-562    	; 0x2a42 <SSD_u8Displaynum+0x32>

00002c74 <SSD_u8CountUp>:
	return Local_u8ErrorState;

}

u8 SSD_u8CountUp(u8 number)
{
    2c74:	df 93       	push	r29
    2c76:	cf 93       	push	r28
    2c78:	00 d0       	rcall	.+0      	; 0x2c7a <SSD_u8CountUp+0x6>
    2c7a:	0f 92       	push	r0
    2c7c:	cd b7       	in	r28, 0x3d	; 61
    2c7e:	de b7       	in	r29, 0x3e	; 62
    2c80:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8ErrorState = 0;
    2c82:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8Counter;

	for(Local_u8Counter=0;Local_u8Counter<=number;Local_u8Counter++)
    2c84:	19 82       	std	Y+1, r1	; 0x01
    2c86:	06 c0       	rjmp	.+12     	; 0x2c94 <SSD_u8CountUp+0x20>
	{
		SSD_u8DisplayBlink(Local_u8Counter);
    2c88:	89 81       	ldd	r24, Y+1	; 0x01
    2c8a:	0e 94 9a 13 	call	0x2734	; 0x2734 <SSD_u8DisplayBlink>
u8 SSD_u8CountUp(u8 number)
{
	u8 Local_u8ErrorState = 0;
	u8 Local_u8Counter;

	for(Local_u8Counter=0;Local_u8Counter<=number;Local_u8Counter++)
    2c8e:	89 81       	ldd	r24, Y+1	; 0x01
    2c90:	8f 5f       	subi	r24, 0xFF	; 255
    2c92:	89 83       	std	Y+1, r24	; 0x01
    2c94:	99 81       	ldd	r25, Y+1	; 0x01
    2c96:	8b 81       	ldd	r24, Y+3	; 0x03
    2c98:	89 17       	cp	r24, r25
    2c9a:	b0 f7       	brcc	.-20     	; 0x2c88 <SSD_u8CountUp+0x14>
	{
		SSD_u8DisplayBlink(Local_u8Counter);

	}

	return Local_u8ErrorState;
    2c9c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2c9e:	0f 90       	pop	r0
    2ca0:	0f 90       	pop	r0
    2ca2:	0f 90       	pop	r0
    2ca4:	cf 91       	pop	r28
    2ca6:	df 91       	pop	r29
    2ca8:	08 95       	ret

00002caa <SSD_u8CountDown>:

u8 SSD_u8CountDown(u8 number)
{
    2caa:	df 93       	push	r29
    2cac:	cf 93       	push	r28
    2cae:	00 d0       	rcall	.+0      	; 0x2cb0 <SSD_u8CountDown+0x6>
    2cb0:	0f 92       	push	r0
    2cb2:	cd b7       	in	r28, 0x3d	; 61
    2cb4:	de b7       	in	r29, 0x3e	; 62
    2cb6:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8ErrorState = 0;
    2cb8:	1a 82       	std	Y+2, r1	; 0x02
	s8 Local_u8Counter;
	for(Local_u8Counter=number;Local_u8Counter>=0;Local_u8Counter--)
    2cba:	8b 81       	ldd	r24, Y+3	; 0x03
    2cbc:	89 83       	std	Y+1, r24	; 0x01
    2cbe:	06 c0       	rjmp	.+12     	; 0x2ccc <SSD_u8CountDown+0x22>
	{
		SSD_u8DisplayBlink(Local_u8Counter);
    2cc0:	89 81       	ldd	r24, Y+1	; 0x01
    2cc2:	0e 94 9a 13 	call	0x2734	; 0x2734 <SSD_u8DisplayBlink>

u8 SSD_u8CountDown(u8 number)
{
	u8 Local_u8ErrorState = 0;
	s8 Local_u8Counter;
	for(Local_u8Counter=number;Local_u8Counter>=0;Local_u8Counter--)
    2cc6:	89 81       	ldd	r24, Y+1	; 0x01
    2cc8:	81 50       	subi	r24, 0x01	; 1
    2cca:	89 83       	std	Y+1, r24	; 0x01
    2ccc:	89 81       	ldd	r24, Y+1	; 0x01
    2cce:	88 23       	and	r24, r24
    2cd0:	bc f7       	brge	.-18     	; 0x2cc0 <SSD_u8CountDown+0x16>
	{
		SSD_u8DisplayBlink(Local_u8Counter);
	}

	return Local_u8ErrorState;
    2cd2:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2cd4:	0f 90       	pop	r0
    2cd6:	0f 90       	pop	r0
    2cd8:	0f 90       	pop	r0
    2cda:	cf 91       	pop	r28
    2cdc:	df 91       	pop	r29
    2cde:	08 95       	ret

00002ce0 <SSD_u8Specficfunc>:

void SSD_u8Specficfunc(void)
{
    2ce0:	df 93       	push	r29
    2ce2:	cf 93       	push	r28
    2ce4:	cd b7       	in	r28, 0x3d	; 61
    2ce6:	de b7       	in	r29, 0x3e	; 62
    2ce8:	6e 97       	sbiw	r28, 0x1e	; 30
    2cea:	0f b6       	in	r0, 0x3f	; 63
    2cec:	f8 94       	cli
    2cee:	de bf       	out	0x3e, r29	; 62
    2cf0:	0f be       	out	0x3f, r0	; 63
    2cf2:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8PortMask;

	u8 Local_u8Counter;


	Local_u8PortMask = DIO_u8AndWithPort(SSD_DATA_PORT,SSD_DATA_MASK);
    2cf4:	80 e0       	ldi	r24, 0x00	; 0
    2cf6:	61 e0       	ldi	r22, 0x01	; 1
    2cf8:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <DIO_u8AndWithPort>
    2cfc:	8e 8f       	std	Y+30, r24	; 0x1e
	seven_seg[Local_u8num1]|=Local_u8PortMask;
    2cfe:	80 91 9b 01 	lds	r24, 0x019B
    2d02:	28 2f       	mov	r18, r24
    2d04:	30 e0       	ldi	r19, 0x00	; 0
    2d06:	80 91 9b 01 	lds	r24, 0x019B
    2d0a:	88 2f       	mov	r24, r24
    2d0c:	90 e0       	ldi	r25, 0x00	; 0
    2d0e:	fc 01       	movw	r30, r24
    2d10:	ef 56       	subi	r30, 0x6F	; 111
    2d12:	fe 4f       	sbci	r31, 0xFE	; 254
    2d14:	90 81       	ld	r25, Z
    2d16:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2d18:	89 2b       	or	r24, r25
    2d1a:	f9 01       	movw	r30, r18
    2d1c:	ef 56       	subi	r30, 0x6F	; 111
    2d1e:	fe 4f       	sbci	r31, 0xFE	; 254
    2d20:	80 83       	st	Z, r24

	Local_u8PortMask = DIO_u8AndWithPort(SSD_DATA_PORT,SSD_DATA_MASK);
    2d22:	80 e0       	ldi	r24, 0x00	; 0
    2d24:	61 e0       	ldi	r22, 0x01	; 1
    2d26:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <DIO_u8AndWithPort>
    2d2a:	8e 8f       	std	Y+30, r24	; 0x1e
	seven_seg[Local_u8num2]|=Local_u8PortMask;
    2d2c:	80 91 a2 01 	lds	r24, 0x01A2
    2d30:	28 2f       	mov	r18, r24
    2d32:	30 e0       	ldi	r19, 0x00	; 0
    2d34:	80 91 a2 01 	lds	r24, 0x01A2
    2d38:	88 2f       	mov	r24, r24
    2d3a:	90 e0       	ldi	r25, 0x00	; 0
    2d3c:	fc 01       	movw	r30, r24
    2d3e:	ef 56       	subi	r30, 0x6F	; 111
    2d40:	fe 4f       	sbci	r31, 0xFE	; 254
    2d42:	90 81       	ld	r25, Z
    2d44:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2d46:	89 2b       	or	r24, r25
    2d48:	f9 01       	movw	r30, r18
    2d4a:	ef 56       	subi	r30, 0x6F	; 111
    2d4c:	fe 4f       	sbci	r31, 0xFE	; 254
    2d4e:	80 83       	st	Z, r24


	DIO_u8SetPinValue(SSD_EN_PORT,SSD_1_EN_PIN,DIO_u8PIN_LOW);
    2d50:	82 e0       	ldi	r24, 0x02	; 2
    2d52:	66 e0       	ldi	r22, 0x06	; 6
    2d54:	40 e0       	ldi	r20, 0x00	; 0
    2d56:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(SSD_EN_PORT,SSD_2_EN_PIN,DIO_u8PIN_LOW);
    2d5a:	82 e0       	ldi	r24, 0x02	; 2
    2d5c:	67 e0       	ldi	r22, 0x07	; 7
    2d5e:	40 e0       	ldi	r20, 0x00	; 0
    2d60:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <DIO_u8SetPinValue>
    2d64:	80 e0       	ldi	r24, 0x00	; 0
    2d66:	90 e0       	ldi	r25, 0x00	; 0
    2d68:	a0 ea       	ldi	r26, 0xA0	; 160
    2d6a:	b0 e4       	ldi	r27, 0x40	; 64
    2d6c:	89 8f       	std	Y+25, r24	; 0x19
    2d6e:	9a 8f       	std	Y+26, r25	; 0x1a
    2d70:	ab 8f       	std	Y+27, r26	; 0x1b
    2d72:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d74:	69 8d       	ldd	r22, Y+25	; 0x19
    2d76:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d78:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d7a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d7c:	20 e0       	ldi	r18, 0x00	; 0
    2d7e:	30 e0       	ldi	r19, 0x00	; 0
    2d80:	4a ef       	ldi	r20, 0xFA	; 250
    2d82:	54 e4       	ldi	r21, 0x44	; 68
    2d84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d88:	dc 01       	movw	r26, r24
    2d8a:	cb 01       	movw	r24, r22
    2d8c:	8d 8b       	std	Y+21, r24	; 0x15
    2d8e:	9e 8b       	std	Y+22, r25	; 0x16
    2d90:	af 8b       	std	Y+23, r26	; 0x17
    2d92:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2d94:	6d 89       	ldd	r22, Y+21	; 0x15
    2d96:	7e 89       	ldd	r23, Y+22	; 0x16
    2d98:	8f 89       	ldd	r24, Y+23	; 0x17
    2d9a:	98 8d       	ldd	r25, Y+24	; 0x18
    2d9c:	20 e0       	ldi	r18, 0x00	; 0
    2d9e:	30 e0       	ldi	r19, 0x00	; 0
    2da0:	40 e8       	ldi	r20, 0x80	; 128
    2da2:	5f e3       	ldi	r21, 0x3F	; 63
    2da4:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    2da8:	88 23       	and	r24, r24
    2daa:	2c f4       	brge	.+10     	; 0x2db6 <SSD_u8Specficfunc+0xd6>
		__ticks = 1;
    2dac:	81 e0       	ldi	r24, 0x01	; 1
    2dae:	90 e0       	ldi	r25, 0x00	; 0
    2db0:	9c 8b       	std	Y+20, r25	; 0x14
    2db2:	8b 8b       	std	Y+19, r24	; 0x13
    2db4:	3f c0       	rjmp	.+126    	; 0x2e34 <SSD_u8Specficfunc+0x154>
	else if (__tmp > 65535)
    2db6:	6d 89       	ldd	r22, Y+21	; 0x15
    2db8:	7e 89       	ldd	r23, Y+22	; 0x16
    2dba:	8f 89       	ldd	r24, Y+23	; 0x17
    2dbc:	98 8d       	ldd	r25, Y+24	; 0x18
    2dbe:	20 e0       	ldi	r18, 0x00	; 0
    2dc0:	3f ef       	ldi	r19, 0xFF	; 255
    2dc2:	4f e7       	ldi	r20, 0x7F	; 127
    2dc4:	57 e4       	ldi	r21, 0x47	; 71
    2dc6:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    2dca:	18 16       	cp	r1, r24
    2dcc:	4c f5       	brge	.+82     	; 0x2e20 <SSD_u8Specficfunc+0x140>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dce:	69 8d       	ldd	r22, Y+25	; 0x19
    2dd0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2dd2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2dd4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2dd6:	20 e0       	ldi	r18, 0x00	; 0
    2dd8:	30 e0       	ldi	r19, 0x00	; 0
    2dda:	40 e2       	ldi	r20, 0x20	; 32
    2ddc:	51 e4       	ldi	r21, 0x41	; 65
    2dde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2de2:	dc 01       	movw	r26, r24
    2de4:	cb 01       	movw	r24, r22
    2de6:	bc 01       	movw	r22, r24
    2de8:	cd 01       	movw	r24, r26
    2dea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dee:	dc 01       	movw	r26, r24
    2df0:	cb 01       	movw	r24, r22
    2df2:	9c 8b       	std	Y+20, r25	; 0x14
    2df4:	8b 8b       	std	Y+19, r24	; 0x13
    2df6:	0f c0       	rjmp	.+30     	; 0x2e16 <SSD_u8Specficfunc+0x136>
    2df8:	88 ec       	ldi	r24, 0xC8	; 200
    2dfa:	90 e0       	ldi	r25, 0x00	; 0
    2dfc:	9a 8b       	std	Y+18, r25	; 0x12
    2dfe:	89 8b       	std	Y+17, r24	; 0x11
    2e00:	89 89       	ldd	r24, Y+17	; 0x11
    2e02:	9a 89       	ldd	r25, Y+18	; 0x12
    2e04:	01 97       	sbiw	r24, 0x01	; 1
    2e06:	f1 f7       	brne	.-4      	; 0x2e04 <SSD_u8Specficfunc+0x124>
    2e08:	9a 8b       	std	Y+18, r25	; 0x12
    2e0a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e0c:	8b 89       	ldd	r24, Y+19	; 0x13
    2e0e:	9c 89       	ldd	r25, Y+20	; 0x14
    2e10:	01 97       	sbiw	r24, 0x01	; 1
    2e12:	9c 8b       	std	Y+20, r25	; 0x14
    2e14:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e16:	8b 89       	ldd	r24, Y+19	; 0x13
    2e18:	9c 89       	ldd	r25, Y+20	; 0x14
    2e1a:	00 97       	sbiw	r24, 0x00	; 0
    2e1c:	69 f7       	brne	.-38     	; 0x2df8 <SSD_u8Specficfunc+0x118>
    2e1e:	14 c0       	rjmp	.+40     	; 0x2e48 <SSD_u8Specficfunc+0x168>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e20:	6d 89       	ldd	r22, Y+21	; 0x15
    2e22:	7e 89       	ldd	r23, Y+22	; 0x16
    2e24:	8f 89       	ldd	r24, Y+23	; 0x17
    2e26:	98 8d       	ldd	r25, Y+24	; 0x18
    2e28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e2c:	dc 01       	movw	r26, r24
    2e2e:	cb 01       	movw	r24, r22
    2e30:	9c 8b       	std	Y+20, r25	; 0x14
    2e32:	8b 8b       	std	Y+19, r24	; 0x13
    2e34:	8b 89       	ldd	r24, Y+19	; 0x13
    2e36:	9c 89       	ldd	r25, Y+20	; 0x14
    2e38:	98 8b       	std	Y+16, r25	; 0x10
    2e3a:	8f 87       	std	Y+15, r24	; 0x0f
    2e3c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e3e:	98 89       	ldd	r25, Y+16	; 0x10
    2e40:	01 97       	sbiw	r24, 0x01	; 1
    2e42:	f1 f7       	brne	.-4      	; 0x2e40 <SSD_u8Specficfunc+0x160>
    2e44:	98 8b       	std	Y+16, r25	; 0x10
    2e46:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);

	DIO_u8SetPinValue(SSD_EN_PORT,SSD_1_EN_PIN,DIO_u8PIN_HIGH);
    2e48:	82 e0       	ldi	r24, 0x02	; 2
    2e4a:	66 e0       	ldi	r22, 0x06	; 6
    2e4c:	41 e0       	ldi	r20, 0x01	; 1
    2e4e:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(SSD_EN_PORT,SSD_2_EN_PIN,DIO_u8PIN_LOW);
    2e52:	82 e0       	ldi	r24, 0x02	; 2
    2e54:	67 e0       	ldi	r22, 0x07	; 7
    2e56:	40 e0       	ldi	r20, 0x00	; 0
    2e58:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <DIO_u8SetPinValue>
	DIO_u8SetPortValue(SSD_DATA_PORT,seven_seg[Local_u8num1]);
    2e5c:	80 91 9b 01 	lds	r24, 0x019B
    2e60:	88 2f       	mov	r24, r24
    2e62:	90 e0       	ldi	r25, 0x00	; 0
    2e64:	fc 01       	movw	r30, r24
    2e66:	ef 56       	subi	r30, 0x6F	; 111
    2e68:	fe 4f       	sbci	r31, 0xFE	; 254
    2e6a:	90 81       	ld	r25, Z
    2e6c:	80 e0       	ldi	r24, 0x00	; 0
    2e6e:	69 2f       	mov	r22, r25
    2e70:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <DIO_u8SetPortValue>
    2e74:	80 e0       	ldi	r24, 0x00	; 0
    2e76:	90 e0       	ldi	r25, 0x00	; 0
    2e78:	a0 ea       	ldi	r26, 0xA0	; 160
    2e7a:	b0 e4       	ldi	r27, 0x40	; 64
    2e7c:	8b 87       	std	Y+11, r24	; 0x0b
    2e7e:	9c 87       	std	Y+12, r25	; 0x0c
    2e80:	ad 87       	std	Y+13, r26	; 0x0d
    2e82:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e84:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e86:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e88:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e8c:	20 e0       	ldi	r18, 0x00	; 0
    2e8e:	30 e0       	ldi	r19, 0x00	; 0
    2e90:	4a ef       	ldi	r20, 0xFA	; 250
    2e92:	54 e4       	ldi	r21, 0x44	; 68
    2e94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e98:	dc 01       	movw	r26, r24
    2e9a:	cb 01       	movw	r24, r22
    2e9c:	8f 83       	std	Y+7, r24	; 0x07
    2e9e:	98 87       	std	Y+8, r25	; 0x08
    2ea0:	a9 87       	std	Y+9, r26	; 0x09
    2ea2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ea4:	6f 81       	ldd	r22, Y+7	; 0x07
    2ea6:	78 85       	ldd	r23, Y+8	; 0x08
    2ea8:	89 85       	ldd	r24, Y+9	; 0x09
    2eaa:	9a 85       	ldd	r25, Y+10	; 0x0a
    2eac:	20 e0       	ldi	r18, 0x00	; 0
    2eae:	30 e0       	ldi	r19, 0x00	; 0
    2eb0:	40 e8       	ldi	r20, 0x80	; 128
    2eb2:	5f e3       	ldi	r21, 0x3F	; 63
    2eb4:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    2eb8:	88 23       	and	r24, r24
    2eba:	2c f4       	brge	.+10     	; 0x2ec6 <SSD_u8Specficfunc+0x1e6>
		__ticks = 1;
    2ebc:	81 e0       	ldi	r24, 0x01	; 1
    2ebe:	90 e0       	ldi	r25, 0x00	; 0
    2ec0:	9e 83       	std	Y+6, r25	; 0x06
    2ec2:	8d 83       	std	Y+5, r24	; 0x05
    2ec4:	3f c0       	rjmp	.+126    	; 0x2f44 <SSD_u8Specficfunc+0x264>
	else if (__tmp > 65535)
    2ec6:	6f 81       	ldd	r22, Y+7	; 0x07
    2ec8:	78 85       	ldd	r23, Y+8	; 0x08
    2eca:	89 85       	ldd	r24, Y+9	; 0x09
    2ecc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ece:	20 e0       	ldi	r18, 0x00	; 0
    2ed0:	3f ef       	ldi	r19, 0xFF	; 255
    2ed2:	4f e7       	ldi	r20, 0x7F	; 127
    2ed4:	57 e4       	ldi	r21, 0x47	; 71
    2ed6:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    2eda:	18 16       	cp	r1, r24
    2edc:	4c f5       	brge	.+82     	; 0x2f30 <SSD_u8Specficfunc+0x250>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ede:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ee0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ee2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ee4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ee6:	20 e0       	ldi	r18, 0x00	; 0
    2ee8:	30 e0       	ldi	r19, 0x00	; 0
    2eea:	40 e2       	ldi	r20, 0x20	; 32
    2eec:	51 e4       	ldi	r21, 0x41	; 65
    2eee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ef2:	dc 01       	movw	r26, r24
    2ef4:	cb 01       	movw	r24, r22
    2ef6:	bc 01       	movw	r22, r24
    2ef8:	cd 01       	movw	r24, r26
    2efa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2efe:	dc 01       	movw	r26, r24
    2f00:	cb 01       	movw	r24, r22
    2f02:	9e 83       	std	Y+6, r25	; 0x06
    2f04:	8d 83       	std	Y+5, r24	; 0x05
    2f06:	0f c0       	rjmp	.+30     	; 0x2f26 <SSD_u8Specficfunc+0x246>
    2f08:	88 ec       	ldi	r24, 0xC8	; 200
    2f0a:	90 e0       	ldi	r25, 0x00	; 0
    2f0c:	9c 83       	std	Y+4, r25	; 0x04
    2f0e:	8b 83       	std	Y+3, r24	; 0x03
    2f10:	8b 81       	ldd	r24, Y+3	; 0x03
    2f12:	9c 81       	ldd	r25, Y+4	; 0x04
    2f14:	01 97       	sbiw	r24, 0x01	; 1
    2f16:	f1 f7       	brne	.-4      	; 0x2f14 <SSD_u8Specficfunc+0x234>
    2f18:	9c 83       	std	Y+4, r25	; 0x04
    2f1a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f1c:	8d 81       	ldd	r24, Y+5	; 0x05
    2f1e:	9e 81       	ldd	r25, Y+6	; 0x06
    2f20:	01 97       	sbiw	r24, 0x01	; 1
    2f22:	9e 83       	std	Y+6, r25	; 0x06
    2f24:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f26:	8d 81       	ldd	r24, Y+5	; 0x05
    2f28:	9e 81       	ldd	r25, Y+6	; 0x06
    2f2a:	00 97       	sbiw	r24, 0x00	; 0
    2f2c:	69 f7       	brne	.-38     	; 0x2f08 <SSD_u8Specficfunc+0x228>
    2f2e:	14 c0       	rjmp	.+40     	; 0x2f58 <SSD_u8Specficfunc+0x278>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f30:	6f 81       	ldd	r22, Y+7	; 0x07
    2f32:	78 85       	ldd	r23, Y+8	; 0x08
    2f34:	89 85       	ldd	r24, Y+9	; 0x09
    2f36:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f3c:	dc 01       	movw	r26, r24
    2f3e:	cb 01       	movw	r24, r22
    2f40:	9e 83       	std	Y+6, r25	; 0x06
    2f42:	8d 83       	std	Y+5, r24	; 0x05
    2f44:	8d 81       	ldd	r24, Y+5	; 0x05
    2f46:	9e 81       	ldd	r25, Y+6	; 0x06
    2f48:	9a 83       	std	Y+2, r25	; 0x02
    2f4a:	89 83       	std	Y+1, r24	; 0x01
    2f4c:	89 81       	ldd	r24, Y+1	; 0x01
    2f4e:	9a 81       	ldd	r25, Y+2	; 0x02
    2f50:	01 97       	sbiw	r24, 0x01	; 1
    2f52:	f1 f7       	brne	.-4      	; 0x2f50 <SSD_u8Specficfunc+0x270>
    2f54:	9a 83       	std	Y+2, r25	; 0x02
    2f56:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(5);
	DIO_u8SetPinValue(SSD_EN_PORT,SSD_1_EN_PIN,DIO_u8PIN_LOW);
    2f58:	82 e0       	ldi	r24, 0x02	; 2
    2f5a:	66 e0       	ldi	r22, 0x06	; 6
    2f5c:	40 e0       	ldi	r20, 0x00	; 0
    2f5e:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(SSD_EN_PORT,SSD_2_EN_PIN,DIO_u8PIN_HIGH);
    2f62:	82 e0       	ldi	r24, 0x02	; 2
    2f64:	67 e0       	ldi	r22, 0x07	; 7
    2f66:	41 e0       	ldi	r20, 0x01	; 1
    2f68:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <DIO_u8SetPinValue>
	DIO_u8SetPortValue(SSD_DATA_PORT,seven_seg[Local_u8num2]);
    2f6c:	80 91 a2 01 	lds	r24, 0x01A2
    2f70:	88 2f       	mov	r24, r24
    2f72:	90 e0       	ldi	r25, 0x00	; 0
    2f74:	fc 01       	movw	r30, r24
    2f76:	ef 56       	subi	r30, 0x6F	; 111
    2f78:	fe 4f       	sbci	r31, 0xFE	; 254
    2f7a:	90 81       	ld	r25, Z
    2f7c:	80 e0       	ldi	r24, 0x00	; 0
    2f7e:	69 2f       	mov	r22, r25
    2f80:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <DIO_u8SetPortValue>



	if(Local_u8num1 - Local_u8num2 >= 0 && Local_u8num2 == Local_u8num1-1)
    2f84:	80 91 9b 01 	lds	r24, 0x019B
    2f88:	28 2f       	mov	r18, r24
    2f8a:	30 e0       	ldi	r19, 0x00	; 0
    2f8c:	80 91 a2 01 	lds	r24, 0x01A2
    2f90:	88 2f       	mov	r24, r24
    2f92:	90 e0       	ldi	r25, 0x00	; 0
    2f94:	a9 01       	movw	r20, r18
    2f96:	48 1b       	sub	r20, r24
    2f98:	59 0b       	sbc	r21, r25
    2f9a:	ca 01       	movw	r24, r20
    2f9c:	99 23       	and	r25, r25
    2f9e:	bc f0       	brlt	.+46     	; 0x2fce <SSD_u8Specficfunc+0x2ee>
    2fa0:	80 91 a2 01 	lds	r24, 0x01A2
    2fa4:	28 2f       	mov	r18, r24
    2fa6:	30 e0       	ldi	r19, 0x00	; 0
    2fa8:	80 91 9b 01 	lds	r24, 0x019B
    2fac:	88 2f       	mov	r24, r24
    2fae:	90 e0       	ldi	r25, 0x00	; 0
    2fb0:	01 97       	sbiw	r24, 0x01	; 1
    2fb2:	28 17       	cp	r18, r24
    2fb4:	39 07       	cpc	r19, r25
    2fb6:	59 f4       	brne	.+22     	; 0x2fce <SSD_u8Specficfunc+0x2ee>
	{
		Local_u8num1 --;
    2fb8:	80 91 9b 01 	lds	r24, 0x019B
    2fbc:	81 50       	subi	r24, 0x01	; 1
    2fbe:	80 93 9b 01 	sts	0x019B, r24
		Local_u8num2 ++;
    2fc2:	80 91 a2 01 	lds	r24, 0x01A2
    2fc6:	8f 5f       	subi	r24, 0xFF	; 255
    2fc8:	80 93 a2 01 	sts	0x01A2, r24
    2fcc:	0a c0       	rjmp	.+20     	; 0x2fe2 <SSD_u8Specficfunc+0x302>
	}
	else
	{
		Local_u8num1 ++;
    2fce:	80 91 9b 01 	lds	r24, 0x019B
    2fd2:	8f 5f       	subi	r24, 0xFF	; 255
    2fd4:	80 93 9b 01 	sts	0x019B, r24
		Local_u8num2 --;
    2fd8:	80 91 a2 01 	lds	r24, 0x01A2
    2fdc:	81 50       	subi	r24, 0x01	; 1
    2fde:	80 93 a2 01 	sts	0x01A2, r24
	}



}
    2fe2:	6e 96       	adiw	r28, 0x1e	; 30
    2fe4:	0f b6       	in	r0, 0x3f	; 63
    2fe6:	f8 94       	cli
    2fe8:	de bf       	out	0x3e, r29	; 62
    2fea:	0f be       	out	0x3f, r0	; 63
    2fec:	cd bf       	out	0x3d, r28	; 61
    2fee:	cf 91       	pop	r28
    2ff0:	df 91       	pop	r29
    2ff2:	08 95       	ret

00002ff4 <TIMER0_voidInit>:

static void (*TIMER0_pvCallBackFunc)(void) = NULL;
static void (*ICU_pvCallBackFunc)(void) = NULL;

void TIMER0_voidInit(void)
{
    2ff4:	df 93       	push	r29
    2ff6:	cf 93       	push	r28
    2ff8:	cd b7       	in	r28, 0x3d	; 61
    2ffa:	de b7       	in	r29, 0x3e	; 62
	/* Choose fast pwm mode*/
	SET_BIT(TCCR0,TCCR0_WGM00);
    2ffc:	a3 e5       	ldi	r26, 0x53	; 83
    2ffe:	b0 e0       	ldi	r27, 0x00	; 0
    3000:	e3 e5       	ldi	r30, 0x53	; 83
    3002:	f0 e0       	ldi	r31, 0x00	; 0
    3004:	80 81       	ld	r24, Z
    3006:	80 64       	ori	r24, 0x40	; 64
    3008:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_WGM01);
    300a:	a3 e5       	ldi	r26, 0x53	; 83
    300c:	b0 e0       	ldi	r27, 0x00	; 0
    300e:	e3 e5       	ldi	r30, 0x53	; 83
    3010:	f0 e0       	ldi	r31, 0x00	; 0
    3012:	80 81       	ld	r24, Z
    3014:	88 60       	ori	r24, 0x08	; 8
    3016:	8c 93       	st	X, r24

	//	/* output compare match interrupt enable */
	//	SET_BIT(TIMSK,TIMSK_OCIE0);
	//
	/*Set compare match value to 250*/
	OCR0 = 64;
    3018:	ec e5       	ldi	r30, 0x5C	; 92
    301a:	f0 e0       	ldi	r31, 0x00	; 0
    301c:	80 e4       	ldi	r24, 0x40	; 64
    301e:	80 83       	st	Z, r24

	CLR_BIT(TCCR0,4);
    3020:	a3 e5       	ldi	r26, 0x53	; 83
    3022:	b0 e0       	ldi	r27, 0x00	; 0
    3024:	e3 e5       	ldi	r30, 0x53	; 83
    3026:	f0 e0       	ldi	r31, 0x00	; 0
    3028:	80 81       	ld	r24, Z
    302a:	8f 7e       	andi	r24, 0xEF	; 239
    302c:	8c 93       	st	X, r24
	SET_BIT(TCCR0,5);
    302e:	a3 e5       	ldi	r26, 0x53	; 83
    3030:	b0 e0       	ldi	r27, 0x00	; 0
    3032:	e3 e5       	ldi	r30, 0x53	; 83
    3034:	f0 e0       	ldi	r31, 0x00	; 0
    3036:	80 81       	ld	r24, Z
    3038:	80 62       	ori	r24, 0x20	; 32
    303a:	8c 93       	st	X, r24
	/*prescaller : Division by 64*/
	CLR_BIT(TCCR0,TCCR0_CS00);
    303c:	a3 e5       	ldi	r26, 0x53	; 83
    303e:	b0 e0       	ldi	r27, 0x00	; 0
    3040:	e3 e5       	ldi	r30, 0x53	; 83
    3042:	f0 e0       	ldi	r31, 0x00	; 0
    3044:	80 81       	ld	r24, Z
    3046:	8e 7f       	andi	r24, 0xFE	; 254
    3048:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_CS01);
    304a:	a3 e5       	ldi	r26, 0x53	; 83
    304c:	b0 e0       	ldi	r27, 0x00	; 0
    304e:	e3 e5       	ldi	r30, 0x53	; 83
    3050:	f0 e0       	ldi	r31, 0x00	; 0
    3052:	80 81       	ld	r24, Z
    3054:	82 60       	ori	r24, 0x02	; 2
    3056:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_CS02);
    3058:	a3 e5       	ldi	r26, 0x53	; 83
    305a:	b0 e0       	ldi	r27, 0x00	; 0
    305c:	e3 e5       	ldi	r30, 0x53	; 83
    305e:	f0 e0       	ldi	r31, 0x00	; 0
    3060:	80 81       	ld	r24, Z
    3062:	8e 7f       	andi	r24, 0xFE	; 254
    3064:	8c 93       	st	X, r24

}
    3066:	cf 91       	pop	r28
    3068:	df 91       	pop	r29
    306a:	08 95       	ret

0000306c <TIMER0_SetComMatchValue>:

void TIMER0_SetComMatchValue(u8 Copy_u8Value)
{
    306c:	df 93       	push	r29
    306e:	cf 93       	push	r28
    3070:	0f 92       	push	r0
    3072:	cd b7       	in	r28, 0x3d	; 61
    3074:	de b7       	in	r29, 0x3e	; 62
    3076:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Copy_u8Value;
    3078:	ec e5       	ldi	r30, 0x5C	; 92
    307a:	f0 e0       	ldi	r31, 0x00	; 0
    307c:	89 81       	ldd	r24, Y+1	; 0x01
    307e:	80 83       	st	Z, r24
}
    3080:	0f 90       	pop	r0
    3082:	cf 91       	pop	r28
    3084:	df 91       	pop	r29
    3086:	08 95       	ret

00003088 <TIMER0_u8SetCallBack>:

u8 TIMER0_u8SetCallBack(void(*Copy_pvCallBackFunc)(void))
{
    3088:	df 93       	push	r29
    308a:	cf 93       	push	r28
    308c:	00 d0       	rcall	.+0      	; 0x308e <TIMER0_u8SetCallBack+0x6>
    308e:	0f 92       	push	r0
    3090:	cd b7       	in	r28, 0x3d	; 61
    3092:	de b7       	in	r29, 0x3e	; 62
    3094:	9b 83       	std	Y+3, r25	; 0x03
    3096:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStatus = OK;
    3098:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvCallBackFunc != NULL)
    309a:	8a 81       	ldd	r24, Y+2	; 0x02
    309c:	9b 81       	ldd	r25, Y+3	; 0x03
    309e:	00 97       	sbiw	r24, 0x00	; 0
    30a0:	39 f0       	breq	.+14     	; 0x30b0 <TIMER0_u8SetCallBack+0x28>
	{
		TIMER0_pvCallBackFunc = Copy_pvCallBackFunc;
    30a2:	8a 81       	ldd	r24, Y+2	; 0x02
    30a4:	9b 81       	ldd	r25, Y+3	; 0x03
    30a6:	90 93 a4 01 	sts	0x01A4, r25
    30aa:	80 93 a3 01 	sts	0x01A3, r24
    30ae:	02 c0       	rjmp	.+4      	; 0x30b4 <TIMER0_u8SetCallBack+0x2c>
	}
	else
	{
		Local_u8ErrorStatus = NULL_POINTER;
    30b0:	82 e0       	ldi	r24, 0x02	; 2
    30b2:	89 83       	std	Y+1, r24	; 0x01

	}


	return Local_u8ErrorStatus;
    30b4:	89 81       	ldd	r24, Y+1	; 0x01

}
    30b6:	0f 90       	pop	r0
    30b8:	0f 90       	pop	r0
    30ba:	0f 90       	pop	r0
    30bc:	cf 91       	pop	r28
    30be:	df 91       	pop	r29
    30c0:	08 95       	ret

000030c2 <TIMER1_voidInit>:
/******************************************************************************/
void TIMER1_voidInit(void)
{
    30c2:	df 93       	push	r29
    30c4:	cf 93       	push	r28
    30c6:	cd b7       	in	r28, 0x3d	; 61
    30c8:	de b7       	in	r29, 0x3e	; 62
	//	CLR_BIT(TCCR1A,TCCR1A_WGM10);
	//	SET_BIT(TCCR1A,TCCR1A_WGM11);
	//	SET_BIT(TCCR1B,TCCR1B_WGM12);
	//	SET_BIT(TCCR1B,TCCR1B_WGM13);
	/* Setting prescaller */
	TCCR1B &= PRESCALER_MASK;
    30ca:	ae e4       	ldi	r26, 0x4E	; 78
    30cc:	b0 e0       	ldi	r27, 0x00	; 0
    30ce:	ee e4       	ldi	r30, 0x4E	; 78
    30d0:	f0 e0       	ldi	r31, 0x00	; 0
    30d2:	80 81       	ld	r24, Z
    30d4:	88 7f       	andi	r24, 0xF8	; 248
    30d6:	8c 93       	st	X, r24
	TCCR1B |= DIVIDE_BY_8;
    30d8:	ae e4       	ldi	r26, 0x4E	; 78
    30da:	b0 e0       	ldi	r27, 0x00	; 0
    30dc:	ee e4       	ldi	r30, 0x4E	; 78
    30de:	f0 e0       	ldi	r31, 0x00	; 0
    30e0:	80 81       	ld	r24, Z
    30e2:	82 60       	ori	r24, 0x02	; 2
    30e4:	8c 93       	st	X, r24


}
    30e6:	cf 91       	pop	r28
    30e8:	df 91       	pop	r29
    30ea:	08 95       	ret

000030ec <TIMER1_VoidSetTimerValue>:

void TIMER1_VoidSetTimerValue(u16 Copy_u16Value)
{
    30ec:	df 93       	push	r29
    30ee:	cf 93       	push	r28
    30f0:	00 d0       	rcall	.+0      	; 0x30f2 <TIMER1_VoidSetTimerValue+0x6>
    30f2:	cd b7       	in	r28, 0x3d	; 61
    30f4:	de b7       	in	r29, 0x3e	; 62
    30f6:	9a 83       	std	Y+2, r25	; 0x02
    30f8:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = Copy_u16Value;
    30fa:	ec e4       	ldi	r30, 0x4C	; 76
    30fc:	f0 e0       	ldi	r31, 0x00	; 0
    30fe:	89 81       	ldd	r24, Y+1	; 0x01
    3100:	9a 81       	ldd	r25, Y+2	; 0x02
    3102:	91 83       	std	Z+1, r25	; 0x01
    3104:	80 83       	st	Z, r24
}
    3106:	0f 90       	pop	r0
    3108:	0f 90       	pop	r0
    310a:	cf 91       	pop	r28
    310c:	df 91       	pop	r29
    310e:	08 95       	ret

00003110 <Timer1_u16ReadTimerValue>:

u16 Timer1_u16ReadTimerValue(void)
{
    3110:	df 93       	push	r29
    3112:	cf 93       	push	r28
    3114:	cd b7       	in	r28, 0x3d	; 61
    3116:	de b7       	in	r29, 0x3e	; 62
	return TCNT1;
    3118:	ec e4       	ldi	r30, 0x4C	; 76
    311a:	f0 e0       	ldi	r31, 0x00	; 0
    311c:	80 81       	ld	r24, Z
    311e:	91 81       	ldd	r25, Z+1	; 0x01
}
    3120:	cf 91       	pop	r28
    3122:	df 91       	pop	r29
    3124:	08 95       	ret

00003126 <TIMER1_voidSetICR>:
void TIMER1_voidSetICR(u16 Copt_u16TOP)
{
    3126:	df 93       	push	r29
    3128:	cf 93       	push	r28
    312a:	00 d0       	rcall	.+0      	; 0x312c <TIMER1_voidSetICR+0x6>
    312c:	cd b7       	in	r28, 0x3d	; 61
    312e:	de b7       	in	r29, 0x3e	; 62
    3130:	9a 83       	std	Y+2, r25	; 0x02
    3132:	89 83       	std	Y+1, r24	; 0x01
	ICR1 = Copt_u16TOP;
    3134:	e6 e4       	ldi	r30, 0x46	; 70
    3136:	f0 e0       	ldi	r31, 0x00	; 0
    3138:	89 81       	ldd	r24, Y+1	; 0x01
    313a:	9a 81       	ldd	r25, Y+2	; 0x02
    313c:	91 83       	std	Z+1, r25	; 0x01
    313e:	80 83       	st	Z, r24

}
    3140:	0f 90       	pop	r0
    3142:	0f 90       	pop	r0
    3144:	cf 91       	pop	r28
    3146:	df 91       	pop	r29
    3148:	08 95       	ret

0000314a <TIMER1_SetChannelAComMatchValue>:

void TIMER1_SetChannelAComMatchValue(u16 Copy_u16CompareMatch)
{
    314a:	df 93       	push	r29
    314c:	cf 93       	push	r28
    314e:	00 d0       	rcall	.+0      	; 0x3150 <TIMER1_SetChannelAComMatchValue+0x6>
    3150:	cd b7       	in	r28, 0x3d	; 61
    3152:	de b7       	in	r29, 0x3e	; 62
    3154:	9a 83       	std	Y+2, r25	; 0x02
    3156:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = Copy_u16CompareMatch;
    3158:	ea e4       	ldi	r30, 0x4A	; 74
    315a:	f0 e0       	ldi	r31, 0x00	; 0
    315c:	89 81       	ldd	r24, Y+1	; 0x01
    315e:	9a 81       	ldd	r25, Y+2	; 0x02
    3160:	91 83       	std	Z+1, r25	; 0x01
    3162:	80 83       	st	Z, r24

}
    3164:	0f 90       	pop	r0
    3166:	0f 90       	pop	r0
    3168:	cf 91       	pop	r28
    316a:	df 91       	pop	r29
    316c:	08 95       	ret

0000316e <ICU_voidInit>:


void ICU_voidInit(void)
{
    316e:	df 93       	push	r29
    3170:	cf 93       	push	r28
    3172:	cd b7       	in	r28, 0x3d	; 61
    3174:	de b7       	in	r29, 0x3e	; 62
	/* Set trigger source to rising edge initially */
	SET_BIT(TCCR1B,TCCR1B_ICES1);
    3176:	ae e4       	ldi	r26, 0x4E	; 78
    3178:	b0 e0       	ldi	r27, 0x00	; 0
    317a:	ee e4       	ldi	r30, 0x4E	; 78
    317c:	f0 e0       	ldi	r31, 0x00	; 0
    317e:	80 81       	ld	r24, Z
    3180:	80 64       	ori	r24, 0x40	; 64
    3182:	8c 93       	st	X, r24

	/* Enable Input Capture interrupt */
	SET_BIT(TIMSK,TIMSK_TICIE1);
    3184:	a9 e5       	ldi	r26, 0x59	; 89
    3186:	b0 e0       	ldi	r27, 0x00	; 0
    3188:	e9 e5       	ldi	r30, 0x59	; 89
    318a:	f0 e0       	ldi	r31, 0x00	; 0
    318c:	80 81       	ld	r24, Z
    318e:	80 62       	ori	r24, 0x20	; 32
    3190:	8c 93       	st	X, r24
}
    3192:	cf 91       	pop	r28
    3194:	df 91       	pop	r29
    3196:	08 95       	ret

00003198 <ICU_u8SetTriggerEdge>:

u8 ICU_u8SetTriggerEdge(u8 Copy_u8Edge)
{
    3198:	df 93       	push	r29
    319a:	cf 93       	push	r28
    319c:	00 d0       	rcall	.+0      	; 0x319e <ICU_u8SetTriggerEdge+0x6>
    319e:	cd b7       	in	r28, 0x3d	; 61
    31a0:	de b7       	in	r29, 0x3e	; 62
    31a2:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    31a4:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8Edge == ICU_RISING_EDGE)
    31a6:	8a 81       	ldd	r24, Y+2	; 0x02
    31a8:	81 30       	cpi	r24, 0x01	; 1
    31aa:	41 f4       	brne	.+16     	; 0x31bc <ICU_u8SetTriggerEdge+0x24>
	{
		SET_BIT(TCCR1B,TCCR1B_ICES1);
    31ac:	ae e4       	ldi	r26, 0x4E	; 78
    31ae:	b0 e0       	ldi	r27, 0x00	; 0
    31b0:	ee e4       	ldi	r30, 0x4E	; 78
    31b2:	f0 e0       	ldi	r31, 0x00	; 0
    31b4:	80 81       	ld	r24, Z
    31b6:	80 64       	ori	r24, 0x40	; 64
    31b8:	8c 93       	st	X, r24
    31ba:	0d c0       	rjmp	.+26     	; 0x31d6 <ICU_u8SetTriggerEdge+0x3e>
	}
	else if (Copy_u8Edge == ICU_FALLING_EDGE)
    31bc:	8a 81       	ldd	r24, Y+2	; 0x02
    31be:	88 23       	and	r24, r24
    31c0:	41 f4       	brne	.+16     	; 0x31d2 <ICU_u8SetTriggerEdge+0x3a>
	{
		CLR_BIT(TCCR1B,TCCR1B_ICES1);
    31c2:	ae e4       	ldi	r26, 0x4E	; 78
    31c4:	b0 e0       	ldi	r27, 0x00	; 0
    31c6:	ee e4       	ldi	r30, 0x4E	; 78
    31c8:	f0 e0       	ldi	r31, 0x00	; 0
    31ca:	80 81       	ld	r24, Z
    31cc:	8f 7b       	andi	r24, 0xBF	; 191
    31ce:	8c 93       	st	X, r24
    31d0:	02 c0       	rjmp	.+4      	; 0x31d6 <ICU_u8SetTriggerEdge+0x3e>
	}
	else
	{
		Local_u8ErrorState = NOK;
    31d2:	81 e0       	ldi	r24, 0x01	; 1
    31d4:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    31d6:	89 81       	ldd	r24, Y+1	; 0x01
}
    31d8:	0f 90       	pop	r0
    31da:	0f 90       	pop	r0
    31dc:	cf 91       	pop	r28
    31de:	df 91       	pop	r29
    31e0:	08 95       	ret

000031e2 <ICU_voidEnableInterrupt>:

void ICU_voidEnableInterrupt(void)
{
    31e2:	df 93       	push	r29
    31e4:	cf 93       	push	r28
    31e6:	cd b7       	in	r28, 0x3d	; 61
    31e8:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TIMSK_TICIE1);
    31ea:	a9 e5       	ldi	r26, 0x59	; 89
    31ec:	b0 e0       	ldi	r27, 0x00	; 0
    31ee:	e9 e5       	ldi	r30, 0x59	; 89
    31f0:	f0 e0       	ldi	r31, 0x00	; 0
    31f2:	80 81       	ld	r24, Z
    31f4:	80 62       	ori	r24, 0x20	; 32
    31f6:	8c 93       	st	X, r24
}
    31f8:	cf 91       	pop	r28
    31fa:	df 91       	pop	r29
    31fc:	08 95       	ret

000031fe <ICU_voidDisableInterrupt>:
void ICU_voidDisableInterrupt(void)
{
    31fe:	df 93       	push	r29
    3200:	cf 93       	push	r28
    3202:	cd b7       	in	r28, 0x3d	; 61
    3204:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TIMSK_TICIE1);
    3206:	a9 e5       	ldi	r26, 0x59	; 89
    3208:	b0 e0       	ldi	r27, 0x00	; 0
    320a:	e9 e5       	ldi	r30, 0x59	; 89
    320c:	f0 e0       	ldi	r31, 0x00	; 0
    320e:	80 81       	ld	r24, Z
    3210:	8f 7d       	andi	r24, 0xDF	; 223
    3212:	8c 93       	st	X, r24
}
    3214:	cf 91       	pop	r28
    3216:	df 91       	pop	r29
    3218:	08 95       	ret

0000321a <ICU_u16ReadInputCapture>:

u16 ICU_u16ReadInputCapture(void)
{
    321a:	df 93       	push	r29
    321c:	cf 93       	push	r28
    321e:	cd b7       	in	r28, 0x3d	; 61
    3220:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    3222:	e6 e4       	ldi	r30, 0x46	; 70
    3224:	f0 e0       	ldi	r31, 0x00	; 0
    3226:	80 81       	ld	r24, Z
    3228:	91 81       	ldd	r25, Z+1	; 0x01
}
    322a:	cf 91       	pop	r28
    322c:	df 91       	pop	r29
    322e:	08 95       	ret

00003230 <ICU_u8SetCallBack>:

u8 ICU_u8SetCallBack(void (*Copy_pvCallBackFunc)(void))
{
    3230:	df 93       	push	r29
    3232:	cf 93       	push	r28
    3234:	00 d0       	rcall	.+0      	; 0x3236 <ICU_u8SetCallBack+0x6>
    3236:	0f 92       	push	r0
    3238:	cd b7       	in	r28, 0x3d	; 61
    323a:	de b7       	in	r29, 0x3e	; 62
    323c:	9b 83       	std	Y+3, r25	; 0x03
    323e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    3240:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvCallBackFunc != NULL)
    3242:	8a 81       	ldd	r24, Y+2	; 0x02
    3244:	9b 81       	ldd	r25, Y+3	; 0x03
    3246:	00 97       	sbiw	r24, 0x00	; 0
    3248:	39 f0       	breq	.+14     	; 0x3258 <ICU_u8SetCallBack+0x28>
	{
		ICU_pvCallBackFunc = Copy_pvCallBackFunc;
    324a:	8a 81       	ldd	r24, Y+2	; 0x02
    324c:	9b 81       	ldd	r25, Y+3	; 0x03
    324e:	90 93 a6 01 	sts	0x01A6, r25
    3252:	80 93 a5 01 	sts	0x01A5, r24
    3256:	02 c0       	rjmp	.+4      	; 0x325c <ICU_u8SetCallBack+0x2c>
	}
	else
	{
		Local_u8ErrorState = NULL_POINTER;
    3258:	82 e0       	ldi	r24, 0x02	; 2
    325a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    325c:	89 81       	ldd	r24, Y+1	; 0x01
}
    325e:	0f 90       	pop	r0
    3260:	0f 90       	pop	r0
    3262:	0f 90       	pop	r0
    3264:	cf 91       	pop	r28
    3266:	df 91       	pop	r29
    3268:	08 95       	ret

0000326a <__vector_10>:

/********************************* ISR ***********************************/

void __vector_10 (void) __attribute__((signal));
void __vector_10 (void)
{
    326a:	1f 92       	push	r1
    326c:	0f 92       	push	r0
    326e:	0f b6       	in	r0, 0x3f	; 63
    3270:	0f 92       	push	r0
    3272:	11 24       	eor	r1, r1
    3274:	2f 93       	push	r18
    3276:	3f 93       	push	r19
    3278:	4f 93       	push	r20
    327a:	5f 93       	push	r21
    327c:	6f 93       	push	r22
    327e:	7f 93       	push	r23
    3280:	8f 93       	push	r24
    3282:	9f 93       	push	r25
    3284:	af 93       	push	r26
    3286:	bf 93       	push	r27
    3288:	ef 93       	push	r30
    328a:	ff 93       	push	r31
    328c:	df 93       	push	r29
    328e:	cf 93       	push	r28
    3290:	cd b7       	in	r28, 0x3d	; 61
    3292:	de b7       	in	r29, 0x3e	; 62
	if(TIMER0_pvCallBackFunc != NULL)
    3294:	80 91 a3 01 	lds	r24, 0x01A3
    3298:	90 91 a4 01 	lds	r25, 0x01A4
    329c:	00 97       	sbiw	r24, 0x00	; 0
    329e:	29 f0       	breq	.+10     	; 0x32aa <__vector_10+0x40>
	{
		TIMER0_pvCallBackFunc();
    32a0:	e0 91 a3 01 	lds	r30, 0x01A3
    32a4:	f0 91 a4 01 	lds	r31, 0x01A4
    32a8:	09 95       	icall
	}
}
    32aa:	cf 91       	pop	r28
    32ac:	df 91       	pop	r29
    32ae:	ff 91       	pop	r31
    32b0:	ef 91       	pop	r30
    32b2:	bf 91       	pop	r27
    32b4:	af 91       	pop	r26
    32b6:	9f 91       	pop	r25
    32b8:	8f 91       	pop	r24
    32ba:	7f 91       	pop	r23
    32bc:	6f 91       	pop	r22
    32be:	5f 91       	pop	r21
    32c0:	4f 91       	pop	r20
    32c2:	3f 91       	pop	r19
    32c4:	2f 91       	pop	r18
    32c6:	0f 90       	pop	r0
    32c8:	0f be       	out	0x3f, r0	; 63
    32ca:	0f 90       	pop	r0
    32cc:	1f 90       	pop	r1
    32ce:	18 95       	reti

000032d0 <__vector_6>:
/********************** ICU_ISR  *****************************************/
void __vector_6 (void) __attribute__((signal));
void __vector_6 (void)
{
    32d0:	1f 92       	push	r1
    32d2:	0f 92       	push	r0
    32d4:	0f b6       	in	r0, 0x3f	; 63
    32d6:	0f 92       	push	r0
    32d8:	11 24       	eor	r1, r1
    32da:	2f 93       	push	r18
    32dc:	3f 93       	push	r19
    32de:	4f 93       	push	r20
    32e0:	5f 93       	push	r21
    32e2:	6f 93       	push	r22
    32e4:	7f 93       	push	r23
    32e6:	8f 93       	push	r24
    32e8:	9f 93       	push	r25
    32ea:	af 93       	push	r26
    32ec:	bf 93       	push	r27
    32ee:	ef 93       	push	r30
    32f0:	ff 93       	push	r31
    32f2:	df 93       	push	r29
    32f4:	cf 93       	push	r28
    32f6:	cd b7       	in	r28, 0x3d	; 61
    32f8:	de b7       	in	r29, 0x3e	; 62
	if(ICU_pvCallBackFunc != NULL)
    32fa:	80 91 a5 01 	lds	r24, 0x01A5
    32fe:	90 91 a6 01 	lds	r25, 0x01A6
    3302:	00 97       	sbiw	r24, 0x00	; 0
    3304:	29 f0       	breq	.+10     	; 0x3310 <__vector_6+0x40>
	{
		ICU_pvCallBackFunc();
    3306:	e0 91 a5 01 	lds	r30, 0x01A5
    330a:	f0 91 a6 01 	lds	r31, 0x01A6
    330e:	09 95       	icall
	}
}
    3310:	cf 91       	pop	r28
    3312:	df 91       	pop	r29
    3314:	ff 91       	pop	r31
    3316:	ef 91       	pop	r30
    3318:	bf 91       	pop	r27
    331a:	af 91       	pop	r26
    331c:	9f 91       	pop	r25
    331e:	8f 91       	pop	r24
    3320:	7f 91       	pop	r23
    3322:	6f 91       	pop	r22
    3324:	5f 91       	pop	r21
    3326:	4f 91       	pop	r20
    3328:	3f 91       	pop	r19
    332a:	2f 91       	pop	r18
    332c:	0f 90       	pop	r0
    332e:	0f be       	out	0x3f, r0	; 63
    3330:	0f 90       	pop	r0
    3332:	1f 90       	pop	r1
    3334:	18 95       	reti

00003336 <main>:
static u16 OnTicks = 0;
void ICU_HW (void);

/************************ Main Prog *******************************/
void main(void)
{
    3336:	df 93       	push	r29
    3338:	cf 93       	push	r28
    333a:	cd b7       	in	r28, 0x3d	; 61
    333c:	de b7       	in	r29, 0x3e	; 62
	/****************** Local Variables **************************/



	/******************** Driver Init ***************************/
	PORT_VoidInit();
    333e:	0e 94 3b 13 	call	0x2676	; 0x2676 <PORT_VoidInit>

	ICU_u8SetCallBack(&ICU_HW);
    3342:	8e ee       	ldi	r24, 0xEE	; 238
    3344:	99 e1       	ldi	r25, 0x19	; 25
    3346:	0e 94 18 19 	call	0x3230	; 0x3230 <ICU_u8SetCallBack>
	ICU_voidInit();
    334a:	0e 94 b7 18 	call	0x316e	; 0x316e <ICU_voidInit>

	TIMER1_voidInit();
    334e:	0e 94 61 18 	call	0x30c2	; 0x30c2 <TIMER1_voidInit>
	TIMER0_voidInit();
    3352:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <TIMER0_voidInit>

	CLCD_voidInit();
    3356:	0e 94 2b 0b 	call	0x1656	; 0x1656 <CLCD_voidInit>

	GIE_VoidEnable();
    335a:	0e 94 a7 12 	call	0x254e	; 0x254e <GIE_VoidEnable>
	/********************            *****************************/

	while(1)
	{
		/* Wait until period ticks */
		while ((PeriodTicks == 0) && (OnTicks == 0));
    335e:	80 91 a7 01 	lds	r24, 0x01A7
    3362:	90 91 a8 01 	lds	r25, 0x01A8
    3366:	00 97       	sbiw	r24, 0x00	; 0
    3368:	31 f4       	brne	.+12     	; 0x3376 <main+0x40>
    336a:	80 91 a9 01 	lds	r24, 0x01A9
    336e:	90 91 aa 01 	lds	r25, 0x01AA
    3372:	00 97       	sbiw	r24, 0x00	; 0
    3374:	a1 f3       	breq	.-24     	; 0x335e <main+0x28>
		CLCD_voidGoToXY(0,0);
    3376:	80 e0       	ldi	r24, 0x00	; 0
    3378:	60 e0       	ldi	r22, 0x00	; 0
    337a:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <CLCD_voidGoToXY>
		CLCD_voidSendString("Period = ");
    337e:	80 e6       	ldi	r24, 0x60	; 96
    3380:	90 e0       	ldi	r25, 0x00	; 0
    3382:	0e 94 c5 0b 	call	0x178a	; 0x178a <CLCD_voidSendString>
		CLCD_VoidWriteNumber(PeriodTicks);
    3386:	80 91 a7 01 	lds	r24, 0x01A7
    338a:	90 91 a8 01 	lds	r25, 0x01A8
    338e:	cc 01       	movw	r24, r24
    3390:	a0 e0       	ldi	r26, 0x00	; 0
    3392:	b0 e0       	ldi	r27, 0x00	; 0
    3394:	bc 01       	movw	r22, r24
    3396:	cd 01       	movw	r24, r26
    3398:	0e 94 8b 04 	call	0x916	; 0x916 <__floatunsisf>
    339c:	dc 01       	movw	r26, r24
    339e:	cb 01       	movw	r24, r22
    33a0:	bc 01       	movw	r22, r24
    33a2:	cd 01       	movw	r24, r26
    33a4:	0e 94 4e 0c 	call	0x189c	; 0x189c <CLCD_VoidWriteNumber>
		CLCD_voidGoToXY(1,0);
    33a8:	81 e0       	ldi	r24, 0x01	; 1
    33aa:	60 e0       	ldi	r22, 0x00	; 0
    33ac:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <CLCD_voidGoToXY>
		CLCD_voidSendString("ON  = ");
    33b0:	8a e6       	ldi	r24, 0x6A	; 106
    33b2:	90 e0       	ldi	r25, 0x00	; 0
    33b4:	0e 94 c5 0b 	call	0x178a	; 0x178a <CLCD_voidSendString>
		CLCD_VoidWriteNumber(OnTicks);
    33b8:	80 91 a9 01 	lds	r24, 0x01A9
    33bc:	90 91 aa 01 	lds	r25, 0x01AA
    33c0:	cc 01       	movw	r24, r24
    33c2:	a0 e0       	ldi	r26, 0x00	; 0
    33c4:	b0 e0       	ldi	r27, 0x00	; 0
    33c6:	bc 01       	movw	r22, r24
    33c8:	cd 01       	movw	r24, r26
    33ca:	0e 94 8b 04 	call	0x916	; 0x916 <__floatunsisf>
    33ce:	dc 01       	movw	r26, r24
    33d0:	cb 01       	movw	r24, r22
    33d2:	bc 01       	movw	r22, r24
    33d4:	cd 01       	movw	r24, r26
    33d6:	0e 94 4e 0c 	call	0x189c	; 0x189c <CLCD_VoidWriteNumber>
    33da:	c1 cf       	rjmp	.-126    	; 0x335e <main+0x28>

000033dc <ICU_HW>:

}

/******************************* ISR **********************************/
void ICU_HW (void)
{
    33dc:	df 93       	push	r29
    33de:	cf 93       	push	r28
    33e0:	cd b7       	in	r28, 0x3d	; 61
    33e2:	de b7       	in	r29, 0x3e	; 62
	static u16 Reading1, Reading2, Reading3;
	static u8 Local_u8Counter = 0;
	Local_u8Counter ++;
    33e4:	80 91 ab 01 	lds	r24, 0x01AB
    33e8:	8f 5f       	subi	r24, 0xFF	; 255
    33ea:	80 93 ab 01 	sts	0x01AB, r24

	if(Local_u8Counter == 1 )
    33ee:	80 91 ab 01 	lds	r24, 0x01AB
    33f2:	81 30       	cpi	r24, 0x01	; 1
    33f4:	39 f4       	brne	.+14     	; 0x3404 <ICU_HW+0x28>
	{
		Reading1 = ICU_u16ReadInputCapture();
    33f6:	0e 94 0d 19 	call	0x321a	; 0x321a <ICU_u16ReadInputCapture>
    33fa:	90 93 b1 01 	sts	0x01B1, r25
    33fe:	80 93 b0 01 	sts	0x01B0, r24
    3402:	1d c0       	rjmp	.+58     	; 0x343e <ICU_HW+0x62>

	}
	else if(Local_u8Counter == 2 )
    3404:	80 91 ab 01 	lds	r24, 0x01AB
    3408:	82 30       	cpi	r24, 0x02	; 2
    340a:	c9 f4       	brne	.+50     	; 0x343e <ICU_HW+0x62>
	{
		Reading2 = ICU_u16ReadInputCapture();
    340c:	0e 94 0d 19 	call	0x321a	; 0x321a <ICU_u16ReadInputCapture>
    3410:	90 93 af 01 	sts	0x01AF, r25
    3414:	80 93 ae 01 	sts	0x01AE, r24
		PeriodTicks = Reading2 - Reading1;
    3418:	20 91 ae 01 	lds	r18, 0x01AE
    341c:	30 91 af 01 	lds	r19, 0x01AF
    3420:	80 91 b0 01 	lds	r24, 0x01B0
    3424:	90 91 b1 01 	lds	r25, 0x01B1
    3428:	a9 01       	movw	r20, r18
    342a:	48 1b       	sub	r20, r24
    342c:	59 0b       	sbc	r21, r25
    342e:	ca 01       	movw	r24, r20
    3430:	90 93 a8 01 	sts	0x01A8, r25
    3434:	80 93 a7 01 	sts	0x01A7, r24
		ICU_u8SetTriggerEdge(ICU_FALLING_EDGE);
    3438:	80 e0       	ldi	r24, 0x00	; 0
    343a:	0e 94 cc 18 	call	0x3198	; 0x3198 <ICU_u8SetTriggerEdge>

	}
	if(Local_u8Counter == 3 )
    343e:	80 91 ab 01 	lds	r24, 0x01AB
    3442:	83 30       	cpi	r24, 0x03	; 3
    3444:	c1 f4       	brne	.+48     	; 0x3476 <ICU_HW+0x9a>
	{
		Reading3 = ICU_u16ReadInputCapture();
    3446:	0e 94 0d 19 	call	0x321a	; 0x321a <ICU_u16ReadInputCapture>
    344a:	90 93 ad 01 	sts	0x01AD, r25
    344e:	80 93 ac 01 	sts	0x01AC, r24
		OnTicks = Reading3 -Reading2;
    3452:	20 91 ac 01 	lds	r18, 0x01AC
    3456:	30 91 ad 01 	lds	r19, 0x01AD
    345a:	80 91 ae 01 	lds	r24, 0x01AE
    345e:	90 91 af 01 	lds	r25, 0x01AF
    3462:	a9 01       	movw	r20, r18
    3464:	48 1b       	sub	r20, r24
    3466:	59 0b       	sbc	r21, r25
    3468:	ca 01       	movw	r24, r20
    346a:	90 93 aa 01 	sts	0x01AA, r25
    346e:	80 93 a9 01 	sts	0x01A9, r24
		ICU_voidDisableInterrupt();
    3472:	0e 94 ff 18 	call	0x31fe	; 0x31fe <ICU_voidDisableInterrupt>

	}
}
    3476:	cf 91       	pop	r28
    3478:	df 91       	pop	r29
    347a:	08 95       	ret

0000347c <__udivmodqi4>:
    347c:	99 1b       	sub	r25, r25
    347e:	79 e0       	ldi	r23, 0x09	; 9
    3480:	04 c0       	rjmp	.+8      	; 0x348a <__udivmodqi4_ep>

00003482 <__udivmodqi4_loop>:
    3482:	99 1f       	adc	r25, r25
    3484:	96 17       	cp	r25, r22
    3486:	08 f0       	brcs	.+2      	; 0x348a <__udivmodqi4_ep>
    3488:	96 1b       	sub	r25, r22

0000348a <__udivmodqi4_ep>:
    348a:	88 1f       	adc	r24, r24
    348c:	7a 95       	dec	r23
    348e:	c9 f7       	brne	.-14     	; 0x3482 <__udivmodqi4_loop>
    3490:	80 95       	com	r24
    3492:	08 95       	ret

00003494 <__divmodsi4>:
    3494:	97 fb       	bst	r25, 7
    3496:	09 2e       	mov	r0, r25
    3498:	05 26       	eor	r0, r21
    349a:	0e d0       	rcall	.+28     	; 0x34b8 <__divmodsi4_neg1>
    349c:	57 fd       	sbrc	r21, 7
    349e:	04 d0       	rcall	.+8      	; 0x34a8 <__divmodsi4_neg2>
    34a0:	14 d0       	rcall	.+40     	; 0x34ca <__udivmodsi4>
    34a2:	0a d0       	rcall	.+20     	; 0x34b8 <__divmodsi4_neg1>
    34a4:	00 1c       	adc	r0, r0
    34a6:	38 f4       	brcc	.+14     	; 0x34b6 <__divmodsi4_exit>

000034a8 <__divmodsi4_neg2>:
    34a8:	50 95       	com	r21
    34aa:	40 95       	com	r20
    34ac:	30 95       	com	r19
    34ae:	21 95       	neg	r18
    34b0:	3f 4f       	sbci	r19, 0xFF	; 255
    34b2:	4f 4f       	sbci	r20, 0xFF	; 255
    34b4:	5f 4f       	sbci	r21, 0xFF	; 255

000034b6 <__divmodsi4_exit>:
    34b6:	08 95       	ret

000034b8 <__divmodsi4_neg1>:
    34b8:	f6 f7       	brtc	.-4      	; 0x34b6 <__divmodsi4_exit>
    34ba:	90 95       	com	r25
    34bc:	80 95       	com	r24
    34be:	70 95       	com	r23
    34c0:	61 95       	neg	r22
    34c2:	7f 4f       	sbci	r23, 0xFF	; 255
    34c4:	8f 4f       	sbci	r24, 0xFF	; 255
    34c6:	9f 4f       	sbci	r25, 0xFF	; 255
    34c8:	08 95       	ret

000034ca <__udivmodsi4>:
    34ca:	a1 e2       	ldi	r26, 0x21	; 33
    34cc:	1a 2e       	mov	r1, r26
    34ce:	aa 1b       	sub	r26, r26
    34d0:	bb 1b       	sub	r27, r27
    34d2:	fd 01       	movw	r30, r26
    34d4:	0d c0       	rjmp	.+26     	; 0x34f0 <__udivmodsi4_ep>

000034d6 <__udivmodsi4_loop>:
    34d6:	aa 1f       	adc	r26, r26
    34d8:	bb 1f       	adc	r27, r27
    34da:	ee 1f       	adc	r30, r30
    34dc:	ff 1f       	adc	r31, r31
    34de:	a2 17       	cp	r26, r18
    34e0:	b3 07       	cpc	r27, r19
    34e2:	e4 07       	cpc	r30, r20
    34e4:	f5 07       	cpc	r31, r21
    34e6:	20 f0       	brcs	.+8      	; 0x34f0 <__udivmodsi4_ep>
    34e8:	a2 1b       	sub	r26, r18
    34ea:	b3 0b       	sbc	r27, r19
    34ec:	e4 0b       	sbc	r30, r20
    34ee:	f5 0b       	sbc	r31, r21

000034f0 <__udivmodsi4_ep>:
    34f0:	66 1f       	adc	r22, r22
    34f2:	77 1f       	adc	r23, r23
    34f4:	88 1f       	adc	r24, r24
    34f6:	99 1f       	adc	r25, r25
    34f8:	1a 94       	dec	r1
    34fa:	69 f7       	brne	.-38     	; 0x34d6 <__udivmodsi4_loop>
    34fc:	60 95       	com	r22
    34fe:	70 95       	com	r23
    3500:	80 95       	com	r24
    3502:	90 95       	com	r25
    3504:	9b 01       	movw	r18, r22
    3506:	ac 01       	movw	r20, r24
    3508:	bd 01       	movw	r22, r26
    350a:	cf 01       	movw	r24, r30
    350c:	08 95       	ret

0000350e <__prologue_saves__>:
    350e:	2f 92       	push	r2
    3510:	3f 92       	push	r3
    3512:	4f 92       	push	r4
    3514:	5f 92       	push	r5
    3516:	6f 92       	push	r6
    3518:	7f 92       	push	r7
    351a:	8f 92       	push	r8
    351c:	9f 92       	push	r9
    351e:	af 92       	push	r10
    3520:	bf 92       	push	r11
    3522:	cf 92       	push	r12
    3524:	df 92       	push	r13
    3526:	ef 92       	push	r14
    3528:	ff 92       	push	r15
    352a:	0f 93       	push	r16
    352c:	1f 93       	push	r17
    352e:	cf 93       	push	r28
    3530:	df 93       	push	r29
    3532:	cd b7       	in	r28, 0x3d	; 61
    3534:	de b7       	in	r29, 0x3e	; 62
    3536:	ca 1b       	sub	r28, r26
    3538:	db 0b       	sbc	r29, r27
    353a:	0f b6       	in	r0, 0x3f	; 63
    353c:	f8 94       	cli
    353e:	de bf       	out	0x3e, r29	; 62
    3540:	0f be       	out	0x3f, r0	; 63
    3542:	cd bf       	out	0x3d, r28	; 61
    3544:	09 94       	ijmp

00003546 <__epilogue_restores__>:
    3546:	2a 88       	ldd	r2, Y+18	; 0x12
    3548:	39 88       	ldd	r3, Y+17	; 0x11
    354a:	48 88       	ldd	r4, Y+16	; 0x10
    354c:	5f 84       	ldd	r5, Y+15	; 0x0f
    354e:	6e 84       	ldd	r6, Y+14	; 0x0e
    3550:	7d 84       	ldd	r7, Y+13	; 0x0d
    3552:	8c 84       	ldd	r8, Y+12	; 0x0c
    3554:	9b 84       	ldd	r9, Y+11	; 0x0b
    3556:	aa 84       	ldd	r10, Y+10	; 0x0a
    3558:	b9 84       	ldd	r11, Y+9	; 0x09
    355a:	c8 84       	ldd	r12, Y+8	; 0x08
    355c:	df 80       	ldd	r13, Y+7	; 0x07
    355e:	ee 80       	ldd	r14, Y+6	; 0x06
    3560:	fd 80       	ldd	r15, Y+5	; 0x05
    3562:	0c 81       	ldd	r16, Y+4	; 0x04
    3564:	1b 81       	ldd	r17, Y+3	; 0x03
    3566:	aa 81       	ldd	r26, Y+2	; 0x02
    3568:	b9 81       	ldd	r27, Y+1	; 0x01
    356a:	ce 0f       	add	r28, r30
    356c:	d1 1d       	adc	r29, r1
    356e:	0f b6       	in	r0, 0x3f	; 63
    3570:	f8 94       	cli
    3572:	de bf       	out	0x3e, r29	; 62
    3574:	0f be       	out	0x3f, r0	; 63
    3576:	cd bf       	out	0x3d, r28	; 61
    3578:	ed 01       	movw	r28, r26
    357a:	08 95       	ret

0000357c <_exit>:
    357c:	f8 94       	cli

0000357e <__stop_program>:
    357e:	ff cf       	rjmp	.-2      	; 0x357e <__stop_program>
