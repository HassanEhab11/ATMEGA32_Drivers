
testdivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000036b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001d2  00800060  000036b0  00003744  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  00800232  00800232  00003916  2**0
                  ALLOC
  3 .stab         000033cc  00000000  00000000  00003918  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001364  00000000  00000000  00006ce4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  00008048  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000213  00000000  00000000  00008208  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002495  00000000  00000000  0000841b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001412  00000000  00000000  0000a8b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001209  00000000  00000000  0000bcc2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0000cecc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002da  00000000  00000000  0000d0ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000996  00000000  00000000  0000d386  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000dd1c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 73 08 	jmp	0x10e6	; 0x10e6 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 eb       	ldi	r30, 0xB0	; 176
      68:	f6 e3       	ldi	r31, 0x36	; 54
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 33       	cpi	r26, 0x32	; 50
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a2 e3       	ldi	r26, 0x32	; 50
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 34       	cpi	r26, 0x46	; 70
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <main>
      8a:	0c 94 56 1b 	jmp	0x36ac	; 0x36ac <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 37 04 	call	0x86e	; 0x86e <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 37 04 	call	0x86e	; 0x86e <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 1f 1b 	jmp	0x363e	; 0x363e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ad ef       	ldi	r26, 0xFD	; 253
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 3b 1b 	jmp	0x3676	; 0x3676 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 2b 1b 	jmp	0x3656	; 0x3656 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 28 06 	call	0xc50	; 0xc50 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 28 06 	call	0xc50	; 0xc50 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 53 05 	call	0xaa6	; 0xaa6 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 47 1b 	jmp	0x368e	; 0x368e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 2b 1b 	jmp	0x3656	; 0x3656 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 28 06 	call	0xc50	; 0xc50 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 28 06 	call	0xc50	; 0xc50 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 53 05 	call	0xaa6	; 0xaa6 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 47 1b 	jmp	0x368e	; 0x368e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 1f 1b 	jmp	0x363e	; 0x363e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 28 06 	call	0xc50	; 0xc50 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 28 06 	call	0xc50	; 0xc50 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8d ef       	ldi	r24, 0xFD	; 253
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 53 05 	call	0xaa6	; 0xaa6 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 3b 1b 	jmp	0x3676	; 0x3676 <__epilogue_restores__>

00000632 <__eqsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 2b 1b 	jmp	0x3656	; 0x3656 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 28 06 	call	0xc50	; 0xc50 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 28 06 	call	0xc50	; 0xc50 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__eqsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__eqsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 a0 06 	call	0xd40	; 0xd40 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__eqsf2+0x58>
     688:	81 e0       	ldi	r24, 0x01	; 1
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 47 1b 	jmp	0x368e	; 0x368e <__epilogue_restores__+0x18>

00000692 <__gtsf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 2b 1b 	jmp	0x3656	; 0x3656 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 28 06 	call	0xc50	; 0xc50 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 28 06 	call	0xc50	; 0xc50 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gtsf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gtsf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 a0 06 	call	0xd40	; 0xd40 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gtsf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 47 1b 	jmp	0x368e	; 0x368e <__epilogue_restores__+0x18>

000006f2 <__gesf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 2b 1b 	jmp	0x3656	; 0x3656 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 28 06 	call	0xc50	; 0xc50 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 28 06 	call	0xc50	; 0xc50 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__gesf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__gesf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 a0 06 	call	0xd40	; 0xd40 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__gesf2+0x58>
     748:	8f ef       	ldi	r24, 0xFF	; 255
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 47 1b 	jmp	0x368e	; 0x368e <__epilogue_restores__+0x18>

00000752 <__ltsf2>:
     752:	a8 e1       	ldi	r26, 0x18	; 24
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 2b 1b 	jmp	0x3656	; 0x3656 <__prologue_saves__+0x18>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	2d 83       	std	Y+5, r18	; 0x05
     768:	3e 83       	std	Y+6, r19	; 0x06
     76a:	4f 83       	std	Y+7, r20	; 0x07
     76c:	58 87       	std	Y+8, r21	; 0x08
     76e:	89 e0       	ldi	r24, 0x09	; 9
     770:	e8 2e       	mov	r14, r24
     772:	f1 2c       	mov	r15, r1
     774:	ec 0e       	add	r14, r28
     776:	fd 1e       	adc	r15, r29
     778:	ce 01       	movw	r24, r28
     77a:	01 96       	adiw	r24, 0x01	; 1
     77c:	b7 01       	movw	r22, r14
     77e:	0e 94 28 06 	call	0xc50	; 0xc50 <__unpack_f>
     782:	8e 01       	movw	r16, r28
     784:	0f 5e       	subi	r16, 0xEF	; 239
     786:	1f 4f       	sbci	r17, 0xFF	; 255
     788:	ce 01       	movw	r24, r28
     78a:	05 96       	adiw	r24, 0x05	; 5
     78c:	b8 01       	movw	r22, r16
     78e:	0e 94 28 06 	call	0xc50	; 0xc50 <__unpack_f>
     792:	89 85       	ldd	r24, Y+9	; 0x09
     794:	82 30       	cpi	r24, 0x02	; 2
     796:	40 f0       	brcs	.+16     	; 0x7a8 <__ltsf2+0x56>
     798:	89 89       	ldd	r24, Y+17	; 0x11
     79a:	82 30       	cpi	r24, 0x02	; 2
     79c:	28 f0       	brcs	.+10     	; 0x7a8 <__ltsf2+0x56>
     79e:	c7 01       	movw	r24, r14
     7a0:	b8 01       	movw	r22, r16
     7a2:	0e 94 a0 06 	call	0xd40	; 0xd40 <__fpcmp_parts_f>
     7a6:	01 c0       	rjmp	.+2      	; 0x7aa <__ltsf2+0x58>
     7a8:	81 e0       	ldi	r24, 0x01	; 1
     7aa:	68 96       	adiw	r28, 0x18	; 24
     7ac:	e6 e0       	ldi	r30, 0x06	; 6
     7ae:	0c 94 47 1b 	jmp	0x368e	; 0x368e <__epilogue_restores__+0x18>

000007b2 <__floatsisf>:
     7b2:	a8 e0       	ldi	r26, 0x08	; 8
     7b4:	b0 e0       	ldi	r27, 0x00	; 0
     7b6:	ef ed       	ldi	r30, 0xDF	; 223
     7b8:	f3 e0       	ldi	r31, 0x03	; 3
     7ba:	0c 94 28 1b 	jmp	0x3650	; 0x3650 <__prologue_saves__+0x12>
     7be:	9b 01       	movw	r18, r22
     7c0:	ac 01       	movw	r20, r24
     7c2:	83 e0       	ldi	r24, 0x03	; 3
     7c4:	89 83       	std	Y+1, r24	; 0x01
     7c6:	da 01       	movw	r26, r20
     7c8:	c9 01       	movw	r24, r18
     7ca:	88 27       	eor	r24, r24
     7cc:	b7 fd       	sbrc	r27, 7
     7ce:	83 95       	inc	r24
     7d0:	99 27       	eor	r25, r25
     7d2:	aa 27       	eor	r26, r26
     7d4:	bb 27       	eor	r27, r27
     7d6:	b8 2e       	mov	r11, r24
     7d8:	21 15       	cp	r18, r1
     7da:	31 05       	cpc	r19, r1
     7dc:	41 05       	cpc	r20, r1
     7de:	51 05       	cpc	r21, r1
     7e0:	19 f4       	brne	.+6      	; 0x7e8 <__floatsisf+0x36>
     7e2:	82 e0       	ldi	r24, 0x02	; 2
     7e4:	89 83       	std	Y+1, r24	; 0x01
     7e6:	3a c0       	rjmp	.+116    	; 0x85c <__floatsisf+0xaa>
     7e8:	88 23       	and	r24, r24
     7ea:	a9 f0       	breq	.+42     	; 0x816 <__floatsisf+0x64>
     7ec:	20 30       	cpi	r18, 0x00	; 0
     7ee:	80 e0       	ldi	r24, 0x00	; 0
     7f0:	38 07       	cpc	r19, r24
     7f2:	80 e0       	ldi	r24, 0x00	; 0
     7f4:	48 07       	cpc	r20, r24
     7f6:	80 e8       	ldi	r24, 0x80	; 128
     7f8:	58 07       	cpc	r21, r24
     7fa:	29 f4       	brne	.+10     	; 0x806 <__floatsisf+0x54>
     7fc:	60 e0       	ldi	r22, 0x00	; 0
     7fe:	70 e0       	ldi	r23, 0x00	; 0
     800:	80 e0       	ldi	r24, 0x00	; 0
     802:	9f ec       	ldi	r25, 0xCF	; 207
     804:	30 c0       	rjmp	.+96     	; 0x866 <__stack+0x7>
     806:	ee 24       	eor	r14, r14
     808:	ff 24       	eor	r15, r15
     80a:	87 01       	movw	r16, r14
     80c:	e2 1a       	sub	r14, r18
     80e:	f3 0a       	sbc	r15, r19
     810:	04 0b       	sbc	r16, r20
     812:	15 0b       	sbc	r17, r21
     814:	02 c0       	rjmp	.+4      	; 0x81a <__floatsisf+0x68>
     816:	79 01       	movw	r14, r18
     818:	8a 01       	movw	r16, r20
     81a:	8e e1       	ldi	r24, 0x1E	; 30
     81c:	c8 2e       	mov	r12, r24
     81e:	d1 2c       	mov	r13, r1
     820:	dc 82       	std	Y+4, r13	; 0x04
     822:	cb 82       	std	Y+3, r12	; 0x03
     824:	ed 82       	std	Y+5, r14	; 0x05
     826:	fe 82       	std	Y+6, r15	; 0x06
     828:	0f 83       	std	Y+7, r16	; 0x07
     82a:	18 87       	std	Y+8, r17	; 0x08
     82c:	c8 01       	movw	r24, r16
     82e:	b7 01       	movw	r22, r14
     830:	0e 94 04 05 	call	0xa08	; 0xa08 <__clzsi2>
     834:	01 97       	sbiw	r24, 0x01	; 1
     836:	18 16       	cp	r1, r24
     838:	19 06       	cpc	r1, r25
     83a:	84 f4       	brge	.+32     	; 0x85c <__floatsisf+0xaa>
     83c:	08 2e       	mov	r0, r24
     83e:	04 c0       	rjmp	.+8      	; 0x848 <__floatsisf+0x96>
     840:	ee 0c       	add	r14, r14
     842:	ff 1c       	adc	r15, r15
     844:	00 1f       	adc	r16, r16
     846:	11 1f       	adc	r17, r17
     848:	0a 94       	dec	r0
     84a:	d2 f7       	brpl	.-12     	; 0x840 <__floatsisf+0x8e>
     84c:	ed 82       	std	Y+5, r14	; 0x05
     84e:	fe 82       	std	Y+6, r15	; 0x06
     850:	0f 83       	std	Y+7, r16	; 0x07
     852:	18 87       	std	Y+8, r17	; 0x08
     854:	c8 1a       	sub	r12, r24
     856:	d9 0a       	sbc	r13, r25
     858:	dc 82       	std	Y+4, r13	; 0x04
     85a:	cb 82       	std	Y+3, r12	; 0x03
     85c:	ba 82       	std	Y+2, r11	; 0x02
     85e:	ce 01       	movw	r24, r28
     860:	01 96       	adiw	r24, 0x01	; 1
     862:	0e 94 53 05 	call	0xaa6	; 0xaa6 <__pack_f>
     866:	28 96       	adiw	r28, 0x08	; 8
     868:	e9 e0       	ldi	r30, 0x09	; 9
     86a:	0c 94 44 1b 	jmp	0x3688	; 0x3688 <__epilogue_restores__+0x12>

0000086e <__fixsfsi>:
     86e:	ac e0       	ldi	r26, 0x0C	; 12
     870:	b0 e0       	ldi	r27, 0x00	; 0
     872:	ed e3       	ldi	r30, 0x3D	; 61
     874:	f4 e0       	ldi	r31, 0x04	; 4
     876:	0c 94 2f 1b 	jmp	0x365e	; 0x365e <__prologue_saves__+0x20>
     87a:	69 83       	std	Y+1, r22	; 0x01
     87c:	7a 83       	std	Y+2, r23	; 0x02
     87e:	8b 83       	std	Y+3, r24	; 0x03
     880:	9c 83       	std	Y+4, r25	; 0x04
     882:	ce 01       	movw	r24, r28
     884:	01 96       	adiw	r24, 0x01	; 1
     886:	be 01       	movw	r22, r28
     888:	6b 5f       	subi	r22, 0xFB	; 251
     88a:	7f 4f       	sbci	r23, 0xFF	; 255
     88c:	0e 94 28 06 	call	0xc50	; 0xc50 <__unpack_f>
     890:	8d 81       	ldd	r24, Y+5	; 0x05
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	61 f1       	breq	.+88     	; 0x8ee <__fixsfsi+0x80>
     896:	82 30       	cpi	r24, 0x02	; 2
     898:	50 f1       	brcs	.+84     	; 0x8ee <__fixsfsi+0x80>
     89a:	84 30       	cpi	r24, 0x04	; 4
     89c:	21 f4       	brne	.+8      	; 0x8a6 <__fixsfsi+0x38>
     89e:	8e 81       	ldd	r24, Y+6	; 0x06
     8a0:	88 23       	and	r24, r24
     8a2:	51 f1       	breq	.+84     	; 0x8f8 <__fixsfsi+0x8a>
     8a4:	2e c0       	rjmp	.+92     	; 0x902 <__fixsfsi+0x94>
     8a6:	2f 81       	ldd	r18, Y+7	; 0x07
     8a8:	38 85       	ldd	r19, Y+8	; 0x08
     8aa:	37 fd       	sbrc	r19, 7
     8ac:	20 c0       	rjmp	.+64     	; 0x8ee <__fixsfsi+0x80>
     8ae:	6e 81       	ldd	r22, Y+6	; 0x06
     8b0:	2f 31       	cpi	r18, 0x1F	; 31
     8b2:	31 05       	cpc	r19, r1
     8b4:	1c f0       	brlt	.+6      	; 0x8bc <__fixsfsi+0x4e>
     8b6:	66 23       	and	r22, r22
     8b8:	f9 f0       	breq	.+62     	; 0x8f8 <__fixsfsi+0x8a>
     8ba:	23 c0       	rjmp	.+70     	; 0x902 <__fixsfsi+0x94>
     8bc:	8e e1       	ldi	r24, 0x1E	; 30
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	82 1b       	sub	r24, r18
     8c2:	93 0b       	sbc	r25, r19
     8c4:	29 85       	ldd	r18, Y+9	; 0x09
     8c6:	3a 85       	ldd	r19, Y+10	; 0x0a
     8c8:	4b 85       	ldd	r20, Y+11	; 0x0b
     8ca:	5c 85       	ldd	r21, Y+12	; 0x0c
     8cc:	04 c0       	rjmp	.+8      	; 0x8d6 <__fixsfsi+0x68>
     8ce:	56 95       	lsr	r21
     8d0:	47 95       	ror	r20
     8d2:	37 95       	ror	r19
     8d4:	27 95       	ror	r18
     8d6:	8a 95       	dec	r24
     8d8:	d2 f7       	brpl	.-12     	; 0x8ce <__fixsfsi+0x60>
     8da:	66 23       	and	r22, r22
     8dc:	b1 f0       	breq	.+44     	; 0x90a <__fixsfsi+0x9c>
     8de:	50 95       	com	r21
     8e0:	40 95       	com	r20
     8e2:	30 95       	com	r19
     8e4:	21 95       	neg	r18
     8e6:	3f 4f       	sbci	r19, 0xFF	; 255
     8e8:	4f 4f       	sbci	r20, 0xFF	; 255
     8ea:	5f 4f       	sbci	r21, 0xFF	; 255
     8ec:	0e c0       	rjmp	.+28     	; 0x90a <__fixsfsi+0x9c>
     8ee:	20 e0       	ldi	r18, 0x00	; 0
     8f0:	30 e0       	ldi	r19, 0x00	; 0
     8f2:	40 e0       	ldi	r20, 0x00	; 0
     8f4:	50 e0       	ldi	r21, 0x00	; 0
     8f6:	09 c0       	rjmp	.+18     	; 0x90a <__fixsfsi+0x9c>
     8f8:	2f ef       	ldi	r18, 0xFF	; 255
     8fa:	3f ef       	ldi	r19, 0xFF	; 255
     8fc:	4f ef       	ldi	r20, 0xFF	; 255
     8fe:	5f e7       	ldi	r21, 0x7F	; 127
     900:	04 c0       	rjmp	.+8      	; 0x90a <__fixsfsi+0x9c>
     902:	20 e0       	ldi	r18, 0x00	; 0
     904:	30 e0       	ldi	r19, 0x00	; 0
     906:	40 e0       	ldi	r20, 0x00	; 0
     908:	50 e8       	ldi	r21, 0x80	; 128
     90a:	b9 01       	movw	r22, r18
     90c:	ca 01       	movw	r24, r20
     90e:	2c 96       	adiw	r28, 0x0c	; 12
     910:	e2 e0       	ldi	r30, 0x02	; 2
     912:	0c 94 4b 1b 	jmp	0x3696	; 0x3696 <__epilogue_restores__+0x20>

00000916 <__floatunsisf>:
     916:	a8 e0       	ldi	r26, 0x08	; 8
     918:	b0 e0       	ldi	r27, 0x00	; 0
     91a:	e1 e9       	ldi	r30, 0x91	; 145
     91c:	f4 e0       	ldi	r31, 0x04	; 4
     91e:	0c 94 27 1b 	jmp	0x364e	; 0x364e <__prologue_saves__+0x10>
     922:	7b 01       	movw	r14, r22
     924:	8c 01       	movw	r16, r24
     926:	61 15       	cp	r22, r1
     928:	71 05       	cpc	r23, r1
     92a:	81 05       	cpc	r24, r1
     92c:	91 05       	cpc	r25, r1
     92e:	19 f4       	brne	.+6      	; 0x936 <__floatunsisf+0x20>
     930:	82 e0       	ldi	r24, 0x02	; 2
     932:	89 83       	std	Y+1, r24	; 0x01
     934:	60 c0       	rjmp	.+192    	; 0x9f6 <__floatunsisf+0xe0>
     936:	83 e0       	ldi	r24, 0x03	; 3
     938:	89 83       	std	Y+1, r24	; 0x01
     93a:	8e e1       	ldi	r24, 0x1E	; 30
     93c:	c8 2e       	mov	r12, r24
     93e:	d1 2c       	mov	r13, r1
     940:	dc 82       	std	Y+4, r13	; 0x04
     942:	cb 82       	std	Y+3, r12	; 0x03
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 01       	movw	r24, r16
     94e:	b7 01       	movw	r22, r14
     950:	0e 94 04 05 	call	0xa08	; 0xa08 <__clzsi2>
     954:	fc 01       	movw	r30, r24
     956:	31 97       	sbiw	r30, 0x01	; 1
     958:	f7 ff       	sbrs	r31, 7
     95a:	3b c0       	rjmp	.+118    	; 0x9d2 <__floatunsisf+0xbc>
     95c:	22 27       	eor	r18, r18
     95e:	33 27       	eor	r19, r19
     960:	2e 1b       	sub	r18, r30
     962:	3f 0b       	sbc	r19, r31
     964:	57 01       	movw	r10, r14
     966:	68 01       	movw	r12, r16
     968:	02 2e       	mov	r0, r18
     96a:	04 c0       	rjmp	.+8      	; 0x974 <__floatunsisf+0x5e>
     96c:	d6 94       	lsr	r13
     96e:	c7 94       	ror	r12
     970:	b7 94       	ror	r11
     972:	a7 94       	ror	r10
     974:	0a 94       	dec	r0
     976:	d2 f7       	brpl	.-12     	; 0x96c <__floatunsisf+0x56>
     978:	40 e0       	ldi	r20, 0x00	; 0
     97a:	50 e0       	ldi	r21, 0x00	; 0
     97c:	60 e0       	ldi	r22, 0x00	; 0
     97e:	70 e0       	ldi	r23, 0x00	; 0
     980:	81 e0       	ldi	r24, 0x01	; 1
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	a0 e0       	ldi	r26, 0x00	; 0
     986:	b0 e0       	ldi	r27, 0x00	; 0
     988:	04 c0       	rjmp	.+8      	; 0x992 <__floatunsisf+0x7c>
     98a:	88 0f       	add	r24, r24
     98c:	99 1f       	adc	r25, r25
     98e:	aa 1f       	adc	r26, r26
     990:	bb 1f       	adc	r27, r27
     992:	2a 95       	dec	r18
     994:	d2 f7       	brpl	.-12     	; 0x98a <__floatunsisf+0x74>
     996:	01 97       	sbiw	r24, 0x01	; 1
     998:	a1 09       	sbc	r26, r1
     99a:	b1 09       	sbc	r27, r1
     99c:	8e 21       	and	r24, r14
     99e:	9f 21       	and	r25, r15
     9a0:	a0 23       	and	r26, r16
     9a2:	b1 23       	and	r27, r17
     9a4:	00 97       	sbiw	r24, 0x00	; 0
     9a6:	a1 05       	cpc	r26, r1
     9a8:	b1 05       	cpc	r27, r1
     9aa:	21 f0       	breq	.+8      	; 0x9b4 <__floatunsisf+0x9e>
     9ac:	41 e0       	ldi	r20, 0x01	; 1
     9ae:	50 e0       	ldi	r21, 0x00	; 0
     9b0:	60 e0       	ldi	r22, 0x00	; 0
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	4a 29       	or	r20, r10
     9b6:	5b 29       	or	r21, r11
     9b8:	6c 29       	or	r22, r12
     9ba:	7d 29       	or	r23, r13
     9bc:	4d 83       	std	Y+5, r20	; 0x05
     9be:	5e 83       	std	Y+6, r21	; 0x06
     9c0:	6f 83       	std	Y+7, r22	; 0x07
     9c2:	78 87       	std	Y+8, r23	; 0x08
     9c4:	8e e1       	ldi	r24, 0x1E	; 30
     9c6:	90 e0       	ldi	r25, 0x00	; 0
     9c8:	8e 1b       	sub	r24, r30
     9ca:	9f 0b       	sbc	r25, r31
     9cc:	9c 83       	std	Y+4, r25	; 0x04
     9ce:	8b 83       	std	Y+3, r24	; 0x03
     9d0:	12 c0       	rjmp	.+36     	; 0x9f6 <__floatunsisf+0xe0>
     9d2:	30 97       	sbiw	r30, 0x00	; 0
     9d4:	81 f0       	breq	.+32     	; 0x9f6 <__floatunsisf+0xe0>
     9d6:	0e 2e       	mov	r0, r30
     9d8:	04 c0       	rjmp	.+8      	; 0x9e2 <__floatunsisf+0xcc>
     9da:	ee 0c       	add	r14, r14
     9dc:	ff 1c       	adc	r15, r15
     9de:	00 1f       	adc	r16, r16
     9e0:	11 1f       	adc	r17, r17
     9e2:	0a 94       	dec	r0
     9e4:	d2 f7       	brpl	.-12     	; 0x9da <__floatunsisf+0xc4>
     9e6:	ed 82       	std	Y+5, r14	; 0x05
     9e8:	fe 82       	std	Y+6, r15	; 0x06
     9ea:	0f 83       	std	Y+7, r16	; 0x07
     9ec:	18 87       	std	Y+8, r17	; 0x08
     9ee:	ce 1a       	sub	r12, r30
     9f0:	df 0a       	sbc	r13, r31
     9f2:	dc 82       	std	Y+4, r13	; 0x04
     9f4:	cb 82       	std	Y+3, r12	; 0x03
     9f6:	1a 82       	std	Y+2, r1	; 0x02
     9f8:	ce 01       	movw	r24, r28
     9fa:	01 96       	adiw	r24, 0x01	; 1
     9fc:	0e 94 53 05 	call	0xaa6	; 0xaa6 <__pack_f>
     a00:	28 96       	adiw	r28, 0x08	; 8
     a02:	ea e0       	ldi	r30, 0x0A	; 10
     a04:	0c 94 43 1b 	jmp	0x3686	; 0x3686 <__epilogue_restores__+0x10>

00000a08 <__clzsi2>:
     a08:	ef 92       	push	r14
     a0a:	ff 92       	push	r15
     a0c:	0f 93       	push	r16
     a0e:	1f 93       	push	r17
     a10:	7b 01       	movw	r14, r22
     a12:	8c 01       	movw	r16, r24
     a14:	80 e0       	ldi	r24, 0x00	; 0
     a16:	e8 16       	cp	r14, r24
     a18:	80 e0       	ldi	r24, 0x00	; 0
     a1a:	f8 06       	cpc	r15, r24
     a1c:	81 e0       	ldi	r24, 0x01	; 1
     a1e:	08 07       	cpc	r16, r24
     a20:	80 e0       	ldi	r24, 0x00	; 0
     a22:	18 07       	cpc	r17, r24
     a24:	88 f4       	brcc	.+34     	; 0xa48 <__clzsi2+0x40>
     a26:	8f ef       	ldi	r24, 0xFF	; 255
     a28:	e8 16       	cp	r14, r24
     a2a:	f1 04       	cpc	r15, r1
     a2c:	01 05       	cpc	r16, r1
     a2e:	11 05       	cpc	r17, r1
     a30:	31 f0       	breq	.+12     	; 0xa3e <__clzsi2+0x36>
     a32:	28 f0       	brcs	.+10     	; 0xa3e <__clzsi2+0x36>
     a34:	88 e0       	ldi	r24, 0x08	; 8
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	a0 e0       	ldi	r26, 0x00	; 0
     a3a:	b0 e0       	ldi	r27, 0x00	; 0
     a3c:	17 c0       	rjmp	.+46     	; 0xa6c <__clzsi2+0x64>
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	b0 e0       	ldi	r27, 0x00	; 0
     a46:	12 c0       	rjmp	.+36     	; 0xa6c <__clzsi2+0x64>
     a48:	80 e0       	ldi	r24, 0x00	; 0
     a4a:	e8 16       	cp	r14, r24
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	f8 06       	cpc	r15, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	08 07       	cpc	r16, r24
     a54:	81 e0       	ldi	r24, 0x01	; 1
     a56:	18 07       	cpc	r17, r24
     a58:	28 f0       	brcs	.+10     	; 0xa64 <__clzsi2+0x5c>
     a5a:	88 e1       	ldi	r24, 0x18	; 24
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	a0 e0       	ldi	r26, 0x00	; 0
     a60:	b0 e0       	ldi	r27, 0x00	; 0
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__clzsi2+0x64>
     a64:	80 e1       	ldi	r24, 0x10	; 16
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	a0 e0       	ldi	r26, 0x00	; 0
     a6a:	b0 e0       	ldi	r27, 0x00	; 0
     a6c:	20 e2       	ldi	r18, 0x20	; 32
     a6e:	30 e0       	ldi	r19, 0x00	; 0
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	28 1b       	sub	r18, r24
     a76:	39 0b       	sbc	r19, r25
     a78:	4a 0b       	sbc	r20, r26
     a7a:	5b 0b       	sbc	r21, r27
     a7c:	04 c0       	rjmp	.+8      	; 0xa86 <__clzsi2+0x7e>
     a7e:	16 95       	lsr	r17
     a80:	07 95       	ror	r16
     a82:	f7 94       	ror	r15
     a84:	e7 94       	ror	r14
     a86:	8a 95       	dec	r24
     a88:	d2 f7       	brpl	.-12     	; 0xa7e <__clzsi2+0x76>
     a8a:	f7 01       	movw	r30, r14
     a8c:	eb 5f       	subi	r30, 0xFB	; 251
     a8e:	fe 4f       	sbci	r31, 0xFE	; 254
     a90:	80 81       	ld	r24, Z
     a92:	28 1b       	sub	r18, r24
     a94:	31 09       	sbc	r19, r1
     a96:	41 09       	sbc	r20, r1
     a98:	51 09       	sbc	r21, r1
     a9a:	c9 01       	movw	r24, r18
     a9c:	1f 91       	pop	r17
     a9e:	0f 91       	pop	r16
     aa0:	ff 90       	pop	r15
     aa2:	ef 90       	pop	r14
     aa4:	08 95       	ret

00000aa6 <__pack_f>:
     aa6:	df 92       	push	r13
     aa8:	ef 92       	push	r14
     aaa:	ff 92       	push	r15
     aac:	0f 93       	push	r16
     aae:	1f 93       	push	r17
     ab0:	fc 01       	movw	r30, r24
     ab2:	e4 80       	ldd	r14, Z+4	; 0x04
     ab4:	f5 80       	ldd	r15, Z+5	; 0x05
     ab6:	06 81       	ldd	r16, Z+6	; 0x06
     ab8:	17 81       	ldd	r17, Z+7	; 0x07
     aba:	d1 80       	ldd	r13, Z+1	; 0x01
     abc:	80 81       	ld	r24, Z
     abe:	82 30       	cpi	r24, 0x02	; 2
     ac0:	48 f4       	brcc	.+18     	; 0xad4 <__pack_f+0x2e>
     ac2:	80 e0       	ldi	r24, 0x00	; 0
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	a0 e1       	ldi	r26, 0x10	; 16
     ac8:	b0 e0       	ldi	r27, 0x00	; 0
     aca:	e8 2a       	or	r14, r24
     acc:	f9 2a       	or	r15, r25
     ace:	0a 2b       	or	r16, r26
     ad0:	1b 2b       	or	r17, r27
     ad2:	a5 c0       	rjmp	.+330    	; 0xc1e <__pack_f+0x178>
     ad4:	84 30       	cpi	r24, 0x04	; 4
     ad6:	09 f4       	brne	.+2      	; 0xada <__pack_f+0x34>
     ad8:	9f c0       	rjmp	.+318    	; 0xc18 <__pack_f+0x172>
     ada:	82 30       	cpi	r24, 0x02	; 2
     adc:	21 f4       	brne	.+8      	; 0xae6 <__pack_f+0x40>
     ade:	ee 24       	eor	r14, r14
     ae0:	ff 24       	eor	r15, r15
     ae2:	87 01       	movw	r16, r14
     ae4:	05 c0       	rjmp	.+10     	; 0xaf0 <__pack_f+0x4a>
     ae6:	e1 14       	cp	r14, r1
     ae8:	f1 04       	cpc	r15, r1
     aea:	01 05       	cpc	r16, r1
     aec:	11 05       	cpc	r17, r1
     aee:	19 f4       	brne	.+6      	; 0xaf6 <__pack_f+0x50>
     af0:	e0 e0       	ldi	r30, 0x00	; 0
     af2:	f0 e0       	ldi	r31, 0x00	; 0
     af4:	96 c0       	rjmp	.+300    	; 0xc22 <__pack_f+0x17c>
     af6:	62 81       	ldd	r22, Z+2	; 0x02
     af8:	73 81       	ldd	r23, Z+3	; 0x03
     afa:	9f ef       	ldi	r25, 0xFF	; 255
     afc:	62 38       	cpi	r22, 0x82	; 130
     afe:	79 07       	cpc	r23, r25
     b00:	0c f0       	brlt	.+2      	; 0xb04 <__pack_f+0x5e>
     b02:	5b c0       	rjmp	.+182    	; 0xbba <__pack_f+0x114>
     b04:	22 e8       	ldi	r18, 0x82	; 130
     b06:	3f ef       	ldi	r19, 0xFF	; 255
     b08:	26 1b       	sub	r18, r22
     b0a:	37 0b       	sbc	r19, r23
     b0c:	2a 31       	cpi	r18, 0x1A	; 26
     b0e:	31 05       	cpc	r19, r1
     b10:	2c f0       	brlt	.+10     	; 0xb1c <__pack_f+0x76>
     b12:	20 e0       	ldi	r18, 0x00	; 0
     b14:	30 e0       	ldi	r19, 0x00	; 0
     b16:	40 e0       	ldi	r20, 0x00	; 0
     b18:	50 e0       	ldi	r21, 0x00	; 0
     b1a:	2a c0       	rjmp	.+84     	; 0xb70 <__pack_f+0xca>
     b1c:	b8 01       	movw	r22, r16
     b1e:	a7 01       	movw	r20, r14
     b20:	02 2e       	mov	r0, r18
     b22:	04 c0       	rjmp	.+8      	; 0xb2c <__pack_f+0x86>
     b24:	76 95       	lsr	r23
     b26:	67 95       	ror	r22
     b28:	57 95       	ror	r21
     b2a:	47 95       	ror	r20
     b2c:	0a 94       	dec	r0
     b2e:	d2 f7       	brpl	.-12     	; 0xb24 <__pack_f+0x7e>
     b30:	81 e0       	ldi	r24, 0x01	; 1
     b32:	90 e0       	ldi	r25, 0x00	; 0
     b34:	a0 e0       	ldi	r26, 0x00	; 0
     b36:	b0 e0       	ldi	r27, 0x00	; 0
     b38:	04 c0       	rjmp	.+8      	; 0xb42 <__pack_f+0x9c>
     b3a:	88 0f       	add	r24, r24
     b3c:	99 1f       	adc	r25, r25
     b3e:	aa 1f       	adc	r26, r26
     b40:	bb 1f       	adc	r27, r27
     b42:	2a 95       	dec	r18
     b44:	d2 f7       	brpl	.-12     	; 0xb3a <__pack_f+0x94>
     b46:	01 97       	sbiw	r24, 0x01	; 1
     b48:	a1 09       	sbc	r26, r1
     b4a:	b1 09       	sbc	r27, r1
     b4c:	8e 21       	and	r24, r14
     b4e:	9f 21       	and	r25, r15
     b50:	a0 23       	and	r26, r16
     b52:	b1 23       	and	r27, r17
     b54:	00 97       	sbiw	r24, 0x00	; 0
     b56:	a1 05       	cpc	r26, r1
     b58:	b1 05       	cpc	r27, r1
     b5a:	21 f0       	breq	.+8      	; 0xb64 <__pack_f+0xbe>
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	9a 01       	movw	r18, r20
     b66:	ab 01       	movw	r20, r22
     b68:	28 2b       	or	r18, r24
     b6a:	39 2b       	or	r19, r25
     b6c:	4a 2b       	or	r20, r26
     b6e:	5b 2b       	or	r21, r27
     b70:	da 01       	movw	r26, r20
     b72:	c9 01       	movw	r24, r18
     b74:	8f 77       	andi	r24, 0x7F	; 127
     b76:	90 70       	andi	r25, 0x00	; 0
     b78:	a0 70       	andi	r26, 0x00	; 0
     b7a:	b0 70       	andi	r27, 0x00	; 0
     b7c:	80 34       	cpi	r24, 0x40	; 64
     b7e:	91 05       	cpc	r25, r1
     b80:	a1 05       	cpc	r26, r1
     b82:	b1 05       	cpc	r27, r1
     b84:	39 f4       	brne	.+14     	; 0xb94 <__pack_f+0xee>
     b86:	27 ff       	sbrs	r18, 7
     b88:	09 c0       	rjmp	.+18     	; 0xb9c <__pack_f+0xf6>
     b8a:	20 5c       	subi	r18, 0xC0	; 192
     b8c:	3f 4f       	sbci	r19, 0xFF	; 255
     b8e:	4f 4f       	sbci	r20, 0xFF	; 255
     b90:	5f 4f       	sbci	r21, 0xFF	; 255
     b92:	04 c0       	rjmp	.+8      	; 0xb9c <__pack_f+0xf6>
     b94:	21 5c       	subi	r18, 0xC1	; 193
     b96:	3f 4f       	sbci	r19, 0xFF	; 255
     b98:	4f 4f       	sbci	r20, 0xFF	; 255
     b9a:	5f 4f       	sbci	r21, 0xFF	; 255
     b9c:	e0 e0       	ldi	r30, 0x00	; 0
     b9e:	f0 e0       	ldi	r31, 0x00	; 0
     ba0:	20 30       	cpi	r18, 0x00	; 0
     ba2:	a0 e0       	ldi	r26, 0x00	; 0
     ba4:	3a 07       	cpc	r19, r26
     ba6:	a0 e0       	ldi	r26, 0x00	; 0
     ba8:	4a 07       	cpc	r20, r26
     baa:	a0 e4       	ldi	r26, 0x40	; 64
     bac:	5a 07       	cpc	r21, r26
     bae:	10 f0       	brcs	.+4      	; 0xbb4 <__pack_f+0x10e>
     bb0:	e1 e0       	ldi	r30, 0x01	; 1
     bb2:	f0 e0       	ldi	r31, 0x00	; 0
     bb4:	79 01       	movw	r14, r18
     bb6:	8a 01       	movw	r16, r20
     bb8:	27 c0       	rjmp	.+78     	; 0xc08 <__pack_f+0x162>
     bba:	60 38       	cpi	r22, 0x80	; 128
     bbc:	71 05       	cpc	r23, r1
     bbe:	64 f5       	brge	.+88     	; 0xc18 <__pack_f+0x172>
     bc0:	fb 01       	movw	r30, r22
     bc2:	e1 58       	subi	r30, 0x81	; 129
     bc4:	ff 4f       	sbci	r31, 0xFF	; 255
     bc6:	d8 01       	movw	r26, r16
     bc8:	c7 01       	movw	r24, r14
     bca:	8f 77       	andi	r24, 0x7F	; 127
     bcc:	90 70       	andi	r25, 0x00	; 0
     bce:	a0 70       	andi	r26, 0x00	; 0
     bd0:	b0 70       	andi	r27, 0x00	; 0
     bd2:	80 34       	cpi	r24, 0x40	; 64
     bd4:	91 05       	cpc	r25, r1
     bd6:	a1 05       	cpc	r26, r1
     bd8:	b1 05       	cpc	r27, r1
     bda:	39 f4       	brne	.+14     	; 0xbea <__pack_f+0x144>
     bdc:	e7 fe       	sbrs	r14, 7
     bde:	0d c0       	rjmp	.+26     	; 0xbfa <__pack_f+0x154>
     be0:	80 e4       	ldi	r24, 0x40	; 64
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	a0 e0       	ldi	r26, 0x00	; 0
     be6:	b0 e0       	ldi	r27, 0x00	; 0
     be8:	04 c0       	rjmp	.+8      	; 0xbf2 <__pack_f+0x14c>
     bea:	8f e3       	ldi	r24, 0x3F	; 63
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	a0 e0       	ldi	r26, 0x00	; 0
     bf0:	b0 e0       	ldi	r27, 0x00	; 0
     bf2:	e8 0e       	add	r14, r24
     bf4:	f9 1e       	adc	r15, r25
     bf6:	0a 1f       	adc	r16, r26
     bf8:	1b 1f       	adc	r17, r27
     bfa:	17 ff       	sbrs	r17, 7
     bfc:	05 c0       	rjmp	.+10     	; 0xc08 <__pack_f+0x162>
     bfe:	16 95       	lsr	r17
     c00:	07 95       	ror	r16
     c02:	f7 94       	ror	r15
     c04:	e7 94       	ror	r14
     c06:	31 96       	adiw	r30, 0x01	; 1
     c08:	87 e0       	ldi	r24, 0x07	; 7
     c0a:	16 95       	lsr	r17
     c0c:	07 95       	ror	r16
     c0e:	f7 94       	ror	r15
     c10:	e7 94       	ror	r14
     c12:	8a 95       	dec	r24
     c14:	d1 f7       	brne	.-12     	; 0xc0a <__pack_f+0x164>
     c16:	05 c0       	rjmp	.+10     	; 0xc22 <__pack_f+0x17c>
     c18:	ee 24       	eor	r14, r14
     c1a:	ff 24       	eor	r15, r15
     c1c:	87 01       	movw	r16, r14
     c1e:	ef ef       	ldi	r30, 0xFF	; 255
     c20:	f0 e0       	ldi	r31, 0x00	; 0
     c22:	6e 2f       	mov	r22, r30
     c24:	67 95       	ror	r22
     c26:	66 27       	eor	r22, r22
     c28:	67 95       	ror	r22
     c2a:	90 2f       	mov	r25, r16
     c2c:	9f 77       	andi	r25, 0x7F	; 127
     c2e:	d7 94       	ror	r13
     c30:	dd 24       	eor	r13, r13
     c32:	d7 94       	ror	r13
     c34:	8e 2f       	mov	r24, r30
     c36:	86 95       	lsr	r24
     c38:	49 2f       	mov	r20, r25
     c3a:	46 2b       	or	r20, r22
     c3c:	58 2f       	mov	r21, r24
     c3e:	5d 29       	or	r21, r13
     c40:	b7 01       	movw	r22, r14
     c42:	ca 01       	movw	r24, r20
     c44:	1f 91       	pop	r17
     c46:	0f 91       	pop	r16
     c48:	ff 90       	pop	r15
     c4a:	ef 90       	pop	r14
     c4c:	df 90       	pop	r13
     c4e:	08 95       	ret

00000c50 <__unpack_f>:
     c50:	fc 01       	movw	r30, r24
     c52:	db 01       	movw	r26, r22
     c54:	40 81       	ld	r20, Z
     c56:	51 81       	ldd	r21, Z+1	; 0x01
     c58:	22 81       	ldd	r18, Z+2	; 0x02
     c5a:	62 2f       	mov	r22, r18
     c5c:	6f 77       	andi	r22, 0x7F	; 127
     c5e:	70 e0       	ldi	r23, 0x00	; 0
     c60:	22 1f       	adc	r18, r18
     c62:	22 27       	eor	r18, r18
     c64:	22 1f       	adc	r18, r18
     c66:	93 81       	ldd	r25, Z+3	; 0x03
     c68:	89 2f       	mov	r24, r25
     c6a:	88 0f       	add	r24, r24
     c6c:	82 2b       	or	r24, r18
     c6e:	28 2f       	mov	r18, r24
     c70:	30 e0       	ldi	r19, 0x00	; 0
     c72:	99 1f       	adc	r25, r25
     c74:	99 27       	eor	r25, r25
     c76:	99 1f       	adc	r25, r25
     c78:	11 96       	adiw	r26, 0x01	; 1
     c7a:	9c 93       	st	X, r25
     c7c:	11 97       	sbiw	r26, 0x01	; 1
     c7e:	21 15       	cp	r18, r1
     c80:	31 05       	cpc	r19, r1
     c82:	a9 f5       	brne	.+106    	; 0xcee <__unpack_f+0x9e>
     c84:	41 15       	cp	r20, r1
     c86:	51 05       	cpc	r21, r1
     c88:	61 05       	cpc	r22, r1
     c8a:	71 05       	cpc	r23, r1
     c8c:	11 f4       	brne	.+4      	; 0xc92 <__unpack_f+0x42>
     c8e:	82 e0       	ldi	r24, 0x02	; 2
     c90:	37 c0       	rjmp	.+110    	; 0xd00 <__unpack_f+0xb0>
     c92:	82 e8       	ldi	r24, 0x82	; 130
     c94:	9f ef       	ldi	r25, 0xFF	; 255
     c96:	13 96       	adiw	r26, 0x03	; 3
     c98:	9c 93       	st	X, r25
     c9a:	8e 93       	st	-X, r24
     c9c:	12 97       	sbiw	r26, 0x02	; 2
     c9e:	9a 01       	movw	r18, r20
     ca0:	ab 01       	movw	r20, r22
     ca2:	67 e0       	ldi	r22, 0x07	; 7
     ca4:	22 0f       	add	r18, r18
     ca6:	33 1f       	adc	r19, r19
     ca8:	44 1f       	adc	r20, r20
     caa:	55 1f       	adc	r21, r21
     cac:	6a 95       	dec	r22
     cae:	d1 f7       	brne	.-12     	; 0xca4 <__unpack_f+0x54>
     cb0:	83 e0       	ldi	r24, 0x03	; 3
     cb2:	8c 93       	st	X, r24
     cb4:	0d c0       	rjmp	.+26     	; 0xcd0 <__unpack_f+0x80>
     cb6:	22 0f       	add	r18, r18
     cb8:	33 1f       	adc	r19, r19
     cba:	44 1f       	adc	r20, r20
     cbc:	55 1f       	adc	r21, r21
     cbe:	12 96       	adiw	r26, 0x02	; 2
     cc0:	8d 91       	ld	r24, X+
     cc2:	9c 91       	ld	r25, X
     cc4:	13 97       	sbiw	r26, 0x03	; 3
     cc6:	01 97       	sbiw	r24, 0x01	; 1
     cc8:	13 96       	adiw	r26, 0x03	; 3
     cca:	9c 93       	st	X, r25
     ccc:	8e 93       	st	-X, r24
     cce:	12 97       	sbiw	r26, 0x02	; 2
     cd0:	20 30       	cpi	r18, 0x00	; 0
     cd2:	80 e0       	ldi	r24, 0x00	; 0
     cd4:	38 07       	cpc	r19, r24
     cd6:	80 e0       	ldi	r24, 0x00	; 0
     cd8:	48 07       	cpc	r20, r24
     cda:	80 e4       	ldi	r24, 0x40	; 64
     cdc:	58 07       	cpc	r21, r24
     cde:	58 f3       	brcs	.-42     	; 0xcb6 <__unpack_f+0x66>
     ce0:	14 96       	adiw	r26, 0x04	; 4
     ce2:	2d 93       	st	X+, r18
     ce4:	3d 93       	st	X+, r19
     ce6:	4d 93       	st	X+, r20
     ce8:	5c 93       	st	X, r21
     cea:	17 97       	sbiw	r26, 0x07	; 7
     cec:	08 95       	ret
     cee:	2f 3f       	cpi	r18, 0xFF	; 255
     cf0:	31 05       	cpc	r19, r1
     cf2:	79 f4       	brne	.+30     	; 0xd12 <__unpack_f+0xc2>
     cf4:	41 15       	cp	r20, r1
     cf6:	51 05       	cpc	r21, r1
     cf8:	61 05       	cpc	r22, r1
     cfa:	71 05       	cpc	r23, r1
     cfc:	19 f4       	brne	.+6      	; 0xd04 <__unpack_f+0xb4>
     cfe:	84 e0       	ldi	r24, 0x04	; 4
     d00:	8c 93       	st	X, r24
     d02:	08 95       	ret
     d04:	64 ff       	sbrs	r22, 4
     d06:	03 c0       	rjmp	.+6      	; 0xd0e <__unpack_f+0xbe>
     d08:	81 e0       	ldi	r24, 0x01	; 1
     d0a:	8c 93       	st	X, r24
     d0c:	12 c0       	rjmp	.+36     	; 0xd32 <__unpack_f+0xe2>
     d0e:	1c 92       	st	X, r1
     d10:	10 c0       	rjmp	.+32     	; 0xd32 <__unpack_f+0xe2>
     d12:	2f 57       	subi	r18, 0x7F	; 127
     d14:	30 40       	sbci	r19, 0x00	; 0
     d16:	13 96       	adiw	r26, 0x03	; 3
     d18:	3c 93       	st	X, r19
     d1a:	2e 93       	st	-X, r18
     d1c:	12 97       	sbiw	r26, 0x02	; 2
     d1e:	83 e0       	ldi	r24, 0x03	; 3
     d20:	8c 93       	st	X, r24
     d22:	87 e0       	ldi	r24, 0x07	; 7
     d24:	44 0f       	add	r20, r20
     d26:	55 1f       	adc	r21, r21
     d28:	66 1f       	adc	r22, r22
     d2a:	77 1f       	adc	r23, r23
     d2c:	8a 95       	dec	r24
     d2e:	d1 f7       	brne	.-12     	; 0xd24 <__unpack_f+0xd4>
     d30:	70 64       	ori	r23, 0x40	; 64
     d32:	14 96       	adiw	r26, 0x04	; 4
     d34:	4d 93       	st	X+, r20
     d36:	5d 93       	st	X+, r21
     d38:	6d 93       	st	X+, r22
     d3a:	7c 93       	st	X, r23
     d3c:	17 97       	sbiw	r26, 0x07	; 7
     d3e:	08 95       	ret

00000d40 <__fpcmp_parts_f>:
     d40:	1f 93       	push	r17
     d42:	dc 01       	movw	r26, r24
     d44:	fb 01       	movw	r30, r22
     d46:	9c 91       	ld	r25, X
     d48:	92 30       	cpi	r25, 0x02	; 2
     d4a:	08 f4       	brcc	.+2      	; 0xd4e <__fpcmp_parts_f+0xe>
     d4c:	47 c0       	rjmp	.+142    	; 0xddc <__fpcmp_parts_f+0x9c>
     d4e:	80 81       	ld	r24, Z
     d50:	82 30       	cpi	r24, 0x02	; 2
     d52:	08 f4       	brcc	.+2      	; 0xd56 <__fpcmp_parts_f+0x16>
     d54:	43 c0       	rjmp	.+134    	; 0xddc <__fpcmp_parts_f+0x9c>
     d56:	94 30       	cpi	r25, 0x04	; 4
     d58:	51 f4       	brne	.+20     	; 0xd6e <__fpcmp_parts_f+0x2e>
     d5a:	11 96       	adiw	r26, 0x01	; 1
     d5c:	1c 91       	ld	r17, X
     d5e:	84 30       	cpi	r24, 0x04	; 4
     d60:	99 f5       	brne	.+102    	; 0xdc8 <__fpcmp_parts_f+0x88>
     d62:	81 81       	ldd	r24, Z+1	; 0x01
     d64:	68 2f       	mov	r22, r24
     d66:	70 e0       	ldi	r23, 0x00	; 0
     d68:	61 1b       	sub	r22, r17
     d6a:	71 09       	sbc	r23, r1
     d6c:	3f c0       	rjmp	.+126    	; 0xdec <__fpcmp_parts_f+0xac>
     d6e:	84 30       	cpi	r24, 0x04	; 4
     d70:	21 f0       	breq	.+8      	; 0xd7a <__fpcmp_parts_f+0x3a>
     d72:	92 30       	cpi	r25, 0x02	; 2
     d74:	31 f4       	brne	.+12     	; 0xd82 <__fpcmp_parts_f+0x42>
     d76:	82 30       	cpi	r24, 0x02	; 2
     d78:	b9 f1       	breq	.+110    	; 0xde8 <__fpcmp_parts_f+0xa8>
     d7a:	81 81       	ldd	r24, Z+1	; 0x01
     d7c:	88 23       	and	r24, r24
     d7e:	89 f1       	breq	.+98     	; 0xde2 <__fpcmp_parts_f+0xa2>
     d80:	2d c0       	rjmp	.+90     	; 0xddc <__fpcmp_parts_f+0x9c>
     d82:	11 96       	adiw	r26, 0x01	; 1
     d84:	1c 91       	ld	r17, X
     d86:	11 97       	sbiw	r26, 0x01	; 1
     d88:	82 30       	cpi	r24, 0x02	; 2
     d8a:	f1 f0       	breq	.+60     	; 0xdc8 <__fpcmp_parts_f+0x88>
     d8c:	81 81       	ldd	r24, Z+1	; 0x01
     d8e:	18 17       	cp	r17, r24
     d90:	d9 f4       	brne	.+54     	; 0xdc8 <__fpcmp_parts_f+0x88>
     d92:	12 96       	adiw	r26, 0x02	; 2
     d94:	2d 91       	ld	r18, X+
     d96:	3c 91       	ld	r19, X
     d98:	13 97       	sbiw	r26, 0x03	; 3
     d9a:	82 81       	ldd	r24, Z+2	; 0x02
     d9c:	93 81       	ldd	r25, Z+3	; 0x03
     d9e:	82 17       	cp	r24, r18
     da0:	93 07       	cpc	r25, r19
     da2:	94 f0       	brlt	.+36     	; 0xdc8 <__fpcmp_parts_f+0x88>
     da4:	28 17       	cp	r18, r24
     da6:	39 07       	cpc	r19, r25
     da8:	bc f0       	brlt	.+46     	; 0xdd8 <__fpcmp_parts_f+0x98>
     daa:	14 96       	adiw	r26, 0x04	; 4
     dac:	8d 91       	ld	r24, X+
     dae:	9d 91       	ld	r25, X+
     db0:	0d 90       	ld	r0, X+
     db2:	bc 91       	ld	r27, X
     db4:	a0 2d       	mov	r26, r0
     db6:	24 81       	ldd	r18, Z+4	; 0x04
     db8:	35 81       	ldd	r19, Z+5	; 0x05
     dba:	46 81       	ldd	r20, Z+6	; 0x06
     dbc:	57 81       	ldd	r21, Z+7	; 0x07
     dbe:	28 17       	cp	r18, r24
     dc0:	39 07       	cpc	r19, r25
     dc2:	4a 07       	cpc	r20, r26
     dc4:	5b 07       	cpc	r21, r27
     dc6:	18 f4       	brcc	.+6      	; 0xdce <__fpcmp_parts_f+0x8e>
     dc8:	11 23       	and	r17, r17
     dca:	41 f0       	breq	.+16     	; 0xddc <__fpcmp_parts_f+0x9c>
     dcc:	0a c0       	rjmp	.+20     	; 0xde2 <__fpcmp_parts_f+0xa2>
     dce:	82 17       	cp	r24, r18
     dd0:	93 07       	cpc	r25, r19
     dd2:	a4 07       	cpc	r26, r20
     dd4:	b5 07       	cpc	r27, r21
     dd6:	40 f4       	brcc	.+16     	; 0xde8 <__fpcmp_parts_f+0xa8>
     dd8:	11 23       	and	r17, r17
     dda:	19 f0       	breq	.+6      	; 0xde2 <__fpcmp_parts_f+0xa2>
     ddc:	61 e0       	ldi	r22, 0x01	; 1
     dde:	70 e0       	ldi	r23, 0x00	; 0
     de0:	05 c0       	rjmp	.+10     	; 0xdec <__fpcmp_parts_f+0xac>
     de2:	6f ef       	ldi	r22, 0xFF	; 255
     de4:	7f ef       	ldi	r23, 0xFF	; 255
     de6:	02 c0       	rjmp	.+4      	; 0xdec <__fpcmp_parts_f+0xac>
     de8:	60 e0       	ldi	r22, 0x00	; 0
     dea:	70 e0       	ldi	r23, 0x00	; 0
     dec:	cb 01       	movw	r24, r22
     dee:	1f 91       	pop	r17
     df0:	08 95       	ret

00000df2 <ADC_voidInit>:
static u8 ADC_u8ChainConversionIndex = 0;     /* Global variable to carry the current conversion index */

/*****************************************************************************************************/

void ADC_voidInit(void)
{
     df2:	df 93       	push	r29
     df4:	cf 93       	push	r28
     df6:	cd b7       	in	r28, 0x3d	; 61
     df8:	de b7       	in	r29, 0x3e	; 62
	/* reference voltage */
	ADMUX &= ADC_VOLT_REF_SELEC_MASK;
     dfa:	a7 e2       	ldi	r26, 0x27	; 39
     dfc:	b0 e0       	ldi	r27, 0x00	; 0
     dfe:	e7 e2       	ldi	r30, 0x27	; 39
     e00:	f0 e0       	ldi	r31, 0x00	; 0
     e02:	80 81       	ld	r24, Z
     e04:	8f 73       	andi	r24, 0x3F	; 63
     e06:	8c 93       	st	X, r24
	ADMUX |= ADC_VOLT_REF_SELEC;
     e08:	a7 e2       	ldi	r26, 0x27	; 39
     e0a:	b0 e0       	ldi	r27, 0x00	; 0
     e0c:	e7 e2       	ldi	r30, 0x27	; 39
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	80 81       	ld	r24, Z
     e12:	80 64       	ori	r24, 0x40	; 64
     e14:	8c 93       	st	X, r24

	/* Activate Data Register */
	ADMUX &= ADC_Data_Register_MASK;
     e16:	a7 e2       	ldi	r26, 0x27	; 39
     e18:	b0 e0       	ldi	r27, 0x00	; 0
     e1a:	e7 e2       	ldi	r30, 0x27	; 39
     e1c:	f0 e0       	ldi	r31, 0x00	; 0
     e1e:	80 81       	ld	r24, Z
     e20:	8f 7d       	andi	r24, 0xDF	; 223
     e22:	8c 93       	st	X, r24
	ADMUX |= ADC_Data_Register;
     e24:	a7 e2       	ldi	r26, 0x27	; 39
     e26:	b0 e0       	ldi	r27, 0x00	; 0
     e28:	e7 e2       	ldi	r30, 0x27	; 39
     e2a:	f0 e0       	ldi	r31, 0x00	; 0
     e2c:	80 81       	ld	r24, Z
     e2e:	8c 93       	st	X, r24
	//SET_BIT(ADMUX,ADMUX_ADLAR);

	/* Prescaler Selection */
	ADCSRA &= ADC_PRESC_MASK;
     e30:	a6 e2       	ldi	r26, 0x26	; 38
     e32:	b0 e0       	ldi	r27, 0x00	; 0
     e34:	e6 e2       	ldi	r30, 0x26	; 38
     e36:	f0 e0       	ldi	r31, 0x00	; 0
     e38:	80 81       	ld	r24, Z
     e3a:	88 7f       	andi	r24, 0xF8	; 248
     e3c:	8c 93       	st	X, r24
	ADCSRA |= ADC_PRESC_SELEC;
     e3e:	a6 e2       	ldi	r26, 0x26	; 38
     e40:	b0 e0       	ldi	r27, 0x00	; 0
     e42:	e6 e2       	ldi	r30, 0x26	; 38
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	80 81       	ld	r24, Z
     e48:	87 60       	ori	r24, 0x07	; 7
     e4a:	8c 93       	st	X, r24

	/* Enable peripheral*/
	SET_BIT(ADCSRA,ADCSRA_ADEN);
     e4c:	a6 e2       	ldi	r26, 0x26	; 38
     e4e:	b0 e0       	ldi	r27, 0x00	; 0
     e50:	e6 e2       	ldi	r30, 0x26	; 38
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	80 81       	ld	r24, Z
     e56:	80 68       	ori	r24, 0x80	; 128
     e58:	8c 93       	st	X, r24
	SFIOR |= ADC_Auto_Trigger_Source;

#endif


}
     e5a:	cf 91       	pop	r28
     e5c:	df 91       	pop	r29
     e5e:	08 95       	ret

00000e60 <ADC_u8StartConversionSynch>:
u8 ADC_u8StartConversionSynch(u8 Copy_u8Channel, u16* Copy_pu16Reading)
{
     e60:	df 93       	push	r29
     e62:	cf 93       	push	r28
     e64:	cd b7       	in	r28, 0x3d	; 61
     e66:	de b7       	in	r29, 0x3e	; 62
     e68:	28 97       	sbiw	r28, 0x08	; 8
     e6a:	0f b6       	in	r0, 0x3f	; 63
     e6c:	f8 94       	cli
     e6e:	de bf       	out	0x3e, r29	; 62
     e70:	0f be       	out	0x3f, r0	; 63
     e72:	cd bf       	out	0x3d, r28	; 61
     e74:	8e 83       	std	Y+6, r24	; 0x06
     e76:	78 87       	std	Y+8, r23	; 0x08
     e78:	6f 83       	std	Y+7, r22	; 0x07
	u32 Local_u32Counter = 0;
     e7a:	1a 82       	std	Y+2, r1	; 0x02
     e7c:	1b 82       	std	Y+3, r1	; 0x03
     e7e:	1c 82       	std	Y+4, r1	; 0x04
     e80:	1d 82       	std	Y+5, r1	; 0x05
	u8 Local_u8ErrorState = OK;
     e82:	19 82       	std	Y+1, r1	; 0x01
	if(ADC_u8BusyState == IDLE)
     e84:	80 91 36 02 	lds	r24, 0x0236
     e88:	88 23       	and	r24, r24
     e8a:	09 f0       	breq	.+2      	; 0xe8e <ADC_u8StartConversionSynch+0x2e>
     e8c:	5d c0       	rjmp	.+186    	; 0xf48 <ADC_u8StartConversionSynch+0xe8>
	{
		/* ADC is now busy*/
		ADC_u8BusyState = BUSY;
     e8e:	81 e0       	ldi	r24, 0x01	; 1
     e90:	80 93 36 02 	sts	0x0236, r24

		ADMUX &= ADC_SELEC_CHANNEL_MASK; 	/* Clear the MUX bits in ADMUX register*/
     e94:	a7 e2       	ldi	r26, 0x27	; 39
     e96:	b0 e0       	ldi	r27, 0x00	; 0
     e98:	e7 e2       	ldi	r30, 0x27	; 39
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	80 81       	ld	r24, Z
     e9e:	80 7e       	andi	r24, 0xE0	; 224
     ea0:	8c 93       	st	X, r24
		ADMUX |= Copy_u8Channel;           /*Set the required channel into the MUX bits*/
     ea2:	a7 e2       	ldi	r26, 0x27	; 39
     ea4:	b0 e0       	ldi	r27, 0x00	; 0
     ea6:	e7 e2       	ldi	r30, 0x27	; 39
     ea8:	f0 e0       	ldi	r31, 0x00	; 0
     eaa:	90 81       	ld	r25, Z
     eac:	8e 81       	ldd	r24, Y+6	; 0x06
     eae:	89 2b       	or	r24, r25
     eb0:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADCSRA_ADSC);      /* Start Conversion */
     eb2:	a6 e2       	ldi	r26, 0x26	; 38
     eb4:	b0 e0       	ldi	r27, 0x00	; 0
     eb6:	e6 e2       	ldi	r30, 0x26	; 38
     eb8:	f0 e0       	ldi	r31, 0x00	; 0
     eba:	80 81       	ld	r24, Z
     ebc:	80 64       	ori	r24, 0x40	; 64
     ebe:	8c 93       	st	X, r24
     ec0:	0b c0       	rjmp	.+22     	; 0xed8 <ADC_u8StartConversionSynch+0x78>
#if ADC_Conversion_Mode == ADC_Single_Conv_Mode

		/* Polling (Busy Waiting) until the conversion complete flag is set or counter reaching timeout value */
		while(((GET_BIT(ADCSRA,ADCSRA_ADIF))==0) && (Local_u32Counter != ADC_u32TIMEOUT))
		{
			Local_u32Counter++;
     ec2:	8a 81       	ldd	r24, Y+2	; 0x02
     ec4:	9b 81       	ldd	r25, Y+3	; 0x03
     ec6:	ac 81       	ldd	r26, Y+4	; 0x04
     ec8:	bd 81       	ldd	r27, Y+5	; 0x05
     eca:	01 96       	adiw	r24, 0x01	; 1
     ecc:	a1 1d       	adc	r26, r1
     ece:	b1 1d       	adc	r27, r1
     ed0:	8a 83       	std	Y+2, r24	; 0x02
     ed2:	9b 83       	std	Y+3, r25	; 0x03
     ed4:	ac 83       	std	Y+4, r26	; 0x04
     ed6:	bd 83       	std	Y+5, r27	; 0x05


#if ADC_Conversion_Mode == ADC_Single_Conv_Mode

		/* Polling (Busy Waiting) until the conversion complete flag is set or counter reaching timeout value */
		while(((GET_BIT(ADCSRA,ADCSRA_ADIF))==0) && (Local_u32Counter != ADC_u32TIMEOUT))
     ed8:	e6 e2       	ldi	r30, 0x26	; 38
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	80 81       	ld	r24, Z
     ede:	82 95       	swap	r24
     ee0:	8f 70       	andi	r24, 0x0F	; 15
     ee2:	88 2f       	mov	r24, r24
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	81 70       	andi	r24, 0x01	; 1
     ee8:	90 70       	andi	r25, 0x00	; 0
     eea:	00 97       	sbiw	r24, 0x00	; 0
     eec:	61 f4       	brne	.+24     	; 0xf06 <ADC_u8StartConversionSynch+0xa6>
     eee:	8a 81       	ldd	r24, Y+2	; 0x02
     ef0:	9b 81       	ldd	r25, Y+3	; 0x03
     ef2:	ac 81       	ldd	r26, Y+4	; 0x04
     ef4:	bd 81       	ldd	r27, Y+5	; 0x05
     ef6:	80 35       	cpi	r24, 0x50	; 80
     ef8:	23 ec       	ldi	r18, 0xC3	; 195
     efa:	92 07       	cpc	r25, r18
     efc:	20 e0       	ldi	r18, 0x00	; 0
     efe:	a2 07       	cpc	r26, r18
     f00:	20 e0       	ldi	r18, 0x00	; 0
     f02:	b2 07       	cpc	r27, r18
     f04:	f1 f6       	brne	.-68     	; 0xec2 <ADC_u8StartConversionSynch+0x62>
		{
			Local_u32Counter++;
		}

		if (Local_u32Counter == ADC_u32TIMEOUT)
     f06:	8a 81       	ldd	r24, Y+2	; 0x02
     f08:	9b 81       	ldd	r25, Y+3	; 0x03
     f0a:	ac 81       	ldd	r26, Y+4	; 0x04
     f0c:	bd 81       	ldd	r27, Y+5	; 0x05
     f0e:	80 35       	cpi	r24, 0x50	; 80
     f10:	23 ec       	ldi	r18, 0xC3	; 195
     f12:	92 07       	cpc	r25, r18
     f14:	20 e0       	ldi	r18, 0x00	; 0
     f16:	a2 07       	cpc	r26, r18
     f18:	20 e0       	ldi	r18, 0x00	; 0
     f1a:	b2 07       	cpc	r27, r18
     f1c:	19 f4       	brne	.+6      	; 0xf24 <ADC_u8StartConversionSynch+0xc4>
		{
			/* Loop is broken because the time out is reached */
			Local_u8ErrorState = NOK;
     f1e:	81 e0       	ldi	r24, 0x01	; 1
     f20:	89 83       	std	Y+1, r24	; 0x01
     f22:	07 c0       	rjmp	.+14     	; 0xf32 <ADC_u8StartConversionSynch+0xd2>
		}
		else
		{
			/* Loop is broken because flag is raised */
			/* Clear the conversion complete flag*/
			SET_BIT(ADCSRA,ADCSRA_ADIF);
     f24:	a6 e2       	ldi	r26, 0x26	; 38
     f26:	b0 e0       	ldi	r27, 0x00	; 0
     f28:	e6 e2       	ldi	r30, 0x26	; 38
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	80 81       	ld	r24, Z
     f2e:	80 61       	ori	r24, 0x10	; 16
     f30:	8c 93       	st	X, r24
#endif
		/* Return the reading*/
#if   NO_OF_BITS == _8_BITS
		*Copy_pu16Reading = ADCH;
#elif NO_OF_BITS == _10_BITS
		*Copy_pu16Reading =  ADC;
     f32:	e4 e2       	ldi	r30, 0x24	; 36
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	80 81       	ld	r24, Z
     f38:	91 81       	ldd	r25, Z+1	; 0x01
     f3a:	ef 81       	ldd	r30, Y+7	; 0x07
     f3c:	f8 85       	ldd	r31, Y+8	; 0x08
     f3e:	91 83       	std	Z+1, r25	; 0x01
     f40:	80 83       	st	Z, r24
#endif

		/* ADC is finished return it to IDLE */
		ADC_u8BusyState = IDLE;
     f42:	10 92 36 02 	sts	0x0236, r1
     f46:	02 c0       	rjmp	.+4      	; 0xf4c <ADC_u8StartConversionSynch+0xec>
	}
	else
	{
		Local_u8ErrorState = BUSY_FUNC;
     f48:	83 e0       	ldi	r24, 0x03	; 3
     f4a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
     f4c:	89 81       	ldd	r24, Y+1	; 0x01


}
     f4e:	28 96       	adiw	r28, 0x08	; 8
     f50:	0f b6       	in	r0, 0x3f	; 63
     f52:	f8 94       	cli
     f54:	de bf       	out	0x3e, r29	; 62
     f56:	0f be       	out	0x3f, r0	; 63
     f58:	cd bf       	out	0x3d, r28	; 61
     f5a:	cf 91       	pop	r28
     f5c:	df 91       	pop	r29
     f5e:	08 95       	ret

00000f60 <ADC_u8StartConversionAsynch>:

u8 ADC_u8StartConversionAsynch(u8 Copy_u8Channel, u16* Copy_pu16Reading, void (*Copy_pvNotificationFun)(void))
{
     f60:	df 93       	push	r29
     f62:	cf 93       	push	r28
     f64:	00 d0       	rcall	.+0      	; 0xf66 <ADC_u8StartConversionAsynch+0x6>
     f66:	00 d0       	rcall	.+0      	; 0xf68 <ADC_u8StartConversionAsynch+0x8>
     f68:	00 d0       	rcall	.+0      	; 0xf6a <ADC_u8StartConversionAsynch+0xa>
     f6a:	cd b7       	in	r28, 0x3d	; 61
     f6c:	de b7       	in	r29, 0x3e	; 62
     f6e:	8a 83       	std	Y+2, r24	; 0x02
     f70:	7c 83       	std	Y+4, r23	; 0x04
     f72:	6b 83       	std	Y+3, r22	; 0x03
     f74:	5e 83       	std	Y+6, r21	; 0x06
     f76:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = OK;
     f78:	19 82       	std	Y+1, r1	; 0x01

	if(ADC_u8BusyState == IDLE )
     f7a:	80 91 36 02 	lds	r24, 0x0236
     f7e:	88 23       	and	r24, r24
     f80:	d1 f5       	brne	.+116    	; 0xff6 <ADC_u8StartConversionAsynch+0x96>
	{


		if((Copy_pu16Reading == NULL) || (Copy_pvNotificationFun == NULL))
     f82:	8b 81       	ldd	r24, Y+3	; 0x03
     f84:	9c 81       	ldd	r25, Y+4	; 0x04
     f86:	00 97       	sbiw	r24, 0x00	; 0
     f88:	21 f0       	breq	.+8      	; 0xf92 <ADC_u8StartConversionAsynch+0x32>
     f8a:	8d 81       	ldd	r24, Y+5	; 0x05
     f8c:	9e 81       	ldd	r25, Y+6	; 0x06
     f8e:	00 97       	sbiw	r24, 0x00	; 0
     f90:	19 f4       	brne	.+6      	; 0xf98 <ADC_u8StartConversionAsynch+0x38>
		{
			Local_u8ErrorState = NULL_POINTER;
     f92:	82 e0       	ldi	r24, 0x02	; 2
     f94:	89 83       	std	Y+1, r24	; 0x01
     f96:	31 c0       	rjmp	.+98     	; 0xffa <ADC_u8StartConversionAsynch+0x9a>
		}
		else
		{
			/* make ADC BUSY in order not  work until being idle  */
			ADC_u8BusyState = BUSY;
     f98:	81 e0       	ldi	r24, 0x01	; 1
     f9a:	80 93 36 02 	sts	0x0236, r24

			/* Make ISR source single channel Asynchronous */
			ADC_u8ISRSourse = SINGLE_CHANNEL_ASYNCH;
     f9e:	10 92 3c 02 	sts	0x023C, r1

			/* Initialize the reading variable globally */
			ADC_pu16Reading = Copy_pu16Reading;
     fa2:	8b 81       	ldd	r24, Y+3	; 0x03
     fa4:	9c 81       	ldd	r25, Y+4	; 0x04
     fa6:	90 93 33 02 	sts	0x0233, r25
     faa:	80 93 32 02 	sts	0x0232, r24

			/* Initialize the callback notification function globally */
			ADC_pvCallBackNotificationFunc = Copy_pvNotificationFun;
     fae:	8d 81       	ldd	r24, Y+5	; 0x05
     fb0:	9e 81       	ldd	r25, Y+6	; 0x06
     fb2:	90 93 35 02 	sts	0x0235, r25
     fb6:	80 93 34 02 	sts	0x0234, r24

			/* Select Channel*/
			ADMUX &= ADC_SELEC_CHANNEL_MASK; 	/* Clear the MUX bits in ADMUX register*/
     fba:	a7 e2       	ldi	r26, 0x27	; 39
     fbc:	b0 e0       	ldi	r27, 0x00	; 0
     fbe:	e7 e2       	ldi	r30, 0x27	; 39
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	80 81       	ld	r24, Z
     fc4:	80 7e       	andi	r24, 0xE0	; 224
     fc6:	8c 93       	st	X, r24
			ADMUX |= Copy_u8Channel;           /*Set the required channel into the MUX bits*/
     fc8:	a7 e2       	ldi	r26, 0x27	; 39
     fca:	b0 e0       	ldi	r27, 0x00	; 0
     fcc:	e7 e2       	ldi	r30, 0x27	; 39
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	90 81       	ld	r25, Z
     fd2:	8a 81       	ldd	r24, Y+2	; 0x02
     fd4:	89 2b       	or	r24, r25
     fd6:	8c 93       	st	X, r24

			/* Start Conversion */
			SET_BIT(ADCSRA,ADCSRA_ADSC);
     fd8:	a6 e2       	ldi	r26, 0x26	; 38
     fda:	b0 e0       	ldi	r27, 0x00	; 0
     fdc:	e6 e2       	ldi	r30, 0x26	; 38
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	80 81       	ld	r24, Z
     fe2:	80 64       	ori	r24, 0x40	; 64
     fe4:	8c 93       	st	X, r24

			/* Enable INT for ADC  */
			SET_BIT(ADCSRA,ADCSRA_ADIE);
     fe6:	a6 e2       	ldi	r26, 0x26	; 38
     fe8:	b0 e0       	ldi	r27, 0x00	; 0
     fea:	e6 e2       	ldi	r30, 0x26	; 38
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	80 81       	ld	r24, Z
     ff0:	88 60       	ori	r24, 0x08	; 8
     ff2:	8c 93       	st	X, r24
     ff4:	02 c0       	rjmp	.+4      	; 0xffa <ADC_u8StartConversionAsynch+0x9a>

		}
	}
	else
	{
		Local_u8ErrorState = BUSY_FUNC;
     ff6:	83 e0       	ldi	r24, 0x03	; 3
     ff8:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
     ffa:	89 81       	ldd	r24, Y+1	; 0x01
}
     ffc:	26 96       	adiw	r28, 0x06	; 6
     ffe:	0f b6       	in	r0, 0x3f	; 63
    1000:	f8 94       	cli
    1002:	de bf       	out	0x3e, r29	; 62
    1004:	0f be       	out	0x3f, r0	; 63
    1006:	cd bf       	out	0x3d, r28	; 61
    1008:	cf 91       	pop	r28
    100a:	df 91       	pop	r29
    100c:	08 95       	ret

0000100e <ADC_u8StartChainConversionAsynch>:



u8 ADC_u8StartChainConversionAsynch(ADC_Chain_t* Copy_Chain)
{
    100e:	df 93       	push	r29
    1010:	cf 93       	push	r28
    1012:	00 d0       	rcall	.+0      	; 0x1014 <ADC_u8StartChainConversionAsynch+0x6>
    1014:	0f 92       	push	r0
    1016:	cd b7       	in	r28, 0x3d	; 61
    1018:	de b7       	in	r29, 0x3e	; 62
    101a:	9b 83       	std	Y+3, r25	; 0x03
    101c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    101e:	19 82       	std	Y+1, r1	; 0x01
	/* Check Null Pointer*/
	if(Copy_Chain == NULL)
    1020:	8a 81       	ldd	r24, Y+2	; 0x02
    1022:	9b 81       	ldd	r25, Y+3	; 0x03
    1024:	00 97       	sbiw	r24, 0x00	; 0
    1026:	19 f4       	brne	.+6      	; 0x102e <ADC_u8StartChainConversionAsynch+0x20>
	{
		Local_u8ErrorState = NULL_POINTER;
    1028:	82 e0       	ldi	r24, 0x02	; 2
    102a:	89 83       	std	Y+1, r24	; 0x01
    102c:	55 c0       	rjmp	.+170    	; 0x10d8 <ADC_u8StartChainConversionAsynch+0xca>
	}
	else
	{
		if(ADC_u8BusyState == IDLE)
    102e:	80 91 36 02 	lds	r24, 0x0236
    1032:	88 23       	and	r24, r24
    1034:	09 f0       	breq	.+2      	; 0x1038 <ADC_u8StartChainConversionAsynch+0x2a>
    1036:	4e c0       	rjmp	.+156    	; 0x10d4 <ADC_u8StartChainConversionAsynch+0xc6>
		{
			/* Make ADC Busy*/
			ADC_u8BusyState = BUSY;
    1038:	81 e0       	ldi	r24, 0x01	; 1
    103a:	80 93 36 02 	sts	0x0236, r24


			/* Make ISR Source*/
			ADC_u8ISRSourse = CHAIN_ASYNCH;
    103e:	81 e0       	ldi	r24, 0x01	; 1
    1040:	80 93 3c 02 	sts	0x023C, r24

			/* initialize Chain Channel array globally  */
			ADC_pu8ChainChannelArr= Copy_Chain->Channel ;
    1044:	ea 81       	ldd	r30, Y+2	; 0x02
    1046:	fb 81       	ldd	r31, Y+3	; 0x03
    1048:	80 81       	ld	r24, Z
    104a:	91 81       	ldd	r25, Z+1	; 0x01
    104c:	90 93 38 02 	sts	0x0238, r25
    1050:	80 93 37 02 	sts	0x0237, r24

			/* initialize Chain result array globally  */
			ADC_pu16ChainResultArr = Copy_Chain->Result;
    1054:	ea 81       	ldd	r30, Y+2	; 0x02
    1056:	fb 81       	ldd	r31, Y+3	; 0x03
    1058:	82 81       	ldd	r24, Z+2	; 0x02
    105a:	93 81       	ldd	r25, Z+3	; 0x03
    105c:	90 93 3a 02 	sts	0x023A, r25
    1060:	80 93 39 02 	sts	0x0239, r24

			/* initialize Chain Size globally */
			ADC_u8ChainSize = Copy_Chain->Size;
    1064:	ea 81       	ldd	r30, Y+2	; 0x02
    1066:	fb 81       	ldd	r31, Y+3	; 0x03
    1068:	84 81       	ldd	r24, Z+4	; 0x04
    106a:	80 93 3d 02 	sts	0x023D, r24

			/* initialize notification function globally */
			ADC_pvCallBackNotificationFunc = Copy_Chain->NotificationFunc ;
    106e:	ea 81       	ldd	r30, Y+2	; 0x02
    1070:	fb 81       	ldd	r31, Y+3	; 0x03
    1072:	85 81       	ldd	r24, Z+5	; 0x05
    1074:	96 81       	ldd	r25, Z+6	; 0x06
    1076:	90 93 35 02 	sts	0x0235, r25
    107a:	80 93 34 02 	sts	0x0234, r24

			/* Initialize current conversion Index*/
			ADC_u8ChainConversionIndex = 0;
    107e:	10 92 3b 02 	sts	0x023B, r1


			/*Set required channel
			 *  Start Conversion of 1st Channel */
			ADMUX &= ADC_SELEC_CHANNEL_MASK; 	          /* Clear the MUX bits in ADMUX register*/
    1082:	a7 e2       	ldi	r26, 0x27	; 39
    1084:	b0 e0       	ldi	r27, 0x00	; 0
    1086:	e7 e2       	ldi	r30, 0x27	; 39
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	80 81       	ld	r24, Z
    108c:	80 7e       	andi	r24, 0xE0	; 224
    108e:	8c 93       	st	X, r24
			ADMUX |= ADC_pu8ChainChannelArr[ADC_u8ChainConversionIndex] ;           /*Set the required channel into the MUX bits
    1090:	a7 e2       	ldi	r26, 0x27	; 39
    1092:	b0 e0       	ldi	r27, 0x00	; 0
    1094:	e7 e2       	ldi	r30, 0x27	; 39
    1096:	f0 e0       	ldi	r31, 0x00	; 0
    1098:	40 81       	ld	r20, Z
    109a:	20 91 37 02 	lds	r18, 0x0237
    109e:	30 91 38 02 	lds	r19, 0x0238
    10a2:	80 91 3b 02 	lds	r24, 0x023B
    10a6:	88 2f       	mov	r24, r24
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	f9 01       	movw	r30, r18
    10ac:	e8 0f       	add	r30, r24
    10ae:	f9 1f       	adc	r31, r25
    10b0:	80 81       	ld	r24, Z
    10b2:	84 2b       	or	r24, r20
    10b4:	8c 93       	st	X, r24
			                                                                         ADC_u8ChainConversionIndex is equal zero*/
			SET_BIT(ADCSRA,ADCSRA_ADSC);                /* Start Conversion */
    10b6:	a6 e2       	ldi	r26, 0x26	; 38
    10b8:	b0 e0       	ldi	r27, 0x00	; 0
    10ba:	e6 e2       	ldi	r30, 0x26	; 38
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	80 81       	ld	r24, Z
    10c0:	80 64       	ori	r24, 0x40	; 64
    10c2:	8c 93       	st	X, r24
			SET_BIT(ADCSRA,ADCSRA_ADIE);               /* Enable Conversion Complete INT for ADC  */
    10c4:	a6 e2       	ldi	r26, 0x26	; 38
    10c6:	b0 e0       	ldi	r27, 0x00	; 0
    10c8:	e6 e2       	ldi	r30, 0x26	; 38
    10ca:	f0 e0       	ldi	r31, 0x00	; 0
    10cc:	80 81       	ld	r24, Z
    10ce:	88 60       	ori	r24, 0x08	; 8
    10d0:	8c 93       	st	X, r24
    10d2:	02 c0       	rjmp	.+4      	; 0x10d8 <ADC_u8StartChainConversionAsynch+0xca>

		}
		else
		{
			Local_u8ErrorState = BUSY_FUNC;
    10d4:	83 e0       	ldi	r24, 0x03	; 3
    10d6:	89 83       	std	Y+1, r24	; 0x01

		}

	}

	return Local_u8ErrorState;
    10d8:	89 81       	ldd	r24, Y+1	; 0x01
}
    10da:	0f 90       	pop	r0
    10dc:	0f 90       	pop	r0
    10de:	0f 90       	pop	r0
    10e0:	cf 91       	pop	r28
    10e2:	df 91       	pop	r29
    10e4:	08 95       	ret

000010e6 <__vector_16>:

void __vector_16 (void) __attribute__((signal));
void __vector_16 (void)
{
    10e6:	1f 92       	push	r1
    10e8:	0f 92       	push	r0
    10ea:	0f b6       	in	r0, 0x3f	; 63
    10ec:	0f 92       	push	r0
    10ee:	11 24       	eor	r1, r1
    10f0:	2f 93       	push	r18
    10f2:	3f 93       	push	r19
    10f4:	4f 93       	push	r20
    10f6:	5f 93       	push	r21
    10f8:	6f 93       	push	r22
    10fa:	7f 93       	push	r23
    10fc:	8f 93       	push	r24
    10fe:	9f 93       	push	r25
    1100:	af 93       	push	r26
    1102:	bf 93       	push	r27
    1104:	ef 93       	push	r30
    1106:	ff 93       	push	r31
    1108:	df 93       	push	r29
    110a:	cf 93       	push	r28
    110c:	cd b7       	in	r28, 0x3d	; 61
    110e:	de b7       	in	r29, 0x3e	; 62
	if(ADC_u8ISRSourse == SINGLE_CHANNEL_ASYNCH)
    1110:	80 91 3c 02 	lds	r24, 0x023C
    1114:	88 23       	and	r24, r24
    1116:	c9 f4       	brne	.+50     	; 0x114a <__vector_16+0x64>
	{
		/* Read ADC Result */
#if   NO_OF_BITS == _8_BITS
		*ADC_pu16Reading = ADCH;
#elif NO_OF_BITS == _10_BITS
		*ADC_pu16Reading =  ADC;
    1118:	a0 91 32 02 	lds	r26, 0x0232
    111c:	b0 91 33 02 	lds	r27, 0x0233
    1120:	e4 e2       	ldi	r30, 0x24	; 36
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	80 81       	ld	r24, Z
    1126:	91 81       	ldd	r25, Z+1	; 0x01
    1128:	8d 93       	st	X+, r24
    112a:	9c 93       	st	X, r25
#endif
		/* Make ADC state be IDLE because it finished*/
		ADC_u8BusyState = IDLE;
    112c:	10 92 36 02 	sts	0x0236, r1

		/* Invoke the callback notification function */
		ADC_pvCallBackNotificationFunc();
    1130:	e0 91 34 02 	lds	r30, 0x0234
    1134:	f0 91 35 02 	lds	r31, 0x0235
    1138:	09 95       	icall

		/* Disable ADC Conversion complete interrupt */
		CLR_BIT(ADCSRA,ADCSRA_ADIE);
    113a:	a6 e2       	ldi	r26, 0x26	; 38
    113c:	b0 e0       	ldi	r27, 0x00	; 0
    113e:	e6 e2       	ldi	r30, 0x26	; 38
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	80 81       	ld	r24, Z
    1144:	87 7f       	andi	r24, 0xF7	; 247
    1146:	8c 93       	st	X, r24
    1148:	54 c0       	rjmp	.+168    	; 0x11f2 <__vector_16+0x10c>
	}
	else if(ADC_u8ISRSourse == CHAIN_ASYNCH)
    114a:	80 91 3c 02 	lds	r24, 0x023C
    114e:	81 30       	cpi	r24, 0x01	; 1
    1150:	09 f0       	breq	.+2      	; 0x1154 <__vector_16+0x6e>
    1152:	4f c0       	rjmp	.+158    	; 0x11f2 <__vector_16+0x10c>
	{
		/* Read ADC Result */
#if   NO_OF_BITS == _8_BITS
		ADC_pu16ChainResultArr[ADC_u8ChainConversionIndex] = ADCH;
#elif NO_OF_BITS == _10_BITS
		ADC_pu16ChainResultArr[ADC_u8ChainConversionIndex] =  ADC;
    1154:	20 91 39 02 	lds	r18, 0x0239
    1158:	30 91 3a 02 	lds	r19, 0x023A
    115c:	80 91 3b 02 	lds	r24, 0x023B
    1160:	88 2f       	mov	r24, r24
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	88 0f       	add	r24, r24
    1166:	99 1f       	adc	r25, r25
    1168:	d9 01       	movw	r26, r18
    116a:	a8 0f       	add	r26, r24
    116c:	b9 1f       	adc	r27, r25
    116e:	e4 e2       	ldi	r30, 0x24	; 36
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	80 81       	ld	r24, Z
    1174:	91 81       	ldd	r25, Z+1	; 0x01
    1176:	11 96       	adiw	r26, 0x01	; 1
    1178:	9c 93       	st	X, r25
    117a:	8e 93       	st	-X, r24
#endif
		/* Increment chain index */
		ADC_u8ChainConversionIndex ++;
    117c:	80 91 3b 02 	lds	r24, 0x023B
    1180:	8f 5f       	subi	r24, 0xFF	; 255
    1182:	80 93 3b 02 	sts	0x023B, r24

		/* check chain is finished or not */
		if(ADC_u8ChainConversionIndex == ADC_u8ChainSize)
    1186:	90 91 3b 02 	lds	r25, 0x023B
    118a:	80 91 3d 02 	lds	r24, 0x023D
    118e:	98 17       	cp	r25, r24
    1190:	79 f4       	brne	.+30     	; 0x11b0 <__vector_16+0xca>
		{
			/* Chain is finished*/
			/* Make ADC state be IDLE because it finished*/
			ADC_u8BusyState = IDLE;
    1192:	10 92 36 02 	sts	0x0236, r1

			/* Invoke the callback notification function */
			ADC_pvCallBackNotificationFunc();
    1196:	e0 91 34 02 	lds	r30, 0x0234
    119a:	f0 91 35 02 	lds	r31, 0x0235
    119e:	09 95       	icall

			/* Disable ADC Conversion complete interrupt */
			CLR_BIT(ADCSRA,ADCSRA_ADIE);
    11a0:	a6 e2       	ldi	r26, 0x26	; 38
    11a2:	b0 e0       	ldi	r27, 0x00	; 0
    11a4:	e6 e2       	ldi	r30, 0x26	; 38
    11a6:	f0 e0       	ldi	r31, 0x00	; 0
    11a8:	80 81       	ld	r24, Z
    11aa:	87 7f       	andi	r24, 0xF7	; 247
    11ac:	8c 93       	st	X, r24
    11ae:	21 c0       	rjmp	.+66     	; 0x11f2 <__vector_16+0x10c>
		else
		{
			/* Chain is not finished*/
			/*Set next channel
			 *  Start Conversion of next Channel */
			ADMUX &= ADC_SELEC_CHANNEL_MASK; 	                              /* Clear the MUX bits in ADMUX register*/
    11b0:	a7 e2       	ldi	r26, 0x27	; 39
    11b2:	b0 e0       	ldi	r27, 0x00	; 0
    11b4:	e7 e2       	ldi	r30, 0x27	; 39
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	80 81       	ld	r24, Z
    11ba:	80 7e       	andi	r24, 0xE0	; 224
    11bc:	8c 93       	st	X, r24
			ADMUX |= ADC_pu8ChainChannelArr[ADC_u8ChainConversionIndex] ;      /*Set the required channel into the MUX bits
    11be:	a7 e2       	ldi	r26, 0x27	; 39
    11c0:	b0 e0       	ldi	r27, 0x00	; 0
    11c2:	e7 e2       	ldi	r30, 0x27	; 39
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	40 81       	ld	r20, Z
    11c8:	20 91 37 02 	lds	r18, 0x0237
    11cc:	30 91 38 02 	lds	r19, 0x0238
    11d0:	80 91 3b 02 	lds	r24, 0x023B
    11d4:	88 2f       	mov	r24, r24
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	f9 01       	movw	r30, r18
    11da:	e8 0f       	add	r30, r24
    11dc:	f9 1f       	adc	r31, r25
    11de:	80 81       	ld	r24, Z
    11e0:	84 2b       	or	r24, r20
    11e2:	8c 93       	st	X, r24
						                                                          ADC_u8ChainConversionIndex ++ */
			/* Start Conversion */
			SET_BIT(ADCSRA,ADCSRA_ADSC);
    11e4:	a6 e2       	ldi	r26, 0x26	; 38
    11e6:	b0 e0       	ldi	r27, 0x00	; 0
    11e8:	e6 e2       	ldi	r30, 0x26	; 38
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	80 81       	ld	r24, Z
    11ee:	80 64       	ori	r24, 0x40	; 64
    11f0:	8c 93       	st	X, r24


	}


}
    11f2:	cf 91       	pop	r28
    11f4:	df 91       	pop	r29
    11f6:	ff 91       	pop	r31
    11f8:	ef 91       	pop	r30
    11fa:	bf 91       	pop	r27
    11fc:	af 91       	pop	r26
    11fe:	9f 91       	pop	r25
    1200:	8f 91       	pop	r24
    1202:	7f 91       	pop	r23
    1204:	6f 91       	pop	r22
    1206:	5f 91       	pop	r21
    1208:	4f 91       	pop	r20
    120a:	3f 91       	pop	r19
    120c:	2f 91       	pop	r18
    120e:	0f 90       	pop	r0
    1210:	0f be       	out	0x3f, r0	; 63
    1212:	0f 90       	pop	r0
    1214:	1f 90       	pop	r1
    1216:	18 95       	reti

00001218 <C_LCD_voidSendCommand>:

#include "CLCD_private.h"


void C_LCD_voidSendCommand(u8 Copy_u8Command)
{
    1218:	1f 93       	push	r17
    121a:	df 93       	push	r29
    121c:	cf 93       	push	r28
    121e:	cd b7       	in	r28, 0x3d	; 61
    1220:	de b7       	in	r29, 0x3e	; 62
    1222:	ea 97       	sbiw	r28, 0x3a	; 58
    1224:	0f b6       	in	r0, 0x3f	; 63
    1226:	f8 94       	cli
    1228:	de bf       	out	0x3e, r29	; 62
    122a:	0f be       	out	0x3f, r0	; 63
    122c:	cd bf       	out	0x3d, r28	; 61
    122e:	8a af       	std	Y+58, r24	; 0x3a
	/*Set RS Pin to low to send command */
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_LOW);
    1230:	82 e0       	ldi	r24, 0x02	; 2
    1232:	62 e0       	ldi	r22, 0x02	; 2
    1234:	40 e0       	ldi	r20, 0x00	; 0
    1236:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <DIO_u8SetPinValue>
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);

#elif   MODE_SELECT ==_4_BIT_MODE

	u8 Local_u8Command = (((Copy_u8Command ) & CLCD_COMMAND_MASK) | DIO_u8AndWithPort(CLCD_DATA_PORT, CLCD_DATA_PORT_MASK));
    123a:	8a ad       	ldd	r24, Y+58	; 0x3a
    123c:	18 2f       	mov	r17, r24
    123e:	10 7f       	andi	r17, 0xF0	; 240
    1240:	82 e0       	ldi	r24, 0x02	; 2
    1242:	6f e0       	ldi	r22, 0x0F	; 15
    1244:	0e 94 ab 11 	call	0x2356	; 0x2356 <DIO_u8AndWithPort>
    1248:	81 2b       	or	r24, r17
    124a:	89 af       	std	Y+57, r24	; 0x39
	/* Set Command to data pins */
	DIO_u8SetPortValue(CLCD_DATA_PORT,Local_u8Command);
    124c:	82 e0       	ldi	r24, 0x02	; 2
    124e:	69 ad       	ldd	r22, Y+57	; 0x39
    1250:	0e 94 c5 10 	call	0x218a	; 0x218a <DIO_u8SetPortValue>

	/*Send Enable pulse */
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    1254:	82 e0       	ldi	r24, 0x02	; 2
    1256:	63 e0       	ldi	r22, 0x03	; 3
    1258:	41 e0       	ldi	r20, 0x01	; 1
    125a:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <DIO_u8SetPinValue>
    125e:	80 e0       	ldi	r24, 0x00	; 0
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	a0 e0       	ldi	r26, 0x00	; 0
    1264:	b0 e4       	ldi	r27, 0x40	; 64
    1266:	8d ab       	std	Y+53, r24	; 0x35
    1268:	9e ab       	std	Y+54, r25	; 0x36
    126a:	af ab       	std	Y+55, r26	; 0x37
    126c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    126e:	6d a9       	ldd	r22, Y+53	; 0x35
    1270:	7e a9       	ldd	r23, Y+54	; 0x36
    1272:	8f a9       	ldd	r24, Y+55	; 0x37
    1274:	98 ad       	ldd	r25, Y+56	; 0x38
    1276:	20 e0       	ldi	r18, 0x00	; 0
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	4a ef       	ldi	r20, 0xFA	; 250
    127c:	54 e4       	ldi	r21, 0x44	; 68
    127e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1282:	dc 01       	movw	r26, r24
    1284:	cb 01       	movw	r24, r22
    1286:	89 ab       	std	Y+49, r24	; 0x31
    1288:	9a ab       	std	Y+50, r25	; 0x32
    128a:	ab ab       	std	Y+51, r26	; 0x33
    128c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    128e:	69 a9       	ldd	r22, Y+49	; 0x31
    1290:	7a a9       	ldd	r23, Y+50	; 0x32
    1292:	8b a9       	ldd	r24, Y+51	; 0x33
    1294:	9c a9       	ldd	r25, Y+52	; 0x34
    1296:	20 e0       	ldi	r18, 0x00	; 0
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	40 e8       	ldi	r20, 0x80	; 128
    129c:	5f e3       	ldi	r21, 0x3F	; 63
    129e:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    12a2:	88 23       	and	r24, r24
    12a4:	2c f4       	brge	.+10     	; 0x12b0 <C_LCD_voidSendCommand+0x98>
		__ticks = 1;
    12a6:	81 e0       	ldi	r24, 0x01	; 1
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	98 ab       	std	Y+48, r25	; 0x30
    12ac:	8f a7       	std	Y+47, r24	; 0x2f
    12ae:	3f c0       	rjmp	.+126    	; 0x132e <C_LCD_voidSendCommand+0x116>
	else if (__tmp > 65535)
    12b0:	69 a9       	ldd	r22, Y+49	; 0x31
    12b2:	7a a9       	ldd	r23, Y+50	; 0x32
    12b4:	8b a9       	ldd	r24, Y+51	; 0x33
    12b6:	9c a9       	ldd	r25, Y+52	; 0x34
    12b8:	20 e0       	ldi	r18, 0x00	; 0
    12ba:	3f ef       	ldi	r19, 0xFF	; 255
    12bc:	4f e7       	ldi	r20, 0x7F	; 127
    12be:	57 e4       	ldi	r21, 0x47	; 71
    12c0:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    12c4:	18 16       	cp	r1, r24
    12c6:	4c f5       	brge	.+82     	; 0x131a <C_LCD_voidSendCommand+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12c8:	6d a9       	ldd	r22, Y+53	; 0x35
    12ca:	7e a9       	ldd	r23, Y+54	; 0x36
    12cc:	8f a9       	ldd	r24, Y+55	; 0x37
    12ce:	98 ad       	ldd	r25, Y+56	; 0x38
    12d0:	20 e0       	ldi	r18, 0x00	; 0
    12d2:	30 e0       	ldi	r19, 0x00	; 0
    12d4:	40 e2       	ldi	r20, 0x20	; 32
    12d6:	51 e4       	ldi	r21, 0x41	; 65
    12d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12dc:	dc 01       	movw	r26, r24
    12de:	cb 01       	movw	r24, r22
    12e0:	bc 01       	movw	r22, r24
    12e2:	cd 01       	movw	r24, r26
    12e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12e8:	dc 01       	movw	r26, r24
    12ea:	cb 01       	movw	r24, r22
    12ec:	98 ab       	std	Y+48, r25	; 0x30
    12ee:	8f a7       	std	Y+47, r24	; 0x2f
    12f0:	0f c0       	rjmp	.+30     	; 0x1310 <C_LCD_voidSendCommand+0xf8>
    12f2:	88 ec       	ldi	r24, 0xC8	; 200
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	9e a7       	std	Y+46, r25	; 0x2e
    12f8:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    12fa:	8d a5       	ldd	r24, Y+45	; 0x2d
    12fc:	9e a5       	ldd	r25, Y+46	; 0x2e
    12fe:	01 97       	sbiw	r24, 0x01	; 1
    1300:	f1 f7       	brne	.-4      	; 0x12fe <C_LCD_voidSendCommand+0xe6>
    1302:	9e a7       	std	Y+46, r25	; 0x2e
    1304:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1306:	8f a5       	ldd	r24, Y+47	; 0x2f
    1308:	98 a9       	ldd	r25, Y+48	; 0x30
    130a:	01 97       	sbiw	r24, 0x01	; 1
    130c:	98 ab       	std	Y+48, r25	; 0x30
    130e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1310:	8f a5       	ldd	r24, Y+47	; 0x2f
    1312:	98 a9       	ldd	r25, Y+48	; 0x30
    1314:	00 97       	sbiw	r24, 0x00	; 0
    1316:	69 f7       	brne	.-38     	; 0x12f2 <C_LCD_voidSendCommand+0xda>
    1318:	14 c0       	rjmp	.+40     	; 0x1342 <C_LCD_voidSendCommand+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    131a:	69 a9       	ldd	r22, Y+49	; 0x31
    131c:	7a a9       	ldd	r23, Y+50	; 0x32
    131e:	8b a9       	ldd	r24, Y+51	; 0x33
    1320:	9c a9       	ldd	r25, Y+52	; 0x34
    1322:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1326:	dc 01       	movw	r26, r24
    1328:	cb 01       	movw	r24, r22
    132a:	98 ab       	std	Y+48, r25	; 0x30
    132c:	8f a7       	std	Y+47, r24	; 0x2f
    132e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1330:	98 a9       	ldd	r25, Y+48	; 0x30
    1332:	9c a7       	std	Y+44, r25	; 0x2c
    1334:	8b a7       	std	Y+43, r24	; 0x2b
    1336:	8b a5       	ldd	r24, Y+43	; 0x2b
    1338:	9c a5       	ldd	r25, Y+44	; 0x2c
    133a:	01 97       	sbiw	r24, 0x01	; 1
    133c:	f1 f7       	brne	.-4      	; 0x133a <C_LCD_voidSendCommand+0x122>
    133e:	9c a7       	std	Y+44, r25	; 0x2c
    1340:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    1342:	82 e0       	ldi	r24, 0x02	; 2
    1344:	63 e0       	ldi	r22, 0x03	; 3
    1346:	40 e0       	ldi	r20, 0x00	; 0
    1348:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <DIO_u8SetPinValue>
    134c:	80 e0       	ldi	r24, 0x00	; 0
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	a0 ea       	ldi	r26, 0xA0	; 160
    1352:	b0 e4       	ldi	r27, 0x40	; 64
    1354:	8f a3       	std	Y+39, r24	; 0x27
    1356:	98 a7       	std	Y+40, r25	; 0x28
    1358:	a9 a7       	std	Y+41, r26	; 0x29
    135a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    135c:	6f a1       	ldd	r22, Y+39	; 0x27
    135e:	78 a5       	ldd	r23, Y+40	; 0x28
    1360:	89 a5       	ldd	r24, Y+41	; 0x29
    1362:	9a a5       	ldd	r25, Y+42	; 0x2a
    1364:	20 e0       	ldi	r18, 0x00	; 0
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	4a ef       	ldi	r20, 0xFA	; 250
    136a:	54 e4       	ldi	r21, 0x44	; 68
    136c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1370:	dc 01       	movw	r26, r24
    1372:	cb 01       	movw	r24, r22
    1374:	8b a3       	std	Y+35, r24	; 0x23
    1376:	9c a3       	std	Y+36, r25	; 0x24
    1378:	ad a3       	std	Y+37, r26	; 0x25
    137a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    137c:	6b a1       	ldd	r22, Y+35	; 0x23
    137e:	7c a1       	ldd	r23, Y+36	; 0x24
    1380:	8d a1       	ldd	r24, Y+37	; 0x25
    1382:	9e a1       	ldd	r25, Y+38	; 0x26
    1384:	20 e0       	ldi	r18, 0x00	; 0
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	40 e8       	ldi	r20, 0x80	; 128
    138a:	5f e3       	ldi	r21, 0x3F	; 63
    138c:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    1390:	88 23       	and	r24, r24
    1392:	2c f4       	brge	.+10     	; 0x139e <C_LCD_voidSendCommand+0x186>
		__ticks = 1;
    1394:	81 e0       	ldi	r24, 0x01	; 1
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	9a a3       	std	Y+34, r25	; 0x22
    139a:	89 a3       	std	Y+33, r24	; 0x21
    139c:	3f c0       	rjmp	.+126    	; 0x141c <C_LCD_voidSendCommand+0x204>
	else if (__tmp > 65535)
    139e:	6b a1       	ldd	r22, Y+35	; 0x23
    13a0:	7c a1       	ldd	r23, Y+36	; 0x24
    13a2:	8d a1       	ldd	r24, Y+37	; 0x25
    13a4:	9e a1       	ldd	r25, Y+38	; 0x26
    13a6:	20 e0       	ldi	r18, 0x00	; 0
    13a8:	3f ef       	ldi	r19, 0xFF	; 255
    13aa:	4f e7       	ldi	r20, 0x7F	; 127
    13ac:	57 e4       	ldi	r21, 0x47	; 71
    13ae:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    13b2:	18 16       	cp	r1, r24
    13b4:	4c f5       	brge	.+82     	; 0x1408 <C_LCD_voidSendCommand+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13b6:	6f a1       	ldd	r22, Y+39	; 0x27
    13b8:	78 a5       	ldd	r23, Y+40	; 0x28
    13ba:	89 a5       	ldd	r24, Y+41	; 0x29
    13bc:	9a a5       	ldd	r25, Y+42	; 0x2a
    13be:	20 e0       	ldi	r18, 0x00	; 0
    13c0:	30 e0       	ldi	r19, 0x00	; 0
    13c2:	40 e2       	ldi	r20, 0x20	; 32
    13c4:	51 e4       	ldi	r21, 0x41	; 65
    13c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13ca:	dc 01       	movw	r26, r24
    13cc:	cb 01       	movw	r24, r22
    13ce:	bc 01       	movw	r22, r24
    13d0:	cd 01       	movw	r24, r26
    13d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13d6:	dc 01       	movw	r26, r24
    13d8:	cb 01       	movw	r24, r22
    13da:	9a a3       	std	Y+34, r25	; 0x22
    13dc:	89 a3       	std	Y+33, r24	; 0x21
    13de:	0f c0       	rjmp	.+30     	; 0x13fe <C_LCD_voidSendCommand+0x1e6>
    13e0:	88 ec       	ldi	r24, 0xC8	; 200
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	98 a3       	std	Y+32, r25	; 0x20
    13e6:	8f 8f       	std	Y+31, r24	; 0x1f
    13e8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    13ea:	98 a1       	ldd	r25, Y+32	; 0x20
    13ec:	01 97       	sbiw	r24, 0x01	; 1
    13ee:	f1 f7       	brne	.-4      	; 0x13ec <C_LCD_voidSendCommand+0x1d4>
    13f0:	98 a3       	std	Y+32, r25	; 0x20
    13f2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13f4:	89 a1       	ldd	r24, Y+33	; 0x21
    13f6:	9a a1       	ldd	r25, Y+34	; 0x22
    13f8:	01 97       	sbiw	r24, 0x01	; 1
    13fa:	9a a3       	std	Y+34, r25	; 0x22
    13fc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13fe:	89 a1       	ldd	r24, Y+33	; 0x21
    1400:	9a a1       	ldd	r25, Y+34	; 0x22
    1402:	00 97       	sbiw	r24, 0x00	; 0
    1404:	69 f7       	brne	.-38     	; 0x13e0 <C_LCD_voidSendCommand+0x1c8>
    1406:	14 c0       	rjmp	.+40     	; 0x1430 <C_LCD_voidSendCommand+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1408:	6b a1       	ldd	r22, Y+35	; 0x23
    140a:	7c a1       	ldd	r23, Y+36	; 0x24
    140c:	8d a1       	ldd	r24, Y+37	; 0x25
    140e:	9e a1       	ldd	r25, Y+38	; 0x26
    1410:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1414:	dc 01       	movw	r26, r24
    1416:	cb 01       	movw	r24, r22
    1418:	9a a3       	std	Y+34, r25	; 0x22
    141a:	89 a3       	std	Y+33, r24	; 0x21
    141c:	89 a1       	ldd	r24, Y+33	; 0x21
    141e:	9a a1       	ldd	r25, Y+34	; 0x22
    1420:	9e 8f       	std	Y+30, r25	; 0x1e
    1422:	8d 8f       	std	Y+29, r24	; 0x1d
    1424:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1426:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1428:	01 97       	sbiw	r24, 0x01	; 1
    142a:	f1 f7       	brne	.-4      	; 0x1428 <C_LCD_voidSendCommand+0x210>
    142c:	9e 8f       	std	Y+30, r25	; 0x1e
    142e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);

	Local_u8Command = ((Copy_u8Command <<4) |DIO_u8AndWithPort(CLCD_DATA_PORT, CLCD_DATA_PORT_MASK));
    1430:	8a ad       	ldd	r24, Y+58	; 0x3a
    1432:	88 2f       	mov	r24, r24
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	82 95       	swap	r24
    1438:	92 95       	swap	r25
    143a:	90 7f       	andi	r25, 0xF0	; 240
    143c:	98 27       	eor	r25, r24
    143e:	80 7f       	andi	r24, 0xF0	; 240
    1440:	98 27       	eor	r25, r24
    1442:	18 2f       	mov	r17, r24
    1444:	82 e0       	ldi	r24, 0x02	; 2
    1446:	6f e0       	ldi	r22, 0x0F	; 15
    1448:	0e 94 ab 11 	call	0x2356	; 0x2356 <DIO_u8AndWithPort>
    144c:	81 2b       	or	r24, r17
    144e:	89 af       	std	Y+57, r24	; 0x39
	DIO_u8SetPortValue(CLCD_DATA_PORT,Local_u8Command);
    1450:	82 e0       	ldi	r24, 0x02	; 2
    1452:	69 ad       	ldd	r22, Y+57	; 0x39
    1454:	0e 94 c5 10 	call	0x218a	; 0x218a <DIO_u8SetPortValue>

	/*Send Enable pulse */
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    1458:	82 e0       	ldi	r24, 0x02	; 2
    145a:	63 e0       	ldi	r22, 0x03	; 3
    145c:	41 e0       	ldi	r20, 0x01	; 1
    145e:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <DIO_u8SetPinValue>
    1462:	80 e0       	ldi	r24, 0x00	; 0
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	a0 e0       	ldi	r26, 0x00	; 0
    1468:	b0 e4       	ldi	r27, 0x40	; 64
    146a:	89 8f       	std	Y+25, r24	; 0x19
    146c:	9a 8f       	std	Y+26, r25	; 0x1a
    146e:	ab 8f       	std	Y+27, r26	; 0x1b
    1470:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1472:	69 8d       	ldd	r22, Y+25	; 0x19
    1474:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1476:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1478:	9c 8d       	ldd	r25, Y+28	; 0x1c
    147a:	20 e0       	ldi	r18, 0x00	; 0
    147c:	30 e0       	ldi	r19, 0x00	; 0
    147e:	4a ef       	ldi	r20, 0xFA	; 250
    1480:	54 e4       	ldi	r21, 0x44	; 68
    1482:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1486:	dc 01       	movw	r26, r24
    1488:	cb 01       	movw	r24, r22
    148a:	8d 8b       	std	Y+21, r24	; 0x15
    148c:	9e 8b       	std	Y+22, r25	; 0x16
    148e:	af 8b       	std	Y+23, r26	; 0x17
    1490:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1492:	6d 89       	ldd	r22, Y+21	; 0x15
    1494:	7e 89       	ldd	r23, Y+22	; 0x16
    1496:	8f 89       	ldd	r24, Y+23	; 0x17
    1498:	98 8d       	ldd	r25, Y+24	; 0x18
    149a:	20 e0       	ldi	r18, 0x00	; 0
    149c:	30 e0       	ldi	r19, 0x00	; 0
    149e:	40 e8       	ldi	r20, 0x80	; 128
    14a0:	5f e3       	ldi	r21, 0x3F	; 63
    14a2:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    14a6:	88 23       	and	r24, r24
    14a8:	2c f4       	brge	.+10     	; 0x14b4 <C_LCD_voidSendCommand+0x29c>
		__ticks = 1;
    14aa:	81 e0       	ldi	r24, 0x01	; 1
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	9c 8b       	std	Y+20, r25	; 0x14
    14b0:	8b 8b       	std	Y+19, r24	; 0x13
    14b2:	3f c0       	rjmp	.+126    	; 0x1532 <C_LCD_voidSendCommand+0x31a>
	else if (__tmp > 65535)
    14b4:	6d 89       	ldd	r22, Y+21	; 0x15
    14b6:	7e 89       	ldd	r23, Y+22	; 0x16
    14b8:	8f 89       	ldd	r24, Y+23	; 0x17
    14ba:	98 8d       	ldd	r25, Y+24	; 0x18
    14bc:	20 e0       	ldi	r18, 0x00	; 0
    14be:	3f ef       	ldi	r19, 0xFF	; 255
    14c0:	4f e7       	ldi	r20, 0x7F	; 127
    14c2:	57 e4       	ldi	r21, 0x47	; 71
    14c4:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    14c8:	18 16       	cp	r1, r24
    14ca:	4c f5       	brge	.+82     	; 0x151e <C_LCD_voidSendCommand+0x306>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14cc:	69 8d       	ldd	r22, Y+25	; 0x19
    14ce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14d0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14d2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14d4:	20 e0       	ldi	r18, 0x00	; 0
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	40 e2       	ldi	r20, 0x20	; 32
    14da:	51 e4       	ldi	r21, 0x41	; 65
    14dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14e0:	dc 01       	movw	r26, r24
    14e2:	cb 01       	movw	r24, r22
    14e4:	bc 01       	movw	r22, r24
    14e6:	cd 01       	movw	r24, r26
    14e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14ec:	dc 01       	movw	r26, r24
    14ee:	cb 01       	movw	r24, r22
    14f0:	9c 8b       	std	Y+20, r25	; 0x14
    14f2:	8b 8b       	std	Y+19, r24	; 0x13
    14f4:	0f c0       	rjmp	.+30     	; 0x1514 <C_LCD_voidSendCommand+0x2fc>
    14f6:	88 ec       	ldi	r24, 0xC8	; 200
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	9a 8b       	std	Y+18, r25	; 0x12
    14fc:	89 8b       	std	Y+17, r24	; 0x11
    14fe:	89 89       	ldd	r24, Y+17	; 0x11
    1500:	9a 89       	ldd	r25, Y+18	; 0x12
    1502:	01 97       	sbiw	r24, 0x01	; 1
    1504:	f1 f7       	brne	.-4      	; 0x1502 <C_LCD_voidSendCommand+0x2ea>
    1506:	9a 8b       	std	Y+18, r25	; 0x12
    1508:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    150a:	8b 89       	ldd	r24, Y+19	; 0x13
    150c:	9c 89       	ldd	r25, Y+20	; 0x14
    150e:	01 97       	sbiw	r24, 0x01	; 1
    1510:	9c 8b       	std	Y+20, r25	; 0x14
    1512:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1514:	8b 89       	ldd	r24, Y+19	; 0x13
    1516:	9c 89       	ldd	r25, Y+20	; 0x14
    1518:	00 97       	sbiw	r24, 0x00	; 0
    151a:	69 f7       	brne	.-38     	; 0x14f6 <C_LCD_voidSendCommand+0x2de>
    151c:	14 c0       	rjmp	.+40     	; 0x1546 <C_LCD_voidSendCommand+0x32e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    151e:	6d 89       	ldd	r22, Y+21	; 0x15
    1520:	7e 89       	ldd	r23, Y+22	; 0x16
    1522:	8f 89       	ldd	r24, Y+23	; 0x17
    1524:	98 8d       	ldd	r25, Y+24	; 0x18
    1526:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    152a:	dc 01       	movw	r26, r24
    152c:	cb 01       	movw	r24, r22
    152e:	9c 8b       	std	Y+20, r25	; 0x14
    1530:	8b 8b       	std	Y+19, r24	; 0x13
    1532:	8b 89       	ldd	r24, Y+19	; 0x13
    1534:	9c 89       	ldd	r25, Y+20	; 0x14
    1536:	98 8b       	std	Y+16, r25	; 0x10
    1538:	8f 87       	std	Y+15, r24	; 0x0f
    153a:	8f 85       	ldd	r24, Y+15	; 0x0f
    153c:	98 89       	ldd	r25, Y+16	; 0x10
    153e:	01 97       	sbiw	r24, 0x01	; 1
    1540:	f1 f7       	brne	.-4      	; 0x153e <C_LCD_voidSendCommand+0x326>
    1542:	98 8b       	std	Y+16, r25	; 0x10
    1544:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    1546:	82 e0       	ldi	r24, 0x02	; 2
    1548:	63 e0       	ldi	r22, 0x03	; 3
    154a:	40 e0       	ldi	r20, 0x00	; 0
    154c:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <DIO_u8SetPinValue>
    1550:	80 e0       	ldi	r24, 0x00	; 0
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	a0 ea       	ldi	r26, 0xA0	; 160
    1556:	b0 e4       	ldi	r27, 0x40	; 64
    1558:	8b 87       	std	Y+11, r24	; 0x0b
    155a:	9c 87       	std	Y+12, r25	; 0x0c
    155c:	ad 87       	std	Y+13, r26	; 0x0d
    155e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1560:	6b 85       	ldd	r22, Y+11	; 0x0b
    1562:	7c 85       	ldd	r23, Y+12	; 0x0c
    1564:	8d 85       	ldd	r24, Y+13	; 0x0d
    1566:	9e 85       	ldd	r25, Y+14	; 0x0e
    1568:	20 e0       	ldi	r18, 0x00	; 0
    156a:	30 e0       	ldi	r19, 0x00	; 0
    156c:	4a ef       	ldi	r20, 0xFA	; 250
    156e:	54 e4       	ldi	r21, 0x44	; 68
    1570:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1574:	dc 01       	movw	r26, r24
    1576:	cb 01       	movw	r24, r22
    1578:	8f 83       	std	Y+7, r24	; 0x07
    157a:	98 87       	std	Y+8, r25	; 0x08
    157c:	a9 87       	std	Y+9, r26	; 0x09
    157e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1580:	6f 81       	ldd	r22, Y+7	; 0x07
    1582:	78 85       	ldd	r23, Y+8	; 0x08
    1584:	89 85       	ldd	r24, Y+9	; 0x09
    1586:	9a 85       	ldd	r25, Y+10	; 0x0a
    1588:	20 e0       	ldi	r18, 0x00	; 0
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	40 e8       	ldi	r20, 0x80	; 128
    158e:	5f e3       	ldi	r21, 0x3F	; 63
    1590:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    1594:	88 23       	and	r24, r24
    1596:	2c f4       	brge	.+10     	; 0x15a2 <C_LCD_voidSendCommand+0x38a>
		__ticks = 1;
    1598:	81 e0       	ldi	r24, 0x01	; 1
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	9e 83       	std	Y+6, r25	; 0x06
    159e:	8d 83       	std	Y+5, r24	; 0x05
    15a0:	3f c0       	rjmp	.+126    	; 0x1620 <C_LCD_voidSendCommand+0x408>
	else if (__tmp > 65535)
    15a2:	6f 81       	ldd	r22, Y+7	; 0x07
    15a4:	78 85       	ldd	r23, Y+8	; 0x08
    15a6:	89 85       	ldd	r24, Y+9	; 0x09
    15a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    15aa:	20 e0       	ldi	r18, 0x00	; 0
    15ac:	3f ef       	ldi	r19, 0xFF	; 255
    15ae:	4f e7       	ldi	r20, 0x7F	; 127
    15b0:	57 e4       	ldi	r21, 0x47	; 71
    15b2:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    15b6:	18 16       	cp	r1, r24
    15b8:	4c f5       	brge	.+82     	; 0x160c <C_LCD_voidSendCommand+0x3f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    15bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    15be:	8d 85       	ldd	r24, Y+13	; 0x0d
    15c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    15c2:	20 e0       	ldi	r18, 0x00	; 0
    15c4:	30 e0       	ldi	r19, 0x00	; 0
    15c6:	40 e2       	ldi	r20, 0x20	; 32
    15c8:	51 e4       	ldi	r21, 0x41	; 65
    15ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15ce:	dc 01       	movw	r26, r24
    15d0:	cb 01       	movw	r24, r22
    15d2:	bc 01       	movw	r22, r24
    15d4:	cd 01       	movw	r24, r26
    15d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15da:	dc 01       	movw	r26, r24
    15dc:	cb 01       	movw	r24, r22
    15de:	9e 83       	std	Y+6, r25	; 0x06
    15e0:	8d 83       	std	Y+5, r24	; 0x05
    15e2:	0f c0       	rjmp	.+30     	; 0x1602 <C_LCD_voidSendCommand+0x3ea>
    15e4:	88 ec       	ldi	r24, 0xC8	; 200
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	9c 83       	std	Y+4, r25	; 0x04
    15ea:	8b 83       	std	Y+3, r24	; 0x03
    15ec:	8b 81       	ldd	r24, Y+3	; 0x03
    15ee:	9c 81       	ldd	r25, Y+4	; 0x04
    15f0:	01 97       	sbiw	r24, 0x01	; 1
    15f2:	f1 f7       	brne	.-4      	; 0x15f0 <C_LCD_voidSendCommand+0x3d8>
    15f4:	9c 83       	std	Y+4, r25	; 0x04
    15f6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15f8:	8d 81       	ldd	r24, Y+5	; 0x05
    15fa:	9e 81       	ldd	r25, Y+6	; 0x06
    15fc:	01 97       	sbiw	r24, 0x01	; 1
    15fe:	9e 83       	std	Y+6, r25	; 0x06
    1600:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1602:	8d 81       	ldd	r24, Y+5	; 0x05
    1604:	9e 81       	ldd	r25, Y+6	; 0x06
    1606:	00 97       	sbiw	r24, 0x00	; 0
    1608:	69 f7       	brne	.-38     	; 0x15e4 <C_LCD_voidSendCommand+0x3cc>
    160a:	14 c0       	rjmp	.+40     	; 0x1634 <C_LCD_voidSendCommand+0x41c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    160c:	6f 81       	ldd	r22, Y+7	; 0x07
    160e:	78 85       	ldd	r23, Y+8	; 0x08
    1610:	89 85       	ldd	r24, Y+9	; 0x09
    1612:	9a 85       	ldd	r25, Y+10	; 0x0a
    1614:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1618:	dc 01       	movw	r26, r24
    161a:	cb 01       	movw	r24, r22
    161c:	9e 83       	std	Y+6, r25	; 0x06
    161e:	8d 83       	std	Y+5, r24	; 0x05
    1620:	8d 81       	ldd	r24, Y+5	; 0x05
    1622:	9e 81       	ldd	r25, Y+6	; 0x06
    1624:	9a 83       	std	Y+2, r25	; 0x02
    1626:	89 83       	std	Y+1, r24	; 0x01
    1628:	89 81       	ldd	r24, Y+1	; 0x01
    162a:	9a 81       	ldd	r25, Y+2	; 0x02
    162c:	01 97       	sbiw	r24, 0x01	; 1
    162e:	f1 f7       	brne	.-4      	; 0x162c <C_LCD_voidSendCommand+0x414>
    1630:	9a 83       	std	Y+2, r25	; 0x02
    1632:	89 83       	std	Y+1, r24	; 0x01

#endif



}
    1634:	ea 96       	adiw	r28, 0x3a	; 58
    1636:	0f b6       	in	r0, 0x3f	; 63
    1638:	f8 94       	cli
    163a:	de bf       	out	0x3e, r29	; 62
    163c:	0f be       	out	0x3f, r0	; 63
    163e:	cd bf       	out	0x3d, r28	; 61
    1640:	cf 91       	pop	r28
    1642:	df 91       	pop	r29
    1644:	1f 91       	pop	r17
    1646:	08 95       	ret

00001648 <CLCD_voidSendData>:

void CLCD_voidSendData(u8 Copy_u8Data)
{
    1648:	1f 93       	push	r17
    164a:	df 93       	push	r29
    164c:	cf 93       	push	r28
    164e:	cd b7       	in	r28, 0x3d	; 61
    1650:	de b7       	in	r29, 0x3e	; 62
    1652:	ea 97       	sbiw	r28, 0x3a	; 58
    1654:	0f b6       	in	r0, 0x3f	; 63
    1656:	f8 94       	cli
    1658:	de bf       	out	0x3e, r29	; 62
    165a:	0f be       	out	0x3f, r0	; 63
    165c:	cd bf       	out	0x3d, r28	; 61
    165e:	8a af       	std	Y+58, r24	; 0x3a
	/*Set RS Pin to low to send data */
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_HIGH);
    1660:	82 e0       	ldi	r24, 0x02	; 2
    1662:	62 e0       	ldi	r22, 0x02	; 2
    1664:	41 e0       	ldi	r20, 0x01	; 1
    1666:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <DIO_u8SetPinValue>
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);

#elif   MODE_SELECT ==_4_BIT_MODE

	u8 Local_u8Data = (((Copy_u8Data) & CLCD_COMMAND_MASK) | DIO_u8AndWithPort(CLCD_DATA_PORT, CLCD_DATA_PORT_MASK));
    166a:	8a ad       	ldd	r24, Y+58	; 0x3a
    166c:	18 2f       	mov	r17, r24
    166e:	10 7f       	andi	r17, 0xF0	; 240
    1670:	82 e0       	ldi	r24, 0x02	; 2
    1672:	6f e0       	ldi	r22, 0x0F	; 15
    1674:	0e 94 ab 11 	call	0x2356	; 0x2356 <DIO_u8AndWithPort>
    1678:	81 2b       	or	r24, r17
    167a:	89 af       	std	Y+57, r24	; 0x39
	/* Set Command to data pins */
	DIO_u8SetPortValue(CLCD_DATA_PORT,Local_u8Data);
    167c:	82 e0       	ldi	r24, 0x02	; 2
    167e:	69 ad       	ldd	r22, Y+57	; 0x39
    1680:	0e 94 c5 10 	call	0x218a	; 0x218a <DIO_u8SetPortValue>

	/*Send Enable pulse */
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    1684:	82 e0       	ldi	r24, 0x02	; 2
    1686:	63 e0       	ldi	r22, 0x03	; 3
    1688:	41 e0       	ldi	r20, 0x01	; 1
    168a:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <DIO_u8SetPinValue>
    168e:	80 e0       	ldi	r24, 0x00	; 0
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	a0 e0       	ldi	r26, 0x00	; 0
    1694:	b0 e4       	ldi	r27, 0x40	; 64
    1696:	8d ab       	std	Y+53, r24	; 0x35
    1698:	9e ab       	std	Y+54, r25	; 0x36
    169a:	af ab       	std	Y+55, r26	; 0x37
    169c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    169e:	6d a9       	ldd	r22, Y+53	; 0x35
    16a0:	7e a9       	ldd	r23, Y+54	; 0x36
    16a2:	8f a9       	ldd	r24, Y+55	; 0x37
    16a4:	98 ad       	ldd	r25, Y+56	; 0x38
    16a6:	20 e0       	ldi	r18, 0x00	; 0
    16a8:	30 e0       	ldi	r19, 0x00	; 0
    16aa:	4a ef       	ldi	r20, 0xFA	; 250
    16ac:	54 e4       	ldi	r21, 0x44	; 68
    16ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16b2:	dc 01       	movw	r26, r24
    16b4:	cb 01       	movw	r24, r22
    16b6:	89 ab       	std	Y+49, r24	; 0x31
    16b8:	9a ab       	std	Y+50, r25	; 0x32
    16ba:	ab ab       	std	Y+51, r26	; 0x33
    16bc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    16be:	69 a9       	ldd	r22, Y+49	; 0x31
    16c0:	7a a9       	ldd	r23, Y+50	; 0x32
    16c2:	8b a9       	ldd	r24, Y+51	; 0x33
    16c4:	9c a9       	ldd	r25, Y+52	; 0x34
    16c6:	20 e0       	ldi	r18, 0x00	; 0
    16c8:	30 e0       	ldi	r19, 0x00	; 0
    16ca:	40 e8       	ldi	r20, 0x80	; 128
    16cc:	5f e3       	ldi	r21, 0x3F	; 63
    16ce:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    16d2:	88 23       	and	r24, r24
    16d4:	2c f4       	brge	.+10     	; 0x16e0 <CLCD_voidSendData+0x98>
		__ticks = 1;
    16d6:	81 e0       	ldi	r24, 0x01	; 1
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	98 ab       	std	Y+48, r25	; 0x30
    16dc:	8f a7       	std	Y+47, r24	; 0x2f
    16de:	3f c0       	rjmp	.+126    	; 0x175e <CLCD_voidSendData+0x116>
	else if (__tmp > 65535)
    16e0:	69 a9       	ldd	r22, Y+49	; 0x31
    16e2:	7a a9       	ldd	r23, Y+50	; 0x32
    16e4:	8b a9       	ldd	r24, Y+51	; 0x33
    16e6:	9c a9       	ldd	r25, Y+52	; 0x34
    16e8:	20 e0       	ldi	r18, 0x00	; 0
    16ea:	3f ef       	ldi	r19, 0xFF	; 255
    16ec:	4f e7       	ldi	r20, 0x7F	; 127
    16ee:	57 e4       	ldi	r21, 0x47	; 71
    16f0:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    16f4:	18 16       	cp	r1, r24
    16f6:	4c f5       	brge	.+82     	; 0x174a <CLCD_voidSendData+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16f8:	6d a9       	ldd	r22, Y+53	; 0x35
    16fa:	7e a9       	ldd	r23, Y+54	; 0x36
    16fc:	8f a9       	ldd	r24, Y+55	; 0x37
    16fe:	98 ad       	ldd	r25, Y+56	; 0x38
    1700:	20 e0       	ldi	r18, 0x00	; 0
    1702:	30 e0       	ldi	r19, 0x00	; 0
    1704:	40 e2       	ldi	r20, 0x20	; 32
    1706:	51 e4       	ldi	r21, 0x41	; 65
    1708:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    170c:	dc 01       	movw	r26, r24
    170e:	cb 01       	movw	r24, r22
    1710:	bc 01       	movw	r22, r24
    1712:	cd 01       	movw	r24, r26
    1714:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1718:	dc 01       	movw	r26, r24
    171a:	cb 01       	movw	r24, r22
    171c:	98 ab       	std	Y+48, r25	; 0x30
    171e:	8f a7       	std	Y+47, r24	; 0x2f
    1720:	0f c0       	rjmp	.+30     	; 0x1740 <CLCD_voidSendData+0xf8>
    1722:	88 ec       	ldi	r24, 0xC8	; 200
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	9e a7       	std	Y+46, r25	; 0x2e
    1728:	8d a7       	std	Y+45, r24	; 0x2d
    172a:	8d a5       	ldd	r24, Y+45	; 0x2d
    172c:	9e a5       	ldd	r25, Y+46	; 0x2e
    172e:	01 97       	sbiw	r24, 0x01	; 1
    1730:	f1 f7       	brne	.-4      	; 0x172e <CLCD_voidSendData+0xe6>
    1732:	9e a7       	std	Y+46, r25	; 0x2e
    1734:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1736:	8f a5       	ldd	r24, Y+47	; 0x2f
    1738:	98 a9       	ldd	r25, Y+48	; 0x30
    173a:	01 97       	sbiw	r24, 0x01	; 1
    173c:	98 ab       	std	Y+48, r25	; 0x30
    173e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1740:	8f a5       	ldd	r24, Y+47	; 0x2f
    1742:	98 a9       	ldd	r25, Y+48	; 0x30
    1744:	00 97       	sbiw	r24, 0x00	; 0
    1746:	69 f7       	brne	.-38     	; 0x1722 <CLCD_voidSendData+0xda>
    1748:	14 c0       	rjmp	.+40     	; 0x1772 <CLCD_voidSendData+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    174a:	69 a9       	ldd	r22, Y+49	; 0x31
    174c:	7a a9       	ldd	r23, Y+50	; 0x32
    174e:	8b a9       	ldd	r24, Y+51	; 0x33
    1750:	9c a9       	ldd	r25, Y+52	; 0x34
    1752:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1756:	dc 01       	movw	r26, r24
    1758:	cb 01       	movw	r24, r22
    175a:	98 ab       	std	Y+48, r25	; 0x30
    175c:	8f a7       	std	Y+47, r24	; 0x2f
    175e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1760:	98 a9       	ldd	r25, Y+48	; 0x30
    1762:	9c a7       	std	Y+44, r25	; 0x2c
    1764:	8b a7       	std	Y+43, r24	; 0x2b
    1766:	8b a5       	ldd	r24, Y+43	; 0x2b
    1768:	9c a5       	ldd	r25, Y+44	; 0x2c
    176a:	01 97       	sbiw	r24, 0x01	; 1
    176c:	f1 f7       	brne	.-4      	; 0x176a <CLCD_voidSendData+0x122>
    176e:	9c a7       	std	Y+44, r25	; 0x2c
    1770:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    1772:	82 e0       	ldi	r24, 0x02	; 2
    1774:	63 e0       	ldi	r22, 0x03	; 3
    1776:	40 e0       	ldi	r20, 0x00	; 0
    1778:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <DIO_u8SetPinValue>
    177c:	80 e0       	ldi	r24, 0x00	; 0
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	a0 ea       	ldi	r26, 0xA0	; 160
    1782:	b0 e4       	ldi	r27, 0x40	; 64
    1784:	8f a3       	std	Y+39, r24	; 0x27
    1786:	98 a7       	std	Y+40, r25	; 0x28
    1788:	a9 a7       	std	Y+41, r26	; 0x29
    178a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    178c:	6f a1       	ldd	r22, Y+39	; 0x27
    178e:	78 a5       	ldd	r23, Y+40	; 0x28
    1790:	89 a5       	ldd	r24, Y+41	; 0x29
    1792:	9a a5       	ldd	r25, Y+42	; 0x2a
    1794:	20 e0       	ldi	r18, 0x00	; 0
    1796:	30 e0       	ldi	r19, 0x00	; 0
    1798:	4a ef       	ldi	r20, 0xFA	; 250
    179a:	54 e4       	ldi	r21, 0x44	; 68
    179c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17a0:	dc 01       	movw	r26, r24
    17a2:	cb 01       	movw	r24, r22
    17a4:	8b a3       	std	Y+35, r24	; 0x23
    17a6:	9c a3       	std	Y+36, r25	; 0x24
    17a8:	ad a3       	std	Y+37, r26	; 0x25
    17aa:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    17ac:	6b a1       	ldd	r22, Y+35	; 0x23
    17ae:	7c a1       	ldd	r23, Y+36	; 0x24
    17b0:	8d a1       	ldd	r24, Y+37	; 0x25
    17b2:	9e a1       	ldd	r25, Y+38	; 0x26
    17b4:	20 e0       	ldi	r18, 0x00	; 0
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	40 e8       	ldi	r20, 0x80	; 128
    17ba:	5f e3       	ldi	r21, 0x3F	; 63
    17bc:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    17c0:	88 23       	and	r24, r24
    17c2:	2c f4       	brge	.+10     	; 0x17ce <CLCD_voidSendData+0x186>
		__ticks = 1;
    17c4:	81 e0       	ldi	r24, 0x01	; 1
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	9a a3       	std	Y+34, r25	; 0x22
    17ca:	89 a3       	std	Y+33, r24	; 0x21
    17cc:	3f c0       	rjmp	.+126    	; 0x184c <CLCD_voidSendData+0x204>
	else if (__tmp > 65535)
    17ce:	6b a1       	ldd	r22, Y+35	; 0x23
    17d0:	7c a1       	ldd	r23, Y+36	; 0x24
    17d2:	8d a1       	ldd	r24, Y+37	; 0x25
    17d4:	9e a1       	ldd	r25, Y+38	; 0x26
    17d6:	20 e0       	ldi	r18, 0x00	; 0
    17d8:	3f ef       	ldi	r19, 0xFF	; 255
    17da:	4f e7       	ldi	r20, 0x7F	; 127
    17dc:	57 e4       	ldi	r21, 0x47	; 71
    17de:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    17e2:	18 16       	cp	r1, r24
    17e4:	4c f5       	brge	.+82     	; 0x1838 <CLCD_voidSendData+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17e6:	6f a1       	ldd	r22, Y+39	; 0x27
    17e8:	78 a5       	ldd	r23, Y+40	; 0x28
    17ea:	89 a5       	ldd	r24, Y+41	; 0x29
    17ec:	9a a5       	ldd	r25, Y+42	; 0x2a
    17ee:	20 e0       	ldi	r18, 0x00	; 0
    17f0:	30 e0       	ldi	r19, 0x00	; 0
    17f2:	40 e2       	ldi	r20, 0x20	; 32
    17f4:	51 e4       	ldi	r21, 0x41	; 65
    17f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17fa:	dc 01       	movw	r26, r24
    17fc:	cb 01       	movw	r24, r22
    17fe:	bc 01       	movw	r22, r24
    1800:	cd 01       	movw	r24, r26
    1802:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1806:	dc 01       	movw	r26, r24
    1808:	cb 01       	movw	r24, r22
    180a:	9a a3       	std	Y+34, r25	; 0x22
    180c:	89 a3       	std	Y+33, r24	; 0x21
    180e:	0f c0       	rjmp	.+30     	; 0x182e <CLCD_voidSendData+0x1e6>
    1810:	88 ec       	ldi	r24, 0xC8	; 200
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	98 a3       	std	Y+32, r25	; 0x20
    1816:	8f 8f       	std	Y+31, r24	; 0x1f
    1818:	8f 8d       	ldd	r24, Y+31	; 0x1f
    181a:	98 a1       	ldd	r25, Y+32	; 0x20
    181c:	01 97       	sbiw	r24, 0x01	; 1
    181e:	f1 f7       	brne	.-4      	; 0x181c <CLCD_voidSendData+0x1d4>
    1820:	98 a3       	std	Y+32, r25	; 0x20
    1822:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1824:	89 a1       	ldd	r24, Y+33	; 0x21
    1826:	9a a1       	ldd	r25, Y+34	; 0x22
    1828:	01 97       	sbiw	r24, 0x01	; 1
    182a:	9a a3       	std	Y+34, r25	; 0x22
    182c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    182e:	89 a1       	ldd	r24, Y+33	; 0x21
    1830:	9a a1       	ldd	r25, Y+34	; 0x22
    1832:	00 97       	sbiw	r24, 0x00	; 0
    1834:	69 f7       	brne	.-38     	; 0x1810 <CLCD_voidSendData+0x1c8>
    1836:	14 c0       	rjmp	.+40     	; 0x1860 <CLCD_voidSendData+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1838:	6b a1       	ldd	r22, Y+35	; 0x23
    183a:	7c a1       	ldd	r23, Y+36	; 0x24
    183c:	8d a1       	ldd	r24, Y+37	; 0x25
    183e:	9e a1       	ldd	r25, Y+38	; 0x26
    1840:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1844:	dc 01       	movw	r26, r24
    1846:	cb 01       	movw	r24, r22
    1848:	9a a3       	std	Y+34, r25	; 0x22
    184a:	89 a3       	std	Y+33, r24	; 0x21
    184c:	89 a1       	ldd	r24, Y+33	; 0x21
    184e:	9a a1       	ldd	r25, Y+34	; 0x22
    1850:	9e 8f       	std	Y+30, r25	; 0x1e
    1852:	8d 8f       	std	Y+29, r24	; 0x1d
    1854:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1856:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1858:	01 97       	sbiw	r24, 0x01	; 1
    185a:	f1 f7       	brne	.-4      	; 0x1858 <CLCD_voidSendData+0x210>
    185c:	9e 8f       	std	Y+30, r25	; 0x1e
    185e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);

	Local_u8Data = ((Copy_u8Data <<4) |DIO_u8AndWithPort(CLCD_DATA_PORT, CLCD_DATA_PORT_MASK));
    1860:	8a ad       	ldd	r24, Y+58	; 0x3a
    1862:	88 2f       	mov	r24, r24
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	82 95       	swap	r24
    1868:	92 95       	swap	r25
    186a:	90 7f       	andi	r25, 0xF0	; 240
    186c:	98 27       	eor	r25, r24
    186e:	80 7f       	andi	r24, 0xF0	; 240
    1870:	98 27       	eor	r25, r24
    1872:	18 2f       	mov	r17, r24
    1874:	82 e0       	ldi	r24, 0x02	; 2
    1876:	6f e0       	ldi	r22, 0x0F	; 15
    1878:	0e 94 ab 11 	call	0x2356	; 0x2356 <DIO_u8AndWithPort>
    187c:	81 2b       	or	r24, r17
    187e:	89 af       	std	Y+57, r24	; 0x39

	DIO_u8SetPortValue(CLCD_DATA_PORT,Local_u8Data);
    1880:	82 e0       	ldi	r24, 0x02	; 2
    1882:	69 ad       	ldd	r22, Y+57	; 0x39
    1884:	0e 94 c5 10 	call	0x218a	; 0x218a <DIO_u8SetPortValue>

	/*Send Enable pulse */
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    1888:	82 e0       	ldi	r24, 0x02	; 2
    188a:	63 e0       	ldi	r22, 0x03	; 3
    188c:	41 e0       	ldi	r20, 0x01	; 1
    188e:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <DIO_u8SetPinValue>
    1892:	80 e0       	ldi	r24, 0x00	; 0
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	a0 e0       	ldi	r26, 0x00	; 0
    1898:	b0 e4       	ldi	r27, 0x40	; 64
    189a:	89 8f       	std	Y+25, r24	; 0x19
    189c:	9a 8f       	std	Y+26, r25	; 0x1a
    189e:	ab 8f       	std	Y+27, r26	; 0x1b
    18a0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18a2:	69 8d       	ldd	r22, Y+25	; 0x19
    18a4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18a6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18a8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18aa:	20 e0       	ldi	r18, 0x00	; 0
    18ac:	30 e0       	ldi	r19, 0x00	; 0
    18ae:	4a ef       	ldi	r20, 0xFA	; 250
    18b0:	54 e4       	ldi	r21, 0x44	; 68
    18b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18b6:	dc 01       	movw	r26, r24
    18b8:	cb 01       	movw	r24, r22
    18ba:	8d 8b       	std	Y+21, r24	; 0x15
    18bc:	9e 8b       	std	Y+22, r25	; 0x16
    18be:	af 8b       	std	Y+23, r26	; 0x17
    18c0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    18c2:	6d 89       	ldd	r22, Y+21	; 0x15
    18c4:	7e 89       	ldd	r23, Y+22	; 0x16
    18c6:	8f 89       	ldd	r24, Y+23	; 0x17
    18c8:	98 8d       	ldd	r25, Y+24	; 0x18
    18ca:	20 e0       	ldi	r18, 0x00	; 0
    18cc:	30 e0       	ldi	r19, 0x00	; 0
    18ce:	40 e8       	ldi	r20, 0x80	; 128
    18d0:	5f e3       	ldi	r21, 0x3F	; 63
    18d2:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    18d6:	88 23       	and	r24, r24
    18d8:	2c f4       	brge	.+10     	; 0x18e4 <CLCD_voidSendData+0x29c>
		__ticks = 1;
    18da:	81 e0       	ldi	r24, 0x01	; 1
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	9c 8b       	std	Y+20, r25	; 0x14
    18e0:	8b 8b       	std	Y+19, r24	; 0x13
    18e2:	3f c0       	rjmp	.+126    	; 0x1962 <CLCD_voidSendData+0x31a>
	else if (__tmp > 65535)
    18e4:	6d 89       	ldd	r22, Y+21	; 0x15
    18e6:	7e 89       	ldd	r23, Y+22	; 0x16
    18e8:	8f 89       	ldd	r24, Y+23	; 0x17
    18ea:	98 8d       	ldd	r25, Y+24	; 0x18
    18ec:	20 e0       	ldi	r18, 0x00	; 0
    18ee:	3f ef       	ldi	r19, 0xFF	; 255
    18f0:	4f e7       	ldi	r20, 0x7F	; 127
    18f2:	57 e4       	ldi	r21, 0x47	; 71
    18f4:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    18f8:	18 16       	cp	r1, r24
    18fa:	4c f5       	brge	.+82     	; 0x194e <CLCD_voidSendData+0x306>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18fc:	69 8d       	ldd	r22, Y+25	; 0x19
    18fe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1900:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1902:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1904:	20 e0       	ldi	r18, 0x00	; 0
    1906:	30 e0       	ldi	r19, 0x00	; 0
    1908:	40 e2       	ldi	r20, 0x20	; 32
    190a:	51 e4       	ldi	r21, 0x41	; 65
    190c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1910:	dc 01       	movw	r26, r24
    1912:	cb 01       	movw	r24, r22
    1914:	bc 01       	movw	r22, r24
    1916:	cd 01       	movw	r24, r26
    1918:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    191c:	dc 01       	movw	r26, r24
    191e:	cb 01       	movw	r24, r22
    1920:	9c 8b       	std	Y+20, r25	; 0x14
    1922:	8b 8b       	std	Y+19, r24	; 0x13
    1924:	0f c0       	rjmp	.+30     	; 0x1944 <CLCD_voidSendData+0x2fc>
    1926:	88 ec       	ldi	r24, 0xC8	; 200
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	9a 8b       	std	Y+18, r25	; 0x12
    192c:	89 8b       	std	Y+17, r24	; 0x11
    192e:	89 89       	ldd	r24, Y+17	; 0x11
    1930:	9a 89       	ldd	r25, Y+18	; 0x12
    1932:	01 97       	sbiw	r24, 0x01	; 1
    1934:	f1 f7       	brne	.-4      	; 0x1932 <CLCD_voidSendData+0x2ea>
    1936:	9a 8b       	std	Y+18, r25	; 0x12
    1938:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    193a:	8b 89       	ldd	r24, Y+19	; 0x13
    193c:	9c 89       	ldd	r25, Y+20	; 0x14
    193e:	01 97       	sbiw	r24, 0x01	; 1
    1940:	9c 8b       	std	Y+20, r25	; 0x14
    1942:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1944:	8b 89       	ldd	r24, Y+19	; 0x13
    1946:	9c 89       	ldd	r25, Y+20	; 0x14
    1948:	00 97       	sbiw	r24, 0x00	; 0
    194a:	69 f7       	brne	.-38     	; 0x1926 <CLCD_voidSendData+0x2de>
    194c:	14 c0       	rjmp	.+40     	; 0x1976 <CLCD_voidSendData+0x32e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    194e:	6d 89       	ldd	r22, Y+21	; 0x15
    1950:	7e 89       	ldd	r23, Y+22	; 0x16
    1952:	8f 89       	ldd	r24, Y+23	; 0x17
    1954:	98 8d       	ldd	r25, Y+24	; 0x18
    1956:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    195a:	dc 01       	movw	r26, r24
    195c:	cb 01       	movw	r24, r22
    195e:	9c 8b       	std	Y+20, r25	; 0x14
    1960:	8b 8b       	std	Y+19, r24	; 0x13
    1962:	8b 89       	ldd	r24, Y+19	; 0x13
    1964:	9c 89       	ldd	r25, Y+20	; 0x14
    1966:	98 8b       	std	Y+16, r25	; 0x10
    1968:	8f 87       	std	Y+15, r24	; 0x0f
    196a:	8f 85       	ldd	r24, Y+15	; 0x0f
    196c:	98 89       	ldd	r25, Y+16	; 0x10
    196e:	01 97       	sbiw	r24, 0x01	; 1
    1970:	f1 f7       	brne	.-4      	; 0x196e <CLCD_voidSendData+0x326>
    1972:	98 8b       	std	Y+16, r25	; 0x10
    1974:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    1976:	82 e0       	ldi	r24, 0x02	; 2
    1978:	63 e0       	ldi	r22, 0x03	; 3
    197a:	40 e0       	ldi	r20, 0x00	; 0
    197c:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <DIO_u8SetPinValue>
    1980:	80 e0       	ldi	r24, 0x00	; 0
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	a0 ea       	ldi	r26, 0xA0	; 160
    1986:	b0 e4       	ldi	r27, 0x40	; 64
    1988:	8b 87       	std	Y+11, r24	; 0x0b
    198a:	9c 87       	std	Y+12, r25	; 0x0c
    198c:	ad 87       	std	Y+13, r26	; 0x0d
    198e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1990:	6b 85       	ldd	r22, Y+11	; 0x0b
    1992:	7c 85       	ldd	r23, Y+12	; 0x0c
    1994:	8d 85       	ldd	r24, Y+13	; 0x0d
    1996:	9e 85       	ldd	r25, Y+14	; 0x0e
    1998:	20 e0       	ldi	r18, 0x00	; 0
    199a:	30 e0       	ldi	r19, 0x00	; 0
    199c:	4a ef       	ldi	r20, 0xFA	; 250
    199e:	54 e4       	ldi	r21, 0x44	; 68
    19a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19a4:	dc 01       	movw	r26, r24
    19a6:	cb 01       	movw	r24, r22
    19a8:	8f 83       	std	Y+7, r24	; 0x07
    19aa:	98 87       	std	Y+8, r25	; 0x08
    19ac:	a9 87       	std	Y+9, r26	; 0x09
    19ae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19b0:	6f 81       	ldd	r22, Y+7	; 0x07
    19b2:	78 85       	ldd	r23, Y+8	; 0x08
    19b4:	89 85       	ldd	r24, Y+9	; 0x09
    19b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    19b8:	20 e0       	ldi	r18, 0x00	; 0
    19ba:	30 e0       	ldi	r19, 0x00	; 0
    19bc:	40 e8       	ldi	r20, 0x80	; 128
    19be:	5f e3       	ldi	r21, 0x3F	; 63
    19c0:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    19c4:	88 23       	and	r24, r24
    19c6:	2c f4       	brge	.+10     	; 0x19d2 <CLCD_voidSendData+0x38a>
		__ticks = 1;
    19c8:	81 e0       	ldi	r24, 0x01	; 1
    19ca:	90 e0       	ldi	r25, 0x00	; 0
    19cc:	9e 83       	std	Y+6, r25	; 0x06
    19ce:	8d 83       	std	Y+5, r24	; 0x05
    19d0:	3f c0       	rjmp	.+126    	; 0x1a50 <CLCD_voidSendData+0x408>
	else if (__tmp > 65535)
    19d2:	6f 81       	ldd	r22, Y+7	; 0x07
    19d4:	78 85       	ldd	r23, Y+8	; 0x08
    19d6:	89 85       	ldd	r24, Y+9	; 0x09
    19d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    19da:	20 e0       	ldi	r18, 0x00	; 0
    19dc:	3f ef       	ldi	r19, 0xFF	; 255
    19de:	4f e7       	ldi	r20, 0x7F	; 127
    19e0:	57 e4       	ldi	r21, 0x47	; 71
    19e2:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    19e6:	18 16       	cp	r1, r24
    19e8:	4c f5       	brge	.+82     	; 0x1a3c <CLCD_voidSendData+0x3f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    19ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    19ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    19f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    19f2:	20 e0       	ldi	r18, 0x00	; 0
    19f4:	30 e0       	ldi	r19, 0x00	; 0
    19f6:	40 e2       	ldi	r20, 0x20	; 32
    19f8:	51 e4       	ldi	r21, 0x41	; 65
    19fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19fe:	dc 01       	movw	r26, r24
    1a00:	cb 01       	movw	r24, r22
    1a02:	bc 01       	movw	r22, r24
    1a04:	cd 01       	movw	r24, r26
    1a06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a0a:	dc 01       	movw	r26, r24
    1a0c:	cb 01       	movw	r24, r22
    1a0e:	9e 83       	std	Y+6, r25	; 0x06
    1a10:	8d 83       	std	Y+5, r24	; 0x05
    1a12:	0f c0       	rjmp	.+30     	; 0x1a32 <CLCD_voidSendData+0x3ea>
    1a14:	88 ec       	ldi	r24, 0xC8	; 200
    1a16:	90 e0       	ldi	r25, 0x00	; 0
    1a18:	9c 83       	std	Y+4, r25	; 0x04
    1a1a:	8b 83       	std	Y+3, r24	; 0x03
    1a1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a20:	01 97       	sbiw	r24, 0x01	; 1
    1a22:	f1 f7       	brne	.-4      	; 0x1a20 <CLCD_voidSendData+0x3d8>
    1a24:	9c 83       	std	Y+4, r25	; 0x04
    1a26:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a28:	8d 81       	ldd	r24, Y+5	; 0x05
    1a2a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a2c:	01 97       	sbiw	r24, 0x01	; 1
    1a2e:	9e 83       	std	Y+6, r25	; 0x06
    1a30:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a32:	8d 81       	ldd	r24, Y+5	; 0x05
    1a34:	9e 81       	ldd	r25, Y+6	; 0x06
    1a36:	00 97       	sbiw	r24, 0x00	; 0
    1a38:	69 f7       	brne	.-38     	; 0x1a14 <CLCD_voidSendData+0x3cc>
    1a3a:	14 c0       	rjmp	.+40     	; 0x1a64 <CLCD_voidSendData+0x41c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a3c:	6f 81       	ldd	r22, Y+7	; 0x07
    1a3e:	78 85       	ldd	r23, Y+8	; 0x08
    1a40:	89 85       	ldd	r24, Y+9	; 0x09
    1a42:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a48:	dc 01       	movw	r26, r24
    1a4a:	cb 01       	movw	r24, r22
    1a4c:	9e 83       	std	Y+6, r25	; 0x06
    1a4e:	8d 83       	std	Y+5, r24	; 0x05
    1a50:	8d 81       	ldd	r24, Y+5	; 0x05
    1a52:	9e 81       	ldd	r25, Y+6	; 0x06
    1a54:	9a 83       	std	Y+2, r25	; 0x02
    1a56:	89 83       	std	Y+1, r24	; 0x01
    1a58:	89 81       	ldd	r24, Y+1	; 0x01
    1a5a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a5c:	01 97       	sbiw	r24, 0x01	; 1
    1a5e:	f1 f7       	brne	.-4      	; 0x1a5c <CLCD_voidSendData+0x414>
    1a60:	9a 83       	std	Y+2, r25	; 0x02
    1a62:	89 83       	std	Y+1, r24	; 0x01



#endif

}
    1a64:	ea 96       	adiw	r28, 0x3a	; 58
    1a66:	0f b6       	in	r0, 0x3f	; 63
    1a68:	f8 94       	cli
    1a6a:	de bf       	out	0x3e, r29	; 62
    1a6c:	0f be       	out	0x3f, r0	; 63
    1a6e:	cd bf       	out	0x3d, r28	; 61
    1a70:	cf 91       	pop	r28
    1a72:	df 91       	pop	r29
    1a74:	1f 91       	pop	r17
    1a76:	08 95       	ret

00001a78 <CLCD_voidInit>:

void CLCD_voidInit(void)
{
    1a78:	df 93       	push	r29
    1a7a:	cf 93       	push	r28
    1a7c:	cd b7       	in	r28, 0x3d	; 61
    1a7e:	de b7       	in	r29, 0x3e	; 62
    1a80:	2e 97       	sbiw	r28, 0x0e	; 14
    1a82:	0f b6       	in	r0, 0x3f	; 63
    1a84:	f8 94       	cli
    1a86:	de bf       	out	0x3e, r29	; 62
    1a88:	0f be       	out	0x3f, r0	; 63
    1a8a:	cd bf       	out	0x3d, r28	; 61
    1a8c:	80 e0       	ldi	r24, 0x00	; 0
    1a8e:	90 e0       	ldi	r25, 0x00	; 0
    1a90:	a0 e2       	ldi	r26, 0x20	; 32
    1a92:	b2 e4       	ldi	r27, 0x42	; 66
    1a94:	8b 87       	std	Y+11, r24	; 0x0b
    1a96:	9c 87       	std	Y+12, r25	; 0x0c
    1a98:	ad 87       	std	Y+13, r26	; 0x0d
    1a9a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a9c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a9e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1aa0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1aa2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1aa4:	20 e0       	ldi	r18, 0x00	; 0
    1aa6:	30 e0       	ldi	r19, 0x00	; 0
    1aa8:	4a ef       	ldi	r20, 0xFA	; 250
    1aaa:	54 e4       	ldi	r21, 0x44	; 68
    1aac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ab0:	dc 01       	movw	r26, r24
    1ab2:	cb 01       	movw	r24, r22
    1ab4:	8f 83       	std	Y+7, r24	; 0x07
    1ab6:	98 87       	std	Y+8, r25	; 0x08
    1ab8:	a9 87       	std	Y+9, r26	; 0x09
    1aba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1abc:	6f 81       	ldd	r22, Y+7	; 0x07
    1abe:	78 85       	ldd	r23, Y+8	; 0x08
    1ac0:	89 85       	ldd	r24, Y+9	; 0x09
    1ac2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ac4:	20 e0       	ldi	r18, 0x00	; 0
    1ac6:	30 e0       	ldi	r19, 0x00	; 0
    1ac8:	40 e8       	ldi	r20, 0x80	; 128
    1aca:	5f e3       	ldi	r21, 0x3F	; 63
    1acc:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    1ad0:	88 23       	and	r24, r24
    1ad2:	2c f4       	brge	.+10     	; 0x1ade <CLCD_voidInit+0x66>
		__ticks = 1;
    1ad4:	81 e0       	ldi	r24, 0x01	; 1
    1ad6:	90 e0       	ldi	r25, 0x00	; 0
    1ad8:	9e 83       	std	Y+6, r25	; 0x06
    1ada:	8d 83       	std	Y+5, r24	; 0x05
    1adc:	3f c0       	rjmp	.+126    	; 0x1b5c <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
    1ade:	6f 81       	ldd	r22, Y+7	; 0x07
    1ae0:	78 85       	ldd	r23, Y+8	; 0x08
    1ae2:	89 85       	ldd	r24, Y+9	; 0x09
    1ae4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ae6:	20 e0       	ldi	r18, 0x00	; 0
    1ae8:	3f ef       	ldi	r19, 0xFF	; 255
    1aea:	4f e7       	ldi	r20, 0x7F	; 127
    1aec:	57 e4       	ldi	r21, 0x47	; 71
    1aee:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    1af2:	18 16       	cp	r1, r24
    1af4:	4c f5       	brge	.+82     	; 0x1b48 <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1af6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1af8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1afa:	8d 85       	ldd	r24, Y+13	; 0x0d
    1afc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1afe:	20 e0       	ldi	r18, 0x00	; 0
    1b00:	30 e0       	ldi	r19, 0x00	; 0
    1b02:	40 e2       	ldi	r20, 0x20	; 32
    1b04:	51 e4       	ldi	r21, 0x41	; 65
    1b06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b0a:	dc 01       	movw	r26, r24
    1b0c:	cb 01       	movw	r24, r22
    1b0e:	bc 01       	movw	r22, r24
    1b10:	cd 01       	movw	r24, r26
    1b12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b16:	dc 01       	movw	r26, r24
    1b18:	cb 01       	movw	r24, r22
    1b1a:	9e 83       	std	Y+6, r25	; 0x06
    1b1c:	8d 83       	std	Y+5, r24	; 0x05
    1b1e:	0f c0       	rjmp	.+30     	; 0x1b3e <CLCD_voidInit+0xc6>
    1b20:	88 ec       	ldi	r24, 0xC8	; 200
    1b22:	90 e0       	ldi	r25, 0x00	; 0
    1b24:	9c 83       	std	Y+4, r25	; 0x04
    1b26:	8b 83       	std	Y+3, r24	; 0x03
    1b28:	8b 81       	ldd	r24, Y+3	; 0x03
    1b2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b2c:	01 97       	sbiw	r24, 0x01	; 1
    1b2e:	f1 f7       	brne	.-4      	; 0x1b2c <CLCD_voidInit+0xb4>
    1b30:	9c 83       	std	Y+4, r25	; 0x04
    1b32:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b34:	8d 81       	ldd	r24, Y+5	; 0x05
    1b36:	9e 81       	ldd	r25, Y+6	; 0x06
    1b38:	01 97       	sbiw	r24, 0x01	; 1
    1b3a:	9e 83       	std	Y+6, r25	; 0x06
    1b3c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b40:	9e 81       	ldd	r25, Y+6	; 0x06
    1b42:	00 97       	sbiw	r24, 0x00	; 0
    1b44:	69 f7       	brne	.-38     	; 0x1b20 <CLCD_voidInit+0xa8>
    1b46:	14 c0       	rjmp	.+40     	; 0x1b70 <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b48:	6f 81       	ldd	r22, Y+7	; 0x07
    1b4a:	78 85       	ldd	r23, Y+8	; 0x08
    1b4c:	89 85       	ldd	r24, Y+9	; 0x09
    1b4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b54:	dc 01       	movw	r26, r24
    1b56:	cb 01       	movw	r24, r22
    1b58:	9e 83       	std	Y+6, r25	; 0x06
    1b5a:	8d 83       	std	Y+5, r24	; 0x05
    1b5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b5e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b60:	9a 83       	std	Y+2, r25	; 0x02
    1b62:	89 83       	std	Y+1, r24	; 0x01
    1b64:	89 81       	ldd	r24, Y+1	; 0x01
    1b66:	9a 81       	ldd	r25, Y+2	; 0x02
    1b68:	01 97       	sbiw	r24, 0x01	; 1
    1b6a:	f1 f7       	brne	.-4      	; 0x1b68 <CLCD_voidInit+0xf0>
    1b6c:	9a 83       	std	Y+2, r25	; 0x02
    1b6e:	89 83       	std	Y+1, r24	; 0x01
	C_LCD_voidSendCommand(0x01); /* 1 or 0x01 or 0b00000001*/

#elif   MODE_SELECT ==_4_BIT_MODE

	/* Function set command : 2 lines , 5*8 font size */
	C_LCD_voidSendCommand(0x33);
    1b70:	83 e3       	ldi	r24, 0x33	; 51
    1b72:	0e 94 0c 09 	call	0x1218	; 0x1218 <C_LCD_voidSendCommand>
	C_LCD_voidSendCommand(0x32);
    1b76:	82 e3       	ldi	r24, 0x32	; 50
    1b78:	0e 94 0c 09 	call	0x1218	; 0x1218 <C_LCD_voidSendCommand>
	C_LCD_voidSendCommand(0x28);   /* 0bNFXXXXXX  --> N: no of lines F: font size*/
    1b7c:	88 e2       	ldi	r24, 0x28	; 40
    1b7e:	0e 94 0c 09 	call	0x1218	; 0x1218 <C_LCD_voidSendCommand>


	/*Display on off control : disable enable , disable cursor , no blink cursor*/
	C_LCD_voidSendCommand(0x0C);
    1b82:	8c e0       	ldi	r24, 0x0C	; 12
    1b84:	0e 94 0c 09 	call	0x1218	; 0x1218 <C_LCD_voidSendCommand>
	C_LCD_voidSendCommand(0x02);
    1b88:	82 e0       	ldi	r24, 0x02	; 2
    1b8a:	0e 94 0c 09 	call	0x1218	; 0x1218 <C_LCD_voidSendCommand>

	C_LCD_voidSendCommand(0x06);
    1b8e:	86 e0       	ldi	r24, 0x06	; 6
    1b90:	0e 94 0c 09 	call	0x1218	; 0x1218 <C_LCD_voidSendCommand>

	/* Clear display */
	C_LCD_voidSendCommand(0x01);
    1b94:	81 e0       	ldi	r24, 0x01	; 1
    1b96:	0e 94 0c 09 	call	0x1218	; 0x1218 <C_LCD_voidSendCommand>


#endif


}
    1b9a:	2e 96       	adiw	r28, 0x0e	; 14
    1b9c:	0f b6       	in	r0, 0x3f	; 63
    1b9e:	f8 94       	cli
    1ba0:	de bf       	out	0x3e, r29	; 62
    1ba2:	0f be       	out	0x3f, r0	; 63
    1ba4:	cd bf       	out	0x3d, r28	; 61
    1ba6:	cf 91       	pop	r28
    1ba8:	df 91       	pop	r29
    1baa:	08 95       	ret

00001bac <CLCD_voidSendString>:

void CLCD_voidSendString(const char* Copy_pcString )
{
    1bac:	df 93       	push	r29
    1bae:	cf 93       	push	r28
    1bb0:	00 d0       	rcall	.+0      	; 0x1bb2 <CLCD_voidSendString+0x6>
    1bb2:	0f 92       	push	r0
    1bb4:	cd b7       	in	r28, 0x3d	; 61
    1bb6:	de b7       	in	r29, 0x3e	; 62
    1bb8:	9b 83       	std	Y+3, r25	; 0x03
    1bba:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Counter = 0;
    1bbc:	19 82       	std	Y+1, r1	; 0x01
    1bbe:	0e c0       	rjmp	.+28     	; 0x1bdc <CLCD_voidSendString+0x30>
	while (Copy_pcString[Local_u8Counter] != NULL)
	{
		CLCD_voidSendData(Copy_pcString[Local_u8Counter]);
    1bc0:	89 81       	ldd	r24, Y+1	; 0x01
    1bc2:	28 2f       	mov	r18, r24
    1bc4:	30 e0       	ldi	r19, 0x00	; 0
    1bc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc8:	9b 81       	ldd	r25, Y+3	; 0x03
    1bca:	fc 01       	movw	r30, r24
    1bcc:	e2 0f       	add	r30, r18
    1bce:	f3 1f       	adc	r31, r19
    1bd0:	80 81       	ld	r24, Z
    1bd2:	0e 94 24 0b 	call	0x1648	; 0x1648 <CLCD_voidSendData>
		Local_u8Counter++;
    1bd6:	89 81       	ldd	r24, Y+1	; 0x01
    1bd8:	8f 5f       	subi	r24, 0xFF	; 255
    1bda:	89 83       	std	Y+1, r24	; 0x01
}

void CLCD_voidSendString(const char* Copy_pcString )
{
	u8 Local_u8Counter = 0;
	while (Copy_pcString[Local_u8Counter] != NULL)
    1bdc:	89 81       	ldd	r24, Y+1	; 0x01
    1bde:	28 2f       	mov	r18, r24
    1be0:	30 e0       	ldi	r19, 0x00	; 0
    1be2:	8a 81       	ldd	r24, Y+2	; 0x02
    1be4:	9b 81       	ldd	r25, Y+3	; 0x03
    1be6:	fc 01       	movw	r30, r24
    1be8:	e2 0f       	add	r30, r18
    1bea:	f3 1f       	adc	r31, r19
    1bec:	80 81       	ld	r24, Z
    1bee:	88 23       	and	r24, r24
    1bf0:	39 f7       	brne	.-50     	; 0x1bc0 <CLCD_voidSendString+0x14>
	{
		CLCD_voidSendData(Copy_pcString[Local_u8Counter]);
		Local_u8Counter++;
	}
}
    1bf2:	0f 90       	pop	r0
    1bf4:	0f 90       	pop	r0
    1bf6:	0f 90       	pop	r0
    1bf8:	cf 91       	pop	r28
    1bfa:	df 91       	pop	r29
    1bfc:	08 95       	ret

00001bfe <CLCD_voidGoToXY>:

void CLCD_voidGoToXY(u8 Copy_u8Xpos, u8 Copy_u8Ypos)
{
    1bfe:	df 93       	push	r29
    1c00:	cf 93       	push	r28
    1c02:	00 d0       	rcall	.+0      	; 0x1c04 <CLCD_voidGoToXY+0x6>
    1c04:	0f 92       	push	r0
    1c06:	cd b7       	in	r28, 0x3d	; 61
    1c08:	de b7       	in	r29, 0x3e	; 62
    1c0a:	8a 83       	std	Y+2, r24	; 0x02
    1c0c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Adress=0;
    1c0e:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8Xpos == 0)
    1c10:	8a 81       	ldd	r24, Y+2	; 0x02
    1c12:	88 23       	and	r24, r24
    1c14:	19 f4       	brne	.+6      	; 0x1c1c <CLCD_voidGoToXY+0x1e>
	{
		Local_u8Adress = Copy_u8Ypos;
    1c16:	8b 81       	ldd	r24, Y+3	; 0x03
    1c18:	89 83       	std	Y+1, r24	; 0x01
    1c1a:	06 c0       	rjmp	.+12     	; 0x1c28 <CLCD_voidGoToXY+0x2a>
	}
	else if (Copy_u8Xpos == 1)
    1c1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1e:	81 30       	cpi	r24, 0x01	; 1
    1c20:	19 f4       	brne	.+6      	; 0x1c28 <CLCD_voidGoToXY+0x2a>
	{
		Local_u8Adress = Copy_u8Ypos+0x40;
    1c22:	8b 81       	ldd	r24, Y+3	; 0x03
    1c24:	80 5c       	subi	r24, 0xC0	; 192
    1c26:	89 83       	std	Y+1, r24	; 0x01
	}

	C_LCD_voidSendCommand(Local_u8Adress+128);
    1c28:	89 81       	ldd	r24, Y+1	; 0x01
    1c2a:	80 58       	subi	r24, 0x80	; 128
    1c2c:	0e 94 0c 09 	call	0x1218	; 0x1218 <C_LCD_voidSendCommand>



}
    1c30:	0f 90       	pop	r0
    1c32:	0f 90       	pop	r0
    1c34:	0f 90       	pop	r0
    1c36:	cf 91       	pop	r28
    1c38:	df 91       	pop	r29
    1c3a:	08 95       	ret

00001c3c <CLCD_voidWriteSpecialCharacter>:

void CLCD_voidWriteSpecialCharacter(u8* Copy_pu8Pattern, u8 Copy_u8PatternNumber, u8 Copy_u8XPos, u8 Copy_u8YPos)
{
    1c3c:	df 93       	push	r29
    1c3e:	cf 93       	push	r28
    1c40:	cd b7       	in	r28, 0x3d	; 61
    1c42:	de b7       	in	r29, 0x3e	; 62
    1c44:	27 97       	sbiw	r28, 0x07	; 7
    1c46:	0f b6       	in	r0, 0x3f	; 63
    1c48:	f8 94       	cli
    1c4a:	de bf       	out	0x3e, r29	; 62
    1c4c:	0f be       	out	0x3f, r0	; 63
    1c4e:	cd bf       	out	0x3d, r28	; 61
    1c50:	9c 83       	std	Y+4, r25	; 0x04
    1c52:	8b 83       	std	Y+3, r24	; 0x03
    1c54:	6d 83       	std	Y+5, r22	; 0x05
    1c56:	4e 83       	std	Y+6, r20	; 0x06
    1c58:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8CGRAMAddress= 0, Local_u8Iterator;
    1c5a:	1a 82       	std	Y+2, r1	; 0x02
	/* Calculate the CGRAM address whose each block is 8 bytes */
	Local_u8CGRAMAddress =Copy_u8PatternNumber*8;
    1c5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c5e:	88 2f       	mov	r24, r24
    1c60:	90 e0       	ldi	r25, 0x00	; 0
    1c62:	88 0f       	add	r24, r24
    1c64:	99 1f       	adc	r25, r25
    1c66:	88 0f       	add	r24, r24
    1c68:	99 1f       	adc	r25, r25
    1c6a:	88 0f       	add	r24, r24
    1c6c:	99 1f       	adc	r25, r25
    1c6e:	8a 83       	std	Y+2, r24	; 0x02

	/* Send CGRAM Address command to LCD, with setting bit 6, clearing bit 7*/
	C_LCD_voidSendCommand(Local_u8CGRAMAddress+64);
    1c70:	8a 81       	ldd	r24, Y+2	; 0x02
    1c72:	80 5c       	subi	r24, 0xC0	; 192
    1c74:	0e 94 0c 09 	call	0x1218	; 0x1218 <C_LCD_voidSendCommand>

	/* Write the pattern into CGRAM */

	for (Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++)
    1c78:	19 82       	std	Y+1, r1	; 0x01
    1c7a:	0e c0       	rjmp	.+28     	; 0x1c98 <CLCD_voidWriteSpecialCharacter+0x5c>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Iterator]);
    1c7c:	89 81       	ldd	r24, Y+1	; 0x01
    1c7e:	28 2f       	mov	r18, r24
    1c80:	30 e0       	ldi	r19, 0x00	; 0
    1c82:	8b 81       	ldd	r24, Y+3	; 0x03
    1c84:	9c 81       	ldd	r25, Y+4	; 0x04
    1c86:	fc 01       	movw	r30, r24
    1c88:	e2 0f       	add	r30, r18
    1c8a:	f3 1f       	adc	r31, r19
    1c8c:	80 81       	ld	r24, Z
    1c8e:	0e 94 24 0b 	call	0x1648	; 0x1648 <CLCD_voidSendData>
	/* Send CGRAM Address command to LCD, with setting bit 6, clearing bit 7*/
	C_LCD_voidSendCommand(Local_u8CGRAMAddress+64);

	/* Write the pattern into CGRAM */

	for (Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++)
    1c92:	89 81       	ldd	r24, Y+1	; 0x01
    1c94:	8f 5f       	subi	r24, 0xFF	; 255
    1c96:	89 83       	std	Y+1, r24	; 0x01
    1c98:	89 81       	ldd	r24, Y+1	; 0x01
    1c9a:	88 30       	cpi	r24, 0x08	; 8
    1c9c:	78 f3       	brcs	.-34     	; 0x1c7c <CLCD_voidWriteSpecialCharacter+0x40>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Iterator]);
	}

	/* go back to the DDRAM to display the Pattern*/
	CLCD_voidGoToXY(Copy_u8XPos,Copy_u8YPos);
    1c9e:	8e 81       	ldd	r24, Y+6	; 0x06
    1ca0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ca2:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <CLCD_voidGoToXY>
	/* Display the pattern written in the CGRAM*/
	CLCD_voidSendData(Copy_u8PatternNumber);
    1ca6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ca8:	0e 94 24 0b 	call	0x1648	; 0x1648 <CLCD_voidSendData>
}
    1cac:	27 96       	adiw	r28, 0x07	; 7
    1cae:	0f b6       	in	r0, 0x3f	; 63
    1cb0:	f8 94       	cli
    1cb2:	de bf       	out	0x3e, r29	; 62
    1cb4:	0f be       	out	0x3f, r0	; 63
    1cb6:	cd bf       	out	0x3d, r28	; 61
    1cb8:	cf 91       	pop	r28
    1cba:	df 91       	pop	r29
    1cbc:	08 95       	ret

00001cbe <CLCD_VoidWriteNumber>:

void CLCD_VoidWriteNumber(f32 Copy_u32Number)
{
    1cbe:	0f 93       	push	r16
    1cc0:	1f 93       	push	r17
    1cc2:	df 93       	push	r29
    1cc4:	cf 93       	push	r28
    1cc6:	cd b7       	in	r28, 0x3d	; 61
    1cc8:	de b7       	in	r29, 0x3e	; 62
    1cca:	6d 97       	sbiw	r28, 0x1d	; 29
    1ccc:	0f b6       	in	r0, 0x3f	; 63
    1cce:	f8 94       	cli
    1cd0:	de bf       	out	0x3e, r29	; 62
    1cd2:	0f be       	out	0x3f, r0	; 63
    1cd4:	cd bf       	out	0x3d, r28	; 61
    1cd6:	6a 8f       	std	Y+26, r22	; 0x1a
    1cd8:	7b 8f       	std	Y+27, r23	; 0x1b
    1cda:	8c 8f       	std	Y+28, r24	; 0x1c
    1cdc:	9d 8f       	std	Y+29, r25	; 0x1d
	s32 Local_s32Number = Copy_u32Number;
    1cde:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1ce0:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1ce2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1ce4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1ce6:	0e 94 37 04 	call	0x86e	; 0x86e <__fixsfsi>
    1cea:	dc 01       	movw	r26, r24
    1cec:	cb 01       	movw	r24, r22
    1cee:	8a 83       	std	Y+2, r24	; 0x02
    1cf0:	9b 83       	std	Y+3, r25	; 0x03
    1cf2:	ac 83       	std	Y+4, r26	; 0x04
    1cf4:	bd 83       	std	Y+5, r27	; 0x05

	if(Local_s32Number == 0)
    1cf6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf8:	9b 81       	ldd	r25, Y+3	; 0x03
    1cfa:	ac 81       	ldd	r26, Y+4	; 0x04
    1cfc:	bd 81       	ldd	r27, Y+5	; 0x05
    1cfe:	00 97       	sbiw	r24, 0x00	; 0
    1d00:	a1 05       	cpc	r26, r1
    1d02:	b1 05       	cpc	r27, r1
    1d04:	21 f4       	brne	.+8      	; 0x1d0e <CLCD_VoidWriteNumber+0x50>
	{
		CLCD_voidSendData('0');
    1d06:	80 e3       	ldi	r24, 0x30	; 48
    1d08:	0e 94 24 0b 	call	0x1648	; 0x1648 <CLCD_voidSendData>
    1d0c:	18 c0       	rjmp	.+48     	; 0x1d3e <CLCD_VoidWriteNumber+0x80>
	}
	else if (Local_s32Number <0)
    1d0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d10:	9b 81       	ldd	r25, Y+3	; 0x03
    1d12:	ac 81       	ldd	r26, Y+4	; 0x04
    1d14:	bd 81       	ldd	r27, Y+5	; 0x05
    1d16:	bb 23       	and	r27, r27
    1d18:	94 f4       	brge	.+36     	; 0x1d3e <CLCD_VoidWriteNumber+0x80>
	{
		CLCD_voidSendData('-');
    1d1a:	8d e2       	ldi	r24, 0x2D	; 45
    1d1c:	0e 94 24 0b 	call	0x1648	; 0x1648 <CLCD_voidSendData>
		Local_s32Number = Local_s32Number *(-1);
    1d20:	8a 81       	ldd	r24, Y+2	; 0x02
    1d22:	9b 81       	ldd	r25, Y+3	; 0x03
    1d24:	ac 81       	ldd	r26, Y+4	; 0x04
    1d26:	bd 81       	ldd	r27, Y+5	; 0x05
    1d28:	b0 95       	com	r27
    1d2a:	a0 95       	com	r26
    1d2c:	90 95       	com	r25
    1d2e:	81 95       	neg	r24
    1d30:	9f 4f       	sbci	r25, 0xFF	; 255
    1d32:	af 4f       	sbci	r26, 0xFF	; 255
    1d34:	bf 4f       	sbci	r27, 0xFF	; 255
    1d36:	8a 83       	std	Y+2, r24	; 0x02
    1d38:	9b 83       	std	Y+3, r25	; 0x03
    1d3a:	ac 83       	std	Y+4, r26	; 0x04
    1d3c:	bd 83       	std	Y+5, r27	; 0x05

	}
	u8 Local_u8Array[20]={0};
    1d3e:	84 e1       	ldi	r24, 0x14	; 20
    1d40:	fe 01       	movw	r30, r28
    1d42:	36 96       	adiw	r30, 0x06	; 6
    1d44:	df 01       	movw	r26, r30
    1d46:	98 2f       	mov	r25, r24
    1d48:	1d 92       	st	X+, r1
    1d4a:	9a 95       	dec	r25
    1d4c:	e9 f7       	brne	.-6      	; 0x1d48 <CLCD_VoidWriteNumber+0x8a>
	s8 local_s8Counter =0;
    1d4e:	19 82       	std	Y+1, r1	; 0x01
    1d50:	2f c0       	rjmp	.+94     	; 0x1db0 <CLCD_VoidWriteNumber+0xf2>
	while (Local_s32Number != 0)
	{
		Local_u8Array[local_s8Counter]= Local_s32Number%10;
    1d52:	89 81       	ldd	r24, Y+1	; 0x01
    1d54:	08 2f       	mov	r16, r24
    1d56:	11 27       	eor	r17, r17
    1d58:	07 fd       	sbrc	r16, 7
    1d5a:	10 95       	com	r17
    1d5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d5e:	9b 81       	ldd	r25, Y+3	; 0x03
    1d60:	ac 81       	ldd	r26, Y+4	; 0x04
    1d62:	bd 81       	ldd	r27, Y+5	; 0x05
    1d64:	2a e0       	ldi	r18, 0x0A	; 10
    1d66:	30 e0       	ldi	r19, 0x00	; 0
    1d68:	40 e0       	ldi	r20, 0x00	; 0
    1d6a:	50 e0       	ldi	r21, 0x00	; 0
    1d6c:	bc 01       	movw	r22, r24
    1d6e:	cd 01       	movw	r24, r26
    1d70:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <__divmodsi4>
    1d74:	dc 01       	movw	r26, r24
    1d76:	cb 01       	movw	r24, r22
    1d78:	28 2f       	mov	r18, r24
    1d7a:	ce 01       	movw	r24, r28
    1d7c:	06 96       	adiw	r24, 0x06	; 6
    1d7e:	fc 01       	movw	r30, r24
    1d80:	e0 0f       	add	r30, r16
    1d82:	f1 1f       	adc	r31, r17
    1d84:	20 83       	st	Z, r18
		Local_s32Number/=10;
    1d86:	8a 81       	ldd	r24, Y+2	; 0x02
    1d88:	9b 81       	ldd	r25, Y+3	; 0x03
    1d8a:	ac 81       	ldd	r26, Y+4	; 0x04
    1d8c:	bd 81       	ldd	r27, Y+5	; 0x05
    1d8e:	2a e0       	ldi	r18, 0x0A	; 10
    1d90:	30 e0       	ldi	r19, 0x00	; 0
    1d92:	40 e0       	ldi	r20, 0x00	; 0
    1d94:	50 e0       	ldi	r21, 0x00	; 0
    1d96:	bc 01       	movw	r22, r24
    1d98:	cd 01       	movw	r24, r26
    1d9a:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <__divmodsi4>
    1d9e:	da 01       	movw	r26, r20
    1da0:	c9 01       	movw	r24, r18
    1da2:	8a 83       	std	Y+2, r24	; 0x02
    1da4:	9b 83       	std	Y+3, r25	; 0x03
    1da6:	ac 83       	std	Y+4, r26	; 0x04
    1da8:	bd 83       	std	Y+5, r27	; 0x05
		local_s8Counter++;
    1daa:	89 81       	ldd	r24, Y+1	; 0x01
    1dac:	8f 5f       	subi	r24, 0xFF	; 255
    1dae:	89 83       	std	Y+1, r24	; 0x01
		Local_s32Number = Local_s32Number *(-1);

	}
	u8 Local_u8Array[20]={0};
	s8 local_s8Counter =0;
	while (Local_s32Number != 0)
    1db0:	8a 81       	ldd	r24, Y+2	; 0x02
    1db2:	9b 81       	ldd	r25, Y+3	; 0x03
    1db4:	ac 81       	ldd	r26, Y+4	; 0x04
    1db6:	bd 81       	ldd	r27, Y+5	; 0x05
    1db8:	00 97       	sbiw	r24, 0x00	; 0
    1dba:	a1 05       	cpc	r26, r1
    1dbc:	b1 05       	cpc	r27, r1
    1dbe:	49 f6       	brne	.-110    	; 0x1d52 <CLCD_VoidWriteNumber+0x94>
	{
		Local_u8Array[local_s8Counter]= Local_s32Number%10;
		Local_s32Number/=10;
		local_s8Counter++;
	}
	local_s8Counter--;
    1dc0:	89 81       	ldd	r24, Y+1	; 0x01
    1dc2:	81 50       	subi	r24, 0x01	; 1
    1dc4:	89 83       	std	Y+1, r24	; 0x01
    1dc6:	11 c0       	rjmp	.+34     	; 0x1dea <CLCD_VoidWriteNumber+0x12c>
	while (local_s8Counter>=0)
	{
		CLCD_voidSendData(Local_u8Array[local_s8Counter]+'0');
    1dc8:	89 81       	ldd	r24, Y+1	; 0x01
    1dca:	28 2f       	mov	r18, r24
    1dcc:	33 27       	eor	r19, r19
    1dce:	27 fd       	sbrc	r18, 7
    1dd0:	30 95       	com	r19
    1dd2:	ce 01       	movw	r24, r28
    1dd4:	06 96       	adiw	r24, 0x06	; 6
    1dd6:	fc 01       	movw	r30, r24
    1dd8:	e2 0f       	add	r30, r18
    1dda:	f3 1f       	adc	r31, r19
    1ddc:	80 81       	ld	r24, Z
    1dde:	80 5d       	subi	r24, 0xD0	; 208
    1de0:	0e 94 24 0b 	call	0x1648	; 0x1648 <CLCD_voidSendData>
		local_s8Counter--;
    1de4:	89 81       	ldd	r24, Y+1	; 0x01
    1de6:	81 50       	subi	r24, 0x01	; 1
    1de8:	89 83       	std	Y+1, r24	; 0x01
		Local_u8Array[local_s8Counter]= Local_s32Number%10;
		Local_s32Number/=10;
		local_s8Counter++;
	}
	local_s8Counter--;
	while (local_s8Counter>=0)
    1dea:	89 81       	ldd	r24, Y+1	; 0x01
    1dec:	88 23       	and	r24, r24
    1dee:	64 f7       	brge	.-40     	; 0x1dc8 <CLCD_VoidWriteNumber+0x10a>
	{
		CLCD_voidSendData(Local_u8Array[local_s8Counter]+'0');
		local_s8Counter--;
	}
}
    1df0:	6d 96       	adiw	r28, 0x1d	; 29
    1df2:	0f b6       	in	r0, 0x3f	; 63
    1df4:	f8 94       	cli
    1df6:	de bf       	out	0x3e, r29	; 62
    1df8:	0f be       	out	0x3f, r0	; 63
    1dfa:	cd bf       	out	0x3d, r28	; 61
    1dfc:	cf 91       	pop	r28
    1dfe:	df 91       	pop	r29
    1e00:	1f 91       	pop	r17
    1e02:	0f 91       	pop	r16
    1e04:	08 95       	ret

00001e06 <CLCD_voidWriteFloatNumber>:

void CLCD_voidWriteFloatNumber(f32 Copy_f32FloatNumber )
{
    1e06:	df 93       	push	r29
    1e08:	cf 93       	push	r28
    1e0a:	cd b7       	in	r28, 0x3d	; 61
    1e0c:	de b7       	in	r29, 0x3e	; 62
    1e0e:	28 97       	sbiw	r28, 0x08	; 8
    1e10:	0f b6       	in	r0, 0x3f	; 63
    1e12:	f8 94       	cli
    1e14:	de bf       	out	0x3e, r29	; 62
    1e16:	0f be       	out	0x3f, r0	; 63
    1e18:	cd bf       	out	0x3d, r28	; 61
    1e1a:	6d 83       	std	Y+5, r22	; 0x05
    1e1c:	7e 83       	std	Y+6, r23	; 0x06
    1e1e:	8f 83       	std	Y+7, r24	; 0x07
    1e20:	98 87       	std	Y+8, r25	; 0x08

	if(Copy_f32FloatNumber == 0)
    1e22:	6d 81       	ldd	r22, Y+5	; 0x05
    1e24:	7e 81       	ldd	r23, Y+6	; 0x06
    1e26:	8f 81       	ldd	r24, Y+7	; 0x07
    1e28:	98 85       	ldd	r25, Y+8	; 0x08
    1e2a:	20 e0       	ldi	r18, 0x00	; 0
    1e2c:	30 e0       	ldi	r19, 0x00	; 0
    1e2e:	40 e0       	ldi	r20, 0x00	; 0
    1e30:	50 e0       	ldi	r21, 0x00	; 0
    1e32:	0e 94 19 03 	call	0x632	; 0x632 <__eqsf2>
    1e36:	88 23       	and	r24, r24
    1e38:	39 f4       	brne	.+14     	; 0x1e48 <CLCD_voidWriteFloatNumber+0x42>
	{
		CLCD_VoidWriteNumber(0);
    1e3a:	60 e0       	ldi	r22, 0x00	; 0
    1e3c:	70 e0       	ldi	r23, 0x00	; 0
    1e3e:	80 e0       	ldi	r24, 0x00	; 0
    1e40:	90 e0       	ldi	r25, 0x00	; 0
    1e42:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <CLCD_VoidWriteNumber>
    1e46:	7c c0       	rjmp	.+248    	; 0x1f40 <CLCD_voidWriteFloatNumber+0x13a>
	}

	else
	{
		s32 Local_s32DecemalNum=Copy_f32FloatNumber;
    1e48:	6d 81       	ldd	r22, Y+5	; 0x05
    1e4a:	7e 81       	ldd	r23, Y+6	; 0x06
    1e4c:	8f 81       	ldd	r24, Y+7	; 0x07
    1e4e:	98 85       	ldd	r25, Y+8	; 0x08
    1e50:	0e 94 37 04 	call	0x86e	; 0x86e <__fixsfsi>
    1e54:	dc 01       	movw	r26, r24
    1e56:	cb 01       	movw	r24, r22
    1e58:	89 83       	std	Y+1, r24	; 0x01
    1e5a:	9a 83       	std	Y+2, r25	; 0x02
    1e5c:	ab 83       	std	Y+3, r26	; 0x03
    1e5e:	bc 83       	std	Y+4, r27	; 0x04
		CLCD_VoidWriteNumber(Local_s32DecemalNum);
    1e60:	69 81       	ldd	r22, Y+1	; 0x01
    1e62:	7a 81       	ldd	r23, Y+2	; 0x02
    1e64:	8b 81       	ldd	r24, Y+3	; 0x03
    1e66:	9c 81       	ldd	r25, Y+4	; 0x04
    1e68:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <__floatsisf>
    1e6c:	dc 01       	movw	r26, r24
    1e6e:	cb 01       	movw	r24, r22
    1e70:	bc 01       	movw	r22, r24
    1e72:	cd 01       	movw	r24, r26
    1e74:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <CLCD_VoidWriteNumber>
		CLCD_voidSendData('.');
    1e78:	8e e2       	ldi	r24, 0x2E	; 46
    1e7a:	0e 94 24 0b 	call	0x1648	; 0x1648 <CLCD_voidSendData>
		Copy_f32FloatNumber = Copy_f32FloatNumber -Local_s32DecemalNum;
    1e7e:	69 81       	ldd	r22, Y+1	; 0x01
    1e80:	7a 81       	ldd	r23, Y+2	; 0x02
    1e82:	8b 81       	ldd	r24, Y+3	; 0x03
    1e84:	9c 81       	ldd	r25, Y+4	; 0x04
    1e86:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <__floatsisf>
    1e8a:	9b 01       	movw	r18, r22
    1e8c:	ac 01       	movw	r20, r24
    1e8e:	6d 81       	ldd	r22, Y+5	; 0x05
    1e90:	7e 81       	ldd	r23, Y+6	; 0x06
    1e92:	8f 81       	ldd	r24, Y+7	; 0x07
    1e94:	98 85       	ldd	r25, Y+8	; 0x08
    1e96:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1e9a:	dc 01       	movw	r26, r24
    1e9c:	cb 01       	movw	r24, r22
    1e9e:	8d 83       	std	Y+5, r24	; 0x05
    1ea0:	9e 83       	std	Y+6, r25	; 0x06
    1ea2:	af 83       	std	Y+7, r26	; 0x07
    1ea4:	b8 87       	std	Y+8, r27	; 0x08

		Copy_f32FloatNumber*=100000;
    1ea6:	6d 81       	ldd	r22, Y+5	; 0x05
    1ea8:	7e 81       	ldd	r23, Y+6	; 0x06
    1eaa:	8f 81       	ldd	r24, Y+7	; 0x07
    1eac:	98 85       	ldd	r25, Y+8	; 0x08
    1eae:	20 e0       	ldi	r18, 0x00	; 0
    1eb0:	30 e5       	ldi	r19, 0x50	; 80
    1eb2:	43 ec       	ldi	r20, 0xC3	; 195
    1eb4:	57 e4       	ldi	r21, 0x47	; 71
    1eb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eba:	dc 01       	movw	r26, r24
    1ebc:	cb 01       	movw	r24, r22
    1ebe:	8d 83       	std	Y+5, r24	; 0x05
    1ec0:	9e 83       	std	Y+6, r25	; 0x06
    1ec2:	af 83       	std	Y+7, r26	; 0x07
    1ec4:	b8 87       	std	Y+8, r27	; 0x08
		Local_s32DecemalNum = Copy_f32FloatNumber;
    1ec6:	6d 81       	ldd	r22, Y+5	; 0x05
    1ec8:	7e 81       	ldd	r23, Y+6	; 0x06
    1eca:	8f 81       	ldd	r24, Y+7	; 0x07
    1ecc:	98 85       	ldd	r25, Y+8	; 0x08
    1ece:	0e 94 37 04 	call	0x86e	; 0x86e <__fixsfsi>
    1ed2:	dc 01       	movw	r26, r24
    1ed4:	cb 01       	movw	r24, r22
    1ed6:	89 83       	std	Y+1, r24	; 0x01
    1ed8:	9a 83       	std	Y+2, r25	; 0x02
    1eda:	ab 83       	std	Y+3, r26	; 0x03
    1edc:	bc 83       	std	Y+4, r27	; 0x04
    1ede:	12 c0       	rjmp	.+36     	; 0x1f04 <CLCD_voidWriteFloatNumber+0xfe>

		while (Local_s32DecemalNum%10 == 0)
		{
			Local_s32DecemalNum/=10;
    1ee0:	89 81       	ldd	r24, Y+1	; 0x01
    1ee2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ee4:	ab 81       	ldd	r26, Y+3	; 0x03
    1ee6:	bc 81       	ldd	r27, Y+4	; 0x04
    1ee8:	2a e0       	ldi	r18, 0x0A	; 10
    1eea:	30 e0       	ldi	r19, 0x00	; 0
    1eec:	40 e0       	ldi	r20, 0x00	; 0
    1eee:	50 e0       	ldi	r21, 0x00	; 0
    1ef0:	bc 01       	movw	r22, r24
    1ef2:	cd 01       	movw	r24, r26
    1ef4:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <__divmodsi4>
    1ef8:	da 01       	movw	r26, r20
    1efa:	c9 01       	movw	r24, r18
    1efc:	89 83       	std	Y+1, r24	; 0x01
    1efe:	9a 83       	std	Y+2, r25	; 0x02
    1f00:	ab 83       	std	Y+3, r26	; 0x03
    1f02:	bc 83       	std	Y+4, r27	; 0x04
		Copy_f32FloatNumber = Copy_f32FloatNumber -Local_s32DecemalNum;

		Copy_f32FloatNumber*=100000;
		Local_s32DecemalNum = Copy_f32FloatNumber;

		while (Local_s32DecemalNum%10 == 0)
    1f04:	89 81       	ldd	r24, Y+1	; 0x01
    1f06:	9a 81       	ldd	r25, Y+2	; 0x02
    1f08:	ab 81       	ldd	r26, Y+3	; 0x03
    1f0a:	bc 81       	ldd	r27, Y+4	; 0x04
    1f0c:	2a e0       	ldi	r18, 0x0A	; 10
    1f0e:	30 e0       	ldi	r19, 0x00	; 0
    1f10:	40 e0       	ldi	r20, 0x00	; 0
    1f12:	50 e0       	ldi	r21, 0x00	; 0
    1f14:	bc 01       	movw	r22, r24
    1f16:	cd 01       	movw	r24, r26
    1f18:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <__divmodsi4>
    1f1c:	dc 01       	movw	r26, r24
    1f1e:	cb 01       	movw	r24, r22
    1f20:	00 97       	sbiw	r24, 0x00	; 0
    1f22:	a1 05       	cpc	r26, r1
    1f24:	b1 05       	cpc	r27, r1
    1f26:	e1 f2       	breq	.-72     	; 0x1ee0 <CLCD_voidWriteFloatNumber+0xda>
		{
			Local_s32DecemalNum/=10;
		}
		CLCD_VoidWriteNumber(Local_s32DecemalNum);
    1f28:	69 81       	ldd	r22, Y+1	; 0x01
    1f2a:	7a 81       	ldd	r23, Y+2	; 0x02
    1f2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f30:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <__floatsisf>
    1f34:	dc 01       	movw	r26, r24
    1f36:	cb 01       	movw	r24, r22
    1f38:	bc 01       	movw	r22, r24
    1f3a:	cd 01       	movw	r24, r26
    1f3c:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <CLCD_VoidWriteNumber>
	}
}
    1f40:	28 96       	adiw	r28, 0x08	; 8
    1f42:	0f b6       	in	r0, 0x3f	; 63
    1f44:	f8 94       	cli
    1f46:	de bf       	out	0x3e, r29	; 62
    1f48:	0f be       	out	0x3f, r0	; 63
    1f4a:	cd bf       	out	0x3d, r28	; 61
    1f4c:	cf 91       	pop	r28
    1f4e:	df 91       	pop	r29
    1f50:	08 95       	ret

00001f52 <CLCD_voidClear>:
//}



void CLCD_voidClear()
{
    1f52:	df 93       	push	r29
    1f54:	cf 93       	push	r28
    1f56:	cd b7       	in	r28, 0x3d	; 61
    1f58:	de b7       	in	r29, 0x3e	; 62
	C_LCD_voidSendCommand(0x01);
    1f5a:	81 e0       	ldi	r24, 0x01	; 1
    1f5c:	0e 94 0c 09 	call	0x1218	; 0x1218 <C_LCD_voidSendCommand>

}
    1f60:	cf 91       	pop	r28
    1f62:	df 91       	pop	r29
    1f64:	08 95       	ret

00001f66 <DIO_u8SetPinValue>:
//
//	return Local_u8ErrorState;
//}

u8 DIO_u8SetPinValue(u8 Copy_u8port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
    1f66:	df 93       	push	r29
    1f68:	cf 93       	push	r28
    1f6a:	cd b7       	in	r28, 0x3d	; 61
    1f6c:	de b7       	in	r29, 0x3e	; 62
    1f6e:	28 97       	sbiw	r28, 0x08	; 8
    1f70:	0f b6       	in	r0, 0x3f	; 63
    1f72:	f8 94       	cli
    1f74:	de bf       	out	0x3e, r29	; 62
    1f76:	0f be       	out	0x3f, r0	; 63
    1f78:	cd bf       	out	0x3d, r28	; 61
    1f7a:	8a 83       	std	Y+2, r24	; 0x02
    1f7c:	6b 83       	std	Y+3, r22	; 0x03
    1f7e:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    1f80:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin<=DIO_u8PIN7)
    1f82:	8b 81       	ldd	r24, Y+3	; 0x03
    1f84:	88 30       	cpi	r24, 0x08	; 8
    1f86:	08 f0       	brcs	.+2      	; 0x1f8a <DIO_u8SetPinValue+0x24>
    1f88:	f4 c0       	rjmp	.+488    	; 0x2172 <DIO_u8SetPinValue+0x20c>
	{
		if(Copy_u8Value == DIO_u8PIN_LOW)
    1f8a:	8c 81       	ldd	r24, Y+4	; 0x04
    1f8c:	88 23       	and	r24, r24
    1f8e:	09 f0       	breq	.+2      	; 0x1f92 <DIO_u8SetPinValue+0x2c>
    1f90:	77 c0       	rjmp	.+238    	; 0x2080 <DIO_u8SetPinValue+0x11a>
		{

			switch(Copy_u8port)
    1f92:	8a 81       	ldd	r24, Y+2	; 0x02
    1f94:	28 2f       	mov	r18, r24
    1f96:	30 e0       	ldi	r19, 0x00	; 0
    1f98:	38 87       	std	Y+8, r19	; 0x08
    1f9a:	2f 83       	std	Y+7, r18	; 0x07
    1f9c:	8f 81       	ldd	r24, Y+7	; 0x07
    1f9e:	98 85       	ldd	r25, Y+8	; 0x08
    1fa0:	81 30       	cpi	r24, 0x01	; 1
    1fa2:	91 05       	cpc	r25, r1
    1fa4:	59 f1       	breq	.+86     	; 0x1ffc <DIO_u8SetPinValue+0x96>
    1fa6:	2f 81       	ldd	r18, Y+7	; 0x07
    1fa8:	38 85       	ldd	r19, Y+8	; 0x08
    1faa:	22 30       	cpi	r18, 0x02	; 2
    1fac:	31 05       	cpc	r19, r1
    1fae:	2c f4       	brge	.+10     	; 0x1fba <DIO_u8SetPinValue+0x54>
    1fb0:	8f 81       	ldd	r24, Y+7	; 0x07
    1fb2:	98 85       	ldd	r25, Y+8	; 0x08
    1fb4:	00 97       	sbiw	r24, 0x00	; 0
    1fb6:	69 f0       	breq	.+26     	; 0x1fd2 <DIO_u8SetPinValue+0x6c>
    1fb8:	60 c0       	rjmp	.+192    	; 0x207a <DIO_u8SetPinValue+0x114>
    1fba:	2f 81       	ldd	r18, Y+7	; 0x07
    1fbc:	38 85       	ldd	r19, Y+8	; 0x08
    1fbe:	22 30       	cpi	r18, 0x02	; 2
    1fc0:	31 05       	cpc	r19, r1
    1fc2:	89 f1       	breq	.+98     	; 0x2026 <DIO_u8SetPinValue+0xc0>
    1fc4:	8f 81       	ldd	r24, Y+7	; 0x07
    1fc6:	98 85       	ldd	r25, Y+8	; 0x08
    1fc8:	83 30       	cpi	r24, 0x03	; 3
    1fca:	91 05       	cpc	r25, r1
    1fcc:	09 f4       	brne	.+2      	; 0x1fd0 <DIO_u8SetPinValue+0x6a>
    1fce:	40 c0       	rjmp	.+128    	; 0x2050 <DIO_u8SetPinValue+0xea>
    1fd0:	54 c0       	rjmp	.+168    	; 0x207a <DIO_u8SetPinValue+0x114>
			{
			case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
    1fd2:	ab e3       	ldi	r26, 0x3B	; 59
    1fd4:	b0 e0       	ldi	r27, 0x00	; 0
    1fd6:	eb e3       	ldi	r30, 0x3B	; 59
    1fd8:	f0 e0       	ldi	r31, 0x00	; 0
    1fda:	80 81       	ld	r24, Z
    1fdc:	48 2f       	mov	r20, r24
    1fde:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe0:	28 2f       	mov	r18, r24
    1fe2:	30 e0       	ldi	r19, 0x00	; 0
    1fe4:	81 e0       	ldi	r24, 0x01	; 1
    1fe6:	90 e0       	ldi	r25, 0x00	; 0
    1fe8:	02 2e       	mov	r0, r18
    1fea:	02 c0       	rjmp	.+4      	; 0x1ff0 <DIO_u8SetPinValue+0x8a>
    1fec:	88 0f       	add	r24, r24
    1fee:	99 1f       	adc	r25, r25
    1ff0:	0a 94       	dec	r0
    1ff2:	e2 f7       	brpl	.-8      	; 0x1fec <DIO_u8SetPinValue+0x86>
    1ff4:	80 95       	com	r24
    1ff6:	84 23       	and	r24, r20
    1ff8:	8c 93       	st	X, r24
    1ffa:	bd c0       	rjmp	.+378    	; 0x2176 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
    1ffc:	a8 e3       	ldi	r26, 0x38	; 56
    1ffe:	b0 e0       	ldi	r27, 0x00	; 0
    2000:	e8 e3       	ldi	r30, 0x38	; 56
    2002:	f0 e0       	ldi	r31, 0x00	; 0
    2004:	80 81       	ld	r24, Z
    2006:	48 2f       	mov	r20, r24
    2008:	8b 81       	ldd	r24, Y+3	; 0x03
    200a:	28 2f       	mov	r18, r24
    200c:	30 e0       	ldi	r19, 0x00	; 0
    200e:	81 e0       	ldi	r24, 0x01	; 1
    2010:	90 e0       	ldi	r25, 0x00	; 0
    2012:	02 2e       	mov	r0, r18
    2014:	02 c0       	rjmp	.+4      	; 0x201a <DIO_u8SetPinValue+0xb4>
    2016:	88 0f       	add	r24, r24
    2018:	99 1f       	adc	r25, r25
    201a:	0a 94       	dec	r0
    201c:	e2 f7       	brpl	.-8      	; 0x2016 <DIO_u8SetPinValue+0xb0>
    201e:	80 95       	com	r24
    2020:	84 23       	and	r24, r20
    2022:	8c 93       	st	X, r24
    2024:	a8 c0       	rjmp	.+336    	; 0x2176 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin); break;
    2026:	a5 e3       	ldi	r26, 0x35	; 53
    2028:	b0 e0       	ldi	r27, 0x00	; 0
    202a:	e5 e3       	ldi	r30, 0x35	; 53
    202c:	f0 e0       	ldi	r31, 0x00	; 0
    202e:	80 81       	ld	r24, Z
    2030:	48 2f       	mov	r20, r24
    2032:	8b 81       	ldd	r24, Y+3	; 0x03
    2034:	28 2f       	mov	r18, r24
    2036:	30 e0       	ldi	r19, 0x00	; 0
    2038:	81 e0       	ldi	r24, 0x01	; 1
    203a:	90 e0       	ldi	r25, 0x00	; 0
    203c:	02 2e       	mov	r0, r18
    203e:	02 c0       	rjmp	.+4      	; 0x2044 <DIO_u8SetPinValue+0xde>
    2040:	88 0f       	add	r24, r24
    2042:	99 1f       	adc	r25, r25
    2044:	0a 94       	dec	r0
    2046:	e2 f7       	brpl	.-8      	; 0x2040 <DIO_u8SetPinValue+0xda>
    2048:	80 95       	com	r24
    204a:	84 23       	and	r24, r20
    204c:	8c 93       	st	X, r24
    204e:	93 c0       	rjmp	.+294    	; 0x2176 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin); break;
    2050:	a2 e3       	ldi	r26, 0x32	; 50
    2052:	b0 e0       	ldi	r27, 0x00	; 0
    2054:	e2 e3       	ldi	r30, 0x32	; 50
    2056:	f0 e0       	ldi	r31, 0x00	; 0
    2058:	80 81       	ld	r24, Z
    205a:	48 2f       	mov	r20, r24
    205c:	8b 81       	ldd	r24, Y+3	; 0x03
    205e:	28 2f       	mov	r18, r24
    2060:	30 e0       	ldi	r19, 0x00	; 0
    2062:	81 e0       	ldi	r24, 0x01	; 1
    2064:	90 e0       	ldi	r25, 0x00	; 0
    2066:	02 2e       	mov	r0, r18
    2068:	02 c0       	rjmp	.+4      	; 0x206e <DIO_u8SetPinValue+0x108>
    206a:	88 0f       	add	r24, r24
    206c:	99 1f       	adc	r25, r25
    206e:	0a 94       	dec	r0
    2070:	e2 f7       	brpl	.-8      	; 0x206a <DIO_u8SetPinValue+0x104>
    2072:	80 95       	com	r24
    2074:	84 23       	and	r24, r20
    2076:	8c 93       	st	X, r24
    2078:	7e c0       	rjmp	.+252    	; 0x2176 <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState =1; break;
    207a:	81 e0       	ldi	r24, 0x01	; 1
    207c:	89 83       	std	Y+1, r24	; 0x01
    207e:	7b c0       	rjmp	.+246    	; 0x2176 <DIO_u8SetPinValue+0x210>

			}
		}
		else if(Copy_u8Value == DIO_u8PIN_HIGH)
    2080:	8c 81       	ldd	r24, Y+4	; 0x04
    2082:	81 30       	cpi	r24, 0x01	; 1
    2084:	09 f0       	breq	.+2      	; 0x2088 <DIO_u8SetPinValue+0x122>
    2086:	72 c0       	rjmp	.+228    	; 0x216c <DIO_u8SetPinValue+0x206>
		{

			switch(Copy_u8port)
    2088:	8a 81       	ldd	r24, Y+2	; 0x02
    208a:	28 2f       	mov	r18, r24
    208c:	30 e0       	ldi	r19, 0x00	; 0
    208e:	3e 83       	std	Y+6, r19	; 0x06
    2090:	2d 83       	std	Y+5, r18	; 0x05
    2092:	8d 81       	ldd	r24, Y+5	; 0x05
    2094:	9e 81       	ldd	r25, Y+6	; 0x06
    2096:	81 30       	cpi	r24, 0x01	; 1
    2098:	91 05       	cpc	r25, r1
    209a:	49 f1       	breq	.+82     	; 0x20ee <DIO_u8SetPinValue+0x188>
    209c:	2d 81       	ldd	r18, Y+5	; 0x05
    209e:	3e 81       	ldd	r19, Y+6	; 0x06
    20a0:	22 30       	cpi	r18, 0x02	; 2
    20a2:	31 05       	cpc	r19, r1
    20a4:	2c f4       	brge	.+10     	; 0x20b0 <DIO_u8SetPinValue+0x14a>
    20a6:	8d 81       	ldd	r24, Y+5	; 0x05
    20a8:	9e 81       	ldd	r25, Y+6	; 0x06
    20aa:	00 97       	sbiw	r24, 0x00	; 0
    20ac:	61 f0       	breq	.+24     	; 0x20c6 <DIO_u8SetPinValue+0x160>
    20ae:	5b c0       	rjmp	.+182    	; 0x2166 <DIO_u8SetPinValue+0x200>
    20b0:	2d 81       	ldd	r18, Y+5	; 0x05
    20b2:	3e 81       	ldd	r19, Y+6	; 0x06
    20b4:	22 30       	cpi	r18, 0x02	; 2
    20b6:	31 05       	cpc	r19, r1
    20b8:	71 f1       	breq	.+92     	; 0x2116 <DIO_u8SetPinValue+0x1b0>
    20ba:	8d 81       	ldd	r24, Y+5	; 0x05
    20bc:	9e 81       	ldd	r25, Y+6	; 0x06
    20be:	83 30       	cpi	r24, 0x03	; 3
    20c0:	91 05       	cpc	r25, r1
    20c2:	e9 f1       	breq	.+122    	; 0x213e <DIO_u8SetPinValue+0x1d8>
    20c4:	50 c0       	rjmp	.+160    	; 0x2166 <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
    20c6:	ab e3       	ldi	r26, 0x3B	; 59
    20c8:	b0 e0       	ldi	r27, 0x00	; 0
    20ca:	eb e3       	ldi	r30, 0x3B	; 59
    20cc:	f0 e0       	ldi	r31, 0x00	; 0
    20ce:	80 81       	ld	r24, Z
    20d0:	48 2f       	mov	r20, r24
    20d2:	8b 81       	ldd	r24, Y+3	; 0x03
    20d4:	28 2f       	mov	r18, r24
    20d6:	30 e0       	ldi	r19, 0x00	; 0
    20d8:	81 e0       	ldi	r24, 0x01	; 1
    20da:	90 e0       	ldi	r25, 0x00	; 0
    20dc:	02 2e       	mov	r0, r18
    20de:	02 c0       	rjmp	.+4      	; 0x20e4 <DIO_u8SetPinValue+0x17e>
    20e0:	88 0f       	add	r24, r24
    20e2:	99 1f       	adc	r25, r25
    20e4:	0a 94       	dec	r0
    20e6:	e2 f7       	brpl	.-8      	; 0x20e0 <DIO_u8SetPinValue+0x17a>
    20e8:	84 2b       	or	r24, r20
    20ea:	8c 93       	st	X, r24
    20ec:	44 c0       	rjmp	.+136    	; 0x2176 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
    20ee:	a8 e3       	ldi	r26, 0x38	; 56
    20f0:	b0 e0       	ldi	r27, 0x00	; 0
    20f2:	e8 e3       	ldi	r30, 0x38	; 56
    20f4:	f0 e0       	ldi	r31, 0x00	; 0
    20f6:	80 81       	ld	r24, Z
    20f8:	48 2f       	mov	r20, r24
    20fa:	8b 81       	ldd	r24, Y+3	; 0x03
    20fc:	28 2f       	mov	r18, r24
    20fe:	30 e0       	ldi	r19, 0x00	; 0
    2100:	81 e0       	ldi	r24, 0x01	; 1
    2102:	90 e0       	ldi	r25, 0x00	; 0
    2104:	02 2e       	mov	r0, r18
    2106:	02 c0       	rjmp	.+4      	; 0x210c <DIO_u8SetPinValue+0x1a6>
    2108:	88 0f       	add	r24, r24
    210a:	99 1f       	adc	r25, r25
    210c:	0a 94       	dec	r0
    210e:	e2 f7       	brpl	.-8      	; 0x2108 <DIO_u8SetPinValue+0x1a2>
    2110:	84 2b       	or	r24, r20
    2112:	8c 93       	st	X, r24
    2114:	30 c0       	rjmp	.+96     	; 0x2176 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin); break;
    2116:	a5 e3       	ldi	r26, 0x35	; 53
    2118:	b0 e0       	ldi	r27, 0x00	; 0
    211a:	e5 e3       	ldi	r30, 0x35	; 53
    211c:	f0 e0       	ldi	r31, 0x00	; 0
    211e:	80 81       	ld	r24, Z
    2120:	48 2f       	mov	r20, r24
    2122:	8b 81       	ldd	r24, Y+3	; 0x03
    2124:	28 2f       	mov	r18, r24
    2126:	30 e0       	ldi	r19, 0x00	; 0
    2128:	81 e0       	ldi	r24, 0x01	; 1
    212a:	90 e0       	ldi	r25, 0x00	; 0
    212c:	02 2e       	mov	r0, r18
    212e:	02 c0       	rjmp	.+4      	; 0x2134 <DIO_u8SetPinValue+0x1ce>
    2130:	88 0f       	add	r24, r24
    2132:	99 1f       	adc	r25, r25
    2134:	0a 94       	dec	r0
    2136:	e2 f7       	brpl	.-8      	; 0x2130 <DIO_u8SetPinValue+0x1ca>
    2138:	84 2b       	or	r24, r20
    213a:	8c 93       	st	X, r24
    213c:	1c c0       	rjmp	.+56     	; 0x2176 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin); break;
    213e:	a2 e3       	ldi	r26, 0x32	; 50
    2140:	b0 e0       	ldi	r27, 0x00	; 0
    2142:	e2 e3       	ldi	r30, 0x32	; 50
    2144:	f0 e0       	ldi	r31, 0x00	; 0
    2146:	80 81       	ld	r24, Z
    2148:	48 2f       	mov	r20, r24
    214a:	8b 81       	ldd	r24, Y+3	; 0x03
    214c:	28 2f       	mov	r18, r24
    214e:	30 e0       	ldi	r19, 0x00	; 0
    2150:	81 e0       	ldi	r24, 0x01	; 1
    2152:	90 e0       	ldi	r25, 0x00	; 0
    2154:	02 2e       	mov	r0, r18
    2156:	02 c0       	rjmp	.+4      	; 0x215c <DIO_u8SetPinValue+0x1f6>
    2158:	88 0f       	add	r24, r24
    215a:	99 1f       	adc	r25, r25
    215c:	0a 94       	dec	r0
    215e:	e2 f7       	brpl	.-8      	; 0x2158 <DIO_u8SetPinValue+0x1f2>
    2160:	84 2b       	or	r24, r20
    2162:	8c 93       	st	X, r24
    2164:	08 c0       	rjmp	.+16     	; 0x2176 <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState =1; break;
    2166:	81 e0       	ldi	r24, 0x01	; 1
    2168:	89 83       	std	Y+1, r24	; 0x01
    216a:	05 c0       	rjmp	.+10     	; 0x2176 <DIO_u8SetPinValue+0x210>

			}
		}
		else
		{
			Local_u8ErrorState = 1;
    216c:	81 e0       	ldi	r24, 0x01	; 1
    216e:	89 83       	std	Y+1, r24	; 0x01
    2170:	02 c0       	rjmp	.+4      	; 0x2176 <DIO_u8SetPinValue+0x210>
		}

	}
	else
	{
		Local_u8ErrorState = 1;
    2172:	81 e0       	ldi	r24, 0x01	; 1
    2174:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    2176:	89 81       	ldd	r24, Y+1	; 0x01
}
    2178:	28 96       	adiw	r28, 0x08	; 8
    217a:	0f b6       	in	r0, 0x3f	; 63
    217c:	f8 94       	cli
    217e:	de bf       	out	0x3e, r29	; 62
    2180:	0f be       	out	0x3f, r0	; 63
    2182:	cd bf       	out	0x3d, r28	; 61
    2184:	cf 91       	pop	r28
    2186:	df 91       	pop	r29
    2188:	08 95       	ret

0000218a <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8port, u8 Copy_u8Value)
{
    218a:	df 93       	push	r29
    218c:	cf 93       	push	r28
    218e:	00 d0       	rcall	.+0      	; 0x2190 <DIO_u8SetPortValue+0x6>
    2190:	00 d0       	rcall	.+0      	; 0x2192 <DIO_u8SetPortValue+0x8>
    2192:	0f 92       	push	r0
    2194:	cd b7       	in	r28, 0x3d	; 61
    2196:	de b7       	in	r29, 0x3e	; 62
    2198:	8a 83       	std	Y+2, r24	; 0x02
    219a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    219c:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8port<=DIO_u8PORTD)
    219e:	8a 81       	ldd	r24, Y+2	; 0x02
    21a0:	84 30       	cpi	r24, 0x04	; 4
    21a2:	b0 f5       	brcc	.+108    	; 0x2210 <DIO_u8SetPortValue+0x86>
	{
		switch(Copy_u8port)
    21a4:	8a 81       	ldd	r24, Y+2	; 0x02
    21a6:	28 2f       	mov	r18, r24
    21a8:	30 e0       	ldi	r19, 0x00	; 0
    21aa:	3d 83       	std	Y+5, r19	; 0x05
    21ac:	2c 83       	std	Y+4, r18	; 0x04
    21ae:	8c 81       	ldd	r24, Y+4	; 0x04
    21b0:	9d 81       	ldd	r25, Y+5	; 0x05
    21b2:	81 30       	cpi	r24, 0x01	; 1
    21b4:	91 05       	cpc	r25, r1
    21b6:	d1 f0       	breq	.+52     	; 0x21ec <DIO_u8SetPortValue+0x62>
    21b8:	2c 81       	ldd	r18, Y+4	; 0x04
    21ba:	3d 81       	ldd	r19, Y+5	; 0x05
    21bc:	22 30       	cpi	r18, 0x02	; 2
    21be:	31 05       	cpc	r19, r1
    21c0:	2c f4       	brge	.+10     	; 0x21cc <DIO_u8SetPortValue+0x42>
    21c2:	8c 81       	ldd	r24, Y+4	; 0x04
    21c4:	9d 81       	ldd	r25, Y+5	; 0x05
    21c6:	00 97       	sbiw	r24, 0x00	; 0
    21c8:	61 f0       	breq	.+24     	; 0x21e2 <DIO_u8SetPortValue+0x58>
    21ca:	1f c0       	rjmp	.+62     	; 0x220a <DIO_u8SetPortValue+0x80>
    21cc:	2c 81       	ldd	r18, Y+4	; 0x04
    21ce:	3d 81       	ldd	r19, Y+5	; 0x05
    21d0:	22 30       	cpi	r18, 0x02	; 2
    21d2:	31 05       	cpc	r19, r1
    21d4:	81 f0       	breq	.+32     	; 0x21f6 <DIO_u8SetPortValue+0x6c>
    21d6:	8c 81       	ldd	r24, Y+4	; 0x04
    21d8:	9d 81       	ldd	r25, Y+5	; 0x05
    21da:	83 30       	cpi	r24, 0x03	; 3
    21dc:	91 05       	cpc	r25, r1
    21de:	81 f0       	breq	.+32     	; 0x2200 <DIO_u8SetPortValue+0x76>
    21e0:	14 c0       	rjmp	.+40     	; 0x220a <DIO_u8SetPortValue+0x80>
		{
		case DIO_u8PORTA: PORTA = Copy_u8Value; break;
    21e2:	eb e3       	ldi	r30, 0x3B	; 59
    21e4:	f0 e0       	ldi	r31, 0x00	; 0
    21e6:	8b 81       	ldd	r24, Y+3	; 0x03
    21e8:	80 83       	st	Z, r24
    21ea:	14 c0       	rjmp	.+40     	; 0x2214 <DIO_u8SetPortValue+0x8a>
		case DIO_u8PORTB: PORTB = Copy_u8Value; break;
    21ec:	e8 e3       	ldi	r30, 0x38	; 56
    21ee:	f0 e0       	ldi	r31, 0x00	; 0
    21f0:	8b 81       	ldd	r24, Y+3	; 0x03
    21f2:	80 83       	st	Z, r24
    21f4:	0f c0       	rjmp	.+30     	; 0x2214 <DIO_u8SetPortValue+0x8a>
		case DIO_u8PORTC: PORTC = Copy_u8Value; break;
    21f6:	e5 e3       	ldi	r30, 0x35	; 53
    21f8:	f0 e0       	ldi	r31, 0x00	; 0
    21fa:	8b 81       	ldd	r24, Y+3	; 0x03
    21fc:	80 83       	st	Z, r24
    21fe:	0a c0       	rjmp	.+20     	; 0x2214 <DIO_u8SetPortValue+0x8a>
		case DIO_u8PORTD: PORTD = Copy_u8Value; break;
    2200:	e2 e3       	ldi	r30, 0x32	; 50
    2202:	f0 e0       	ldi	r31, 0x00	; 0
    2204:	8b 81       	ldd	r24, Y+3	; 0x03
    2206:	80 83       	st	Z, r24
    2208:	05 c0       	rjmp	.+10     	; 0x2214 <DIO_u8SetPortValue+0x8a>
		default: Local_u8ErrorState =1; break;
    220a:	81 e0       	ldi	r24, 0x01	; 1
    220c:	89 83       	std	Y+1, r24	; 0x01
    220e:	02 c0       	rjmp	.+4      	; 0x2214 <DIO_u8SetPortValue+0x8a>

		}
	}
	else
	{
		Local_u8ErrorState = 1;
    2210:	81 e0       	ldi	r24, 0x01	; 1
    2212:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_u8ErrorState;
    2214:	89 81       	ldd	r24, Y+1	; 0x01
}
    2216:	0f 90       	pop	r0
    2218:	0f 90       	pop	r0
    221a:	0f 90       	pop	r0
    221c:	0f 90       	pop	r0
    221e:	0f 90       	pop	r0
    2220:	cf 91       	pop	r28
    2222:	df 91       	pop	r29
    2224:	08 95       	ret

00002226 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8port, u8 Copy_u8Pin, u8* Copy_Pu8Value)
{
    2226:	df 93       	push	r29
    2228:	cf 93       	push	r28
    222a:	cd b7       	in	r28, 0x3d	; 61
    222c:	de b7       	in	r29, 0x3e	; 62
    222e:	27 97       	sbiw	r28, 0x07	; 7
    2230:	0f b6       	in	r0, 0x3f	; 63
    2232:	f8 94       	cli
    2234:	de bf       	out	0x3e, r29	; 62
    2236:	0f be       	out	0x3f, r0	; 63
    2238:	cd bf       	out	0x3d, r28	; 61
    223a:	8a 83       	std	Y+2, r24	; 0x02
    223c:	6b 83       	std	Y+3, r22	; 0x03
    223e:	5d 83       	std	Y+5, r21	; 0x05
    2240:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    2242:	19 82       	std	Y+1, r1	; 0x01

	if((Copy_Pu8Value != NULL )&&(Copy_u8Pin<=DIO_u8PIN7))
    2244:	8c 81       	ldd	r24, Y+4	; 0x04
    2246:	9d 81       	ldd	r25, Y+5	; 0x05
    2248:	00 97       	sbiw	r24, 0x00	; 0
    224a:	09 f4       	brne	.+2      	; 0x224e <DIO_u8GetPinValue+0x28>
    224c:	78 c0       	rjmp	.+240    	; 0x233e <DIO_u8GetPinValue+0x118>
    224e:	8b 81       	ldd	r24, Y+3	; 0x03
    2250:	88 30       	cpi	r24, 0x08	; 8
    2252:	08 f0       	brcs	.+2      	; 0x2256 <DIO_u8GetPinValue+0x30>
    2254:	74 c0       	rjmp	.+232    	; 0x233e <DIO_u8GetPinValue+0x118>
	{


			switch(Copy_u8port)
    2256:	8a 81       	ldd	r24, Y+2	; 0x02
    2258:	28 2f       	mov	r18, r24
    225a:	30 e0       	ldi	r19, 0x00	; 0
    225c:	3f 83       	std	Y+7, r19	; 0x07
    225e:	2e 83       	std	Y+6, r18	; 0x06
    2260:	4e 81       	ldd	r20, Y+6	; 0x06
    2262:	5f 81       	ldd	r21, Y+7	; 0x07
    2264:	41 30       	cpi	r20, 0x01	; 1
    2266:	51 05       	cpc	r21, r1
    2268:	59 f1       	breq	.+86     	; 0x22c0 <DIO_u8GetPinValue+0x9a>
    226a:	8e 81       	ldd	r24, Y+6	; 0x06
    226c:	9f 81       	ldd	r25, Y+7	; 0x07
    226e:	82 30       	cpi	r24, 0x02	; 2
    2270:	91 05       	cpc	r25, r1
    2272:	34 f4       	brge	.+12     	; 0x2280 <DIO_u8GetPinValue+0x5a>
    2274:	2e 81       	ldd	r18, Y+6	; 0x06
    2276:	3f 81       	ldd	r19, Y+7	; 0x07
    2278:	21 15       	cp	r18, r1
    227a:	31 05       	cpc	r19, r1
    227c:	69 f0       	breq	.+26     	; 0x2298 <DIO_u8GetPinValue+0x72>
    227e:	5c c0       	rjmp	.+184    	; 0x2338 <DIO_u8GetPinValue+0x112>
    2280:	4e 81       	ldd	r20, Y+6	; 0x06
    2282:	5f 81       	ldd	r21, Y+7	; 0x07
    2284:	42 30       	cpi	r20, 0x02	; 2
    2286:	51 05       	cpc	r21, r1
    2288:	79 f1       	breq	.+94     	; 0x22e8 <DIO_u8GetPinValue+0xc2>
    228a:	8e 81       	ldd	r24, Y+6	; 0x06
    228c:	9f 81       	ldd	r25, Y+7	; 0x07
    228e:	83 30       	cpi	r24, 0x03	; 3
    2290:	91 05       	cpc	r25, r1
    2292:	09 f4       	brne	.+2      	; 0x2296 <DIO_u8GetPinValue+0x70>
    2294:	3d c0       	rjmp	.+122    	; 0x2310 <DIO_u8GetPinValue+0xea>
    2296:	50 c0       	rjmp	.+160    	; 0x2338 <DIO_u8GetPinValue+0x112>
			{
			case DIO_u8PORTA: * Copy_Pu8Value = GET_BIT(PINA,Copy_u8Pin); break;
    2298:	e9 e3       	ldi	r30, 0x39	; 57
    229a:	f0 e0       	ldi	r31, 0x00	; 0
    229c:	80 81       	ld	r24, Z
    229e:	28 2f       	mov	r18, r24
    22a0:	30 e0       	ldi	r19, 0x00	; 0
    22a2:	8b 81       	ldd	r24, Y+3	; 0x03
    22a4:	88 2f       	mov	r24, r24
    22a6:	90 e0       	ldi	r25, 0x00	; 0
    22a8:	a9 01       	movw	r20, r18
    22aa:	02 c0       	rjmp	.+4      	; 0x22b0 <DIO_u8GetPinValue+0x8a>
    22ac:	55 95       	asr	r21
    22ae:	47 95       	ror	r20
    22b0:	8a 95       	dec	r24
    22b2:	e2 f7       	brpl	.-8      	; 0x22ac <DIO_u8GetPinValue+0x86>
    22b4:	ca 01       	movw	r24, r20
    22b6:	81 70       	andi	r24, 0x01	; 1
    22b8:	ec 81       	ldd	r30, Y+4	; 0x04
    22ba:	fd 81       	ldd	r31, Y+5	; 0x05
    22bc:	80 83       	st	Z, r24
    22be:	41 c0       	rjmp	.+130    	; 0x2342 <DIO_u8GetPinValue+0x11c>
			case DIO_u8PORTB: * Copy_Pu8Value = GET_BIT(PINB,Copy_u8Pin); break;
    22c0:	e6 e3       	ldi	r30, 0x36	; 54
    22c2:	f0 e0       	ldi	r31, 0x00	; 0
    22c4:	80 81       	ld	r24, Z
    22c6:	28 2f       	mov	r18, r24
    22c8:	30 e0       	ldi	r19, 0x00	; 0
    22ca:	8b 81       	ldd	r24, Y+3	; 0x03
    22cc:	88 2f       	mov	r24, r24
    22ce:	90 e0       	ldi	r25, 0x00	; 0
    22d0:	a9 01       	movw	r20, r18
    22d2:	02 c0       	rjmp	.+4      	; 0x22d8 <DIO_u8GetPinValue+0xb2>
    22d4:	55 95       	asr	r21
    22d6:	47 95       	ror	r20
    22d8:	8a 95       	dec	r24
    22da:	e2 f7       	brpl	.-8      	; 0x22d4 <DIO_u8GetPinValue+0xae>
    22dc:	ca 01       	movw	r24, r20
    22de:	81 70       	andi	r24, 0x01	; 1
    22e0:	ec 81       	ldd	r30, Y+4	; 0x04
    22e2:	fd 81       	ldd	r31, Y+5	; 0x05
    22e4:	80 83       	st	Z, r24
    22e6:	2d c0       	rjmp	.+90     	; 0x2342 <DIO_u8GetPinValue+0x11c>
			case DIO_u8PORTC: * Copy_Pu8Value = GET_BIT(PINC,Copy_u8Pin); break;
    22e8:	e3 e3       	ldi	r30, 0x33	; 51
    22ea:	f0 e0       	ldi	r31, 0x00	; 0
    22ec:	80 81       	ld	r24, Z
    22ee:	28 2f       	mov	r18, r24
    22f0:	30 e0       	ldi	r19, 0x00	; 0
    22f2:	8b 81       	ldd	r24, Y+3	; 0x03
    22f4:	88 2f       	mov	r24, r24
    22f6:	90 e0       	ldi	r25, 0x00	; 0
    22f8:	a9 01       	movw	r20, r18
    22fa:	02 c0       	rjmp	.+4      	; 0x2300 <DIO_u8GetPinValue+0xda>
    22fc:	55 95       	asr	r21
    22fe:	47 95       	ror	r20
    2300:	8a 95       	dec	r24
    2302:	e2 f7       	brpl	.-8      	; 0x22fc <DIO_u8GetPinValue+0xd6>
    2304:	ca 01       	movw	r24, r20
    2306:	81 70       	andi	r24, 0x01	; 1
    2308:	ec 81       	ldd	r30, Y+4	; 0x04
    230a:	fd 81       	ldd	r31, Y+5	; 0x05
    230c:	80 83       	st	Z, r24
    230e:	19 c0       	rjmp	.+50     	; 0x2342 <DIO_u8GetPinValue+0x11c>
			case DIO_u8PORTD: * Copy_Pu8Value = GET_BIT(PIND,Copy_u8Pin); break;
    2310:	e0 e3       	ldi	r30, 0x30	; 48
    2312:	f0 e0       	ldi	r31, 0x00	; 0
    2314:	80 81       	ld	r24, Z
    2316:	28 2f       	mov	r18, r24
    2318:	30 e0       	ldi	r19, 0x00	; 0
    231a:	8b 81       	ldd	r24, Y+3	; 0x03
    231c:	88 2f       	mov	r24, r24
    231e:	90 e0       	ldi	r25, 0x00	; 0
    2320:	a9 01       	movw	r20, r18
    2322:	02 c0       	rjmp	.+4      	; 0x2328 <DIO_u8GetPinValue+0x102>
    2324:	55 95       	asr	r21
    2326:	47 95       	ror	r20
    2328:	8a 95       	dec	r24
    232a:	e2 f7       	brpl	.-8      	; 0x2324 <DIO_u8GetPinValue+0xfe>
    232c:	ca 01       	movw	r24, r20
    232e:	81 70       	andi	r24, 0x01	; 1
    2330:	ec 81       	ldd	r30, Y+4	; 0x04
    2332:	fd 81       	ldd	r31, Y+5	; 0x05
    2334:	80 83       	st	Z, r24
    2336:	05 c0       	rjmp	.+10     	; 0x2342 <DIO_u8GetPinValue+0x11c>
			default: Local_u8ErrorState =1; break;
    2338:	81 e0       	ldi	r24, 0x01	; 1
    233a:	89 83       	std	Y+1, r24	; 0x01
    233c:	02 c0       	rjmp	.+4      	; 0x2342 <DIO_u8GetPinValue+0x11c>

			}
	}
	else
	{
		Local_u8ErrorState = 1;
    233e:	81 e0       	ldi	r24, 0x01	; 1
    2340:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    2342:	89 81       	ldd	r24, Y+1	; 0x01
}
    2344:	27 96       	adiw	r28, 0x07	; 7
    2346:	0f b6       	in	r0, 0x3f	; 63
    2348:	f8 94       	cli
    234a:	de bf       	out	0x3e, r29	; 62
    234c:	0f be       	out	0x3f, r0	; 63
    234e:	cd bf       	out	0x3d, r28	; 61
    2350:	cf 91       	pop	r28
    2352:	df 91       	pop	r29
    2354:	08 95       	ret

00002356 <DIO_u8AndWithPort>:

u8 DIO_u8AndWithPort(u8 Copy_u8port, u8 Copy_u8Value)
{
    2356:	df 93       	push	r29
    2358:	cf 93       	push	r28
    235a:	00 d0       	rcall	.+0      	; 0x235c <DIO_u8AndWithPort+0x6>
    235c:	00 d0       	rcall	.+0      	; 0x235e <DIO_u8AndWithPort+0x8>
    235e:	0f 92       	push	r0
    2360:	cd b7       	in	r28, 0x3d	; 61
    2362:	de b7       	in	r29, 0x3e	; 62
    2364:	8a 83       	std	Y+2, r24	; 0x02
    2366:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Result = 0;
    2368:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8port)
    236a:	8a 81       	ldd	r24, Y+2	; 0x02
    236c:	28 2f       	mov	r18, r24
    236e:	30 e0       	ldi	r19, 0x00	; 0
    2370:	3d 83       	std	Y+5, r19	; 0x05
    2372:	2c 83       	std	Y+4, r18	; 0x04
    2374:	8c 81       	ldd	r24, Y+4	; 0x04
    2376:	9d 81       	ldd	r25, Y+5	; 0x05
    2378:	81 30       	cpi	r24, 0x01	; 1
    237a:	91 05       	cpc	r25, r1
    237c:	e1 f0       	breq	.+56     	; 0x23b6 <DIO_u8AndWithPort+0x60>
    237e:	2c 81       	ldd	r18, Y+4	; 0x04
    2380:	3d 81       	ldd	r19, Y+5	; 0x05
    2382:	22 30       	cpi	r18, 0x02	; 2
    2384:	31 05       	cpc	r19, r1
    2386:	2c f4       	brge	.+10     	; 0x2392 <DIO_u8AndWithPort+0x3c>
    2388:	8c 81       	ldd	r24, Y+4	; 0x04
    238a:	9d 81       	ldd	r25, Y+5	; 0x05
    238c:	00 97       	sbiw	r24, 0x00	; 0
    238e:	61 f0       	breq	.+24     	; 0x23a8 <DIO_u8AndWithPort+0x52>
    2390:	26 c0       	rjmp	.+76     	; 0x23de <DIO_u8AndWithPort+0x88>
    2392:	2c 81       	ldd	r18, Y+4	; 0x04
    2394:	3d 81       	ldd	r19, Y+5	; 0x05
    2396:	22 30       	cpi	r18, 0x02	; 2
    2398:	31 05       	cpc	r19, r1
    239a:	a1 f0       	breq	.+40     	; 0x23c4 <DIO_u8AndWithPort+0x6e>
    239c:	8c 81       	ldd	r24, Y+4	; 0x04
    239e:	9d 81       	ldd	r25, Y+5	; 0x05
    23a0:	83 30       	cpi	r24, 0x03	; 3
    23a2:	91 05       	cpc	r25, r1
    23a4:	b1 f0       	breq	.+44     	; 0x23d2 <DIO_u8AndWithPort+0x7c>
    23a6:	1b c0       	rjmp	.+54     	; 0x23de <DIO_u8AndWithPort+0x88>
			{
			case DIO_u8PORTA: Local_u8Result= PORTA & Copy_u8Value; break;
    23a8:	eb e3       	ldi	r30, 0x3B	; 59
    23aa:	f0 e0       	ldi	r31, 0x00	; 0
    23ac:	90 81       	ld	r25, Z
    23ae:	8b 81       	ldd	r24, Y+3	; 0x03
    23b0:	89 23       	and	r24, r25
    23b2:	89 83       	std	Y+1, r24	; 0x01
    23b4:	14 c0       	rjmp	.+40     	; 0x23de <DIO_u8AndWithPort+0x88>
			case DIO_u8PORTB: Local_u8Result= PORTB & Copy_u8Value; break;
    23b6:	e8 e3       	ldi	r30, 0x38	; 56
    23b8:	f0 e0       	ldi	r31, 0x00	; 0
    23ba:	90 81       	ld	r25, Z
    23bc:	8b 81       	ldd	r24, Y+3	; 0x03
    23be:	89 23       	and	r24, r25
    23c0:	89 83       	std	Y+1, r24	; 0x01
    23c2:	0d c0       	rjmp	.+26     	; 0x23de <DIO_u8AndWithPort+0x88>
			case DIO_u8PORTC: Local_u8Result= PORTC & Copy_u8Value; break;
    23c4:	e5 e3       	ldi	r30, 0x35	; 53
    23c6:	f0 e0       	ldi	r31, 0x00	; 0
    23c8:	90 81       	ld	r25, Z
    23ca:	8b 81       	ldd	r24, Y+3	; 0x03
    23cc:	89 23       	and	r24, r25
    23ce:	89 83       	std	Y+1, r24	; 0x01
    23d0:	06 c0       	rjmp	.+12     	; 0x23de <DIO_u8AndWithPort+0x88>
			case DIO_u8PORTD: Local_u8Result = PORTD & Copy_u8Value; break;
    23d2:	e2 e3       	ldi	r30, 0x32	; 50
    23d4:	f0 e0       	ldi	r31, 0x00	; 0
    23d6:	90 81       	ld	r25, Z
    23d8:	8b 81       	ldd	r24, Y+3	; 0x03
    23da:	89 23       	and	r24, r25
    23dc:	89 83       	std	Y+1, r24	; 0x01
			default:  break;


			}
	return Local_u8Result;
    23de:	89 81       	ldd	r24, Y+1	; 0x01
}
    23e0:	0f 90       	pop	r0
    23e2:	0f 90       	pop	r0
    23e4:	0f 90       	pop	r0
    23e6:	0f 90       	pop	r0
    23e8:	0f 90       	pop	r0
    23ea:	cf 91       	pop	r28
    23ec:	df 91       	pop	r29
    23ee:	08 95       	ret

000023f0 <GIE_VoidEnable>:

#include "GIE_interface.h"
#include "GIE_register.h"

void GIE_VoidEnable(void)
{
    23f0:	df 93       	push	r29
    23f2:	cf 93       	push	r28
    23f4:	cd b7       	in	r28, 0x3d	; 61
    23f6:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
    23f8:	af e5       	ldi	r26, 0x5F	; 95
    23fa:	b0 e0       	ldi	r27, 0x00	; 0
    23fc:	ef e5       	ldi	r30, 0x5F	; 95
    23fe:	f0 e0       	ldi	r31, 0x00	; 0
    2400:	80 81       	ld	r24, Z
    2402:	80 68       	ori	r24, 0x80	; 128
    2404:	8c 93       	st	X, r24
}
    2406:	cf 91       	pop	r28
    2408:	df 91       	pop	r29
    240a:	08 95       	ret

0000240c <GIE_VoidDisable>:
void GIE_VoidDisable(void)
{
    240c:	df 93       	push	r29
    240e:	cf 93       	push	r28
    2410:	cd b7       	in	r28, 0x3d	; 61
    2412:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,SREG_I);
    2414:	af e5       	ldi	r26, 0x5F	; 95
    2416:	b0 e0       	ldi	r27, 0x00	; 0
    2418:	ef e5       	ldi	r30, 0x5F	; 95
    241a:	f0 e0       	ldi	r31, 0x00	; 0
    241c:	80 81       	ld	r24, Z
    241e:	8f 77       	andi	r24, 0x7F	; 127
    2420:	8c 93       	st	X, r24
}
    2422:	cf 91       	pop	r28
    2424:	df 91       	pop	r29
    2426:	08 95       	ret

00002428 <KPD_u8GetPressedKey>:
#include "KPD_private.h"



u8 KPD_u8GetPressedKey(void)
{
    2428:	df 93       	push	r29
    242a:	cf 93       	push	r28
    242c:	00 d0       	rcall	.+0      	; 0x242e <KPD_u8GetPressedKey+0x6>
    242e:	00 d0       	rcall	.+0      	; 0x2430 <KPD_u8GetPressedKey+0x8>
    2430:	0f 92       	push	r0
    2432:	cd b7       	in	r28, 0x3d	; 61
    2434:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8PressedKey = KPD_NO_PRESSED_KEY;
    2436:	8f ef       	ldi	r24, 0xFF	; 255
    2438:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8PinState;
	static u8 Local_u8KPDColArr[COLUMN_NUM]= {KPD_COL_0_PIN,KPD_COL_1_PIN,KPD_COL_2_PIN,KPD_COL_3_PIN };
	static u8 Local_u8KPDRowArr[ROW_NUM]= {KPD_ROW_0_PIN,KPD_ROW_1_PIN,KPD_ROW_2_PIN,KPD_ROW_3_PIN };
	static u8 Local_u8KPDArr[ROW_NUM][COLUMN_NUM]=KPD_ARR_VAL;

	for (Local_u8ColCounter=0;Local_u8ColCounter<COLUMN_NUM;Local_u8ColCounter++)
    243a:	19 82       	std	Y+1, r1	; 0x01
    243c:	5e c0       	rjmp	.+188    	; 0x24fa <KPD_u8GetPressedKey+0xd2>
	{
		/* Activate current Cloumn*/
		DIO_u8SetPinValue(KPD_COL_PORT,Local_u8KPDColArr[Local_u8ColCounter],DIO_u8PIN_LOW);
    243e:	89 81       	ldd	r24, Y+1	; 0x01
    2440:	88 2f       	mov	r24, r24
    2442:	90 e0       	ldi	r25, 0x00	; 0
    2444:	fc 01       	movw	r30, r24
    2446:	e7 5e       	subi	r30, 0xE7	; 231
    2448:	fd 4f       	sbci	r31, 0xFD	; 253
    244a:	90 81       	ld	r25, Z
    244c:	81 e0       	ldi	r24, 0x01	; 1
    244e:	69 2f       	mov	r22, r25
    2450:	40 e0       	ldi	r20, 0x00	; 0
    2452:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <DIO_u8SetPinValue>

		for(Local_u8RowCounter=0;Local_u8RowCounter<ROW_NUM;Local_u8RowCounter++)
    2456:	1a 82       	std	Y+2, r1	; 0x02
    2458:	3d c0       	rjmp	.+122    	; 0x24d4 <KPD_u8GetPressedKey+0xac>
		{
			/* Read the current row */
			DIO_u8GetPinValue(KPD_ROW_PORT,Local_u8KPDRowArr[Local_u8RowCounter],&Local_u8PinState);
    245a:	8a 81       	ldd	r24, Y+2	; 0x02
    245c:	88 2f       	mov	r24, r24
    245e:	90 e0       	ldi	r25, 0x00	; 0
    2460:	fc 01       	movw	r30, r24
    2462:	eb 5e       	subi	r30, 0xEB	; 235
    2464:	fd 4f       	sbci	r31, 0xFD	; 253
    2466:	90 81       	ld	r25, Z
    2468:	9e 01       	movw	r18, r28
    246a:	2c 5f       	subi	r18, 0xFC	; 252
    246c:	3f 4f       	sbci	r19, 0xFF	; 255
    246e:	81 e0       	ldi	r24, 0x01	; 1
    2470:	69 2f       	mov	r22, r25
    2472:	a9 01       	movw	r20, r18
    2474:	0e 94 13 11 	call	0x2226	; 0x2226 <DIO_u8GetPinValue>
			/* Check if switch is pressed */

			if(DIO_u8PIN_LOW == Local_u8PinState )
    2478:	8c 81       	ldd	r24, Y+4	; 0x04
    247a:	88 23       	and	r24, r24
    247c:	41 f5       	brne	.+80     	; 0x24ce <KPD_u8GetPressedKey+0xa6>
			{

				Local_u8PressedKey = Local_u8KPDArr[Local_u8RowCounter][Local_u8ColCounter];
    247e:	8a 81       	ldd	r24, Y+2	; 0x02
    2480:	48 2f       	mov	r20, r24
    2482:	50 e0       	ldi	r21, 0x00	; 0
    2484:	89 81       	ldd	r24, Y+1	; 0x01
    2486:	28 2f       	mov	r18, r24
    2488:	30 e0       	ldi	r19, 0x00	; 0
    248a:	ca 01       	movw	r24, r20
    248c:	88 0f       	add	r24, r24
    248e:	99 1f       	adc	r25, r25
    2490:	88 0f       	add	r24, r24
    2492:	99 1f       	adc	r25, r25
    2494:	82 0f       	add	r24, r18
    2496:	93 1f       	adc	r25, r19
    2498:	fc 01       	movw	r30, r24
    249a:	eb 5f       	subi	r30, 0xFB	; 251
    249c:	fd 4f       	sbci	r31, 0xFD	; 253
    249e:	80 81       	ld	r24, Z
    24a0:	8b 83       	std	Y+3, r24	; 0x03
    24a2:	0f c0       	rjmp	.+30     	; 0x24c2 <KPD_u8GetPressedKey+0x9a>
				/* Polling (busy waiting ) until the key is released */
				while (DIO_u8PIN_LOW == Local_u8PinState)
				{
					DIO_u8GetPinValue(KPD_ROW_PORT,Local_u8KPDRowArr[Local_u8RowCounter],&Local_u8PinState);
    24a4:	8a 81       	ldd	r24, Y+2	; 0x02
    24a6:	88 2f       	mov	r24, r24
    24a8:	90 e0       	ldi	r25, 0x00	; 0
    24aa:	fc 01       	movw	r30, r24
    24ac:	eb 5e       	subi	r30, 0xEB	; 235
    24ae:	fd 4f       	sbci	r31, 0xFD	; 253
    24b0:	90 81       	ld	r25, Z
    24b2:	9e 01       	movw	r18, r28
    24b4:	2c 5f       	subi	r18, 0xFC	; 252
    24b6:	3f 4f       	sbci	r19, 0xFF	; 255
    24b8:	81 e0       	ldi	r24, 0x01	; 1
    24ba:	69 2f       	mov	r22, r25
    24bc:	a9 01       	movw	r20, r18
    24be:	0e 94 13 11 	call	0x2226	; 0x2226 <DIO_u8GetPinValue>
			if(DIO_u8PIN_LOW == Local_u8PinState )
			{

				Local_u8PressedKey = Local_u8KPDArr[Local_u8RowCounter][Local_u8ColCounter];
				/* Polling (busy waiting ) until the key is released */
				while (DIO_u8PIN_LOW == Local_u8PinState)
    24c2:	8c 81       	ldd	r24, Y+4	; 0x04
    24c4:	88 23       	and	r24, r24
    24c6:	71 f3       	breq	.-36     	; 0x24a4 <KPD_u8GetPressedKey+0x7c>
				{
					DIO_u8GetPinValue(KPD_ROW_PORT,Local_u8KPDRowArr[Local_u8RowCounter],&Local_u8PinState);

				}
				return Local_u8PressedKey;
    24c8:	8b 81       	ldd	r24, Y+3	; 0x03
    24ca:	8d 83       	std	Y+5, r24	; 0x05
    24cc:	1c c0       	rjmp	.+56     	; 0x2506 <KPD_u8GetPressedKey+0xde>
	for (Local_u8ColCounter=0;Local_u8ColCounter<COLUMN_NUM;Local_u8ColCounter++)
	{
		/* Activate current Cloumn*/
		DIO_u8SetPinValue(KPD_COL_PORT,Local_u8KPDColArr[Local_u8ColCounter],DIO_u8PIN_LOW);

		for(Local_u8RowCounter=0;Local_u8RowCounter<ROW_NUM;Local_u8RowCounter++)
    24ce:	8a 81       	ldd	r24, Y+2	; 0x02
    24d0:	8f 5f       	subi	r24, 0xFF	; 255
    24d2:	8a 83       	std	Y+2, r24	; 0x02
    24d4:	8a 81       	ldd	r24, Y+2	; 0x02
    24d6:	84 30       	cpi	r24, 0x04	; 4
    24d8:	08 f4       	brcc	.+2      	; 0x24dc <KPD_u8GetPressedKey+0xb4>
    24da:	bf cf       	rjmp	.-130    	; 0x245a <KPD_u8GetPressedKey+0x32>

		}

		/* Deactivate the current column */

		DIO_u8SetPinValue(KPD_COL_PORT,Local_u8KPDColArr[Local_u8ColCounter],DIO_u8PIN_HIGH);
    24dc:	89 81       	ldd	r24, Y+1	; 0x01
    24de:	88 2f       	mov	r24, r24
    24e0:	90 e0       	ldi	r25, 0x00	; 0
    24e2:	fc 01       	movw	r30, r24
    24e4:	e7 5e       	subi	r30, 0xE7	; 231
    24e6:	fd 4f       	sbci	r31, 0xFD	; 253
    24e8:	90 81       	ld	r25, Z
    24ea:	81 e0       	ldi	r24, 0x01	; 1
    24ec:	69 2f       	mov	r22, r25
    24ee:	41 e0       	ldi	r20, 0x01	; 1
    24f0:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <DIO_u8SetPinValue>
	u8 Local_u8PinState;
	static u8 Local_u8KPDColArr[COLUMN_NUM]= {KPD_COL_0_PIN,KPD_COL_1_PIN,KPD_COL_2_PIN,KPD_COL_3_PIN };
	static u8 Local_u8KPDRowArr[ROW_NUM]= {KPD_ROW_0_PIN,KPD_ROW_1_PIN,KPD_ROW_2_PIN,KPD_ROW_3_PIN };
	static u8 Local_u8KPDArr[ROW_NUM][COLUMN_NUM]=KPD_ARR_VAL;

	for (Local_u8ColCounter=0;Local_u8ColCounter<COLUMN_NUM;Local_u8ColCounter++)
    24f4:	89 81       	ldd	r24, Y+1	; 0x01
    24f6:	8f 5f       	subi	r24, 0xFF	; 255
    24f8:	89 83       	std	Y+1, r24	; 0x01
    24fa:	89 81       	ldd	r24, Y+1	; 0x01
    24fc:	84 30       	cpi	r24, 0x04	; 4
    24fe:	08 f4       	brcc	.+2      	; 0x2502 <KPD_u8GetPressedKey+0xda>
    2500:	9e cf       	rjmp	.-196    	; 0x243e <KPD_u8GetPressedKey+0x16>

		DIO_u8SetPinValue(KPD_COL_PORT,Local_u8KPDColArr[Local_u8ColCounter],DIO_u8PIN_HIGH);

	}

	return Local_u8PressedKey;
    2502:	8b 81       	ldd	r24, Y+3	; 0x03
    2504:	8d 83       	std	Y+5, r24	; 0x05
    2506:	8d 81       	ldd	r24, Y+5	; 0x05





}
    2508:	0f 90       	pop	r0
    250a:	0f 90       	pop	r0
    250c:	0f 90       	pop	r0
    250e:	0f 90       	pop	r0
    2510:	0f 90       	pop	r0
    2512:	cf 91       	pop	r28
    2514:	df 91       	pop	r29
    2516:	08 95       	ret

00002518 <PORT_VoidInit>:
#include "PORT_interface.h"
#include "PORT_register.h"


void PORT_VoidInit(void)
{
    2518:	df 93       	push	r29
    251a:	cf 93       	push	r28
    251c:	cd b7       	in	r28, 0x3d	; 61
    251e:	de b7       	in	r29, 0x3e	; 62
	DDRA = PORTA_DIR;
    2520:	ea e3       	ldi	r30, 0x3A	; 58
    2522:	f0 e0       	ldi	r31, 0x00	; 0
    2524:	80 ef       	ldi	r24, 0xF0	; 240
    2526:	80 83       	st	Z, r24
	DDRB = PORTB_DIR;
    2528:	e7 e3       	ldi	r30, 0x37	; 55
    252a:	f0 e0       	ldi	r31, 0x00	; 0
    252c:	80 ef       	ldi	r24, 0xF0	; 240
    252e:	80 83       	st	Z, r24
	DDRC = PORTC_DIR;
    2530:	e4 e3       	ldi	r30, 0x34	; 52
    2532:	f0 e0       	ldi	r31, 0x00	; 0
    2534:	8f ef       	ldi	r24, 0xFF	; 255
    2536:	80 83       	st	Z, r24
	DDRD = PORTD_DIR;
    2538:	e1 e3       	ldi	r30, 0x31	; 49
    253a:	f0 e0       	ldi	r31, 0x00	; 0
    253c:	8f ef       	ldi	r24, 0xFF	; 255
    253e:	80 83       	st	Z, r24
	
	PORTA = PORTA_INITIAL_VALUE;
    2540:	eb e3       	ldi	r30, 0x3B	; 59
    2542:	f0 e0       	ldi	r31, 0x00	; 0
    2544:	10 82       	st	Z, r1
	PORTB = PORTB_INITIAL_VALUE;
    2546:	e8 e3       	ldi	r30, 0x38	; 56
    2548:	f0 e0       	ldi	r31, 0x00	; 0
    254a:	8f e0       	ldi	r24, 0x0F	; 15
    254c:	80 83       	st	Z, r24
	PORTC = PORTC_INITIAL_VALUE;
    254e:	e5 e3       	ldi	r30, 0x35	; 53
    2550:	f0 e0       	ldi	r31, 0x00	; 0
    2552:	10 82       	st	Z, r1
	PORTD = PORTD_INITIAL_VALUE;
    2554:	e2 e3       	ldi	r30, 0x32	; 50
    2556:	f0 e0       	ldi	r31, 0x00	; 0
    2558:	10 82       	st	Z, r1


}
    255a:	cf 91       	pop	r28
    255c:	df 91       	pop	r29
    255e:	08 95       	ret

00002560 <SSD_u8SingleNumDisplayBlink>:


u8 seven_seg[10]={ZERO,ONE,TWO,THREE,FOUR,FIVE,SIX,SEVEN,EIGHT,NINE};

u8 SSD_u8SingleNumDisplayBlink(u8 number)
{
    2560:	df 93       	push	r29
    2562:	cf 93       	push	r28
    2564:	00 d0       	rcall	.+0      	; 0x2566 <SSD_u8SingleNumDisplayBlink+0x6>
    2566:	00 d0       	rcall	.+0      	; 0x2568 <SSD_u8SingleNumDisplayBlink+0x8>
    2568:	cd b7       	in	r28, 0x3d	; 61
    256a:	de b7       	in	r29, 0x3e	; 62
    256c:	8c 83       	std	Y+4, r24	; 0x04
	u8 Local_u8ErrorState = 0;
    256e:	1b 82       	std	Y+3, r1	; 0x03
	u8 Local_u8Counter;
	u8 Local_u8PortMask;

	for(Local_u8Counter=0;Local_u8Counter<100;Local_u8Counter++)
    2570:	1a 82       	std	Y+2, r1	; 0x02
    2572:	28 c0       	rjmp	.+80     	; 0x25c4 <SSD_u8SingleNumDisplayBlink+0x64>
	{
		DIO_u8SetPinValue(SSD_EN_PORT,SSD_1_EN_PIN,DIO_u8PIN_HIGH);
    2574:	82 e0       	ldi	r24, 0x02	; 2
    2576:	60 e0       	ldi	r22, 0x00	; 0
    2578:	41 e0       	ldi	r20, 0x01	; 1
    257a:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <DIO_u8SetPinValue>
		Local_u8PortMask = DIO_u8AndWithPort(SSD_DATA_PORT,SSD_DATA_MASK);
    257e:	83 e0       	ldi	r24, 0x03	; 3
    2580:	61 e0       	ldi	r22, 0x01	; 1
    2582:	0e 94 ab 11 	call	0x2356	; 0x2356 <DIO_u8AndWithPort>
    2586:	89 83       	std	Y+1, r24	; 0x01

		seven_seg[number]|=Local_u8PortMask;
    2588:	8c 81       	ldd	r24, Y+4	; 0x04
    258a:	28 2f       	mov	r18, r24
    258c:	30 e0       	ldi	r19, 0x00	; 0
    258e:	8c 81       	ldd	r24, Y+4	; 0x04
    2590:	88 2f       	mov	r24, r24
    2592:	90 e0       	ldi	r25, 0x00	; 0
    2594:	fc 01       	movw	r30, r24
    2596:	e3 5e       	subi	r30, 0xE3	; 227
    2598:	fd 4f       	sbci	r31, 0xFD	; 253
    259a:	90 81       	ld	r25, Z
    259c:	89 81       	ldd	r24, Y+1	; 0x01
    259e:	89 2b       	or	r24, r25
    25a0:	f9 01       	movw	r30, r18
    25a2:	e3 5e       	subi	r30, 0xE3	; 227
    25a4:	fd 4f       	sbci	r31, 0xFD	; 253
    25a6:	80 83       	st	Z, r24
		DIO_u8SetPortValue(SSD_DATA_PORT,seven_seg[number]);
    25a8:	8c 81       	ldd	r24, Y+4	; 0x04
    25aa:	88 2f       	mov	r24, r24
    25ac:	90 e0       	ldi	r25, 0x00	; 0
    25ae:	fc 01       	movw	r30, r24
    25b0:	e3 5e       	subi	r30, 0xE3	; 227
    25b2:	fd 4f       	sbci	r31, 0xFD	; 253
    25b4:	90 81       	ld	r25, Z
    25b6:	83 e0       	ldi	r24, 0x03	; 3
    25b8:	69 2f       	mov	r22, r25
    25ba:	0e 94 c5 10 	call	0x218a	; 0x218a <DIO_u8SetPortValue>
{
	u8 Local_u8ErrorState = 0;
	u8 Local_u8Counter;
	u8 Local_u8PortMask;

	for(Local_u8Counter=0;Local_u8Counter<100;Local_u8Counter++)
    25be:	8a 81       	ldd	r24, Y+2	; 0x02
    25c0:	8f 5f       	subi	r24, 0xFF	; 255
    25c2:	8a 83       	std	Y+2, r24	; 0x02
    25c4:	8a 81       	ldd	r24, Y+2	; 0x02
    25c6:	84 36       	cpi	r24, 0x64	; 100
    25c8:	a8 f2       	brcs	.-86     	; 0x2574 <SSD_u8SingleNumDisplayBlink+0x14>
		seven_seg[number]|=Local_u8PortMask;
		DIO_u8SetPortValue(SSD_DATA_PORT,seven_seg[number]);
//		_delay_ms(5);
//		DIO_u8SetPinValue(SSD_EN_PORT,SSD_1_EN_PIN,DIO_u8PIN_LOW);
	}
	return Local_u8ErrorState;
    25ca:	8b 81       	ldd	r24, Y+3	; 0x03
}
    25cc:	0f 90       	pop	r0
    25ce:	0f 90       	pop	r0
    25d0:	0f 90       	pop	r0
    25d2:	0f 90       	pop	r0
    25d4:	cf 91       	pop	r28
    25d6:	df 91       	pop	r29
    25d8:	08 95       	ret

000025da <SSD_u8DisplayBlink>:

u8 SSD_u8DisplayBlink(u8 number)
{
    25da:	df 93       	push	r29
    25dc:	cf 93       	push	r28
    25de:	cd b7       	in	r28, 0x3d	; 61
    25e0:	de b7       	in	r29, 0x3e	; 62
    25e2:	a2 97       	sbiw	r28, 0x22	; 34
    25e4:	0f b6       	in	r0, 0x3f	; 63
    25e6:	f8 94       	cli
    25e8:	de bf       	out	0x3e, r29	; 62
    25ea:	0f be       	out	0x3f, r0	; 63
    25ec:	cd bf       	out	0x3d, r28	; 61
    25ee:	8a a3       	std	Y+34, r24	; 0x22
	u8 Local_u8ErrorState = 0;
    25f0:	19 a2       	std	Y+33, r1	; 0x21
	u8 Local_u8PortMask;

	u8 Local_u8Counter;
	u8 ones = number%10;
    25f2:	8a a1       	ldd	r24, Y+34	; 0x22
    25f4:	9a e0       	ldi	r25, 0x0A	; 10
    25f6:	69 2f       	mov	r22, r25
    25f8:	0e 94 d6 1a 	call	0x35ac	; 0x35ac <__udivmodqi4>
    25fc:	89 2f       	mov	r24, r25
    25fe:	8e 8f       	std	Y+30, r24	; 0x1e
	u8 tens = number/10;
    2600:	8a a1       	ldd	r24, Y+34	; 0x22
    2602:	9a e0       	ldi	r25, 0x0A	; 10
    2604:	69 2f       	mov	r22, r25
    2606:	0e 94 d6 1a 	call	0x35ac	; 0x35ac <__udivmodqi4>
    260a:	8d 8f       	std	Y+29, r24	; 0x1d

	Local_u8PortMask = DIO_u8AndWithPort(SSD_DATA_PORT,SSD_DATA_MASK);
    260c:	83 e0       	ldi	r24, 0x03	; 3
    260e:	61 e0       	ldi	r22, 0x01	; 1
    2610:	0e 94 ab 11 	call	0x2356	; 0x2356 <DIO_u8AndWithPort>
    2614:	88 a3       	std	Y+32, r24	; 0x20
	seven_seg[ones]|=Local_u8PortMask;
    2616:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2618:	28 2f       	mov	r18, r24
    261a:	30 e0       	ldi	r19, 0x00	; 0
    261c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    261e:	88 2f       	mov	r24, r24
    2620:	90 e0       	ldi	r25, 0x00	; 0
    2622:	fc 01       	movw	r30, r24
    2624:	e3 5e       	subi	r30, 0xE3	; 227
    2626:	fd 4f       	sbci	r31, 0xFD	; 253
    2628:	90 81       	ld	r25, Z
    262a:	88 a1       	ldd	r24, Y+32	; 0x20
    262c:	89 2b       	or	r24, r25
    262e:	f9 01       	movw	r30, r18
    2630:	e3 5e       	subi	r30, 0xE3	; 227
    2632:	fd 4f       	sbci	r31, 0xFD	; 253
    2634:	80 83       	st	Z, r24

	Local_u8PortMask = DIO_u8AndWithPort(SSD_DATA_PORT,SSD_DATA_MASK);
    2636:	83 e0       	ldi	r24, 0x03	; 3
    2638:	61 e0       	ldi	r22, 0x01	; 1
    263a:	0e 94 ab 11 	call	0x2356	; 0x2356 <DIO_u8AndWithPort>
    263e:	88 a3       	std	Y+32, r24	; 0x20
	seven_seg[tens]|=Local_u8PortMask;
    2640:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2642:	28 2f       	mov	r18, r24
    2644:	30 e0       	ldi	r19, 0x00	; 0
    2646:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2648:	88 2f       	mov	r24, r24
    264a:	90 e0       	ldi	r25, 0x00	; 0
    264c:	fc 01       	movw	r30, r24
    264e:	e3 5e       	subi	r30, 0xE3	; 227
    2650:	fd 4f       	sbci	r31, 0xFD	; 253
    2652:	90 81       	ld	r25, Z
    2654:	88 a1       	ldd	r24, Y+32	; 0x20
    2656:	89 2b       	or	r24, r25
    2658:	f9 01       	movw	r30, r18
    265a:	e3 5e       	subi	r30, 0xE3	; 227
    265c:	fd 4f       	sbci	r31, 0xFD	; 253
    265e:	80 83       	st	Z, r24

	for(Local_u8Counter=0;Local_u8Counter<100;Local_u8Counter++)
    2660:	1f 8e       	std	Y+31, r1	; 0x1f
    2662:	1b c1       	rjmp	.+566    	; 0x289a <SSD_u8DisplayBlink+0x2c0>
	{
		DIO_u8SetPinValue(SSD_EN_PORT,SSD_1_EN_PIN,DIO_u8PIN_HIGH);
    2664:	82 e0       	ldi	r24, 0x02	; 2
    2666:	60 e0       	ldi	r22, 0x00	; 0
    2668:	41 e0       	ldi	r20, 0x01	; 1
    266a:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(SSD_EN_PORT,SSD_2_EN_PIN,DIO_u8PIN_LOW);
    266e:	82 e0       	ldi	r24, 0x02	; 2
    2670:	61 e0       	ldi	r22, 0x01	; 1
    2672:	40 e0       	ldi	r20, 0x00	; 0
    2674:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <DIO_u8SetPinValue>
		DIO_u8SetPortValue(SSD_DATA_PORT,seven_seg[ones]);
    2678:	8e 8d       	ldd	r24, Y+30	; 0x1e
    267a:	88 2f       	mov	r24, r24
    267c:	90 e0       	ldi	r25, 0x00	; 0
    267e:	fc 01       	movw	r30, r24
    2680:	e3 5e       	subi	r30, 0xE3	; 227
    2682:	fd 4f       	sbci	r31, 0xFD	; 253
    2684:	90 81       	ld	r25, Z
    2686:	83 e0       	ldi	r24, 0x03	; 3
    2688:	69 2f       	mov	r22, r25
    268a:	0e 94 c5 10 	call	0x218a	; 0x218a <DIO_u8SetPortValue>
    268e:	80 e0       	ldi	r24, 0x00	; 0
    2690:	90 e0       	ldi	r25, 0x00	; 0
    2692:	a0 ea       	ldi	r26, 0xA0	; 160
    2694:	b1 e4       	ldi	r27, 0x41	; 65
    2696:	89 8f       	std	Y+25, r24	; 0x19
    2698:	9a 8f       	std	Y+26, r25	; 0x1a
    269a:	ab 8f       	std	Y+27, r26	; 0x1b
    269c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    269e:	69 8d       	ldd	r22, Y+25	; 0x19
    26a0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26a4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26a6:	20 e0       	ldi	r18, 0x00	; 0
    26a8:	30 e0       	ldi	r19, 0x00	; 0
    26aa:	4a ef       	ldi	r20, 0xFA	; 250
    26ac:	54 e4       	ldi	r21, 0x44	; 68
    26ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26b2:	dc 01       	movw	r26, r24
    26b4:	cb 01       	movw	r24, r22
    26b6:	8d 8b       	std	Y+21, r24	; 0x15
    26b8:	9e 8b       	std	Y+22, r25	; 0x16
    26ba:	af 8b       	std	Y+23, r26	; 0x17
    26bc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    26be:	6d 89       	ldd	r22, Y+21	; 0x15
    26c0:	7e 89       	ldd	r23, Y+22	; 0x16
    26c2:	8f 89       	ldd	r24, Y+23	; 0x17
    26c4:	98 8d       	ldd	r25, Y+24	; 0x18
    26c6:	20 e0       	ldi	r18, 0x00	; 0
    26c8:	30 e0       	ldi	r19, 0x00	; 0
    26ca:	40 e8       	ldi	r20, 0x80	; 128
    26cc:	5f e3       	ldi	r21, 0x3F	; 63
    26ce:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    26d2:	88 23       	and	r24, r24
    26d4:	2c f4       	brge	.+10     	; 0x26e0 <SSD_u8DisplayBlink+0x106>
		__ticks = 1;
    26d6:	81 e0       	ldi	r24, 0x01	; 1
    26d8:	90 e0       	ldi	r25, 0x00	; 0
    26da:	9c 8b       	std	Y+20, r25	; 0x14
    26dc:	8b 8b       	std	Y+19, r24	; 0x13
    26de:	3f c0       	rjmp	.+126    	; 0x275e <SSD_u8DisplayBlink+0x184>
	else if (__tmp > 65535)
    26e0:	6d 89       	ldd	r22, Y+21	; 0x15
    26e2:	7e 89       	ldd	r23, Y+22	; 0x16
    26e4:	8f 89       	ldd	r24, Y+23	; 0x17
    26e6:	98 8d       	ldd	r25, Y+24	; 0x18
    26e8:	20 e0       	ldi	r18, 0x00	; 0
    26ea:	3f ef       	ldi	r19, 0xFF	; 255
    26ec:	4f e7       	ldi	r20, 0x7F	; 127
    26ee:	57 e4       	ldi	r21, 0x47	; 71
    26f0:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    26f4:	18 16       	cp	r1, r24
    26f6:	4c f5       	brge	.+82     	; 0x274a <SSD_u8DisplayBlink+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26f8:	69 8d       	ldd	r22, Y+25	; 0x19
    26fa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26fc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26fe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2700:	20 e0       	ldi	r18, 0x00	; 0
    2702:	30 e0       	ldi	r19, 0x00	; 0
    2704:	40 e2       	ldi	r20, 0x20	; 32
    2706:	51 e4       	ldi	r21, 0x41	; 65
    2708:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    270c:	dc 01       	movw	r26, r24
    270e:	cb 01       	movw	r24, r22
    2710:	bc 01       	movw	r22, r24
    2712:	cd 01       	movw	r24, r26
    2714:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2718:	dc 01       	movw	r26, r24
    271a:	cb 01       	movw	r24, r22
    271c:	9c 8b       	std	Y+20, r25	; 0x14
    271e:	8b 8b       	std	Y+19, r24	; 0x13
    2720:	0f c0       	rjmp	.+30     	; 0x2740 <SSD_u8DisplayBlink+0x166>
    2722:	88 ec       	ldi	r24, 0xC8	; 200
    2724:	90 e0       	ldi	r25, 0x00	; 0
    2726:	9a 8b       	std	Y+18, r25	; 0x12
    2728:	89 8b       	std	Y+17, r24	; 0x11
    272a:	89 89       	ldd	r24, Y+17	; 0x11
    272c:	9a 89       	ldd	r25, Y+18	; 0x12
    272e:	01 97       	sbiw	r24, 0x01	; 1
    2730:	f1 f7       	brne	.-4      	; 0x272e <SSD_u8DisplayBlink+0x154>
    2732:	9a 8b       	std	Y+18, r25	; 0x12
    2734:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2736:	8b 89       	ldd	r24, Y+19	; 0x13
    2738:	9c 89       	ldd	r25, Y+20	; 0x14
    273a:	01 97       	sbiw	r24, 0x01	; 1
    273c:	9c 8b       	std	Y+20, r25	; 0x14
    273e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2740:	8b 89       	ldd	r24, Y+19	; 0x13
    2742:	9c 89       	ldd	r25, Y+20	; 0x14
    2744:	00 97       	sbiw	r24, 0x00	; 0
    2746:	69 f7       	brne	.-38     	; 0x2722 <SSD_u8DisplayBlink+0x148>
    2748:	14 c0       	rjmp	.+40     	; 0x2772 <SSD_u8DisplayBlink+0x198>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    274a:	6d 89       	ldd	r22, Y+21	; 0x15
    274c:	7e 89       	ldd	r23, Y+22	; 0x16
    274e:	8f 89       	ldd	r24, Y+23	; 0x17
    2750:	98 8d       	ldd	r25, Y+24	; 0x18
    2752:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2756:	dc 01       	movw	r26, r24
    2758:	cb 01       	movw	r24, r22
    275a:	9c 8b       	std	Y+20, r25	; 0x14
    275c:	8b 8b       	std	Y+19, r24	; 0x13
    275e:	8b 89       	ldd	r24, Y+19	; 0x13
    2760:	9c 89       	ldd	r25, Y+20	; 0x14
    2762:	98 8b       	std	Y+16, r25	; 0x10
    2764:	8f 87       	std	Y+15, r24	; 0x0f
    2766:	8f 85       	ldd	r24, Y+15	; 0x0f
    2768:	98 89       	ldd	r25, Y+16	; 0x10
    276a:	01 97       	sbiw	r24, 0x01	; 1
    276c:	f1 f7       	brne	.-4      	; 0x276a <SSD_u8DisplayBlink+0x190>
    276e:	98 8b       	std	Y+16, r25	; 0x10
    2770:	8f 87       	std	Y+15, r24	; 0x0f

		_delay_ms(20);
		DIO_u8SetPinValue(SSD_EN_PORT,SSD_1_EN_PIN,DIO_u8PIN_LOW);
    2772:	82 e0       	ldi	r24, 0x02	; 2
    2774:	60 e0       	ldi	r22, 0x00	; 0
    2776:	40 e0       	ldi	r20, 0x00	; 0
    2778:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(SSD_EN_PORT,SSD_2_EN_PIN,DIO_u8PIN_HIGH);
    277c:	82 e0       	ldi	r24, 0x02	; 2
    277e:	61 e0       	ldi	r22, 0x01	; 1
    2780:	41 e0       	ldi	r20, 0x01	; 1
    2782:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <DIO_u8SetPinValue>
		DIO_u8SetPortValue(SSD_DATA_PORT,seven_seg[tens]);
    2786:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2788:	88 2f       	mov	r24, r24
    278a:	90 e0       	ldi	r25, 0x00	; 0
    278c:	fc 01       	movw	r30, r24
    278e:	e3 5e       	subi	r30, 0xE3	; 227
    2790:	fd 4f       	sbci	r31, 0xFD	; 253
    2792:	90 81       	ld	r25, Z
    2794:	83 e0       	ldi	r24, 0x03	; 3
    2796:	69 2f       	mov	r22, r25
    2798:	0e 94 c5 10 	call	0x218a	; 0x218a <DIO_u8SetPortValue>
    279c:	80 e0       	ldi	r24, 0x00	; 0
    279e:	90 e0       	ldi	r25, 0x00	; 0
    27a0:	a0 ea       	ldi	r26, 0xA0	; 160
    27a2:	b1 e4       	ldi	r27, 0x41	; 65
    27a4:	8b 87       	std	Y+11, r24	; 0x0b
    27a6:	9c 87       	std	Y+12, r25	; 0x0c
    27a8:	ad 87       	std	Y+13, r26	; 0x0d
    27aa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    27ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    27b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    27b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    27b4:	20 e0       	ldi	r18, 0x00	; 0
    27b6:	30 e0       	ldi	r19, 0x00	; 0
    27b8:	4a ef       	ldi	r20, 0xFA	; 250
    27ba:	54 e4       	ldi	r21, 0x44	; 68
    27bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27c0:	dc 01       	movw	r26, r24
    27c2:	cb 01       	movw	r24, r22
    27c4:	8f 83       	std	Y+7, r24	; 0x07
    27c6:	98 87       	std	Y+8, r25	; 0x08
    27c8:	a9 87       	std	Y+9, r26	; 0x09
    27ca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27cc:	6f 81       	ldd	r22, Y+7	; 0x07
    27ce:	78 85       	ldd	r23, Y+8	; 0x08
    27d0:	89 85       	ldd	r24, Y+9	; 0x09
    27d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    27d4:	20 e0       	ldi	r18, 0x00	; 0
    27d6:	30 e0       	ldi	r19, 0x00	; 0
    27d8:	40 e8       	ldi	r20, 0x80	; 128
    27da:	5f e3       	ldi	r21, 0x3F	; 63
    27dc:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    27e0:	88 23       	and	r24, r24
    27e2:	2c f4       	brge	.+10     	; 0x27ee <SSD_u8DisplayBlink+0x214>
		__ticks = 1;
    27e4:	81 e0       	ldi	r24, 0x01	; 1
    27e6:	90 e0       	ldi	r25, 0x00	; 0
    27e8:	9e 83       	std	Y+6, r25	; 0x06
    27ea:	8d 83       	std	Y+5, r24	; 0x05
    27ec:	3f c0       	rjmp	.+126    	; 0x286c <SSD_u8DisplayBlink+0x292>
	else if (__tmp > 65535)
    27ee:	6f 81       	ldd	r22, Y+7	; 0x07
    27f0:	78 85       	ldd	r23, Y+8	; 0x08
    27f2:	89 85       	ldd	r24, Y+9	; 0x09
    27f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    27f6:	20 e0       	ldi	r18, 0x00	; 0
    27f8:	3f ef       	ldi	r19, 0xFF	; 255
    27fa:	4f e7       	ldi	r20, 0x7F	; 127
    27fc:	57 e4       	ldi	r21, 0x47	; 71
    27fe:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    2802:	18 16       	cp	r1, r24
    2804:	4c f5       	brge	.+82     	; 0x2858 <SSD_u8DisplayBlink+0x27e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2806:	6b 85       	ldd	r22, Y+11	; 0x0b
    2808:	7c 85       	ldd	r23, Y+12	; 0x0c
    280a:	8d 85       	ldd	r24, Y+13	; 0x0d
    280c:	9e 85       	ldd	r25, Y+14	; 0x0e
    280e:	20 e0       	ldi	r18, 0x00	; 0
    2810:	30 e0       	ldi	r19, 0x00	; 0
    2812:	40 e2       	ldi	r20, 0x20	; 32
    2814:	51 e4       	ldi	r21, 0x41	; 65
    2816:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    281a:	dc 01       	movw	r26, r24
    281c:	cb 01       	movw	r24, r22
    281e:	bc 01       	movw	r22, r24
    2820:	cd 01       	movw	r24, r26
    2822:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2826:	dc 01       	movw	r26, r24
    2828:	cb 01       	movw	r24, r22
    282a:	9e 83       	std	Y+6, r25	; 0x06
    282c:	8d 83       	std	Y+5, r24	; 0x05
    282e:	0f c0       	rjmp	.+30     	; 0x284e <SSD_u8DisplayBlink+0x274>
    2830:	88 ec       	ldi	r24, 0xC8	; 200
    2832:	90 e0       	ldi	r25, 0x00	; 0
    2834:	9c 83       	std	Y+4, r25	; 0x04
    2836:	8b 83       	std	Y+3, r24	; 0x03
    2838:	8b 81       	ldd	r24, Y+3	; 0x03
    283a:	9c 81       	ldd	r25, Y+4	; 0x04
    283c:	01 97       	sbiw	r24, 0x01	; 1
    283e:	f1 f7       	brne	.-4      	; 0x283c <SSD_u8DisplayBlink+0x262>
    2840:	9c 83       	std	Y+4, r25	; 0x04
    2842:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2844:	8d 81       	ldd	r24, Y+5	; 0x05
    2846:	9e 81       	ldd	r25, Y+6	; 0x06
    2848:	01 97       	sbiw	r24, 0x01	; 1
    284a:	9e 83       	std	Y+6, r25	; 0x06
    284c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    284e:	8d 81       	ldd	r24, Y+5	; 0x05
    2850:	9e 81       	ldd	r25, Y+6	; 0x06
    2852:	00 97       	sbiw	r24, 0x00	; 0
    2854:	69 f7       	brne	.-38     	; 0x2830 <SSD_u8DisplayBlink+0x256>
    2856:	14 c0       	rjmp	.+40     	; 0x2880 <SSD_u8DisplayBlink+0x2a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2858:	6f 81       	ldd	r22, Y+7	; 0x07
    285a:	78 85       	ldd	r23, Y+8	; 0x08
    285c:	89 85       	ldd	r24, Y+9	; 0x09
    285e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2860:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2864:	dc 01       	movw	r26, r24
    2866:	cb 01       	movw	r24, r22
    2868:	9e 83       	std	Y+6, r25	; 0x06
    286a:	8d 83       	std	Y+5, r24	; 0x05
    286c:	8d 81       	ldd	r24, Y+5	; 0x05
    286e:	9e 81       	ldd	r25, Y+6	; 0x06
    2870:	9a 83       	std	Y+2, r25	; 0x02
    2872:	89 83       	std	Y+1, r24	; 0x01
    2874:	89 81       	ldd	r24, Y+1	; 0x01
    2876:	9a 81       	ldd	r25, Y+2	; 0x02
    2878:	01 97       	sbiw	r24, 0x01	; 1
    287a:	f1 f7       	brne	.-4      	; 0x2878 <SSD_u8DisplayBlink+0x29e>
    287c:	9a 83       	std	Y+2, r25	; 0x02
    287e:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(20);
		DIO_u8SetPinValue(SSD_EN_PORT,SSD_1_EN_PIN,DIO_u8PIN_LOW);
    2880:	82 e0       	ldi	r24, 0x02	; 2
    2882:	60 e0       	ldi	r22, 0x00	; 0
    2884:	40 e0       	ldi	r20, 0x00	; 0
    2886:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(SSD_EN_PORT,SSD_2_EN_PIN,DIO_u8PIN_LOW);
    288a:	82 e0       	ldi	r24, 0x02	; 2
    288c:	61 e0       	ldi	r22, 0x01	; 1
    288e:	40 e0       	ldi	r20, 0x00	; 0
    2890:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <DIO_u8SetPinValue>
	seven_seg[ones]|=Local_u8PortMask;

	Local_u8PortMask = DIO_u8AndWithPort(SSD_DATA_PORT,SSD_DATA_MASK);
	seven_seg[tens]|=Local_u8PortMask;

	for(Local_u8Counter=0;Local_u8Counter<100;Local_u8Counter++)
    2894:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2896:	8f 5f       	subi	r24, 0xFF	; 255
    2898:	8f 8f       	std	Y+31, r24	; 0x1f
    289a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    289c:	84 36       	cpi	r24, 0x64	; 100
    289e:	08 f4       	brcc	.+2      	; 0x28a2 <SSD_u8DisplayBlink+0x2c8>
    28a0:	e1 ce       	rjmp	.-574    	; 0x2664 <SSD_u8DisplayBlink+0x8a>
		DIO_u8SetPinValue(SSD_EN_PORT,SSD_1_EN_PIN,DIO_u8PIN_LOW);
		DIO_u8SetPinValue(SSD_EN_PORT,SSD_2_EN_PIN,DIO_u8PIN_LOW);


	}
	return Local_u8ErrorState;
    28a2:	89 a1       	ldd	r24, Y+33	; 0x21
}
    28a4:	a2 96       	adiw	r28, 0x22	; 34
    28a6:	0f b6       	in	r0, 0x3f	; 63
    28a8:	f8 94       	cli
    28aa:	de bf       	out	0x3e, r29	; 62
    28ac:	0f be       	out	0x3f, r0	; 63
    28ae:	cd bf       	out	0x3d, r28	; 61
    28b0:	cf 91       	pop	r28
    28b2:	df 91       	pop	r29
    28b4:	08 95       	ret

000028b6 <SSD_u8Displaynum>:

u8 SSD_u8Displaynum(u8 number)
{
    28b6:	df 93       	push	r29
    28b8:	cf 93       	push	r28
    28ba:	cd b7       	in	r28, 0x3d	; 61
    28bc:	de b7       	in	r29, 0x3e	; 62
    28be:	a0 97       	sbiw	r28, 0x20	; 32
    28c0:	0f b6       	in	r0, 0x3f	; 63
    28c2:	f8 94       	cli
    28c4:	de bf       	out	0x3e, r29	; 62
    28c6:	0f be       	out	0x3f, r0	; 63
    28c8:	cd bf       	out	0x3d, r28	; 61
    28ca:	88 a3       	std	Y+32, r24	; 0x20
	u8 Local_u8ErrorState = 0;
    28cc:	1f 8e       	std	Y+31, r1	; 0x1f

	u8 ones = number%10;
    28ce:	88 a1       	ldd	r24, Y+32	; 0x20
    28d0:	9a e0       	ldi	r25, 0x0A	; 10
    28d2:	69 2f       	mov	r22, r25
    28d4:	0e 94 d6 1a 	call	0x35ac	; 0x35ac <__udivmodqi4>
    28d8:	89 2f       	mov	r24, r25
    28da:	8e 8f       	std	Y+30, r24	; 0x1e
	u8 tens = number/10;
    28dc:	88 a1       	ldd	r24, Y+32	; 0x20
    28de:	9a e0       	ldi	r25, 0x0A	; 10
    28e0:	69 2f       	mov	r22, r25
    28e2:	0e 94 d6 1a 	call	0x35ac	; 0x35ac <__udivmodqi4>
    28e6:	8d 8f       	std	Y+29, r24	; 0x1d

	for(;;)
	{
		DIO_u8SetPinValue(SSD_EN_PORT,SSD_1_EN_PIN,DIO_u8PIN_HIGH);
    28e8:	82 e0       	ldi	r24, 0x02	; 2
    28ea:	60 e0       	ldi	r22, 0x00	; 0
    28ec:	41 e0       	ldi	r20, 0x01	; 1
    28ee:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(SSD_EN_PORT,SSD_2_EN_PIN,DIO_u8PIN_LOW);
    28f2:	82 e0       	ldi	r24, 0x02	; 2
    28f4:	61 e0       	ldi	r22, 0x01	; 1
    28f6:	40 e0       	ldi	r20, 0x00	; 0
    28f8:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <DIO_u8SetPinValue>
		DIO_u8SetPortValue(SSD_DATA_PORT,seven_seg[ones]);
    28fc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    28fe:	88 2f       	mov	r24, r24
    2900:	90 e0       	ldi	r25, 0x00	; 0
    2902:	fc 01       	movw	r30, r24
    2904:	e3 5e       	subi	r30, 0xE3	; 227
    2906:	fd 4f       	sbci	r31, 0xFD	; 253
    2908:	90 81       	ld	r25, Z
    290a:	83 e0       	ldi	r24, 0x03	; 3
    290c:	69 2f       	mov	r22, r25
    290e:	0e 94 c5 10 	call	0x218a	; 0x218a <DIO_u8SetPortValue>
    2912:	80 e0       	ldi	r24, 0x00	; 0
    2914:	90 e0       	ldi	r25, 0x00	; 0
    2916:	a0 ea       	ldi	r26, 0xA0	; 160
    2918:	b0 e4       	ldi	r27, 0x40	; 64
    291a:	89 8f       	std	Y+25, r24	; 0x19
    291c:	9a 8f       	std	Y+26, r25	; 0x1a
    291e:	ab 8f       	std	Y+27, r26	; 0x1b
    2920:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2922:	69 8d       	ldd	r22, Y+25	; 0x19
    2924:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2926:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2928:	9c 8d       	ldd	r25, Y+28	; 0x1c
    292a:	20 e0       	ldi	r18, 0x00	; 0
    292c:	30 e0       	ldi	r19, 0x00	; 0
    292e:	4a ef       	ldi	r20, 0xFA	; 250
    2930:	54 e4       	ldi	r21, 0x44	; 68
    2932:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2936:	dc 01       	movw	r26, r24
    2938:	cb 01       	movw	r24, r22
    293a:	8d 8b       	std	Y+21, r24	; 0x15
    293c:	9e 8b       	std	Y+22, r25	; 0x16
    293e:	af 8b       	std	Y+23, r26	; 0x17
    2940:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2942:	6d 89       	ldd	r22, Y+21	; 0x15
    2944:	7e 89       	ldd	r23, Y+22	; 0x16
    2946:	8f 89       	ldd	r24, Y+23	; 0x17
    2948:	98 8d       	ldd	r25, Y+24	; 0x18
    294a:	20 e0       	ldi	r18, 0x00	; 0
    294c:	30 e0       	ldi	r19, 0x00	; 0
    294e:	40 e8       	ldi	r20, 0x80	; 128
    2950:	5f e3       	ldi	r21, 0x3F	; 63
    2952:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    2956:	88 23       	and	r24, r24
    2958:	2c f4       	brge	.+10     	; 0x2964 <SSD_u8Displaynum+0xae>
		__ticks = 1;
    295a:	81 e0       	ldi	r24, 0x01	; 1
    295c:	90 e0       	ldi	r25, 0x00	; 0
    295e:	9c 8b       	std	Y+20, r25	; 0x14
    2960:	8b 8b       	std	Y+19, r24	; 0x13
    2962:	3f c0       	rjmp	.+126    	; 0x29e2 <SSD_u8Displaynum+0x12c>
	else if (__tmp > 65535)
    2964:	6d 89       	ldd	r22, Y+21	; 0x15
    2966:	7e 89       	ldd	r23, Y+22	; 0x16
    2968:	8f 89       	ldd	r24, Y+23	; 0x17
    296a:	98 8d       	ldd	r25, Y+24	; 0x18
    296c:	20 e0       	ldi	r18, 0x00	; 0
    296e:	3f ef       	ldi	r19, 0xFF	; 255
    2970:	4f e7       	ldi	r20, 0x7F	; 127
    2972:	57 e4       	ldi	r21, 0x47	; 71
    2974:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    2978:	18 16       	cp	r1, r24
    297a:	4c f5       	brge	.+82     	; 0x29ce <SSD_u8Displaynum+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    297c:	69 8d       	ldd	r22, Y+25	; 0x19
    297e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2980:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2982:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2984:	20 e0       	ldi	r18, 0x00	; 0
    2986:	30 e0       	ldi	r19, 0x00	; 0
    2988:	40 e2       	ldi	r20, 0x20	; 32
    298a:	51 e4       	ldi	r21, 0x41	; 65
    298c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2990:	dc 01       	movw	r26, r24
    2992:	cb 01       	movw	r24, r22
    2994:	bc 01       	movw	r22, r24
    2996:	cd 01       	movw	r24, r26
    2998:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    299c:	dc 01       	movw	r26, r24
    299e:	cb 01       	movw	r24, r22
    29a0:	9c 8b       	std	Y+20, r25	; 0x14
    29a2:	8b 8b       	std	Y+19, r24	; 0x13
    29a4:	0f c0       	rjmp	.+30     	; 0x29c4 <SSD_u8Displaynum+0x10e>
    29a6:	88 ec       	ldi	r24, 0xC8	; 200
    29a8:	90 e0       	ldi	r25, 0x00	; 0
    29aa:	9a 8b       	std	Y+18, r25	; 0x12
    29ac:	89 8b       	std	Y+17, r24	; 0x11
    29ae:	89 89       	ldd	r24, Y+17	; 0x11
    29b0:	9a 89       	ldd	r25, Y+18	; 0x12
    29b2:	01 97       	sbiw	r24, 0x01	; 1
    29b4:	f1 f7       	brne	.-4      	; 0x29b2 <SSD_u8Displaynum+0xfc>
    29b6:	9a 8b       	std	Y+18, r25	; 0x12
    29b8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29ba:	8b 89       	ldd	r24, Y+19	; 0x13
    29bc:	9c 89       	ldd	r25, Y+20	; 0x14
    29be:	01 97       	sbiw	r24, 0x01	; 1
    29c0:	9c 8b       	std	Y+20, r25	; 0x14
    29c2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29c4:	8b 89       	ldd	r24, Y+19	; 0x13
    29c6:	9c 89       	ldd	r25, Y+20	; 0x14
    29c8:	00 97       	sbiw	r24, 0x00	; 0
    29ca:	69 f7       	brne	.-38     	; 0x29a6 <SSD_u8Displaynum+0xf0>
    29cc:	14 c0       	rjmp	.+40     	; 0x29f6 <SSD_u8Displaynum+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29ce:	6d 89       	ldd	r22, Y+21	; 0x15
    29d0:	7e 89       	ldd	r23, Y+22	; 0x16
    29d2:	8f 89       	ldd	r24, Y+23	; 0x17
    29d4:	98 8d       	ldd	r25, Y+24	; 0x18
    29d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29da:	dc 01       	movw	r26, r24
    29dc:	cb 01       	movw	r24, r22
    29de:	9c 8b       	std	Y+20, r25	; 0x14
    29e0:	8b 8b       	std	Y+19, r24	; 0x13
    29e2:	8b 89       	ldd	r24, Y+19	; 0x13
    29e4:	9c 89       	ldd	r25, Y+20	; 0x14
    29e6:	98 8b       	std	Y+16, r25	; 0x10
    29e8:	8f 87       	std	Y+15, r24	; 0x0f
    29ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    29ec:	98 89       	ldd	r25, Y+16	; 0x10
    29ee:	01 97       	sbiw	r24, 0x01	; 1
    29f0:	f1 f7       	brne	.-4      	; 0x29ee <SSD_u8Displaynum+0x138>
    29f2:	98 8b       	std	Y+16, r25	; 0x10
    29f4:	8f 87       	std	Y+15, r24	; 0x0f

		_delay_ms(5);
		DIO_u8SetPinValue(SSD_EN_PORT,SSD_1_EN_PIN,DIO_u8PIN_LOW);
    29f6:	82 e0       	ldi	r24, 0x02	; 2
    29f8:	60 e0       	ldi	r22, 0x00	; 0
    29fa:	40 e0       	ldi	r20, 0x00	; 0
    29fc:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(SSD_EN_PORT,SSD_2_EN_PIN,DIO_u8PIN_HIGH);
    2a00:	82 e0       	ldi	r24, 0x02	; 2
    2a02:	61 e0       	ldi	r22, 0x01	; 1
    2a04:	41 e0       	ldi	r20, 0x01	; 1
    2a06:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <DIO_u8SetPinValue>
		DIO_u8SetPortValue(SSD_DATA_PORT,seven_seg[tens]);
    2a0a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a0c:	88 2f       	mov	r24, r24
    2a0e:	90 e0       	ldi	r25, 0x00	; 0
    2a10:	fc 01       	movw	r30, r24
    2a12:	e3 5e       	subi	r30, 0xE3	; 227
    2a14:	fd 4f       	sbci	r31, 0xFD	; 253
    2a16:	90 81       	ld	r25, Z
    2a18:	83 e0       	ldi	r24, 0x03	; 3
    2a1a:	69 2f       	mov	r22, r25
    2a1c:	0e 94 c5 10 	call	0x218a	; 0x218a <DIO_u8SetPortValue>
    2a20:	80 e0       	ldi	r24, 0x00	; 0
    2a22:	90 e0       	ldi	r25, 0x00	; 0
    2a24:	a0 ea       	ldi	r26, 0xA0	; 160
    2a26:	b0 e4       	ldi	r27, 0x40	; 64
    2a28:	8b 87       	std	Y+11, r24	; 0x0b
    2a2a:	9c 87       	std	Y+12, r25	; 0x0c
    2a2c:	ad 87       	std	Y+13, r26	; 0x0d
    2a2e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a30:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a32:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a34:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a36:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a38:	20 e0       	ldi	r18, 0x00	; 0
    2a3a:	30 e0       	ldi	r19, 0x00	; 0
    2a3c:	4a ef       	ldi	r20, 0xFA	; 250
    2a3e:	54 e4       	ldi	r21, 0x44	; 68
    2a40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a44:	dc 01       	movw	r26, r24
    2a46:	cb 01       	movw	r24, r22
    2a48:	8f 83       	std	Y+7, r24	; 0x07
    2a4a:	98 87       	std	Y+8, r25	; 0x08
    2a4c:	a9 87       	std	Y+9, r26	; 0x09
    2a4e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a50:	6f 81       	ldd	r22, Y+7	; 0x07
    2a52:	78 85       	ldd	r23, Y+8	; 0x08
    2a54:	89 85       	ldd	r24, Y+9	; 0x09
    2a56:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a58:	20 e0       	ldi	r18, 0x00	; 0
    2a5a:	30 e0       	ldi	r19, 0x00	; 0
    2a5c:	40 e8       	ldi	r20, 0x80	; 128
    2a5e:	5f e3       	ldi	r21, 0x3F	; 63
    2a60:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    2a64:	88 23       	and	r24, r24
    2a66:	2c f4       	brge	.+10     	; 0x2a72 <SSD_u8Displaynum+0x1bc>
		__ticks = 1;
    2a68:	81 e0       	ldi	r24, 0x01	; 1
    2a6a:	90 e0       	ldi	r25, 0x00	; 0
    2a6c:	9e 83       	std	Y+6, r25	; 0x06
    2a6e:	8d 83       	std	Y+5, r24	; 0x05
    2a70:	3f c0       	rjmp	.+126    	; 0x2af0 <SSD_u8Displaynum+0x23a>
	else if (__tmp > 65535)
    2a72:	6f 81       	ldd	r22, Y+7	; 0x07
    2a74:	78 85       	ldd	r23, Y+8	; 0x08
    2a76:	89 85       	ldd	r24, Y+9	; 0x09
    2a78:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a7a:	20 e0       	ldi	r18, 0x00	; 0
    2a7c:	3f ef       	ldi	r19, 0xFF	; 255
    2a7e:	4f e7       	ldi	r20, 0x7F	; 127
    2a80:	57 e4       	ldi	r21, 0x47	; 71
    2a82:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    2a86:	18 16       	cp	r1, r24
    2a88:	4c f5       	brge	.+82     	; 0x2adc <SSD_u8Displaynum+0x226>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a8a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a8c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a90:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a92:	20 e0       	ldi	r18, 0x00	; 0
    2a94:	30 e0       	ldi	r19, 0x00	; 0
    2a96:	40 e2       	ldi	r20, 0x20	; 32
    2a98:	51 e4       	ldi	r21, 0x41	; 65
    2a9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a9e:	dc 01       	movw	r26, r24
    2aa0:	cb 01       	movw	r24, r22
    2aa2:	bc 01       	movw	r22, r24
    2aa4:	cd 01       	movw	r24, r26
    2aa6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aaa:	dc 01       	movw	r26, r24
    2aac:	cb 01       	movw	r24, r22
    2aae:	9e 83       	std	Y+6, r25	; 0x06
    2ab0:	8d 83       	std	Y+5, r24	; 0x05
    2ab2:	0f c0       	rjmp	.+30     	; 0x2ad2 <SSD_u8Displaynum+0x21c>
    2ab4:	88 ec       	ldi	r24, 0xC8	; 200
    2ab6:	90 e0       	ldi	r25, 0x00	; 0
    2ab8:	9c 83       	std	Y+4, r25	; 0x04
    2aba:	8b 83       	std	Y+3, r24	; 0x03
    2abc:	8b 81       	ldd	r24, Y+3	; 0x03
    2abe:	9c 81       	ldd	r25, Y+4	; 0x04
    2ac0:	01 97       	sbiw	r24, 0x01	; 1
    2ac2:	f1 f7       	brne	.-4      	; 0x2ac0 <SSD_u8Displaynum+0x20a>
    2ac4:	9c 83       	std	Y+4, r25	; 0x04
    2ac6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ac8:	8d 81       	ldd	r24, Y+5	; 0x05
    2aca:	9e 81       	ldd	r25, Y+6	; 0x06
    2acc:	01 97       	sbiw	r24, 0x01	; 1
    2ace:	9e 83       	std	Y+6, r25	; 0x06
    2ad0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ad2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ad4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ad6:	00 97       	sbiw	r24, 0x00	; 0
    2ad8:	69 f7       	brne	.-38     	; 0x2ab4 <SSD_u8Displaynum+0x1fe>
    2ada:	14 c0       	rjmp	.+40     	; 0x2b04 <SSD_u8Displaynum+0x24e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2adc:	6f 81       	ldd	r22, Y+7	; 0x07
    2ade:	78 85       	ldd	r23, Y+8	; 0x08
    2ae0:	89 85       	ldd	r24, Y+9	; 0x09
    2ae2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ae4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ae8:	dc 01       	movw	r26, r24
    2aea:	cb 01       	movw	r24, r22
    2aec:	9e 83       	std	Y+6, r25	; 0x06
    2aee:	8d 83       	std	Y+5, r24	; 0x05
    2af0:	8d 81       	ldd	r24, Y+5	; 0x05
    2af2:	9e 81       	ldd	r25, Y+6	; 0x06
    2af4:	9a 83       	std	Y+2, r25	; 0x02
    2af6:	89 83       	std	Y+1, r24	; 0x01
    2af8:	89 81       	ldd	r24, Y+1	; 0x01
    2afa:	9a 81       	ldd	r25, Y+2	; 0x02
    2afc:	01 97       	sbiw	r24, 0x01	; 1
    2afe:	f1 f7       	brne	.-4      	; 0x2afc <SSD_u8Displaynum+0x246>
    2b00:	9a 83       	std	Y+2, r25	; 0x02
    2b02:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(5);
		DIO_u8SetPinValue(SSD_EN_PORT,SSD_1_EN_PIN,DIO_u8PIN_LOW);
    2b04:	82 e0       	ldi	r24, 0x02	; 2
    2b06:	60 e0       	ldi	r22, 0x00	; 0
    2b08:	40 e0       	ldi	r20, 0x00	; 0
    2b0a:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(SSD_EN_PORT,SSD_2_EN_PIN,DIO_u8PIN_LOW);
    2b0e:	82 e0       	ldi	r24, 0x02	; 2
    2b10:	61 e0       	ldi	r22, 0x01	; 1
    2b12:	40 e0       	ldi	r20, 0x00	; 0
    2b14:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <DIO_u8SetPinValue>
    2b18:	e7 ce       	rjmp	.-562    	; 0x28e8 <SSD_u8Displaynum+0x32>

00002b1a <SSD_u8CountUp>:
	return Local_u8ErrorState;

}

u8 SSD_u8CountUp(u8 number)
{
    2b1a:	df 93       	push	r29
    2b1c:	cf 93       	push	r28
    2b1e:	00 d0       	rcall	.+0      	; 0x2b20 <SSD_u8CountUp+0x6>
    2b20:	0f 92       	push	r0
    2b22:	cd b7       	in	r28, 0x3d	; 61
    2b24:	de b7       	in	r29, 0x3e	; 62
    2b26:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8ErrorState = 0;
    2b28:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8Counter;

	for(Local_u8Counter=0;Local_u8Counter<=number;Local_u8Counter++)
    2b2a:	19 82       	std	Y+1, r1	; 0x01
    2b2c:	06 c0       	rjmp	.+12     	; 0x2b3a <SSD_u8CountUp+0x20>
	{
		SSD_u8DisplayBlink(Local_u8Counter);
    2b2e:	89 81       	ldd	r24, Y+1	; 0x01
    2b30:	0e 94 ed 12 	call	0x25da	; 0x25da <SSD_u8DisplayBlink>
u8 SSD_u8CountUp(u8 number)
{
	u8 Local_u8ErrorState = 0;
	u8 Local_u8Counter;

	for(Local_u8Counter=0;Local_u8Counter<=number;Local_u8Counter++)
    2b34:	89 81       	ldd	r24, Y+1	; 0x01
    2b36:	8f 5f       	subi	r24, 0xFF	; 255
    2b38:	89 83       	std	Y+1, r24	; 0x01
    2b3a:	99 81       	ldd	r25, Y+1	; 0x01
    2b3c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b3e:	89 17       	cp	r24, r25
    2b40:	b0 f7       	brcc	.-20     	; 0x2b2e <SSD_u8CountUp+0x14>
	{
		SSD_u8DisplayBlink(Local_u8Counter);

	}

	return Local_u8ErrorState;
    2b42:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2b44:	0f 90       	pop	r0
    2b46:	0f 90       	pop	r0
    2b48:	0f 90       	pop	r0
    2b4a:	cf 91       	pop	r28
    2b4c:	df 91       	pop	r29
    2b4e:	08 95       	ret

00002b50 <SSD_u8CountDown>:

u8 SSD_u8CountDown(u8 number)
{
    2b50:	df 93       	push	r29
    2b52:	cf 93       	push	r28
    2b54:	00 d0       	rcall	.+0      	; 0x2b56 <SSD_u8CountDown+0x6>
    2b56:	0f 92       	push	r0
    2b58:	cd b7       	in	r28, 0x3d	; 61
    2b5a:	de b7       	in	r29, 0x3e	; 62
    2b5c:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8ErrorState = 0;
    2b5e:	1a 82       	std	Y+2, r1	; 0x02
	s8 Local_u8Counter;
	for(Local_u8Counter=number;Local_u8Counter>=0;Local_u8Counter--)
    2b60:	8b 81       	ldd	r24, Y+3	; 0x03
    2b62:	89 83       	std	Y+1, r24	; 0x01
    2b64:	06 c0       	rjmp	.+12     	; 0x2b72 <SSD_u8CountDown+0x22>
	{
		SSD_u8DisplayBlink(Local_u8Counter);
    2b66:	89 81       	ldd	r24, Y+1	; 0x01
    2b68:	0e 94 ed 12 	call	0x25da	; 0x25da <SSD_u8DisplayBlink>

u8 SSD_u8CountDown(u8 number)
{
	u8 Local_u8ErrorState = 0;
	s8 Local_u8Counter;
	for(Local_u8Counter=number;Local_u8Counter>=0;Local_u8Counter--)
    2b6c:	89 81       	ldd	r24, Y+1	; 0x01
    2b6e:	81 50       	subi	r24, 0x01	; 1
    2b70:	89 83       	std	Y+1, r24	; 0x01
    2b72:	89 81       	ldd	r24, Y+1	; 0x01
    2b74:	88 23       	and	r24, r24
    2b76:	bc f7       	brge	.-18     	; 0x2b66 <SSD_u8CountDown+0x16>
	{
		SSD_u8DisplayBlink(Local_u8Counter);
	}

	return Local_u8ErrorState;
    2b78:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2b7a:	0f 90       	pop	r0
    2b7c:	0f 90       	pop	r0
    2b7e:	0f 90       	pop	r0
    2b80:	cf 91       	pop	r28
    2b82:	df 91       	pop	r29
    2b84:	08 95       	ret

00002b86 <main>:
ADC_Chain_t chain1 ={ADC_Chain1Channel,ADC_Chain1Reading,3,&ADCNotification};


/************************ Main Prog *******************************/
void main(void)
{
    2b86:	0f 93       	push	r16
    2b88:	1f 93       	push	r17
    2b8a:	df 93       	push	r29
    2b8c:	cf 93       	push	r28
    2b8e:	cd b7       	in	r28, 0x3d	; 61
    2b90:	de b7       	in	r29, 0x3e	; 62
    2b92:	c4 54       	subi	r28, 0x44	; 68
    2b94:	d0 40       	sbci	r29, 0x00	; 0
    2b96:	0f b6       	in	r0, 0x3f	; 63
    2b98:	f8 94       	cli
    2b9a:	de bf       	out	0x3e, r29	; 62
    2b9c:	0f be       	out	0x3f, r0	; 63
    2b9e:	cd bf       	out	0x3d, r28	; 61
	/****************** Local Variables **************************/
	u8 Local_u8Counter;
	u8 Local_u8CheckCounter;
	u8 Local_u8IDArr[NO_OF_ID_DIGIT];
	u8 Local_u8PassArr[NO_OF_ID_DIGIT];
	u8 Local_u8PassOkFlag = 0;
    2ba0:	1a ae       	std	Y+58, r1	; 0x3a



	/******************** Driver Init ***************************/

	PORT_VoidInit();
    2ba2:	0e 94 8c 12 	call	0x2518	; 0x2518 <PORT_VoidInit>
	CLCD_voidInit();
    2ba6:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <CLCD_voidInit>
	ADC_voidInit();
    2baa:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <ADC_voidInit>
	GIE_VoidEnable();
    2bae:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <GIE_VoidEnable>

	while(1)
	{
		CLCD_voidGoToXY(0,4);
    2bb2:	80 e0       	ldi	r24, 0x00	; 0
    2bb4:	64 e0       	ldi	r22, 0x04	; 4
    2bb6:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <CLCD_voidGoToXY>
		CLCD_voidSendString("WELCOME");
    2bba:	80 e6       	ldi	r24, 0x60	; 96
    2bbc:	90 e0       	ldi	r25, 0x00	; 0
    2bbe:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <CLCD_voidSendString>
    2bc2:	80 e0       	ldi	r24, 0x00	; 0
    2bc4:	90 e0       	ldi	r25, 0x00	; 0
    2bc6:	aa ef       	ldi	r26, 0xFA	; 250
    2bc8:	b4 e4       	ldi	r27, 0x44	; 68
    2bca:	8d ab       	std	Y+53, r24	; 0x35
    2bcc:	9e ab       	std	Y+54, r25	; 0x36
    2bce:	af ab       	std	Y+55, r26	; 0x37
    2bd0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bd2:	6d a9       	ldd	r22, Y+53	; 0x35
    2bd4:	7e a9       	ldd	r23, Y+54	; 0x36
    2bd6:	8f a9       	ldd	r24, Y+55	; 0x37
    2bd8:	98 ad       	ldd	r25, Y+56	; 0x38
    2bda:	20 e0       	ldi	r18, 0x00	; 0
    2bdc:	30 e0       	ldi	r19, 0x00	; 0
    2bde:	4a ef       	ldi	r20, 0xFA	; 250
    2be0:	54 e4       	ldi	r21, 0x44	; 68
    2be2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2be6:	dc 01       	movw	r26, r24
    2be8:	cb 01       	movw	r24, r22
    2bea:	89 ab       	std	Y+49, r24	; 0x31
    2bec:	9a ab       	std	Y+50, r25	; 0x32
    2bee:	ab ab       	std	Y+51, r26	; 0x33
    2bf0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2bf2:	69 a9       	ldd	r22, Y+49	; 0x31
    2bf4:	7a a9       	ldd	r23, Y+50	; 0x32
    2bf6:	8b a9       	ldd	r24, Y+51	; 0x33
    2bf8:	9c a9       	ldd	r25, Y+52	; 0x34
    2bfa:	20 e0       	ldi	r18, 0x00	; 0
    2bfc:	30 e0       	ldi	r19, 0x00	; 0
    2bfe:	40 e8       	ldi	r20, 0x80	; 128
    2c00:	5f e3       	ldi	r21, 0x3F	; 63
    2c02:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    2c06:	88 23       	and	r24, r24
    2c08:	2c f4       	brge	.+10     	; 0x2c14 <main+0x8e>
		__ticks = 1;
    2c0a:	81 e0       	ldi	r24, 0x01	; 1
    2c0c:	90 e0       	ldi	r25, 0x00	; 0
    2c0e:	98 ab       	std	Y+48, r25	; 0x30
    2c10:	8f a7       	std	Y+47, r24	; 0x2f
    2c12:	3f c0       	rjmp	.+126    	; 0x2c92 <main+0x10c>
	else if (__tmp > 65535)
    2c14:	69 a9       	ldd	r22, Y+49	; 0x31
    2c16:	7a a9       	ldd	r23, Y+50	; 0x32
    2c18:	8b a9       	ldd	r24, Y+51	; 0x33
    2c1a:	9c a9       	ldd	r25, Y+52	; 0x34
    2c1c:	20 e0       	ldi	r18, 0x00	; 0
    2c1e:	3f ef       	ldi	r19, 0xFF	; 255
    2c20:	4f e7       	ldi	r20, 0x7F	; 127
    2c22:	57 e4       	ldi	r21, 0x47	; 71
    2c24:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    2c28:	18 16       	cp	r1, r24
    2c2a:	4c f5       	brge	.+82     	; 0x2c7e <main+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c2c:	6d a9       	ldd	r22, Y+53	; 0x35
    2c2e:	7e a9       	ldd	r23, Y+54	; 0x36
    2c30:	8f a9       	ldd	r24, Y+55	; 0x37
    2c32:	98 ad       	ldd	r25, Y+56	; 0x38
    2c34:	20 e0       	ldi	r18, 0x00	; 0
    2c36:	30 e0       	ldi	r19, 0x00	; 0
    2c38:	40 e2       	ldi	r20, 0x20	; 32
    2c3a:	51 e4       	ldi	r21, 0x41	; 65
    2c3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c40:	dc 01       	movw	r26, r24
    2c42:	cb 01       	movw	r24, r22
    2c44:	bc 01       	movw	r22, r24
    2c46:	cd 01       	movw	r24, r26
    2c48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c4c:	dc 01       	movw	r26, r24
    2c4e:	cb 01       	movw	r24, r22
    2c50:	98 ab       	std	Y+48, r25	; 0x30
    2c52:	8f a7       	std	Y+47, r24	; 0x2f
    2c54:	0f c0       	rjmp	.+30     	; 0x2c74 <main+0xee>
    2c56:	88 ec       	ldi	r24, 0xC8	; 200
    2c58:	90 e0       	ldi	r25, 0x00	; 0
    2c5a:	9e a7       	std	Y+46, r25	; 0x2e
    2c5c:	8d a7       	std	Y+45, r24	; 0x2d
    2c5e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2c60:	9e a5       	ldd	r25, Y+46	; 0x2e
    2c62:	01 97       	sbiw	r24, 0x01	; 1
    2c64:	f1 f7       	brne	.-4      	; 0x2c62 <main+0xdc>
    2c66:	9e a7       	std	Y+46, r25	; 0x2e
    2c68:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c6a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c6c:	98 a9       	ldd	r25, Y+48	; 0x30
    2c6e:	01 97       	sbiw	r24, 0x01	; 1
    2c70:	98 ab       	std	Y+48, r25	; 0x30
    2c72:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c74:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c76:	98 a9       	ldd	r25, Y+48	; 0x30
    2c78:	00 97       	sbiw	r24, 0x00	; 0
    2c7a:	69 f7       	brne	.-38     	; 0x2c56 <main+0xd0>
    2c7c:	14 c0       	rjmp	.+40     	; 0x2ca6 <main+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c7e:	69 a9       	ldd	r22, Y+49	; 0x31
    2c80:	7a a9       	ldd	r23, Y+50	; 0x32
    2c82:	8b a9       	ldd	r24, Y+51	; 0x33
    2c84:	9c a9       	ldd	r25, Y+52	; 0x34
    2c86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c8a:	dc 01       	movw	r26, r24
    2c8c:	cb 01       	movw	r24, r22
    2c8e:	98 ab       	std	Y+48, r25	; 0x30
    2c90:	8f a7       	std	Y+47, r24	; 0x2f
    2c92:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c94:	98 a9       	ldd	r25, Y+48	; 0x30
    2c96:	9c a7       	std	Y+44, r25	; 0x2c
    2c98:	8b a7       	std	Y+43, r24	; 0x2b
    2c9a:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c9c:	9c a5       	ldd	r25, Y+44	; 0x2c
    2c9e:	01 97       	sbiw	r24, 0x01	; 1
    2ca0:	f1 f7       	brne	.-4      	; 0x2c9e <main+0x118>
    2ca2:	9c a7       	std	Y+44, r25	; 0x2c
    2ca4:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(2000);
		CLCD_voidClear();
    2ca6:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <CLCD_voidClear>

		/**************************** Enter ID *********************************/
		CLCD_voidGoToXY(0,0);
    2caa:	80 e0       	ldi	r24, 0x00	; 0
    2cac:	60 e0       	ldi	r22, 0x00	; 0
    2cae:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <CLCD_voidGoToXY>
		CLCD_voidSendString("Enter ID:");
    2cb2:	88 e6       	ldi	r24, 0x68	; 104
    2cb4:	90 e0       	ldi	r25, 0x00	; 0
    2cb6:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <CLCD_voidSendString>
		for(Local_u8Counter=0;Local_u8Counter<NO_OF_ID_DIGIT;Local_u8Counter++)
    2cba:	1c ae       	std	Y+60, r1	; 0x3c
    2cbc:	31 c0       	rjmp	.+98     	; 0x2d20 <main+0x19a>
		{
			do
			{
				Local_u8IDArr[Local_u8Counter] = KPD_u8GetPressedKey();
    2cbe:	8c ad       	ldd	r24, Y+60	; 0x3c
    2cc0:	08 2f       	mov	r16, r24
    2cc2:	10 e0       	ldi	r17, 0x00	; 0
    2cc4:	0e 94 14 12 	call	0x2428	; 0x2428 <KPD_u8GetPressedKey>
    2cc8:	28 2f       	mov	r18, r24
    2cca:	ce 01       	movw	r24, r28
    2ccc:	cd 96       	adiw	r24, 0x3d	; 61
    2cce:	fc 01       	movw	r30, r24
    2cd0:	e0 0f       	add	r30, r16
    2cd2:	f1 1f       	adc	r31, r17
    2cd4:	20 83       	st	Z, r18
			}while(Local_u8IDArr[Local_u8Counter] == KPD_NO_PRESSED_KEY);
    2cd6:	8c ad       	ldd	r24, Y+60	; 0x3c
    2cd8:	28 2f       	mov	r18, r24
    2cda:	30 e0       	ldi	r19, 0x00	; 0
    2cdc:	ce 01       	movw	r24, r28
    2cde:	cd 96       	adiw	r24, 0x3d	; 61
    2ce0:	fc 01       	movw	r30, r24
    2ce2:	e2 0f       	add	r30, r18
    2ce4:	f3 1f       	adc	r31, r19
    2ce6:	80 81       	ld	r24, Z
    2ce8:	8f 3f       	cpi	r24, 0xFF	; 255
    2cea:	49 f3       	breq	.-46     	; 0x2cbe <main+0x138>
			CLCD_VoidWriteNumber(Local_u8IDArr[Local_u8Counter]);
    2cec:	8c ad       	ldd	r24, Y+60	; 0x3c
    2cee:	28 2f       	mov	r18, r24
    2cf0:	30 e0       	ldi	r19, 0x00	; 0
    2cf2:	ce 01       	movw	r24, r28
    2cf4:	cd 96       	adiw	r24, 0x3d	; 61
    2cf6:	fc 01       	movw	r30, r24
    2cf8:	e2 0f       	add	r30, r18
    2cfa:	f3 1f       	adc	r31, r19
    2cfc:	80 81       	ld	r24, Z
    2cfe:	88 2f       	mov	r24, r24
    2d00:	90 e0       	ldi	r25, 0x00	; 0
    2d02:	a0 e0       	ldi	r26, 0x00	; 0
    2d04:	b0 e0       	ldi	r27, 0x00	; 0
    2d06:	bc 01       	movw	r22, r24
    2d08:	cd 01       	movw	r24, r26
    2d0a:	0e 94 8b 04 	call	0x916	; 0x916 <__floatunsisf>
    2d0e:	dc 01       	movw	r26, r24
    2d10:	cb 01       	movw	r24, r22
    2d12:	bc 01       	movw	r22, r24
    2d14:	cd 01       	movw	r24, r26
    2d16:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <CLCD_VoidWriteNumber>
		CLCD_voidClear();

		/**************************** Enter ID *********************************/
		CLCD_voidGoToXY(0,0);
		CLCD_voidSendString("Enter ID:");
		for(Local_u8Counter=0;Local_u8Counter<NO_OF_ID_DIGIT;Local_u8Counter++)
    2d1a:	8c ad       	ldd	r24, Y+60	; 0x3c
    2d1c:	8f 5f       	subi	r24, 0xFF	; 255
    2d1e:	8c af       	std	Y+60, r24	; 0x3c
    2d20:	8c ad       	ldd	r24, Y+60	; 0x3c
    2d22:	84 30       	cpi	r24, 0x04	; 4
    2d24:	60 f2       	brcs	.-104    	; 0x2cbe <main+0x138>
			}while(Local_u8IDArr[Local_u8Counter] == KPD_NO_PRESSED_KEY);
			CLCD_VoidWriteNumber(Local_u8IDArr[Local_u8Counter]);
		}

		/******************************** Enter Pass *****************************/
		CLCD_voidGoToXY(1,0);
    2d26:	81 e0       	ldi	r24, 0x01	; 1
    2d28:	60 e0       	ldi	r22, 0x00	; 0
    2d2a:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <CLCD_voidGoToXY>
		CLCD_voidSendString("Enter Pass:");
    2d2e:	82 e7       	ldi	r24, 0x72	; 114
    2d30:	90 e0       	ldi	r25, 0x00	; 0
    2d32:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <CLCD_voidSendString>
		for(Local_u8Counter=0;Local_u8Counter<NO_OF_ID_DIGIT;Local_u8Counter++)
    2d36:	1c ae       	std	Y+60, r1	; 0x3c
    2d38:	22 c0       	rjmp	.+68     	; 0x2d7e <main+0x1f8>
		{
			SSD_u8SingleNumDisplayBlink(NO_OF_PASS_CHECK);
    2d3a:	83 e0       	ldi	r24, 0x03	; 3
    2d3c:	0e 94 b0 12 	call	0x2560	; 0x2560 <SSD_u8SingleNumDisplayBlink>

			do
			{
				Local_u8PassArr[Local_u8Counter] = KPD_u8GetPressedKey();
    2d40:	8c ad       	ldd	r24, Y+60	; 0x3c
    2d42:	08 2f       	mov	r16, r24
    2d44:	10 e0       	ldi	r17, 0x00	; 0
    2d46:	0e 94 14 12 	call	0x2428	; 0x2428 <KPD_u8GetPressedKey>
    2d4a:	28 2f       	mov	r18, r24
    2d4c:	ce 01       	movw	r24, r28
    2d4e:	8f 5b       	subi	r24, 0xBF	; 191
    2d50:	9f 4f       	sbci	r25, 0xFF	; 255
    2d52:	fc 01       	movw	r30, r24
    2d54:	e0 0f       	add	r30, r16
    2d56:	f1 1f       	adc	r31, r17
    2d58:	20 83       	st	Z, r18
			}while(Local_u8PassArr[Local_u8Counter] == KPD_NO_PRESSED_KEY);
    2d5a:	8c ad       	ldd	r24, Y+60	; 0x3c
    2d5c:	28 2f       	mov	r18, r24
    2d5e:	30 e0       	ldi	r19, 0x00	; 0
    2d60:	ce 01       	movw	r24, r28
    2d62:	8f 5b       	subi	r24, 0xBF	; 191
    2d64:	9f 4f       	sbci	r25, 0xFF	; 255
    2d66:	fc 01       	movw	r30, r24
    2d68:	e2 0f       	add	r30, r18
    2d6a:	f3 1f       	adc	r31, r19
    2d6c:	80 81       	ld	r24, Z
    2d6e:	8f 3f       	cpi	r24, 0xFF	; 255
    2d70:	39 f3       	breq	.-50     	; 0x2d40 <main+0x1ba>
			CLCD_voidSendData('*');
    2d72:	8a e2       	ldi	r24, 0x2A	; 42
    2d74:	0e 94 24 0b 	call	0x1648	; 0x1648 <CLCD_voidSendData>
		}

		/******************************** Enter Pass *****************************/
		CLCD_voidGoToXY(1,0);
		CLCD_voidSendString("Enter Pass:");
		for(Local_u8Counter=0;Local_u8Counter<NO_OF_ID_DIGIT;Local_u8Counter++)
    2d78:	8c ad       	ldd	r24, Y+60	; 0x3c
    2d7a:	8f 5f       	subi	r24, 0xFF	; 255
    2d7c:	8c af       	std	Y+60, r24	; 0x3c
    2d7e:	8c ad       	ldd	r24, Y+60	; 0x3c
    2d80:	84 30       	cpi	r24, 0x04	; 4
    2d82:	d8 f2       	brcs	.-74     	; 0x2d3a <main+0x1b4>
				Local_u8PassArr[Local_u8Counter] = KPD_u8GetPressedKey();
			}while(Local_u8PassArr[Local_u8Counter] == KPD_NO_PRESSED_KEY);
			CLCD_voidSendData('*');
		}
		/***************************** Pass Check *******************************/
		for(Local_u8CheckCounter=0;Local_u8CheckCounter<NO_OF_PASS_CHECK;Local_u8CheckCounter++)
    2d84:	1b ae       	std	Y+59, r1	; 0x3b
    2d86:	9f c1       	rjmp	.+830    	; 0x30c6 <main+0x540>
		{
			for(Local_u8Counter=0;Local_u8Counter<NO_OF_ID_DIGIT;Local_u8Counter++)
    2d88:	1c ae       	std	Y+60, r1	; 0x3c
    2d8a:	93 c1       	rjmp	.+806    	; 0x30b2 <main+0x52c>
			{
				if(Local_u8IDArr[Local_u8Counter] == Local_u8PassArr[NO_OF_ID_DIGIT-Local_u8Counter-1])
    2d8c:	8c ad       	ldd	r24, Y+60	; 0x3c
    2d8e:	28 2f       	mov	r18, r24
    2d90:	30 e0       	ldi	r19, 0x00	; 0
    2d92:	ce 01       	movw	r24, r28
    2d94:	cd 96       	adiw	r24, 0x3d	; 61
    2d96:	fc 01       	movw	r30, r24
    2d98:	e2 0f       	add	r30, r18
    2d9a:	f3 1f       	adc	r31, r19
    2d9c:	40 81       	ld	r20, Z
    2d9e:	8c ad       	ldd	r24, Y+60	; 0x3c
    2da0:	28 2f       	mov	r18, r24
    2da2:	30 e0       	ldi	r19, 0x00	; 0
    2da4:	83 e0       	ldi	r24, 0x03	; 3
    2da6:	90 e0       	ldi	r25, 0x00	; 0
    2da8:	bc 01       	movw	r22, r24
    2daa:	62 1b       	sub	r22, r18
    2dac:	73 0b       	sbc	r23, r19
    2dae:	9b 01       	movw	r18, r22
    2db0:	ce 01       	movw	r24, r28
    2db2:	8f 5b       	subi	r24, 0xBF	; 191
    2db4:	9f 4f       	sbci	r25, 0xFF	; 255
    2db6:	fc 01       	movw	r30, r24
    2db8:	e2 0f       	add	r30, r18
    2dba:	f3 1f       	adc	r31, r19
    2dbc:	80 81       	ld	r24, Z
    2dbe:	48 17       	cp	r20, r24
    2dc0:	89 f4       	brne	.+34     	; 0x2de4 <main+0x25e>
				{
					//SSD_u8SingleNumDisplayBlink(NO_OF_PASS_CHECK);
					if(Local_u8Counter == (NO_OF_ID_DIGIT-Local_u8Counter))
    2dc2:	8c ad       	ldd	r24, Y+60	; 0x3c
    2dc4:	48 2f       	mov	r20, r24
    2dc6:	50 e0       	ldi	r21, 0x00	; 0
    2dc8:	8c ad       	ldd	r24, Y+60	; 0x3c
    2dca:	28 2f       	mov	r18, r24
    2dcc:	30 e0       	ldi	r19, 0x00	; 0
    2dce:	84 e0       	ldi	r24, 0x04	; 4
    2dd0:	90 e0       	ldi	r25, 0x00	; 0
    2dd2:	82 1b       	sub	r24, r18
    2dd4:	93 0b       	sbc	r25, r19
    2dd6:	48 17       	cp	r20, r24
    2dd8:	59 07       	cpc	r21, r25
    2dda:	09 f0       	breq	.+2      	; 0x2dde <main+0x258>
    2ddc:	67 c1       	rjmp	.+718    	; 0x30ac <main+0x526>
					{
						Local_u8PassOkFlag = 1;
    2dde:	81 e0       	ldi	r24, 0x01	; 1
    2de0:	8a af       	std	Y+58, r24	; 0x3a
    2de2:	64 c1       	rjmp	.+712    	; 0x30ac <main+0x526>
					}

				}
				else
				{
					if(Local_u8CheckCounter == NO_OF_PASS_CHECK-1)
    2de4:	8b ad       	ldd	r24, Y+59	; 0x3b
    2de6:	82 30       	cpi	r24, 0x02	; 2
    2de8:	09 f0       	breq	.+2      	; 0x2dec <main+0x266>
    2dea:	80 c0       	rjmp	.+256    	; 0x2eec <main+0x366>
					{
						SSD_u8SingleNumDisplayBlink(0);
    2dec:	80 e0       	ldi	r24, 0x00	; 0
    2dee:	0e 94 b0 12 	call	0x2560	; 0x2560 <SSD_u8SingleNumDisplayBlink>
						CLCD_voidClear();
    2df2:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <CLCD_voidClear>
						CLCD_voidGoToXY(0,3);
    2df6:	80 e0       	ldi	r24, 0x00	; 0
    2df8:	63 e0       	ldi	r22, 0x03	; 3
    2dfa:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <CLCD_voidGoToXY>
						CLCD_voidSendString("BYE...BYE");
    2dfe:	8e e7       	ldi	r24, 0x7E	; 126
    2e00:	90 e0       	ldi	r25, 0x00	; 0
    2e02:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <CLCD_voidSendString>
    2e06:	80 e0       	ldi	r24, 0x00	; 0
    2e08:	90 e0       	ldi	r25, 0x00	; 0
    2e0a:	aa e7       	ldi	r26, 0x7A	; 122
    2e0c:	b4 e4       	ldi	r27, 0x44	; 68
    2e0e:	8f a3       	std	Y+39, r24	; 0x27
    2e10:	98 a7       	std	Y+40, r25	; 0x28
    2e12:	a9 a7       	std	Y+41, r26	; 0x29
    2e14:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e16:	6f a1       	ldd	r22, Y+39	; 0x27
    2e18:	78 a5       	ldd	r23, Y+40	; 0x28
    2e1a:	89 a5       	ldd	r24, Y+41	; 0x29
    2e1c:	9a a5       	ldd	r25, Y+42	; 0x2a
    2e1e:	20 e0       	ldi	r18, 0x00	; 0
    2e20:	30 e0       	ldi	r19, 0x00	; 0
    2e22:	4a ef       	ldi	r20, 0xFA	; 250
    2e24:	54 e4       	ldi	r21, 0x44	; 68
    2e26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e2a:	dc 01       	movw	r26, r24
    2e2c:	cb 01       	movw	r24, r22
    2e2e:	8b a3       	std	Y+35, r24	; 0x23
    2e30:	9c a3       	std	Y+36, r25	; 0x24
    2e32:	ad a3       	std	Y+37, r26	; 0x25
    2e34:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2e36:	6b a1       	ldd	r22, Y+35	; 0x23
    2e38:	7c a1       	ldd	r23, Y+36	; 0x24
    2e3a:	8d a1       	ldd	r24, Y+37	; 0x25
    2e3c:	9e a1       	ldd	r25, Y+38	; 0x26
    2e3e:	20 e0       	ldi	r18, 0x00	; 0
    2e40:	30 e0       	ldi	r19, 0x00	; 0
    2e42:	40 e8       	ldi	r20, 0x80	; 128
    2e44:	5f e3       	ldi	r21, 0x3F	; 63
    2e46:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    2e4a:	88 23       	and	r24, r24
    2e4c:	2c f4       	brge	.+10     	; 0x2e58 <main+0x2d2>
		__ticks = 1;
    2e4e:	81 e0       	ldi	r24, 0x01	; 1
    2e50:	90 e0       	ldi	r25, 0x00	; 0
    2e52:	9a a3       	std	Y+34, r25	; 0x22
    2e54:	89 a3       	std	Y+33, r24	; 0x21
    2e56:	3f c0       	rjmp	.+126    	; 0x2ed6 <main+0x350>
	else if (__tmp > 65535)
    2e58:	6b a1       	ldd	r22, Y+35	; 0x23
    2e5a:	7c a1       	ldd	r23, Y+36	; 0x24
    2e5c:	8d a1       	ldd	r24, Y+37	; 0x25
    2e5e:	9e a1       	ldd	r25, Y+38	; 0x26
    2e60:	20 e0       	ldi	r18, 0x00	; 0
    2e62:	3f ef       	ldi	r19, 0xFF	; 255
    2e64:	4f e7       	ldi	r20, 0x7F	; 127
    2e66:	57 e4       	ldi	r21, 0x47	; 71
    2e68:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    2e6c:	18 16       	cp	r1, r24
    2e6e:	4c f5       	brge	.+82     	; 0x2ec2 <main+0x33c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e70:	6f a1       	ldd	r22, Y+39	; 0x27
    2e72:	78 a5       	ldd	r23, Y+40	; 0x28
    2e74:	89 a5       	ldd	r24, Y+41	; 0x29
    2e76:	9a a5       	ldd	r25, Y+42	; 0x2a
    2e78:	20 e0       	ldi	r18, 0x00	; 0
    2e7a:	30 e0       	ldi	r19, 0x00	; 0
    2e7c:	40 e2       	ldi	r20, 0x20	; 32
    2e7e:	51 e4       	ldi	r21, 0x41	; 65
    2e80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e84:	dc 01       	movw	r26, r24
    2e86:	cb 01       	movw	r24, r22
    2e88:	bc 01       	movw	r22, r24
    2e8a:	cd 01       	movw	r24, r26
    2e8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e90:	dc 01       	movw	r26, r24
    2e92:	cb 01       	movw	r24, r22
    2e94:	9a a3       	std	Y+34, r25	; 0x22
    2e96:	89 a3       	std	Y+33, r24	; 0x21
    2e98:	0f c0       	rjmp	.+30     	; 0x2eb8 <main+0x332>
    2e9a:	88 ec       	ldi	r24, 0xC8	; 200
    2e9c:	90 e0       	ldi	r25, 0x00	; 0
    2e9e:	98 a3       	std	Y+32, r25	; 0x20
    2ea0:	8f 8f       	std	Y+31, r24	; 0x1f
    2ea2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2ea4:	98 a1       	ldd	r25, Y+32	; 0x20
    2ea6:	01 97       	sbiw	r24, 0x01	; 1
    2ea8:	f1 f7       	brne	.-4      	; 0x2ea6 <main+0x320>
    2eaa:	98 a3       	std	Y+32, r25	; 0x20
    2eac:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2eae:	89 a1       	ldd	r24, Y+33	; 0x21
    2eb0:	9a a1       	ldd	r25, Y+34	; 0x22
    2eb2:	01 97       	sbiw	r24, 0x01	; 1
    2eb4:	9a a3       	std	Y+34, r25	; 0x22
    2eb6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2eb8:	89 a1       	ldd	r24, Y+33	; 0x21
    2eba:	9a a1       	ldd	r25, Y+34	; 0x22
    2ebc:	00 97       	sbiw	r24, 0x00	; 0
    2ebe:	69 f7       	brne	.-38     	; 0x2e9a <main+0x314>
    2ec0:	fc c0       	rjmp	.+504    	; 0x30ba <main+0x534>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ec2:	6b a1       	ldd	r22, Y+35	; 0x23
    2ec4:	7c a1       	ldd	r23, Y+36	; 0x24
    2ec6:	8d a1       	ldd	r24, Y+37	; 0x25
    2ec8:	9e a1       	ldd	r25, Y+38	; 0x26
    2eca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ece:	dc 01       	movw	r26, r24
    2ed0:	cb 01       	movw	r24, r22
    2ed2:	9a a3       	std	Y+34, r25	; 0x22
    2ed4:	89 a3       	std	Y+33, r24	; 0x21
    2ed6:	89 a1       	ldd	r24, Y+33	; 0x21
    2ed8:	9a a1       	ldd	r25, Y+34	; 0x22
    2eda:	9e 8f       	std	Y+30, r25	; 0x1e
    2edc:	8d 8f       	std	Y+29, r24	; 0x1d
    2ede:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ee0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2ee2:	01 97       	sbiw	r24, 0x01	; 1
    2ee4:	f1 f7       	brne	.-4      	; 0x2ee2 <main+0x35c>
    2ee6:	9e 8f       	std	Y+30, r25	; 0x1e
    2ee8:	8d 8f       	std	Y+29, r24	; 0x1d
    2eea:	e7 c0       	rjmp	.+462    	; 0x30ba <main+0x534>
						_delay_ms(1000);
						break;
					}

					SSD_u8SingleNumDisplayBlink(NO_OF_PASS_CHECK-Local_u8CheckCounter-1);
    2eec:	92 e0       	ldi	r25, 0x02	; 2
    2eee:	8b ad       	ldd	r24, Y+59	; 0x3b
    2ef0:	79 2f       	mov	r23, r25
    2ef2:	78 1b       	sub	r23, r24
    2ef4:	87 2f       	mov	r24, r23
    2ef6:	0e 94 b0 12 	call	0x2560	; 0x2560 <SSD_u8SingleNumDisplayBlink>

					CLCD_voidClear();
    2efa:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <CLCD_voidClear>
					CLCD_voidGoToXY(0,0);
    2efe:	80 e0       	ldi	r24, 0x00	; 0
    2f00:	60 e0       	ldi	r22, 0x00	; 0
    2f02:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <CLCD_voidGoToXY>
					CLCD_voidSendString("Pass Is Wrong");
    2f06:	88 e8       	ldi	r24, 0x88	; 136
    2f08:	90 e0       	ldi	r25, 0x00	; 0
    2f0a:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <CLCD_voidSendString>
					CLCD_voidGoToXY(1,0);
    2f0e:	81 e0       	ldi	r24, 0x01	; 1
    2f10:	60 e0       	ldi	r22, 0x00	; 0
    2f12:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <CLCD_voidGoToXY>
					CLCD_voidSendString("Enter Pass Again");
    2f16:	86 e9       	ldi	r24, 0x96	; 150
    2f18:	90 e0       	ldi	r25, 0x00	; 0
    2f1a:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <CLCD_voidSendString>
    2f1e:	80 e0       	ldi	r24, 0x00	; 0
    2f20:	90 e0       	ldi	r25, 0x00	; 0
    2f22:	aa ef       	ldi	r26, 0xFA	; 250
    2f24:	b4 e4       	ldi	r27, 0x44	; 68
    2f26:	89 8f       	std	Y+25, r24	; 0x19
    2f28:	9a 8f       	std	Y+26, r25	; 0x1a
    2f2a:	ab 8f       	std	Y+27, r26	; 0x1b
    2f2c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f2e:	69 8d       	ldd	r22, Y+25	; 0x19
    2f30:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f32:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f34:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f36:	20 e0       	ldi	r18, 0x00	; 0
    2f38:	30 e0       	ldi	r19, 0x00	; 0
    2f3a:	4a ef       	ldi	r20, 0xFA	; 250
    2f3c:	54 e4       	ldi	r21, 0x44	; 68
    2f3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f42:	dc 01       	movw	r26, r24
    2f44:	cb 01       	movw	r24, r22
    2f46:	8d 8b       	std	Y+21, r24	; 0x15
    2f48:	9e 8b       	std	Y+22, r25	; 0x16
    2f4a:	af 8b       	std	Y+23, r26	; 0x17
    2f4c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2f4e:	6d 89       	ldd	r22, Y+21	; 0x15
    2f50:	7e 89       	ldd	r23, Y+22	; 0x16
    2f52:	8f 89       	ldd	r24, Y+23	; 0x17
    2f54:	98 8d       	ldd	r25, Y+24	; 0x18
    2f56:	20 e0       	ldi	r18, 0x00	; 0
    2f58:	30 e0       	ldi	r19, 0x00	; 0
    2f5a:	40 e8       	ldi	r20, 0x80	; 128
    2f5c:	5f e3       	ldi	r21, 0x3F	; 63
    2f5e:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    2f62:	88 23       	and	r24, r24
    2f64:	2c f4       	brge	.+10     	; 0x2f70 <main+0x3ea>
		__ticks = 1;
    2f66:	81 e0       	ldi	r24, 0x01	; 1
    2f68:	90 e0       	ldi	r25, 0x00	; 0
    2f6a:	9c 8b       	std	Y+20, r25	; 0x14
    2f6c:	8b 8b       	std	Y+19, r24	; 0x13
    2f6e:	3f c0       	rjmp	.+126    	; 0x2fee <main+0x468>
	else if (__tmp > 65535)
    2f70:	6d 89       	ldd	r22, Y+21	; 0x15
    2f72:	7e 89       	ldd	r23, Y+22	; 0x16
    2f74:	8f 89       	ldd	r24, Y+23	; 0x17
    2f76:	98 8d       	ldd	r25, Y+24	; 0x18
    2f78:	20 e0       	ldi	r18, 0x00	; 0
    2f7a:	3f ef       	ldi	r19, 0xFF	; 255
    2f7c:	4f e7       	ldi	r20, 0x7F	; 127
    2f7e:	57 e4       	ldi	r21, 0x47	; 71
    2f80:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    2f84:	18 16       	cp	r1, r24
    2f86:	4c f5       	brge	.+82     	; 0x2fda <main+0x454>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f88:	69 8d       	ldd	r22, Y+25	; 0x19
    2f8a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f8c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f8e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f90:	20 e0       	ldi	r18, 0x00	; 0
    2f92:	30 e0       	ldi	r19, 0x00	; 0
    2f94:	40 e2       	ldi	r20, 0x20	; 32
    2f96:	51 e4       	ldi	r21, 0x41	; 65
    2f98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f9c:	dc 01       	movw	r26, r24
    2f9e:	cb 01       	movw	r24, r22
    2fa0:	bc 01       	movw	r22, r24
    2fa2:	cd 01       	movw	r24, r26
    2fa4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fa8:	dc 01       	movw	r26, r24
    2faa:	cb 01       	movw	r24, r22
    2fac:	9c 8b       	std	Y+20, r25	; 0x14
    2fae:	8b 8b       	std	Y+19, r24	; 0x13
    2fb0:	0f c0       	rjmp	.+30     	; 0x2fd0 <main+0x44a>
    2fb2:	88 ec       	ldi	r24, 0xC8	; 200
    2fb4:	90 e0       	ldi	r25, 0x00	; 0
    2fb6:	9a 8b       	std	Y+18, r25	; 0x12
    2fb8:	89 8b       	std	Y+17, r24	; 0x11
    2fba:	89 89       	ldd	r24, Y+17	; 0x11
    2fbc:	9a 89       	ldd	r25, Y+18	; 0x12
    2fbe:	01 97       	sbiw	r24, 0x01	; 1
    2fc0:	f1 f7       	brne	.-4      	; 0x2fbe <main+0x438>
    2fc2:	9a 8b       	std	Y+18, r25	; 0x12
    2fc4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fc6:	8b 89       	ldd	r24, Y+19	; 0x13
    2fc8:	9c 89       	ldd	r25, Y+20	; 0x14
    2fca:	01 97       	sbiw	r24, 0x01	; 1
    2fcc:	9c 8b       	std	Y+20, r25	; 0x14
    2fce:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fd0:	8b 89       	ldd	r24, Y+19	; 0x13
    2fd2:	9c 89       	ldd	r25, Y+20	; 0x14
    2fd4:	00 97       	sbiw	r24, 0x00	; 0
    2fd6:	69 f7       	brne	.-38     	; 0x2fb2 <main+0x42c>
    2fd8:	14 c0       	rjmp	.+40     	; 0x3002 <main+0x47c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fda:	6d 89       	ldd	r22, Y+21	; 0x15
    2fdc:	7e 89       	ldd	r23, Y+22	; 0x16
    2fde:	8f 89       	ldd	r24, Y+23	; 0x17
    2fe0:	98 8d       	ldd	r25, Y+24	; 0x18
    2fe2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fe6:	dc 01       	movw	r26, r24
    2fe8:	cb 01       	movw	r24, r22
    2fea:	9c 8b       	std	Y+20, r25	; 0x14
    2fec:	8b 8b       	std	Y+19, r24	; 0x13
    2fee:	8b 89       	ldd	r24, Y+19	; 0x13
    2ff0:	9c 89       	ldd	r25, Y+20	; 0x14
    2ff2:	98 8b       	std	Y+16, r25	; 0x10
    2ff4:	8f 87       	std	Y+15, r24	; 0x0f
    2ff6:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ff8:	98 89       	ldd	r25, Y+16	; 0x10
    2ffa:	01 97       	sbiw	r24, 0x01	; 1
    2ffc:	f1 f7       	brne	.-4      	; 0x2ffa <main+0x474>
    2ffe:	98 8b       	std	Y+16, r25	; 0x10
    3000:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(2000);
					CLCD_voidClear();
    3002:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <CLCD_voidClear>
					CLCD_voidGoToXY(0,0);
    3006:	80 e0       	ldi	r24, 0x00	; 0
    3008:	60 e0       	ldi	r22, 0x00	; 0
    300a:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <CLCD_voidGoToXY>
					CLCD_voidSendString("ID:");
    300e:	87 ea       	ldi	r24, 0xA7	; 167
    3010:	90 e0       	ldi	r25, 0x00	; 0
    3012:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <CLCD_voidSendString>
					for(Local_u8Counter=0;Local_u8Counter<NO_OF_ID_DIGIT;Local_u8Counter++)
    3016:	1c ae       	std	Y+60, r1	; 0x3c
    3018:	1a c0       	rjmp	.+52     	; 0x304e <main+0x4c8>
					{
						CLCD_VoidWriteNumber(Local_u8IDArr[Local_u8Counter]);
    301a:	8c ad       	ldd	r24, Y+60	; 0x3c
    301c:	28 2f       	mov	r18, r24
    301e:	30 e0       	ldi	r19, 0x00	; 0
    3020:	ce 01       	movw	r24, r28
    3022:	cd 96       	adiw	r24, 0x3d	; 61
    3024:	fc 01       	movw	r30, r24
    3026:	e2 0f       	add	r30, r18
    3028:	f3 1f       	adc	r31, r19
    302a:	80 81       	ld	r24, Z
    302c:	88 2f       	mov	r24, r24
    302e:	90 e0       	ldi	r25, 0x00	; 0
    3030:	a0 e0       	ldi	r26, 0x00	; 0
    3032:	b0 e0       	ldi	r27, 0x00	; 0
    3034:	bc 01       	movw	r22, r24
    3036:	cd 01       	movw	r24, r26
    3038:	0e 94 8b 04 	call	0x916	; 0x916 <__floatunsisf>
    303c:	dc 01       	movw	r26, r24
    303e:	cb 01       	movw	r24, r22
    3040:	bc 01       	movw	r22, r24
    3042:	cd 01       	movw	r24, r26
    3044:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <CLCD_VoidWriteNumber>
					CLCD_voidSendString("Enter Pass Again");
					_delay_ms(2000);
					CLCD_voidClear();
					CLCD_voidGoToXY(0,0);
					CLCD_voidSendString("ID:");
					for(Local_u8Counter=0;Local_u8Counter<NO_OF_ID_DIGIT;Local_u8Counter++)
    3048:	8c ad       	ldd	r24, Y+60	; 0x3c
    304a:	8f 5f       	subi	r24, 0xFF	; 255
    304c:	8c af       	std	Y+60, r24	; 0x3c
    304e:	8c ad       	ldd	r24, Y+60	; 0x3c
    3050:	84 30       	cpi	r24, 0x04	; 4
    3052:	18 f3       	brcs	.-58     	; 0x301a <main+0x494>
					{
						CLCD_VoidWriteNumber(Local_u8IDArr[Local_u8Counter]);
					}
					CLCD_voidGoToXY(1,0);
    3054:	81 e0       	ldi	r24, 0x01	; 1
    3056:	60 e0       	ldi	r22, 0x00	; 0
    3058:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <CLCD_voidGoToXY>
					CLCD_voidSendString("Pass:");
    305c:	8b ea       	ldi	r24, 0xAB	; 171
    305e:	90 e0       	ldi	r25, 0x00	; 0
    3060:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <CLCD_voidSendString>
					for(Local_u8Counter=0;Local_u8Counter<NO_OF_ID_DIGIT;Local_u8Counter++)
    3064:	1c ae       	std	Y+60, r1	; 0x3c
    3066:	1f c0       	rjmp	.+62     	; 0x30a6 <main+0x520>
					{
						do
						{
							Local_u8PassArr[Local_u8Counter] = KPD_u8GetPressedKey();
    3068:	8c ad       	ldd	r24, Y+60	; 0x3c
    306a:	08 2f       	mov	r16, r24
    306c:	10 e0       	ldi	r17, 0x00	; 0
    306e:	0e 94 14 12 	call	0x2428	; 0x2428 <KPD_u8GetPressedKey>
    3072:	28 2f       	mov	r18, r24
    3074:	ce 01       	movw	r24, r28
    3076:	8f 5b       	subi	r24, 0xBF	; 191
    3078:	9f 4f       	sbci	r25, 0xFF	; 255
    307a:	fc 01       	movw	r30, r24
    307c:	e0 0f       	add	r30, r16
    307e:	f1 1f       	adc	r31, r17
    3080:	20 83       	st	Z, r18
						}while(Local_u8PassArr[Local_u8Counter] == KPD_NO_PRESSED_KEY);
    3082:	8c ad       	ldd	r24, Y+60	; 0x3c
    3084:	28 2f       	mov	r18, r24
    3086:	30 e0       	ldi	r19, 0x00	; 0
    3088:	ce 01       	movw	r24, r28
    308a:	8f 5b       	subi	r24, 0xBF	; 191
    308c:	9f 4f       	sbci	r25, 0xFF	; 255
    308e:	fc 01       	movw	r30, r24
    3090:	e2 0f       	add	r30, r18
    3092:	f3 1f       	adc	r31, r19
    3094:	80 81       	ld	r24, Z
    3096:	8f 3f       	cpi	r24, 0xFF	; 255
    3098:	39 f3       	breq	.-50     	; 0x3068 <main+0x4e2>
						CLCD_voidSendData('*');
    309a:	8a e2       	ldi	r24, 0x2A	; 42
    309c:	0e 94 24 0b 	call	0x1648	; 0x1648 <CLCD_voidSendData>
					{
						CLCD_VoidWriteNumber(Local_u8IDArr[Local_u8Counter]);
					}
					CLCD_voidGoToXY(1,0);
					CLCD_voidSendString("Pass:");
					for(Local_u8Counter=0;Local_u8Counter<NO_OF_ID_DIGIT;Local_u8Counter++)
    30a0:	8c ad       	ldd	r24, Y+60	; 0x3c
    30a2:	8f 5f       	subi	r24, 0xFF	; 255
    30a4:	8c af       	std	Y+60, r24	; 0x3c
    30a6:	8c ad       	ldd	r24, Y+60	; 0x3c
    30a8:	84 30       	cpi	r24, 0x04	; 4
    30aa:	f0 f2       	brcs	.-68     	; 0x3068 <main+0x4e2>
			CLCD_voidSendData('*');
		}
		/***************************** Pass Check *******************************/
		for(Local_u8CheckCounter=0;Local_u8CheckCounter<NO_OF_PASS_CHECK;Local_u8CheckCounter++)
		{
			for(Local_u8Counter=0;Local_u8Counter<NO_OF_ID_DIGIT;Local_u8Counter++)
    30ac:	8c ad       	ldd	r24, Y+60	; 0x3c
    30ae:	8f 5f       	subi	r24, 0xFF	; 255
    30b0:	8c af       	std	Y+60, r24	; 0x3c
    30b2:	8c ad       	ldd	r24, Y+60	; 0x3c
    30b4:	84 30       	cpi	r24, 0x04	; 4
    30b6:	08 f4       	brcc	.+2      	; 0x30ba <main+0x534>
    30b8:	69 ce       	rjmp	.-814    	; 0x2d8c <main+0x206>

				}

			}

			if (Local_u8PassOkFlag == 1)
    30ba:	8a ad       	ldd	r24, Y+58	; 0x3a
    30bc:	81 30       	cpi	r24, 0x01	; 1
    30be:	39 f0       	breq	.+14     	; 0x30ce <main+0x548>
				Local_u8PassArr[Local_u8Counter] = KPD_u8GetPressedKey();
			}while(Local_u8PassArr[Local_u8Counter] == KPD_NO_PRESSED_KEY);
			CLCD_voidSendData('*');
		}
		/***************************** Pass Check *******************************/
		for(Local_u8CheckCounter=0;Local_u8CheckCounter<NO_OF_PASS_CHECK;Local_u8CheckCounter++)
    30c0:	8b ad       	ldd	r24, Y+59	; 0x3b
    30c2:	8f 5f       	subi	r24, 0xFF	; 255
    30c4:	8b af       	std	Y+59, r24	; 0x3b
    30c6:	8b ad       	ldd	r24, Y+59	; 0x3b
    30c8:	83 30       	cpi	r24, 0x03	; 3
    30ca:	08 f4       	brcc	.+2      	; 0x30ce <main+0x548>
    30cc:	5d ce       	rjmp	.-838    	; 0x2d88 <main+0x202>
			{
				break;
			}
		}

		if(Local_u8PassOkFlag == 1)
    30ce:	8a ad       	ldd	r24, Y+58	; 0x3a
    30d0:	81 30       	cpi	r24, 0x01	; 1
    30d2:	09 f0       	breq	.+2      	; 0x30d6 <main+0x550>
    30d4:	b9 c0       	rjmp	.+370    	; 0x3248 <main+0x6c2>
		{
			Local_u8PassOkFlag = 0;
    30d6:	1a ae       	std	Y+58, r1	; 0x3a


			CLCD_voidClear();
    30d8:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <CLCD_voidClear>
			CLCD_voidGoToXY(0,0);
    30dc:	80 e0       	ldi	r24, 0x00	; 0
    30de:	60 e0       	ldi	r22, 0x00	; 0
    30e0:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <CLCD_voidGoToXY>
			CLCD_voidSendString("Welcome Hassan");
    30e4:	81 eb       	ldi	r24, 0xB1	; 177
    30e6:	90 e0       	ldi	r25, 0x00	; 0
    30e8:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <CLCD_voidSendString>
    30ec:	80 e0       	ldi	r24, 0x00	; 0
    30ee:	90 e0       	ldi	r25, 0x00	; 0
    30f0:	aa e7       	ldi	r26, 0x7A	; 122
    30f2:	b4 e4       	ldi	r27, 0x44	; 68
    30f4:	8b 87       	std	Y+11, r24	; 0x0b
    30f6:	9c 87       	std	Y+12, r25	; 0x0c
    30f8:	ad 87       	std	Y+13, r26	; 0x0d
    30fa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    30fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    3100:	8d 85       	ldd	r24, Y+13	; 0x0d
    3102:	9e 85       	ldd	r25, Y+14	; 0x0e
    3104:	20 e0       	ldi	r18, 0x00	; 0
    3106:	30 e0       	ldi	r19, 0x00	; 0
    3108:	4a ef       	ldi	r20, 0xFA	; 250
    310a:	54 e4       	ldi	r21, 0x44	; 68
    310c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3110:	dc 01       	movw	r26, r24
    3112:	cb 01       	movw	r24, r22
    3114:	8f 83       	std	Y+7, r24	; 0x07
    3116:	98 87       	std	Y+8, r25	; 0x08
    3118:	a9 87       	std	Y+9, r26	; 0x09
    311a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    311c:	6f 81       	ldd	r22, Y+7	; 0x07
    311e:	78 85       	ldd	r23, Y+8	; 0x08
    3120:	89 85       	ldd	r24, Y+9	; 0x09
    3122:	9a 85       	ldd	r25, Y+10	; 0x0a
    3124:	20 e0       	ldi	r18, 0x00	; 0
    3126:	30 e0       	ldi	r19, 0x00	; 0
    3128:	40 e8       	ldi	r20, 0x80	; 128
    312a:	5f e3       	ldi	r21, 0x3F	; 63
    312c:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    3130:	88 23       	and	r24, r24
    3132:	2c f4       	brge	.+10     	; 0x313e <main+0x5b8>
		__ticks = 1;
    3134:	81 e0       	ldi	r24, 0x01	; 1
    3136:	90 e0       	ldi	r25, 0x00	; 0
    3138:	9e 83       	std	Y+6, r25	; 0x06
    313a:	8d 83       	std	Y+5, r24	; 0x05
    313c:	3f c0       	rjmp	.+126    	; 0x31bc <main+0x636>
	else if (__tmp > 65535)
    313e:	6f 81       	ldd	r22, Y+7	; 0x07
    3140:	78 85       	ldd	r23, Y+8	; 0x08
    3142:	89 85       	ldd	r24, Y+9	; 0x09
    3144:	9a 85       	ldd	r25, Y+10	; 0x0a
    3146:	20 e0       	ldi	r18, 0x00	; 0
    3148:	3f ef       	ldi	r19, 0xFF	; 255
    314a:	4f e7       	ldi	r20, 0x7F	; 127
    314c:	57 e4       	ldi	r21, 0x47	; 71
    314e:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    3152:	18 16       	cp	r1, r24
    3154:	4c f5       	brge	.+82     	; 0x31a8 <main+0x622>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3156:	6b 85       	ldd	r22, Y+11	; 0x0b
    3158:	7c 85       	ldd	r23, Y+12	; 0x0c
    315a:	8d 85       	ldd	r24, Y+13	; 0x0d
    315c:	9e 85       	ldd	r25, Y+14	; 0x0e
    315e:	20 e0       	ldi	r18, 0x00	; 0
    3160:	30 e0       	ldi	r19, 0x00	; 0
    3162:	40 e2       	ldi	r20, 0x20	; 32
    3164:	51 e4       	ldi	r21, 0x41	; 65
    3166:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    316a:	dc 01       	movw	r26, r24
    316c:	cb 01       	movw	r24, r22
    316e:	bc 01       	movw	r22, r24
    3170:	cd 01       	movw	r24, r26
    3172:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3176:	dc 01       	movw	r26, r24
    3178:	cb 01       	movw	r24, r22
    317a:	9e 83       	std	Y+6, r25	; 0x06
    317c:	8d 83       	std	Y+5, r24	; 0x05
    317e:	0f c0       	rjmp	.+30     	; 0x319e <main+0x618>
    3180:	88 ec       	ldi	r24, 0xC8	; 200
    3182:	90 e0       	ldi	r25, 0x00	; 0
    3184:	9c 83       	std	Y+4, r25	; 0x04
    3186:	8b 83       	std	Y+3, r24	; 0x03
    3188:	8b 81       	ldd	r24, Y+3	; 0x03
    318a:	9c 81       	ldd	r25, Y+4	; 0x04
    318c:	01 97       	sbiw	r24, 0x01	; 1
    318e:	f1 f7       	brne	.-4      	; 0x318c <main+0x606>
    3190:	9c 83       	std	Y+4, r25	; 0x04
    3192:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3194:	8d 81       	ldd	r24, Y+5	; 0x05
    3196:	9e 81       	ldd	r25, Y+6	; 0x06
    3198:	01 97       	sbiw	r24, 0x01	; 1
    319a:	9e 83       	std	Y+6, r25	; 0x06
    319c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    319e:	8d 81       	ldd	r24, Y+5	; 0x05
    31a0:	9e 81       	ldd	r25, Y+6	; 0x06
    31a2:	00 97       	sbiw	r24, 0x00	; 0
    31a4:	69 f7       	brne	.-38     	; 0x3180 <main+0x5fa>
    31a6:	14 c0       	rjmp	.+40     	; 0x31d0 <main+0x64a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31a8:	6f 81       	ldd	r22, Y+7	; 0x07
    31aa:	78 85       	ldd	r23, Y+8	; 0x08
    31ac:	89 85       	ldd	r24, Y+9	; 0x09
    31ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    31b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31b4:	dc 01       	movw	r26, r24
    31b6:	cb 01       	movw	r24, r22
    31b8:	9e 83       	std	Y+6, r25	; 0x06
    31ba:	8d 83       	std	Y+5, r24	; 0x05
    31bc:	8d 81       	ldd	r24, Y+5	; 0x05
    31be:	9e 81       	ldd	r25, Y+6	; 0x06
    31c0:	9a 83       	std	Y+2, r25	; 0x02
    31c2:	89 83       	std	Y+1, r24	; 0x01
    31c4:	89 81       	ldd	r24, Y+1	; 0x01
    31c6:	9a 81       	ldd	r25, Y+2	; 0x02
    31c8:	01 97       	sbiw	r24, 0x01	; 1
    31ca:	f1 f7       	brne	.-4      	; 0x31c8 <main+0x642>
    31cc:	9a 83       	std	Y+2, r25	; 0x02
    31ce:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);
			CLCD_voidClear();
    31d0:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <CLCD_voidClear>
			do
			{
				ADC_u8StartChainConversionAsynch(&chain1);
    31d4:	8a e2       	ldi	r24, 0x2A	; 42
    31d6:	92 e0       	ldi	r25, 0x02	; 2
    31d8:	0e 94 07 08 	call	0x100e	; 0x100e <ADC_u8StartChainConversionAsynch>

				Local_u8OutKey = KPD_u8GetPressedKey();
    31dc:	0e 94 14 12 	call	0x2428	; 0x2428 <KPD_u8GetPressedKey>
    31e0:	89 af       	std	Y+57, r24	; 0x39

			}while(Local_u8OutKey == KPD_NO_PRESSED_KEY);
    31e2:	89 ad       	ldd	r24, Y+57	; 0x39
    31e4:	8f 3f       	cpi	r24, 0xFF	; 255
    31e6:	b1 f3       	breq	.-20     	; 0x31d4 <main+0x64e>

			// SSD off and led on
			DIO_u8SetPortValue(DIO_u8PORTA,DIO_u8PORT_LOW);
    31e8:	80 e0       	ldi	r24, 0x00	; 0
    31ea:	60 e0       	ldi	r22, 0x00	; 0
    31ec:	0e 94 c5 10 	call	0x218a	; 0x218a <DIO_u8SetPortValue>
			DIO_u8SetPortValue(DIO_u8PORTB,DIO_u8PORT_LOW);
    31f0:	81 e0       	ldi	r24, 0x01	; 1
    31f2:	60 e0       	ldi	r22, 0x00	; 0
    31f4:	0e 94 c5 10 	call	0x218a	; 0x218a <DIO_u8SetPortValue>
			DIO_u8SetPortValue(DIO_u8PORTC,DIO_u8PORT_LOW);
    31f8:	82 e0       	ldi	r24, 0x02	; 2
    31fa:	60 e0       	ldi	r22, 0x00	; 0
    31fc:	0e 94 c5 10 	call	0x218a	; 0x218a <DIO_u8SetPortValue>
			DIO_u8SetPortValue(DIO_u8PORTD,DIO_u8PORT_LOW);
    3200:	83 e0       	ldi	r24, 0x03	; 3
    3202:	60 e0       	ldi	r22, 0x00	; 0
    3204:	0e 94 c5 10 	call	0x218a	; 0x218a <DIO_u8SetPortValue>


			DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN7,DIO_u8PIN_LOW);
    3208:	80 e0       	ldi	r24, 0x00	; 0
    320a:	67 e0       	ldi	r22, 0x07	; 7
    320c:	40 e0       	ldi	r20, 0x00	; 0
    320e:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <DIO_u8SetPinValue>
			CLCD_voidClear();
    3212:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <CLCD_voidClear>

			do
			{
				CLCD_voidGoToXY(0,0);
    3216:	80 e0       	ldi	r24, 0x00	; 0
    3218:	60 e0       	ldi	r22, 0x00	; 0
    321a:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <CLCD_voidGoToXY>
				CLCD_voidSendString("System Sleep");
    321e:	80 ec       	ldi	r24, 0xC0	; 192
    3220:	90 e0       	ldi	r25, 0x00	; 0
    3222:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <CLCD_voidSendString>
				CLCD_voidGoToXY(1,0);
    3226:	81 e0       	ldi	r24, 0x01	; 1
    3228:	60 e0       	ldi	r22, 0x00	; 0
    322a:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <CLCD_voidGoToXY>
				CLCD_voidSendString("Press On To Start");
    322e:	8d ec       	ldi	r24, 0xCD	; 205
    3230:	90 e0       	ldi	r25, 0x00	; 0
    3232:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <CLCD_voidSendString>
				Local_u8OutKey = KPD_u8GetPressedKey();
    3236:	0e 94 14 12 	call	0x2428	; 0x2428 <KPD_u8GetPressedKey>
    323a:	89 af       	std	Y+57, r24	; 0x39

			}while(Local_u8OutKey != 'c' );                               /* Not working good */
    323c:	89 ad       	ldd	r24, Y+57	; 0x39
    323e:	83 36       	cpi	r24, 0x63	; 99
    3240:	51 f7       	brne	.-44     	; 0x3216 <main+0x690>
			CLCD_voidClear();
    3242:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <CLCD_voidClear>
    3246:	b5 cc       	rjmp	.-1686   	; 0x2bb2 <main+0x2c>



		}
		else {
			CLCD_voidClear();
    3248:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <CLCD_voidClear>
    324c:	b2 cc       	rjmp	.-1692   	; 0x2bb2 <main+0x2c>

0000324e <ADCNotification>:
	}

}

void ADCNotification(void)
{
    324e:	df 93       	push	r29
    3250:	cf 93       	push	r28
    3252:	cd b7       	in	r28, 0x3d	; 61
    3254:	de b7       	in	r29, 0x3e	; 62
    3256:	28 97       	sbiw	r28, 0x08	; 8
    3258:	0f b6       	in	r0, 0x3f	; 63
    325a:	f8 94       	cli
    325c:	de bf       	out	0x3e, r29	; 62
    325e:	0f be       	out	0x3f, r0	; 63
    3260:	cd bf       	out	0x3d, r28	; 61
	u16 Local_Adc_2_Reading;
	u16 Local_Adc_3_Reading;

	u16 Local_Temp;

	Local_Adc_1_Reading = ADC_Chain1Reading[0] ;
    3262:	80 91 40 02 	lds	r24, 0x0240
    3266:	90 91 41 02 	lds	r25, 0x0241
    326a:	98 87       	std	Y+8, r25	; 0x08
    326c:	8f 83       	std	Y+7, r24	; 0x07
	Local_Adc_2_Reading = ADC_Chain1Reading[1] ;
    326e:	80 91 42 02 	lds	r24, 0x0242
    3272:	90 91 43 02 	lds	r25, 0x0243
    3276:	9e 83       	std	Y+6, r25	; 0x06
    3278:	8d 83       	std	Y+5, r24	; 0x05
	Local_Adc_3_Reading = ADC_Chain1Reading[2] ;
    327a:	80 91 44 02 	lds	r24, 0x0244
    327e:	90 91 45 02 	lds	r25, 0x0245
    3282:	9c 83       	std	Y+4, r25	; 0x04
    3284:	8b 83       	std	Y+3, r24	; 0x03

	/*************************** ADC0 *************************************/
	Local_Temp = (u16)(((u32)Local_Adc_1_Reading * 500UL)/1024UL);
    3286:	8f 81       	ldd	r24, Y+7	; 0x07
    3288:	98 85       	ldd	r25, Y+8	; 0x08
    328a:	cc 01       	movw	r24, r24
    328c:	a0 e0       	ldi	r26, 0x00	; 0
    328e:	b0 e0       	ldi	r27, 0x00	; 0
    3290:	24 ef       	ldi	r18, 0xF4	; 244
    3292:	31 e0       	ldi	r19, 0x01	; 1
    3294:	40 e0       	ldi	r20, 0x00	; 0
    3296:	50 e0       	ldi	r21, 0x00	; 0
    3298:	bc 01       	movw	r22, r24
    329a:	cd 01       	movw	r24, r26
    329c:	0e 94 b7 1a 	call	0x356e	; 0x356e <__mulsi3>
    32a0:	dc 01       	movw	r26, r24
    32a2:	cb 01       	movw	r24, r22
    32a4:	07 2e       	mov	r0, r23
    32a6:	7a e0       	ldi	r23, 0x0A	; 10
    32a8:	b6 95       	lsr	r27
    32aa:	a7 95       	ror	r26
    32ac:	97 95       	ror	r25
    32ae:	87 95       	ror	r24
    32b0:	7a 95       	dec	r23
    32b2:	d1 f7       	brne	.-12     	; 0x32a8 <ADCNotification+0x5a>
    32b4:	70 2d       	mov	r23, r0
    32b6:	9a 83       	std	Y+2, r25	; 0x02
    32b8:	89 83       	std	Y+1, r24	; 0x01
	CLCD_voidGoToXY(0,0);
    32ba:	80 e0       	ldi	r24, 0x00	; 0
    32bc:	60 e0       	ldi	r22, 0x00	; 0
    32be:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <CLCD_voidGoToXY>
	CLCD_voidSendString("Temp = ");
    32c2:	8f ed       	ldi	r24, 0xDF	; 223
    32c4:	90 e0       	ldi	r25, 0x00	; 0
    32c6:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <CLCD_voidSendString>
	CLCD_VoidWriteNumber(Local_Temp);
    32ca:	89 81       	ldd	r24, Y+1	; 0x01
    32cc:	9a 81       	ldd	r25, Y+2	; 0x02
    32ce:	cc 01       	movw	r24, r24
    32d0:	a0 e0       	ldi	r26, 0x00	; 0
    32d2:	b0 e0       	ldi	r27, 0x00	; 0
    32d4:	bc 01       	movw	r22, r24
    32d6:	cd 01       	movw	r24, r26
    32d8:	0e 94 8b 04 	call	0x916	; 0x916 <__floatunsisf>
    32dc:	dc 01       	movw	r26, r24
    32de:	cb 01       	movw	r24, r22
    32e0:	bc 01       	movw	r22, r24
    32e2:	cd 01       	movw	r24, r26
    32e4:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <CLCD_VoidWriteNumber>
	if(Local_Temp/10 <10)
    32e8:	89 81       	ldd	r24, Y+1	; 0x01
    32ea:	9a 81       	ldd	r25, Y+2	; 0x02
    32ec:	84 36       	cpi	r24, 0x64	; 100
    32ee:	91 05       	cpc	r25, r1
    32f0:	40 f4       	brcc	.+16     	; 0x3302 <ADCNotification+0xb4>
	{
		CLCD_voidGoToXY(0,10);
    32f2:	80 e0       	ldi	r24, 0x00	; 0
    32f4:	6a e0       	ldi	r22, 0x0A	; 10
    32f6:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <CLCD_voidGoToXY>
		CLCD_voidSendString(" ");
    32fa:	87 ee       	ldi	r24, 0xE7	; 231
    32fc:	90 e0       	ldi	r25, 0x00	; 0
    32fe:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <CLCD_voidSendString>
	}

	if (Local_Temp>30)
    3302:	89 81       	ldd	r24, Y+1	; 0x01
    3304:	9a 81       	ldd	r25, Y+2	; 0x02
    3306:	8f 31       	cpi	r24, 0x1F	; 31
    3308:	91 05       	cpc	r25, r1
    330a:	68 f0       	brcs	.+26     	; 0x3326 <ADCNotification+0xd8>
	{
		DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN4,DIO_u8PIN_HIGH);
    330c:	80 e0       	ldi	r24, 0x00	; 0
    330e:	64 e0       	ldi	r22, 0x04	; 4
    3310:	41 e0       	ldi	r20, 0x01	; 1
    3312:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <DIO_u8SetPinValue>
		CLCD_voidGoToXY(0,14);
    3316:	80 e0       	ldi	r24, 0x00	; 0
    3318:	6e e0       	ldi	r22, 0x0E	; 14
    331a:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <CLCD_voidGoToXY>
		CLCD_voidSendData('M');
    331e:	8d e4       	ldi	r24, 0x4D	; 77
    3320:	0e 94 24 0b 	call	0x1648	; 0x1648 <CLCD_voidSendData>
    3324:	0c c0       	rjmp	.+24     	; 0x333e <ADCNotification+0xf0>
	}
	else
	{
		DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN4,DIO_u8PIN_LOW);
    3326:	80 e0       	ldi	r24, 0x00	; 0
    3328:	64 e0       	ldi	r22, 0x04	; 4
    332a:	40 e0       	ldi	r20, 0x00	; 0
    332c:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <DIO_u8SetPinValue>
		CLCD_voidGoToXY(0,14);
    3330:	80 e0       	ldi	r24, 0x00	; 0
    3332:	6e e0       	ldi	r22, 0x0E	; 14
    3334:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <CLCD_voidGoToXY>
		CLCD_voidSendData(' ');
    3338:	80 e2       	ldi	r24, 0x20	; 32
    333a:	0e 94 24 0b 	call	0x1648	; 0x1648 <CLCD_voidSendData>
	}
	/********************************* ADC1 *****************************/
	CLCD_voidGoToXY(1,0);
    333e:	81 e0       	ldi	r24, 0x01	; 1
    3340:	60 e0       	ldi	r22, 0x00	; 0
    3342:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <CLCD_voidGoToXY>
	CLCD_voidSendString("LEDS:");
    3346:	89 ee       	ldi	r24, 0xE9	; 233
    3348:	90 e0       	ldi	r25, 0x00	; 0
    334a:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <CLCD_voidSendString>

	if (Local_Adc_2_Reading>0)
    334e:	8d 81       	ldd	r24, Y+5	; 0x05
    3350:	9e 81       	ldd	r25, Y+6	; 0x06
    3352:	00 97       	sbiw	r24, 0x00	; 0
    3354:	29 f0       	breq	.+10     	; 0x3360 <ADCNotification+0x112>
	{
		DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN7,DIO_u8PIN_HIGH);
    3356:	80 e0       	ldi	r24, 0x00	; 0
    3358:	67 e0       	ldi	r22, 0x07	; 7
    335a:	41 e0       	ldi	r20, 0x01	; 1
    335c:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <DIO_u8SetPinValue>

	}

	if (Local_Adc_2_Reading<=11)
    3360:	8d 81       	ldd	r24, Y+5	; 0x05
    3362:	9e 81       	ldd	r25, Y+6	; 0x06
    3364:	8c 30       	cpi	r24, 0x0C	; 12
    3366:	91 05       	cpc	r25, r1
    3368:	58 f4       	brcc	.+22     	; 0x3380 <ADCNotification+0x132>
	{
		DIO_u8SetPortValue(Local_u8LedPort,DIO_u8PORT_HIGH);
    336a:	83 e0       	ldi	r24, 0x03	; 3
    336c:	6f ef       	ldi	r22, 0xFF	; 255
    336e:	0e 94 c5 10 	call	0x218a	; 0x218a <DIO_u8SetPortValue>
		CLCD_VoidWriteNumber(8);
    3372:	60 e0       	ldi	r22, 0x00	; 0
    3374:	70 e0       	ldi	r23, 0x00	; 0
    3376:	80 e0       	ldi	r24, 0x00	; 0
    3378:	91 e4       	ldi	r25, 0x41	; 65
    337a:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <CLCD_VoidWriteNumber>
    337e:	cd c0       	rjmp	.+410    	; 0x351a <ADCNotification+0x2cc>

	}
	else if (Local_Adc_2_Reading<=80)
    3380:	8d 81       	ldd	r24, Y+5	; 0x05
    3382:	9e 81       	ldd	r25, Y+6	; 0x06
    3384:	81 35       	cpi	r24, 0x51	; 81
    3386:	91 05       	cpc	r25, r1
    3388:	80 f4       	brcc	.+32     	; 0x33aa <ADCNotification+0x15c>
	{
		CLCD_VoidWriteNumber(7);
    338a:	60 e0       	ldi	r22, 0x00	; 0
    338c:	70 e0       	ldi	r23, 0x00	; 0
    338e:	80 ee       	ldi	r24, 0xE0	; 224
    3390:	90 e4       	ldi	r25, 0x40	; 64
    3392:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <CLCD_VoidWriteNumber>

		DIO_u8SetPortValue(Local_u8LedPort,DIO_u8PORT_HIGH);
    3396:	83 e0       	ldi	r24, 0x03	; 3
    3398:	6f ef       	ldi	r22, 0xFF	; 255
    339a:	0e 94 c5 10 	call	0x218a	; 0x218a <DIO_u8SetPortValue>
		DIO_u8SetPinValue(Local_u8LedPort,DIO_u8PIN0,DIO_u8PIN_LOW);
    339e:	83 e0       	ldi	r24, 0x03	; 3
    33a0:	60 e0       	ldi	r22, 0x00	; 0
    33a2:	40 e0       	ldi	r20, 0x00	; 0
    33a4:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <DIO_u8SetPinValue>
    33a8:	b8 c0       	rjmp	.+368    	; 0x351a <ADCNotification+0x2cc>
	}
	else if (Local_Adc_2_Reading<=132)
    33aa:	8d 81       	ldd	r24, Y+5	; 0x05
    33ac:	9e 81       	ldd	r25, Y+6	; 0x06
    33ae:	85 38       	cpi	r24, 0x85	; 133
    33b0:	91 05       	cpc	r25, r1
    33b2:	a8 f4       	brcc	.+42     	; 0x33de <ADCNotification+0x190>
	{
		CLCD_VoidWriteNumber(6);
    33b4:	60 e0       	ldi	r22, 0x00	; 0
    33b6:	70 e0       	ldi	r23, 0x00	; 0
    33b8:	80 ec       	ldi	r24, 0xC0	; 192
    33ba:	90 e4       	ldi	r25, 0x40	; 64
    33bc:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <CLCD_VoidWriteNumber>

		DIO_u8SetPortValue(Local_u8LedPort,DIO_u8PORT_HIGH);
    33c0:	83 e0       	ldi	r24, 0x03	; 3
    33c2:	6f ef       	ldi	r22, 0xFF	; 255
    33c4:	0e 94 c5 10 	call	0x218a	; 0x218a <DIO_u8SetPortValue>
		DIO_u8SetPinValue(Local_u8LedPort,DIO_u8PIN0,DIO_u8PIN_LOW);
    33c8:	83 e0       	ldi	r24, 0x03	; 3
    33ca:	60 e0       	ldi	r22, 0x00	; 0
    33cc:	40 e0       	ldi	r20, 0x00	; 0
    33ce:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(Local_u8LedPort,DIO_u8PIN1,DIO_u8PIN_LOW);
    33d2:	83 e0       	ldi	r24, 0x03	; 3
    33d4:	61 e0       	ldi	r22, 0x01	; 1
    33d6:	40 e0       	ldi	r20, 0x00	; 0
    33d8:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <DIO_u8SetPinValue>
    33dc:	9e c0       	rjmp	.+316    	; 0x351a <ADCNotification+0x2cc>

	}
	else if (Local_Adc_2_Reading<=176)
    33de:	8d 81       	ldd	r24, Y+5	; 0x05
    33e0:	9e 81       	ldd	r25, Y+6	; 0x06
    33e2:	81 3b       	cpi	r24, 0xB1	; 177
    33e4:	91 05       	cpc	r25, r1
    33e6:	d0 f4       	brcc	.+52     	; 0x341c <ADCNotification+0x1ce>
	{
		CLCD_VoidWriteNumber(5);
    33e8:	60 e0       	ldi	r22, 0x00	; 0
    33ea:	70 e0       	ldi	r23, 0x00	; 0
    33ec:	80 ea       	ldi	r24, 0xA0	; 160
    33ee:	90 e4       	ldi	r25, 0x40	; 64
    33f0:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <CLCD_VoidWriteNumber>

		DIO_u8SetPortValue(Local_u8LedPort,DIO_u8PORT_HIGH);
    33f4:	83 e0       	ldi	r24, 0x03	; 3
    33f6:	6f ef       	ldi	r22, 0xFF	; 255
    33f8:	0e 94 c5 10 	call	0x218a	; 0x218a <DIO_u8SetPortValue>
		DIO_u8SetPinValue(Local_u8LedPort,DIO_u8PIN0,DIO_u8PIN_LOW);
    33fc:	83 e0       	ldi	r24, 0x03	; 3
    33fe:	60 e0       	ldi	r22, 0x00	; 0
    3400:	40 e0       	ldi	r20, 0x00	; 0
    3402:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(Local_u8LedPort,DIO_u8PIN1,DIO_u8PIN_LOW);
    3406:	83 e0       	ldi	r24, 0x03	; 3
    3408:	61 e0       	ldi	r22, 0x01	; 1
    340a:	40 e0       	ldi	r20, 0x00	; 0
    340c:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(Local_u8LedPort,DIO_u8PIN2,DIO_u8PIN_LOW);
    3410:	83 e0       	ldi	r24, 0x03	; 3
    3412:	62 e0       	ldi	r22, 0x02	; 2
    3414:	40 e0       	ldi	r20, 0x00	; 0
    3416:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <DIO_u8SetPinValue>
    341a:	7f c0       	rjmp	.+254    	; 0x351a <ADCNotification+0x2cc>
	}
	else if (Local_Adc_2_Reading<=213)
    341c:	8d 81       	ldd	r24, Y+5	; 0x05
    341e:	9e 81       	ldd	r25, Y+6	; 0x06
    3420:	86 3d       	cpi	r24, 0xD6	; 214
    3422:	91 05       	cpc	r25, r1
    3424:	f8 f4       	brcc	.+62     	; 0x3464 <ADCNotification+0x216>
	{
		CLCD_VoidWriteNumber(4);
    3426:	60 e0       	ldi	r22, 0x00	; 0
    3428:	70 e0       	ldi	r23, 0x00	; 0
    342a:	80 e8       	ldi	r24, 0x80	; 128
    342c:	90 e4       	ldi	r25, 0x40	; 64
    342e:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <CLCD_VoidWriteNumber>

		DIO_u8SetPortValue(Local_u8LedPort,DIO_u8PORT_HIGH);
    3432:	83 e0       	ldi	r24, 0x03	; 3
    3434:	6f ef       	ldi	r22, 0xFF	; 255
    3436:	0e 94 c5 10 	call	0x218a	; 0x218a <DIO_u8SetPortValue>
		DIO_u8SetPinValue(Local_u8LedPort,DIO_u8PIN0,DIO_u8PIN_LOW);
    343a:	83 e0       	ldi	r24, 0x03	; 3
    343c:	60 e0       	ldi	r22, 0x00	; 0
    343e:	40 e0       	ldi	r20, 0x00	; 0
    3440:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(Local_u8LedPort,DIO_u8PIN1,DIO_u8PIN_LOW);
    3444:	83 e0       	ldi	r24, 0x03	; 3
    3446:	61 e0       	ldi	r22, 0x01	; 1
    3448:	40 e0       	ldi	r20, 0x00	; 0
    344a:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(Local_u8LedPort,DIO_u8PIN2,DIO_u8PIN_LOW);
    344e:	83 e0       	ldi	r24, 0x03	; 3
    3450:	62 e0       	ldi	r22, 0x02	; 2
    3452:	40 e0       	ldi	r20, 0x00	; 0
    3454:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(Local_u8LedPort,DIO_u8PIN3,DIO_u8PIN_LOW);
    3458:	83 e0       	ldi	r24, 0x03	; 3
    345a:	63 e0       	ldi	r22, 0x03	; 3
    345c:	40 e0       	ldi	r20, 0x00	; 0
    345e:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <DIO_u8SetPinValue>
    3462:	5b c0       	rjmp	.+182    	; 0x351a <ADCNotification+0x2cc>

	}
	else if (Local_Adc_2_Reading<=274)
    3464:	8d 81       	ldd	r24, Y+5	; 0x05
    3466:	9e 81       	ldd	r25, Y+6	; 0x06
    3468:	21 e0       	ldi	r18, 0x01	; 1
    346a:	83 31       	cpi	r24, 0x13	; 19
    346c:	92 07       	cpc	r25, r18
    346e:	d0 f4       	brcc	.+52     	; 0x34a4 <ADCNotification+0x256>
	{
		CLCD_VoidWriteNumber(3);
    3470:	60 e0       	ldi	r22, 0x00	; 0
    3472:	70 e0       	ldi	r23, 0x00	; 0
    3474:	80 e4       	ldi	r24, 0x40	; 64
    3476:	90 e4       	ldi	r25, 0x40	; 64
    3478:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <CLCD_VoidWriteNumber>

		DIO_u8SetPortValue(Local_u8LedPort,DIO_u8PORT_LOW);
    347c:	83 e0       	ldi	r24, 0x03	; 3
    347e:	60 e0       	ldi	r22, 0x00	; 0
    3480:	0e 94 c5 10 	call	0x218a	; 0x218a <DIO_u8SetPortValue>
		DIO_u8SetPinValue(Local_u8LedPort,DIO_u8PIN5,DIO_u8PIN_HIGH);
    3484:	83 e0       	ldi	r24, 0x03	; 3
    3486:	65 e0       	ldi	r22, 0x05	; 5
    3488:	41 e0       	ldi	r20, 0x01	; 1
    348a:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(Local_u8LedPort,DIO_u8PIN6,DIO_u8PIN_HIGH);
    348e:	83 e0       	ldi	r24, 0x03	; 3
    3490:	66 e0       	ldi	r22, 0x06	; 6
    3492:	41 e0       	ldi	r20, 0x01	; 1
    3494:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(Local_u8LedPort,DIO_u8PIN7,DIO_u8PIN_HIGH);
    3498:	83 e0       	ldi	r24, 0x03	; 3
    349a:	67 e0       	ldi	r22, 0x07	; 7
    349c:	41 e0       	ldi	r20, 0x01	; 1
    349e:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <DIO_u8SetPinValue>
    34a2:	3b c0       	rjmp	.+118    	; 0x351a <ADCNotification+0x2cc>

	}
	else if (Local_Adc_2_Reading<=277)
    34a4:	8d 81       	ldd	r24, Y+5	; 0x05
    34a6:	9e 81       	ldd	r25, Y+6	; 0x06
    34a8:	21 e0       	ldi	r18, 0x01	; 1
    34aa:	86 31       	cpi	r24, 0x16	; 22
    34ac:	92 07       	cpc	r25, r18
    34ae:	a8 f4       	brcc	.+42     	; 0x34da <ADCNotification+0x28c>
	{
		CLCD_VoidWriteNumber(2);
    34b0:	60 e0       	ldi	r22, 0x00	; 0
    34b2:	70 e0       	ldi	r23, 0x00	; 0
    34b4:	80 e0       	ldi	r24, 0x00	; 0
    34b6:	90 e4       	ldi	r25, 0x40	; 64
    34b8:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <CLCD_VoidWriteNumber>

		DIO_u8SetPortValue(Local_u8LedPort,DIO_u8PORT_LOW);
    34bc:	83 e0       	ldi	r24, 0x03	; 3
    34be:	60 e0       	ldi	r22, 0x00	; 0
    34c0:	0e 94 c5 10 	call	0x218a	; 0x218a <DIO_u8SetPortValue>
		DIO_u8SetPinValue(Local_u8LedPort,DIO_u8PIN6,DIO_u8PIN_HIGH);
    34c4:	83 e0       	ldi	r24, 0x03	; 3
    34c6:	66 e0       	ldi	r22, 0x06	; 6
    34c8:	41 e0       	ldi	r20, 0x01	; 1
    34ca:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(Local_u8LedPort,DIO_u8PIN7,DIO_u8PIN_HIGH);
    34ce:	83 e0       	ldi	r24, 0x03	; 3
    34d0:	67 e0       	ldi	r22, 0x07	; 7
    34d2:	41 e0       	ldi	r20, 0x01	; 1
    34d4:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <DIO_u8SetPinValue>
    34d8:	20 c0       	rjmp	.+64     	; 0x351a <ADCNotification+0x2cc>

	}
	else if (Local_Adc_2_Reading<=304)
    34da:	8d 81       	ldd	r24, Y+5	; 0x05
    34dc:	9e 81       	ldd	r25, Y+6	; 0x06
    34de:	21 e0       	ldi	r18, 0x01	; 1
    34e0:	81 33       	cpi	r24, 0x31	; 49
    34e2:	92 07       	cpc	r25, r18
    34e4:	80 f4       	brcc	.+32     	; 0x3506 <ADCNotification+0x2b8>
	{
		CLCD_VoidWriteNumber(1);
    34e6:	60 e0       	ldi	r22, 0x00	; 0
    34e8:	70 e0       	ldi	r23, 0x00	; 0
    34ea:	80 e8       	ldi	r24, 0x80	; 128
    34ec:	9f e3       	ldi	r25, 0x3F	; 63
    34ee:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <CLCD_VoidWriteNumber>

		DIO_u8SetPortValue(Local_u8LedPort,DIO_u8PORT_LOW);
    34f2:	83 e0       	ldi	r24, 0x03	; 3
    34f4:	60 e0       	ldi	r22, 0x00	; 0
    34f6:	0e 94 c5 10 	call	0x218a	; 0x218a <DIO_u8SetPortValue>
		DIO_u8SetPinValue(Local_u8LedPort,DIO_u8PIN7,DIO_u8PIN_HIGH);
    34fa:	83 e0       	ldi	r24, 0x03	; 3
    34fc:	67 e0       	ldi	r22, 0x07	; 7
    34fe:	41 e0       	ldi	r20, 0x01	; 1
    3500:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <DIO_u8SetPinValue>
    3504:	0a c0       	rjmp	.+20     	; 0x351a <ADCNotification+0x2cc>

	}
	else
	{
		CLCD_VoidWriteNumber(0);
    3506:	60 e0       	ldi	r22, 0x00	; 0
    3508:	70 e0       	ldi	r23, 0x00	; 0
    350a:	80 e0       	ldi	r24, 0x00	; 0
    350c:	90 e0       	ldi	r25, 0x00	; 0
    350e:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <CLCD_VoidWriteNumber>

		DIO_u8SetPortValue(Local_u8LedPort,DIO_u8PORT_LOW);
    3512:	83 e0       	ldi	r24, 0x03	; 3
    3514:	60 e0       	ldi	r22, 0x00	; 0
    3516:	0e 94 c5 10 	call	0x218a	; 0x218a <DIO_u8SetPortValue>
	//	{
	//		CLCD_voidGoToXY(1,11);
	//		CLCD_voidSendString("    ");
	//
	//	}
	CLCD_voidGoToXY(1,9);
    351a:	81 e0       	ldi	r24, 0x01	; 1
    351c:	69 e0       	ldi	r22, 0x09	; 9
    351e:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <CLCD_voidGoToXY>

	if (Local_Adc_3_Reading>500)
    3522:	8b 81       	ldd	r24, Y+3	; 0x03
    3524:	9c 81       	ldd	r25, Y+4	; 0x04
    3526:	21 e0       	ldi	r18, 0x01	; 1
    3528:	85 3f       	cpi	r24, 0xF5	; 245
    352a:	92 07       	cpc	r25, r18
    352c:	50 f0       	brcs	.+20     	; 0x3542 <ADCNotification+0x2f4>
	{
		DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN5,DIO_u8PIN_HIGH);
    352e:	80 e0       	ldi	r24, 0x00	; 0
    3530:	65 e0       	ldi	r22, 0x05	; 5
    3532:	41 e0       	ldi	r20, 0x01	; 1
    3534:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <DIO_u8SetPinValue>

		CLCD_voidSendString("GasON ");
    3538:	8f ee       	ldi	r24, 0xEF	; 239
    353a:	90 e0       	ldi	r25, 0x00	; 0
    353c:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <CLCD_voidSendString>
    3540:	0d c0       	rjmp	.+26     	; 0x355c <ADCNotification+0x30e>
	}
	else
	{
		DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN5,DIO_u8PIN_LOW);
    3542:	80 e0       	ldi	r24, 0x00	; 0
    3544:	65 e0       	ldi	r22, 0x05	; 5
    3546:	40 e0       	ldi	r20, 0x00	; 0
    3548:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <DIO_u8SetPinValue>
		CLCD_voidGoToXY(1,9);
    354c:	81 e0       	ldi	r24, 0x01	; 1
    354e:	69 e0       	ldi	r22, 0x09	; 9
    3550:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <CLCD_voidGoToXY>
		CLCD_voidSendString("GasOFF");
    3554:	86 ef       	ldi	r24, 0xF6	; 246
    3556:	90 e0       	ldi	r25, 0x00	; 0
    3558:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <CLCD_voidSendString>


	}
	/******************************************************************/

}
    355c:	28 96       	adiw	r28, 0x08	; 8
    355e:	0f b6       	in	r0, 0x3f	; 63
    3560:	f8 94       	cli
    3562:	de bf       	out	0x3e, r29	; 62
    3564:	0f be       	out	0x3f, r0	; 63
    3566:	cd bf       	out	0x3d, r28	; 61
    3568:	cf 91       	pop	r28
    356a:	df 91       	pop	r29
    356c:	08 95       	ret

0000356e <__mulsi3>:
    356e:	62 9f       	mul	r22, r18
    3570:	d0 01       	movw	r26, r0
    3572:	73 9f       	mul	r23, r19
    3574:	f0 01       	movw	r30, r0
    3576:	82 9f       	mul	r24, r18
    3578:	e0 0d       	add	r30, r0
    357a:	f1 1d       	adc	r31, r1
    357c:	64 9f       	mul	r22, r20
    357e:	e0 0d       	add	r30, r0
    3580:	f1 1d       	adc	r31, r1
    3582:	92 9f       	mul	r25, r18
    3584:	f0 0d       	add	r31, r0
    3586:	83 9f       	mul	r24, r19
    3588:	f0 0d       	add	r31, r0
    358a:	74 9f       	mul	r23, r20
    358c:	f0 0d       	add	r31, r0
    358e:	65 9f       	mul	r22, r21
    3590:	f0 0d       	add	r31, r0
    3592:	99 27       	eor	r25, r25
    3594:	72 9f       	mul	r23, r18
    3596:	b0 0d       	add	r27, r0
    3598:	e1 1d       	adc	r30, r1
    359a:	f9 1f       	adc	r31, r25
    359c:	63 9f       	mul	r22, r19
    359e:	b0 0d       	add	r27, r0
    35a0:	e1 1d       	adc	r30, r1
    35a2:	f9 1f       	adc	r31, r25
    35a4:	bd 01       	movw	r22, r26
    35a6:	cf 01       	movw	r24, r30
    35a8:	11 24       	eor	r1, r1
    35aa:	08 95       	ret

000035ac <__udivmodqi4>:
    35ac:	99 1b       	sub	r25, r25
    35ae:	79 e0       	ldi	r23, 0x09	; 9
    35b0:	04 c0       	rjmp	.+8      	; 0x35ba <__udivmodqi4_ep>

000035b2 <__udivmodqi4_loop>:
    35b2:	99 1f       	adc	r25, r25
    35b4:	96 17       	cp	r25, r22
    35b6:	08 f0       	brcs	.+2      	; 0x35ba <__udivmodqi4_ep>
    35b8:	96 1b       	sub	r25, r22

000035ba <__udivmodqi4_ep>:
    35ba:	88 1f       	adc	r24, r24
    35bc:	7a 95       	dec	r23
    35be:	c9 f7       	brne	.-14     	; 0x35b2 <__udivmodqi4_loop>
    35c0:	80 95       	com	r24
    35c2:	08 95       	ret

000035c4 <__divmodsi4>:
    35c4:	97 fb       	bst	r25, 7
    35c6:	09 2e       	mov	r0, r25
    35c8:	05 26       	eor	r0, r21
    35ca:	0e d0       	rcall	.+28     	; 0x35e8 <__divmodsi4_neg1>
    35cc:	57 fd       	sbrc	r21, 7
    35ce:	04 d0       	rcall	.+8      	; 0x35d8 <__divmodsi4_neg2>
    35d0:	14 d0       	rcall	.+40     	; 0x35fa <__udivmodsi4>
    35d2:	0a d0       	rcall	.+20     	; 0x35e8 <__divmodsi4_neg1>
    35d4:	00 1c       	adc	r0, r0
    35d6:	38 f4       	brcc	.+14     	; 0x35e6 <__divmodsi4_exit>

000035d8 <__divmodsi4_neg2>:
    35d8:	50 95       	com	r21
    35da:	40 95       	com	r20
    35dc:	30 95       	com	r19
    35de:	21 95       	neg	r18
    35e0:	3f 4f       	sbci	r19, 0xFF	; 255
    35e2:	4f 4f       	sbci	r20, 0xFF	; 255
    35e4:	5f 4f       	sbci	r21, 0xFF	; 255

000035e6 <__divmodsi4_exit>:
    35e6:	08 95       	ret

000035e8 <__divmodsi4_neg1>:
    35e8:	f6 f7       	brtc	.-4      	; 0x35e6 <__divmodsi4_exit>
    35ea:	90 95       	com	r25
    35ec:	80 95       	com	r24
    35ee:	70 95       	com	r23
    35f0:	61 95       	neg	r22
    35f2:	7f 4f       	sbci	r23, 0xFF	; 255
    35f4:	8f 4f       	sbci	r24, 0xFF	; 255
    35f6:	9f 4f       	sbci	r25, 0xFF	; 255
    35f8:	08 95       	ret

000035fa <__udivmodsi4>:
    35fa:	a1 e2       	ldi	r26, 0x21	; 33
    35fc:	1a 2e       	mov	r1, r26
    35fe:	aa 1b       	sub	r26, r26
    3600:	bb 1b       	sub	r27, r27
    3602:	fd 01       	movw	r30, r26
    3604:	0d c0       	rjmp	.+26     	; 0x3620 <__udivmodsi4_ep>

00003606 <__udivmodsi4_loop>:
    3606:	aa 1f       	adc	r26, r26
    3608:	bb 1f       	adc	r27, r27
    360a:	ee 1f       	adc	r30, r30
    360c:	ff 1f       	adc	r31, r31
    360e:	a2 17       	cp	r26, r18
    3610:	b3 07       	cpc	r27, r19
    3612:	e4 07       	cpc	r30, r20
    3614:	f5 07       	cpc	r31, r21
    3616:	20 f0       	brcs	.+8      	; 0x3620 <__udivmodsi4_ep>
    3618:	a2 1b       	sub	r26, r18
    361a:	b3 0b       	sbc	r27, r19
    361c:	e4 0b       	sbc	r30, r20
    361e:	f5 0b       	sbc	r31, r21

00003620 <__udivmodsi4_ep>:
    3620:	66 1f       	adc	r22, r22
    3622:	77 1f       	adc	r23, r23
    3624:	88 1f       	adc	r24, r24
    3626:	99 1f       	adc	r25, r25
    3628:	1a 94       	dec	r1
    362a:	69 f7       	brne	.-38     	; 0x3606 <__udivmodsi4_loop>
    362c:	60 95       	com	r22
    362e:	70 95       	com	r23
    3630:	80 95       	com	r24
    3632:	90 95       	com	r25
    3634:	9b 01       	movw	r18, r22
    3636:	ac 01       	movw	r20, r24
    3638:	bd 01       	movw	r22, r26
    363a:	cf 01       	movw	r24, r30
    363c:	08 95       	ret

0000363e <__prologue_saves__>:
    363e:	2f 92       	push	r2
    3640:	3f 92       	push	r3
    3642:	4f 92       	push	r4
    3644:	5f 92       	push	r5
    3646:	6f 92       	push	r6
    3648:	7f 92       	push	r7
    364a:	8f 92       	push	r8
    364c:	9f 92       	push	r9
    364e:	af 92       	push	r10
    3650:	bf 92       	push	r11
    3652:	cf 92       	push	r12
    3654:	df 92       	push	r13
    3656:	ef 92       	push	r14
    3658:	ff 92       	push	r15
    365a:	0f 93       	push	r16
    365c:	1f 93       	push	r17
    365e:	cf 93       	push	r28
    3660:	df 93       	push	r29
    3662:	cd b7       	in	r28, 0x3d	; 61
    3664:	de b7       	in	r29, 0x3e	; 62
    3666:	ca 1b       	sub	r28, r26
    3668:	db 0b       	sbc	r29, r27
    366a:	0f b6       	in	r0, 0x3f	; 63
    366c:	f8 94       	cli
    366e:	de bf       	out	0x3e, r29	; 62
    3670:	0f be       	out	0x3f, r0	; 63
    3672:	cd bf       	out	0x3d, r28	; 61
    3674:	09 94       	ijmp

00003676 <__epilogue_restores__>:
    3676:	2a 88       	ldd	r2, Y+18	; 0x12
    3678:	39 88       	ldd	r3, Y+17	; 0x11
    367a:	48 88       	ldd	r4, Y+16	; 0x10
    367c:	5f 84       	ldd	r5, Y+15	; 0x0f
    367e:	6e 84       	ldd	r6, Y+14	; 0x0e
    3680:	7d 84       	ldd	r7, Y+13	; 0x0d
    3682:	8c 84       	ldd	r8, Y+12	; 0x0c
    3684:	9b 84       	ldd	r9, Y+11	; 0x0b
    3686:	aa 84       	ldd	r10, Y+10	; 0x0a
    3688:	b9 84       	ldd	r11, Y+9	; 0x09
    368a:	c8 84       	ldd	r12, Y+8	; 0x08
    368c:	df 80       	ldd	r13, Y+7	; 0x07
    368e:	ee 80       	ldd	r14, Y+6	; 0x06
    3690:	fd 80       	ldd	r15, Y+5	; 0x05
    3692:	0c 81       	ldd	r16, Y+4	; 0x04
    3694:	1b 81       	ldd	r17, Y+3	; 0x03
    3696:	aa 81       	ldd	r26, Y+2	; 0x02
    3698:	b9 81       	ldd	r27, Y+1	; 0x01
    369a:	ce 0f       	add	r28, r30
    369c:	d1 1d       	adc	r29, r1
    369e:	0f b6       	in	r0, 0x3f	; 63
    36a0:	f8 94       	cli
    36a2:	de bf       	out	0x3e, r29	; 62
    36a4:	0f be       	out	0x3f, r0	; 63
    36a6:	cd bf       	out	0x3d, r28	; 61
    36a8:	ed 01       	movw	r28, r26
    36aa:	08 95       	ret

000036ac <_exit>:
    36ac:	f8 94       	cli

000036ae <__stop_program>:
    36ae:	ff cf       	rjmp	.-2      	; 0x36ae <__stop_program>
