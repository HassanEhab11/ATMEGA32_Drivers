
testdivers2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003260  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000012a  00800060  00003260  000032f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  0080018a  0080018a  0000341e  2**0
                  ALLOC
  3 .stab         00002ee0  00000000  00000000  00003420  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001455  00000000  00000000  00006300  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001e0  00000000  00000000  00007755  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000232  00000000  00000000  00007935  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002891  00000000  00000000  00007b67  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001628  00000000  00000000  0000a3f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000013de  00000000  00000000  0000ba20  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000200  00000000  00000000  0000ce00  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000030f  00000000  00000000  0000d000  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a56  00000000  00000000  0000d30f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000dd65  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 6b 17 	jmp	0x2ed6	; 0x2ed6 <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 1f 09 	jmp	0x123e	; 0x123e <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e6       	ldi	r30, 0x60	; 96
      68:	f2 e3       	ldi	r31, 0x32	; 50
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 38       	cpi	r26, 0x8A	; 138
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e8       	ldi	r26, 0x8A	; 138
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 39       	cpi	r26, 0x9A	; 154
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 2b 18 	call	0x3056	; 0x3056 <main>
      8a:	0c 94 2e 19 	jmp	0x325c	; 0x325c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 25 04 	call	0x84a	; 0x84a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 f7 18 	jmp	0x31ee	; 0x31ee <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 13 19 	jmp	0x3226	; 0x3226 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 03 19 	jmp	0x3206	; 0x3206 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 1f 19 	jmp	0x323e	; 0x323e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 03 19 	jmp	0x3206	; 0x3206 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 1f 19 	jmp	0x323e	; 0x323e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 f7 18 	jmp	0x31ee	; 0x31ee <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 13 19 	jmp	0x3226	; 0x3226 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ff 18 	jmp	0x31fe	; 0x31fe <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 1b 19 	jmp	0x3236	; 0x3236 <__epilogue_restores__+0x10>

0000078a <__eqsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 03 19 	jmp	0x3206	; 0x3206 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__eqsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__eqsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__eqsf2+0x58>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 1f 19 	jmp	0x323e	; 0x323e <__epilogue_restores__+0x18>

000007ea <__gtsf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 03 19 	jmp	0x3206	; 0x3206 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gtsf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gtsf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gtsf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 1f 19 	jmp	0x323e	; 0x323e <__epilogue_restores__+0x18>

0000084a <__gesf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 03 19 	jmp	0x3206	; 0x3206 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	8f ef       	ldi	r24, 0xFF	; 255
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 1f 19 	jmp	0x323e	; 0x323e <__epilogue_restores__+0x18>

000008aa <__ltsf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 03 19 	jmp	0x3206	; 0x3206 <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__ltsf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__ltsf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__ltsf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 1f 19 	jmp	0x323e	; 0x323e <__epilogue_restores__+0x18>

0000090a <__floatsisf>:
     90a:	a8 e0       	ldi	r26, 0x08	; 8
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 00 19 	jmp	0x3200	; 0x3200 <__prologue_saves__+0x12>
     916:	9b 01       	movw	r18, r22
     918:	ac 01       	movw	r20, r24
     91a:	83 e0       	ldi	r24, 0x03	; 3
     91c:	89 83       	std	Y+1, r24	; 0x01
     91e:	da 01       	movw	r26, r20
     920:	c9 01       	movw	r24, r18
     922:	88 27       	eor	r24, r24
     924:	b7 fd       	sbrc	r27, 7
     926:	83 95       	inc	r24
     928:	99 27       	eor	r25, r25
     92a:	aa 27       	eor	r26, r26
     92c:	bb 27       	eor	r27, r27
     92e:	b8 2e       	mov	r11, r24
     930:	21 15       	cp	r18, r1
     932:	31 05       	cpc	r19, r1
     934:	41 05       	cpc	r20, r1
     936:	51 05       	cpc	r21, r1
     938:	19 f4       	brne	.+6      	; 0x940 <__floatsisf+0x36>
     93a:	82 e0       	ldi	r24, 0x02	; 2
     93c:	89 83       	std	Y+1, r24	; 0x01
     93e:	3a c0       	rjmp	.+116    	; 0x9b4 <__floatsisf+0xaa>
     940:	88 23       	and	r24, r24
     942:	a9 f0       	breq	.+42     	; 0x96e <__floatsisf+0x64>
     944:	20 30       	cpi	r18, 0x00	; 0
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	38 07       	cpc	r19, r24
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	48 07       	cpc	r20, r24
     94e:	80 e8       	ldi	r24, 0x80	; 128
     950:	58 07       	cpc	r21, r24
     952:	29 f4       	brne	.+10     	; 0x95e <__floatsisf+0x54>
     954:	60 e0       	ldi	r22, 0x00	; 0
     956:	70 e0       	ldi	r23, 0x00	; 0
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	9f ec       	ldi	r25, 0xCF	; 207
     95c:	30 c0       	rjmp	.+96     	; 0x9be <__floatsisf+0xb4>
     95e:	ee 24       	eor	r14, r14
     960:	ff 24       	eor	r15, r15
     962:	87 01       	movw	r16, r14
     964:	e2 1a       	sub	r14, r18
     966:	f3 0a       	sbc	r15, r19
     968:	04 0b       	sbc	r16, r20
     96a:	15 0b       	sbc	r17, r21
     96c:	02 c0       	rjmp	.+4      	; 0x972 <__floatsisf+0x68>
     96e:	79 01       	movw	r14, r18
     970:	8a 01       	movw	r16, r20
     972:	8e e1       	ldi	r24, 0x1E	; 30
     974:	c8 2e       	mov	r12, r24
     976:	d1 2c       	mov	r13, r1
     978:	dc 82       	std	Y+4, r13	; 0x04
     97a:	cb 82       	std	Y+3, r12	; 0x03
     97c:	ed 82       	std	Y+5, r14	; 0x05
     97e:	fe 82       	std	Y+6, r15	; 0x06
     980:	0f 83       	std	Y+7, r16	; 0x07
     982:	18 87       	std	Y+8, r17	; 0x08
     984:	c8 01       	movw	r24, r16
     986:	b7 01       	movw	r22, r14
     988:	0e 94 b0 05 	call	0xb60	; 0xb60 <__clzsi2>
     98c:	01 97       	sbiw	r24, 0x01	; 1
     98e:	18 16       	cp	r1, r24
     990:	19 06       	cpc	r1, r25
     992:	84 f4       	brge	.+32     	; 0x9b4 <__floatsisf+0xaa>
     994:	08 2e       	mov	r0, r24
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatsisf+0x96>
     998:	ee 0c       	add	r14, r14
     99a:	ff 1c       	adc	r15, r15
     99c:	00 1f       	adc	r16, r16
     99e:	11 1f       	adc	r17, r17
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatsisf+0x8e>
     9a4:	ed 82       	std	Y+5, r14	; 0x05
     9a6:	fe 82       	std	Y+6, r15	; 0x06
     9a8:	0f 83       	std	Y+7, r16	; 0x07
     9aa:	18 87       	std	Y+8, r17	; 0x08
     9ac:	c8 1a       	sub	r12, r24
     9ae:	d9 0a       	sbc	r13, r25
     9b0:	dc 82       	std	Y+4, r13	; 0x04
     9b2:	cb 82       	std	Y+3, r12	; 0x03
     9b4:	ba 82       	std	Y+2, r11	; 0x02
     9b6:	ce 01       	movw	r24, r28
     9b8:	01 96       	adiw	r24, 0x01	; 1
     9ba:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     9be:	28 96       	adiw	r28, 0x08	; 8
     9c0:	e9 e0       	ldi	r30, 0x09	; 9
     9c2:	0c 94 1c 19 	jmp	0x3238	; 0x3238 <__epilogue_restores__+0x12>

000009c6 <__fixsfsi>:
     9c6:	ac e0       	ldi	r26, 0x0C	; 12
     9c8:	b0 e0       	ldi	r27, 0x00	; 0
     9ca:	e9 ee       	ldi	r30, 0xE9	; 233
     9cc:	f4 e0       	ldi	r31, 0x04	; 4
     9ce:	0c 94 07 19 	jmp	0x320e	; 0x320e <__prologue_saves__+0x20>
     9d2:	69 83       	std	Y+1, r22	; 0x01
     9d4:	7a 83       	std	Y+2, r23	; 0x02
     9d6:	8b 83       	std	Y+3, r24	; 0x03
     9d8:	9c 83       	std	Y+4, r25	; 0x04
     9da:	ce 01       	movw	r24, r28
     9dc:	01 96       	adiw	r24, 0x01	; 1
     9de:	be 01       	movw	r22, r28
     9e0:	6b 5f       	subi	r22, 0xFB	; 251
     9e2:	7f 4f       	sbci	r23, 0xFF	; 255
     9e4:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     9e8:	8d 81       	ldd	r24, Y+5	; 0x05
     9ea:	82 30       	cpi	r24, 0x02	; 2
     9ec:	61 f1       	breq	.+88     	; 0xa46 <__fixsfsi+0x80>
     9ee:	82 30       	cpi	r24, 0x02	; 2
     9f0:	50 f1       	brcs	.+84     	; 0xa46 <__fixsfsi+0x80>
     9f2:	84 30       	cpi	r24, 0x04	; 4
     9f4:	21 f4       	brne	.+8      	; 0x9fe <__fixsfsi+0x38>
     9f6:	8e 81       	ldd	r24, Y+6	; 0x06
     9f8:	88 23       	and	r24, r24
     9fa:	51 f1       	breq	.+84     	; 0xa50 <__fixsfsi+0x8a>
     9fc:	2e c0       	rjmp	.+92     	; 0xa5a <__fixsfsi+0x94>
     9fe:	2f 81       	ldd	r18, Y+7	; 0x07
     a00:	38 85       	ldd	r19, Y+8	; 0x08
     a02:	37 fd       	sbrc	r19, 7
     a04:	20 c0       	rjmp	.+64     	; 0xa46 <__fixsfsi+0x80>
     a06:	6e 81       	ldd	r22, Y+6	; 0x06
     a08:	2f 31       	cpi	r18, 0x1F	; 31
     a0a:	31 05       	cpc	r19, r1
     a0c:	1c f0       	brlt	.+6      	; 0xa14 <__fixsfsi+0x4e>
     a0e:	66 23       	and	r22, r22
     a10:	f9 f0       	breq	.+62     	; 0xa50 <__fixsfsi+0x8a>
     a12:	23 c0       	rjmp	.+70     	; 0xa5a <__fixsfsi+0x94>
     a14:	8e e1       	ldi	r24, 0x1E	; 30
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	82 1b       	sub	r24, r18
     a1a:	93 0b       	sbc	r25, r19
     a1c:	29 85       	ldd	r18, Y+9	; 0x09
     a1e:	3a 85       	ldd	r19, Y+10	; 0x0a
     a20:	4b 85       	ldd	r20, Y+11	; 0x0b
     a22:	5c 85       	ldd	r21, Y+12	; 0x0c
     a24:	04 c0       	rjmp	.+8      	; 0xa2e <__fixsfsi+0x68>
     a26:	56 95       	lsr	r21
     a28:	47 95       	ror	r20
     a2a:	37 95       	ror	r19
     a2c:	27 95       	ror	r18
     a2e:	8a 95       	dec	r24
     a30:	d2 f7       	brpl	.-12     	; 0xa26 <__fixsfsi+0x60>
     a32:	66 23       	and	r22, r22
     a34:	b1 f0       	breq	.+44     	; 0xa62 <__fixsfsi+0x9c>
     a36:	50 95       	com	r21
     a38:	40 95       	com	r20
     a3a:	30 95       	com	r19
     a3c:	21 95       	neg	r18
     a3e:	3f 4f       	sbci	r19, 0xFF	; 255
     a40:	4f 4f       	sbci	r20, 0xFF	; 255
     a42:	5f 4f       	sbci	r21, 0xFF	; 255
     a44:	0e c0       	rjmp	.+28     	; 0xa62 <__fixsfsi+0x9c>
     a46:	20 e0       	ldi	r18, 0x00	; 0
     a48:	30 e0       	ldi	r19, 0x00	; 0
     a4a:	40 e0       	ldi	r20, 0x00	; 0
     a4c:	50 e0       	ldi	r21, 0x00	; 0
     a4e:	09 c0       	rjmp	.+18     	; 0xa62 <__fixsfsi+0x9c>
     a50:	2f ef       	ldi	r18, 0xFF	; 255
     a52:	3f ef       	ldi	r19, 0xFF	; 255
     a54:	4f ef       	ldi	r20, 0xFF	; 255
     a56:	5f e7       	ldi	r21, 0x7F	; 127
     a58:	04 c0       	rjmp	.+8      	; 0xa62 <__fixsfsi+0x9c>
     a5a:	20 e0       	ldi	r18, 0x00	; 0
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	40 e0       	ldi	r20, 0x00	; 0
     a60:	50 e8       	ldi	r21, 0x80	; 128
     a62:	b9 01       	movw	r22, r18
     a64:	ca 01       	movw	r24, r20
     a66:	2c 96       	adiw	r28, 0x0c	; 12
     a68:	e2 e0       	ldi	r30, 0x02	; 2
     a6a:	0c 94 23 19 	jmp	0x3246	; 0x3246 <__epilogue_restores__+0x20>

00000a6e <__floatunsisf>:
     a6e:	a8 e0       	ldi	r26, 0x08	; 8
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	ed e3       	ldi	r30, 0x3D	; 61
     a74:	f5 e0       	ldi	r31, 0x05	; 5
     a76:	0c 94 ff 18 	jmp	0x31fe	; 0x31fe <__prologue_saves__+0x10>
     a7a:	7b 01       	movw	r14, r22
     a7c:	8c 01       	movw	r16, r24
     a7e:	61 15       	cp	r22, r1
     a80:	71 05       	cpc	r23, r1
     a82:	81 05       	cpc	r24, r1
     a84:	91 05       	cpc	r25, r1
     a86:	19 f4       	brne	.+6      	; 0xa8e <__floatunsisf+0x20>
     a88:	82 e0       	ldi	r24, 0x02	; 2
     a8a:	89 83       	std	Y+1, r24	; 0x01
     a8c:	60 c0       	rjmp	.+192    	; 0xb4e <__floatunsisf+0xe0>
     a8e:	83 e0       	ldi	r24, 0x03	; 3
     a90:	89 83       	std	Y+1, r24	; 0x01
     a92:	8e e1       	ldi	r24, 0x1E	; 30
     a94:	c8 2e       	mov	r12, r24
     a96:	d1 2c       	mov	r13, r1
     a98:	dc 82       	std	Y+4, r13	; 0x04
     a9a:	cb 82       	std	Y+3, r12	; 0x03
     a9c:	ed 82       	std	Y+5, r14	; 0x05
     a9e:	fe 82       	std	Y+6, r15	; 0x06
     aa0:	0f 83       	std	Y+7, r16	; 0x07
     aa2:	18 87       	std	Y+8, r17	; 0x08
     aa4:	c8 01       	movw	r24, r16
     aa6:	b7 01       	movw	r22, r14
     aa8:	0e 94 b0 05 	call	0xb60	; 0xb60 <__clzsi2>
     aac:	fc 01       	movw	r30, r24
     aae:	31 97       	sbiw	r30, 0x01	; 1
     ab0:	f7 ff       	sbrs	r31, 7
     ab2:	3b c0       	rjmp	.+118    	; 0xb2a <__floatunsisf+0xbc>
     ab4:	22 27       	eor	r18, r18
     ab6:	33 27       	eor	r19, r19
     ab8:	2e 1b       	sub	r18, r30
     aba:	3f 0b       	sbc	r19, r31
     abc:	57 01       	movw	r10, r14
     abe:	68 01       	movw	r12, r16
     ac0:	02 2e       	mov	r0, r18
     ac2:	04 c0       	rjmp	.+8      	; 0xacc <__floatunsisf+0x5e>
     ac4:	d6 94       	lsr	r13
     ac6:	c7 94       	ror	r12
     ac8:	b7 94       	ror	r11
     aca:	a7 94       	ror	r10
     acc:	0a 94       	dec	r0
     ace:	d2 f7       	brpl	.-12     	; 0xac4 <__floatunsisf+0x56>
     ad0:	40 e0       	ldi	r20, 0x00	; 0
     ad2:	50 e0       	ldi	r21, 0x00	; 0
     ad4:	60 e0       	ldi	r22, 0x00	; 0
     ad6:	70 e0       	ldi	r23, 0x00	; 0
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	a0 e0       	ldi	r26, 0x00	; 0
     ade:	b0 e0       	ldi	r27, 0x00	; 0
     ae0:	04 c0       	rjmp	.+8      	; 0xaea <__floatunsisf+0x7c>
     ae2:	88 0f       	add	r24, r24
     ae4:	99 1f       	adc	r25, r25
     ae6:	aa 1f       	adc	r26, r26
     ae8:	bb 1f       	adc	r27, r27
     aea:	2a 95       	dec	r18
     aec:	d2 f7       	brpl	.-12     	; 0xae2 <__floatunsisf+0x74>
     aee:	01 97       	sbiw	r24, 0x01	; 1
     af0:	a1 09       	sbc	r26, r1
     af2:	b1 09       	sbc	r27, r1
     af4:	8e 21       	and	r24, r14
     af6:	9f 21       	and	r25, r15
     af8:	a0 23       	and	r26, r16
     afa:	b1 23       	and	r27, r17
     afc:	00 97       	sbiw	r24, 0x00	; 0
     afe:	a1 05       	cpc	r26, r1
     b00:	b1 05       	cpc	r27, r1
     b02:	21 f0       	breq	.+8      	; 0xb0c <__floatunsisf+0x9e>
     b04:	41 e0       	ldi	r20, 0x01	; 1
     b06:	50 e0       	ldi	r21, 0x00	; 0
     b08:	60 e0       	ldi	r22, 0x00	; 0
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	4a 29       	or	r20, r10
     b0e:	5b 29       	or	r21, r11
     b10:	6c 29       	or	r22, r12
     b12:	7d 29       	or	r23, r13
     b14:	4d 83       	std	Y+5, r20	; 0x05
     b16:	5e 83       	std	Y+6, r21	; 0x06
     b18:	6f 83       	std	Y+7, r22	; 0x07
     b1a:	78 87       	std	Y+8, r23	; 0x08
     b1c:	8e e1       	ldi	r24, 0x1E	; 30
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	8e 1b       	sub	r24, r30
     b22:	9f 0b       	sbc	r25, r31
     b24:	9c 83       	std	Y+4, r25	; 0x04
     b26:	8b 83       	std	Y+3, r24	; 0x03
     b28:	12 c0       	rjmp	.+36     	; 0xb4e <__floatunsisf+0xe0>
     b2a:	30 97       	sbiw	r30, 0x00	; 0
     b2c:	81 f0       	breq	.+32     	; 0xb4e <__floatunsisf+0xe0>
     b2e:	0e 2e       	mov	r0, r30
     b30:	04 c0       	rjmp	.+8      	; 0xb3a <__floatunsisf+0xcc>
     b32:	ee 0c       	add	r14, r14
     b34:	ff 1c       	adc	r15, r15
     b36:	00 1f       	adc	r16, r16
     b38:	11 1f       	adc	r17, r17
     b3a:	0a 94       	dec	r0
     b3c:	d2 f7       	brpl	.-12     	; 0xb32 <__floatunsisf+0xc4>
     b3e:	ed 82       	std	Y+5, r14	; 0x05
     b40:	fe 82       	std	Y+6, r15	; 0x06
     b42:	0f 83       	std	Y+7, r16	; 0x07
     b44:	18 87       	std	Y+8, r17	; 0x08
     b46:	ce 1a       	sub	r12, r30
     b48:	df 0a       	sbc	r13, r31
     b4a:	dc 82       	std	Y+4, r13	; 0x04
     b4c:	cb 82       	std	Y+3, r12	; 0x03
     b4e:	1a 82       	std	Y+2, r1	; 0x02
     b50:	ce 01       	movw	r24, r28
     b52:	01 96       	adiw	r24, 0x01	; 1
     b54:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     b58:	28 96       	adiw	r28, 0x08	; 8
     b5a:	ea e0       	ldi	r30, 0x0A	; 10
     b5c:	0c 94 1b 19 	jmp	0x3236	; 0x3236 <__epilogue_restores__+0x10>

00000b60 <__clzsi2>:
     b60:	ef 92       	push	r14
     b62:	ff 92       	push	r15
     b64:	0f 93       	push	r16
     b66:	1f 93       	push	r17
     b68:	7b 01       	movw	r14, r22
     b6a:	8c 01       	movw	r16, r24
     b6c:	80 e0       	ldi	r24, 0x00	; 0
     b6e:	e8 16       	cp	r14, r24
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	f8 06       	cpc	r15, r24
     b74:	81 e0       	ldi	r24, 0x01	; 1
     b76:	08 07       	cpc	r16, r24
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	18 07       	cpc	r17, r24
     b7c:	88 f4       	brcc	.+34     	; 0xba0 <__clzsi2+0x40>
     b7e:	8f ef       	ldi	r24, 0xFF	; 255
     b80:	e8 16       	cp	r14, r24
     b82:	f1 04       	cpc	r15, r1
     b84:	01 05       	cpc	r16, r1
     b86:	11 05       	cpc	r17, r1
     b88:	31 f0       	breq	.+12     	; 0xb96 <__clzsi2+0x36>
     b8a:	28 f0       	brcs	.+10     	; 0xb96 <__clzsi2+0x36>
     b8c:	88 e0       	ldi	r24, 0x08	; 8
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	a0 e0       	ldi	r26, 0x00	; 0
     b92:	b0 e0       	ldi	r27, 0x00	; 0
     b94:	17 c0       	rjmp	.+46     	; 0xbc4 <__clzsi2+0x64>
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	a0 e0       	ldi	r26, 0x00	; 0
     b9c:	b0 e0       	ldi	r27, 0x00	; 0
     b9e:	12 c0       	rjmp	.+36     	; 0xbc4 <__clzsi2+0x64>
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	e8 16       	cp	r14, r24
     ba4:	80 e0       	ldi	r24, 0x00	; 0
     ba6:	f8 06       	cpc	r15, r24
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	08 07       	cpc	r16, r24
     bac:	81 e0       	ldi	r24, 0x01	; 1
     bae:	18 07       	cpc	r17, r24
     bb0:	28 f0       	brcs	.+10     	; 0xbbc <__clzsi2+0x5c>
     bb2:	88 e1       	ldi	r24, 0x18	; 24
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	a0 e0       	ldi	r26, 0x00	; 0
     bb8:	b0 e0       	ldi	r27, 0x00	; 0
     bba:	04 c0       	rjmp	.+8      	; 0xbc4 <__clzsi2+0x64>
     bbc:	80 e1       	ldi	r24, 0x10	; 16
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	a0 e0       	ldi	r26, 0x00	; 0
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	20 e2       	ldi	r18, 0x20	; 32
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	40 e0       	ldi	r20, 0x00	; 0
     bca:	50 e0       	ldi	r21, 0x00	; 0
     bcc:	28 1b       	sub	r18, r24
     bce:	39 0b       	sbc	r19, r25
     bd0:	4a 0b       	sbc	r20, r26
     bd2:	5b 0b       	sbc	r21, r27
     bd4:	04 c0       	rjmp	.+8      	; 0xbde <__clzsi2+0x7e>
     bd6:	16 95       	lsr	r17
     bd8:	07 95       	ror	r16
     bda:	f7 94       	ror	r15
     bdc:	e7 94       	ror	r14
     bde:	8a 95       	dec	r24
     be0:	d2 f7       	brpl	.-12     	; 0xbd6 <__clzsi2+0x76>
     be2:	f7 01       	movw	r30, r14
     be4:	e8 59       	subi	r30, 0x98	; 152
     be6:	ff 4f       	sbci	r31, 0xFF	; 255
     be8:	80 81       	ld	r24, Z
     bea:	28 1b       	sub	r18, r24
     bec:	31 09       	sbc	r19, r1
     bee:	41 09       	sbc	r20, r1
     bf0:	51 09       	sbc	r21, r1
     bf2:	c9 01       	movw	r24, r18
     bf4:	1f 91       	pop	r17
     bf6:	0f 91       	pop	r16
     bf8:	ff 90       	pop	r15
     bfa:	ef 90       	pop	r14
     bfc:	08 95       	ret

00000bfe <__pack_f>:
     bfe:	df 92       	push	r13
     c00:	ef 92       	push	r14
     c02:	ff 92       	push	r15
     c04:	0f 93       	push	r16
     c06:	1f 93       	push	r17
     c08:	fc 01       	movw	r30, r24
     c0a:	e4 80       	ldd	r14, Z+4	; 0x04
     c0c:	f5 80       	ldd	r15, Z+5	; 0x05
     c0e:	06 81       	ldd	r16, Z+6	; 0x06
     c10:	17 81       	ldd	r17, Z+7	; 0x07
     c12:	d1 80       	ldd	r13, Z+1	; 0x01
     c14:	80 81       	ld	r24, Z
     c16:	82 30       	cpi	r24, 0x02	; 2
     c18:	48 f4       	brcc	.+18     	; 0xc2c <__pack_f+0x2e>
     c1a:	80 e0       	ldi	r24, 0x00	; 0
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	a0 e1       	ldi	r26, 0x10	; 16
     c20:	b0 e0       	ldi	r27, 0x00	; 0
     c22:	e8 2a       	or	r14, r24
     c24:	f9 2a       	or	r15, r25
     c26:	0a 2b       	or	r16, r26
     c28:	1b 2b       	or	r17, r27
     c2a:	a5 c0       	rjmp	.+330    	; 0xd76 <__pack_f+0x178>
     c2c:	84 30       	cpi	r24, 0x04	; 4
     c2e:	09 f4       	brne	.+2      	; 0xc32 <__pack_f+0x34>
     c30:	9f c0       	rjmp	.+318    	; 0xd70 <__pack_f+0x172>
     c32:	82 30       	cpi	r24, 0x02	; 2
     c34:	21 f4       	brne	.+8      	; 0xc3e <__pack_f+0x40>
     c36:	ee 24       	eor	r14, r14
     c38:	ff 24       	eor	r15, r15
     c3a:	87 01       	movw	r16, r14
     c3c:	05 c0       	rjmp	.+10     	; 0xc48 <__pack_f+0x4a>
     c3e:	e1 14       	cp	r14, r1
     c40:	f1 04       	cpc	r15, r1
     c42:	01 05       	cpc	r16, r1
     c44:	11 05       	cpc	r17, r1
     c46:	19 f4       	brne	.+6      	; 0xc4e <__pack_f+0x50>
     c48:	e0 e0       	ldi	r30, 0x00	; 0
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	96 c0       	rjmp	.+300    	; 0xd7a <__pack_f+0x17c>
     c4e:	62 81       	ldd	r22, Z+2	; 0x02
     c50:	73 81       	ldd	r23, Z+3	; 0x03
     c52:	9f ef       	ldi	r25, 0xFF	; 255
     c54:	62 38       	cpi	r22, 0x82	; 130
     c56:	79 07       	cpc	r23, r25
     c58:	0c f0       	brlt	.+2      	; 0xc5c <__pack_f+0x5e>
     c5a:	5b c0       	rjmp	.+182    	; 0xd12 <__pack_f+0x114>
     c5c:	22 e8       	ldi	r18, 0x82	; 130
     c5e:	3f ef       	ldi	r19, 0xFF	; 255
     c60:	26 1b       	sub	r18, r22
     c62:	37 0b       	sbc	r19, r23
     c64:	2a 31       	cpi	r18, 0x1A	; 26
     c66:	31 05       	cpc	r19, r1
     c68:	2c f0       	brlt	.+10     	; 0xc74 <__pack_f+0x76>
     c6a:	20 e0       	ldi	r18, 0x00	; 0
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	40 e0       	ldi	r20, 0x00	; 0
     c70:	50 e0       	ldi	r21, 0x00	; 0
     c72:	2a c0       	rjmp	.+84     	; 0xcc8 <__pack_f+0xca>
     c74:	b8 01       	movw	r22, r16
     c76:	a7 01       	movw	r20, r14
     c78:	02 2e       	mov	r0, r18
     c7a:	04 c0       	rjmp	.+8      	; 0xc84 <__pack_f+0x86>
     c7c:	76 95       	lsr	r23
     c7e:	67 95       	ror	r22
     c80:	57 95       	ror	r21
     c82:	47 95       	ror	r20
     c84:	0a 94       	dec	r0
     c86:	d2 f7       	brpl	.-12     	; 0xc7c <__pack_f+0x7e>
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	a0 e0       	ldi	r26, 0x00	; 0
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	04 c0       	rjmp	.+8      	; 0xc9a <__pack_f+0x9c>
     c92:	88 0f       	add	r24, r24
     c94:	99 1f       	adc	r25, r25
     c96:	aa 1f       	adc	r26, r26
     c98:	bb 1f       	adc	r27, r27
     c9a:	2a 95       	dec	r18
     c9c:	d2 f7       	brpl	.-12     	; 0xc92 <__pack_f+0x94>
     c9e:	01 97       	sbiw	r24, 0x01	; 1
     ca0:	a1 09       	sbc	r26, r1
     ca2:	b1 09       	sbc	r27, r1
     ca4:	8e 21       	and	r24, r14
     ca6:	9f 21       	and	r25, r15
     ca8:	a0 23       	and	r26, r16
     caa:	b1 23       	and	r27, r17
     cac:	00 97       	sbiw	r24, 0x00	; 0
     cae:	a1 05       	cpc	r26, r1
     cb0:	b1 05       	cpc	r27, r1
     cb2:	21 f0       	breq	.+8      	; 0xcbc <__pack_f+0xbe>
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	a0 e0       	ldi	r26, 0x00	; 0
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	9a 01       	movw	r18, r20
     cbe:	ab 01       	movw	r20, r22
     cc0:	28 2b       	or	r18, r24
     cc2:	39 2b       	or	r19, r25
     cc4:	4a 2b       	or	r20, r26
     cc6:	5b 2b       	or	r21, r27
     cc8:	da 01       	movw	r26, r20
     cca:	c9 01       	movw	r24, r18
     ccc:	8f 77       	andi	r24, 0x7F	; 127
     cce:	90 70       	andi	r25, 0x00	; 0
     cd0:	a0 70       	andi	r26, 0x00	; 0
     cd2:	b0 70       	andi	r27, 0x00	; 0
     cd4:	80 34       	cpi	r24, 0x40	; 64
     cd6:	91 05       	cpc	r25, r1
     cd8:	a1 05       	cpc	r26, r1
     cda:	b1 05       	cpc	r27, r1
     cdc:	39 f4       	brne	.+14     	; 0xcec <__pack_f+0xee>
     cde:	27 ff       	sbrs	r18, 7
     ce0:	09 c0       	rjmp	.+18     	; 0xcf4 <__pack_f+0xf6>
     ce2:	20 5c       	subi	r18, 0xC0	; 192
     ce4:	3f 4f       	sbci	r19, 0xFF	; 255
     ce6:	4f 4f       	sbci	r20, 0xFF	; 255
     ce8:	5f 4f       	sbci	r21, 0xFF	; 255
     cea:	04 c0       	rjmp	.+8      	; 0xcf4 <__pack_f+0xf6>
     cec:	21 5c       	subi	r18, 0xC1	; 193
     cee:	3f 4f       	sbci	r19, 0xFF	; 255
     cf0:	4f 4f       	sbci	r20, 0xFF	; 255
     cf2:	5f 4f       	sbci	r21, 0xFF	; 255
     cf4:	e0 e0       	ldi	r30, 0x00	; 0
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	20 30       	cpi	r18, 0x00	; 0
     cfa:	a0 e0       	ldi	r26, 0x00	; 0
     cfc:	3a 07       	cpc	r19, r26
     cfe:	a0 e0       	ldi	r26, 0x00	; 0
     d00:	4a 07       	cpc	r20, r26
     d02:	a0 e4       	ldi	r26, 0x40	; 64
     d04:	5a 07       	cpc	r21, r26
     d06:	10 f0       	brcs	.+4      	; 0xd0c <__pack_f+0x10e>
     d08:	e1 e0       	ldi	r30, 0x01	; 1
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	79 01       	movw	r14, r18
     d0e:	8a 01       	movw	r16, r20
     d10:	27 c0       	rjmp	.+78     	; 0xd60 <__pack_f+0x162>
     d12:	60 38       	cpi	r22, 0x80	; 128
     d14:	71 05       	cpc	r23, r1
     d16:	64 f5       	brge	.+88     	; 0xd70 <__pack_f+0x172>
     d18:	fb 01       	movw	r30, r22
     d1a:	e1 58       	subi	r30, 0x81	; 129
     d1c:	ff 4f       	sbci	r31, 0xFF	; 255
     d1e:	d8 01       	movw	r26, r16
     d20:	c7 01       	movw	r24, r14
     d22:	8f 77       	andi	r24, 0x7F	; 127
     d24:	90 70       	andi	r25, 0x00	; 0
     d26:	a0 70       	andi	r26, 0x00	; 0
     d28:	b0 70       	andi	r27, 0x00	; 0
     d2a:	80 34       	cpi	r24, 0x40	; 64
     d2c:	91 05       	cpc	r25, r1
     d2e:	a1 05       	cpc	r26, r1
     d30:	b1 05       	cpc	r27, r1
     d32:	39 f4       	brne	.+14     	; 0xd42 <__pack_f+0x144>
     d34:	e7 fe       	sbrs	r14, 7
     d36:	0d c0       	rjmp	.+26     	; 0xd52 <__pack_f+0x154>
     d38:	80 e4       	ldi	r24, 0x40	; 64
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	a0 e0       	ldi	r26, 0x00	; 0
     d3e:	b0 e0       	ldi	r27, 0x00	; 0
     d40:	04 c0       	rjmp	.+8      	; 0xd4a <__pack_f+0x14c>
     d42:	8f e3       	ldi	r24, 0x3F	; 63
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	a0 e0       	ldi	r26, 0x00	; 0
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	e8 0e       	add	r14, r24
     d4c:	f9 1e       	adc	r15, r25
     d4e:	0a 1f       	adc	r16, r26
     d50:	1b 1f       	adc	r17, r27
     d52:	17 ff       	sbrs	r17, 7
     d54:	05 c0       	rjmp	.+10     	; 0xd60 <__pack_f+0x162>
     d56:	16 95       	lsr	r17
     d58:	07 95       	ror	r16
     d5a:	f7 94       	ror	r15
     d5c:	e7 94       	ror	r14
     d5e:	31 96       	adiw	r30, 0x01	; 1
     d60:	87 e0       	ldi	r24, 0x07	; 7
     d62:	16 95       	lsr	r17
     d64:	07 95       	ror	r16
     d66:	f7 94       	ror	r15
     d68:	e7 94       	ror	r14
     d6a:	8a 95       	dec	r24
     d6c:	d1 f7       	brne	.-12     	; 0xd62 <__pack_f+0x164>
     d6e:	05 c0       	rjmp	.+10     	; 0xd7a <__pack_f+0x17c>
     d70:	ee 24       	eor	r14, r14
     d72:	ff 24       	eor	r15, r15
     d74:	87 01       	movw	r16, r14
     d76:	ef ef       	ldi	r30, 0xFF	; 255
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	6e 2f       	mov	r22, r30
     d7c:	67 95       	ror	r22
     d7e:	66 27       	eor	r22, r22
     d80:	67 95       	ror	r22
     d82:	90 2f       	mov	r25, r16
     d84:	9f 77       	andi	r25, 0x7F	; 127
     d86:	d7 94       	ror	r13
     d88:	dd 24       	eor	r13, r13
     d8a:	d7 94       	ror	r13
     d8c:	8e 2f       	mov	r24, r30
     d8e:	86 95       	lsr	r24
     d90:	49 2f       	mov	r20, r25
     d92:	46 2b       	or	r20, r22
     d94:	58 2f       	mov	r21, r24
     d96:	5d 29       	or	r21, r13
     d98:	b7 01       	movw	r22, r14
     d9a:	ca 01       	movw	r24, r20
     d9c:	1f 91       	pop	r17
     d9e:	0f 91       	pop	r16
     da0:	ff 90       	pop	r15
     da2:	ef 90       	pop	r14
     da4:	df 90       	pop	r13
     da6:	08 95       	ret

00000da8 <__unpack_f>:
     da8:	fc 01       	movw	r30, r24
     daa:	db 01       	movw	r26, r22
     dac:	40 81       	ld	r20, Z
     dae:	51 81       	ldd	r21, Z+1	; 0x01
     db0:	22 81       	ldd	r18, Z+2	; 0x02
     db2:	62 2f       	mov	r22, r18
     db4:	6f 77       	andi	r22, 0x7F	; 127
     db6:	70 e0       	ldi	r23, 0x00	; 0
     db8:	22 1f       	adc	r18, r18
     dba:	22 27       	eor	r18, r18
     dbc:	22 1f       	adc	r18, r18
     dbe:	93 81       	ldd	r25, Z+3	; 0x03
     dc0:	89 2f       	mov	r24, r25
     dc2:	88 0f       	add	r24, r24
     dc4:	82 2b       	or	r24, r18
     dc6:	28 2f       	mov	r18, r24
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	99 1f       	adc	r25, r25
     dcc:	99 27       	eor	r25, r25
     dce:	99 1f       	adc	r25, r25
     dd0:	11 96       	adiw	r26, 0x01	; 1
     dd2:	9c 93       	st	X, r25
     dd4:	11 97       	sbiw	r26, 0x01	; 1
     dd6:	21 15       	cp	r18, r1
     dd8:	31 05       	cpc	r19, r1
     dda:	a9 f5       	brne	.+106    	; 0xe46 <__unpack_f+0x9e>
     ddc:	41 15       	cp	r20, r1
     dde:	51 05       	cpc	r21, r1
     de0:	61 05       	cpc	r22, r1
     de2:	71 05       	cpc	r23, r1
     de4:	11 f4       	brne	.+4      	; 0xdea <__unpack_f+0x42>
     de6:	82 e0       	ldi	r24, 0x02	; 2
     de8:	37 c0       	rjmp	.+110    	; 0xe58 <__unpack_f+0xb0>
     dea:	82 e8       	ldi	r24, 0x82	; 130
     dec:	9f ef       	ldi	r25, 0xFF	; 255
     dee:	13 96       	adiw	r26, 0x03	; 3
     df0:	9c 93       	st	X, r25
     df2:	8e 93       	st	-X, r24
     df4:	12 97       	sbiw	r26, 0x02	; 2
     df6:	9a 01       	movw	r18, r20
     df8:	ab 01       	movw	r20, r22
     dfa:	67 e0       	ldi	r22, 0x07	; 7
     dfc:	22 0f       	add	r18, r18
     dfe:	33 1f       	adc	r19, r19
     e00:	44 1f       	adc	r20, r20
     e02:	55 1f       	adc	r21, r21
     e04:	6a 95       	dec	r22
     e06:	d1 f7       	brne	.-12     	; 0xdfc <__unpack_f+0x54>
     e08:	83 e0       	ldi	r24, 0x03	; 3
     e0a:	8c 93       	st	X, r24
     e0c:	0d c0       	rjmp	.+26     	; 0xe28 <__unpack_f+0x80>
     e0e:	22 0f       	add	r18, r18
     e10:	33 1f       	adc	r19, r19
     e12:	44 1f       	adc	r20, r20
     e14:	55 1f       	adc	r21, r21
     e16:	12 96       	adiw	r26, 0x02	; 2
     e18:	8d 91       	ld	r24, X+
     e1a:	9c 91       	ld	r25, X
     e1c:	13 97       	sbiw	r26, 0x03	; 3
     e1e:	01 97       	sbiw	r24, 0x01	; 1
     e20:	13 96       	adiw	r26, 0x03	; 3
     e22:	9c 93       	st	X, r25
     e24:	8e 93       	st	-X, r24
     e26:	12 97       	sbiw	r26, 0x02	; 2
     e28:	20 30       	cpi	r18, 0x00	; 0
     e2a:	80 e0       	ldi	r24, 0x00	; 0
     e2c:	38 07       	cpc	r19, r24
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	48 07       	cpc	r20, r24
     e32:	80 e4       	ldi	r24, 0x40	; 64
     e34:	58 07       	cpc	r21, r24
     e36:	58 f3       	brcs	.-42     	; 0xe0e <__unpack_f+0x66>
     e38:	14 96       	adiw	r26, 0x04	; 4
     e3a:	2d 93       	st	X+, r18
     e3c:	3d 93       	st	X+, r19
     e3e:	4d 93       	st	X+, r20
     e40:	5c 93       	st	X, r21
     e42:	17 97       	sbiw	r26, 0x07	; 7
     e44:	08 95       	ret
     e46:	2f 3f       	cpi	r18, 0xFF	; 255
     e48:	31 05       	cpc	r19, r1
     e4a:	79 f4       	brne	.+30     	; 0xe6a <__unpack_f+0xc2>
     e4c:	41 15       	cp	r20, r1
     e4e:	51 05       	cpc	r21, r1
     e50:	61 05       	cpc	r22, r1
     e52:	71 05       	cpc	r23, r1
     e54:	19 f4       	brne	.+6      	; 0xe5c <__unpack_f+0xb4>
     e56:	84 e0       	ldi	r24, 0x04	; 4
     e58:	8c 93       	st	X, r24
     e5a:	08 95       	ret
     e5c:	64 ff       	sbrs	r22, 4
     e5e:	03 c0       	rjmp	.+6      	; 0xe66 <__unpack_f+0xbe>
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	8c 93       	st	X, r24
     e64:	12 c0       	rjmp	.+36     	; 0xe8a <__unpack_f+0xe2>
     e66:	1c 92       	st	X, r1
     e68:	10 c0       	rjmp	.+32     	; 0xe8a <__unpack_f+0xe2>
     e6a:	2f 57       	subi	r18, 0x7F	; 127
     e6c:	30 40       	sbci	r19, 0x00	; 0
     e6e:	13 96       	adiw	r26, 0x03	; 3
     e70:	3c 93       	st	X, r19
     e72:	2e 93       	st	-X, r18
     e74:	12 97       	sbiw	r26, 0x02	; 2
     e76:	83 e0       	ldi	r24, 0x03	; 3
     e78:	8c 93       	st	X, r24
     e7a:	87 e0       	ldi	r24, 0x07	; 7
     e7c:	44 0f       	add	r20, r20
     e7e:	55 1f       	adc	r21, r21
     e80:	66 1f       	adc	r22, r22
     e82:	77 1f       	adc	r23, r23
     e84:	8a 95       	dec	r24
     e86:	d1 f7       	brne	.-12     	; 0xe7c <__unpack_f+0xd4>
     e88:	70 64       	ori	r23, 0x40	; 64
     e8a:	14 96       	adiw	r26, 0x04	; 4
     e8c:	4d 93       	st	X+, r20
     e8e:	5d 93       	st	X+, r21
     e90:	6d 93       	st	X+, r22
     e92:	7c 93       	st	X, r23
     e94:	17 97       	sbiw	r26, 0x07	; 7
     e96:	08 95       	ret

00000e98 <__fpcmp_parts_f>:
     e98:	1f 93       	push	r17
     e9a:	dc 01       	movw	r26, r24
     e9c:	fb 01       	movw	r30, r22
     e9e:	9c 91       	ld	r25, X
     ea0:	92 30       	cpi	r25, 0x02	; 2
     ea2:	08 f4       	brcc	.+2      	; 0xea6 <__fpcmp_parts_f+0xe>
     ea4:	47 c0       	rjmp	.+142    	; 0xf34 <__fpcmp_parts_f+0x9c>
     ea6:	80 81       	ld	r24, Z
     ea8:	82 30       	cpi	r24, 0x02	; 2
     eaa:	08 f4       	brcc	.+2      	; 0xeae <__fpcmp_parts_f+0x16>
     eac:	43 c0       	rjmp	.+134    	; 0xf34 <__fpcmp_parts_f+0x9c>
     eae:	94 30       	cpi	r25, 0x04	; 4
     eb0:	51 f4       	brne	.+20     	; 0xec6 <__fpcmp_parts_f+0x2e>
     eb2:	11 96       	adiw	r26, 0x01	; 1
     eb4:	1c 91       	ld	r17, X
     eb6:	84 30       	cpi	r24, 0x04	; 4
     eb8:	99 f5       	brne	.+102    	; 0xf20 <__fpcmp_parts_f+0x88>
     eba:	81 81       	ldd	r24, Z+1	; 0x01
     ebc:	68 2f       	mov	r22, r24
     ebe:	70 e0       	ldi	r23, 0x00	; 0
     ec0:	61 1b       	sub	r22, r17
     ec2:	71 09       	sbc	r23, r1
     ec4:	3f c0       	rjmp	.+126    	; 0xf44 <__fpcmp_parts_f+0xac>
     ec6:	84 30       	cpi	r24, 0x04	; 4
     ec8:	21 f0       	breq	.+8      	; 0xed2 <__fpcmp_parts_f+0x3a>
     eca:	92 30       	cpi	r25, 0x02	; 2
     ecc:	31 f4       	brne	.+12     	; 0xeda <__fpcmp_parts_f+0x42>
     ece:	82 30       	cpi	r24, 0x02	; 2
     ed0:	b9 f1       	breq	.+110    	; 0xf40 <__fpcmp_parts_f+0xa8>
     ed2:	81 81       	ldd	r24, Z+1	; 0x01
     ed4:	88 23       	and	r24, r24
     ed6:	89 f1       	breq	.+98     	; 0xf3a <__fpcmp_parts_f+0xa2>
     ed8:	2d c0       	rjmp	.+90     	; 0xf34 <__fpcmp_parts_f+0x9c>
     eda:	11 96       	adiw	r26, 0x01	; 1
     edc:	1c 91       	ld	r17, X
     ede:	11 97       	sbiw	r26, 0x01	; 1
     ee0:	82 30       	cpi	r24, 0x02	; 2
     ee2:	f1 f0       	breq	.+60     	; 0xf20 <__fpcmp_parts_f+0x88>
     ee4:	81 81       	ldd	r24, Z+1	; 0x01
     ee6:	18 17       	cp	r17, r24
     ee8:	d9 f4       	brne	.+54     	; 0xf20 <__fpcmp_parts_f+0x88>
     eea:	12 96       	adiw	r26, 0x02	; 2
     eec:	2d 91       	ld	r18, X+
     eee:	3c 91       	ld	r19, X
     ef0:	13 97       	sbiw	r26, 0x03	; 3
     ef2:	82 81       	ldd	r24, Z+2	; 0x02
     ef4:	93 81       	ldd	r25, Z+3	; 0x03
     ef6:	82 17       	cp	r24, r18
     ef8:	93 07       	cpc	r25, r19
     efa:	94 f0       	brlt	.+36     	; 0xf20 <__fpcmp_parts_f+0x88>
     efc:	28 17       	cp	r18, r24
     efe:	39 07       	cpc	r19, r25
     f00:	bc f0       	brlt	.+46     	; 0xf30 <__fpcmp_parts_f+0x98>
     f02:	14 96       	adiw	r26, 0x04	; 4
     f04:	8d 91       	ld	r24, X+
     f06:	9d 91       	ld	r25, X+
     f08:	0d 90       	ld	r0, X+
     f0a:	bc 91       	ld	r27, X
     f0c:	a0 2d       	mov	r26, r0
     f0e:	24 81       	ldd	r18, Z+4	; 0x04
     f10:	35 81       	ldd	r19, Z+5	; 0x05
     f12:	46 81       	ldd	r20, Z+6	; 0x06
     f14:	57 81       	ldd	r21, Z+7	; 0x07
     f16:	28 17       	cp	r18, r24
     f18:	39 07       	cpc	r19, r25
     f1a:	4a 07       	cpc	r20, r26
     f1c:	5b 07       	cpc	r21, r27
     f1e:	18 f4       	brcc	.+6      	; 0xf26 <__fpcmp_parts_f+0x8e>
     f20:	11 23       	and	r17, r17
     f22:	41 f0       	breq	.+16     	; 0xf34 <__fpcmp_parts_f+0x9c>
     f24:	0a c0       	rjmp	.+20     	; 0xf3a <__fpcmp_parts_f+0xa2>
     f26:	82 17       	cp	r24, r18
     f28:	93 07       	cpc	r25, r19
     f2a:	a4 07       	cpc	r26, r20
     f2c:	b5 07       	cpc	r27, r21
     f2e:	40 f4       	brcc	.+16     	; 0xf40 <__fpcmp_parts_f+0xa8>
     f30:	11 23       	and	r17, r17
     f32:	19 f0       	breq	.+6      	; 0xf3a <__fpcmp_parts_f+0xa2>
     f34:	61 e0       	ldi	r22, 0x01	; 1
     f36:	70 e0       	ldi	r23, 0x00	; 0
     f38:	05 c0       	rjmp	.+10     	; 0xf44 <__fpcmp_parts_f+0xac>
     f3a:	6f ef       	ldi	r22, 0xFF	; 255
     f3c:	7f ef       	ldi	r23, 0xFF	; 255
     f3e:	02 c0       	rjmp	.+4      	; 0xf44 <__fpcmp_parts_f+0xac>
     f40:	60 e0       	ldi	r22, 0x00	; 0
     f42:	70 e0       	ldi	r23, 0x00	; 0
     f44:	cb 01       	movw	r24, r22
     f46:	1f 91       	pop	r17
     f48:	08 95       	ret

00000f4a <ADC_voidInit>:
static u8 ADC_u8ChainConversionIndex = 0;     /* Global variable to carry the current conversion index */

/*****************************************************************************************************/

void ADC_voidInit(void)
{
     f4a:	df 93       	push	r29
     f4c:	cf 93       	push	r28
     f4e:	cd b7       	in	r28, 0x3d	; 61
     f50:	de b7       	in	r29, 0x3e	; 62
	/* reference voltage */
	ADMUX &= ADC_VOLT_REF_SELEC_MASK;
     f52:	a7 e2       	ldi	r26, 0x27	; 39
     f54:	b0 e0       	ldi	r27, 0x00	; 0
     f56:	e7 e2       	ldi	r30, 0x27	; 39
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	8f 73       	andi	r24, 0x3F	; 63
     f5e:	8c 93       	st	X, r24
	ADMUX |= ADC_VOLT_REF_SELEC;
     f60:	a7 e2       	ldi	r26, 0x27	; 39
     f62:	b0 e0       	ldi	r27, 0x00	; 0
     f64:	e7 e2       	ldi	r30, 0x27	; 39
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	80 81       	ld	r24, Z
     f6a:	80 64       	ori	r24, 0x40	; 64
     f6c:	8c 93       	st	X, r24

	/* Activate Data Register */
	ADMUX &= ADC_Data_Register_MASK;
     f6e:	a7 e2       	ldi	r26, 0x27	; 39
     f70:	b0 e0       	ldi	r27, 0x00	; 0
     f72:	e7 e2       	ldi	r30, 0x27	; 39
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	80 81       	ld	r24, Z
     f78:	8f 7d       	andi	r24, 0xDF	; 223
     f7a:	8c 93       	st	X, r24
	ADMUX |= ADC_Data_Register;
     f7c:	a7 e2       	ldi	r26, 0x27	; 39
     f7e:	b0 e0       	ldi	r27, 0x00	; 0
     f80:	e7 e2       	ldi	r30, 0x27	; 39
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	80 81       	ld	r24, Z
     f86:	8c 93       	st	X, r24
	//SET_BIT(ADMUX,ADMUX_ADLAR);

	/* Prescaler Selection */
	ADCSRA &= ADC_PRESC_MASK;
     f88:	a6 e2       	ldi	r26, 0x26	; 38
     f8a:	b0 e0       	ldi	r27, 0x00	; 0
     f8c:	e6 e2       	ldi	r30, 0x26	; 38
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	80 81       	ld	r24, Z
     f92:	88 7f       	andi	r24, 0xF8	; 248
     f94:	8c 93       	st	X, r24
	ADCSRA |= ADC_PRESC_SELEC;
     f96:	a6 e2       	ldi	r26, 0x26	; 38
     f98:	b0 e0       	ldi	r27, 0x00	; 0
     f9a:	e6 e2       	ldi	r30, 0x26	; 38
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
     fa0:	87 60       	ori	r24, 0x07	; 7
     fa2:	8c 93       	st	X, r24

	/* Enable peripheral*/
	SET_BIT(ADCSRA,ADCSRA_ADEN);
     fa4:	a6 e2       	ldi	r26, 0x26	; 38
     fa6:	b0 e0       	ldi	r27, 0x00	; 0
     fa8:	e6 e2       	ldi	r30, 0x26	; 38
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	80 81       	ld	r24, Z
     fae:	80 68       	ori	r24, 0x80	; 128
     fb0:	8c 93       	st	X, r24
	SFIOR |= ADC_Auto_Trigger_Source;

#endif


}
     fb2:	cf 91       	pop	r28
     fb4:	df 91       	pop	r29
     fb6:	08 95       	ret

00000fb8 <ADC_u8StartConversionSynch>:
u8 ADC_u8StartConversionSynch(u8 Copy_u8Channel, u16* Copy_pu16Reading)
{
     fb8:	df 93       	push	r29
     fba:	cf 93       	push	r28
     fbc:	cd b7       	in	r28, 0x3d	; 61
     fbe:	de b7       	in	r29, 0x3e	; 62
     fc0:	28 97       	sbiw	r28, 0x08	; 8
     fc2:	0f b6       	in	r0, 0x3f	; 63
     fc4:	f8 94       	cli
     fc6:	de bf       	out	0x3e, r29	; 62
     fc8:	0f be       	out	0x3f, r0	; 63
     fca:	cd bf       	out	0x3d, r28	; 61
     fcc:	8e 83       	std	Y+6, r24	; 0x06
     fce:	78 87       	std	Y+8, r23	; 0x08
     fd0:	6f 83       	std	Y+7, r22	; 0x07
	u32 Local_u32Counter = 0;
     fd2:	1a 82       	std	Y+2, r1	; 0x02
     fd4:	1b 82       	std	Y+3, r1	; 0x03
     fd6:	1c 82       	std	Y+4, r1	; 0x04
     fd8:	1d 82       	std	Y+5, r1	; 0x05
	u8 Local_u8ErrorState = OK;
     fda:	19 82       	std	Y+1, r1	; 0x01
	if(ADC_u8BusyState == IDLE)
     fdc:	80 91 8e 01 	lds	r24, 0x018E
     fe0:	88 23       	and	r24, r24
     fe2:	09 f0       	breq	.+2      	; 0xfe6 <ADC_u8StartConversionSynch+0x2e>
     fe4:	5d c0       	rjmp	.+186    	; 0x10a0 <ADC_u8StartConversionSynch+0xe8>
	{
		/* ADC is now busy*/
		ADC_u8BusyState = BUSY;
     fe6:	81 e0       	ldi	r24, 0x01	; 1
     fe8:	80 93 8e 01 	sts	0x018E, r24

		ADMUX &= ADC_SELEC_CHANNEL_MASK; 	/* Clear the MUX bits in ADMUX register*/
     fec:	a7 e2       	ldi	r26, 0x27	; 39
     fee:	b0 e0       	ldi	r27, 0x00	; 0
     ff0:	e7 e2       	ldi	r30, 0x27	; 39
     ff2:	f0 e0       	ldi	r31, 0x00	; 0
     ff4:	80 81       	ld	r24, Z
     ff6:	80 7e       	andi	r24, 0xE0	; 224
     ff8:	8c 93       	st	X, r24
		ADMUX |= Copy_u8Channel;           /*Set the required channel into the MUX bits*/
     ffa:	a7 e2       	ldi	r26, 0x27	; 39
     ffc:	b0 e0       	ldi	r27, 0x00	; 0
     ffe:	e7 e2       	ldi	r30, 0x27	; 39
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	90 81       	ld	r25, Z
    1004:	8e 81       	ldd	r24, Y+6	; 0x06
    1006:	89 2b       	or	r24, r25
    1008:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADCSRA_ADSC);      /* Start Conversion */
    100a:	a6 e2       	ldi	r26, 0x26	; 38
    100c:	b0 e0       	ldi	r27, 0x00	; 0
    100e:	e6 e2       	ldi	r30, 0x26	; 38
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	80 81       	ld	r24, Z
    1014:	80 64       	ori	r24, 0x40	; 64
    1016:	8c 93       	st	X, r24
    1018:	0b c0       	rjmp	.+22     	; 0x1030 <ADC_u8StartConversionSynch+0x78>
#if ADC_Conversion_Mode == ADC_Single_Conv_Mode

		/* Polling (Busy Waiting) until the conversion complete flag is set or counter reaching timeout value */
		while(((GET_BIT(ADCSRA,ADCSRA_ADIF))==0) && (Local_u32Counter != ADC_u32TIMEOUT))
		{
			Local_u32Counter++;
    101a:	8a 81       	ldd	r24, Y+2	; 0x02
    101c:	9b 81       	ldd	r25, Y+3	; 0x03
    101e:	ac 81       	ldd	r26, Y+4	; 0x04
    1020:	bd 81       	ldd	r27, Y+5	; 0x05
    1022:	01 96       	adiw	r24, 0x01	; 1
    1024:	a1 1d       	adc	r26, r1
    1026:	b1 1d       	adc	r27, r1
    1028:	8a 83       	std	Y+2, r24	; 0x02
    102a:	9b 83       	std	Y+3, r25	; 0x03
    102c:	ac 83       	std	Y+4, r26	; 0x04
    102e:	bd 83       	std	Y+5, r27	; 0x05


#if ADC_Conversion_Mode == ADC_Single_Conv_Mode

		/* Polling (Busy Waiting) until the conversion complete flag is set or counter reaching timeout value */
		while(((GET_BIT(ADCSRA,ADCSRA_ADIF))==0) && (Local_u32Counter != ADC_u32TIMEOUT))
    1030:	e6 e2       	ldi	r30, 0x26	; 38
    1032:	f0 e0       	ldi	r31, 0x00	; 0
    1034:	80 81       	ld	r24, Z
    1036:	82 95       	swap	r24
    1038:	8f 70       	andi	r24, 0x0F	; 15
    103a:	88 2f       	mov	r24, r24
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	81 70       	andi	r24, 0x01	; 1
    1040:	90 70       	andi	r25, 0x00	; 0
    1042:	00 97       	sbiw	r24, 0x00	; 0
    1044:	61 f4       	brne	.+24     	; 0x105e <ADC_u8StartConversionSynch+0xa6>
    1046:	8a 81       	ldd	r24, Y+2	; 0x02
    1048:	9b 81       	ldd	r25, Y+3	; 0x03
    104a:	ac 81       	ldd	r26, Y+4	; 0x04
    104c:	bd 81       	ldd	r27, Y+5	; 0x05
    104e:	80 35       	cpi	r24, 0x50	; 80
    1050:	23 ec       	ldi	r18, 0xC3	; 195
    1052:	92 07       	cpc	r25, r18
    1054:	20 e0       	ldi	r18, 0x00	; 0
    1056:	a2 07       	cpc	r26, r18
    1058:	20 e0       	ldi	r18, 0x00	; 0
    105a:	b2 07       	cpc	r27, r18
    105c:	f1 f6       	brne	.-68     	; 0x101a <ADC_u8StartConversionSynch+0x62>
		{
			Local_u32Counter++;
		}

		if (Local_u32Counter == ADC_u32TIMEOUT)
    105e:	8a 81       	ldd	r24, Y+2	; 0x02
    1060:	9b 81       	ldd	r25, Y+3	; 0x03
    1062:	ac 81       	ldd	r26, Y+4	; 0x04
    1064:	bd 81       	ldd	r27, Y+5	; 0x05
    1066:	80 35       	cpi	r24, 0x50	; 80
    1068:	23 ec       	ldi	r18, 0xC3	; 195
    106a:	92 07       	cpc	r25, r18
    106c:	20 e0       	ldi	r18, 0x00	; 0
    106e:	a2 07       	cpc	r26, r18
    1070:	20 e0       	ldi	r18, 0x00	; 0
    1072:	b2 07       	cpc	r27, r18
    1074:	19 f4       	brne	.+6      	; 0x107c <ADC_u8StartConversionSynch+0xc4>
		{
			/* Loop is broken because the time out is reached */
			Local_u8ErrorState = NOK;
    1076:	81 e0       	ldi	r24, 0x01	; 1
    1078:	89 83       	std	Y+1, r24	; 0x01
    107a:	07 c0       	rjmp	.+14     	; 0x108a <ADC_u8StartConversionSynch+0xd2>
		}
		else
		{
			/* Loop is broken because flag is raised */
			/* Clear the conversion complete flag*/
			SET_BIT(ADCSRA,ADCSRA_ADIF);
    107c:	a6 e2       	ldi	r26, 0x26	; 38
    107e:	b0 e0       	ldi	r27, 0x00	; 0
    1080:	e6 e2       	ldi	r30, 0x26	; 38
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	80 81       	ld	r24, Z
    1086:	80 61       	ori	r24, 0x10	; 16
    1088:	8c 93       	st	X, r24
#endif
		/* Return the reading*/
#if   NO_OF_BITS == _8_BITS
		*Copy_pu16Reading = ADCH;
#elif NO_OF_BITS == _10_BITS
		*Copy_pu16Reading =  ADC;
    108a:	e4 e2       	ldi	r30, 0x24	; 36
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	80 81       	ld	r24, Z
    1090:	91 81       	ldd	r25, Z+1	; 0x01
    1092:	ef 81       	ldd	r30, Y+7	; 0x07
    1094:	f8 85       	ldd	r31, Y+8	; 0x08
    1096:	91 83       	std	Z+1, r25	; 0x01
    1098:	80 83       	st	Z, r24
#endif

		/* ADC is finished return it to IDLE */
		ADC_u8BusyState = IDLE;
    109a:	10 92 8e 01 	sts	0x018E, r1
    109e:	02 c0       	rjmp	.+4      	; 0x10a4 <ADC_u8StartConversionSynch+0xec>
	}
	else
	{
		Local_u8ErrorState = BUSY_FUNC;
    10a0:	83 e0       	ldi	r24, 0x03	; 3
    10a2:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    10a4:	89 81       	ldd	r24, Y+1	; 0x01


}
    10a6:	28 96       	adiw	r28, 0x08	; 8
    10a8:	0f b6       	in	r0, 0x3f	; 63
    10aa:	f8 94       	cli
    10ac:	de bf       	out	0x3e, r29	; 62
    10ae:	0f be       	out	0x3f, r0	; 63
    10b0:	cd bf       	out	0x3d, r28	; 61
    10b2:	cf 91       	pop	r28
    10b4:	df 91       	pop	r29
    10b6:	08 95       	ret

000010b8 <ADC_u8StartConversionAsynch>:

u8 ADC_u8StartConversionAsynch(u8 Copy_u8Channel, u16* Copy_pu16Reading, void (*Copy_pvNotificationFun)(void))
{
    10b8:	df 93       	push	r29
    10ba:	cf 93       	push	r28
    10bc:	00 d0       	rcall	.+0      	; 0x10be <ADC_u8StartConversionAsynch+0x6>
    10be:	00 d0       	rcall	.+0      	; 0x10c0 <ADC_u8StartConversionAsynch+0x8>
    10c0:	00 d0       	rcall	.+0      	; 0x10c2 <ADC_u8StartConversionAsynch+0xa>
    10c2:	cd b7       	in	r28, 0x3d	; 61
    10c4:	de b7       	in	r29, 0x3e	; 62
    10c6:	8a 83       	std	Y+2, r24	; 0x02
    10c8:	7c 83       	std	Y+4, r23	; 0x04
    10ca:	6b 83       	std	Y+3, r22	; 0x03
    10cc:	5e 83       	std	Y+6, r21	; 0x06
    10ce:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = OK;
    10d0:	19 82       	std	Y+1, r1	; 0x01

	if(ADC_u8BusyState == IDLE )
    10d2:	80 91 8e 01 	lds	r24, 0x018E
    10d6:	88 23       	and	r24, r24
    10d8:	d1 f5       	brne	.+116    	; 0x114e <ADC_u8StartConversionAsynch+0x96>
	{


		if((Copy_pu16Reading == NULL) || (Copy_pvNotificationFun == NULL))
    10da:	8b 81       	ldd	r24, Y+3	; 0x03
    10dc:	9c 81       	ldd	r25, Y+4	; 0x04
    10de:	00 97       	sbiw	r24, 0x00	; 0
    10e0:	21 f0       	breq	.+8      	; 0x10ea <ADC_u8StartConversionAsynch+0x32>
    10e2:	8d 81       	ldd	r24, Y+5	; 0x05
    10e4:	9e 81       	ldd	r25, Y+6	; 0x06
    10e6:	00 97       	sbiw	r24, 0x00	; 0
    10e8:	19 f4       	brne	.+6      	; 0x10f0 <ADC_u8StartConversionAsynch+0x38>
		{
			Local_u8ErrorState = NULL_POINTER;
    10ea:	82 e0       	ldi	r24, 0x02	; 2
    10ec:	89 83       	std	Y+1, r24	; 0x01
    10ee:	31 c0       	rjmp	.+98     	; 0x1152 <ADC_u8StartConversionAsynch+0x9a>
		}
		else
		{
			/* make ADC BUSY in order not  work until being idle  */
			ADC_u8BusyState = BUSY;
    10f0:	81 e0       	ldi	r24, 0x01	; 1
    10f2:	80 93 8e 01 	sts	0x018E, r24

			/* Make ISR source single channel Asynchronous */
			ADC_u8ISRSourse = SINGLE_CHANNEL_ASYNCH;
    10f6:	10 92 94 01 	sts	0x0194, r1

			/* Initialize the reading variable globally */
			ADC_pu16Reading = Copy_pu16Reading;
    10fa:	8b 81       	ldd	r24, Y+3	; 0x03
    10fc:	9c 81       	ldd	r25, Y+4	; 0x04
    10fe:	90 93 8b 01 	sts	0x018B, r25
    1102:	80 93 8a 01 	sts	0x018A, r24

			/* Initialize the callback notification function globally */
			ADC_pvCallBackNotificationFunc = Copy_pvNotificationFun;
    1106:	8d 81       	ldd	r24, Y+5	; 0x05
    1108:	9e 81       	ldd	r25, Y+6	; 0x06
    110a:	90 93 8d 01 	sts	0x018D, r25
    110e:	80 93 8c 01 	sts	0x018C, r24

			/* Select Channel*/
			ADMUX &= ADC_SELEC_CHANNEL_MASK; 	/* Clear the MUX bits in ADMUX register*/
    1112:	a7 e2       	ldi	r26, 0x27	; 39
    1114:	b0 e0       	ldi	r27, 0x00	; 0
    1116:	e7 e2       	ldi	r30, 0x27	; 39
    1118:	f0 e0       	ldi	r31, 0x00	; 0
    111a:	80 81       	ld	r24, Z
    111c:	80 7e       	andi	r24, 0xE0	; 224
    111e:	8c 93       	st	X, r24
			ADMUX |= Copy_u8Channel;           /*Set the required channel into the MUX bits*/
    1120:	a7 e2       	ldi	r26, 0x27	; 39
    1122:	b0 e0       	ldi	r27, 0x00	; 0
    1124:	e7 e2       	ldi	r30, 0x27	; 39
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    1128:	90 81       	ld	r25, Z
    112a:	8a 81       	ldd	r24, Y+2	; 0x02
    112c:	89 2b       	or	r24, r25
    112e:	8c 93       	st	X, r24

			/* Start Conversion */
			SET_BIT(ADCSRA,ADCSRA_ADSC);
    1130:	a6 e2       	ldi	r26, 0x26	; 38
    1132:	b0 e0       	ldi	r27, 0x00	; 0
    1134:	e6 e2       	ldi	r30, 0x26	; 38
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	80 81       	ld	r24, Z
    113a:	80 64       	ori	r24, 0x40	; 64
    113c:	8c 93       	st	X, r24

			/* Enable INT for ADC  */
			SET_BIT(ADCSRA,ADCSRA_ADIE);
    113e:	a6 e2       	ldi	r26, 0x26	; 38
    1140:	b0 e0       	ldi	r27, 0x00	; 0
    1142:	e6 e2       	ldi	r30, 0x26	; 38
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	80 81       	ld	r24, Z
    1148:	88 60       	ori	r24, 0x08	; 8
    114a:	8c 93       	st	X, r24
    114c:	02 c0       	rjmp	.+4      	; 0x1152 <ADC_u8StartConversionAsynch+0x9a>

		}
	}
	else
	{
		Local_u8ErrorState = BUSY_FUNC;
    114e:	83 e0       	ldi	r24, 0x03	; 3
    1150:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1152:	89 81       	ldd	r24, Y+1	; 0x01
}
    1154:	26 96       	adiw	r28, 0x06	; 6
    1156:	0f b6       	in	r0, 0x3f	; 63
    1158:	f8 94       	cli
    115a:	de bf       	out	0x3e, r29	; 62
    115c:	0f be       	out	0x3f, r0	; 63
    115e:	cd bf       	out	0x3d, r28	; 61
    1160:	cf 91       	pop	r28
    1162:	df 91       	pop	r29
    1164:	08 95       	ret

00001166 <ADC_u8StartChainConversionAsynch>:



u8 ADC_u8StartChainConversionAsynch(ADC_Chain_t* Copy_Chain)
{
    1166:	df 93       	push	r29
    1168:	cf 93       	push	r28
    116a:	00 d0       	rcall	.+0      	; 0x116c <ADC_u8StartChainConversionAsynch+0x6>
    116c:	0f 92       	push	r0
    116e:	cd b7       	in	r28, 0x3d	; 61
    1170:	de b7       	in	r29, 0x3e	; 62
    1172:	9b 83       	std	Y+3, r25	; 0x03
    1174:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    1176:	19 82       	std	Y+1, r1	; 0x01
	/* Check Null Pointer*/
	if(Copy_Chain == NULL)
    1178:	8a 81       	ldd	r24, Y+2	; 0x02
    117a:	9b 81       	ldd	r25, Y+3	; 0x03
    117c:	00 97       	sbiw	r24, 0x00	; 0
    117e:	19 f4       	brne	.+6      	; 0x1186 <ADC_u8StartChainConversionAsynch+0x20>
	{
		Local_u8ErrorState = NULL_POINTER;
    1180:	82 e0       	ldi	r24, 0x02	; 2
    1182:	89 83       	std	Y+1, r24	; 0x01
    1184:	55 c0       	rjmp	.+170    	; 0x1230 <ADC_u8StartChainConversionAsynch+0xca>
	}
	else
	{
		if(ADC_u8BusyState == IDLE)
    1186:	80 91 8e 01 	lds	r24, 0x018E
    118a:	88 23       	and	r24, r24
    118c:	09 f0       	breq	.+2      	; 0x1190 <ADC_u8StartChainConversionAsynch+0x2a>
    118e:	4e c0       	rjmp	.+156    	; 0x122c <ADC_u8StartChainConversionAsynch+0xc6>
		{
			/* Make ADC Busy*/
			ADC_u8BusyState = BUSY;
    1190:	81 e0       	ldi	r24, 0x01	; 1
    1192:	80 93 8e 01 	sts	0x018E, r24


			/* Make ISR Source*/
			ADC_u8ISRSourse = CHAIN_ASYNCH;
    1196:	81 e0       	ldi	r24, 0x01	; 1
    1198:	80 93 94 01 	sts	0x0194, r24

			/* initialize Chain Channel array globally  */
			ADC_pu8ChainChannelArr= Copy_Chain->Channel ;
    119c:	ea 81       	ldd	r30, Y+2	; 0x02
    119e:	fb 81       	ldd	r31, Y+3	; 0x03
    11a0:	80 81       	ld	r24, Z
    11a2:	91 81       	ldd	r25, Z+1	; 0x01
    11a4:	90 93 90 01 	sts	0x0190, r25
    11a8:	80 93 8f 01 	sts	0x018F, r24

			/* initialize Chain result array globally  */
			ADC_pu16ChainResultArr = Copy_Chain->Result;
    11ac:	ea 81       	ldd	r30, Y+2	; 0x02
    11ae:	fb 81       	ldd	r31, Y+3	; 0x03
    11b0:	82 81       	ldd	r24, Z+2	; 0x02
    11b2:	93 81       	ldd	r25, Z+3	; 0x03
    11b4:	90 93 92 01 	sts	0x0192, r25
    11b8:	80 93 91 01 	sts	0x0191, r24

			/* initialize Chain Size globally */
			ADC_u8ChainSize = Copy_Chain->Size;
    11bc:	ea 81       	ldd	r30, Y+2	; 0x02
    11be:	fb 81       	ldd	r31, Y+3	; 0x03
    11c0:	84 81       	ldd	r24, Z+4	; 0x04
    11c2:	80 93 95 01 	sts	0x0195, r24

			/* initialize notification function globally */
			ADC_pvCallBackNotificationFunc = Copy_Chain->NotificationFunc ;
    11c6:	ea 81       	ldd	r30, Y+2	; 0x02
    11c8:	fb 81       	ldd	r31, Y+3	; 0x03
    11ca:	85 81       	ldd	r24, Z+5	; 0x05
    11cc:	96 81       	ldd	r25, Z+6	; 0x06
    11ce:	90 93 8d 01 	sts	0x018D, r25
    11d2:	80 93 8c 01 	sts	0x018C, r24

			/* Initialize current conversion Index*/
			ADC_u8ChainConversionIndex = 0;
    11d6:	10 92 93 01 	sts	0x0193, r1


			/*Set required channel
			 *  Start Conversion of 1st Channel */
			ADMUX &= ADC_SELEC_CHANNEL_MASK; 	          /* Clear the MUX bits in ADMUX register*/
    11da:	a7 e2       	ldi	r26, 0x27	; 39
    11dc:	b0 e0       	ldi	r27, 0x00	; 0
    11de:	e7 e2       	ldi	r30, 0x27	; 39
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	80 81       	ld	r24, Z
    11e4:	80 7e       	andi	r24, 0xE0	; 224
    11e6:	8c 93       	st	X, r24
			ADMUX |= ADC_pu8ChainChannelArr[ADC_u8ChainConversionIndex] ;           /*Set the required channel into the MUX bits
    11e8:	a7 e2       	ldi	r26, 0x27	; 39
    11ea:	b0 e0       	ldi	r27, 0x00	; 0
    11ec:	e7 e2       	ldi	r30, 0x27	; 39
    11ee:	f0 e0       	ldi	r31, 0x00	; 0
    11f0:	40 81       	ld	r20, Z
    11f2:	20 91 8f 01 	lds	r18, 0x018F
    11f6:	30 91 90 01 	lds	r19, 0x0190
    11fa:	80 91 93 01 	lds	r24, 0x0193
    11fe:	88 2f       	mov	r24, r24
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	f9 01       	movw	r30, r18
    1204:	e8 0f       	add	r30, r24
    1206:	f9 1f       	adc	r31, r25
    1208:	80 81       	ld	r24, Z
    120a:	84 2b       	or	r24, r20
    120c:	8c 93       	st	X, r24
			                                                                         ADC_u8ChainConversionIndex is equal zero*/
			SET_BIT(ADCSRA,ADCSRA_ADSC);                /* Start Conversion */
    120e:	a6 e2       	ldi	r26, 0x26	; 38
    1210:	b0 e0       	ldi	r27, 0x00	; 0
    1212:	e6 e2       	ldi	r30, 0x26	; 38
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    1216:	80 81       	ld	r24, Z
    1218:	80 64       	ori	r24, 0x40	; 64
    121a:	8c 93       	st	X, r24
			SET_BIT(ADCSRA,ADCSRA_ADIE);               /* Enable Conversion Complete INT for ADC  */
    121c:	a6 e2       	ldi	r26, 0x26	; 38
    121e:	b0 e0       	ldi	r27, 0x00	; 0
    1220:	e6 e2       	ldi	r30, 0x26	; 38
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	80 81       	ld	r24, Z
    1226:	88 60       	ori	r24, 0x08	; 8
    1228:	8c 93       	st	X, r24
    122a:	02 c0       	rjmp	.+4      	; 0x1230 <ADC_u8StartChainConversionAsynch+0xca>

		}
		else
		{
			Local_u8ErrorState = BUSY_FUNC;
    122c:	83 e0       	ldi	r24, 0x03	; 3
    122e:	89 83       	std	Y+1, r24	; 0x01

		}

	}

	return Local_u8ErrorState;
    1230:	89 81       	ldd	r24, Y+1	; 0x01
}
    1232:	0f 90       	pop	r0
    1234:	0f 90       	pop	r0
    1236:	0f 90       	pop	r0
    1238:	cf 91       	pop	r28
    123a:	df 91       	pop	r29
    123c:	08 95       	ret

0000123e <__vector_16>:

void __vector_16 (void) __attribute__((signal));
void __vector_16 (void)
{
    123e:	1f 92       	push	r1
    1240:	0f 92       	push	r0
    1242:	0f b6       	in	r0, 0x3f	; 63
    1244:	0f 92       	push	r0
    1246:	11 24       	eor	r1, r1
    1248:	2f 93       	push	r18
    124a:	3f 93       	push	r19
    124c:	4f 93       	push	r20
    124e:	5f 93       	push	r21
    1250:	6f 93       	push	r22
    1252:	7f 93       	push	r23
    1254:	8f 93       	push	r24
    1256:	9f 93       	push	r25
    1258:	af 93       	push	r26
    125a:	bf 93       	push	r27
    125c:	ef 93       	push	r30
    125e:	ff 93       	push	r31
    1260:	df 93       	push	r29
    1262:	cf 93       	push	r28
    1264:	cd b7       	in	r28, 0x3d	; 61
    1266:	de b7       	in	r29, 0x3e	; 62
	if(ADC_u8ISRSourse == SINGLE_CHANNEL_ASYNCH)
    1268:	80 91 94 01 	lds	r24, 0x0194
    126c:	88 23       	and	r24, r24
    126e:	c9 f4       	brne	.+50     	; 0x12a2 <__vector_16+0x64>
	{
		/* Read ADC Result */
#if   NO_OF_BITS == _8_BITS
		*ADC_pu16Reading = ADCH;
#elif NO_OF_BITS == _10_BITS
		*ADC_pu16Reading =  ADC;
    1270:	a0 91 8a 01 	lds	r26, 0x018A
    1274:	b0 91 8b 01 	lds	r27, 0x018B
    1278:	e4 e2       	ldi	r30, 0x24	; 36
    127a:	f0 e0       	ldi	r31, 0x00	; 0
    127c:	80 81       	ld	r24, Z
    127e:	91 81       	ldd	r25, Z+1	; 0x01
    1280:	8d 93       	st	X+, r24
    1282:	9c 93       	st	X, r25
#endif
		/* Make ADC state be IDLE because it finished*/
		ADC_u8BusyState = IDLE;
    1284:	10 92 8e 01 	sts	0x018E, r1

		/* Invoke the callback notification function */
		ADC_pvCallBackNotificationFunc();
    1288:	e0 91 8c 01 	lds	r30, 0x018C
    128c:	f0 91 8d 01 	lds	r31, 0x018D
    1290:	09 95       	icall

		/* Disable ADC Conversion complete interrupt */
		CLR_BIT(ADCSRA,ADCSRA_ADIE);
    1292:	a6 e2       	ldi	r26, 0x26	; 38
    1294:	b0 e0       	ldi	r27, 0x00	; 0
    1296:	e6 e2       	ldi	r30, 0x26	; 38
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	80 81       	ld	r24, Z
    129c:	87 7f       	andi	r24, 0xF7	; 247
    129e:	8c 93       	st	X, r24
    12a0:	54 c0       	rjmp	.+168    	; 0x134a <__vector_16+0x10c>
	}
	else if(ADC_u8ISRSourse == CHAIN_ASYNCH)
    12a2:	80 91 94 01 	lds	r24, 0x0194
    12a6:	81 30       	cpi	r24, 0x01	; 1
    12a8:	09 f0       	breq	.+2      	; 0x12ac <__vector_16+0x6e>
    12aa:	4f c0       	rjmp	.+158    	; 0x134a <__vector_16+0x10c>
	{
		/* Read ADC Result */
#if   NO_OF_BITS == _8_BITS
		ADC_pu16ChainResultArr[ADC_u8ChainConversionIndex] = ADCH;
#elif NO_OF_BITS == _10_BITS
		ADC_pu16ChainResultArr[ADC_u8ChainConversionIndex] =  ADC;
    12ac:	20 91 91 01 	lds	r18, 0x0191
    12b0:	30 91 92 01 	lds	r19, 0x0192
    12b4:	80 91 93 01 	lds	r24, 0x0193
    12b8:	88 2f       	mov	r24, r24
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	88 0f       	add	r24, r24
    12be:	99 1f       	adc	r25, r25
    12c0:	d9 01       	movw	r26, r18
    12c2:	a8 0f       	add	r26, r24
    12c4:	b9 1f       	adc	r27, r25
    12c6:	e4 e2       	ldi	r30, 0x24	; 36
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	80 81       	ld	r24, Z
    12cc:	91 81       	ldd	r25, Z+1	; 0x01
    12ce:	11 96       	adiw	r26, 0x01	; 1
    12d0:	9c 93       	st	X, r25
    12d2:	8e 93       	st	-X, r24
#endif
		/* Increment chain index */
		ADC_u8ChainConversionIndex ++;
    12d4:	80 91 93 01 	lds	r24, 0x0193
    12d8:	8f 5f       	subi	r24, 0xFF	; 255
    12da:	80 93 93 01 	sts	0x0193, r24

		/* check chain is finished or not */
		if(ADC_u8ChainConversionIndex == ADC_u8ChainSize)
    12de:	90 91 93 01 	lds	r25, 0x0193
    12e2:	80 91 95 01 	lds	r24, 0x0195
    12e6:	98 17       	cp	r25, r24
    12e8:	79 f4       	brne	.+30     	; 0x1308 <__vector_16+0xca>
		{
			/* Chain is finished*/
			/* Make ADC state be IDLE because it finished*/
			ADC_u8BusyState = IDLE;
    12ea:	10 92 8e 01 	sts	0x018E, r1

			/* Invoke the callback notification function */
			ADC_pvCallBackNotificationFunc();
    12ee:	e0 91 8c 01 	lds	r30, 0x018C
    12f2:	f0 91 8d 01 	lds	r31, 0x018D
    12f6:	09 95       	icall

			/* Disable ADC Conversion complete interrupt */
			CLR_BIT(ADCSRA,ADCSRA_ADIE);
    12f8:	a6 e2       	ldi	r26, 0x26	; 38
    12fa:	b0 e0       	ldi	r27, 0x00	; 0
    12fc:	e6 e2       	ldi	r30, 0x26	; 38
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	80 81       	ld	r24, Z
    1302:	87 7f       	andi	r24, 0xF7	; 247
    1304:	8c 93       	st	X, r24
    1306:	21 c0       	rjmp	.+66     	; 0x134a <__vector_16+0x10c>
		else
		{
			/* Chain is not finished*/
			/*Set next channel
			 *  Start Conversion of next Channel */
			ADMUX &= ADC_SELEC_CHANNEL_MASK; 	                              /* Clear the MUX bits in ADMUX register*/
    1308:	a7 e2       	ldi	r26, 0x27	; 39
    130a:	b0 e0       	ldi	r27, 0x00	; 0
    130c:	e7 e2       	ldi	r30, 0x27	; 39
    130e:	f0 e0       	ldi	r31, 0x00	; 0
    1310:	80 81       	ld	r24, Z
    1312:	80 7e       	andi	r24, 0xE0	; 224
    1314:	8c 93       	st	X, r24
			ADMUX |= ADC_pu8ChainChannelArr[ADC_u8ChainConversionIndex] ;      /*Set the required channel into the MUX bits
    1316:	a7 e2       	ldi	r26, 0x27	; 39
    1318:	b0 e0       	ldi	r27, 0x00	; 0
    131a:	e7 e2       	ldi	r30, 0x27	; 39
    131c:	f0 e0       	ldi	r31, 0x00	; 0
    131e:	40 81       	ld	r20, Z
    1320:	20 91 8f 01 	lds	r18, 0x018F
    1324:	30 91 90 01 	lds	r19, 0x0190
    1328:	80 91 93 01 	lds	r24, 0x0193
    132c:	88 2f       	mov	r24, r24
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	f9 01       	movw	r30, r18
    1332:	e8 0f       	add	r30, r24
    1334:	f9 1f       	adc	r31, r25
    1336:	80 81       	ld	r24, Z
    1338:	84 2b       	or	r24, r20
    133a:	8c 93       	st	X, r24
						                                                          ADC_u8ChainConversionIndex ++ */
			/* Start Conversion */
			SET_BIT(ADCSRA,ADCSRA_ADSC);
    133c:	a6 e2       	ldi	r26, 0x26	; 38
    133e:	b0 e0       	ldi	r27, 0x00	; 0
    1340:	e6 e2       	ldi	r30, 0x26	; 38
    1342:	f0 e0       	ldi	r31, 0x00	; 0
    1344:	80 81       	ld	r24, Z
    1346:	80 64       	ori	r24, 0x40	; 64
    1348:	8c 93       	st	X, r24


	}


}
    134a:	cf 91       	pop	r28
    134c:	df 91       	pop	r29
    134e:	ff 91       	pop	r31
    1350:	ef 91       	pop	r30
    1352:	bf 91       	pop	r27
    1354:	af 91       	pop	r26
    1356:	9f 91       	pop	r25
    1358:	8f 91       	pop	r24
    135a:	7f 91       	pop	r23
    135c:	6f 91       	pop	r22
    135e:	5f 91       	pop	r21
    1360:	4f 91       	pop	r20
    1362:	3f 91       	pop	r19
    1364:	2f 91       	pop	r18
    1366:	0f 90       	pop	r0
    1368:	0f be       	out	0x3f, r0	; 63
    136a:	0f 90       	pop	r0
    136c:	1f 90       	pop	r1
    136e:	18 95       	reti

00001370 <C_LCD_voidSendCommand>:
u8 Local_u8SetPositionX = INIT_X_POS;
u8 Local_u8SetPositionY = INIT_Y_POS;


void C_LCD_voidSendCommand(u8 Copy_u8Command)
{
    1370:	1f 93       	push	r17
    1372:	df 93       	push	r29
    1374:	cf 93       	push	r28
    1376:	cd b7       	in	r28, 0x3d	; 61
    1378:	de b7       	in	r29, 0x3e	; 62
    137a:	ea 97       	sbiw	r28, 0x3a	; 58
    137c:	0f b6       	in	r0, 0x3f	; 63
    137e:	f8 94       	cli
    1380:	de bf       	out	0x3e, r29	; 62
    1382:	0f be       	out	0x3f, r0	; 63
    1384:	cd bf       	out	0x3d, r28	; 61
    1386:	8a af       	std	Y+58, r24	; 0x3a
	/*Set RS Pin to low to send command */
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_LOW);
    1388:	82 e0       	ldi	r24, 0x02	; 2
    138a:	62 e0       	ldi	r22, 0x02	; 2
    138c:	40 e0       	ldi	r20, 0x00	; 0
    138e:	0e 94 95 10 	call	0x212a	; 0x212a <DIO_u8SetPinValue>
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);

#elif   MODE_SELECT ==_4_BIT_MODE

	u8 Local_u8Command = (((Copy_u8Command ) & CLCD_COMMAND_MASK) | DIO_u8AndWithPort(CLCD_DATA_PORT, CLCD_DATA_PORT_MASK));
    1392:	8a ad       	ldd	r24, Y+58	; 0x3a
    1394:	18 2f       	mov	r17, r24
    1396:	10 7f       	andi	r17, 0xF0	; 240
    1398:	82 e0       	ldi	r24, 0x02	; 2
    139a:	6f e0       	ldi	r22, 0x0F	; 15
    139c:	0e 94 8d 12 	call	0x251a	; 0x251a <DIO_u8AndWithPort>
    13a0:	81 2b       	or	r24, r17
    13a2:	89 af       	std	Y+57, r24	; 0x39
	/* Set Command to data pins */
	DIO_u8SetPortValue(CLCD_DATA_PORT,Local_u8Command);
    13a4:	82 e0       	ldi	r24, 0x02	; 2
    13a6:	69 ad       	ldd	r22, Y+57	; 0x39
    13a8:	0e 94 a7 11 	call	0x234e	; 0x234e <DIO_u8SetPortValue>

	/*Send Enable pulse */
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    13ac:	82 e0       	ldi	r24, 0x02	; 2
    13ae:	63 e0       	ldi	r22, 0x03	; 3
    13b0:	41 e0       	ldi	r20, 0x01	; 1
    13b2:	0e 94 95 10 	call	0x212a	; 0x212a <DIO_u8SetPinValue>
    13b6:	80 e0       	ldi	r24, 0x00	; 0
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	a0 e0       	ldi	r26, 0x00	; 0
    13bc:	b0 e4       	ldi	r27, 0x40	; 64
    13be:	8d ab       	std	Y+53, r24	; 0x35
    13c0:	9e ab       	std	Y+54, r25	; 0x36
    13c2:	af ab       	std	Y+55, r26	; 0x37
    13c4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13c6:	6d a9       	ldd	r22, Y+53	; 0x35
    13c8:	7e a9       	ldd	r23, Y+54	; 0x36
    13ca:	8f a9       	ldd	r24, Y+55	; 0x37
    13cc:	98 ad       	ldd	r25, Y+56	; 0x38
    13ce:	20 e0       	ldi	r18, 0x00	; 0
    13d0:	30 e0       	ldi	r19, 0x00	; 0
    13d2:	4a ef       	ldi	r20, 0xFA	; 250
    13d4:	54 e4       	ldi	r21, 0x44	; 68
    13d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13da:	dc 01       	movw	r26, r24
    13dc:	cb 01       	movw	r24, r22
    13de:	89 ab       	std	Y+49, r24	; 0x31
    13e0:	9a ab       	std	Y+50, r25	; 0x32
    13e2:	ab ab       	std	Y+51, r26	; 0x33
    13e4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    13e6:	69 a9       	ldd	r22, Y+49	; 0x31
    13e8:	7a a9       	ldd	r23, Y+50	; 0x32
    13ea:	8b a9       	ldd	r24, Y+51	; 0x33
    13ec:	9c a9       	ldd	r25, Y+52	; 0x34
    13ee:	20 e0       	ldi	r18, 0x00	; 0
    13f0:	30 e0       	ldi	r19, 0x00	; 0
    13f2:	40 e8       	ldi	r20, 0x80	; 128
    13f4:	5f e3       	ldi	r21, 0x3F	; 63
    13f6:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    13fa:	88 23       	and	r24, r24
    13fc:	2c f4       	brge	.+10     	; 0x1408 <C_LCD_voidSendCommand+0x98>
		__ticks = 1;
    13fe:	81 e0       	ldi	r24, 0x01	; 1
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	98 ab       	std	Y+48, r25	; 0x30
    1404:	8f a7       	std	Y+47, r24	; 0x2f
    1406:	3f c0       	rjmp	.+126    	; 0x1486 <C_LCD_voidSendCommand+0x116>
	else if (__tmp > 65535)
    1408:	69 a9       	ldd	r22, Y+49	; 0x31
    140a:	7a a9       	ldd	r23, Y+50	; 0x32
    140c:	8b a9       	ldd	r24, Y+51	; 0x33
    140e:	9c a9       	ldd	r25, Y+52	; 0x34
    1410:	20 e0       	ldi	r18, 0x00	; 0
    1412:	3f ef       	ldi	r19, 0xFF	; 255
    1414:	4f e7       	ldi	r20, 0x7F	; 127
    1416:	57 e4       	ldi	r21, 0x47	; 71
    1418:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    141c:	18 16       	cp	r1, r24
    141e:	4c f5       	brge	.+82     	; 0x1472 <C_LCD_voidSendCommand+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1420:	6d a9       	ldd	r22, Y+53	; 0x35
    1422:	7e a9       	ldd	r23, Y+54	; 0x36
    1424:	8f a9       	ldd	r24, Y+55	; 0x37
    1426:	98 ad       	ldd	r25, Y+56	; 0x38
    1428:	20 e0       	ldi	r18, 0x00	; 0
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	40 e2       	ldi	r20, 0x20	; 32
    142e:	51 e4       	ldi	r21, 0x41	; 65
    1430:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1434:	dc 01       	movw	r26, r24
    1436:	cb 01       	movw	r24, r22
    1438:	bc 01       	movw	r22, r24
    143a:	cd 01       	movw	r24, r26
    143c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1440:	dc 01       	movw	r26, r24
    1442:	cb 01       	movw	r24, r22
    1444:	98 ab       	std	Y+48, r25	; 0x30
    1446:	8f a7       	std	Y+47, r24	; 0x2f
    1448:	0f c0       	rjmp	.+30     	; 0x1468 <C_LCD_voidSendCommand+0xf8>
    144a:	88 ec       	ldi	r24, 0xC8	; 200
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	9e a7       	std	Y+46, r25	; 0x2e
    1450:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1452:	8d a5       	ldd	r24, Y+45	; 0x2d
    1454:	9e a5       	ldd	r25, Y+46	; 0x2e
    1456:	01 97       	sbiw	r24, 0x01	; 1
    1458:	f1 f7       	brne	.-4      	; 0x1456 <C_LCD_voidSendCommand+0xe6>
    145a:	9e a7       	std	Y+46, r25	; 0x2e
    145c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    145e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1460:	98 a9       	ldd	r25, Y+48	; 0x30
    1462:	01 97       	sbiw	r24, 0x01	; 1
    1464:	98 ab       	std	Y+48, r25	; 0x30
    1466:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1468:	8f a5       	ldd	r24, Y+47	; 0x2f
    146a:	98 a9       	ldd	r25, Y+48	; 0x30
    146c:	00 97       	sbiw	r24, 0x00	; 0
    146e:	69 f7       	brne	.-38     	; 0x144a <C_LCD_voidSendCommand+0xda>
    1470:	14 c0       	rjmp	.+40     	; 0x149a <C_LCD_voidSendCommand+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1472:	69 a9       	ldd	r22, Y+49	; 0x31
    1474:	7a a9       	ldd	r23, Y+50	; 0x32
    1476:	8b a9       	ldd	r24, Y+51	; 0x33
    1478:	9c a9       	ldd	r25, Y+52	; 0x34
    147a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    147e:	dc 01       	movw	r26, r24
    1480:	cb 01       	movw	r24, r22
    1482:	98 ab       	std	Y+48, r25	; 0x30
    1484:	8f a7       	std	Y+47, r24	; 0x2f
    1486:	8f a5       	ldd	r24, Y+47	; 0x2f
    1488:	98 a9       	ldd	r25, Y+48	; 0x30
    148a:	9c a7       	std	Y+44, r25	; 0x2c
    148c:	8b a7       	std	Y+43, r24	; 0x2b
    148e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1490:	9c a5       	ldd	r25, Y+44	; 0x2c
    1492:	01 97       	sbiw	r24, 0x01	; 1
    1494:	f1 f7       	brne	.-4      	; 0x1492 <C_LCD_voidSendCommand+0x122>
    1496:	9c a7       	std	Y+44, r25	; 0x2c
    1498:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    149a:	82 e0       	ldi	r24, 0x02	; 2
    149c:	63 e0       	ldi	r22, 0x03	; 3
    149e:	40 e0       	ldi	r20, 0x00	; 0
    14a0:	0e 94 95 10 	call	0x212a	; 0x212a <DIO_u8SetPinValue>
    14a4:	80 e0       	ldi	r24, 0x00	; 0
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	a0 ea       	ldi	r26, 0xA0	; 160
    14aa:	b0 e4       	ldi	r27, 0x40	; 64
    14ac:	8f a3       	std	Y+39, r24	; 0x27
    14ae:	98 a7       	std	Y+40, r25	; 0x28
    14b0:	a9 a7       	std	Y+41, r26	; 0x29
    14b2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14b4:	6f a1       	ldd	r22, Y+39	; 0x27
    14b6:	78 a5       	ldd	r23, Y+40	; 0x28
    14b8:	89 a5       	ldd	r24, Y+41	; 0x29
    14ba:	9a a5       	ldd	r25, Y+42	; 0x2a
    14bc:	20 e0       	ldi	r18, 0x00	; 0
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	4a ef       	ldi	r20, 0xFA	; 250
    14c2:	54 e4       	ldi	r21, 0x44	; 68
    14c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14c8:	dc 01       	movw	r26, r24
    14ca:	cb 01       	movw	r24, r22
    14cc:	8b a3       	std	Y+35, r24	; 0x23
    14ce:	9c a3       	std	Y+36, r25	; 0x24
    14d0:	ad a3       	std	Y+37, r26	; 0x25
    14d2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    14d4:	6b a1       	ldd	r22, Y+35	; 0x23
    14d6:	7c a1       	ldd	r23, Y+36	; 0x24
    14d8:	8d a1       	ldd	r24, Y+37	; 0x25
    14da:	9e a1       	ldd	r25, Y+38	; 0x26
    14dc:	20 e0       	ldi	r18, 0x00	; 0
    14de:	30 e0       	ldi	r19, 0x00	; 0
    14e0:	40 e8       	ldi	r20, 0x80	; 128
    14e2:	5f e3       	ldi	r21, 0x3F	; 63
    14e4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    14e8:	88 23       	and	r24, r24
    14ea:	2c f4       	brge	.+10     	; 0x14f6 <C_LCD_voidSendCommand+0x186>
		__ticks = 1;
    14ec:	81 e0       	ldi	r24, 0x01	; 1
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	9a a3       	std	Y+34, r25	; 0x22
    14f2:	89 a3       	std	Y+33, r24	; 0x21
    14f4:	3f c0       	rjmp	.+126    	; 0x1574 <C_LCD_voidSendCommand+0x204>
	else if (__tmp > 65535)
    14f6:	6b a1       	ldd	r22, Y+35	; 0x23
    14f8:	7c a1       	ldd	r23, Y+36	; 0x24
    14fa:	8d a1       	ldd	r24, Y+37	; 0x25
    14fc:	9e a1       	ldd	r25, Y+38	; 0x26
    14fe:	20 e0       	ldi	r18, 0x00	; 0
    1500:	3f ef       	ldi	r19, 0xFF	; 255
    1502:	4f e7       	ldi	r20, 0x7F	; 127
    1504:	57 e4       	ldi	r21, 0x47	; 71
    1506:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    150a:	18 16       	cp	r1, r24
    150c:	4c f5       	brge	.+82     	; 0x1560 <C_LCD_voidSendCommand+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    150e:	6f a1       	ldd	r22, Y+39	; 0x27
    1510:	78 a5       	ldd	r23, Y+40	; 0x28
    1512:	89 a5       	ldd	r24, Y+41	; 0x29
    1514:	9a a5       	ldd	r25, Y+42	; 0x2a
    1516:	20 e0       	ldi	r18, 0x00	; 0
    1518:	30 e0       	ldi	r19, 0x00	; 0
    151a:	40 e2       	ldi	r20, 0x20	; 32
    151c:	51 e4       	ldi	r21, 0x41	; 65
    151e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1522:	dc 01       	movw	r26, r24
    1524:	cb 01       	movw	r24, r22
    1526:	bc 01       	movw	r22, r24
    1528:	cd 01       	movw	r24, r26
    152a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    152e:	dc 01       	movw	r26, r24
    1530:	cb 01       	movw	r24, r22
    1532:	9a a3       	std	Y+34, r25	; 0x22
    1534:	89 a3       	std	Y+33, r24	; 0x21
    1536:	0f c0       	rjmp	.+30     	; 0x1556 <C_LCD_voidSendCommand+0x1e6>
    1538:	88 ec       	ldi	r24, 0xC8	; 200
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	98 a3       	std	Y+32, r25	; 0x20
    153e:	8f 8f       	std	Y+31, r24	; 0x1f
    1540:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1542:	98 a1       	ldd	r25, Y+32	; 0x20
    1544:	01 97       	sbiw	r24, 0x01	; 1
    1546:	f1 f7       	brne	.-4      	; 0x1544 <C_LCD_voidSendCommand+0x1d4>
    1548:	98 a3       	std	Y+32, r25	; 0x20
    154a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    154c:	89 a1       	ldd	r24, Y+33	; 0x21
    154e:	9a a1       	ldd	r25, Y+34	; 0x22
    1550:	01 97       	sbiw	r24, 0x01	; 1
    1552:	9a a3       	std	Y+34, r25	; 0x22
    1554:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1556:	89 a1       	ldd	r24, Y+33	; 0x21
    1558:	9a a1       	ldd	r25, Y+34	; 0x22
    155a:	00 97       	sbiw	r24, 0x00	; 0
    155c:	69 f7       	brne	.-38     	; 0x1538 <C_LCD_voidSendCommand+0x1c8>
    155e:	14 c0       	rjmp	.+40     	; 0x1588 <C_LCD_voidSendCommand+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1560:	6b a1       	ldd	r22, Y+35	; 0x23
    1562:	7c a1       	ldd	r23, Y+36	; 0x24
    1564:	8d a1       	ldd	r24, Y+37	; 0x25
    1566:	9e a1       	ldd	r25, Y+38	; 0x26
    1568:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    156c:	dc 01       	movw	r26, r24
    156e:	cb 01       	movw	r24, r22
    1570:	9a a3       	std	Y+34, r25	; 0x22
    1572:	89 a3       	std	Y+33, r24	; 0x21
    1574:	89 a1       	ldd	r24, Y+33	; 0x21
    1576:	9a a1       	ldd	r25, Y+34	; 0x22
    1578:	9e 8f       	std	Y+30, r25	; 0x1e
    157a:	8d 8f       	std	Y+29, r24	; 0x1d
    157c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    157e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1580:	01 97       	sbiw	r24, 0x01	; 1
    1582:	f1 f7       	brne	.-4      	; 0x1580 <C_LCD_voidSendCommand+0x210>
    1584:	9e 8f       	std	Y+30, r25	; 0x1e
    1586:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);

	Local_u8Command = ((Copy_u8Command <<4) |DIO_u8AndWithPort(CLCD_DATA_PORT, CLCD_DATA_PORT_MASK));
    1588:	8a ad       	ldd	r24, Y+58	; 0x3a
    158a:	88 2f       	mov	r24, r24
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	82 95       	swap	r24
    1590:	92 95       	swap	r25
    1592:	90 7f       	andi	r25, 0xF0	; 240
    1594:	98 27       	eor	r25, r24
    1596:	80 7f       	andi	r24, 0xF0	; 240
    1598:	98 27       	eor	r25, r24
    159a:	18 2f       	mov	r17, r24
    159c:	82 e0       	ldi	r24, 0x02	; 2
    159e:	6f e0       	ldi	r22, 0x0F	; 15
    15a0:	0e 94 8d 12 	call	0x251a	; 0x251a <DIO_u8AndWithPort>
    15a4:	81 2b       	or	r24, r17
    15a6:	89 af       	std	Y+57, r24	; 0x39
	DIO_u8SetPortValue(CLCD_DATA_PORT,Local_u8Command);
    15a8:	82 e0       	ldi	r24, 0x02	; 2
    15aa:	69 ad       	ldd	r22, Y+57	; 0x39
    15ac:	0e 94 a7 11 	call	0x234e	; 0x234e <DIO_u8SetPortValue>

	/*Send Enable pulse */
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    15b0:	82 e0       	ldi	r24, 0x02	; 2
    15b2:	63 e0       	ldi	r22, 0x03	; 3
    15b4:	41 e0       	ldi	r20, 0x01	; 1
    15b6:	0e 94 95 10 	call	0x212a	; 0x212a <DIO_u8SetPinValue>
    15ba:	80 e0       	ldi	r24, 0x00	; 0
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	a0 e0       	ldi	r26, 0x00	; 0
    15c0:	b0 e4       	ldi	r27, 0x40	; 64
    15c2:	89 8f       	std	Y+25, r24	; 0x19
    15c4:	9a 8f       	std	Y+26, r25	; 0x1a
    15c6:	ab 8f       	std	Y+27, r26	; 0x1b
    15c8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15ca:	69 8d       	ldd	r22, Y+25	; 0x19
    15cc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15d0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15d2:	20 e0       	ldi	r18, 0x00	; 0
    15d4:	30 e0       	ldi	r19, 0x00	; 0
    15d6:	4a ef       	ldi	r20, 0xFA	; 250
    15d8:	54 e4       	ldi	r21, 0x44	; 68
    15da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15de:	dc 01       	movw	r26, r24
    15e0:	cb 01       	movw	r24, r22
    15e2:	8d 8b       	std	Y+21, r24	; 0x15
    15e4:	9e 8b       	std	Y+22, r25	; 0x16
    15e6:	af 8b       	std	Y+23, r26	; 0x17
    15e8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    15ea:	6d 89       	ldd	r22, Y+21	; 0x15
    15ec:	7e 89       	ldd	r23, Y+22	; 0x16
    15ee:	8f 89       	ldd	r24, Y+23	; 0x17
    15f0:	98 8d       	ldd	r25, Y+24	; 0x18
    15f2:	20 e0       	ldi	r18, 0x00	; 0
    15f4:	30 e0       	ldi	r19, 0x00	; 0
    15f6:	40 e8       	ldi	r20, 0x80	; 128
    15f8:	5f e3       	ldi	r21, 0x3F	; 63
    15fa:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    15fe:	88 23       	and	r24, r24
    1600:	2c f4       	brge	.+10     	; 0x160c <C_LCD_voidSendCommand+0x29c>
		__ticks = 1;
    1602:	81 e0       	ldi	r24, 0x01	; 1
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	9c 8b       	std	Y+20, r25	; 0x14
    1608:	8b 8b       	std	Y+19, r24	; 0x13
    160a:	3f c0       	rjmp	.+126    	; 0x168a <C_LCD_voidSendCommand+0x31a>
	else if (__tmp > 65535)
    160c:	6d 89       	ldd	r22, Y+21	; 0x15
    160e:	7e 89       	ldd	r23, Y+22	; 0x16
    1610:	8f 89       	ldd	r24, Y+23	; 0x17
    1612:	98 8d       	ldd	r25, Y+24	; 0x18
    1614:	20 e0       	ldi	r18, 0x00	; 0
    1616:	3f ef       	ldi	r19, 0xFF	; 255
    1618:	4f e7       	ldi	r20, 0x7F	; 127
    161a:	57 e4       	ldi	r21, 0x47	; 71
    161c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1620:	18 16       	cp	r1, r24
    1622:	4c f5       	brge	.+82     	; 0x1676 <C_LCD_voidSendCommand+0x306>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1624:	69 8d       	ldd	r22, Y+25	; 0x19
    1626:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1628:	8b 8d       	ldd	r24, Y+27	; 0x1b
    162a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    162c:	20 e0       	ldi	r18, 0x00	; 0
    162e:	30 e0       	ldi	r19, 0x00	; 0
    1630:	40 e2       	ldi	r20, 0x20	; 32
    1632:	51 e4       	ldi	r21, 0x41	; 65
    1634:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1638:	dc 01       	movw	r26, r24
    163a:	cb 01       	movw	r24, r22
    163c:	bc 01       	movw	r22, r24
    163e:	cd 01       	movw	r24, r26
    1640:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1644:	dc 01       	movw	r26, r24
    1646:	cb 01       	movw	r24, r22
    1648:	9c 8b       	std	Y+20, r25	; 0x14
    164a:	8b 8b       	std	Y+19, r24	; 0x13
    164c:	0f c0       	rjmp	.+30     	; 0x166c <C_LCD_voidSendCommand+0x2fc>
    164e:	88 ec       	ldi	r24, 0xC8	; 200
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	9a 8b       	std	Y+18, r25	; 0x12
    1654:	89 8b       	std	Y+17, r24	; 0x11
    1656:	89 89       	ldd	r24, Y+17	; 0x11
    1658:	9a 89       	ldd	r25, Y+18	; 0x12
    165a:	01 97       	sbiw	r24, 0x01	; 1
    165c:	f1 f7       	brne	.-4      	; 0x165a <C_LCD_voidSendCommand+0x2ea>
    165e:	9a 8b       	std	Y+18, r25	; 0x12
    1660:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1662:	8b 89       	ldd	r24, Y+19	; 0x13
    1664:	9c 89       	ldd	r25, Y+20	; 0x14
    1666:	01 97       	sbiw	r24, 0x01	; 1
    1668:	9c 8b       	std	Y+20, r25	; 0x14
    166a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    166c:	8b 89       	ldd	r24, Y+19	; 0x13
    166e:	9c 89       	ldd	r25, Y+20	; 0x14
    1670:	00 97       	sbiw	r24, 0x00	; 0
    1672:	69 f7       	brne	.-38     	; 0x164e <C_LCD_voidSendCommand+0x2de>
    1674:	14 c0       	rjmp	.+40     	; 0x169e <C_LCD_voidSendCommand+0x32e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1676:	6d 89       	ldd	r22, Y+21	; 0x15
    1678:	7e 89       	ldd	r23, Y+22	; 0x16
    167a:	8f 89       	ldd	r24, Y+23	; 0x17
    167c:	98 8d       	ldd	r25, Y+24	; 0x18
    167e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1682:	dc 01       	movw	r26, r24
    1684:	cb 01       	movw	r24, r22
    1686:	9c 8b       	std	Y+20, r25	; 0x14
    1688:	8b 8b       	std	Y+19, r24	; 0x13
    168a:	8b 89       	ldd	r24, Y+19	; 0x13
    168c:	9c 89       	ldd	r25, Y+20	; 0x14
    168e:	98 8b       	std	Y+16, r25	; 0x10
    1690:	8f 87       	std	Y+15, r24	; 0x0f
    1692:	8f 85       	ldd	r24, Y+15	; 0x0f
    1694:	98 89       	ldd	r25, Y+16	; 0x10
    1696:	01 97       	sbiw	r24, 0x01	; 1
    1698:	f1 f7       	brne	.-4      	; 0x1696 <C_LCD_voidSendCommand+0x326>
    169a:	98 8b       	std	Y+16, r25	; 0x10
    169c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    169e:	82 e0       	ldi	r24, 0x02	; 2
    16a0:	63 e0       	ldi	r22, 0x03	; 3
    16a2:	40 e0       	ldi	r20, 0x00	; 0
    16a4:	0e 94 95 10 	call	0x212a	; 0x212a <DIO_u8SetPinValue>
    16a8:	80 e0       	ldi	r24, 0x00	; 0
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	a0 ea       	ldi	r26, 0xA0	; 160
    16ae:	b0 e4       	ldi	r27, 0x40	; 64
    16b0:	8b 87       	std	Y+11, r24	; 0x0b
    16b2:	9c 87       	std	Y+12, r25	; 0x0c
    16b4:	ad 87       	std	Y+13, r26	; 0x0d
    16b6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    16ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    16bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    16be:	9e 85       	ldd	r25, Y+14	; 0x0e
    16c0:	20 e0       	ldi	r18, 0x00	; 0
    16c2:	30 e0       	ldi	r19, 0x00	; 0
    16c4:	4a ef       	ldi	r20, 0xFA	; 250
    16c6:	54 e4       	ldi	r21, 0x44	; 68
    16c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16cc:	dc 01       	movw	r26, r24
    16ce:	cb 01       	movw	r24, r22
    16d0:	8f 83       	std	Y+7, r24	; 0x07
    16d2:	98 87       	std	Y+8, r25	; 0x08
    16d4:	a9 87       	std	Y+9, r26	; 0x09
    16d6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16d8:	6f 81       	ldd	r22, Y+7	; 0x07
    16da:	78 85       	ldd	r23, Y+8	; 0x08
    16dc:	89 85       	ldd	r24, Y+9	; 0x09
    16de:	9a 85       	ldd	r25, Y+10	; 0x0a
    16e0:	20 e0       	ldi	r18, 0x00	; 0
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	40 e8       	ldi	r20, 0x80	; 128
    16e6:	5f e3       	ldi	r21, 0x3F	; 63
    16e8:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    16ec:	88 23       	and	r24, r24
    16ee:	2c f4       	brge	.+10     	; 0x16fa <C_LCD_voidSendCommand+0x38a>
		__ticks = 1;
    16f0:	81 e0       	ldi	r24, 0x01	; 1
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	9e 83       	std	Y+6, r25	; 0x06
    16f6:	8d 83       	std	Y+5, r24	; 0x05
    16f8:	3f c0       	rjmp	.+126    	; 0x1778 <C_LCD_voidSendCommand+0x408>
	else if (__tmp > 65535)
    16fa:	6f 81       	ldd	r22, Y+7	; 0x07
    16fc:	78 85       	ldd	r23, Y+8	; 0x08
    16fe:	89 85       	ldd	r24, Y+9	; 0x09
    1700:	9a 85       	ldd	r25, Y+10	; 0x0a
    1702:	20 e0       	ldi	r18, 0x00	; 0
    1704:	3f ef       	ldi	r19, 0xFF	; 255
    1706:	4f e7       	ldi	r20, 0x7F	; 127
    1708:	57 e4       	ldi	r21, 0x47	; 71
    170a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    170e:	18 16       	cp	r1, r24
    1710:	4c f5       	brge	.+82     	; 0x1764 <C_LCD_voidSendCommand+0x3f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1712:	6b 85       	ldd	r22, Y+11	; 0x0b
    1714:	7c 85       	ldd	r23, Y+12	; 0x0c
    1716:	8d 85       	ldd	r24, Y+13	; 0x0d
    1718:	9e 85       	ldd	r25, Y+14	; 0x0e
    171a:	20 e0       	ldi	r18, 0x00	; 0
    171c:	30 e0       	ldi	r19, 0x00	; 0
    171e:	40 e2       	ldi	r20, 0x20	; 32
    1720:	51 e4       	ldi	r21, 0x41	; 65
    1722:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1726:	dc 01       	movw	r26, r24
    1728:	cb 01       	movw	r24, r22
    172a:	bc 01       	movw	r22, r24
    172c:	cd 01       	movw	r24, r26
    172e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1732:	dc 01       	movw	r26, r24
    1734:	cb 01       	movw	r24, r22
    1736:	9e 83       	std	Y+6, r25	; 0x06
    1738:	8d 83       	std	Y+5, r24	; 0x05
    173a:	0f c0       	rjmp	.+30     	; 0x175a <C_LCD_voidSendCommand+0x3ea>
    173c:	88 ec       	ldi	r24, 0xC8	; 200
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	9c 83       	std	Y+4, r25	; 0x04
    1742:	8b 83       	std	Y+3, r24	; 0x03
    1744:	8b 81       	ldd	r24, Y+3	; 0x03
    1746:	9c 81       	ldd	r25, Y+4	; 0x04
    1748:	01 97       	sbiw	r24, 0x01	; 1
    174a:	f1 f7       	brne	.-4      	; 0x1748 <C_LCD_voidSendCommand+0x3d8>
    174c:	9c 83       	std	Y+4, r25	; 0x04
    174e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1750:	8d 81       	ldd	r24, Y+5	; 0x05
    1752:	9e 81       	ldd	r25, Y+6	; 0x06
    1754:	01 97       	sbiw	r24, 0x01	; 1
    1756:	9e 83       	std	Y+6, r25	; 0x06
    1758:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    175a:	8d 81       	ldd	r24, Y+5	; 0x05
    175c:	9e 81       	ldd	r25, Y+6	; 0x06
    175e:	00 97       	sbiw	r24, 0x00	; 0
    1760:	69 f7       	brne	.-38     	; 0x173c <C_LCD_voidSendCommand+0x3cc>
    1762:	14 c0       	rjmp	.+40     	; 0x178c <C_LCD_voidSendCommand+0x41c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1764:	6f 81       	ldd	r22, Y+7	; 0x07
    1766:	78 85       	ldd	r23, Y+8	; 0x08
    1768:	89 85       	ldd	r24, Y+9	; 0x09
    176a:	9a 85       	ldd	r25, Y+10	; 0x0a
    176c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1770:	dc 01       	movw	r26, r24
    1772:	cb 01       	movw	r24, r22
    1774:	9e 83       	std	Y+6, r25	; 0x06
    1776:	8d 83       	std	Y+5, r24	; 0x05
    1778:	8d 81       	ldd	r24, Y+5	; 0x05
    177a:	9e 81       	ldd	r25, Y+6	; 0x06
    177c:	9a 83       	std	Y+2, r25	; 0x02
    177e:	89 83       	std	Y+1, r24	; 0x01
    1780:	89 81       	ldd	r24, Y+1	; 0x01
    1782:	9a 81       	ldd	r25, Y+2	; 0x02
    1784:	01 97       	sbiw	r24, 0x01	; 1
    1786:	f1 f7       	brne	.-4      	; 0x1784 <C_LCD_voidSendCommand+0x414>
    1788:	9a 83       	std	Y+2, r25	; 0x02
    178a:	89 83       	std	Y+1, r24	; 0x01

#endif



}
    178c:	ea 96       	adiw	r28, 0x3a	; 58
    178e:	0f b6       	in	r0, 0x3f	; 63
    1790:	f8 94       	cli
    1792:	de bf       	out	0x3e, r29	; 62
    1794:	0f be       	out	0x3f, r0	; 63
    1796:	cd bf       	out	0x3d, r28	; 61
    1798:	cf 91       	pop	r28
    179a:	df 91       	pop	r29
    179c:	1f 91       	pop	r17
    179e:	08 95       	ret

000017a0 <CLCD_voidSendData>:

void CLCD_voidSendData(u8 Copy_u8Data)
{
    17a0:	1f 93       	push	r17
    17a2:	df 93       	push	r29
    17a4:	cf 93       	push	r28
    17a6:	cd b7       	in	r28, 0x3d	; 61
    17a8:	de b7       	in	r29, 0x3e	; 62
    17aa:	ea 97       	sbiw	r28, 0x3a	; 58
    17ac:	0f b6       	in	r0, 0x3f	; 63
    17ae:	f8 94       	cli
    17b0:	de bf       	out	0x3e, r29	; 62
    17b2:	0f be       	out	0x3f, r0	; 63
    17b4:	cd bf       	out	0x3d, r28	; 61
    17b6:	8a af       	std	Y+58, r24	; 0x3a

	if(Local_u8SetPositionY>15)
    17b8:	80 91 97 01 	lds	r24, 0x0197
    17bc:	80 31       	cpi	r24, 0x10	; 16
    17be:	c8 f0       	brcs	.+50     	; 0x17f2 <CLCD_voidSendData+0x52>
	{
		if(Local_u8SetPositionX>3)
    17c0:	80 91 96 01 	lds	r24, 0x0196
    17c4:	84 30       	cpi	r24, 0x04	; 4
    17c6:	10 f0       	brcs	.+4      	; 0x17cc <CLCD_voidSendData+0x2c>
		{
			Local_u8SetPositionX = 0;
    17c8:	10 92 96 01 	sts	0x0196, r1
		}
		DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN4,DIO_u8PIN_HIGH);
    17cc:	80 e0       	ldi	r24, 0x00	; 0
    17ce:	64 e0       	ldi	r22, 0x04	; 4
    17d0:	41 e0       	ldi	r20, 0x01	; 1
    17d2:	0e 94 95 10 	call	0x212a	; 0x212a <DIO_u8SetPinValue>
		Local_u8SetPositionY = 0;
    17d6:	10 92 97 01 	sts	0x0197, r1
		Local_u8SetPositionX++;
    17da:	80 91 96 01 	lds	r24, 0x0196
    17de:	8f 5f       	subi	r24, 0xFF	; 255
    17e0:	80 93 96 01 	sts	0x0196, r24
		CLCD_voidGoToXY(Local_u8SetPositionX,Local_u8SetPositionY);
    17e4:	80 91 96 01 	lds	r24, 0x0196
    17e8:	90 91 97 01 	lds	r25, 0x0197
    17ec:	69 2f       	mov	r22, r25
    17ee:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <CLCD_voidGoToXY>
	}
	Local_u8SetPositionY++;
    17f2:	80 91 97 01 	lds	r24, 0x0197
    17f6:	8f 5f       	subi	r24, 0xFF	; 255
    17f8:	80 93 97 01 	sts	0x0197, r24


	/*Set RS Pin to low to send data */
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_HIGH);
    17fc:	82 e0       	ldi	r24, 0x02	; 2
    17fe:	62 e0       	ldi	r22, 0x02	; 2
    1800:	41 e0       	ldi	r20, 0x01	; 1
    1802:	0e 94 95 10 	call	0x212a	; 0x212a <DIO_u8SetPinValue>
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);

#elif   MODE_SELECT ==_4_BIT_MODE

	u8 Local_u8Data = (((Copy_u8Data) & CLCD_COMMAND_MASK) | DIO_u8AndWithPort(CLCD_DATA_PORT, CLCD_DATA_PORT_MASK));
    1806:	8a ad       	ldd	r24, Y+58	; 0x3a
    1808:	18 2f       	mov	r17, r24
    180a:	10 7f       	andi	r17, 0xF0	; 240
    180c:	82 e0       	ldi	r24, 0x02	; 2
    180e:	6f e0       	ldi	r22, 0x0F	; 15
    1810:	0e 94 8d 12 	call	0x251a	; 0x251a <DIO_u8AndWithPort>
    1814:	81 2b       	or	r24, r17
    1816:	89 af       	std	Y+57, r24	; 0x39
	/* Set Command to data pins */
	DIO_u8SetPortValue(CLCD_DATA_PORT,Local_u8Data);
    1818:	82 e0       	ldi	r24, 0x02	; 2
    181a:	69 ad       	ldd	r22, Y+57	; 0x39
    181c:	0e 94 a7 11 	call	0x234e	; 0x234e <DIO_u8SetPortValue>

	/*Send Enable pulse */
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    1820:	82 e0       	ldi	r24, 0x02	; 2
    1822:	63 e0       	ldi	r22, 0x03	; 3
    1824:	41 e0       	ldi	r20, 0x01	; 1
    1826:	0e 94 95 10 	call	0x212a	; 0x212a <DIO_u8SetPinValue>
    182a:	80 e0       	ldi	r24, 0x00	; 0
    182c:	90 e0       	ldi	r25, 0x00	; 0
    182e:	a0 e0       	ldi	r26, 0x00	; 0
    1830:	b0 e4       	ldi	r27, 0x40	; 64
    1832:	8d ab       	std	Y+53, r24	; 0x35
    1834:	9e ab       	std	Y+54, r25	; 0x36
    1836:	af ab       	std	Y+55, r26	; 0x37
    1838:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    183a:	6d a9       	ldd	r22, Y+53	; 0x35
    183c:	7e a9       	ldd	r23, Y+54	; 0x36
    183e:	8f a9       	ldd	r24, Y+55	; 0x37
    1840:	98 ad       	ldd	r25, Y+56	; 0x38
    1842:	20 e0       	ldi	r18, 0x00	; 0
    1844:	30 e0       	ldi	r19, 0x00	; 0
    1846:	4a ef       	ldi	r20, 0xFA	; 250
    1848:	54 e4       	ldi	r21, 0x44	; 68
    184a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    184e:	dc 01       	movw	r26, r24
    1850:	cb 01       	movw	r24, r22
    1852:	89 ab       	std	Y+49, r24	; 0x31
    1854:	9a ab       	std	Y+50, r25	; 0x32
    1856:	ab ab       	std	Y+51, r26	; 0x33
    1858:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    185a:	69 a9       	ldd	r22, Y+49	; 0x31
    185c:	7a a9       	ldd	r23, Y+50	; 0x32
    185e:	8b a9       	ldd	r24, Y+51	; 0x33
    1860:	9c a9       	ldd	r25, Y+52	; 0x34
    1862:	20 e0       	ldi	r18, 0x00	; 0
    1864:	30 e0       	ldi	r19, 0x00	; 0
    1866:	40 e8       	ldi	r20, 0x80	; 128
    1868:	5f e3       	ldi	r21, 0x3F	; 63
    186a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    186e:	88 23       	and	r24, r24
    1870:	2c f4       	brge	.+10     	; 0x187c <CLCD_voidSendData+0xdc>
		__ticks = 1;
    1872:	81 e0       	ldi	r24, 0x01	; 1
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	98 ab       	std	Y+48, r25	; 0x30
    1878:	8f a7       	std	Y+47, r24	; 0x2f
    187a:	3f c0       	rjmp	.+126    	; 0x18fa <CLCD_voidSendData+0x15a>
	else if (__tmp > 65535)
    187c:	69 a9       	ldd	r22, Y+49	; 0x31
    187e:	7a a9       	ldd	r23, Y+50	; 0x32
    1880:	8b a9       	ldd	r24, Y+51	; 0x33
    1882:	9c a9       	ldd	r25, Y+52	; 0x34
    1884:	20 e0       	ldi	r18, 0x00	; 0
    1886:	3f ef       	ldi	r19, 0xFF	; 255
    1888:	4f e7       	ldi	r20, 0x7F	; 127
    188a:	57 e4       	ldi	r21, 0x47	; 71
    188c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1890:	18 16       	cp	r1, r24
    1892:	4c f5       	brge	.+82     	; 0x18e6 <CLCD_voidSendData+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1894:	6d a9       	ldd	r22, Y+53	; 0x35
    1896:	7e a9       	ldd	r23, Y+54	; 0x36
    1898:	8f a9       	ldd	r24, Y+55	; 0x37
    189a:	98 ad       	ldd	r25, Y+56	; 0x38
    189c:	20 e0       	ldi	r18, 0x00	; 0
    189e:	30 e0       	ldi	r19, 0x00	; 0
    18a0:	40 e2       	ldi	r20, 0x20	; 32
    18a2:	51 e4       	ldi	r21, 0x41	; 65
    18a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18a8:	dc 01       	movw	r26, r24
    18aa:	cb 01       	movw	r24, r22
    18ac:	bc 01       	movw	r22, r24
    18ae:	cd 01       	movw	r24, r26
    18b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18b4:	dc 01       	movw	r26, r24
    18b6:	cb 01       	movw	r24, r22
    18b8:	98 ab       	std	Y+48, r25	; 0x30
    18ba:	8f a7       	std	Y+47, r24	; 0x2f
    18bc:	0f c0       	rjmp	.+30     	; 0x18dc <CLCD_voidSendData+0x13c>
    18be:	88 ec       	ldi	r24, 0xC8	; 200
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	9e a7       	std	Y+46, r25	; 0x2e
    18c4:	8d a7       	std	Y+45, r24	; 0x2d
    18c6:	8d a5       	ldd	r24, Y+45	; 0x2d
    18c8:	9e a5       	ldd	r25, Y+46	; 0x2e
    18ca:	01 97       	sbiw	r24, 0x01	; 1
    18cc:	f1 f7       	brne	.-4      	; 0x18ca <CLCD_voidSendData+0x12a>
    18ce:	9e a7       	std	Y+46, r25	; 0x2e
    18d0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18d2:	8f a5       	ldd	r24, Y+47	; 0x2f
    18d4:	98 a9       	ldd	r25, Y+48	; 0x30
    18d6:	01 97       	sbiw	r24, 0x01	; 1
    18d8:	98 ab       	std	Y+48, r25	; 0x30
    18da:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18dc:	8f a5       	ldd	r24, Y+47	; 0x2f
    18de:	98 a9       	ldd	r25, Y+48	; 0x30
    18e0:	00 97       	sbiw	r24, 0x00	; 0
    18e2:	69 f7       	brne	.-38     	; 0x18be <CLCD_voidSendData+0x11e>
    18e4:	14 c0       	rjmp	.+40     	; 0x190e <CLCD_voidSendData+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18e6:	69 a9       	ldd	r22, Y+49	; 0x31
    18e8:	7a a9       	ldd	r23, Y+50	; 0x32
    18ea:	8b a9       	ldd	r24, Y+51	; 0x33
    18ec:	9c a9       	ldd	r25, Y+52	; 0x34
    18ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18f2:	dc 01       	movw	r26, r24
    18f4:	cb 01       	movw	r24, r22
    18f6:	98 ab       	std	Y+48, r25	; 0x30
    18f8:	8f a7       	std	Y+47, r24	; 0x2f
    18fa:	8f a5       	ldd	r24, Y+47	; 0x2f
    18fc:	98 a9       	ldd	r25, Y+48	; 0x30
    18fe:	9c a7       	std	Y+44, r25	; 0x2c
    1900:	8b a7       	std	Y+43, r24	; 0x2b
    1902:	8b a5       	ldd	r24, Y+43	; 0x2b
    1904:	9c a5       	ldd	r25, Y+44	; 0x2c
    1906:	01 97       	sbiw	r24, 0x01	; 1
    1908:	f1 f7       	brne	.-4      	; 0x1906 <CLCD_voidSendData+0x166>
    190a:	9c a7       	std	Y+44, r25	; 0x2c
    190c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    190e:	82 e0       	ldi	r24, 0x02	; 2
    1910:	63 e0       	ldi	r22, 0x03	; 3
    1912:	40 e0       	ldi	r20, 0x00	; 0
    1914:	0e 94 95 10 	call	0x212a	; 0x212a <DIO_u8SetPinValue>
    1918:	80 e0       	ldi	r24, 0x00	; 0
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	a0 ea       	ldi	r26, 0xA0	; 160
    191e:	b0 e4       	ldi	r27, 0x40	; 64
    1920:	8f a3       	std	Y+39, r24	; 0x27
    1922:	98 a7       	std	Y+40, r25	; 0x28
    1924:	a9 a7       	std	Y+41, r26	; 0x29
    1926:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1928:	6f a1       	ldd	r22, Y+39	; 0x27
    192a:	78 a5       	ldd	r23, Y+40	; 0x28
    192c:	89 a5       	ldd	r24, Y+41	; 0x29
    192e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1930:	20 e0       	ldi	r18, 0x00	; 0
    1932:	30 e0       	ldi	r19, 0x00	; 0
    1934:	4a ef       	ldi	r20, 0xFA	; 250
    1936:	54 e4       	ldi	r21, 0x44	; 68
    1938:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    193c:	dc 01       	movw	r26, r24
    193e:	cb 01       	movw	r24, r22
    1940:	8b a3       	std	Y+35, r24	; 0x23
    1942:	9c a3       	std	Y+36, r25	; 0x24
    1944:	ad a3       	std	Y+37, r26	; 0x25
    1946:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1948:	6b a1       	ldd	r22, Y+35	; 0x23
    194a:	7c a1       	ldd	r23, Y+36	; 0x24
    194c:	8d a1       	ldd	r24, Y+37	; 0x25
    194e:	9e a1       	ldd	r25, Y+38	; 0x26
    1950:	20 e0       	ldi	r18, 0x00	; 0
    1952:	30 e0       	ldi	r19, 0x00	; 0
    1954:	40 e8       	ldi	r20, 0x80	; 128
    1956:	5f e3       	ldi	r21, 0x3F	; 63
    1958:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    195c:	88 23       	and	r24, r24
    195e:	2c f4       	brge	.+10     	; 0x196a <CLCD_voidSendData+0x1ca>
		__ticks = 1;
    1960:	81 e0       	ldi	r24, 0x01	; 1
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	9a a3       	std	Y+34, r25	; 0x22
    1966:	89 a3       	std	Y+33, r24	; 0x21
    1968:	3f c0       	rjmp	.+126    	; 0x19e8 <CLCD_voidSendData+0x248>
	else if (__tmp > 65535)
    196a:	6b a1       	ldd	r22, Y+35	; 0x23
    196c:	7c a1       	ldd	r23, Y+36	; 0x24
    196e:	8d a1       	ldd	r24, Y+37	; 0x25
    1970:	9e a1       	ldd	r25, Y+38	; 0x26
    1972:	20 e0       	ldi	r18, 0x00	; 0
    1974:	3f ef       	ldi	r19, 0xFF	; 255
    1976:	4f e7       	ldi	r20, 0x7F	; 127
    1978:	57 e4       	ldi	r21, 0x47	; 71
    197a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    197e:	18 16       	cp	r1, r24
    1980:	4c f5       	brge	.+82     	; 0x19d4 <CLCD_voidSendData+0x234>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1982:	6f a1       	ldd	r22, Y+39	; 0x27
    1984:	78 a5       	ldd	r23, Y+40	; 0x28
    1986:	89 a5       	ldd	r24, Y+41	; 0x29
    1988:	9a a5       	ldd	r25, Y+42	; 0x2a
    198a:	20 e0       	ldi	r18, 0x00	; 0
    198c:	30 e0       	ldi	r19, 0x00	; 0
    198e:	40 e2       	ldi	r20, 0x20	; 32
    1990:	51 e4       	ldi	r21, 0x41	; 65
    1992:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1996:	dc 01       	movw	r26, r24
    1998:	cb 01       	movw	r24, r22
    199a:	bc 01       	movw	r22, r24
    199c:	cd 01       	movw	r24, r26
    199e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19a2:	dc 01       	movw	r26, r24
    19a4:	cb 01       	movw	r24, r22
    19a6:	9a a3       	std	Y+34, r25	; 0x22
    19a8:	89 a3       	std	Y+33, r24	; 0x21
    19aa:	0f c0       	rjmp	.+30     	; 0x19ca <CLCD_voidSendData+0x22a>
    19ac:	88 ec       	ldi	r24, 0xC8	; 200
    19ae:	90 e0       	ldi	r25, 0x00	; 0
    19b0:	98 a3       	std	Y+32, r25	; 0x20
    19b2:	8f 8f       	std	Y+31, r24	; 0x1f
    19b4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    19b6:	98 a1       	ldd	r25, Y+32	; 0x20
    19b8:	01 97       	sbiw	r24, 0x01	; 1
    19ba:	f1 f7       	brne	.-4      	; 0x19b8 <CLCD_voidSendData+0x218>
    19bc:	98 a3       	std	Y+32, r25	; 0x20
    19be:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19c0:	89 a1       	ldd	r24, Y+33	; 0x21
    19c2:	9a a1       	ldd	r25, Y+34	; 0x22
    19c4:	01 97       	sbiw	r24, 0x01	; 1
    19c6:	9a a3       	std	Y+34, r25	; 0x22
    19c8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19ca:	89 a1       	ldd	r24, Y+33	; 0x21
    19cc:	9a a1       	ldd	r25, Y+34	; 0x22
    19ce:	00 97       	sbiw	r24, 0x00	; 0
    19d0:	69 f7       	brne	.-38     	; 0x19ac <CLCD_voidSendData+0x20c>
    19d2:	14 c0       	rjmp	.+40     	; 0x19fc <CLCD_voidSendData+0x25c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19d4:	6b a1       	ldd	r22, Y+35	; 0x23
    19d6:	7c a1       	ldd	r23, Y+36	; 0x24
    19d8:	8d a1       	ldd	r24, Y+37	; 0x25
    19da:	9e a1       	ldd	r25, Y+38	; 0x26
    19dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19e0:	dc 01       	movw	r26, r24
    19e2:	cb 01       	movw	r24, r22
    19e4:	9a a3       	std	Y+34, r25	; 0x22
    19e6:	89 a3       	std	Y+33, r24	; 0x21
    19e8:	89 a1       	ldd	r24, Y+33	; 0x21
    19ea:	9a a1       	ldd	r25, Y+34	; 0x22
    19ec:	9e 8f       	std	Y+30, r25	; 0x1e
    19ee:	8d 8f       	std	Y+29, r24	; 0x1d
    19f0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    19f2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    19f4:	01 97       	sbiw	r24, 0x01	; 1
    19f6:	f1 f7       	brne	.-4      	; 0x19f4 <CLCD_voidSendData+0x254>
    19f8:	9e 8f       	std	Y+30, r25	; 0x1e
    19fa:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);

	Local_u8Data = ((Copy_u8Data <<4) |DIO_u8AndWithPort(CLCD_DATA_PORT, CLCD_DATA_PORT_MASK));
    19fc:	8a ad       	ldd	r24, Y+58	; 0x3a
    19fe:	88 2f       	mov	r24, r24
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	82 95       	swap	r24
    1a04:	92 95       	swap	r25
    1a06:	90 7f       	andi	r25, 0xF0	; 240
    1a08:	98 27       	eor	r25, r24
    1a0a:	80 7f       	andi	r24, 0xF0	; 240
    1a0c:	98 27       	eor	r25, r24
    1a0e:	18 2f       	mov	r17, r24
    1a10:	82 e0       	ldi	r24, 0x02	; 2
    1a12:	6f e0       	ldi	r22, 0x0F	; 15
    1a14:	0e 94 8d 12 	call	0x251a	; 0x251a <DIO_u8AndWithPort>
    1a18:	81 2b       	or	r24, r17
    1a1a:	89 af       	std	Y+57, r24	; 0x39

	DIO_u8SetPortValue(CLCD_DATA_PORT,Local_u8Data);
    1a1c:	82 e0       	ldi	r24, 0x02	; 2
    1a1e:	69 ad       	ldd	r22, Y+57	; 0x39
    1a20:	0e 94 a7 11 	call	0x234e	; 0x234e <DIO_u8SetPortValue>

	/*Send Enable pulse */
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    1a24:	82 e0       	ldi	r24, 0x02	; 2
    1a26:	63 e0       	ldi	r22, 0x03	; 3
    1a28:	41 e0       	ldi	r20, 0x01	; 1
    1a2a:	0e 94 95 10 	call	0x212a	; 0x212a <DIO_u8SetPinValue>
    1a2e:	80 e0       	ldi	r24, 0x00	; 0
    1a30:	90 e0       	ldi	r25, 0x00	; 0
    1a32:	a0 e0       	ldi	r26, 0x00	; 0
    1a34:	b0 e4       	ldi	r27, 0x40	; 64
    1a36:	89 8f       	std	Y+25, r24	; 0x19
    1a38:	9a 8f       	std	Y+26, r25	; 0x1a
    1a3a:	ab 8f       	std	Y+27, r26	; 0x1b
    1a3c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a3e:	69 8d       	ldd	r22, Y+25	; 0x19
    1a40:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a42:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a44:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a46:	20 e0       	ldi	r18, 0x00	; 0
    1a48:	30 e0       	ldi	r19, 0x00	; 0
    1a4a:	4a ef       	ldi	r20, 0xFA	; 250
    1a4c:	54 e4       	ldi	r21, 0x44	; 68
    1a4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a52:	dc 01       	movw	r26, r24
    1a54:	cb 01       	movw	r24, r22
    1a56:	8d 8b       	std	Y+21, r24	; 0x15
    1a58:	9e 8b       	std	Y+22, r25	; 0x16
    1a5a:	af 8b       	std	Y+23, r26	; 0x17
    1a5c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a5e:	6d 89       	ldd	r22, Y+21	; 0x15
    1a60:	7e 89       	ldd	r23, Y+22	; 0x16
    1a62:	8f 89       	ldd	r24, Y+23	; 0x17
    1a64:	98 8d       	ldd	r25, Y+24	; 0x18
    1a66:	20 e0       	ldi	r18, 0x00	; 0
    1a68:	30 e0       	ldi	r19, 0x00	; 0
    1a6a:	40 e8       	ldi	r20, 0x80	; 128
    1a6c:	5f e3       	ldi	r21, 0x3F	; 63
    1a6e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1a72:	88 23       	and	r24, r24
    1a74:	2c f4       	brge	.+10     	; 0x1a80 <CLCD_voidSendData+0x2e0>
		__ticks = 1;
    1a76:	81 e0       	ldi	r24, 0x01	; 1
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	9c 8b       	std	Y+20, r25	; 0x14
    1a7c:	8b 8b       	std	Y+19, r24	; 0x13
    1a7e:	3f c0       	rjmp	.+126    	; 0x1afe <CLCD_voidSendData+0x35e>
	else if (__tmp > 65535)
    1a80:	6d 89       	ldd	r22, Y+21	; 0x15
    1a82:	7e 89       	ldd	r23, Y+22	; 0x16
    1a84:	8f 89       	ldd	r24, Y+23	; 0x17
    1a86:	98 8d       	ldd	r25, Y+24	; 0x18
    1a88:	20 e0       	ldi	r18, 0x00	; 0
    1a8a:	3f ef       	ldi	r19, 0xFF	; 255
    1a8c:	4f e7       	ldi	r20, 0x7F	; 127
    1a8e:	57 e4       	ldi	r21, 0x47	; 71
    1a90:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1a94:	18 16       	cp	r1, r24
    1a96:	4c f5       	brge	.+82     	; 0x1aea <CLCD_voidSendData+0x34a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a98:	69 8d       	ldd	r22, Y+25	; 0x19
    1a9a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a9c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a9e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1aa0:	20 e0       	ldi	r18, 0x00	; 0
    1aa2:	30 e0       	ldi	r19, 0x00	; 0
    1aa4:	40 e2       	ldi	r20, 0x20	; 32
    1aa6:	51 e4       	ldi	r21, 0x41	; 65
    1aa8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aac:	dc 01       	movw	r26, r24
    1aae:	cb 01       	movw	r24, r22
    1ab0:	bc 01       	movw	r22, r24
    1ab2:	cd 01       	movw	r24, r26
    1ab4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ab8:	dc 01       	movw	r26, r24
    1aba:	cb 01       	movw	r24, r22
    1abc:	9c 8b       	std	Y+20, r25	; 0x14
    1abe:	8b 8b       	std	Y+19, r24	; 0x13
    1ac0:	0f c0       	rjmp	.+30     	; 0x1ae0 <CLCD_voidSendData+0x340>
    1ac2:	88 ec       	ldi	r24, 0xC8	; 200
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	9a 8b       	std	Y+18, r25	; 0x12
    1ac8:	89 8b       	std	Y+17, r24	; 0x11
    1aca:	89 89       	ldd	r24, Y+17	; 0x11
    1acc:	9a 89       	ldd	r25, Y+18	; 0x12
    1ace:	01 97       	sbiw	r24, 0x01	; 1
    1ad0:	f1 f7       	brne	.-4      	; 0x1ace <CLCD_voidSendData+0x32e>
    1ad2:	9a 8b       	std	Y+18, r25	; 0x12
    1ad4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ad6:	8b 89       	ldd	r24, Y+19	; 0x13
    1ad8:	9c 89       	ldd	r25, Y+20	; 0x14
    1ada:	01 97       	sbiw	r24, 0x01	; 1
    1adc:	9c 8b       	std	Y+20, r25	; 0x14
    1ade:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ae0:	8b 89       	ldd	r24, Y+19	; 0x13
    1ae2:	9c 89       	ldd	r25, Y+20	; 0x14
    1ae4:	00 97       	sbiw	r24, 0x00	; 0
    1ae6:	69 f7       	brne	.-38     	; 0x1ac2 <CLCD_voidSendData+0x322>
    1ae8:	14 c0       	rjmp	.+40     	; 0x1b12 <CLCD_voidSendData+0x372>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aea:	6d 89       	ldd	r22, Y+21	; 0x15
    1aec:	7e 89       	ldd	r23, Y+22	; 0x16
    1aee:	8f 89       	ldd	r24, Y+23	; 0x17
    1af0:	98 8d       	ldd	r25, Y+24	; 0x18
    1af2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1af6:	dc 01       	movw	r26, r24
    1af8:	cb 01       	movw	r24, r22
    1afa:	9c 8b       	std	Y+20, r25	; 0x14
    1afc:	8b 8b       	std	Y+19, r24	; 0x13
    1afe:	8b 89       	ldd	r24, Y+19	; 0x13
    1b00:	9c 89       	ldd	r25, Y+20	; 0x14
    1b02:	98 8b       	std	Y+16, r25	; 0x10
    1b04:	8f 87       	std	Y+15, r24	; 0x0f
    1b06:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b08:	98 89       	ldd	r25, Y+16	; 0x10
    1b0a:	01 97       	sbiw	r24, 0x01	; 1
    1b0c:	f1 f7       	brne	.-4      	; 0x1b0a <CLCD_voidSendData+0x36a>
    1b0e:	98 8b       	std	Y+16, r25	; 0x10
    1b10:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    1b12:	82 e0       	ldi	r24, 0x02	; 2
    1b14:	63 e0       	ldi	r22, 0x03	; 3
    1b16:	40 e0       	ldi	r20, 0x00	; 0
    1b18:	0e 94 95 10 	call	0x212a	; 0x212a <DIO_u8SetPinValue>
    1b1c:	80 e0       	ldi	r24, 0x00	; 0
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	a0 ea       	ldi	r26, 0xA0	; 160
    1b22:	b0 e4       	ldi	r27, 0x40	; 64
    1b24:	8b 87       	std	Y+11, r24	; 0x0b
    1b26:	9c 87       	std	Y+12, r25	; 0x0c
    1b28:	ad 87       	std	Y+13, r26	; 0x0d
    1b2a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b2c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b2e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b30:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b32:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b34:	20 e0       	ldi	r18, 0x00	; 0
    1b36:	30 e0       	ldi	r19, 0x00	; 0
    1b38:	4a ef       	ldi	r20, 0xFA	; 250
    1b3a:	54 e4       	ldi	r21, 0x44	; 68
    1b3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b40:	dc 01       	movw	r26, r24
    1b42:	cb 01       	movw	r24, r22
    1b44:	8f 83       	std	Y+7, r24	; 0x07
    1b46:	98 87       	std	Y+8, r25	; 0x08
    1b48:	a9 87       	std	Y+9, r26	; 0x09
    1b4a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b4c:	6f 81       	ldd	r22, Y+7	; 0x07
    1b4e:	78 85       	ldd	r23, Y+8	; 0x08
    1b50:	89 85       	ldd	r24, Y+9	; 0x09
    1b52:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b54:	20 e0       	ldi	r18, 0x00	; 0
    1b56:	30 e0       	ldi	r19, 0x00	; 0
    1b58:	40 e8       	ldi	r20, 0x80	; 128
    1b5a:	5f e3       	ldi	r21, 0x3F	; 63
    1b5c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1b60:	88 23       	and	r24, r24
    1b62:	2c f4       	brge	.+10     	; 0x1b6e <CLCD_voidSendData+0x3ce>
		__ticks = 1;
    1b64:	81 e0       	ldi	r24, 0x01	; 1
    1b66:	90 e0       	ldi	r25, 0x00	; 0
    1b68:	9e 83       	std	Y+6, r25	; 0x06
    1b6a:	8d 83       	std	Y+5, r24	; 0x05
    1b6c:	3f c0       	rjmp	.+126    	; 0x1bec <CLCD_voidSendData+0x44c>
	else if (__tmp > 65535)
    1b6e:	6f 81       	ldd	r22, Y+7	; 0x07
    1b70:	78 85       	ldd	r23, Y+8	; 0x08
    1b72:	89 85       	ldd	r24, Y+9	; 0x09
    1b74:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b76:	20 e0       	ldi	r18, 0x00	; 0
    1b78:	3f ef       	ldi	r19, 0xFF	; 255
    1b7a:	4f e7       	ldi	r20, 0x7F	; 127
    1b7c:	57 e4       	ldi	r21, 0x47	; 71
    1b7e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1b82:	18 16       	cp	r1, r24
    1b84:	4c f5       	brge	.+82     	; 0x1bd8 <CLCD_voidSendData+0x438>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b86:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b88:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b8a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b8c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b8e:	20 e0       	ldi	r18, 0x00	; 0
    1b90:	30 e0       	ldi	r19, 0x00	; 0
    1b92:	40 e2       	ldi	r20, 0x20	; 32
    1b94:	51 e4       	ldi	r21, 0x41	; 65
    1b96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b9a:	dc 01       	movw	r26, r24
    1b9c:	cb 01       	movw	r24, r22
    1b9e:	bc 01       	movw	r22, r24
    1ba0:	cd 01       	movw	r24, r26
    1ba2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ba6:	dc 01       	movw	r26, r24
    1ba8:	cb 01       	movw	r24, r22
    1baa:	9e 83       	std	Y+6, r25	; 0x06
    1bac:	8d 83       	std	Y+5, r24	; 0x05
    1bae:	0f c0       	rjmp	.+30     	; 0x1bce <CLCD_voidSendData+0x42e>
    1bb0:	88 ec       	ldi	r24, 0xC8	; 200
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
    1bb4:	9c 83       	std	Y+4, r25	; 0x04
    1bb6:	8b 83       	std	Y+3, r24	; 0x03
    1bb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bba:	9c 81       	ldd	r25, Y+4	; 0x04
    1bbc:	01 97       	sbiw	r24, 0x01	; 1
    1bbe:	f1 f7       	brne	.-4      	; 0x1bbc <CLCD_voidSendData+0x41c>
    1bc0:	9c 83       	std	Y+4, r25	; 0x04
    1bc2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bc4:	8d 81       	ldd	r24, Y+5	; 0x05
    1bc6:	9e 81       	ldd	r25, Y+6	; 0x06
    1bc8:	01 97       	sbiw	r24, 0x01	; 1
    1bca:	9e 83       	std	Y+6, r25	; 0x06
    1bcc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bce:	8d 81       	ldd	r24, Y+5	; 0x05
    1bd0:	9e 81       	ldd	r25, Y+6	; 0x06
    1bd2:	00 97       	sbiw	r24, 0x00	; 0
    1bd4:	69 f7       	brne	.-38     	; 0x1bb0 <CLCD_voidSendData+0x410>
    1bd6:	14 c0       	rjmp	.+40     	; 0x1c00 <CLCD_voidSendData+0x460>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bd8:	6f 81       	ldd	r22, Y+7	; 0x07
    1bda:	78 85       	ldd	r23, Y+8	; 0x08
    1bdc:	89 85       	ldd	r24, Y+9	; 0x09
    1bde:	9a 85       	ldd	r25, Y+10	; 0x0a
    1be0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1be4:	dc 01       	movw	r26, r24
    1be6:	cb 01       	movw	r24, r22
    1be8:	9e 83       	std	Y+6, r25	; 0x06
    1bea:	8d 83       	std	Y+5, r24	; 0x05
    1bec:	8d 81       	ldd	r24, Y+5	; 0x05
    1bee:	9e 81       	ldd	r25, Y+6	; 0x06
    1bf0:	9a 83       	std	Y+2, r25	; 0x02
    1bf2:	89 83       	std	Y+1, r24	; 0x01
    1bf4:	89 81       	ldd	r24, Y+1	; 0x01
    1bf6:	9a 81       	ldd	r25, Y+2	; 0x02
    1bf8:	01 97       	sbiw	r24, 0x01	; 1
    1bfa:	f1 f7       	brne	.-4      	; 0x1bf8 <CLCD_voidSendData+0x458>
    1bfc:	9a 83       	std	Y+2, r25	; 0x02
    1bfe:	89 83       	std	Y+1, r24	; 0x01



#endif

}
    1c00:	ea 96       	adiw	r28, 0x3a	; 58
    1c02:	0f b6       	in	r0, 0x3f	; 63
    1c04:	f8 94       	cli
    1c06:	de bf       	out	0x3e, r29	; 62
    1c08:	0f be       	out	0x3f, r0	; 63
    1c0a:	cd bf       	out	0x3d, r28	; 61
    1c0c:	cf 91       	pop	r28
    1c0e:	df 91       	pop	r29
    1c10:	1f 91       	pop	r17
    1c12:	08 95       	ret

00001c14 <CLCD_voidInit>:

void CLCD_voidInit(void)
{
    1c14:	df 93       	push	r29
    1c16:	cf 93       	push	r28
    1c18:	cd b7       	in	r28, 0x3d	; 61
    1c1a:	de b7       	in	r29, 0x3e	; 62
    1c1c:	2e 97       	sbiw	r28, 0x0e	; 14
    1c1e:	0f b6       	in	r0, 0x3f	; 63
    1c20:	f8 94       	cli
    1c22:	de bf       	out	0x3e, r29	; 62
    1c24:	0f be       	out	0x3f, r0	; 63
    1c26:	cd bf       	out	0x3d, r28	; 61
    1c28:	80 e0       	ldi	r24, 0x00	; 0
    1c2a:	90 e0       	ldi	r25, 0x00	; 0
    1c2c:	a0 e2       	ldi	r26, 0x20	; 32
    1c2e:	b2 e4       	ldi	r27, 0x42	; 66
    1c30:	8b 87       	std	Y+11, r24	; 0x0b
    1c32:	9c 87       	std	Y+12, r25	; 0x0c
    1c34:	ad 87       	std	Y+13, r26	; 0x0d
    1c36:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c38:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c3a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c3c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c3e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c40:	20 e0       	ldi	r18, 0x00	; 0
    1c42:	30 e0       	ldi	r19, 0x00	; 0
    1c44:	4a ef       	ldi	r20, 0xFA	; 250
    1c46:	54 e4       	ldi	r21, 0x44	; 68
    1c48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c4c:	dc 01       	movw	r26, r24
    1c4e:	cb 01       	movw	r24, r22
    1c50:	8f 83       	std	Y+7, r24	; 0x07
    1c52:	98 87       	std	Y+8, r25	; 0x08
    1c54:	a9 87       	std	Y+9, r26	; 0x09
    1c56:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c58:	6f 81       	ldd	r22, Y+7	; 0x07
    1c5a:	78 85       	ldd	r23, Y+8	; 0x08
    1c5c:	89 85       	ldd	r24, Y+9	; 0x09
    1c5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c60:	20 e0       	ldi	r18, 0x00	; 0
    1c62:	30 e0       	ldi	r19, 0x00	; 0
    1c64:	40 e8       	ldi	r20, 0x80	; 128
    1c66:	5f e3       	ldi	r21, 0x3F	; 63
    1c68:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1c6c:	88 23       	and	r24, r24
    1c6e:	2c f4       	brge	.+10     	; 0x1c7a <CLCD_voidInit+0x66>
		__ticks = 1;
    1c70:	81 e0       	ldi	r24, 0x01	; 1
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	9e 83       	std	Y+6, r25	; 0x06
    1c76:	8d 83       	std	Y+5, r24	; 0x05
    1c78:	3f c0       	rjmp	.+126    	; 0x1cf8 <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
    1c7a:	6f 81       	ldd	r22, Y+7	; 0x07
    1c7c:	78 85       	ldd	r23, Y+8	; 0x08
    1c7e:	89 85       	ldd	r24, Y+9	; 0x09
    1c80:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c82:	20 e0       	ldi	r18, 0x00	; 0
    1c84:	3f ef       	ldi	r19, 0xFF	; 255
    1c86:	4f e7       	ldi	r20, 0x7F	; 127
    1c88:	57 e4       	ldi	r21, 0x47	; 71
    1c8a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1c8e:	18 16       	cp	r1, r24
    1c90:	4c f5       	brge	.+82     	; 0x1ce4 <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c92:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c94:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c96:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c98:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c9a:	20 e0       	ldi	r18, 0x00	; 0
    1c9c:	30 e0       	ldi	r19, 0x00	; 0
    1c9e:	40 e2       	ldi	r20, 0x20	; 32
    1ca0:	51 e4       	ldi	r21, 0x41	; 65
    1ca2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ca6:	dc 01       	movw	r26, r24
    1ca8:	cb 01       	movw	r24, r22
    1caa:	bc 01       	movw	r22, r24
    1cac:	cd 01       	movw	r24, r26
    1cae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cb2:	dc 01       	movw	r26, r24
    1cb4:	cb 01       	movw	r24, r22
    1cb6:	9e 83       	std	Y+6, r25	; 0x06
    1cb8:	8d 83       	std	Y+5, r24	; 0x05
    1cba:	0f c0       	rjmp	.+30     	; 0x1cda <CLCD_voidInit+0xc6>
    1cbc:	88 ec       	ldi	r24, 0xC8	; 200
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	9c 83       	std	Y+4, r25	; 0x04
    1cc2:	8b 83       	std	Y+3, r24	; 0x03
    1cc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc6:	9c 81       	ldd	r25, Y+4	; 0x04
    1cc8:	01 97       	sbiw	r24, 0x01	; 1
    1cca:	f1 f7       	brne	.-4      	; 0x1cc8 <CLCD_voidInit+0xb4>
    1ccc:	9c 83       	std	Y+4, r25	; 0x04
    1cce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cd0:	8d 81       	ldd	r24, Y+5	; 0x05
    1cd2:	9e 81       	ldd	r25, Y+6	; 0x06
    1cd4:	01 97       	sbiw	r24, 0x01	; 1
    1cd6:	9e 83       	std	Y+6, r25	; 0x06
    1cd8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cda:	8d 81       	ldd	r24, Y+5	; 0x05
    1cdc:	9e 81       	ldd	r25, Y+6	; 0x06
    1cde:	00 97       	sbiw	r24, 0x00	; 0
    1ce0:	69 f7       	brne	.-38     	; 0x1cbc <CLCD_voidInit+0xa8>
    1ce2:	14 c0       	rjmp	.+40     	; 0x1d0c <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ce4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ce6:	78 85       	ldd	r23, Y+8	; 0x08
    1ce8:	89 85       	ldd	r24, Y+9	; 0x09
    1cea:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cf0:	dc 01       	movw	r26, r24
    1cf2:	cb 01       	movw	r24, r22
    1cf4:	9e 83       	std	Y+6, r25	; 0x06
    1cf6:	8d 83       	std	Y+5, r24	; 0x05
    1cf8:	8d 81       	ldd	r24, Y+5	; 0x05
    1cfa:	9e 81       	ldd	r25, Y+6	; 0x06
    1cfc:	9a 83       	std	Y+2, r25	; 0x02
    1cfe:	89 83       	std	Y+1, r24	; 0x01
    1d00:	89 81       	ldd	r24, Y+1	; 0x01
    1d02:	9a 81       	ldd	r25, Y+2	; 0x02
    1d04:	01 97       	sbiw	r24, 0x01	; 1
    1d06:	f1 f7       	brne	.-4      	; 0x1d04 <CLCD_voidInit+0xf0>
    1d08:	9a 83       	std	Y+2, r25	; 0x02
    1d0a:	89 83       	std	Y+1, r24	; 0x01
	C_LCD_voidSendCommand(0x01); /* 1 or 0x01 or 0b00000001*/

#elif   MODE_SELECT ==_4_BIT_MODE

	/* Function set command : 2 lines , 5*8 font size */
	C_LCD_voidSendCommand(0x33);
    1d0c:	83 e3       	ldi	r24, 0x33	; 51
    1d0e:	0e 94 b8 09 	call	0x1370	; 0x1370 <C_LCD_voidSendCommand>
	C_LCD_voidSendCommand(0x32);
    1d12:	82 e3       	ldi	r24, 0x32	; 50
    1d14:	0e 94 b8 09 	call	0x1370	; 0x1370 <C_LCD_voidSendCommand>
	C_LCD_voidSendCommand(0x28);   /* 0bNFXXXXXX  --> N: no of lines F: font size*/
    1d18:	88 e2       	ldi	r24, 0x28	; 40
    1d1a:	0e 94 b8 09 	call	0x1370	; 0x1370 <C_LCD_voidSendCommand>


	/*Display on off control : disable enable , disable cursor , no blink cursor*/
	C_LCD_voidSendCommand(0x0C);
    1d1e:	8c e0       	ldi	r24, 0x0C	; 12
    1d20:	0e 94 b8 09 	call	0x1370	; 0x1370 <C_LCD_voidSendCommand>
	C_LCD_voidSendCommand(0x02);
    1d24:	82 e0       	ldi	r24, 0x02	; 2
    1d26:	0e 94 b8 09 	call	0x1370	; 0x1370 <C_LCD_voidSendCommand>

	C_LCD_voidSendCommand(0x06);
    1d2a:	86 e0       	ldi	r24, 0x06	; 6
    1d2c:	0e 94 b8 09 	call	0x1370	; 0x1370 <C_LCD_voidSendCommand>

	/* Clear display */
	C_LCD_voidSendCommand(0x01);
    1d30:	81 e0       	ldi	r24, 0x01	; 1
    1d32:	0e 94 b8 09 	call	0x1370	; 0x1370 <C_LCD_voidSendCommand>


#endif


}
    1d36:	2e 96       	adiw	r28, 0x0e	; 14
    1d38:	0f b6       	in	r0, 0x3f	; 63
    1d3a:	f8 94       	cli
    1d3c:	de bf       	out	0x3e, r29	; 62
    1d3e:	0f be       	out	0x3f, r0	; 63
    1d40:	cd bf       	out	0x3d, r28	; 61
    1d42:	cf 91       	pop	r28
    1d44:	df 91       	pop	r29
    1d46:	08 95       	ret

00001d48 <CLCD_voidSendString>:

void CLCD_voidSendString(const char* Copy_pcString )
{
    1d48:	df 93       	push	r29
    1d4a:	cf 93       	push	r28
    1d4c:	00 d0       	rcall	.+0      	; 0x1d4e <CLCD_voidSendString+0x6>
    1d4e:	0f 92       	push	r0
    1d50:	cd b7       	in	r28, 0x3d	; 61
    1d52:	de b7       	in	r29, 0x3e	; 62
    1d54:	9b 83       	std	Y+3, r25	; 0x03
    1d56:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Counter = 0;
    1d58:	19 82       	std	Y+1, r1	; 0x01
    1d5a:	0e c0       	rjmp	.+28     	; 0x1d78 <CLCD_voidSendString+0x30>
	while (Copy_pcString[Local_u8Counter] != NULL)
	{
		CLCD_voidSendData(Copy_pcString[Local_u8Counter]);
    1d5c:	89 81       	ldd	r24, Y+1	; 0x01
    1d5e:	28 2f       	mov	r18, r24
    1d60:	30 e0       	ldi	r19, 0x00	; 0
    1d62:	8a 81       	ldd	r24, Y+2	; 0x02
    1d64:	9b 81       	ldd	r25, Y+3	; 0x03
    1d66:	fc 01       	movw	r30, r24
    1d68:	e2 0f       	add	r30, r18
    1d6a:	f3 1f       	adc	r31, r19
    1d6c:	80 81       	ld	r24, Z
    1d6e:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <CLCD_voidSendData>
		Local_u8Counter++;
    1d72:	89 81       	ldd	r24, Y+1	; 0x01
    1d74:	8f 5f       	subi	r24, 0xFF	; 255
    1d76:	89 83       	std	Y+1, r24	; 0x01
}

void CLCD_voidSendString(const char* Copy_pcString )
{
	u8 Local_u8Counter = 0;
	while (Copy_pcString[Local_u8Counter] != NULL)
    1d78:	89 81       	ldd	r24, Y+1	; 0x01
    1d7a:	28 2f       	mov	r18, r24
    1d7c:	30 e0       	ldi	r19, 0x00	; 0
    1d7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d80:	9b 81       	ldd	r25, Y+3	; 0x03
    1d82:	fc 01       	movw	r30, r24
    1d84:	e2 0f       	add	r30, r18
    1d86:	f3 1f       	adc	r31, r19
    1d88:	80 81       	ld	r24, Z
    1d8a:	88 23       	and	r24, r24
    1d8c:	39 f7       	brne	.-50     	; 0x1d5c <CLCD_voidSendString+0x14>
	{
		CLCD_voidSendData(Copy_pcString[Local_u8Counter]);
		Local_u8Counter++;
	}
}
    1d8e:	0f 90       	pop	r0
    1d90:	0f 90       	pop	r0
    1d92:	0f 90       	pop	r0
    1d94:	cf 91       	pop	r28
    1d96:	df 91       	pop	r29
    1d98:	08 95       	ret

00001d9a <CLCD_voidGoToXY>:

void CLCD_voidGoToXY(u8 Copy_u8Xpos, u8 Copy_u8Ypos)
{
    1d9a:	df 93       	push	r29
    1d9c:	cf 93       	push	r28
    1d9e:	00 d0       	rcall	.+0      	; 0x1da0 <CLCD_voidGoToXY+0x6>
    1da0:	0f 92       	push	r0
    1da2:	cd b7       	in	r28, 0x3d	; 61
    1da4:	de b7       	in	r29, 0x3e	; 62
    1da6:	8a 83       	std	Y+2, r24	; 0x02
    1da8:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Adress=0;
    1daa:	19 82       	std	Y+1, r1	; 0x01
	Local_u8SetPositionY = Copy_u8Ypos;
    1dac:	8b 81       	ldd	r24, Y+3	; 0x03
    1dae:	80 93 97 01 	sts	0x0197, r24
	Local_u8SetPositionX = Copy_u8Xpos;
    1db2:	8a 81       	ldd	r24, Y+2	; 0x02
    1db4:	80 93 96 01 	sts	0x0196, r24
	if (Copy_u8Xpos == 0)                      // First Line
    1db8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dba:	88 23       	and	r24, r24
    1dbc:	19 f4       	brne	.+6      	; 0x1dc4 <CLCD_voidGoToXY+0x2a>
	{
		Local_u8Adress = Copy_u8Ypos;
    1dbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc0:	89 83       	std	Y+1, r24	; 0x01
    1dc2:	14 c0       	rjmp	.+40     	; 0x1dec <CLCD_voidGoToXY+0x52>
	}
	else if (Copy_u8Xpos == 1)                // Second Line
    1dc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc6:	81 30       	cpi	r24, 0x01	; 1
    1dc8:	21 f4       	brne	.+8      	; 0x1dd2 <CLCD_voidGoToXY+0x38>
	{
		Local_u8Adress = Copy_u8Ypos+0x40;
    1dca:	8b 81       	ldd	r24, Y+3	; 0x03
    1dcc:	80 5c       	subi	r24, 0xC0	; 192
    1dce:	89 83       	std	Y+1, r24	; 0x01
    1dd0:	0d c0       	rjmp	.+26     	; 0x1dec <CLCD_voidGoToXY+0x52>
	}
	else if (Copy_u8Xpos == 2)                // Third Line
    1dd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd4:	82 30       	cpi	r24, 0x02	; 2
    1dd6:	21 f4       	brne	.+8      	; 0x1de0 <CLCD_voidGoToXY+0x46>
	{
		Local_u8Adress = Copy_u8Ypos+0x10;
    1dd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dda:	80 5f       	subi	r24, 0xF0	; 240
    1ddc:	89 83       	std	Y+1, r24	; 0x01
    1dde:	06 c0       	rjmp	.+12     	; 0x1dec <CLCD_voidGoToXY+0x52>
	}
	else if (Copy_u8Xpos == 3)                // Fourth Line
    1de0:	8a 81       	ldd	r24, Y+2	; 0x02
    1de2:	83 30       	cpi	r24, 0x03	; 3
    1de4:	19 f4       	brne	.+6      	; 0x1dec <CLCD_voidGoToXY+0x52>
	{
		Local_u8Adress = Copy_u8Ypos+0x50;
    1de6:	8b 81       	ldd	r24, Y+3	; 0x03
    1de8:	80 5b       	subi	r24, 0xB0	; 176
    1dea:	89 83       	std	Y+1, r24	; 0x01
	}

	C_LCD_voidSendCommand(Local_u8Adress+128);
    1dec:	89 81       	ldd	r24, Y+1	; 0x01
    1dee:	80 58       	subi	r24, 0x80	; 128
    1df0:	0e 94 b8 09 	call	0x1370	; 0x1370 <C_LCD_voidSendCommand>



}
    1df4:	0f 90       	pop	r0
    1df6:	0f 90       	pop	r0
    1df8:	0f 90       	pop	r0
    1dfa:	cf 91       	pop	r28
    1dfc:	df 91       	pop	r29
    1dfe:	08 95       	ret

00001e00 <CLCD_voidWriteSpecialCharacter>:

void CLCD_voidWriteSpecialCharacter(u8* Copy_pu8Pattern, u8 Copy_u8PatternNumber, u8 Copy_u8XPos, u8 Copy_u8YPos)
{
    1e00:	df 93       	push	r29
    1e02:	cf 93       	push	r28
    1e04:	cd b7       	in	r28, 0x3d	; 61
    1e06:	de b7       	in	r29, 0x3e	; 62
    1e08:	27 97       	sbiw	r28, 0x07	; 7
    1e0a:	0f b6       	in	r0, 0x3f	; 63
    1e0c:	f8 94       	cli
    1e0e:	de bf       	out	0x3e, r29	; 62
    1e10:	0f be       	out	0x3f, r0	; 63
    1e12:	cd bf       	out	0x3d, r28	; 61
    1e14:	9c 83       	std	Y+4, r25	; 0x04
    1e16:	8b 83       	std	Y+3, r24	; 0x03
    1e18:	6d 83       	std	Y+5, r22	; 0x05
    1e1a:	4e 83       	std	Y+6, r20	; 0x06
    1e1c:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8CGRAMAddress= 0, Local_u8Iterator;
    1e1e:	1a 82       	std	Y+2, r1	; 0x02
	/* Calculate the CGRAM address whose each block is 8 bytes */
	Local_u8CGRAMAddress =Copy_u8PatternNumber*8;
    1e20:	8d 81       	ldd	r24, Y+5	; 0x05
    1e22:	88 2f       	mov	r24, r24
    1e24:	90 e0       	ldi	r25, 0x00	; 0
    1e26:	88 0f       	add	r24, r24
    1e28:	99 1f       	adc	r25, r25
    1e2a:	88 0f       	add	r24, r24
    1e2c:	99 1f       	adc	r25, r25
    1e2e:	88 0f       	add	r24, r24
    1e30:	99 1f       	adc	r25, r25
    1e32:	8a 83       	std	Y+2, r24	; 0x02

	/* Send CGRAM Address command to LCD, with setting bit 6, clearing bit 7*/
	C_LCD_voidSendCommand(Local_u8CGRAMAddress+64);
    1e34:	8a 81       	ldd	r24, Y+2	; 0x02
    1e36:	80 5c       	subi	r24, 0xC0	; 192
    1e38:	0e 94 b8 09 	call	0x1370	; 0x1370 <C_LCD_voidSendCommand>

	/* Write the pattern into CGRAM */

	for (Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++)
    1e3c:	19 82       	std	Y+1, r1	; 0x01
    1e3e:	0e c0       	rjmp	.+28     	; 0x1e5c <CLCD_voidWriteSpecialCharacter+0x5c>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Iterator]);
    1e40:	89 81       	ldd	r24, Y+1	; 0x01
    1e42:	28 2f       	mov	r18, r24
    1e44:	30 e0       	ldi	r19, 0x00	; 0
    1e46:	8b 81       	ldd	r24, Y+3	; 0x03
    1e48:	9c 81       	ldd	r25, Y+4	; 0x04
    1e4a:	fc 01       	movw	r30, r24
    1e4c:	e2 0f       	add	r30, r18
    1e4e:	f3 1f       	adc	r31, r19
    1e50:	80 81       	ld	r24, Z
    1e52:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <CLCD_voidSendData>
	/* Send CGRAM Address command to LCD, with setting bit 6, clearing bit 7*/
	C_LCD_voidSendCommand(Local_u8CGRAMAddress+64);

	/* Write the pattern into CGRAM */

	for (Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++)
    1e56:	89 81       	ldd	r24, Y+1	; 0x01
    1e58:	8f 5f       	subi	r24, 0xFF	; 255
    1e5a:	89 83       	std	Y+1, r24	; 0x01
    1e5c:	89 81       	ldd	r24, Y+1	; 0x01
    1e5e:	88 30       	cpi	r24, 0x08	; 8
    1e60:	78 f3       	brcs	.-34     	; 0x1e40 <CLCD_voidWriteSpecialCharacter+0x40>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Iterator]);
	}

	/* go back to the DDRAM to display the Pattern*/
	CLCD_voidGoToXY(Copy_u8XPos,Copy_u8YPos);
    1e62:	8e 81       	ldd	r24, Y+6	; 0x06
    1e64:	6f 81       	ldd	r22, Y+7	; 0x07
    1e66:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <CLCD_voidGoToXY>
	/* Display the pattern written in the CGRAM*/
	CLCD_voidSendData(Copy_u8PatternNumber);
    1e6a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e6c:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <CLCD_voidSendData>
}
    1e70:	27 96       	adiw	r28, 0x07	; 7
    1e72:	0f b6       	in	r0, 0x3f	; 63
    1e74:	f8 94       	cli
    1e76:	de bf       	out	0x3e, r29	; 62
    1e78:	0f be       	out	0x3f, r0	; 63
    1e7a:	cd bf       	out	0x3d, r28	; 61
    1e7c:	cf 91       	pop	r28
    1e7e:	df 91       	pop	r29
    1e80:	08 95       	ret

00001e82 <CLCD_VoidWriteNumber>:

void CLCD_VoidWriteNumber(f32 Copy_u32Number)
{
    1e82:	0f 93       	push	r16
    1e84:	1f 93       	push	r17
    1e86:	df 93       	push	r29
    1e88:	cf 93       	push	r28
    1e8a:	cd b7       	in	r28, 0x3d	; 61
    1e8c:	de b7       	in	r29, 0x3e	; 62
    1e8e:	6d 97       	sbiw	r28, 0x1d	; 29
    1e90:	0f b6       	in	r0, 0x3f	; 63
    1e92:	f8 94       	cli
    1e94:	de bf       	out	0x3e, r29	; 62
    1e96:	0f be       	out	0x3f, r0	; 63
    1e98:	cd bf       	out	0x3d, r28	; 61
    1e9a:	6a 8f       	std	Y+26, r22	; 0x1a
    1e9c:	7b 8f       	std	Y+27, r23	; 0x1b
    1e9e:	8c 8f       	std	Y+28, r24	; 0x1c
    1ea0:	9d 8f       	std	Y+29, r25	; 0x1d
	s32 Local_s32Number = Copy_u32Number;
    1ea2:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1ea4:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1ea6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1ea8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1eaa:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    1eae:	dc 01       	movw	r26, r24
    1eb0:	cb 01       	movw	r24, r22
    1eb2:	8a 83       	std	Y+2, r24	; 0x02
    1eb4:	9b 83       	std	Y+3, r25	; 0x03
    1eb6:	ac 83       	std	Y+4, r26	; 0x04
    1eb8:	bd 83       	std	Y+5, r27	; 0x05

	if(Local_s32Number == 0)
    1eba:	8a 81       	ldd	r24, Y+2	; 0x02
    1ebc:	9b 81       	ldd	r25, Y+3	; 0x03
    1ebe:	ac 81       	ldd	r26, Y+4	; 0x04
    1ec0:	bd 81       	ldd	r27, Y+5	; 0x05
    1ec2:	00 97       	sbiw	r24, 0x00	; 0
    1ec4:	a1 05       	cpc	r26, r1
    1ec6:	b1 05       	cpc	r27, r1
    1ec8:	21 f4       	brne	.+8      	; 0x1ed2 <CLCD_VoidWriteNumber+0x50>
	{
		CLCD_voidSendData('0');
    1eca:	80 e3       	ldi	r24, 0x30	; 48
    1ecc:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <CLCD_voidSendData>
    1ed0:	18 c0       	rjmp	.+48     	; 0x1f02 <CLCD_VoidWriteNumber+0x80>
	}
	else if (Local_s32Number <0)
    1ed2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed4:	9b 81       	ldd	r25, Y+3	; 0x03
    1ed6:	ac 81       	ldd	r26, Y+4	; 0x04
    1ed8:	bd 81       	ldd	r27, Y+5	; 0x05
    1eda:	bb 23       	and	r27, r27
    1edc:	94 f4       	brge	.+36     	; 0x1f02 <CLCD_VoidWriteNumber+0x80>
	{
		CLCD_voidSendData('-');
    1ede:	8d e2       	ldi	r24, 0x2D	; 45
    1ee0:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <CLCD_voidSendData>
		Local_s32Number = Local_s32Number *(-1);
    1ee4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ee8:	ac 81       	ldd	r26, Y+4	; 0x04
    1eea:	bd 81       	ldd	r27, Y+5	; 0x05
    1eec:	b0 95       	com	r27
    1eee:	a0 95       	com	r26
    1ef0:	90 95       	com	r25
    1ef2:	81 95       	neg	r24
    1ef4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ef6:	af 4f       	sbci	r26, 0xFF	; 255
    1ef8:	bf 4f       	sbci	r27, 0xFF	; 255
    1efa:	8a 83       	std	Y+2, r24	; 0x02
    1efc:	9b 83       	std	Y+3, r25	; 0x03
    1efe:	ac 83       	std	Y+4, r26	; 0x04
    1f00:	bd 83       	std	Y+5, r27	; 0x05

	}
	u8 Local_u8Array[20]={0};
    1f02:	84 e1       	ldi	r24, 0x14	; 20
    1f04:	fe 01       	movw	r30, r28
    1f06:	36 96       	adiw	r30, 0x06	; 6
    1f08:	df 01       	movw	r26, r30
    1f0a:	98 2f       	mov	r25, r24
    1f0c:	1d 92       	st	X+, r1
    1f0e:	9a 95       	dec	r25
    1f10:	e9 f7       	brne	.-6      	; 0x1f0c <CLCD_VoidWriteNumber+0x8a>
	s8 local_s8Counter =0;
    1f12:	19 82       	std	Y+1, r1	; 0x01
    1f14:	2f c0       	rjmp	.+94     	; 0x1f74 <CLCD_VoidWriteNumber+0xf2>
	while (Local_s32Number != 0)
	{
		Local_u8Array[local_s8Counter]= Local_s32Number%10;
    1f16:	89 81       	ldd	r24, Y+1	; 0x01
    1f18:	08 2f       	mov	r16, r24
    1f1a:	11 27       	eor	r17, r17
    1f1c:	07 fd       	sbrc	r16, 7
    1f1e:	10 95       	com	r17
    1f20:	8a 81       	ldd	r24, Y+2	; 0x02
    1f22:	9b 81       	ldd	r25, Y+3	; 0x03
    1f24:	ac 81       	ldd	r26, Y+4	; 0x04
    1f26:	bd 81       	ldd	r27, Y+5	; 0x05
    1f28:	2a e0       	ldi	r18, 0x0A	; 10
    1f2a:	30 e0       	ldi	r19, 0x00	; 0
    1f2c:	40 e0       	ldi	r20, 0x00	; 0
    1f2e:	50 e0       	ldi	r21, 0x00	; 0
    1f30:	bc 01       	movw	r22, r24
    1f32:	cd 01       	movw	r24, r26
    1f34:	0e 94 ba 18 	call	0x3174	; 0x3174 <__divmodsi4>
    1f38:	dc 01       	movw	r26, r24
    1f3a:	cb 01       	movw	r24, r22
    1f3c:	28 2f       	mov	r18, r24
    1f3e:	ce 01       	movw	r24, r28
    1f40:	06 96       	adiw	r24, 0x06	; 6
    1f42:	fc 01       	movw	r30, r24
    1f44:	e0 0f       	add	r30, r16
    1f46:	f1 1f       	adc	r31, r17
    1f48:	20 83       	st	Z, r18
		Local_s32Number/=10;
    1f4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f4c:	9b 81       	ldd	r25, Y+3	; 0x03
    1f4e:	ac 81       	ldd	r26, Y+4	; 0x04
    1f50:	bd 81       	ldd	r27, Y+5	; 0x05
    1f52:	2a e0       	ldi	r18, 0x0A	; 10
    1f54:	30 e0       	ldi	r19, 0x00	; 0
    1f56:	40 e0       	ldi	r20, 0x00	; 0
    1f58:	50 e0       	ldi	r21, 0x00	; 0
    1f5a:	bc 01       	movw	r22, r24
    1f5c:	cd 01       	movw	r24, r26
    1f5e:	0e 94 ba 18 	call	0x3174	; 0x3174 <__divmodsi4>
    1f62:	da 01       	movw	r26, r20
    1f64:	c9 01       	movw	r24, r18
    1f66:	8a 83       	std	Y+2, r24	; 0x02
    1f68:	9b 83       	std	Y+3, r25	; 0x03
    1f6a:	ac 83       	std	Y+4, r26	; 0x04
    1f6c:	bd 83       	std	Y+5, r27	; 0x05
		local_s8Counter++;
    1f6e:	89 81       	ldd	r24, Y+1	; 0x01
    1f70:	8f 5f       	subi	r24, 0xFF	; 255
    1f72:	89 83       	std	Y+1, r24	; 0x01
		Local_s32Number = Local_s32Number *(-1);

	}
	u8 Local_u8Array[20]={0};
	s8 local_s8Counter =0;
	while (Local_s32Number != 0)
    1f74:	8a 81       	ldd	r24, Y+2	; 0x02
    1f76:	9b 81       	ldd	r25, Y+3	; 0x03
    1f78:	ac 81       	ldd	r26, Y+4	; 0x04
    1f7a:	bd 81       	ldd	r27, Y+5	; 0x05
    1f7c:	00 97       	sbiw	r24, 0x00	; 0
    1f7e:	a1 05       	cpc	r26, r1
    1f80:	b1 05       	cpc	r27, r1
    1f82:	49 f6       	brne	.-110    	; 0x1f16 <CLCD_VoidWriteNumber+0x94>
	{
		Local_u8Array[local_s8Counter]= Local_s32Number%10;
		Local_s32Number/=10;
		local_s8Counter++;
	}
	local_s8Counter--;
    1f84:	89 81       	ldd	r24, Y+1	; 0x01
    1f86:	81 50       	subi	r24, 0x01	; 1
    1f88:	89 83       	std	Y+1, r24	; 0x01
    1f8a:	11 c0       	rjmp	.+34     	; 0x1fae <CLCD_VoidWriteNumber+0x12c>
	while (local_s8Counter>=0)
	{
		CLCD_voidSendData(Local_u8Array[local_s8Counter]+'0');
    1f8c:	89 81       	ldd	r24, Y+1	; 0x01
    1f8e:	28 2f       	mov	r18, r24
    1f90:	33 27       	eor	r19, r19
    1f92:	27 fd       	sbrc	r18, 7
    1f94:	30 95       	com	r19
    1f96:	ce 01       	movw	r24, r28
    1f98:	06 96       	adiw	r24, 0x06	; 6
    1f9a:	fc 01       	movw	r30, r24
    1f9c:	e2 0f       	add	r30, r18
    1f9e:	f3 1f       	adc	r31, r19
    1fa0:	80 81       	ld	r24, Z
    1fa2:	80 5d       	subi	r24, 0xD0	; 208
    1fa4:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <CLCD_voidSendData>
		local_s8Counter--;
    1fa8:	89 81       	ldd	r24, Y+1	; 0x01
    1faa:	81 50       	subi	r24, 0x01	; 1
    1fac:	89 83       	std	Y+1, r24	; 0x01
		Local_u8Array[local_s8Counter]= Local_s32Number%10;
		Local_s32Number/=10;
		local_s8Counter++;
	}
	local_s8Counter--;
	while (local_s8Counter>=0)
    1fae:	89 81       	ldd	r24, Y+1	; 0x01
    1fb0:	88 23       	and	r24, r24
    1fb2:	64 f7       	brge	.-40     	; 0x1f8c <CLCD_VoidWriteNumber+0x10a>
	{
		CLCD_voidSendData(Local_u8Array[local_s8Counter]+'0');
		local_s8Counter--;
	}
}
    1fb4:	6d 96       	adiw	r28, 0x1d	; 29
    1fb6:	0f b6       	in	r0, 0x3f	; 63
    1fb8:	f8 94       	cli
    1fba:	de bf       	out	0x3e, r29	; 62
    1fbc:	0f be       	out	0x3f, r0	; 63
    1fbe:	cd bf       	out	0x3d, r28	; 61
    1fc0:	cf 91       	pop	r28
    1fc2:	df 91       	pop	r29
    1fc4:	1f 91       	pop	r17
    1fc6:	0f 91       	pop	r16
    1fc8:	08 95       	ret

00001fca <CLCD_voidWriteFloatNumber>:

void CLCD_voidWriteFloatNumber(f32 Copy_f32FloatNumber )
{
    1fca:	df 93       	push	r29
    1fcc:	cf 93       	push	r28
    1fce:	cd b7       	in	r28, 0x3d	; 61
    1fd0:	de b7       	in	r29, 0x3e	; 62
    1fd2:	28 97       	sbiw	r28, 0x08	; 8
    1fd4:	0f b6       	in	r0, 0x3f	; 63
    1fd6:	f8 94       	cli
    1fd8:	de bf       	out	0x3e, r29	; 62
    1fda:	0f be       	out	0x3f, r0	; 63
    1fdc:	cd bf       	out	0x3d, r28	; 61
    1fde:	6d 83       	std	Y+5, r22	; 0x05
    1fe0:	7e 83       	std	Y+6, r23	; 0x06
    1fe2:	8f 83       	std	Y+7, r24	; 0x07
    1fe4:	98 87       	std	Y+8, r25	; 0x08

	if(Copy_f32FloatNumber == 0)
    1fe6:	6d 81       	ldd	r22, Y+5	; 0x05
    1fe8:	7e 81       	ldd	r23, Y+6	; 0x06
    1fea:	8f 81       	ldd	r24, Y+7	; 0x07
    1fec:	98 85       	ldd	r25, Y+8	; 0x08
    1fee:	20 e0       	ldi	r18, 0x00	; 0
    1ff0:	30 e0       	ldi	r19, 0x00	; 0
    1ff2:	40 e0       	ldi	r20, 0x00	; 0
    1ff4:	50 e0       	ldi	r21, 0x00	; 0
    1ff6:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    1ffa:	88 23       	and	r24, r24
    1ffc:	39 f4       	brne	.+14     	; 0x200c <CLCD_voidWriteFloatNumber+0x42>
	{
		CLCD_VoidWriteNumber(0);
    1ffe:	60 e0       	ldi	r22, 0x00	; 0
    2000:	70 e0       	ldi	r23, 0x00	; 0
    2002:	80 e0       	ldi	r24, 0x00	; 0
    2004:	90 e0       	ldi	r25, 0x00	; 0
    2006:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <CLCD_VoidWriteNumber>
    200a:	7c c0       	rjmp	.+248    	; 0x2104 <CLCD_voidWriteFloatNumber+0x13a>
	}

	else
	{
		s32 Local_s32DecemalNum=Copy_f32FloatNumber;
    200c:	6d 81       	ldd	r22, Y+5	; 0x05
    200e:	7e 81       	ldd	r23, Y+6	; 0x06
    2010:	8f 81       	ldd	r24, Y+7	; 0x07
    2012:	98 85       	ldd	r25, Y+8	; 0x08
    2014:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    2018:	dc 01       	movw	r26, r24
    201a:	cb 01       	movw	r24, r22
    201c:	89 83       	std	Y+1, r24	; 0x01
    201e:	9a 83       	std	Y+2, r25	; 0x02
    2020:	ab 83       	std	Y+3, r26	; 0x03
    2022:	bc 83       	std	Y+4, r27	; 0x04
		CLCD_VoidWriteNumber(Local_s32DecemalNum);
    2024:	69 81       	ldd	r22, Y+1	; 0x01
    2026:	7a 81       	ldd	r23, Y+2	; 0x02
    2028:	8b 81       	ldd	r24, Y+3	; 0x03
    202a:	9c 81       	ldd	r25, Y+4	; 0x04
    202c:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    2030:	dc 01       	movw	r26, r24
    2032:	cb 01       	movw	r24, r22
    2034:	bc 01       	movw	r22, r24
    2036:	cd 01       	movw	r24, r26
    2038:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <CLCD_VoidWriteNumber>
		CLCD_voidSendData('.');
    203c:	8e e2       	ldi	r24, 0x2E	; 46
    203e:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <CLCD_voidSendData>
		Copy_f32FloatNumber = Copy_f32FloatNumber -Local_s32DecemalNum;
    2042:	69 81       	ldd	r22, Y+1	; 0x01
    2044:	7a 81       	ldd	r23, Y+2	; 0x02
    2046:	8b 81       	ldd	r24, Y+3	; 0x03
    2048:	9c 81       	ldd	r25, Y+4	; 0x04
    204a:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    204e:	9b 01       	movw	r18, r22
    2050:	ac 01       	movw	r20, r24
    2052:	6d 81       	ldd	r22, Y+5	; 0x05
    2054:	7e 81       	ldd	r23, Y+6	; 0x06
    2056:	8f 81       	ldd	r24, Y+7	; 0x07
    2058:	98 85       	ldd	r25, Y+8	; 0x08
    205a:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    205e:	dc 01       	movw	r26, r24
    2060:	cb 01       	movw	r24, r22
    2062:	8d 83       	std	Y+5, r24	; 0x05
    2064:	9e 83       	std	Y+6, r25	; 0x06
    2066:	af 83       	std	Y+7, r26	; 0x07
    2068:	b8 87       	std	Y+8, r27	; 0x08

		Copy_f32FloatNumber*=100000;
    206a:	6d 81       	ldd	r22, Y+5	; 0x05
    206c:	7e 81       	ldd	r23, Y+6	; 0x06
    206e:	8f 81       	ldd	r24, Y+7	; 0x07
    2070:	98 85       	ldd	r25, Y+8	; 0x08
    2072:	20 e0       	ldi	r18, 0x00	; 0
    2074:	30 e5       	ldi	r19, 0x50	; 80
    2076:	43 ec       	ldi	r20, 0xC3	; 195
    2078:	57 e4       	ldi	r21, 0x47	; 71
    207a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    207e:	dc 01       	movw	r26, r24
    2080:	cb 01       	movw	r24, r22
    2082:	8d 83       	std	Y+5, r24	; 0x05
    2084:	9e 83       	std	Y+6, r25	; 0x06
    2086:	af 83       	std	Y+7, r26	; 0x07
    2088:	b8 87       	std	Y+8, r27	; 0x08
		Local_s32DecemalNum = Copy_f32FloatNumber;
    208a:	6d 81       	ldd	r22, Y+5	; 0x05
    208c:	7e 81       	ldd	r23, Y+6	; 0x06
    208e:	8f 81       	ldd	r24, Y+7	; 0x07
    2090:	98 85       	ldd	r25, Y+8	; 0x08
    2092:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    2096:	dc 01       	movw	r26, r24
    2098:	cb 01       	movw	r24, r22
    209a:	89 83       	std	Y+1, r24	; 0x01
    209c:	9a 83       	std	Y+2, r25	; 0x02
    209e:	ab 83       	std	Y+3, r26	; 0x03
    20a0:	bc 83       	std	Y+4, r27	; 0x04
    20a2:	12 c0       	rjmp	.+36     	; 0x20c8 <CLCD_voidWriteFloatNumber+0xfe>

		while (Local_s32DecemalNum%10 == 0)
		{
			Local_s32DecemalNum/=10;
    20a4:	89 81       	ldd	r24, Y+1	; 0x01
    20a6:	9a 81       	ldd	r25, Y+2	; 0x02
    20a8:	ab 81       	ldd	r26, Y+3	; 0x03
    20aa:	bc 81       	ldd	r27, Y+4	; 0x04
    20ac:	2a e0       	ldi	r18, 0x0A	; 10
    20ae:	30 e0       	ldi	r19, 0x00	; 0
    20b0:	40 e0       	ldi	r20, 0x00	; 0
    20b2:	50 e0       	ldi	r21, 0x00	; 0
    20b4:	bc 01       	movw	r22, r24
    20b6:	cd 01       	movw	r24, r26
    20b8:	0e 94 ba 18 	call	0x3174	; 0x3174 <__divmodsi4>
    20bc:	da 01       	movw	r26, r20
    20be:	c9 01       	movw	r24, r18
    20c0:	89 83       	std	Y+1, r24	; 0x01
    20c2:	9a 83       	std	Y+2, r25	; 0x02
    20c4:	ab 83       	std	Y+3, r26	; 0x03
    20c6:	bc 83       	std	Y+4, r27	; 0x04
		Copy_f32FloatNumber = Copy_f32FloatNumber -Local_s32DecemalNum;

		Copy_f32FloatNumber*=100000;
		Local_s32DecemalNum = Copy_f32FloatNumber;

		while (Local_s32DecemalNum%10 == 0)
    20c8:	89 81       	ldd	r24, Y+1	; 0x01
    20ca:	9a 81       	ldd	r25, Y+2	; 0x02
    20cc:	ab 81       	ldd	r26, Y+3	; 0x03
    20ce:	bc 81       	ldd	r27, Y+4	; 0x04
    20d0:	2a e0       	ldi	r18, 0x0A	; 10
    20d2:	30 e0       	ldi	r19, 0x00	; 0
    20d4:	40 e0       	ldi	r20, 0x00	; 0
    20d6:	50 e0       	ldi	r21, 0x00	; 0
    20d8:	bc 01       	movw	r22, r24
    20da:	cd 01       	movw	r24, r26
    20dc:	0e 94 ba 18 	call	0x3174	; 0x3174 <__divmodsi4>
    20e0:	dc 01       	movw	r26, r24
    20e2:	cb 01       	movw	r24, r22
    20e4:	00 97       	sbiw	r24, 0x00	; 0
    20e6:	a1 05       	cpc	r26, r1
    20e8:	b1 05       	cpc	r27, r1
    20ea:	e1 f2       	breq	.-72     	; 0x20a4 <CLCD_voidWriteFloatNumber+0xda>
		{
			Local_s32DecemalNum/=10;
		}
		CLCD_VoidWriteNumber(Local_s32DecemalNum);
    20ec:	69 81       	ldd	r22, Y+1	; 0x01
    20ee:	7a 81       	ldd	r23, Y+2	; 0x02
    20f0:	8b 81       	ldd	r24, Y+3	; 0x03
    20f2:	9c 81       	ldd	r25, Y+4	; 0x04
    20f4:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    20f8:	dc 01       	movw	r26, r24
    20fa:	cb 01       	movw	r24, r22
    20fc:	bc 01       	movw	r22, r24
    20fe:	cd 01       	movw	r24, r26
    2100:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <CLCD_VoidWriteNumber>
	}
}
    2104:	28 96       	adiw	r28, 0x08	; 8
    2106:	0f b6       	in	r0, 0x3f	; 63
    2108:	f8 94       	cli
    210a:	de bf       	out	0x3e, r29	; 62
    210c:	0f be       	out	0x3f, r0	; 63
    210e:	cd bf       	out	0x3d, r28	; 61
    2110:	cf 91       	pop	r28
    2112:	df 91       	pop	r29
    2114:	08 95       	ret

00002116 <CLCD_voidClear>:
//}



void CLCD_voidClear()
{
    2116:	df 93       	push	r29
    2118:	cf 93       	push	r28
    211a:	cd b7       	in	r28, 0x3d	; 61
    211c:	de b7       	in	r29, 0x3e	; 62
	C_LCD_voidSendCommand(0x01);
    211e:	81 e0       	ldi	r24, 0x01	; 1
    2120:	0e 94 b8 09 	call	0x1370	; 0x1370 <C_LCD_voidSendCommand>

}
    2124:	cf 91       	pop	r28
    2126:	df 91       	pop	r29
    2128:	08 95       	ret

0000212a <DIO_u8SetPinValue>:
//
//	return Local_u8ErrorState;
//}

u8 DIO_u8SetPinValue(u8 Copy_u8port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
    212a:	df 93       	push	r29
    212c:	cf 93       	push	r28
    212e:	cd b7       	in	r28, 0x3d	; 61
    2130:	de b7       	in	r29, 0x3e	; 62
    2132:	28 97       	sbiw	r28, 0x08	; 8
    2134:	0f b6       	in	r0, 0x3f	; 63
    2136:	f8 94       	cli
    2138:	de bf       	out	0x3e, r29	; 62
    213a:	0f be       	out	0x3f, r0	; 63
    213c:	cd bf       	out	0x3d, r28	; 61
    213e:	8a 83       	std	Y+2, r24	; 0x02
    2140:	6b 83       	std	Y+3, r22	; 0x03
    2142:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    2144:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin<=DIO_u8PIN7)
    2146:	8b 81       	ldd	r24, Y+3	; 0x03
    2148:	88 30       	cpi	r24, 0x08	; 8
    214a:	08 f0       	brcs	.+2      	; 0x214e <DIO_u8SetPinValue+0x24>
    214c:	f4 c0       	rjmp	.+488    	; 0x2336 <DIO_u8SetPinValue+0x20c>
	{
		if(Copy_u8Value == DIO_u8PIN_LOW)
    214e:	8c 81       	ldd	r24, Y+4	; 0x04
    2150:	88 23       	and	r24, r24
    2152:	09 f0       	breq	.+2      	; 0x2156 <DIO_u8SetPinValue+0x2c>
    2154:	77 c0       	rjmp	.+238    	; 0x2244 <DIO_u8SetPinValue+0x11a>
		{

			switch(Copy_u8port)
    2156:	8a 81       	ldd	r24, Y+2	; 0x02
    2158:	28 2f       	mov	r18, r24
    215a:	30 e0       	ldi	r19, 0x00	; 0
    215c:	38 87       	std	Y+8, r19	; 0x08
    215e:	2f 83       	std	Y+7, r18	; 0x07
    2160:	8f 81       	ldd	r24, Y+7	; 0x07
    2162:	98 85       	ldd	r25, Y+8	; 0x08
    2164:	81 30       	cpi	r24, 0x01	; 1
    2166:	91 05       	cpc	r25, r1
    2168:	59 f1       	breq	.+86     	; 0x21c0 <DIO_u8SetPinValue+0x96>
    216a:	2f 81       	ldd	r18, Y+7	; 0x07
    216c:	38 85       	ldd	r19, Y+8	; 0x08
    216e:	22 30       	cpi	r18, 0x02	; 2
    2170:	31 05       	cpc	r19, r1
    2172:	2c f4       	brge	.+10     	; 0x217e <DIO_u8SetPinValue+0x54>
    2174:	8f 81       	ldd	r24, Y+7	; 0x07
    2176:	98 85       	ldd	r25, Y+8	; 0x08
    2178:	00 97       	sbiw	r24, 0x00	; 0
    217a:	69 f0       	breq	.+26     	; 0x2196 <DIO_u8SetPinValue+0x6c>
    217c:	60 c0       	rjmp	.+192    	; 0x223e <DIO_u8SetPinValue+0x114>
    217e:	2f 81       	ldd	r18, Y+7	; 0x07
    2180:	38 85       	ldd	r19, Y+8	; 0x08
    2182:	22 30       	cpi	r18, 0x02	; 2
    2184:	31 05       	cpc	r19, r1
    2186:	89 f1       	breq	.+98     	; 0x21ea <DIO_u8SetPinValue+0xc0>
    2188:	8f 81       	ldd	r24, Y+7	; 0x07
    218a:	98 85       	ldd	r25, Y+8	; 0x08
    218c:	83 30       	cpi	r24, 0x03	; 3
    218e:	91 05       	cpc	r25, r1
    2190:	09 f4       	brne	.+2      	; 0x2194 <DIO_u8SetPinValue+0x6a>
    2192:	40 c0       	rjmp	.+128    	; 0x2214 <DIO_u8SetPinValue+0xea>
    2194:	54 c0       	rjmp	.+168    	; 0x223e <DIO_u8SetPinValue+0x114>
			{
			case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
    2196:	ab e3       	ldi	r26, 0x3B	; 59
    2198:	b0 e0       	ldi	r27, 0x00	; 0
    219a:	eb e3       	ldi	r30, 0x3B	; 59
    219c:	f0 e0       	ldi	r31, 0x00	; 0
    219e:	80 81       	ld	r24, Z
    21a0:	48 2f       	mov	r20, r24
    21a2:	8b 81       	ldd	r24, Y+3	; 0x03
    21a4:	28 2f       	mov	r18, r24
    21a6:	30 e0       	ldi	r19, 0x00	; 0
    21a8:	81 e0       	ldi	r24, 0x01	; 1
    21aa:	90 e0       	ldi	r25, 0x00	; 0
    21ac:	02 2e       	mov	r0, r18
    21ae:	02 c0       	rjmp	.+4      	; 0x21b4 <DIO_u8SetPinValue+0x8a>
    21b0:	88 0f       	add	r24, r24
    21b2:	99 1f       	adc	r25, r25
    21b4:	0a 94       	dec	r0
    21b6:	e2 f7       	brpl	.-8      	; 0x21b0 <DIO_u8SetPinValue+0x86>
    21b8:	80 95       	com	r24
    21ba:	84 23       	and	r24, r20
    21bc:	8c 93       	st	X, r24
    21be:	bd c0       	rjmp	.+378    	; 0x233a <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
    21c0:	a8 e3       	ldi	r26, 0x38	; 56
    21c2:	b0 e0       	ldi	r27, 0x00	; 0
    21c4:	e8 e3       	ldi	r30, 0x38	; 56
    21c6:	f0 e0       	ldi	r31, 0x00	; 0
    21c8:	80 81       	ld	r24, Z
    21ca:	48 2f       	mov	r20, r24
    21cc:	8b 81       	ldd	r24, Y+3	; 0x03
    21ce:	28 2f       	mov	r18, r24
    21d0:	30 e0       	ldi	r19, 0x00	; 0
    21d2:	81 e0       	ldi	r24, 0x01	; 1
    21d4:	90 e0       	ldi	r25, 0x00	; 0
    21d6:	02 2e       	mov	r0, r18
    21d8:	02 c0       	rjmp	.+4      	; 0x21de <DIO_u8SetPinValue+0xb4>
    21da:	88 0f       	add	r24, r24
    21dc:	99 1f       	adc	r25, r25
    21de:	0a 94       	dec	r0
    21e0:	e2 f7       	brpl	.-8      	; 0x21da <DIO_u8SetPinValue+0xb0>
    21e2:	80 95       	com	r24
    21e4:	84 23       	and	r24, r20
    21e6:	8c 93       	st	X, r24
    21e8:	a8 c0       	rjmp	.+336    	; 0x233a <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin); break;
    21ea:	a5 e3       	ldi	r26, 0x35	; 53
    21ec:	b0 e0       	ldi	r27, 0x00	; 0
    21ee:	e5 e3       	ldi	r30, 0x35	; 53
    21f0:	f0 e0       	ldi	r31, 0x00	; 0
    21f2:	80 81       	ld	r24, Z
    21f4:	48 2f       	mov	r20, r24
    21f6:	8b 81       	ldd	r24, Y+3	; 0x03
    21f8:	28 2f       	mov	r18, r24
    21fa:	30 e0       	ldi	r19, 0x00	; 0
    21fc:	81 e0       	ldi	r24, 0x01	; 1
    21fe:	90 e0       	ldi	r25, 0x00	; 0
    2200:	02 2e       	mov	r0, r18
    2202:	02 c0       	rjmp	.+4      	; 0x2208 <DIO_u8SetPinValue+0xde>
    2204:	88 0f       	add	r24, r24
    2206:	99 1f       	adc	r25, r25
    2208:	0a 94       	dec	r0
    220a:	e2 f7       	brpl	.-8      	; 0x2204 <DIO_u8SetPinValue+0xda>
    220c:	80 95       	com	r24
    220e:	84 23       	and	r24, r20
    2210:	8c 93       	st	X, r24
    2212:	93 c0       	rjmp	.+294    	; 0x233a <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin); break;
    2214:	a2 e3       	ldi	r26, 0x32	; 50
    2216:	b0 e0       	ldi	r27, 0x00	; 0
    2218:	e2 e3       	ldi	r30, 0x32	; 50
    221a:	f0 e0       	ldi	r31, 0x00	; 0
    221c:	80 81       	ld	r24, Z
    221e:	48 2f       	mov	r20, r24
    2220:	8b 81       	ldd	r24, Y+3	; 0x03
    2222:	28 2f       	mov	r18, r24
    2224:	30 e0       	ldi	r19, 0x00	; 0
    2226:	81 e0       	ldi	r24, 0x01	; 1
    2228:	90 e0       	ldi	r25, 0x00	; 0
    222a:	02 2e       	mov	r0, r18
    222c:	02 c0       	rjmp	.+4      	; 0x2232 <DIO_u8SetPinValue+0x108>
    222e:	88 0f       	add	r24, r24
    2230:	99 1f       	adc	r25, r25
    2232:	0a 94       	dec	r0
    2234:	e2 f7       	brpl	.-8      	; 0x222e <DIO_u8SetPinValue+0x104>
    2236:	80 95       	com	r24
    2238:	84 23       	and	r24, r20
    223a:	8c 93       	st	X, r24
    223c:	7e c0       	rjmp	.+252    	; 0x233a <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState =1; break;
    223e:	81 e0       	ldi	r24, 0x01	; 1
    2240:	89 83       	std	Y+1, r24	; 0x01
    2242:	7b c0       	rjmp	.+246    	; 0x233a <DIO_u8SetPinValue+0x210>

			}
		}
		else if(Copy_u8Value == DIO_u8PIN_HIGH)
    2244:	8c 81       	ldd	r24, Y+4	; 0x04
    2246:	81 30       	cpi	r24, 0x01	; 1
    2248:	09 f0       	breq	.+2      	; 0x224c <DIO_u8SetPinValue+0x122>
    224a:	72 c0       	rjmp	.+228    	; 0x2330 <DIO_u8SetPinValue+0x206>
		{

			switch(Copy_u8port)
    224c:	8a 81       	ldd	r24, Y+2	; 0x02
    224e:	28 2f       	mov	r18, r24
    2250:	30 e0       	ldi	r19, 0x00	; 0
    2252:	3e 83       	std	Y+6, r19	; 0x06
    2254:	2d 83       	std	Y+5, r18	; 0x05
    2256:	8d 81       	ldd	r24, Y+5	; 0x05
    2258:	9e 81       	ldd	r25, Y+6	; 0x06
    225a:	81 30       	cpi	r24, 0x01	; 1
    225c:	91 05       	cpc	r25, r1
    225e:	49 f1       	breq	.+82     	; 0x22b2 <DIO_u8SetPinValue+0x188>
    2260:	2d 81       	ldd	r18, Y+5	; 0x05
    2262:	3e 81       	ldd	r19, Y+6	; 0x06
    2264:	22 30       	cpi	r18, 0x02	; 2
    2266:	31 05       	cpc	r19, r1
    2268:	2c f4       	brge	.+10     	; 0x2274 <DIO_u8SetPinValue+0x14a>
    226a:	8d 81       	ldd	r24, Y+5	; 0x05
    226c:	9e 81       	ldd	r25, Y+6	; 0x06
    226e:	00 97       	sbiw	r24, 0x00	; 0
    2270:	61 f0       	breq	.+24     	; 0x228a <DIO_u8SetPinValue+0x160>
    2272:	5b c0       	rjmp	.+182    	; 0x232a <DIO_u8SetPinValue+0x200>
    2274:	2d 81       	ldd	r18, Y+5	; 0x05
    2276:	3e 81       	ldd	r19, Y+6	; 0x06
    2278:	22 30       	cpi	r18, 0x02	; 2
    227a:	31 05       	cpc	r19, r1
    227c:	71 f1       	breq	.+92     	; 0x22da <DIO_u8SetPinValue+0x1b0>
    227e:	8d 81       	ldd	r24, Y+5	; 0x05
    2280:	9e 81       	ldd	r25, Y+6	; 0x06
    2282:	83 30       	cpi	r24, 0x03	; 3
    2284:	91 05       	cpc	r25, r1
    2286:	e9 f1       	breq	.+122    	; 0x2302 <DIO_u8SetPinValue+0x1d8>
    2288:	50 c0       	rjmp	.+160    	; 0x232a <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
    228a:	ab e3       	ldi	r26, 0x3B	; 59
    228c:	b0 e0       	ldi	r27, 0x00	; 0
    228e:	eb e3       	ldi	r30, 0x3B	; 59
    2290:	f0 e0       	ldi	r31, 0x00	; 0
    2292:	80 81       	ld	r24, Z
    2294:	48 2f       	mov	r20, r24
    2296:	8b 81       	ldd	r24, Y+3	; 0x03
    2298:	28 2f       	mov	r18, r24
    229a:	30 e0       	ldi	r19, 0x00	; 0
    229c:	81 e0       	ldi	r24, 0x01	; 1
    229e:	90 e0       	ldi	r25, 0x00	; 0
    22a0:	02 2e       	mov	r0, r18
    22a2:	02 c0       	rjmp	.+4      	; 0x22a8 <DIO_u8SetPinValue+0x17e>
    22a4:	88 0f       	add	r24, r24
    22a6:	99 1f       	adc	r25, r25
    22a8:	0a 94       	dec	r0
    22aa:	e2 f7       	brpl	.-8      	; 0x22a4 <DIO_u8SetPinValue+0x17a>
    22ac:	84 2b       	or	r24, r20
    22ae:	8c 93       	st	X, r24
    22b0:	44 c0       	rjmp	.+136    	; 0x233a <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
    22b2:	a8 e3       	ldi	r26, 0x38	; 56
    22b4:	b0 e0       	ldi	r27, 0x00	; 0
    22b6:	e8 e3       	ldi	r30, 0x38	; 56
    22b8:	f0 e0       	ldi	r31, 0x00	; 0
    22ba:	80 81       	ld	r24, Z
    22bc:	48 2f       	mov	r20, r24
    22be:	8b 81       	ldd	r24, Y+3	; 0x03
    22c0:	28 2f       	mov	r18, r24
    22c2:	30 e0       	ldi	r19, 0x00	; 0
    22c4:	81 e0       	ldi	r24, 0x01	; 1
    22c6:	90 e0       	ldi	r25, 0x00	; 0
    22c8:	02 2e       	mov	r0, r18
    22ca:	02 c0       	rjmp	.+4      	; 0x22d0 <DIO_u8SetPinValue+0x1a6>
    22cc:	88 0f       	add	r24, r24
    22ce:	99 1f       	adc	r25, r25
    22d0:	0a 94       	dec	r0
    22d2:	e2 f7       	brpl	.-8      	; 0x22cc <DIO_u8SetPinValue+0x1a2>
    22d4:	84 2b       	or	r24, r20
    22d6:	8c 93       	st	X, r24
    22d8:	30 c0       	rjmp	.+96     	; 0x233a <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin); break;
    22da:	a5 e3       	ldi	r26, 0x35	; 53
    22dc:	b0 e0       	ldi	r27, 0x00	; 0
    22de:	e5 e3       	ldi	r30, 0x35	; 53
    22e0:	f0 e0       	ldi	r31, 0x00	; 0
    22e2:	80 81       	ld	r24, Z
    22e4:	48 2f       	mov	r20, r24
    22e6:	8b 81       	ldd	r24, Y+3	; 0x03
    22e8:	28 2f       	mov	r18, r24
    22ea:	30 e0       	ldi	r19, 0x00	; 0
    22ec:	81 e0       	ldi	r24, 0x01	; 1
    22ee:	90 e0       	ldi	r25, 0x00	; 0
    22f0:	02 2e       	mov	r0, r18
    22f2:	02 c0       	rjmp	.+4      	; 0x22f8 <DIO_u8SetPinValue+0x1ce>
    22f4:	88 0f       	add	r24, r24
    22f6:	99 1f       	adc	r25, r25
    22f8:	0a 94       	dec	r0
    22fa:	e2 f7       	brpl	.-8      	; 0x22f4 <DIO_u8SetPinValue+0x1ca>
    22fc:	84 2b       	or	r24, r20
    22fe:	8c 93       	st	X, r24
    2300:	1c c0       	rjmp	.+56     	; 0x233a <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin); break;
    2302:	a2 e3       	ldi	r26, 0x32	; 50
    2304:	b0 e0       	ldi	r27, 0x00	; 0
    2306:	e2 e3       	ldi	r30, 0x32	; 50
    2308:	f0 e0       	ldi	r31, 0x00	; 0
    230a:	80 81       	ld	r24, Z
    230c:	48 2f       	mov	r20, r24
    230e:	8b 81       	ldd	r24, Y+3	; 0x03
    2310:	28 2f       	mov	r18, r24
    2312:	30 e0       	ldi	r19, 0x00	; 0
    2314:	81 e0       	ldi	r24, 0x01	; 1
    2316:	90 e0       	ldi	r25, 0x00	; 0
    2318:	02 2e       	mov	r0, r18
    231a:	02 c0       	rjmp	.+4      	; 0x2320 <DIO_u8SetPinValue+0x1f6>
    231c:	88 0f       	add	r24, r24
    231e:	99 1f       	adc	r25, r25
    2320:	0a 94       	dec	r0
    2322:	e2 f7       	brpl	.-8      	; 0x231c <DIO_u8SetPinValue+0x1f2>
    2324:	84 2b       	or	r24, r20
    2326:	8c 93       	st	X, r24
    2328:	08 c0       	rjmp	.+16     	; 0x233a <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState =1; break;
    232a:	81 e0       	ldi	r24, 0x01	; 1
    232c:	89 83       	std	Y+1, r24	; 0x01
    232e:	05 c0       	rjmp	.+10     	; 0x233a <DIO_u8SetPinValue+0x210>

			}
		}
		else
		{
			Local_u8ErrorState = 1;
    2330:	81 e0       	ldi	r24, 0x01	; 1
    2332:	89 83       	std	Y+1, r24	; 0x01
    2334:	02 c0       	rjmp	.+4      	; 0x233a <DIO_u8SetPinValue+0x210>
		}

	}
	else
	{
		Local_u8ErrorState = 1;
    2336:	81 e0       	ldi	r24, 0x01	; 1
    2338:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    233a:	89 81       	ldd	r24, Y+1	; 0x01
}
    233c:	28 96       	adiw	r28, 0x08	; 8
    233e:	0f b6       	in	r0, 0x3f	; 63
    2340:	f8 94       	cli
    2342:	de bf       	out	0x3e, r29	; 62
    2344:	0f be       	out	0x3f, r0	; 63
    2346:	cd bf       	out	0x3d, r28	; 61
    2348:	cf 91       	pop	r28
    234a:	df 91       	pop	r29
    234c:	08 95       	ret

0000234e <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8port, u8 Copy_u8Value)
{
    234e:	df 93       	push	r29
    2350:	cf 93       	push	r28
    2352:	00 d0       	rcall	.+0      	; 0x2354 <DIO_u8SetPortValue+0x6>
    2354:	00 d0       	rcall	.+0      	; 0x2356 <DIO_u8SetPortValue+0x8>
    2356:	0f 92       	push	r0
    2358:	cd b7       	in	r28, 0x3d	; 61
    235a:	de b7       	in	r29, 0x3e	; 62
    235c:	8a 83       	std	Y+2, r24	; 0x02
    235e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    2360:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8port<=DIO_u8PORTD)
    2362:	8a 81       	ldd	r24, Y+2	; 0x02
    2364:	84 30       	cpi	r24, 0x04	; 4
    2366:	b0 f5       	brcc	.+108    	; 0x23d4 <DIO_u8SetPortValue+0x86>
	{
		switch(Copy_u8port)
    2368:	8a 81       	ldd	r24, Y+2	; 0x02
    236a:	28 2f       	mov	r18, r24
    236c:	30 e0       	ldi	r19, 0x00	; 0
    236e:	3d 83       	std	Y+5, r19	; 0x05
    2370:	2c 83       	std	Y+4, r18	; 0x04
    2372:	8c 81       	ldd	r24, Y+4	; 0x04
    2374:	9d 81       	ldd	r25, Y+5	; 0x05
    2376:	81 30       	cpi	r24, 0x01	; 1
    2378:	91 05       	cpc	r25, r1
    237a:	d1 f0       	breq	.+52     	; 0x23b0 <DIO_u8SetPortValue+0x62>
    237c:	2c 81       	ldd	r18, Y+4	; 0x04
    237e:	3d 81       	ldd	r19, Y+5	; 0x05
    2380:	22 30       	cpi	r18, 0x02	; 2
    2382:	31 05       	cpc	r19, r1
    2384:	2c f4       	brge	.+10     	; 0x2390 <DIO_u8SetPortValue+0x42>
    2386:	8c 81       	ldd	r24, Y+4	; 0x04
    2388:	9d 81       	ldd	r25, Y+5	; 0x05
    238a:	00 97       	sbiw	r24, 0x00	; 0
    238c:	61 f0       	breq	.+24     	; 0x23a6 <DIO_u8SetPortValue+0x58>
    238e:	1f c0       	rjmp	.+62     	; 0x23ce <DIO_u8SetPortValue+0x80>
    2390:	2c 81       	ldd	r18, Y+4	; 0x04
    2392:	3d 81       	ldd	r19, Y+5	; 0x05
    2394:	22 30       	cpi	r18, 0x02	; 2
    2396:	31 05       	cpc	r19, r1
    2398:	81 f0       	breq	.+32     	; 0x23ba <DIO_u8SetPortValue+0x6c>
    239a:	8c 81       	ldd	r24, Y+4	; 0x04
    239c:	9d 81       	ldd	r25, Y+5	; 0x05
    239e:	83 30       	cpi	r24, 0x03	; 3
    23a0:	91 05       	cpc	r25, r1
    23a2:	81 f0       	breq	.+32     	; 0x23c4 <DIO_u8SetPortValue+0x76>
    23a4:	14 c0       	rjmp	.+40     	; 0x23ce <DIO_u8SetPortValue+0x80>
		{
		case DIO_u8PORTA: PORTA = Copy_u8Value; break;
    23a6:	eb e3       	ldi	r30, 0x3B	; 59
    23a8:	f0 e0       	ldi	r31, 0x00	; 0
    23aa:	8b 81       	ldd	r24, Y+3	; 0x03
    23ac:	80 83       	st	Z, r24
    23ae:	14 c0       	rjmp	.+40     	; 0x23d8 <DIO_u8SetPortValue+0x8a>
		case DIO_u8PORTB: PORTB = Copy_u8Value; break;
    23b0:	e8 e3       	ldi	r30, 0x38	; 56
    23b2:	f0 e0       	ldi	r31, 0x00	; 0
    23b4:	8b 81       	ldd	r24, Y+3	; 0x03
    23b6:	80 83       	st	Z, r24
    23b8:	0f c0       	rjmp	.+30     	; 0x23d8 <DIO_u8SetPortValue+0x8a>
		case DIO_u8PORTC: PORTC = Copy_u8Value; break;
    23ba:	e5 e3       	ldi	r30, 0x35	; 53
    23bc:	f0 e0       	ldi	r31, 0x00	; 0
    23be:	8b 81       	ldd	r24, Y+3	; 0x03
    23c0:	80 83       	st	Z, r24
    23c2:	0a c0       	rjmp	.+20     	; 0x23d8 <DIO_u8SetPortValue+0x8a>
		case DIO_u8PORTD: PORTD = Copy_u8Value; break;
    23c4:	e2 e3       	ldi	r30, 0x32	; 50
    23c6:	f0 e0       	ldi	r31, 0x00	; 0
    23c8:	8b 81       	ldd	r24, Y+3	; 0x03
    23ca:	80 83       	st	Z, r24
    23cc:	05 c0       	rjmp	.+10     	; 0x23d8 <DIO_u8SetPortValue+0x8a>
		default: Local_u8ErrorState =1; break;
    23ce:	81 e0       	ldi	r24, 0x01	; 1
    23d0:	89 83       	std	Y+1, r24	; 0x01
    23d2:	02 c0       	rjmp	.+4      	; 0x23d8 <DIO_u8SetPortValue+0x8a>

		}
	}
	else
	{
		Local_u8ErrorState = 1;
    23d4:	81 e0       	ldi	r24, 0x01	; 1
    23d6:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_u8ErrorState;
    23d8:	89 81       	ldd	r24, Y+1	; 0x01
}
    23da:	0f 90       	pop	r0
    23dc:	0f 90       	pop	r0
    23de:	0f 90       	pop	r0
    23e0:	0f 90       	pop	r0
    23e2:	0f 90       	pop	r0
    23e4:	cf 91       	pop	r28
    23e6:	df 91       	pop	r29
    23e8:	08 95       	ret

000023ea <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8port, u8 Copy_u8Pin, u8* Copy_Pu8Value)
{
    23ea:	df 93       	push	r29
    23ec:	cf 93       	push	r28
    23ee:	cd b7       	in	r28, 0x3d	; 61
    23f0:	de b7       	in	r29, 0x3e	; 62
    23f2:	27 97       	sbiw	r28, 0x07	; 7
    23f4:	0f b6       	in	r0, 0x3f	; 63
    23f6:	f8 94       	cli
    23f8:	de bf       	out	0x3e, r29	; 62
    23fa:	0f be       	out	0x3f, r0	; 63
    23fc:	cd bf       	out	0x3d, r28	; 61
    23fe:	8a 83       	std	Y+2, r24	; 0x02
    2400:	6b 83       	std	Y+3, r22	; 0x03
    2402:	5d 83       	std	Y+5, r21	; 0x05
    2404:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    2406:	19 82       	std	Y+1, r1	; 0x01

	if((Copy_Pu8Value != NULL )&&(Copy_u8Pin<=DIO_u8PIN7))
    2408:	8c 81       	ldd	r24, Y+4	; 0x04
    240a:	9d 81       	ldd	r25, Y+5	; 0x05
    240c:	00 97       	sbiw	r24, 0x00	; 0
    240e:	09 f4       	brne	.+2      	; 0x2412 <DIO_u8GetPinValue+0x28>
    2410:	78 c0       	rjmp	.+240    	; 0x2502 <DIO_u8GetPinValue+0x118>
    2412:	8b 81       	ldd	r24, Y+3	; 0x03
    2414:	88 30       	cpi	r24, 0x08	; 8
    2416:	08 f0       	brcs	.+2      	; 0x241a <DIO_u8GetPinValue+0x30>
    2418:	74 c0       	rjmp	.+232    	; 0x2502 <DIO_u8GetPinValue+0x118>
	{


			switch(Copy_u8port)
    241a:	8a 81       	ldd	r24, Y+2	; 0x02
    241c:	28 2f       	mov	r18, r24
    241e:	30 e0       	ldi	r19, 0x00	; 0
    2420:	3f 83       	std	Y+7, r19	; 0x07
    2422:	2e 83       	std	Y+6, r18	; 0x06
    2424:	4e 81       	ldd	r20, Y+6	; 0x06
    2426:	5f 81       	ldd	r21, Y+7	; 0x07
    2428:	41 30       	cpi	r20, 0x01	; 1
    242a:	51 05       	cpc	r21, r1
    242c:	59 f1       	breq	.+86     	; 0x2484 <DIO_u8GetPinValue+0x9a>
    242e:	8e 81       	ldd	r24, Y+6	; 0x06
    2430:	9f 81       	ldd	r25, Y+7	; 0x07
    2432:	82 30       	cpi	r24, 0x02	; 2
    2434:	91 05       	cpc	r25, r1
    2436:	34 f4       	brge	.+12     	; 0x2444 <DIO_u8GetPinValue+0x5a>
    2438:	2e 81       	ldd	r18, Y+6	; 0x06
    243a:	3f 81       	ldd	r19, Y+7	; 0x07
    243c:	21 15       	cp	r18, r1
    243e:	31 05       	cpc	r19, r1
    2440:	69 f0       	breq	.+26     	; 0x245c <DIO_u8GetPinValue+0x72>
    2442:	5c c0       	rjmp	.+184    	; 0x24fc <DIO_u8GetPinValue+0x112>
    2444:	4e 81       	ldd	r20, Y+6	; 0x06
    2446:	5f 81       	ldd	r21, Y+7	; 0x07
    2448:	42 30       	cpi	r20, 0x02	; 2
    244a:	51 05       	cpc	r21, r1
    244c:	79 f1       	breq	.+94     	; 0x24ac <DIO_u8GetPinValue+0xc2>
    244e:	8e 81       	ldd	r24, Y+6	; 0x06
    2450:	9f 81       	ldd	r25, Y+7	; 0x07
    2452:	83 30       	cpi	r24, 0x03	; 3
    2454:	91 05       	cpc	r25, r1
    2456:	09 f4       	brne	.+2      	; 0x245a <DIO_u8GetPinValue+0x70>
    2458:	3d c0       	rjmp	.+122    	; 0x24d4 <DIO_u8GetPinValue+0xea>
    245a:	50 c0       	rjmp	.+160    	; 0x24fc <DIO_u8GetPinValue+0x112>
			{
			case DIO_u8PORTA: * Copy_Pu8Value = GET_BIT(PINA,Copy_u8Pin); break;
    245c:	e9 e3       	ldi	r30, 0x39	; 57
    245e:	f0 e0       	ldi	r31, 0x00	; 0
    2460:	80 81       	ld	r24, Z
    2462:	28 2f       	mov	r18, r24
    2464:	30 e0       	ldi	r19, 0x00	; 0
    2466:	8b 81       	ldd	r24, Y+3	; 0x03
    2468:	88 2f       	mov	r24, r24
    246a:	90 e0       	ldi	r25, 0x00	; 0
    246c:	a9 01       	movw	r20, r18
    246e:	02 c0       	rjmp	.+4      	; 0x2474 <DIO_u8GetPinValue+0x8a>
    2470:	55 95       	asr	r21
    2472:	47 95       	ror	r20
    2474:	8a 95       	dec	r24
    2476:	e2 f7       	brpl	.-8      	; 0x2470 <DIO_u8GetPinValue+0x86>
    2478:	ca 01       	movw	r24, r20
    247a:	81 70       	andi	r24, 0x01	; 1
    247c:	ec 81       	ldd	r30, Y+4	; 0x04
    247e:	fd 81       	ldd	r31, Y+5	; 0x05
    2480:	80 83       	st	Z, r24
    2482:	41 c0       	rjmp	.+130    	; 0x2506 <DIO_u8GetPinValue+0x11c>
			case DIO_u8PORTB: * Copy_Pu8Value = GET_BIT(PINB,Copy_u8Pin); break;
    2484:	e6 e3       	ldi	r30, 0x36	; 54
    2486:	f0 e0       	ldi	r31, 0x00	; 0
    2488:	80 81       	ld	r24, Z
    248a:	28 2f       	mov	r18, r24
    248c:	30 e0       	ldi	r19, 0x00	; 0
    248e:	8b 81       	ldd	r24, Y+3	; 0x03
    2490:	88 2f       	mov	r24, r24
    2492:	90 e0       	ldi	r25, 0x00	; 0
    2494:	a9 01       	movw	r20, r18
    2496:	02 c0       	rjmp	.+4      	; 0x249c <DIO_u8GetPinValue+0xb2>
    2498:	55 95       	asr	r21
    249a:	47 95       	ror	r20
    249c:	8a 95       	dec	r24
    249e:	e2 f7       	brpl	.-8      	; 0x2498 <DIO_u8GetPinValue+0xae>
    24a0:	ca 01       	movw	r24, r20
    24a2:	81 70       	andi	r24, 0x01	; 1
    24a4:	ec 81       	ldd	r30, Y+4	; 0x04
    24a6:	fd 81       	ldd	r31, Y+5	; 0x05
    24a8:	80 83       	st	Z, r24
    24aa:	2d c0       	rjmp	.+90     	; 0x2506 <DIO_u8GetPinValue+0x11c>
			case DIO_u8PORTC: * Copy_Pu8Value = GET_BIT(PINC,Copy_u8Pin); break;
    24ac:	e3 e3       	ldi	r30, 0x33	; 51
    24ae:	f0 e0       	ldi	r31, 0x00	; 0
    24b0:	80 81       	ld	r24, Z
    24b2:	28 2f       	mov	r18, r24
    24b4:	30 e0       	ldi	r19, 0x00	; 0
    24b6:	8b 81       	ldd	r24, Y+3	; 0x03
    24b8:	88 2f       	mov	r24, r24
    24ba:	90 e0       	ldi	r25, 0x00	; 0
    24bc:	a9 01       	movw	r20, r18
    24be:	02 c0       	rjmp	.+4      	; 0x24c4 <DIO_u8GetPinValue+0xda>
    24c0:	55 95       	asr	r21
    24c2:	47 95       	ror	r20
    24c4:	8a 95       	dec	r24
    24c6:	e2 f7       	brpl	.-8      	; 0x24c0 <DIO_u8GetPinValue+0xd6>
    24c8:	ca 01       	movw	r24, r20
    24ca:	81 70       	andi	r24, 0x01	; 1
    24cc:	ec 81       	ldd	r30, Y+4	; 0x04
    24ce:	fd 81       	ldd	r31, Y+5	; 0x05
    24d0:	80 83       	st	Z, r24
    24d2:	19 c0       	rjmp	.+50     	; 0x2506 <DIO_u8GetPinValue+0x11c>
			case DIO_u8PORTD: * Copy_Pu8Value = GET_BIT(PIND,Copy_u8Pin); break;
    24d4:	e0 e3       	ldi	r30, 0x30	; 48
    24d6:	f0 e0       	ldi	r31, 0x00	; 0
    24d8:	80 81       	ld	r24, Z
    24da:	28 2f       	mov	r18, r24
    24dc:	30 e0       	ldi	r19, 0x00	; 0
    24de:	8b 81       	ldd	r24, Y+3	; 0x03
    24e0:	88 2f       	mov	r24, r24
    24e2:	90 e0       	ldi	r25, 0x00	; 0
    24e4:	a9 01       	movw	r20, r18
    24e6:	02 c0       	rjmp	.+4      	; 0x24ec <DIO_u8GetPinValue+0x102>
    24e8:	55 95       	asr	r21
    24ea:	47 95       	ror	r20
    24ec:	8a 95       	dec	r24
    24ee:	e2 f7       	brpl	.-8      	; 0x24e8 <DIO_u8GetPinValue+0xfe>
    24f0:	ca 01       	movw	r24, r20
    24f2:	81 70       	andi	r24, 0x01	; 1
    24f4:	ec 81       	ldd	r30, Y+4	; 0x04
    24f6:	fd 81       	ldd	r31, Y+5	; 0x05
    24f8:	80 83       	st	Z, r24
    24fa:	05 c0       	rjmp	.+10     	; 0x2506 <DIO_u8GetPinValue+0x11c>
			default: Local_u8ErrorState =1; break;
    24fc:	81 e0       	ldi	r24, 0x01	; 1
    24fe:	89 83       	std	Y+1, r24	; 0x01
    2500:	02 c0       	rjmp	.+4      	; 0x2506 <DIO_u8GetPinValue+0x11c>

			}
	}
	else
	{
		Local_u8ErrorState = 1;
    2502:	81 e0       	ldi	r24, 0x01	; 1
    2504:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    2506:	89 81       	ldd	r24, Y+1	; 0x01
}
    2508:	27 96       	adiw	r28, 0x07	; 7
    250a:	0f b6       	in	r0, 0x3f	; 63
    250c:	f8 94       	cli
    250e:	de bf       	out	0x3e, r29	; 62
    2510:	0f be       	out	0x3f, r0	; 63
    2512:	cd bf       	out	0x3d, r28	; 61
    2514:	cf 91       	pop	r28
    2516:	df 91       	pop	r29
    2518:	08 95       	ret

0000251a <DIO_u8AndWithPort>:

u8 DIO_u8AndWithPort(u8 Copy_u8port, u8 Copy_u8Value)
{
    251a:	df 93       	push	r29
    251c:	cf 93       	push	r28
    251e:	00 d0       	rcall	.+0      	; 0x2520 <DIO_u8AndWithPort+0x6>
    2520:	00 d0       	rcall	.+0      	; 0x2522 <DIO_u8AndWithPort+0x8>
    2522:	0f 92       	push	r0
    2524:	cd b7       	in	r28, 0x3d	; 61
    2526:	de b7       	in	r29, 0x3e	; 62
    2528:	8a 83       	std	Y+2, r24	; 0x02
    252a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Result = 0;
    252c:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8port)
    252e:	8a 81       	ldd	r24, Y+2	; 0x02
    2530:	28 2f       	mov	r18, r24
    2532:	30 e0       	ldi	r19, 0x00	; 0
    2534:	3d 83       	std	Y+5, r19	; 0x05
    2536:	2c 83       	std	Y+4, r18	; 0x04
    2538:	8c 81       	ldd	r24, Y+4	; 0x04
    253a:	9d 81       	ldd	r25, Y+5	; 0x05
    253c:	81 30       	cpi	r24, 0x01	; 1
    253e:	91 05       	cpc	r25, r1
    2540:	e1 f0       	breq	.+56     	; 0x257a <DIO_u8AndWithPort+0x60>
    2542:	2c 81       	ldd	r18, Y+4	; 0x04
    2544:	3d 81       	ldd	r19, Y+5	; 0x05
    2546:	22 30       	cpi	r18, 0x02	; 2
    2548:	31 05       	cpc	r19, r1
    254a:	2c f4       	brge	.+10     	; 0x2556 <DIO_u8AndWithPort+0x3c>
    254c:	8c 81       	ldd	r24, Y+4	; 0x04
    254e:	9d 81       	ldd	r25, Y+5	; 0x05
    2550:	00 97       	sbiw	r24, 0x00	; 0
    2552:	61 f0       	breq	.+24     	; 0x256c <DIO_u8AndWithPort+0x52>
    2554:	26 c0       	rjmp	.+76     	; 0x25a2 <DIO_u8AndWithPort+0x88>
    2556:	2c 81       	ldd	r18, Y+4	; 0x04
    2558:	3d 81       	ldd	r19, Y+5	; 0x05
    255a:	22 30       	cpi	r18, 0x02	; 2
    255c:	31 05       	cpc	r19, r1
    255e:	a1 f0       	breq	.+40     	; 0x2588 <DIO_u8AndWithPort+0x6e>
    2560:	8c 81       	ldd	r24, Y+4	; 0x04
    2562:	9d 81       	ldd	r25, Y+5	; 0x05
    2564:	83 30       	cpi	r24, 0x03	; 3
    2566:	91 05       	cpc	r25, r1
    2568:	b1 f0       	breq	.+44     	; 0x2596 <DIO_u8AndWithPort+0x7c>
    256a:	1b c0       	rjmp	.+54     	; 0x25a2 <DIO_u8AndWithPort+0x88>
			{
			case DIO_u8PORTA: Local_u8Result= PORTA & Copy_u8Value; break;
    256c:	eb e3       	ldi	r30, 0x3B	; 59
    256e:	f0 e0       	ldi	r31, 0x00	; 0
    2570:	90 81       	ld	r25, Z
    2572:	8b 81       	ldd	r24, Y+3	; 0x03
    2574:	89 23       	and	r24, r25
    2576:	89 83       	std	Y+1, r24	; 0x01
    2578:	14 c0       	rjmp	.+40     	; 0x25a2 <DIO_u8AndWithPort+0x88>
			case DIO_u8PORTB: Local_u8Result= PORTB & Copy_u8Value; break;
    257a:	e8 e3       	ldi	r30, 0x38	; 56
    257c:	f0 e0       	ldi	r31, 0x00	; 0
    257e:	90 81       	ld	r25, Z
    2580:	8b 81       	ldd	r24, Y+3	; 0x03
    2582:	89 23       	and	r24, r25
    2584:	89 83       	std	Y+1, r24	; 0x01
    2586:	0d c0       	rjmp	.+26     	; 0x25a2 <DIO_u8AndWithPort+0x88>
			case DIO_u8PORTC: Local_u8Result= PORTC & Copy_u8Value; break;
    2588:	e5 e3       	ldi	r30, 0x35	; 53
    258a:	f0 e0       	ldi	r31, 0x00	; 0
    258c:	90 81       	ld	r25, Z
    258e:	8b 81       	ldd	r24, Y+3	; 0x03
    2590:	89 23       	and	r24, r25
    2592:	89 83       	std	Y+1, r24	; 0x01
    2594:	06 c0       	rjmp	.+12     	; 0x25a2 <DIO_u8AndWithPort+0x88>
			case DIO_u8PORTD: Local_u8Result = PORTD & Copy_u8Value; break;
    2596:	e2 e3       	ldi	r30, 0x32	; 50
    2598:	f0 e0       	ldi	r31, 0x00	; 0
    259a:	90 81       	ld	r25, Z
    259c:	8b 81       	ldd	r24, Y+3	; 0x03
    259e:	89 23       	and	r24, r25
    25a0:	89 83       	std	Y+1, r24	; 0x01
			default:  break;


			}
	return Local_u8Result;
    25a2:	89 81       	ldd	r24, Y+1	; 0x01
}
    25a4:	0f 90       	pop	r0
    25a6:	0f 90       	pop	r0
    25a8:	0f 90       	pop	r0
    25aa:	0f 90       	pop	r0
    25ac:	0f 90       	pop	r0
    25ae:	cf 91       	pop	r28
    25b0:	df 91       	pop	r29
    25b2:	08 95       	ret

000025b4 <GIE_VoidEnable>:

#include "GIE_interface.h"
#include "GIE_register.h"

void GIE_VoidEnable(void)
{
    25b4:	df 93       	push	r29
    25b6:	cf 93       	push	r28
    25b8:	cd b7       	in	r28, 0x3d	; 61
    25ba:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
    25bc:	af e5       	ldi	r26, 0x5F	; 95
    25be:	b0 e0       	ldi	r27, 0x00	; 0
    25c0:	ef e5       	ldi	r30, 0x5F	; 95
    25c2:	f0 e0       	ldi	r31, 0x00	; 0
    25c4:	80 81       	ld	r24, Z
    25c6:	80 68       	ori	r24, 0x80	; 128
    25c8:	8c 93       	st	X, r24
}
    25ca:	cf 91       	pop	r28
    25cc:	df 91       	pop	r29
    25ce:	08 95       	ret

000025d0 <GIE_VoidDisable>:
void GIE_VoidDisable(void)
{
    25d0:	df 93       	push	r29
    25d2:	cf 93       	push	r28
    25d4:	cd b7       	in	r28, 0x3d	; 61
    25d6:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,SREG_I);
    25d8:	af e5       	ldi	r26, 0x5F	; 95
    25da:	b0 e0       	ldi	r27, 0x00	; 0
    25dc:	ef e5       	ldi	r30, 0x5F	; 95
    25de:	f0 e0       	ldi	r31, 0x00	; 0
    25e0:	80 81       	ld	r24, Z
    25e2:	8f 77       	andi	r24, 0x7F	; 127
    25e4:	8c 93       	st	X, r24
}
    25e6:	cf 91       	pop	r28
    25e8:	df 91       	pop	r29
    25ea:	08 95       	ret

000025ec <KPD_u8GetPressedKey>:
#include "KPD_private.h"



u8 KPD_u8GetPressedKey(void)
{
    25ec:	df 93       	push	r29
    25ee:	cf 93       	push	r28
    25f0:	00 d0       	rcall	.+0      	; 0x25f2 <KPD_u8GetPressedKey+0x6>
    25f2:	00 d0       	rcall	.+0      	; 0x25f4 <KPD_u8GetPressedKey+0x8>
    25f4:	0f 92       	push	r0
    25f6:	cd b7       	in	r28, 0x3d	; 61
    25f8:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8PressedKey = KPD_NO_PRESSED_KEY;
    25fa:	8f ef       	ldi	r24, 0xFF	; 255
    25fc:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8PinState;
	static u8 Local_u8KPDColArr[COLUMN_NUM]= {KPD_COL_0_PIN,KPD_COL_1_PIN,KPD_COL_2_PIN,KPD_COL_3_PIN };
	static u8 Local_u8KPDRowArr[ROW_NUM]= {KPD_ROW_0_PIN,KPD_ROW_1_PIN,KPD_ROW_2_PIN,KPD_ROW_3_PIN };
	static u8 Local_u8KPDArr[ROW_NUM][COLUMN_NUM]=KPD_ARR_VAL;

	for (Local_u8ColCounter=0;Local_u8ColCounter<COLUMN_NUM;Local_u8ColCounter++)
    25fe:	19 82       	std	Y+1, r1	; 0x01
    2600:	5e c0       	rjmp	.+188    	; 0x26be <KPD_u8GetPressedKey+0xd2>
	{
		/* Activate current Cloumn*/
		DIO_u8SetPinValue(KPD_COL_PORT,Local_u8KPDColArr[Local_u8ColCounter],DIO_u8PIN_LOW);
    2602:	89 81       	ldd	r24, Y+1	; 0x01
    2604:	88 2f       	mov	r24, r24
    2606:	90 e0       	ldi	r25, 0x00	; 0
    2608:	fc 01       	movw	r30, r24
    260a:	e4 58       	subi	r30, 0x84	; 132
    260c:	fe 4f       	sbci	r31, 0xFE	; 254
    260e:	90 81       	ld	r25, Z
    2610:	81 e0       	ldi	r24, 0x01	; 1
    2612:	69 2f       	mov	r22, r25
    2614:	40 e0       	ldi	r20, 0x00	; 0
    2616:	0e 94 95 10 	call	0x212a	; 0x212a <DIO_u8SetPinValue>

		for(Local_u8RowCounter=0;Local_u8RowCounter<ROW_NUM;Local_u8RowCounter++)
    261a:	1a 82       	std	Y+2, r1	; 0x02
    261c:	3d c0       	rjmp	.+122    	; 0x2698 <KPD_u8GetPressedKey+0xac>
		{
			/* Read the current row */
			DIO_u8GetPinValue(KPD_ROW_PORT,Local_u8KPDRowArr[Local_u8RowCounter],&Local_u8PinState);
    261e:	8a 81       	ldd	r24, Y+2	; 0x02
    2620:	88 2f       	mov	r24, r24
    2622:	90 e0       	ldi	r25, 0x00	; 0
    2624:	fc 01       	movw	r30, r24
    2626:	e8 58       	subi	r30, 0x88	; 136
    2628:	fe 4f       	sbci	r31, 0xFE	; 254
    262a:	90 81       	ld	r25, Z
    262c:	9e 01       	movw	r18, r28
    262e:	2c 5f       	subi	r18, 0xFC	; 252
    2630:	3f 4f       	sbci	r19, 0xFF	; 255
    2632:	81 e0       	ldi	r24, 0x01	; 1
    2634:	69 2f       	mov	r22, r25
    2636:	a9 01       	movw	r20, r18
    2638:	0e 94 f5 11 	call	0x23ea	; 0x23ea <DIO_u8GetPinValue>
			/* Check if switch is pressed */

			if(DIO_u8PIN_LOW == Local_u8PinState )
    263c:	8c 81       	ldd	r24, Y+4	; 0x04
    263e:	88 23       	and	r24, r24
    2640:	41 f5       	brne	.+80     	; 0x2692 <KPD_u8GetPressedKey+0xa6>
			{

				Local_u8PressedKey = Local_u8KPDArr[Local_u8RowCounter][Local_u8ColCounter];
    2642:	8a 81       	ldd	r24, Y+2	; 0x02
    2644:	48 2f       	mov	r20, r24
    2646:	50 e0       	ldi	r21, 0x00	; 0
    2648:	89 81       	ldd	r24, Y+1	; 0x01
    264a:	28 2f       	mov	r18, r24
    264c:	30 e0       	ldi	r19, 0x00	; 0
    264e:	ca 01       	movw	r24, r20
    2650:	88 0f       	add	r24, r24
    2652:	99 1f       	adc	r25, r25
    2654:	88 0f       	add	r24, r24
    2656:	99 1f       	adc	r25, r25
    2658:	82 0f       	add	r24, r18
    265a:	93 1f       	adc	r25, r19
    265c:	fc 01       	movw	r30, r24
    265e:	e8 59       	subi	r30, 0x98	; 152
    2660:	fe 4f       	sbci	r31, 0xFE	; 254
    2662:	80 81       	ld	r24, Z
    2664:	8b 83       	std	Y+3, r24	; 0x03
    2666:	0f c0       	rjmp	.+30     	; 0x2686 <KPD_u8GetPressedKey+0x9a>
				/* Polling (busy waiting ) until the key is released */
				while (DIO_u8PIN_LOW == Local_u8PinState)
				{
					DIO_u8GetPinValue(KPD_ROW_PORT,Local_u8KPDRowArr[Local_u8RowCounter],&Local_u8PinState);
    2668:	8a 81       	ldd	r24, Y+2	; 0x02
    266a:	88 2f       	mov	r24, r24
    266c:	90 e0       	ldi	r25, 0x00	; 0
    266e:	fc 01       	movw	r30, r24
    2670:	e8 58       	subi	r30, 0x88	; 136
    2672:	fe 4f       	sbci	r31, 0xFE	; 254
    2674:	90 81       	ld	r25, Z
    2676:	9e 01       	movw	r18, r28
    2678:	2c 5f       	subi	r18, 0xFC	; 252
    267a:	3f 4f       	sbci	r19, 0xFF	; 255
    267c:	81 e0       	ldi	r24, 0x01	; 1
    267e:	69 2f       	mov	r22, r25
    2680:	a9 01       	movw	r20, r18
    2682:	0e 94 f5 11 	call	0x23ea	; 0x23ea <DIO_u8GetPinValue>
			if(DIO_u8PIN_LOW == Local_u8PinState )
			{

				Local_u8PressedKey = Local_u8KPDArr[Local_u8RowCounter][Local_u8ColCounter];
				/* Polling (busy waiting ) until the key is released */
				while (DIO_u8PIN_LOW == Local_u8PinState)
    2686:	8c 81       	ldd	r24, Y+4	; 0x04
    2688:	88 23       	and	r24, r24
    268a:	71 f3       	breq	.-36     	; 0x2668 <KPD_u8GetPressedKey+0x7c>
				{
					DIO_u8GetPinValue(KPD_ROW_PORT,Local_u8KPDRowArr[Local_u8RowCounter],&Local_u8PinState);

				}
				return Local_u8PressedKey;
    268c:	8b 81       	ldd	r24, Y+3	; 0x03
    268e:	8d 83       	std	Y+5, r24	; 0x05
    2690:	1c c0       	rjmp	.+56     	; 0x26ca <KPD_u8GetPressedKey+0xde>
	for (Local_u8ColCounter=0;Local_u8ColCounter<COLUMN_NUM;Local_u8ColCounter++)
	{
		/* Activate current Cloumn*/
		DIO_u8SetPinValue(KPD_COL_PORT,Local_u8KPDColArr[Local_u8ColCounter],DIO_u8PIN_LOW);

		for(Local_u8RowCounter=0;Local_u8RowCounter<ROW_NUM;Local_u8RowCounter++)
    2692:	8a 81       	ldd	r24, Y+2	; 0x02
    2694:	8f 5f       	subi	r24, 0xFF	; 255
    2696:	8a 83       	std	Y+2, r24	; 0x02
    2698:	8a 81       	ldd	r24, Y+2	; 0x02
    269a:	84 30       	cpi	r24, 0x04	; 4
    269c:	08 f4       	brcc	.+2      	; 0x26a0 <KPD_u8GetPressedKey+0xb4>
    269e:	bf cf       	rjmp	.-130    	; 0x261e <KPD_u8GetPressedKey+0x32>

		}

		/* Deactivate the current column */

		DIO_u8SetPinValue(KPD_COL_PORT,Local_u8KPDColArr[Local_u8ColCounter],DIO_u8PIN_HIGH);
    26a0:	89 81       	ldd	r24, Y+1	; 0x01
    26a2:	88 2f       	mov	r24, r24
    26a4:	90 e0       	ldi	r25, 0x00	; 0
    26a6:	fc 01       	movw	r30, r24
    26a8:	e4 58       	subi	r30, 0x84	; 132
    26aa:	fe 4f       	sbci	r31, 0xFE	; 254
    26ac:	90 81       	ld	r25, Z
    26ae:	81 e0       	ldi	r24, 0x01	; 1
    26b0:	69 2f       	mov	r22, r25
    26b2:	41 e0       	ldi	r20, 0x01	; 1
    26b4:	0e 94 95 10 	call	0x212a	; 0x212a <DIO_u8SetPinValue>
	u8 Local_u8PinState;
	static u8 Local_u8KPDColArr[COLUMN_NUM]= {KPD_COL_0_PIN,KPD_COL_1_PIN,KPD_COL_2_PIN,KPD_COL_3_PIN };
	static u8 Local_u8KPDRowArr[ROW_NUM]= {KPD_ROW_0_PIN,KPD_ROW_1_PIN,KPD_ROW_2_PIN,KPD_ROW_3_PIN };
	static u8 Local_u8KPDArr[ROW_NUM][COLUMN_NUM]=KPD_ARR_VAL;

	for (Local_u8ColCounter=0;Local_u8ColCounter<COLUMN_NUM;Local_u8ColCounter++)
    26b8:	89 81       	ldd	r24, Y+1	; 0x01
    26ba:	8f 5f       	subi	r24, 0xFF	; 255
    26bc:	89 83       	std	Y+1, r24	; 0x01
    26be:	89 81       	ldd	r24, Y+1	; 0x01
    26c0:	84 30       	cpi	r24, 0x04	; 4
    26c2:	08 f4       	brcc	.+2      	; 0x26c6 <KPD_u8GetPressedKey+0xda>
    26c4:	9e cf       	rjmp	.-196    	; 0x2602 <KPD_u8GetPressedKey+0x16>

		DIO_u8SetPinValue(KPD_COL_PORT,Local_u8KPDColArr[Local_u8ColCounter],DIO_u8PIN_HIGH);

	}

	return Local_u8PressedKey;
    26c6:	8b 81       	ldd	r24, Y+3	; 0x03
    26c8:	8d 83       	std	Y+5, r24	; 0x05
    26ca:	8d 81       	ldd	r24, Y+5	; 0x05





}
    26cc:	0f 90       	pop	r0
    26ce:	0f 90       	pop	r0
    26d0:	0f 90       	pop	r0
    26d2:	0f 90       	pop	r0
    26d4:	0f 90       	pop	r0
    26d6:	cf 91       	pop	r28
    26d8:	df 91       	pop	r29
    26da:	08 95       	ret

000026dc <PORT_VoidInit>:
#include "PORT_interface.h"
#include "PORT_register.h"


void PORT_VoidInit(void)
{
    26dc:	df 93       	push	r29
    26de:	cf 93       	push	r28
    26e0:	cd b7       	in	r28, 0x3d	; 61
    26e2:	de b7       	in	r29, 0x3e	; 62
	DDRA = PORTA_DIR;
    26e4:	ea e3       	ldi	r30, 0x3A	; 58
    26e6:	f0 e0       	ldi	r31, 0x00	; 0
    26e8:	80 ef       	ldi	r24, 0xF0	; 240
    26ea:	80 83       	st	Z, r24
	DDRB = PORTB_DIR;
    26ec:	e7 e3       	ldi	r30, 0x37	; 55
    26ee:	f0 e0       	ldi	r31, 0x00	; 0
    26f0:	80 ef       	ldi	r24, 0xF0	; 240
    26f2:	80 83       	st	Z, r24
	DDRC = PORTC_DIR;
    26f4:	e4 e3       	ldi	r30, 0x34	; 52
    26f6:	f0 e0       	ldi	r31, 0x00	; 0
    26f8:	8f ef       	ldi	r24, 0xFF	; 255
    26fa:	80 83       	st	Z, r24
	DDRD = PORTD_DIR;
    26fc:	e1 e3       	ldi	r30, 0x31	; 49
    26fe:	f0 e0       	ldi	r31, 0x00	; 0
    2700:	8f ef       	ldi	r24, 0xFF	; 255
    2702:	80 83       	st	Z, r24
	
	PORTA = PORTA_INITIAL_VALUE;
    2704:	eb e3       	ldi	r30, 0x3B	; 59
    2706:	f0 e0       	ldi	r31, 0x00	; 0
    2708:	10 82       	st	Z, r1
	PORTB = PORTB_INITIAL_VALUE;
    270a:	e8 e3       	ldi	r30, 0x38	; 56
    270c:	f0 e0       	ldi	r31, 0x00	; 0
    270e:	8f e0       	ldi	r24, 0x0F	; 15
    2710:	80 83       	st	Z, r24
	PORTC = PORTC_INITIAL_VALUE;
    2712:	e5 e3       	ldi	r30, 0x35	; 53
    2714:	f0 e0       	ldi	r31, 0x00	; 0
    2716:	10 82       	st	Z, r1
	PORTD = PORTD_INITIAL_VALUE;
    2718:	e2 e3       	ldi	r30, 0x32	; 50
    271a:	f0 e0       	ldi	r31, 0x00	; 0
    271c:	10 82       	st	Z, r1


}
    271e:	cf 91       	pop	r28
    2720:	df 91       	pop	r29
    2722:	08 95       	ret

00002724 <SSD_u8SingleNumDisplayBlink>:


u8 seven_seg[10]={ZERO,ONE,TWO,THREE,FOUR,FIVE,SIX,SEVEN,EIGHT,NINE};

u8 SSD_u8SingleNumDisplayBlink(u8 number)
{
    2724:	df 93       	push	r29
    2726:	cf 93       	push	r28
    2728:	00 d0       	rcall	.+0      	; 0x272a <SSD_u8SingleNumDisplayBlink+0x6>
    272a:	00 d0       	rcall	.+0      	; 0x272c <SSD_u8SingleNumDisplayBlink+0x8>
    272c:	cd b7       	in	r28, 0x3d	; 61
    272e:	de b7       	in	r29, 0x3e	; 62
    2730:	8c 83       	std	Y+4, r24	; 0x04
	u8 Local_u8ErrorState = 0;
    2732:	1b 82       	std	Y+3, r1	; 0x03
	u8 Local_u8Counter;
	u8 Local_u8PortMask;

	for(Local_u8Counter=0;Local_u8Counter<100;Local_u8Counter++)
    2734:	1a 82       	std	Y+2, r1	; 0x02
    2736:	28 c0       	rjmp	.+80     	; 0x2788 <SSD_u8SingleNumDisplayBlink+0x64>
	{
		DIO_u8SetPinValue(SSD_EN_PORT,SSD_1_EN_PIN,DIO_u8PIN_HIGH);
    2738:	82 e0       	ldi	r24, 0x02	; 2
    273a:	60 e0       	ldi	r22, 0x00	; 0
    273c:	41 e0       	ldi	r20, 0x01	; 1
    273e:	0e 94 95 10 	call	0x212a	; 0x212a <DIO_u8SetPinValue>
		Local_u8PortMask = DIO_u8AndWithPort(SSD_DATA_PORT,SSD_DATA_MASK);
    2742:	83 e0       	ldi	r24, 0x03	; 3
    2744:	61 e0       	ldi	r22, 0x01	; 1
    2746:	0e 94 8d 12 	call	0x251a	; 0x251a <DIO_u8AndWithPort>
    274a:	89 83       	std	Y+1, r24	; 0x01

		seven_seg[number]|=Local_u8PortMask;
    274c:	8c 81       	ldd	r24, Y+4	; 0x04
    274e:	28 2f       	mov	r18, r24
    2750:	30 e0       	ldi	r19, 0x00	; 0
    2752:	8c 81       	ldd	r24, Y+4	; 0x04
    2754:	88 2f       	mov	r24, r24
    2756:	90 e0       	ldi	r25, 0x00	; 0
    2758:	fc 01       	movw	r30, r24
    275a:	e0 58       	subi	r30, 0x80	; 128
    275c:	fe 4f       	sbci	r31, 0xFE	; 254
    275e:	90 81       	ld	r25, Z
    2760:	89 81       	ldd	r24, Y+1	; 0x01
    2762:	89 2b       	or	r24, r25
    2764:	f9 01       	movw	r30, r18
    2766:	e0 58       	subi	r30, 0x80	; 128
    2768:	fe 4f       	sbci	r31, 0xFE	; 254
    276a:	80 83       	st	Z, r24
		DIO_u8SetPortValue(SSD_DATA_PORT,seven_seg[number]);
    276c:	8c 81       	ldd	r24, Y+4	; 0x04
    276e:	88 2f       	mov	r24, r24
    2770:	90 e0       	ldi	r25, 0x00	; 0
    2772:	fc 01       	movw	r30, r24
    2774:	e0 58       	subi	r30, 0x80	; 128
    2776:	fe 4f       	sbci	r31, 0xFE	; 254
    2778:	90 81       	ld	r25, Z
    277a:	83 e0       	ldi	r24, 0x03	; 3
    277c:	69 2f       	mov	r22, r25
    277e:	0e 94 a7 11 	call	0x234e	; 0x234e <DIO_u8SetPortValue>
{
	u8 Local_u8ErrorState = 0;
	u8 Local_u8Counter;
	u8 Local_u8PortMask;

	for(Local_u8Counter=0;Local_u8Counter<100;Local_u8Counter++)
    2782:	8a 81       	ldd	r24, Y+2	; 0x02
    2784:	8f 5f       	subi	r24, 0xFF	; 255
    2786:	8a 83       	std	Y+2, r24	; 0x02
    2788:	8a 81       	ldd	r24, Y+2	; 0x02
    278a:	84 36       	cpi	r24, 0x64	; 100
    278c:	a8 f2       	brcs	.-86     	; 0x2738 <SSD_u8SingleNumDisplayBlink+0x14>
		seven_seg[number]|=Local_u8PortMask;
		DIO_u8SetPortValue(SSD_DATA_PORT,seven_seg[number]);
//		_delay_ms(5);
//		DIO_u8SetPinValue(SSD_EN_PORT,SSD_1_EN_PIN,DIO_u8PIN_LOW);
	}
	return Local_u8ErrorState;
    278e:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2790:	0f 90       	pop	r0
    2792:	0f 90       	pop	r0
    2794:	0f 90       	pop	r0
    2796:	0f 90       	pop	r0
    2798:	cf 91       	pop	r28
    279a:	df 91       	pop	r29
    279c:	08 95       	ret

0000279e <SSD_u8DisplayBlink>:

u8 SSD_u8DisplayBlink(u8 number)
{
    279e:	df 93       	push	r29
    27a0:	cf 93       	push	r28
    27a2:	cd b7       	in	r28, 0x3d	; 61
    27a4:	de b7       	in	r29, 0x3e	; 62
    27a6:	a2 97       	sbiw	r28, 0x22	; 34
    27a8:	0f b6       	in	r0, 0x3f	; 63
    27aa:	f8 94       	cli
    27ac:	de bf       	out	0x3e, r29	; 62
    27ae:	0f be       	out	0x3f, r0	; 63
    27b0:	cd bf       	out	0x3d, r28	; 61
    27b2:	8a a3       	std	Y+34, r24	; 0x22
	u8 Local_u8ErrorState = 0;
    27b4:	19 a2       	std	Y+33, r1	; 0x21
	u8 Local_u8PortMask;

	u8 Local_u8Counter;
	u8 ones = number%10;
    27b6:	8a a1       	ldd	r24, Y+34	; 0x22
    27b8:	9a e0       	ldi	r25, 0x0A	; 10
    27ba:	69 2f       	mov	r22, r25
    27bc:	0e 94 ae 18 	call	0x315c	; 0x315c <__udivmodqi4>
    27c0:	89 2f       	mov	r24, r25
    27c2:	8e 8f       	std	Y+30, r24	; 0x1e
	u8 tens = number/10;
    27c4:	8a a1       	ldd	r24, Y+34	; 0x22
    27c6:	9a e0       	ldi	r25, 0x0A	; 10
    27c8:	69 2f       	mov	r22, r25
    27ca:	0e 94 ae 18 	call	0x315c	; 0x315c <__udivmodqi4>
    27ce:	8d 8f       	std	Y+29, r24	; 0x1d

	Local_u8PortMask = DIO_u8AndWithPort(SSD_DATA_PORT,SSD_DATA_MASK);
    27d0:	83 e0       	ldi	r24, 0x03	; 3
    27d2:	61 e0       	ldi	r22, 0x01	; 1
    27d4:	0e 94 8d 12 	call	0x251a	; 0x251a <DIO_u8AndWithPort>
    27d8:	88 a3       	std	Y+32, r24	; 0x20
	seven_seg[ones]|=Local_u8PortMask;
    27da:	8e 8d       	ldd	r24, Y+30	; 0x1e
    27dc:	28 2f       	mov	r18, r24
    27de:	30 e0       	ldi	r19, 0x00	; 0
    27e0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    27e2:	88 2f       	mov	r24, r24
    27e4:	90 e0       	ldi	r25, 0x00	; 0
    27e6:	fc 01       	movw	r30, r24
    27e8:	e0 58       	subi	r30, 0x80	; 128
    27ea:	fe 4f       	sbci	r31, 0xFE	; 254
    27ec:	90 81       	ld	r25, Z
    27ee:	88 a1       	ldd	r24, Y+32	; 0x20
    27f0:	89 2b       	or	r24, r25
    27f2:	f9 01       	movw	r30, r18
    27f4:	e0 58       	subi	r30, 0x80	; 128
    27f6:	fe 4f       	sbci	r31, 0xFE	; 254
    27f8:	80 83       	st	Z, r24

	Local_u8PortMask = DIO_u8AndWithPort(SSD_DATA_PORT,SSD_DATA_MASK);
    27fa:	83 e0       	ldi	r24, 0x03	; 3
    27fc:	61 e0       	ldi	r22, 0x01	; 1
    27fe:	0e 94 8d 12 	call	0x251a	; 0x251a <DIO_u8AndWithPort>
    2802:	88 a3       	std	Y+32, r24	; 0x20
	seven_seg[tens]|=Local_u8PortMask;
    2804:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2806:	28 2f       	mov	r18, r24
    2808:	30 e0       	ldi	r19, 0x00	; 0
    280a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    280c:	88 2f       	mov	r24, r24
    280e:	90 e0       	ldi	r25, 0x00	; 0
    2810:	fc 01       	movw	r30, r24
    2812:	e0 58       	subi	r30, 0x80	; 128
    2814:	fe 4f       	sbci	r31, 0xFE	; 254
    2816:	90 81       	ld	r25, Z
    2818:	88 a1       	ldd	r24, Y+32	; 0x20
    281a:	89 2b       	or	r24, r25
    281c:	f9 01       	movw	r30, r18
    281e:	e0 58       	subi	r30, 0x80	; 128
    2820:	fe 4f       	sbci	r31, 0xFE	; 254
    2822:	80 83       	st	Z, r24

	for(Local_u8Counter=0;Local_u8Counter<100;Local_u8Counter++)
    2824:	1f 8e       	std	Y+31, r1	; 0x1f
    2826:	1b c1       	rjmp	.+566    	; 0x2a5e <SSD_u8DisplayBlink+0x2c0>
	{
		DIO_u8SetPinValue(SSD_EN_PORT,SSD_1_EN_PIN,DIO_u8PIN_HIGH);
    2828:	82 e0       	ldi	r24, 0x02	; 2
    282a:	60 e0       	ldi	r22, 0x00	; 0
    282c:	41 e0       	ldi	r20, 0x01	; 1
    282e:	0e 94 95 10 	call	0x212a	; 0x212a <DIO_u8SetPinValue>
		DIO_u8SetPinValue(SSD_EN_PORT,SSD_2_EN_PIN,DIO_u8PIN_LOW);
    2832:	82 e0       	ldi	r24, 0x02	; 2
    2834:	61 e0       	ldi	r22, 0x01	; 1
    2836:	40 e0       	ldi	r20, 0x00	; 0
    2838:	0e 94 95 10 	call	0x212a	; 0x212a <DIO_u8SetPinValue>
		DIO_u8SetPortValue(SSD_DATA_PORT,seven_seg[ones]);
    283c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    283e:	88 2f       	mov	r24, r24
    2840:	90 e0       	ldi	r25, 0x00	; 0
    2842:	fc 01       	movw	r30, r24
    2844:	e0 58       	subi	r30, 0x80	; 128
    2846:	fe 4f       	sbci	r31, 0xFE	; 254
    2848:	90 81       	ld	r25, Z
    284a:	83 e0       	ldi	r24, 0x03	; 3
    284c:	69 2f       	mov	r22, r25
    284e:	0e 94 a7 11 	call	0x234e	; 0x234e <DIO_u8SetPortValue>
    2852:	80 e0       	ldi	r24, 0x00	; 0
    2854:	90 e0       	ldi	r25, 0x00	; 0
    2856:	a0 ea       	ldi	r26, 0xA0	; 160
    2858:	b1 e4       	ldi	r27, 0x41	; 65
    285a:	89 8f       	std	Y+25, r24	; 0x19
    285c:	9a 8f       	std	Y+26, r25	; 0x1a
    285e:	ab 8f       	std	Y+27, r26	; 0x1b
    2860:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2862:	69 8d       	ldd	r22, Y+25	; 0x19
    2864:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2866:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2868:	9c 8d       	ldd	r25, Y+28	; 0x1c
    286a:	20 e0       	ldi	r18, 0x00	; 0
    286c:	30 e0       	ldi	r19, 0x00	; 0
    286e:	4a ef       	ldi	r20, 0xFA	; 250
    2870:	54 e4       	ldi	r21, 0x44	; 68
    2872:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2876:	dc 01       	movw	r26, r24
    2878:	cb 01       	movw	r24, r22
    287a:	8d 8b       	std	Y+21, r24	; 0x15
    287c:	9e 8b       	std	Y+22, r25	; 0x16
    287e:	af 8b       	std	Y+23, r26	; 0x17
    2880:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2882:	6d 89       	ldd	r22, Y+21	; 0x15
    2884:	7e 89       	ldd	r23, Y+22	; 0x16
    2886:	8f 89       	ldd	r24, Y+23	; 0x17
    2888:	98 8d       	ldd	r25, Y+24	; 0x18
    288a:	20 e0       	ldi	r18, 0x00	; 0
    288c:	30 e0       	ldi	r19, 0x00	; 0
    288e:	40 e8       	ldi	r20, 0x80	; 128
    2890:	5f e3       	ldi	r21, 0x3F	; 63
    2892:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2896:	88 23       	and	r24, r24
    2898:	2c f4       	brge	.+10     	; 0x28a4 <SSD_u8DisplayBlink+0x106>
		__ticks = 1;
    289a:	81 e0       	ldi	r24, 0x01	; 1
    289c:	90 e0       	ldi	r25, 0x00	; 0
    289e:	9c 8b       	std	Y+20, r25	; 0x14
    28a0:	8b 8b       	std	Y+19, r24	; 0x13
    28a2:	3f c0       	rjmp	.+126    	; 0x2922 <SSD_u8DisplayBlink+0x184>
	else if (__tmp > 65535)
    28a4:	6d 89       	ldd	r22, Y+21	; 0x15
    28a6:	7e 89       	ldd	r23, Y+22	; 0x16
    28a8:	8f 89       	ldd	r24, Y+23	; 0x17
    28aa:	98 8d       	ldd	r25, Y+24	; 0x18
    28ac:	20 e0       	ldi	r18, 0x00	; 0
    28ae:	3f ef       	ldi	r19, 0xFF	; 255
    28b0:	4f e7       	ldi	r20, 0x7F	; 127
    28b2:	57 e4       	ldi	r21, 0x47	; 71
    28b4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    28b8:	18 16       	cp	r1, r24
    28ba:	4c f5       	brge	.+82     	; 0x290e <SSD_u8DisplayBlink+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28bc:	69 8d       	ldd	r22, Y+25	; 0x19
    28be:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28c0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28c2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28c4:	20 e0       	ldi	r18, 0x00	; 0
    28c6:	30 e0       	ldi	r19, 0x00	; 0
    28c8:	40 e2       	ldi	r20, 0x20	; 32
    28ca:	51 e4       	ldi	r21, 0x41	; 65
    28cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28d0:	dc 01       	movw	r26, r24
    28d2:	cb 01       	movw	r24, r22
    28d4:	bc 01       	movw	r22, r24
    28d6:	cd 01       	movw	r24, r26
    28d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28dc:	dc 01       	movw	r26, r24
    28de:	cb 01       	movw	r24, r22
    28e0:	9c 8b       	std	Y+20, r25	; 0x14
    28e2:	8b 8b       	std	Y+19, r24	; 0x13
    28e4:	0f c0       	rjmp	.+30     	; 0x2904 <SSD_u8DisplayBlink+0x166>
    28e6:	88 ec       	ldi	r24, 0xC8	; 200
    28e8:	90 e0       	ldi	r25, 0x00	; 0
    28ea:	9a 8b       	std	Y+18, r25	; 0x12
    28ec:	89 8b       	std	Y+17, r24	; 0x11
    28ee:	89 89       	ldd	r24, Y+17	; 0x11
    28f0:	9a 89       	ldd	r25, Y+18	; 0x12
    28f2:	01 97       	sbiw	r24, 0x01	; 1
    28f4:	f1 f7       	brne	.-4      	; 0x28f2 <SSD_u8DisplayBlink+0x154>
    28f6:	9a 8b       	std	Y+18, r25	; 0x12
    28f8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28fa:	8b 89       	ldd	r24, Y+19	; 0x13
    28fc:	9c 89       	ldd	r25, Y+20	; 0x14
    28fe:	01 97       	sbiw	r24, 0x01	; 1
    2900:	9c 8b       	std	Y+20, r25	; 0x14
    2902:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2904:	8b 89       	ldd	r24, Y+19	; 0x13
    2906:	9c 89       	ldd	r25, Y+20	; 0x14
    2908:	00 97       	sbiw	r24, 0x00	; 0
    290a:	69 f7       	brne	.-38     	; 0x28e6 <SSD_u8DisplayBlink+0x148>
    290c:	14 c0       	rjmp	.+40     	; 0x2936 <SSD_u8DisplayBlink+0x198>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    290e:	6d 89       	ldd	r22, Y+21	; 0x15
    2910:	7e 89       	ldd	r23, Y+22	; 0x16
    2912:	8f 89       	ldd	r24, Y+23	; 0x17
    2914:	98 8d       	ldd	r25, Y+24	; 0x18
    2916:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    291a:	dc 01       	movw	r26, r24
    291c:	cb 01       	movw	r24, r22
    291e:	9c 8b       	std	Y+20, r25	; 0x14
    2920:	8b 8b       	std	Y+19, r24	; 0x13
    2922:	8b 89       	ldd	r24, Y+19	; 0x13
    2924:	9c 89       	ldd	r25, Y+20	; 0x14
    2926:	98 8b       	std	Y+16, r25	; 0x10
    2928:	8f 87       	std	Y+15, r24	; 0x0f
    292a:	8f 85       	ldd	r24, Y+15	; 0x0f
    292c:	98 89       	ldd	r25, Y+16	; 0x10
    292e:	01 97       	sbiw	r24, 0x01	; 1
    2930:	f1 f7       	brne	.-4      	; 0x292e <SSD_u8DisplayBlink+0x190>
    2932:	98 8b       	std	Y+16, r25	; 0x10
    2934:	8f 87       	std	Y+15, r24	; 0x0f

		_delay_ms(20);
		DIO_u8SetPinValue(SSD_EN_PORT,SSD_1_EN_PIN,DIO_u8PIN_LOW);
    2936:	82 e0       	ldi	r24, 0x02	; 2
    2938:	60 e0       	ldi	r22, 0x00	; 0
    293a:	40 e0       	ldi	r20, 0x00	; 0
    293c:	0e 94 95 10 	call	0x212a	; 0x212a <DIO_u8SetPinValue>
		DIO_u8SetPinValue(SSD_EN_PORT,SSD_2_EN_PIN,DIO_u8PIN_HIGH);
    2940:	82 e0       	ldi	r24, 0x02	; 2
    2942:	61 e0       	ldi	r22, 0x01	; 1
    2944:	41 e0       	ldi	r20, 0x01	; 1
    2946:	0e 94 95 10 	call	0x212a	; 0x212a <DIO_u8SetPinValue>
		DIO_u8SetPortValue(SSD_DATA_PORT,seven_seg[tens]);
    294a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    294c:	88 2f       	mov	r24, r24
    294e:	90 e0       	ldi	r25, 0x00	; 0
    2950:	fc 01       	movw	r30, r24
    2952:	e0 58       	subi	r30, 0x80	; 128
    2954:	fe 4f       	sbci	r31, 0xFE	; 254
    2956:	90 81       	ld	r25, Z
    2958:	83 e0       	ldi	r24, 0x03	; 3
    295a:	69 2f       	mov	r22, r25
    295c:	0e 94 a7 11 	call	0x234e	; 0x234e <DIO_u8SetPortValue>
    2960:	80 e0       	ldi	r24, 0x00	; 0
    2962:	90 e0       	ldi	r25, 0x00	; 0
    2964:	a0 ea       	ldi	r26, 0xA0	; 160
    2966:	b1 e4       	ldi	r27, 0x41	; 65
    2968:	8b 87       	std	Y+11, r24	; 0x0b
    296a:	9c 87       	std	Y+12, r25	; 0x0c
    296c:	ad 87       	std	Y+13, r26	; 0x0d
    296e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2970:	6b 85       	ldd	r22, Y+11	; 0x0b
    2972:	7c 85       	ldd	r23, Y+12	; 0x0c
    2974:	8d 85       	ldd	r24, Y+13	; 0x0d
    2976:	9e 85       	ldd	r25, Y+14	; 0x0e
    2978:	20 e0       	ldi	r18, 0x00	; 0
    297a:	30 e0       	ldi	r19, 0x00	; 0
    297c:	4a ef       	ldi	r20, 0xFA	; 250
    297e:	54 e4       	ldi	r21, 0x44	; 68
    2980:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2984:	dc 01       	movw	r26, r24
    2986:	cb 01       	movw	r24, r22
    2988:	8f 83       	std	Y+7, r24	; 0x07
    298a:	98 87       	std	Y+8, r25	; 0x08
    298c:	a9 87       	std	Y+9, r26	; 0x09
    298e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2990:	6f 81       	ldd	r22, Y+7	; 0x07
    2992:	78 85       	ldd	r23, Y+8	; 0x08
    2994:	89 85       	ldd	r24, Y+9	; 0x09
    2996:	9a 85       	ldd	r25, Y+10	; 0x0a
    2998:	20 e0       	ldi	r18, 0x00	; 0
    299a:	30 e0       	ldi	r19, 0x00	; 0
    299c:	40 e8       	ldi	r20, 0x80	; 128
    299e:	5f e3       	ldi	r21, 0x3F	; 63
    29a0:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    29a4:	88 23       	and	r24, r24
    29a6:	2c f4       	brge	.+10     	; 0x29b2 <SSD_u8DisplayBlink+0x214>
		__ticks = 1;
    29a8:	81 e0       	ldi	r24, 0x01	; 1
    29aa:	90 e0       	ldi	r25, 0x00	; 0
    29ac:	9e 83       	std	Y+6, r25	; 0x06
    29ae:	8d 83       	std	Y+5, r24	; 0x05
    29b0:	3f c0       	rjmp	.+126    	; 0x2a30 <SSD_u8DisplayBlink+0x292>
	else if (__tmp > 65535)
    29b2:	6f 81       	ldd	r22, Y+7	; 0x07
    29b4:	78 85       	ldd	r23, Y+8	; 0x08
    29b6:	89 85       	ldd	r24, Y+9	; 0x09
    29b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    29ba:	20 e0       	ldi	r18, 0x00	; 0
    29bc:	3f ef       	ldi	r19, 0xFF	; 255
    29be:	4f e7       	ldi	r20, 0x7F	; 127
    29c0:	57 e4       	ldi	r21, 0x47	; 71
    29c2:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    29c6:	18 16       	cp	r1, r24
    29c8:	4c f5       	brge	.+82     	; 0x2a1c <SSD_u8DisplayBlink+0x27e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    29cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    29ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    29d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    29d2:	20 e0       	ldi	r18, 0x00	; 0
    29d4:	30 e0       	ldi	r19, 0x00	; 0
    29d6:	40 e2       	ldi	r20, 0x20	; 32
    29d8:	51 e4       	ldi	r21, 0x41	; 65
    29da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29de:	dc 01       	movw	r26, r24
    29e0:	cb 01       	movw	r24, r22
    29e2:	bc 01       	movw	r22, r24
    29e4:	cd 01       	movw	r24, r26
    29e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29ea:	dc 01       	movw	r26, r24
    29ec:	cb 01       	movw	r24, r22
    29ee:	9e 83       	std	Y+6, r25	; 0x06
    29f0:	8d 83       	std	Y+5, r24	; 0x05
    29f2:	0f c0       	rjmp	.+30     	; 0x2a12 <SSD_u8DisplayBlink+0x274>
    29f4:	88 ec       	ldi	r24, 0xC8	; 200
    29f6:	90 e0       	ldi	r25, 0x00	; 0
    29f8:	9c 83       	std	Y+4, r25	; 0x04
    29fa:	8b 83       	std	Y+3, r24	; 0x03
    29fc:	8b 81       	ldd	r24, Y+3	; 0x03
    29fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2a00:	01 97       	sbiw	r24, 0x01	; 1
    2a02:	f1 f7       	brne	.-4      	; 0x2a00 <SSD_u8DisplayBlink+0x262>
    2a04:	9c 83       	std	Y+4, r25	; 0x04
    2a06:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a08:	8d 81       	ldd	r24, Y+5	; 0x05
    2a0a:	9e 81       	ldd	r25, Y+6	; 0x06
    2a0c:	01 97       	sbiw	r24, 0x01	; 1
    2a0e:	9e 83       	std	Y+6, r25	; 0x06
    2a10:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a12:	8d 81       	ldd	r24, Y+5	; 0x05
    2a14:	9e 81       	ldd	r25, Y+6	; 0x06
    2a16:	00 97       	sbiw	r24, 0x00	; 0
    2a18:	69 f7       	brne	.-38     	; 0x29f4 <SSD_u8DisplayBlink+0x256>
    2a1a:	14 c0       	rjmp	.+40     	; 0x2a44 <SSD_u8DisplayBlink+0x2a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a1c:	6f 81       	ldd	r22, Y+7	; 0x07
    2a1e:	78 85       	ldd	r23, Y+8	; 0x08
    2a20:	89 85       	ldd	r24, Y+9	; 0x09
    2a22:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a28:	dc 01       	movw	r26, r24
    2a2a:	cb 01       	movw	r24, r22
    2a2c:	9e 83       	std	Y+6, r25	; 0x06
    2a2e:	8d 83       	std	Y+5, r24	; 0x05
    2a30:	8d 81       	ldd	r24, Y+5	; 0x05
    2a32:	9e 81       	ldd	r25, Y+6	; 0x06
    2a34:	9a 83       	std	Y+2, r25	; 0x02
    2a36:	89 83       	std	Y+1, r24	; 0x01
    2a38:	89 81       	ldd	r24, Y+1	; 0x01
    2a3a:	9a 81       	ldd	r25, Y+2	; 0x02
    2a3c:	01 97       	sbiw	r24, 0x01	; 1
    2a3e:	f1 f7       	brne	.-4      	; 0x2a3c <SSD_u8DisplayBlink+0x29e>
    2a40:	9a 83       	std	Y+2, r25	; 0x02
    2a42:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(20);
		DIO_u8SetPinValue(SSD_EN_PORT,SSD_1_EN_PIN,DIO_u8PIN_LOW);
    2a44:	82 e0       	ldi	r24, 0x02	; 2
    2a46:	60 e0       	ldi	r22, 0x00	; 0
    2a48:	40 e0       	ldi	r20, 0x00	; 0
    2a4a:	0e 94 95 10 	call	0x212a	; 0x212a <DIO_u8SetPinValue>
		DIO_u8SetPinValue(SSD_EN_PORT,SSD_2_EN_PIN,DIO_u8PIN_LOW);
    2a4e:	82 e0       	ldi	r24, 0x02	; 2
    2a50:	61 e0       	ldi	r22, 0x01	; 1
    2a52:	40 e0       	ldi	r20, 0x00	; 0
    2a54:	0e 94 95 10 	call	0x212a	; 0x212a <DIO_u8SetPinValue>
	seven_seg[ones]|=Local_u8PortMask;

	Local_u8PortMask = DIO_u8AndWithPort(SSD_DATA_PORT,SSD_DATA_MASK);
	seven_seg[tens]|=Local_u8PortMask;

	for(Local_u8Counter=0;Local_u8Counter<100;Local_u8Counter++)
    2a58:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2a5a:	8f 5f       	subi	r24, 0xFF	; 255
    2a5c:	8f 8f       	std	Y+31, r24	; 0x1f
    2a5e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2a60:	84 36       	cpi	r24, 0x64	; 100
    2a62:	08 f4       	brcc	.+2      	; 0x2a66 <SSD_u8DisplayBlink+0x2c8>
    2a64:	e1 ce       	rjmp	.-574    	; 0x2828 <SSD_u8DisplayBlink+0x8a>
		DIO_u8SetPinValue(SSD_EN_PORT,SSD_1_EN_PIN,DIO_u8PIN_LOW);
		DIO_u8SetPinValue(SSD_EN_PORT,SSD_2_EN_PIN,DIO_u8PIN_LOW);


	}
	return Local_u8ErrorState;
    2a66:	89 a1       	ldd	r24, Y+33	; 0x21
}
    2a68:	a2 96       	adiw	r28, 0x22	; 34
    2a6a:	0f b6       	in	r0, 0x3f	; 63
    2a6c:	f8 94       	cli
    2a6e:	de bf       	out	0x3e, r29	; 62
    2a70:	0f be       	out	0x3f, r0	; 63
    2a72:	cd bf       	out	0x3d, r28	; 61
    2a74:	cf 91       	pop	r28
    2a76:	df 91       	pop	r29
    2a78:	08 95       	ret

00002a7a <SSD_u8Displaynum>:

u8 SSD_u8Displaynum(u8 number)
{
    2a7a:	df 93       	push	r29
    2a7c:	cf 93       	push	r28
    2a7e:	cd b7       	in	r28, 0x3d	; 61
    2a80:	de b7       	in	r29, 0x3e	; 62
    2a82:	a0 97       	sbiw	r28, 0x20	; 32
    2a84:	0f b6       	in	r0, 0x3f	; 63
    2a86:	f8 94       	cli
    2a88:	de bf       	out	0x3e, r29	; 62
    2a8a:	0f be       	out	0x3f, r0	; 63
    2a8c:	cd bf       	out	0x3d, r28	; 61
    2a8e:	88 a3       	std	Y+32, r24	; 0x20
	u8 Local_u8ErrorState = 0;
    2a90:	1f 8e       	std	Y+31, r1	; 0x1f

	u8 ones = number%10;
    2a92:	88 a1       	ldd	r24, Y+32	; 0x20
    2a94:	9a e0       	ldi	r25, 0x0A	; 10
    2a96:	69 2f       	mov	r22, r25
    2a98:	0e 94 ae 18 	call	0x315c	; 0x315c <__udivmodqi4>
    2a9c:	89 2f       	mov	r24, r25
    2a9e:	8e 8f       	std	Y+30, r24	; 0x1e
	u8 tens = number/10;
    2aa0:	88 a1       	ldd	r24, Y+32	; 0x20
    2aa2:	9a e0       	ldi	r25, 0x0A	; 10
    2aa4:	69 2f       	mov	r22, r25
    2aa6:	0e 94 ae 18 	call	0x315c	; 0x315c <__udivmodqi4>
    2aaa:	8d 8f       	std	Y+29, r24	; 0x1d

	for(;;)
	{
		DIO_u8SetPinValue(SSD_EN_PORT,SSD_1_EN_PIN,DIO_u8PIN_HIGH);
    2aac:	82 e0       	ldi	r24, 0x02	; 2
    2aae:	60 e0       	ldi	r22, 0x00	; 0
    2ab0:	41 e0       	ldi	r20, 0x01	; 1
    2ab2:	0e 94 95 10 	call	0x212a	; 0x212a <DIO_u8SetPinValue>
		DIO_u8SetPinValue(SSD_EN_PORT,SSD_2_EN_PIN,DIO_u8PIN_LOW);
    2ab6:	82 e0       	ldi	r24, 0x02	; 2
    2ab8:	61 e0       	ldi	r22, 0x01	; 1
    2aba:	40 e0       	ldi	r20, 0x00	; 0
    2abc:	0e 94 95 10 	call	0x212a	; 0x212a <DIO_u8SetPinValue>
		DIO_u8SetPortValue(SSD_DATA_PORT,seven_seg[ones]);
    2ac0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2ac2:	88 2f       	mov	r24, r24
    2ac4:	90 e0       	ldi	r25, 0x00	; 0
    2ac6:	fc 01       	movw	r30, r24
    2ac8:	e0 58       	subi	r30, 0x80	; 128
    2aca:	fe 4f       	sbci	r31, 0xFE	; 254
    2acc:	90 81       	ld	r25, Z
    2ace:	83 e0       	ldi	r24, 0x03	; 3
    2ad0:	69 2f       	mov	r22, r25
    2ad2:	0e 94 a7 11 	call	0x234e	; 0x234e <DIO_u8SetPortValue>
    2ad6:	80 e0       	ldi	r24, 0x00	; 0
    2ad8:	90 e0       	ldi	r25, 0x00	; 0
    2ada:	a0 ea       	ldi	r26, 0xA0	; 160
    2adc:	b0 e4       	ldi	r27, 0x40	; 64
    2ade:	89 8f       	std	Y+25, r24	; 0x19
    2ae0:	9a 8f       	std	Y+26, r25	; 0x1a
    2ae2:	ab 8f       	std	Y+27, r26	; 0x1b
    2ae4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ae6:	69 8d       	ldd	r22, Y+25	; 0x19
    2ae8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2aea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2aec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2aee:	20 e0       	ldi	r18, 0x00	; 0
    2af0:	30 e0       	ldi	r19, 0x00	; 0
    2af2:	4a ef       	ldi	r20, 0xFA	; 250
    2af4:	54 e4       	ldi	r21, 0x44	; 68
    2af6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2afa:	dc 01       	movw	r26, r24
    2afc:	cb 01       	movw	r24, r22
    2afe:	8d 8b       	std	Y+21, r24	; 0x15
    2b00:	9e 8b       	std	Y+22, r25	; 0x16
    2b02:	af 8b       	std	Y+23, r26	; 0x17
    2b04:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b06:	6d 89       	ldd	r22, Y+21	; 0x15
    2b08:	7e 89       	ldd	r23, Y+22	; 0x16
    2b0a:	8f 89       	ldd	r24, Y+23	; 0x17
    2b0c:	98 8d       	ldd	r25, Y+24	; 0x18
    2b0e:	20 e0       	ldi	r18, 0x00	; 0
    2b10:	30 e0       	ldi	r19, 0x00	; 0
    2b12:	40 e8       	ldi	r20, 0x80	; 128
    2b14:	5f e3       	ldi	r21, 0x3F	; 63
    2b16:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2b1a:	88 23       	and	r24, r24
    2b1c:	2c f4       	brge	.+10     	; 0x2b28 <SSD_u8Displaynum+0xae>
		__ticks = 1;
    2b1e:	81 e0       	ldi	r24, 0x01	; 1
    2b20:	90 e0       	ldi	r25, 0x00	; 0
    2b22:	9c 8b       	std	Y+20, r25	; 0x14
    2b24:	8b 8b       	std	Y+19, r24	; 0x13
    2b26:	3f c0       	rjmp	.+126    	; 0x2ba6 <SSD_u8Displaynum+0x12c>
	else if (__tmp > 65535)
    2b28:	6d 89       	ldd	r22, Y+21	; 0x15
    2b2a:	7e 89       	ldd	r23, Y+22	; 0x16
    2b2c:	8f 89       	ldd	r24, Y+23	; 0x17
    2b2e:	98 8d       	ldd	r25, Y+24	; 0x18
    2b30:	20 e0       	ldi	r18, 0x00	; 0
    2b32:	3f ef       	ldi	r19, 0xFF	; 255
    2b34:	4f e7       	ldi	r20, 0x7F	; 127
    2b36:	57 e4       	ldi	r21, 0x47	; 71
    2b38:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2b3c:	18 16       	cp	r1, r24
    2b3e:	4c f5       	brge	.+82     	; 0x2b92 <SSD_u8Displaynum+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b40:	69 8d       	ldd	r22, Y+25	; 0x19
    2b42:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b44:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b46:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b48:	20 e0       	ldi	r18, 0x00	; 0
    2b4a:	30 e0       	ldi	r19, 0x00	; 0
    2b4c:	40 e2       	ldi	r20, 0x20	; 32
    2b4e:	51 e4       	ldi	r21, 0x41	; 65
    2b50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b54:	dc 01       	movw	r26, r24
    2b56:	cb 01       	movw	r24, r22
    2b58:	bc 01       	movw	r22, r24
    2b5a:	cd 01       	movw	r24, r26
    2b5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b60:	dc 01       	movw	r26, r24
    2b62:	cb 01       	movw	r24, r22
    2b64:	9c 8b       	std	Y+20, r25	; 0x14
    2b66:	8b 8b       	std	Y+19, r24	; 0x13
    2b68:	0f c0       	rjmp	.+30     	; 0x2b88 <SSD_u8Displaynum+0x10e>
    2b6a:	88 ec       	ldi	r24, 0xC8	; 200
    2b6c:	90 e0       	ldi	r25, 0x00	; 0
    2b6e:	9a 8b       	std	Y+18, r25	; 0x12
    2b70:	89 8b       	std	Y+17, r24	; 0x11
    2b72:	89 89       	ldd	r24, Y+17	; 0x11
    2b74:	9a 89       	ldd	r25, Y+18	; 0x12
    2b76:	01 97       	sbiw	r24, 0x01	; 1
    2b78:	f1 f7       	brne	.-4      	; 0x2b76 <SSD_u8Displaynum+0xfc>
    2b7a:	9a 8b       	std	Y+18, r25	; 0x12
    2b7c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b7e:	8b 89       	ldd	r24, Y+19	; 0x13
    2b80:	9c 89       	ldd	r25, Y+20	; 0x14
    2b82:	01 97       	sbiw	r24, 0x01	; 1
    2b84:	9c 8b       	std	Y+20, r25	; 0x14
    2b86:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b88:	8b 89       	ldd	r24, Y+19	; 0x13
    2b8a:	9c 89       	ldd	r25, Y+20	; 0x14
    2b8c:	00 97       	sbiw	r24, 0x00	; 0
    2b8e:	69 f7       	brne	.-38     	; 0x2b6a <SSD_u8Displaynum+0xf0>
    2b90:	14 c0       	rjmp	.+40     	; 0x2bba <SSD_u8Displaynum+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b92:	6d 89       	ldd	r22, Y+21	; 0x15
    2b94:	7e 89       	ldd	r23, Y+22	; 0x16
    2b96:	8f 89       	ldd	r24, Y+23	; 0x17
    2b98:	98 8d       	ldd	r25, Y+24	; 0x18
    2b9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b9e:	dc 01       	movw	r26, r24
    2ba0:	cb 01       	movw	r24, r22
    2ba2:	9c 8b       	std	Y+20, r25	; 0x14
    2ba4:	8b 8b       	std	Y+19, r24	; 0x13
    2ba6:	8b 89       	ldd	r24, Y+19	; 0x13
    2ba8:	9c 89       	ldd	r25, Y+20	; 0x14
    2baa:	98 8b       	std	Y+16, r25	; 0x10
    2bac:	8f 87       	std	Y+15, r24	; 0x0f
    2bae:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bb0:	98 89       	ldd	r25, Y+16	; 0x10
    2bb2:	01 97       	sbiw	r24, 0x01	; 1
    2bb4:	f1 f7       	brne	.-4      	; 0x2bb2 <SSD_u8Displaynum+0x138>
    2bb6:	98 8b       	std	Y+16, r25	; 0x10
    2bb8:	8f 87       	std	Y+15, r24	; 0x0f

		_delay_ms(5);
		DIO_u8SetPinValue(SSD_EN_PORT,SSD_1_EN_PIN,DIO_u8PIN_LOW);
    2bba:	82 e0       	ldi	r24, 0x02	; 2
    2bbc:	60 e0       	ldi	r22, 0x00	; 0
    2bbe:	40 e0       	ldi	r20, 0x00	; 0
    2bc0:	0e 94 95 10 	call	0x212a	; 0x212a <DIO_u8SetPinValue>
		DIO_u8SetPinValue(SSD_EN_PORT,SSD_2_EN_PIN,DIO_u8PIN_HIGH);
    2bc4:	82 e0       	ldi	r24, 0x02	; 2
    2bc6:	61 e0       	ldi	r22, 0x01	; 1
    2bc8:	41 e0       	ldi	r20, 0x01	; 1
    2bca:	0e 94 95 10 	call	0x212a	; 0x212a <DIO_u8SetPinValue>
		DIO_u8SetPortValue(SSD_DATA_PORT,seven_seg[tens]);
    2bce:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2bd0:	88 2f       	mov	r24, r24
    2bd2:	90 e0       	ldi	r25, 0x00	; 0
    2bd4:	fc 01       	movw	r30, r24
    2bd6:	e0 58       	subi	r30, 0x80	; 128
    2bd8:	fe 4f       	sbci	r31, 0xFE	; 254
    2bda:	90 81       	ld	r25, Z
    2bdc:	83 e0       	ldi	r24, 0x03	; 3
    2bde:	69 2f       	mov	r22, r25
    2be0:	0e 94 a7 11 	call	0x234e	; 0x234e <DIO_u8SetPortValue>
    2be4:	80 e0       	ldi	r24, 0x00	; 0
    2be6:	90 e0       	ldi	r25, 0x00	; 0
    2be8:	a0 ea       	ldi	r26, 0xA0	; 160
    2bea:	b0 e4       	ldi	r27, 0x40	; 64
    2bec:	8b 87       	std	Y+11, r24	; 0x0b
    2bee:	9c 87       	std	Y+12, r25	; 0x0c
    2bf0:	ad 87       	std	Y+13, r26	; 0x0d
    2bf2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bf4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bf6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bf8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bfa:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bfc:	20 e0       	ldi	r18, 0x00	; 0
    2bfe:	30 e0       	ldi	r19, 0x00	; 0
    2c00:	4a ef       	ldi	r20, 0xFA	; 250
    2c02:	54 e4       	ldi	r21, 0x44	; 68
    2c04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c08:	dc 01       	movw	r26, r24
    2c0a:	cb 01       	movw	r24, r22
    2c0c:	8f 83       	std	Y+7, r24	; 0x07
    2c0e:	98 87       	std	Y+8, r25	; 0x08
    2c10:	a9 87       	std	Y+9, r26	; 0x09
    2c12:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c14:	6f 81       	ldd	r22, Y+7	; 0x07
    2c16:	78 85       	ldd	r23, Y+8	; 0x08
    2c18:	89 85       	ldd	r24, Y+9	; 0x09
    2c1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c1c:	20 e0       	ldi	r18, 0x00	; 0
    2c1e:	30 e0       	ldi	r19, 0x00	; 0
    2c20:	40 e8       	ldi	r20, 0x80	; 128
    2c22:	5f e3       	ldi	r21, 0x3F	; 63
    2c24:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2c28:	88 23       	and	r24, r24
    2c2a:	2c f4       	brge	.+10     	; 0x2c36 <SSD_u8Displaynum+0x1bc>
		__ticks = 1;
    2c2c:	81 e0       	ldi	r24, 0x01	; 1
    2c2e:	90 e0       	ldi	r25, 0x00	; 0
    2c30:	9e 83       	std	Y+6, r25	; 0x06
    2c32:	8d 83       	std	Y+5, r24	; 0x05
    2c34:	3f c0       	rjmp	.+126    	; 0x2cb4 <SSD_u8Displaynum+0x23a>
	else if (__tmp > 65535)
    2c36:	6f 81       	ldd	r22, Y+7	; 0x07
    2c38:	78 85       	ldd	r23, Y+8	; 0x08
    2c3a:	89 85       	ldd	r24, Y+9	; 0x09
    2c3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c3e:	20 e0       	ldi	r18, 0x00	; 0
    2c40:	3f ef       	ldi	r19, 0xFF	; 255
    2c42:	4f e7       	ldi	r20, 0x7F	; 127
    2c44:	57 e4       	ldi	r21, 0x47	; 71
    2c46:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2c4a:	18 16       	cp	r1, r24
    2c4c:	4c f5       	brge	.+82     	; 0x2ca0 <SSD_u8Displaynum+0x226>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c4e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c50:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c52:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c54:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c56:	20 e0       	ldi	r18, 0x00	; 0
    2c58:	30 e0       	ldi	r19, 0x00	; 0
    2c5a:	40 e2       	ldi	r20, 0x20	; 32
    2c5c:	51 e4       	ldi	r21, 0x41	; 65
    2c5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c62:	dc 01       	movw	r26, r24
    2c64:	cb 01       	movw	r24, r22
    2c66:	bc 01       	movw	r22, r24
    2c68:	cd 01       	movw	r24, r26
    2c6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c6e:	dc 01       	movw	r26, r24
    2c70:	cb 01       	movw	r24, r22
    2c72:	9e 83       	std	Y+6, r25	; 0x06
    2c74:	8d 83       	std	Y+5, r24	; 0x05
    2c76:	0f c0       	rjmp	.+30     	; 0x2c96 <SSD_u8Displaynum+0x21c>
    2c78:	88 ec       	ldi	r24, 0xC8	; 200
    2c7a:	90 e0       	ldi	r25, 0x00	; 0
    2c7c:	9c 83       	std	Y+4, r25	; 0x04
    2c7e:	8b 83       	std	Y+3, r24	; 0x03
    2c80:	8b 81       	ldd	r24, Y+3	; 0x03
    2c82:	9c 81       	ldd	r25, Y+4	; 0x04
    2c84:	01 97       	sbiw	r24, 0x01	; 1
    2c86:	f1 f7       	brne	.-4      	; 0x2c84 <SSD_u8Displaynum+0x20a>
    2c88:	9c 83       	std	Y+4, r25	; 0x04
    2c8a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c8c:	8d 81       	ldd	r24, Y+5	; 0x05
    2c8e:	9e 81       	ldd	r25, Y+6	; 0x06
    2c90:	01 97       	sbiw	r24, 0x01	; 1
    2c92:	9e 83       	std	Y+6, r25	; 0x06
    2c94:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c96:	8d 81       	ldd	r24, Y+5	; 0x05
    2c98:	9e 81       	ldd	r25, Y+6	; 0x06
    2c9a:	00 97       	sbiw	r24, 0x00	; 0
    2c9c:	69 f7       	brne	.-38     	; 0x2c78 <SSD_u8Displaynum+0x1fe>
    2c9e:	14 c0       	rjmp	.+40     	; 0x2cc8 <SSD_u8Displaynum+0x24e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ca0:	6f 81       	ldd	r22, Y+7	; 0x07
    2ca2:	78 85       	ldd	r23, Y+8	; 0x08
    2ca4:	89 85       	ldd	r24, Y+9	; 0x09
    2ca6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ca8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cac:	dc 01       	movw	r26, r24
    2cae:	cb 01       	movw	r24, r22
    2cb0:	9e 83       	std	Y+6, r25	; 0x06
    2cb2:	8d 83       	std	Y+5, r24	; 0x05
    2cb4:	8d 81       	ldd	r24, Y+5	; 0x05
    2cb6:	9e 81       	ldd	r25, Y+6	; 0x06
    2cb8:	9a 83       	std	Y+2, r25	; 0x02
    2cba:	89 83       	std	Y+1, r24	; 0x01
    2cbc:	89 81       	ldd	r24, Y+1	; 0x01
    2cbe:	9a 81       	ldd	r25, Y+2	; 0x02
    2cc0:	01 97       	sbiw	r24, 0x01	; 1
    2cc2:	f1 f7       	brne	.-4      	; 0x2cc0 <SSD_u8Displaynum+0x246>
    2cc4:	9a 83       	std	Y+2, r25	; 0x02
    2cc6:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(5);
		DIO_u8SetPinValue(SSD_EN_PORT,SSD_1_EN_PIN,DIO_u8PIN_LOW);
    2cc8:	82 e0       	ldi	r24, 0x02	; 2
    2cca:	60 e0       	ldi	r22, 0x00	; 0
    2ccc:	40 e0       	ldi	r20, 0x00	; 0
    2cce:	0e 94 95 10 	call	0x212a	; 0x212a <DIO_u8SetPinValue>
		DIO_u8SetPinValue(SSD_EN_PORT,SSD_2_EN_PIN,DIO_u8PIN_LOW);
    2cd2:	82 e0       	ldi	r24, 0x02	; 2
    2cd4:	61 e0       	ldi	r22, 0x01	; 1
    2cd6:	40 e0       	ldi	r20, 0x00	; 0
    2cd8:	0e 94 95 10 	call	0x212a	; 0x212a <DIO_u8SetPinValue>
    2cdc:	e7 ce       	rjmp	.-562    	; 0x2aac <SSD_u8Displaynum+0x32>

00002cde <SSD_u8CountUp>:
	return Local_u8ErrorState;

}

u8 SSD_u8CountUp(u8 number)
{
    2cde:	df 93       	push	r29
    2ce0:	cf 93       	push	r28
    2ce2:	00 d0       	rcall	.+0      	; 0x2ce4 <SSD_u8CountUp+0x6>
    2ce4:	0f 92       	push	r0
    2ce6:	cd b7       	in	r28, 0x3d	; 61
    2ce8:	de b7       	in	r29, 0x3e	; 62
    2cea:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8ErrorState = 0;
    2cec:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8Counter;

	for(Local_u8Counter=0;Local_u8Counter<=number;Local_u8Counter++)
    2cee:	19 82       	std	Y+1, r1	; 0x01
    2cf0:	06 c0       	rjmp	.+12     	; 0x2cfe <SSD_u8CountUp+0x20>
	{
		SSD_u8DisplayBlink(Local_u8Counter);
    2cf2:	89 81       	ldd	r24, Y+1	; 0x01
    2cf4:	0e 94 cf 13 	call	0x279e	; 0x279e <SSD_u8DisplayBlink>
u8 SSD_u8CountUp(u8 number)
{
	u8 Local_u8ErrorState = 0;
	u8 Local_u8Counter;

	for(Local_u8Counter=0;Local_u8Counter<=number;Local_u8Counter++)
    2cf8:	89 81       	ldd	r24, Y+1	; 0x01
    2cfa:	8f 5f       	subi	r24, 0xFF	; 255
    2cfc:	89 83       	std	Y+1, r24	; 0x01
    2cfe:	99 81       	ldd	r25, Y+1	; 0x01
    2d00:	8b 81       	ldd	r24, Y+3	; 0x03
    2d02:	89 17       	cp	r24, r25
    2d04:	b0 f7       	brcc	.-20     	; 0x2cf2 <SSD_u8CountUp+0x14>
	{
		SSD_u8DisplayBlink(Local_u8Counter);

	}

	return Local_u8ErrorState;
    2d06:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2d08:	0f 90       	pop	r0
    2d0a:	0f 90       	pop	r0
    2d0c:	0f 90       	pop	r0
    2d0e:	cf 91       	pop	r28
    2d10:	df 91       	pop	r29
    2d12:	08 95       	ret

00002d14 <SSD_u8CountDown>:

u8 SSD_u8CountDown(u8 number)
{
    2d14:	df 93       	push	r29
    2d16:	cf 93       	push	r28
    2d18:	00 d0       	rcall	.+0      	; 0x2d1a <SSD_u8CountDown+0x6>
    2d1a:	0f 92       	push	r0
    2d1c:	cd b7       	in	r28, 0x3d	; 61
    2d1e:	de b7       	in	r29, 0x3e	; 62
    2d20:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8ErrorState = 0;
    2d22:	1a 82       	std	Y+2, r1	; 0x02
	s8 Local_u8Counter;
	for(Local_u8Counter=number;Local_u8Counter>=0;Local_u8Counter--)
    2d24:	8b 81       	ldd	r24, Y+3	; 0x03
    2d26:	89 83       	std	Y+1, r24	; 0x01
    2d28:	06 c0       	rjmp	.+12     	; 0x2d36 <SSD_u8CountDown+0x22>
	{
		SSD_u8DisplayBlink(Local_u8Counter);
    2d2a:	89 81       	ldd	r24, Y+1	; 0x01
    2d2c:	0e 94 cf 13 	call	0x279e	; 0x279e <SSD_u8DisplayBlink>

u8 SSD_u8CountDown(u8 number)
{
	u8 Local_u8ErrorState = 0;
	s8 Local_u8Counter;
	for(Local_u8Counter=number;Local_u8Counter>=0;Local_u8Counter--)
    2d30:	89 81       	ldd	r24, Y+1	; 0x01
    2d32:	81 50       	subi	r24, 0x01	; 1
    2d34:	89 83       	std	Y+1, r24	; 0x01
    2d36:	89 81       	ldd	r24, Y+1	; 0x01
    2d38:	88 23       	and	r24, r24
    2d3a:	bc f7       	brge	.-18     	; 0x2d2a <SSD_u8CountDown+0x16>
	{
		SSD_u8DisplayBlink(Local_u8Counter);
	}

	return Local_u8ErrorState;
    2d3c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2d3e:	0f 90       	pop	r0
    2d40:	0f 90       	pop	r0
    2d42:	0f 90       	pop	r0
    2d44:	cf 91       	pop	r28
    2d46:	df 91       	pop	r29
    2d48:	08 95       	ret

00002d4a <TIMER0_voidInit>:
#include "TIMER_register.h"

static void (*TIMER0_pvCallBackFunc)(void) = NULL;

void TIMER0_voidInit(void)
{
    2d4a:	df 93       	push	r29
    2d4c:	cf 93       	push	r28
    2d4e:	cd b7       	in	r28, 0x3d	; 61
    2d50:	de b7       	in	r29, 0x3e	; 62
	/* Choose fast pwm mode*/
	SET_BIT(TCCR0,TCCR0_WGM00);
    2d52:	a3 e5       	ldi	r26, 0x53	; 83
    2d54:	b0 e0       	ldi	r27, 0x00	; 0
    2d56:	e3 e5       	ldi	r30, 0x53	; 83
    2d58:	f0 e0       	ldi	r31, 0x00	; 0
    2d5a:	80 81       	ld	r24, Z
    2d5c:	80 64       	ori	r24, 0x40	; 64
    2d5e:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_WGM01);
    2d60:	a3 e5       	ldi	r26, 0x53	; 83
    2d62:	b0 e0       	ldi	r27, 0x00	; 0
    2d64:	e3 e5       	ldi	r30, 0x53	; 83
    2d66:	f0 e0       	ldi	r31, 0x00	; 0
    2d68:	80 81       	ld	r24, Z
    2d6a:	88 60       	ori	r24, 0x08	; 8
    2d6c:	8c 93       	st	X, r24
//	SET_BIT(TIMSK,TIMSK_OCIE0);
//
//	/*Set compare match value to 250*/
//	OCR0 = 125;

	CLR_BIT(TCCR0,4);
    2d6e:	a3 e5       	ldi	r26, 0x53	; 83
    2d70:	b0 e0       	ldi	r27, 0x00	; 0
    2d72:	e3 e5       	ldi	r30, 0x53	; 83
    2d74:	f0 e0       	ldi	r31, 0x00	; 0
    2d76:	80 81       	ld	r24, Z
    2d78:	8f 7e       	andi	r24, 0xEF	; 239
    2d7a:	8c 93       	st	X, r24
	SET_BIT(TCCR0,5);
    2d7c:	a3 e5       	ldi	r26, 0x53	; 83
    2d7e:	b0 e0       	ldi	r27, 0x00	; 0
    2d80:	e3 e5       	ldi	r30, 0x53	; 83
    2d82:	f0 e0       	ldi	r31, 0x00	; 0
    2d84:	80 81       	ld	r24, Z
    2d86:	80 62       	ori	r24, 0x20	; 32
    2d88:	8c 93       	st	X, r24
	/*prescaller : Division by 64*/
	SET_BIT(TCCR0,TCCR0_CS00);
    2d8a:	a3 e5       	ldi	r26, 0x53	; 83
    2d8c:	b0 e0       	ldi	r27, 0x00	; 0
    2d8e:	e3 e5       	ldi	r30, 0x53	; 83
    2d90:	f0 e0       	ldi	r31, 0x00	; 0
    2d92:	80 81       	ld	r24, Z
    2d94:	81 60       	ori	r24, 0x01	; 1
    2d96:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_CS01);
    2d98:	a3 e5       	ldi	r26, 0x53	; 83
    2d9a:	b0 e0       	ldi	r27, 0x00	; 0
    2d9c:	e3 e5       	ldi	r30, 0x53	; 83
    2d9e:	f0 e0       	ldi	r31, 0x00	; 0
    2da0:	80 81       	ld	r24, Z
    2da2:	82 60       	ori	r24, 0x02	; 2
    2da4:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_CS02);
    2da6:	a3 e5       	ldi	r26, 0x53	; 83
    2da8:	b0 e0       	ldi	r27, 0x00	; 0
    2daa:	e3 e5       	ldi	r30, 0x53	; 83
    2dac:	f0 e0       	ldi	r31, 0x00	; 0
    2dae:	80 81       	ld	r24, Z
    2db0:	8e 7f       	andi	r24, 0xFE	; 254
    2db2:	8c 93       	st	X, r24

}
    2db4:	cf 91       	pop	r28
    2db6:	df 91       	pop	r29
    2db8:	08 95       	ret

00002dba <TIMER0_SetComMatchValue>:

void TIMER0_SetComMatchValue(u8 Copy_u8Value)
{
    2dba:	df 93       	push	r29
    2dbc:	cf 93       	push	r28
    2dbe:	0f 92       	push	r0
    2dc0:	cd b7       	in	r28, 0x3d	; 61
    2dc2:	de b7       	in	r29, 0x3e	; 62
    2dc4:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Copy_u8Value;
    2dc6:	ec e5       	ldi	r30, 0x5C	; 92
    2dc8:	f0 e0       	ldi	r31, 0x00	; 0
    2dca:	89 81       	ldd	r24, Y+1	; 0x01
    2dcc:	80 83       	st	Z, r24
}
    2dce:	0f 90       	pop	r0
    2dd0:	cf 91       	pop	r28
    2dd2:	df 91       	pop	r29
    2dd4:	08 95       	ret

00002dd6 <TIMER0_u8SetCallBack>:

u8 TIMER0_u8SetCallBack(void(*Copy_pvCallBackFunc)(void))
{
    2dd6:	df 93       	push	r29
    2dd8:	cf 93       	push	r28
    2dda:	00 d0       	rcall	.+0      	; 0x2ddc <TIMER0_u8SetCallBack+0x6>
    2ddc:	0f 92       	push	r0
    2dde:	cd b7       	in	r28, 0x3d	; 61
    2de0:	de b7       	in	r29, 0x3e	; 62
    2de2:	9b 83       	std	Y+3, r25	; 0x03
    2de4:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStatus = OK;
    2de6:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvCallBackFunc != NULL)
    2de8:	8a 81       	ldd	r24, Y+2	; 0x02
    2dea:	9b 81       	ldd	r25, Y+3	; 0x03
    2dec:	00 97       	sbiw	r24, 0x00	; 0
    2dee:	39 f0       	breq	.+14     	; 0x2dfe <TIMER0_u8SetCallBack+0x28>
	{
		TIMER0_pvCallBackFunc = Copy_pvCallBackFunc;
    2df0:	8a 81       	ldd	r24, Y+2	; 0x02
    2df2:	9b 81       	ldd	r25, Y+3	; 0x03
    2df4:	90 93 99 01 	sts	0x0199, r25
    2df8:	80 93 98 01 	sts	0x0198, r24
    2dfc:	02 c0       	rjmp	.+4      	; 0x2e02 <TIMER0_u8SetCallBack+0x2c>
	}
	else
	{
		Local_u8ErrorStatus = NULL_POINTER;
    2dfe:	82 e0       	ldi	r24, 0x02	; 2
    2e00:	89 83       	std	Y+1, r24	; 0x01

	}


	return Local_u8ErrorStatus;
    2e02:	89 81       	ldd	r24, Y+1	; 0x01

}
    2e04:	0f 90       	pop	r0
    2e06:	0f 90       	pop	r0
    2e08:	0f 90       	pop	r0
    2e0a:	cf 91       	pop	r28
    2e0c:	df 91       	pop	r29
    2e0e:	08 95       	ret

00002e10 <TIMER1_voidInit>:
/******************************************************************************/
void TIMER1_voidInit(void)
{
    2e10:	df 93       	push	r29
    2e12:	cf 93       	push	r28
    2e14:	cd b7       	in	r28, 0x3d	; 61
    2e16:	de b7       	in	r29, 0x3e	; 62
	/* Setting Fast PWM Non-Inverting Mode*/
	SET_BIT(TCCR1A,TCCR1A_COM1A1);
    2e18:	af e4       	ldi	r26, 0x4F	; 79
    2e1a:	b0 e0       	ldi	r27, 0x00	; 0
    2e1c:	ef e4       	ldi	r30, 0x4F	; 79
    2e1e:	f0 e0       	ldi	r31, 0x00	; 0
    2e20:	80 81       	ld	r24, Z
    2e22:	80 68       	ori	r24, 0x80	; 128
    2e24:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    2e26:	af e4       	ldi	r26, 0x4F	; 79
    2e28:	b0 e0       	ldi	r27, 0x00	; 0
    2e2a:	ef e4       	ldi	r30, 0x4F	; 79
    2e2c:	f0 e0       	ldi	r31, 0x00	; 0
    2e2e:	80 81       	ld	r24, Z
    2e30:	8f 7b       	andi	r24, 0xBF	; 191
    2e32:	8c 93       	st	X, r24
	/*Setting Fast PWM Wave form Generation Mode*/
	CLR_BIT(TCCR1A,TCCR1A_WGM10);
    2e34:	af e4       	ldi	r26, 0x4F	; 79
    2e36:	b0 e0       	ldi	r27, 0x00	; 0
    2e38:	ef e4       	ldi	r30, 0x4F	; 79
    2e3a:	f0 e0       	ldi	r31, 0x00	; 0
    2e3c:	80 81       	ld	r24, Z
    2e3e:	8e 7f       	andi	r24, 0xFE	; 254
    2e40:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,TCCR1A_WGM11);
    2e42:	af e4       	ldi	r26, 0x4F	; 79
    2e44:	b0 e0       	ldi	r27, 0x00	; 0
    2e46:	ef e4       	ldi	r30, 0x4F	; 79
    2e48:	f0 e0       	ldi	r31, 0x00	; 0
    2e4a:	80 81       	ld	r24, Z
    2e4c:	82 60       	ori	r24, 0x02	; 2
    2e4e:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_WGM12);
    2e50:	ae e4       	ldi	r26, 0x4E	; 78
    2e52:	b0 e0       	ldi	r27, 0x00	; 0
    2e54:	ee e4       	ldi	r30, 0x4E	; 78
    2e56:	f0 e0       	ldi	r31, 0x00	; 0
    2e58:	80 81       	ld	r24, Z
    2e5a:	88 60       	ori	r24, 0x08	; 8
    2e5c:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_WGM13);
    2e5e:	ae e4       	ldi	r26, 0x4E	; 78
    2e60:	b0 e0       	ldi	r27, 0x00	; 0
    2e62:	ee e4       	ldi	r30, 0x4E	; 78
    2e64:	f0 e0       	ldi	r31, 0x00	; 0
    2e66:	80 81       	ld	r24, Z
    2e68:	80 61       	ori	r24, 0x10	; 16
    2e6a:	8c 93       	st	X, r24
	/* Setting prescaller */
	TCCR1B &= PRESCALER_MASK;
    2e6c:	ae e4       	ldi	r26, 0x4E	; 78
    2e6e:	b0 e0       	ldi	r27, 0x00	; 0
    2e70:	ee e4       	ldi	r30, 0x4E	; 78
    2e72:	f0 e0       	ldi	r31, 0x00	; 0
    2e74:	80 81       	ld	r24, Z
    2e76:	88 7f       	andi	r24, 0xF8	; 248
    2e78:	8c 93       	st	X, r24
	TCCR1B |= DIVIDE_BY_8;
    2e7a:	ae e4       	ldi	r26, 0x4E	; 78
    2e7c:	b0 e0       	ldi	r27, 0x00	; 0
    2e7e:	ee e4       	ldi	r30, 0x4E	; 78
    2e80:	f0 e0       	ldi	r31, 0x00	; 0
    2e82:	80 81       	ld	r24, Z
    2e84:	82 60       	ori	r24, 0x02	; 2
    2e86:	8c 93       	st	X, r24


}
    2e88:	cf 91       	pop	r28
    2e8a:	df 91       	pop	r29
    2e8c:	08 95       	ret

00002e8e <TIMER1_voidSetICR>:
void TIMER1_voidSetICR(u16 Copt_u16TOP)
{
    2e8e:	df 93       	push	r29
    2e90:	cf 93       	push	r28
    2e92:	00 d0       	rcall	.+0      	; 0x2e94 <TIMER1_voidSetICR+0x6>
    2e94:	cd b7       	in	r28, 0x3d	; 61
    2e96:	de b7       	in	r29, 0x3e	; 62
    2e98:	9a 83       	std	Y+2, r25	; 0x02
    2e9a:	89 83       	std	Y+1, r24	; 0x01
	ICR1 = Copt_u16TOP;
    2e9c:	e6 e4       	ldi	r30, 0x46	; 70
    2e9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ea0:	89 81       	ldd	r24, Y+1	; 0x01
    2ea2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ea4:	91 83       	std	Z+1, r25	; 0x01
    2ea6:	80 83       	st	Z, r24

}
    2ea8:	0f 90       	pop	r0
    2eaa:	0f 90       	pop	r0
    2eac:	cf 91       	pop	r28
    2eae:	df 91       	pop	r29
    2eb0:	08 95       	ret

00002eb2 <TIMER1_SetChannelAComMatchValue>:

void TIMER1_SetChannelAComMatchValue(u16 Copy_u16CompareMatch)
{
    2eb2:	df 93       	push	r29
    2eb4:	cf 93       	push	r28
    2eb6:	00 d0       	rcall	.+0      	; 0x2eb8 <TIMER1_SetChannelAComMatchValue+0x6>
    2eb8:	cd b7       	in	r28, 0x3d	; 61
    2eba:	de b7       	in	r29, 0x3e	; 62
    2ebc:	9a 83       	std	Y+2, r25	; 0x02
    2ebe:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = Copy_u16CompareMatch;
    2ec0:	ea e4       	ldi	r30, 0x4A	; 74
    2ec2:	f0 e0       	ldi	r31, 0x00	; 0
    2ec4:	89 81       	ldd	r24, Y+1	; 0x01
    2ec6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ec8:	91 83       	std	Z+1, r25	; 0x01
    2eca:	80 83       	st	Z, r24

}
    2ecc:	0f 90       	pop	r0
    2ece:	0f 90       	pop	r0
    2ed0:	cf 91       	pop	r28
    2ed2:	df 91       	pop	r29
    2ed4:	08 95       	ret

00002ed6 <__vector_10>:

/*****************************************************************************/

void __vector_10 (void) __attribute__((signal));
void __vector_10 (void)
{
    2ed6:	1f 92       	push	r1
    2ed8:	0f 92       	push	r0
    2eda:	0f b6       	in	r0, 0x3f	; 63
    2edc:	0f 92       	push	r0
    2ede:	11 24       	eor	r1, r1
    2ee0:	2f 93       	push	r18
    2ee2:	3f 93       	push	r19
    2ee4:	4f 93       	push	r20
    2ee6:	5f 93       	push	r21
    2ee8:	6f 93       	push	r22
    2eea:	7f 93       	push	r23
    2eec:	8f 93       	push	r24
    2eee:	9f 93       	push	r25
    2ef0:	af 93       	push	r26
    2ef2:	bf 93       	push	r27
    2ef4:	ef 93       	push	r30
    2ef6:	ff 93       	push	r31
    2ef8:	df 93       	push	r29
    2efa:	cf 93       	push	r28
    2efc:	cd b7       	in	r28, 0x3d	; 61
    2efe:	de b7       	in	r29, 0x3e	; 62
	if(TIMER0_pvCallBackFunc != NULL)
    2f00:	80 91 98 01 	lds	r24, 0x0198
    2f04:	90 91 99 01 	lds	r25, 0x0199
    2f08:	00 97       	sbiw	r24, 0x00	; 0
    2f0a:	29 f0       	breq	.+10     	; 0x2f16 <__vector_10+0x40>
	{
		TIMER0_pvCallBackFunc();
    2f0c:	e0 91 98 01 	lds	r30, 0x0198
    2f10:	f0 91 99 01 	lds	r31, 0x0199
    2f14:	09 95       	icall
	}
}
    2f16:	cf 91       	pop	r28
    2f18:	df 91       	pop	r29
    2f1a:	ff 91       	pop	r31
    2f1c:	ef 91       	pop	r30
    2f1e:	bf 91       	pop	r27
    2f20:	af 91       	pop	r26
    2f22:	9f 91       	pop	r25
    2f24:	8f 91       	pop	r24
    2f26:	7f 91       	pop	r23
    2f28:	6f 91       	pop	r22
    2f2a:	5f 91       	pop	r21
    2f2c:	4f 91       	pop	r20
    2f2e:	3f 91       	pop	r19
    2f30:	2f 91       	pop	r18
    2f32:	0f 90       	pop	r0
    2f34:	0f be       	out	0x3f, r0	; 63
    2f36:	0f 90       	pop	r0
    2f38:	1f 90       	pop	r1
    2f3a:	18 95       	reti

00002f3c <Map>:
#include "KPD_interface.h"
#include "SSD_interface.h"
/*********************Global Variables *****************************/
//void PWM(void);
f32 Map(f32 Copy_s32InputMin, f32 Copy_s32InputMax, f32 Copy_s32OutputMin, f32 Copy_s32OutputMax, f32 Copy_s32InputVal)
{
    2f3c:	af 92       	push	r10
    2f3e:	bf 92       	push	r11
    2f40:	cf 92       	push	r12
    2f42:	df 92       	push	r13
    2f44:	ef 92       	push	r14
    2f46:	ff 92       	push	r15
    2f48:	0f 93       	push	r16
    2f4a:	1f 93       	push	r17
    2f4c:	df 93       	push	r29
    2f4e:	cf 93       	push	r28
    2f50:	cd b7       	in	r28, 0x3d	; 61
    2f52:	de b7       	in	r29, 0x3e	; 62
    2f54:	64 97       	sbiw	r28, 0x14	; 20
    2f56:	0f b6       	in	r0, 0x3f	; 63
    2f58:	f8 94       	cli
    2f5a:	de bf       	out	0x3e, r29	; 62
    2f5c:	0f be       	out	0x3f, r0	; 63
    2f5e:	cd bf       	out	0x3d, r28	; 61
    2f60:	6d 83       	std	Y+5, r22	; 0x05
    2f62:	7e 83       	std	Y+6, r23	; 0x06
    2f64:	8f 83       	std	Y+7, r24	; 0x07
    2f66:	98 87       	std	Y+8, r25	; 0x08
    2f68:	29 87       	std	Y+9, r18	; 0x09
    2f6a:	3a 87       	std	Y+10, r19	; 0x0a
    2f6c:	4b 87       	std	Y+11, r20	; 0x0b
    2f6e:	5c 87       	std	Y+12, r21	; 0x0c
    2f70:	ed 86       	std	Y+13, r14	; 0x0d
    2f72:	fe 86       	std	Y+14, r15	; 0x0e
    2f74:	0f 87       	std	Y+15, r16	; 0x0f
    2f76:	18 8b       	std	Y+16, r17	; 0x10
    2f78:	a9 8a       	std	Y+17, r10	; 0x11
    2f7a:	ba 8a       	std	Y+18, r11	; 0x12
    2f7c:	cb 8a       	std	Y+19, r12	; 0x13
    2f7e:	dc 8a       	std	Y+20, r13	; 0x14
	f32 Local_s32OutputVal;
	Local_s32OutputVal = Copy_s32InputVal - Copy_s32InputMin;
    2f80:	69 a1       	ldd	r22, Y+33	; 0x21
    2f82:	7a a1       	ldd	r23, Y+34	; 0x22
    2f84:	8b a1       	ldd	r24, Y+35	; 0x23
    2f86:	9c a1       	ldd	r25, Y+36	; 0x24
    2f88:	2d 81       	ldd	r18, Y+5	; 0x05
    2f8a:	3e 81       	ldd	r19, Y+6	; 0x06
    2f8c:	4f 81       	ldd	r20, Y+7	; 0x07
    2f8e:	58 85       	ldd	r21, Y+8	; 0x08
    2f90:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    2f94:	dc 01       	movw	r26, r24
    2f96:	cb 01       	movw	r24, r22
    2f98:	89 83       	std	Y+1, r24	; 0x01
    2f9a:	9a 83       	std	Y+2, r25	; 0x02
    2f9c:	ab 83       	std	Y+3, r26	; 0x03
    2f9e:	bc 83       	std	Y+4, r27	; 0x04
	Local_s32OutputVal *= Copy_s32OutputMax- Copy_s32OutputMin;
    2fa0:	69 89       	ldd	r22, Y+17	; 0x11
    2fa2:	7a 89       	ldd	r23, Y+18	; 0x12
    2fa4:	8b 89       	ldd	r24, Y+19	; 0x13
    2fa6:	9c 89       	ldd	r25, Y+20	; 0x14
    2fa8:	2d 85       	ldd	r18, Y+13	; 0x0d
    2faa:	3e 85       	ldd	r19, Y+14	; 0x0e
    2fac:	4f 85       	ldd	r20, Y+15	; 0x0f
    2fae:	58 89       	ldd	r21, Y+16	; 0x10
    2fb0:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    2fb4:	dc 01       	movw	r26, r24
    2fb6:	cb 01       	movw	r24, r22
    2fb8:	9c 01       	movw	r18, r24
    2fba:	ad 01       	movw	r20, r26
    2fbc:	69 81       	ldd	r22, Y+1	; 0x01
    2fbe:	7a 81       	ldd	r23, Y+2	; 0x02
    2fc0:	8b 81       	ldd	r24, Y+3	; 0x03
    2fc2:	9c 81       	ldd	r25, Y+4	; 0x04
    2fc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fc8:	dc 01       	movw	r26, r24
    2fca:	cb 01       	movw	r24, r22
    2fcc:	89 83       	std	Y+1, r24	; 0x01
    2fce:	9a 83       	std	Y+2, r25	; 0x02
    2fd0:	ab 83       	std	Y+3, r26	; 0x03
    2fd2:	bc 83       	std	Y+4, r27	; 0x04
	Local_s32OutputVal /= Copy_s32InputMax -Copy_s32InputMin;
    2fd4:	69 85       	ldd	r22, Y+9	; 0x09
    2fd6:	7a 85       	ldd	r23, Y+10	; 0x0a
    2fd8:	8b 85       	ldd	r24, Y+11	; 0x0b
    2fda:	9c 85       	ldd	r25, Y+12	; 0x0c
    2fdc:	2d 81       	ldd	r18, Y+5	; 0x05
    2fde:	3e 81       	ldd	r19, Y+6	; 0x06
    2fe0:	4f 81       	ldd	r20, Y+7	; 0x07
    2fe2:	58 85       	ldd	r21, Y+8	; 0x08
    2fe4:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    2fe8:	dc 01       	movw	r26, r24
    2fea:	cb 01       	movw	r24, r22
    2fec:	9c 01       	movw	r18, r24
    2fee:	ad 01       	movw	r20, r26
    2ff0:	69 81       	ldd	r22, Y+1	; 0x01
    2ff2:	7a 81       	ldd	r23, Y+2	; 0x02
    2ff4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ff6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ff8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2ffc:	dc 01       	movw	r26, r24
    2ffe:	cb 01       	movw	r24, r22
    3000:	89 83       	std	Y+1, r24	; 0x01
    3002:	9a 83       	std	Y+2, r25	; 0x02
    3004:	ab 83       	std	Y+3, r26	; 0x03
    3006:	bc 83       	std	Y+4, r27	; 0x04
	Local_s32OutputVal += Copy_s32OutputMin;
    3008:	69 81       	ldd	r22, Y+1	; 0x01
    300a:	7a 81       	ldd	r23, Y+2	; 0x02
    300c:	8b 81       	ldd	r24, Y+3	; 0x03
    300e:	9c 81       	ldd	r25, Y+4	; 0x04
    3010:	2d 85       	ldd	r18, Y+13	; 0x0d
    3012:	3e 85       	ldd	r19, Y+14	; 0x0e
    3014:	4f 85       	ldd	r20, Y+15	; 0x0f
    3016:	58 89       	ldd	r21, Y+16	; 0x10
    3018:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    301c:	dc 01       	movw	r26, r24
    301e:	cb 01       	movw	r24, r22
    3020:	89 83       	std	Y+1, r24	; 0x01
    3022:	9a 83       	std	Y+2, r25	; 0x02
    3024:	ab 83       	std	Y+3, r26	; 0x03
    3026:	bc 83       	std	Y+4, r27	; 0x04
	return Local_s32OutputVal;
    3028:	89 81       	ldd	r24, Y+1	; 0x01
    302a:	9a 81       	ldd	r25, Y+2	; 0x02
    302c:	ab 81       	ldd	r26, Y+3	; 0x03
    302e:	bc 81       	ldd	r27, Y+4	; 0x04
}
    3030:	bc 01       	movw	r22, r24
    3032:	cd 01       	movw	r24, r26
    3034:	64 96       	adiw	r28, 0x14	; 20
    3036:	0f b6       	in	r0, 0x3f	; 63
    3038:	f8 94       	cli
    303a:	de bf       	out	0x3e, r29	; 62
    303c:	0f be       	out	0x3f, r0	; 63
    303e:	cd bf       	out	0x3d, r28	; 61
    3040:	cf 91       	pop	r28
    3042:	df 91       	pop	r29
    3044:	1f 91       	pop	r17
    3046:	0f 91       	pop	r16
    3048:	ff 90       	pop	r15
    304a:	ef 90       	pop	r14
    304c:	df 90       	pop	r13
    304e:	cf 90       	pop	r12
    3050:	bf 90       	pop	r11
    3052:	af 90       	pop	r10
    3054:	08 95       	ret

00003056 <main>:
/************************ Main Prog *******************************/
void main(void)
{
    3056:	af 92       	push	r10
    3058:	bf 92       	push	r11
    305a:	cf 92       	push	r12
    305c:	df 92       	push	r13
    305e:	ef 92       	push	r14
    3060:	ff 92       	push	r15
    3062:	0f 93       	push	r16
    3064:	1f 93       	push	r17
    3066:	df 93       	push	r29
    3068:	cf 93       	push	r28
    306a:	cd b7       	in	r28, 0x3d	; 61
    306c:	de b7       	in	r29, 0x3e	; 62
    306e:	28 97       	sbiw	r28, 0x08	; 8
    3070:	0f b6       	in	r0, 0x3f	; 63
    3072:	f8 94       	cli
    3074:	de bf       	out	0x3e, r29	; 62
    3076:	0f be       	out	0x3f, r0	; 63
    3078:	cd bf       	out	0x3d, r28	; 61
	/****************** Local Variables **************************/



	/******************** Driver Init ***************************/
	PORT_VoidInit();
    307a:	0e 94 6e 13 	call	0x26dc	; 0x26dc <PORT_VoidInit>
	CLCD_voidInit();
    307e:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <CLCD_voidInit>
	ADC_voidInit();
    3082:	0e 94 a5 07 	call	0xf4a	; 0xf4a <ADC_voidInit>

	GIE_VoidEnable();
    3086:	0e 94 da 12 	call	0x25b4	; 0x25b4 <GIE_VoidEnable>
	TIMER0_voidInit();
    308a:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <TIMER0_voidInit>
	TIMER1_voidInit();
    308e:	0e 94 08 17 	call	0x2e10	; 0x2e10 <TIMER1_voidInit>
	TIMER1_voidSetICR(20000);
    3092:	80 e2       	ldi	r24, 0x20	; 32
    3094:	9e e4       	ldi	r25, 0x4E	; 78
    3096:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <TIMER1_voidSetICR>


	u16 Local_u8Counter;

	u16 Local_u8KeyPad;
	u16 Local_u8Reading =0;
    309a:	18 86       	std	Y+8, r1	; 0x08
    309c:	1f 82       	std	Y+7, r1	; 0x07
		//
		//
		//		TIMER1_SetChannelAComMatchValue(Local_u8ReadingMap);

		/* POT Rotate Sound level of buzzer */
		CLCD_voidGoToXY(0,0);
    309e:	80 e0       	ldi	r24, 0x00	; 0
    30a0:	60 e0       	ldi	r22, 0x00	; 0
    30a2:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <CLCD_voidGoToXY>

		ADC_u8StartConversionSynch(ADC2,&Local_u8Reading);
    30a6:	9e 01       	movw	r18, r28
    30a8:	29 5f       	subi	r18, 0xF9	; 249
    30aa:	3f 4f       	sbci	r19, 0xFF	; 255
    30ac:	82 e0       	ldi	r24, 0x02	; 2
    30ae:	b9 01       	movw	r22, r18
    30b0:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <ADC_u8StartConversionSynch>

		//Local_u8ReadingMap= 100UL*(Local_u8Reading )  ;

			Local_u8ReadingMap = Map(0.0,1024.0,(1/31),(1/65536),Local_u8Reading);
    30b4:	8f 81       	ldd	r24, Y+7	; 0x07
    30b6:	98 85       	ldd	r25, Y+8	; 0x08
    30b8:	cc 01       	movw	r24, r24
    30ba:	a0 e0       	ldi	r26, 0x00	; 0
    30bc:	b0 e0       	ldi	r27, 0x00	; 0
    30be:	bc 01       	movw	r22, r24
    30c0:	cd 01       	movw	r24, r26
    30c2:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    30c6:	dc 01       	movw	r26, r24
    30c8:	cb 01       	movw	r24, r22
    30ca:	00 d0       	rcall	.+0      	; 0x30cc <main+0x76>
    30cc:	00 d0       	rcall	.+0      	; 0x30ce <main+0x78>
    30ce:	ed b7       	in	r30, 0x3d	; 61
    30d0:	fe b7       	in	r31, 0x3e	; 62
    30d2:	31 96       	adiw	r30, 0x01	; 1
    30d4:	80 83       	st	Z, r24
    30d6:	91 83       	std	Z+1, r25	; 0x01
    30d8:	a2 83       	std	Z+2, r26	; 0x02
    30da:	b3 83       	std	Z+3, r27	; 0x03
    30dc:	60 e0       	ldi	r22, 0x00	; 0
    30de:	70 e0       	ldi	r23, 0x00	; 0
    30e0:	80 e0       	ldi	r24, 0x00	; 0
    30e2:	90 e0       	ldi	r25, 0x00	; 0
    30e4:	20 e0       	ldi	r18, 0x00	; 0
    30e6:	30 e0       	ldi	r19, 0x00	; 0
    30e8:	40 e8       	ldi	r20, 0x80	; 128
    30ea:	54 e4       	ldi	r21, 0x44	; 68
    30ec:	0f 2e       	mov	r0, r31
    30ee:	f0 e0       	ldi	r31, 0x00	; 0
    30f0:	ef 2e       	mov	r14, r31
    30f2:	f0 e0       	ldi	r31, 0x00	; 0
    30f4:	ff 2e       	mov	r15, r31
    30f6:	f0 e0       	ldi	r31, 0x00	; 0
    30f8:	0f 2f       	mov	r16, r31
    30fa:	f0 e0       	ldi	r31, 0x00	; 0
    30fc:	1f 2f       	mov	r17, r31
    30fe:	f0 2d       	mov	r31, r0
    3100:	0f 2e       	mov	r0, r31
    3102:	f0 e0       	ldi	r31, 0x00	; 0
    3104:	af 2e       	mov	r10, r31
    3106:	f0 e0       	ldi	r31, 0x00	; 0
    3108:	bf 2e       	mov	r11, r31
    310a:	f0 e0       	ldi	r31, 0x00	; 0
    310c:	cf 2e       	mov	r12, r31
    310e:	f0 e0       	ldi	r31, 0x00	; 0
    3110:	df 2e       	mov	r13, r31
    3112:	f0 2d       	mov	r31, r0
    3114:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <Map>
    3118:	0f 90       	pop	r0
    311a:	0f 90       	pop	r0
    311c:	0f 90       	pop	r0
    311e:	0f 90       	pop	r0
    3120:	dc 01       	movw	r26, r24
    3122:	cb 01       	movw	r24, r22
    3124:	bc 01       	movw	r22, r24
    3126:	cd 01       	movw	r24, r26
    3128:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    312c:	dc 01       	movw	r26, r24
    312e:	cb 01       	movw	r24, r22
    3130:	9a 83       	std	Y+2, r25	; 0x02
    3132:	89 83       	std	Y+1, r24	; 0x01

		CLCD_VoidWriteNumber(Local_u8ReadingMap);
    3134:	89 81       	ldd	r24, Y+1	; 0x01
    3136:	9a 81       	ldd	r25, Y+2	; 0x02
    3138:	cc 01       	movw	r24, r24
    313a:	a0 e0       	ldi	r26, 0x00	; 0
    313c:	b0 e0       	ldi	r27, 0x00	; 0
    313e:	bc 01       	movw	r22, r24
    3140:	cd 01       	movw	r24, r26
    3142:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    3146:	dc 01       	movw	r26, r24
    3148:	cb 01       	movw	r24, r22
    314a:	bc 01       	movw	r22, r24
    314c:	cd 01       	movw	r24, r26
    314e:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <CLCD_VoidWriteNumber>


		TIMER1_SetChannelAComMatchValue(Local_u8ReadingMap);
    3152:	89 81       	ldd	r24, Y+1	; 0x01
    3154:	9a 81       	ldd	r25, Y+2	; 0x02
    3156:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <TIMER1_SetChannelAComMatchValue>
    315a:	a1 cf       	rjmp	.-190    	; 0x309e <main+0x48>

0000315c <__udivmodqi4>:
    315c:	99 1b       	sub	r25, r25
    315e:	79 e0       	ldi	r23, 0x09	; 9
    3160:	04 c0       	rjmp	.+8      	; 0x316a <__udivmodqi4_ep>

00003162 <__udivmodqi4_loop>:
    3162:	99 1f       	adc	r25, r25
    3164:	96 17       	cp	r25, r22
    3166:	08 f0       	brcs	.+2      	; 0x316a <__udivmodqi4_ep>
    3168:	96 1b       	sub	r25, r22

0000316a <__udivmodqi4_ep>:
    316a:	88 1f       	adc	r24, r24
    316c:	7a 95       	dec	r23
    316e:	c9 f7       	brne	.-14     	; 0x3162 <__udivmodqi4_loop>
    3170:	80 95       	com	r24
    3172:	08 95       	ret

00003174 <__divmodsi4>:
    3174:	97 fb       	bst	r25, 7
    3176:	09 2e       	mov	r0, r25
    3178:	05 26       	eor	r0, r21
    317a:	0e d0       	rcall	.+28     	; 0x3198 <__divmodsi4_neg1>
    317c:	57 fd       	sbrc	r21, 7
    317e:	04 d0       	rcall	.+8      	; 0x3188 <__divmodsi4_neg2>
    3180:	14 d0       	rcall	.+40     	; 0x31aa <__udivmodsi4>
    3182:	0a d0       	rcall	.+20     	; 0x3198 <__divmodsi4_neg1>
    3184:	00 1c       	adc	r0, r0
    3186:	38 f4       	brcc	.+14     	; 0x3196 <__divmodsi4_exit>

00003188 <__divmodsi4_neg2>:
    3188:	50 95       	com	r21
    318a:	40 95       	com	r20
    318c:	30 95       	com	r19
    318e:	21 95       	neg	r18
    3190:	3f 4f       	sbci	r19, 0xFF	; 255
    3192:	4f 4f       	sbci	r20, 0xFF	; 255
    3194:	5f 4f       	sbci	r21, 0xFF	; 255

00003196 <__divmodsi4_exit>:
    3196:	08 95       	ret

00003198 <__divmodsi4_neg1>:
    3198:	f6 f7       	brtc	.-4      	; 0x3196 <__divmodsi4_exit>
    319a:	90 95       	com	r25
    319c:	80 95       	com	r24
    319e:	70 95       	com	r23
    31a0:	61 95       	neg	r22
    31a2:	7f 4f       	sbci	r23, 0xFF	; 255
    31a4:	8f 4f       	sbci	r24, 0xFF	; 255
    31a6:	9f 4f       	sbci	r25, 0xFF	; 255
    31a8:	08 95       	ret

000031aa <__udivmodsi4>:
    31aa:	a1 e2       	ldi	r26, 0x21	; 33
    31ac:	1a 2e       	mov	r1, r26
    31ae:	aa 1b       	sub	r26, r26
    31b0:	bb 1b       	sub	r27, r27
    31b2:	fd 01       	movw	r30, r26
    31b4:	0d c0       	rjmp	.+26     	; 0x31d0 <__udivmodsi4_ep>

000031b6 <__udivmodsi4_loop>:
    31b6:	aa 1f       	adc	r26, r26
    31b8:	bb 1f       	adc	r27, r27
    31ba:	ee 1f       	adc	r30, r30
    31bc:	ff 1f       	adc	r31, r31
    31be:	a2 17       	cp	r26, r18
    31c0:	b3 07       	cpc	r27, r19
    31c2:	e4 07       	cpc	r30, r20
    31c4:	f5 07       	cpc	r31, r21
    31c6:	20 f0       	brcs	.+8      	; 0x31d0 <__udivmodsi4_ep>
    31c8:	a2 1b       	sub	r26, r18
    31ca:	b3 0b       	sbc	r27, r19
    31cc:	e4 0b       	sbc	r30, r20
    31ce:	f5 0b       	sbc	r31, r21

000031d0 <__udivmodsi4_ep>:
    31d0:	66 1f       	adc	r22, r22
    31d2:	77 1f       	adc	r23, r23
    31d4:	88 1f       	adc	r24, r24
    31d6:	99 1f       	adc	r25, r25
    31d8:	1a 94       	dec	r1
    31da:	69 f7       	brne	.-38     	; 0x31b6 <__udivmodsi4_loop>
    31dc:	60 95       	com	r22
    31de:	70 95       	com	r23
    31e0:	80 95       	com	r24
    31e2:	90 95       	com	r25
    31e4:	9b 01       	movw	r18, r22
    31e6:	ac 01       	movw	r20, r24
    31e8:	bd 01       	movw	r22, r26
    31ea:	cf 01       	movw	r24, r30
    31ec:	08 95       	ret

000031ee <__prologue_saves__>:
    31ee:	2f 92       	push	r2
    31f0:	3f 92       	push	r3
    31f2:	4f 92       	push	r4
    31f4:	5f 92       	push	r5
    31f6:	6f 92       	push	r6
    31f8:	7f 92       	push	r7
    31fa:	8f 92       	push	r8
    31fc:	9f 92       	push	r9
    31fe:	af 92       	push	r10
    3200:	bf 92       	push	r11
    3202:	cf 92       	push	r12
    3204:	df 92       	push	r13
    3206:	ef 92       	push	r14
    3208:	ff 92       	push	r15
    320a:	0f 93       	push	r16
    320c:	1f 93       	push	r17
    320e:	cf 93       	push	r28
    3210:	df 93       	push	r29
    3212:	cd b7       	in	r28, 0x3d	; 61
    3214:	de b7       	in	r29, 0x3e	; 62
    3216:	ca 1b       	sub	r28, r26
    3218:	db 0b       	sbc	r29, r27
    321a:	0f b6       	in	r0, 0x3f	; 63
    321c:	f8 94       	cli
    321e:	de bf       	out	0x3e, r29	; 62
    3220:	0f be       	out	0x3f, r0	; 63
    3222:	cd bf       	out	0x3d, r28	; 61
    3224:	09 94       	ijmp

00003226 <__epilogue_restores__>:
    3226:	2a 88       	ldd	r2, Y+18	; 0x12
    3228:	39 88       	ldd	r3, Y+17	; 0x11
    322a:	48 88       	ldd	r4, Y+16	; 0x10
    322c:	5f 84       	ldd	r5, Y+15	; 0x0f
    322e:	6e 84       	ldd	r6, Y+14	; 0x0e
    3230:	7d 84       	ldd	r7, Y+13	; 0x0d
    3232:	8c 84       	ldd	r8, Y+12	; 0x0c
    3234:	9b 84       	ldd	r9, Y+11	; 0x0b
    3236:	aa 84       	ldd	r10, Y+10	; 0x0a
    3238:	b9 84       	ldd	r11, Y+9	; 0x09
    323a:	c8 84       	ldd	r12, Y+8	; 0x08
    323c:	df 80       	ldd	r13, Y+7	; 0x07
    323e:	ee 80       	ldd	r14, Y+6	; 0x06
    3240:	fd 80       	ldd	r15, Y+5	; 0x05
    3242:	0c 81       	ldd	r16, Y+4	; 0x04
    3244:	1b 81       	ldd	r17, Y+3	; 0x03
    3246:	aa 81       	ldd	r26, Y+2	; 0x02
    3248:	b9 81       	ldd	r27, Y+1	; 0x01
    324a:	ce 0f       	add	r28, r30
    324c:	d1 1d       	adc	r29, r1
    324e:	0f b6       	in	r0, 0x3f	; 63
    3250:	f8 94       	cli
    3252:	de bf       	out	0x3e, r29	; 62
    3254:	0f be       	out	0x3f, r0	; 63
    3256:	cd bf       	out	0x3d, r28	; 61
    3258:	ed 01       	movw	r28, r26
    325a:	08 95       	ret

0000325c <_exit>:
    325c:	f8 94       	cli

0000325e <__stop_program>:
    325e:	ff cf       	rjmp	.-2      	; 0x325e <__stop_program>
