
testdivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002454  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000134  00800060  00002454  000024c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001ad0  00000000  00000000  000025fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000e05  00000000  00000000  000040cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001c0  00000000  00000000  00004ed1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000213  00000000  00000000  00005091  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002495  00000000  00000000  000052a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001412  00000000  00000000  00007739  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001209  00000000  00000000  00008b4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e0  00000000  00000000  00009d54  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002da  00000000  00000000  00009f34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000996  00000000  00000000  0000a20e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000aba4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e5       	ldi	r30, 0x54	; 84
      68:	f4 e2       	ldi	r31, 0x24	; 36
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 39       	cpi	r26, 0x94	; 148
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 77 10 	call	0x20ee	; 0x20ee <main>
      7a:	0c 94 28 12 	jmp	0x2450	; 0x2450 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 2f 04 	call	0x85e	; 0x85e <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 2f 04 	call	0x85e	; 0x85e <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 f1 11 	jmp	0x23e2	; 0x23e2 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a4 e7       	ldi	r26, 0x74	; 116
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 0d 12 	jmp	0x241a	; 0x241a <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 fd 11 	jmp	0x23fa	; 0x23fa <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 20 06 	call	0xc40	; 0xc40 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 20 06 	call	0xc40	; 0xc40 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 4b 05 	call	0xa96	; 0xa96 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 19 12 	jmp	0x2432	; 0x2432 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 fd 11 	jmp	0x23fa	; 0x23fa <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 20 06 	call	0xc40	; 0xc40 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 20 06 	call	0xc40	; 0xc40 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 4b 05 	call	0xa96	; 0xa96 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 19 12 	jmp	0x2432	; 0x2432 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 f1 11 	jmp	0x23e2	; 0x23e2 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 20 06 	call	0xc40	; 0xc40 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 20 06 	call	0xc40	; 0xc40 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	84 e7       	ldi	r24, 0x74	; 116
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 4b 05 	call	0xa96	; 0xa96 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 0d 12 	jmp	0x241a	; 0x241a <__epilogue_restores__>

00000622 <__eqsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 fd 11 	jmp	0x23fa	; 0x23fa <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 20 06 	call	0xc40	; 0xc40 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 20 06 	call	0xc40	; 0xc40 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__eqsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__eqsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 98 06 	call	0xd30	; 0xd30 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__eqsf2+0x58>
     678:	81 e0       	ldi	r24, 0x01	; 1
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 19 12 	jmp	0x2432	; 0x2432 <__epilogue_restores__+0x18>

00000682 <__gtsf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 fd 11 	jmp	0x23fa	; 0x23fa <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 20 06 	call	0xc40	; 0xc40 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 20 06 	call	0xc40	; 0xc40 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gtsf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gtsf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 98 06 	call	0xd30	; 0xd30 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gtsf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 19 12 	jmp	0x2432	; 0x2432 <__epilogue_restores__+0x18>

000006e2 <__gesf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 fd 11 	jmp	0x23fa	; 0x23fa <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 20 06 	call	0xc40	; 0xc40 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 20 06 	call	0xc40	; 0xc40 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__gesf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__gesf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 98 06 	call	0xd30	; 0xd30 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__gesf2+0x58>
     738:	8f ef       	ldi	r24, 0xFF	; 255
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 19 12 	jmp	0x2432	; 0x2432 <__epilogue_restores__+0x18>

00000742 <__ltsf2>:
     742:	a8 e1       	ldi	r26, 0x18	; 24
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 fd 11 	jmp	0x23fa	; 0x23fa <__prologue_saves__+0x18>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	2d 83       	std	Y+5, r18	; 0x05
     758:	3e 83       	std	Y+6, r19	; 0x06
     75a:	4f 83       	std	Y+7, r20	; 0x07
     75c:	58 87       	std	Y+8, r21	; 0x08
     75e:	89 e0       	ldi	r24, 0x09	; 9
     760:	e8 2e       	mov	r14, r24
     762:	f1 2c       	mov	r15, r1
     764:	ec 0e       	add	r14, r28
     766:	fd 1e       	adc	r15, r29
     768:	ce 01       	movw	r24, r28
     76a:	01 96       	adiw	r24, 0x01	; 1
     76c:	b7 01       	movw	r22, r14
     76e:	0e 94 20 06 	call	0xc40	; 0xc40 <__unpack_f>
     772:	8e 01       	movw	r16, r28
     774:	0f 5e       	subi	r16, 0xEF	; 239
     776:	1f 4f       	sbci	r17, 0xFF	; 255
     778:	ce 01       	movw	r24, r28
     77a:	05 96       	adiw	r24, 0x05	; 5
     77c:	b8 01       	movw	r22, r16
     77e:	0e 94 20 06 	call	0xc40	; 0xc40 <__unpack_f>
     782:	89 85       	ldd	r24, Y+9	; 0x09
     784:	82 30       	cpi	r24, 0x02	; 2
     786:	40 f0       	brcs	.+16     	; 0x798 <__ltsf2+0x56>
     788:	89 89       	ldd	r24, Y+17	; 0x11
     78a:	82 30       	cpi	r24, 0x02	; 2
     78c:	28 f0       	brcs	.+10     	; 0x798 <__ltsf2+0x56>
     78e:	c7 01       	movw	r24, r14
     790:	b8 01       	movw	r22, r16
     792:	0e 94 98 06 	call	0xd30	; 0xd30 <__fpcmp_parts_f>
     796:	01 c0       	rjmp	.+2      	; 0x79a <__ltsf2+0x58>
     798:	81 e0       	ldi	r24, 0x01	; 1
     79a:	68 96       	adiw	r28, 0x18	; 24
     79c:	e6 e0       	ldi	r30, 0x06	; 6
     79e:	0c 94 19 12 	jmp	0x2432	; 0x2432 <__epilogue_restores__+0x18>

000007a2 <__floatsisf>:
     7a2:	a8 e0       	ldi	r26, 0x08	; 8
     7a4:	b0 e0       	ldi	r27, 0x00	; 0
     7a6:	e7 ed       	ldi	r30, 0xD7	; 215
     7a8:	f3 e0       	ldi	r31, 0x03	; 3
     7aa:	0c 94 fa 11 	jmp	0x23f4	; 0x23f4 <__prologue_saves__+0x12>
     7ae:	9b 01       	movw	r18, r22
     7b0:	ac 01       	movw	r20, r24
     7b2:	83 e0       	ldi	r24, 0x03	; 3
     7b4:	89 83       	std	Y+1, r24	; 0x01
     7b6:	da 01       	movw	r26, r20
     7b8:	c9 01       	movw	r24, r18
     7ba:	88 27       	eor	r24, r24
     7bc:	b7 fd       	sbrc	r27, 7
     7be:	83 95       	inc	r24
     7c0:	99 27       	eor	r25, r25
     7c2:	aa 27       	eor	r26, r26
     7c4:	bb 27       	eor	r27, r27
     7c6:	b8 2e       	mov	r11, r24
     7c8:	21 15       	cp	r18, r1
     7ca:	31 05       	cpc	r19, r1
     7cc:	41 05       	cpc	r20, r1
     7ce:	51 05       	cpc	r21, r1
     7d0:	19 f4       	brne	.+6      	; 0x7d8 <__floatsisf+0x36>
     7d2:	82 e0       	ldi	r24, 0x02	; 2
     7d4:	89 83       	std	Y+1, r24	; 0x01
     7d6:	3a c0       	rjmp	.+116    	; 0x84c <__floatsisf+0xaa>
     7d8:	88 23       	and	r24, r24
     7da:	a9 f0       	breq	.+42     	; 0x806 <__floatsisf+0x64>
     7dc:	20 30       	cpi	r18, 0x00	; 0
     7de:	80 e0       	ldi	r24, 0x00	; 0
     7e0:	38 07       	cpc	r19, r24
     7e2:	80 e0       	ldi	r24, 0x00	; 0
     7e4:	48 07       	cpc	r20, r24
     7e6:	80 e8       	ldi	r24, 0x80	; 128
     7e8:	58 07       	cpc	r21, r24
     7ea:	29 f4       	brne	.+10     	; 0x7f6 <__floatsisf+0x54>
     7ec:	60 e0       	ldi	r22, 0x00	; 0
     7ee:	70 e0       	ldi	r23, 0x00	; 0
     7f0:	80 e0       	ldi	r24, 0x00	; 0
     7f2:	9f ec       	ldi	r25, 0xCF	; 207
     7f4:	30 c0       	rjmp	.+96     	; 0x856 <__floatsisf+0xb4>
     7f6:	ee 24       	eor	r14, r14
     7f8:	ff 24       	eor	r15, r15
     7fa:	87 01       	movw	r16, r14
     7fc:	e2 1a       	sub	r14, r18
     7fe:	f3 0a       	sbc	r15, r19
     800:	04 0b       	sbc	r16, r20
     802:	15 0b       	sbc	r17, r21
     804:	02 c0       	rjmp	.+4      	; 0x80a <__floatsisf+0x68>
     806:	79 01       	movw	r14, r18
     808:	8a 01       	movw	r16, r20
     80a:	8e e1       	ldi	r24, 0x1E	; 30
     80c:	c8 2e       	mov	r12, r24
     80e:	d1 2c       	mov	r13, r1
     810:	dc 82       	std	Y+4, r13	; 0x04
     812:	cb 82       	std	Y+3, r12	; 0x03
     814:	ed 82       	std	Y+5, r14	; 0x05
     816:	fe 82       	std	Y+6, r15	; 0x06
     818:	0f 83       	std	Y+7, r16	; 0x07
     81a:	18 87       	std	Y+8, r17	; 0x08
     81c:	c8 01       	movw	r24, r16
     81e:	b7 01       	movw	r22, r14
     820:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <__clzsi2>
     824:	01 97       	sbiw	r24, 0x01	; 1
     826:	18 16       	cp	r1, r24
     828:	19 06       	cpc	r1, r25
     82a:	84 f4       	brge	.+32     	; 0x84c <__floatsisf+0xaa>
     82c:	08 2e       	mov	r0, r24
     82e:	04 c0       	rjmp	.+8      	; 0x838 <__floatsisf+0x96>
     830:	ee 0c       	add	r14, r14
     832:	ff 1c       	adc	r15, r15
     834:	00 1f       	adc	r16, r16
     836:	11 1f       	adc	r17, r17
     838:	0a 94       	dec	r0
     83a:	d2 f7       	brpl	.-12     	; 0x830 <__floatsisf+0x8e>
     83c:	ed 82       	std	Y+5, r14	; 0x05
     83e:	fe 82       	std	Y+6, r15	; 0x06
     840:	0f 83       	std	Y+7, r16	; 0x07
     842:	18 87       	std	Y+8, r17	; 0x08
     844:	c8 1a       	sub	r12, r24
     846:	d9 0a       	sbc	r13, r25
     848:	dc 82       	std	Y+4, r13	; 0x04
     84a:	cb 82       	std	Y+3, r12	; 0x03
     84c:	ba 82       	std	Y+2, r11	; 0x02
     84e:	ce 01       	movw	r24, r28
     850:	01 96       	adiw	r24, 0x01	; 1
     852:	0e 94 4b 05 	call	0xa96	; 0xa96 <__pack_f>
     856:	28 96       	adiw	r28, 0x08	; 8
     858:	e9 e0       	ldi	r30, 0x09	; 9
     85a:	0c 94 16 12 	jmp	0x242c	; 0x242c <__epilogue_restores__+0x12>

0000085e <__fixsfsi>:
     85e:	ac e0       	ldi	r26, 0x0C	; 12
     860:	b0 e0       	ldi	r27, 0x00	; 0
     862:	e5 e3       	ldi	r30, 0x35	; 53
     864:	f4 e0       	ldi	r31, 0x04	; 4
     866:	0c 94 01 12 	jmp	0x2402	; 0x2402 <__prologue_saves__+0x20>
     86a:	69 83       	std	Y+1, r22	; 0x01
     86c:	7a 83       	std	Y+2, r23	; 0x02
     86e:	8b 83       	std	Y+3, r24	; 0x03
     870:	9c 83       	std	Y+4, r25	; 0x04
     872:	ce 01       	movw	r24, r28
     874:	01 96       	adiw	r24, 0x01	; 1
     876:	be 01       	movw	r22, r28
     878:	6b 5f       	subi	r22, 0xFB	; 251
     87a:	7f 4f       	sbci	r23, 0xFF	; 255
     87c:	0e 94 20 06 	call	0xc40	; 0xc40 <__unpack_f>
     880:	8d 81       	ldd	r24, Y+5	; 0x05
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	61 f1       	breq	.+88     	; 0x8de <__stack+0x7f>
     886:	82 30       	cpi	r24, 0x02	; 2
     888:	50 f1       	brcs	.+84     	; 0x8de <__stack+0x7f>
     88a:	84 30       	cpi	r24, 0x04	; 4
     88c:	21 f4       	brne	.+8      	; 0x896 <__stack+0x37>
     88e:	8e 81       	ldd	r24, Y+6	; 0x06
     890:	88 23       	and	r24, r24
     892:	51 f1       	breq	.+84     	; 0x8e8 <__stack+0x89>
     894:	2e c0       	rjmp	.+92     	; 0x8f2 <__stack+0x93>
     896:	2f 81       	ldd	r18, Y+7	; 0x07
     898:	38 85       	ldd	r19, Y+8	; 0x08
     89a:	37 fd       	sbrc	r19, 7
     89c:	20 c0       	rjmp	.+64     	; 0x8de <__stack+0x7f>
     89e:	6e 81       	ldd	r22, Y+6	; 0x06
     8a0:	2f 31       	cpi	r18, 0x1F	; 31
     8a2:	31 05       	cpc	r19, r1
     8a4:	1c f0       	brlt	.+6      	; 0x8ac <__stack+0x4d>
     8a6:	66 23       	and	r22, r22
     8a8:	f9 f0       	breq	.+62     	; 0x8e8 <__stack+0x89>
     8aa:	23 c0       	rjmp	.+70     	; 0x8f2 <__stack+0x93>
     8ac:	8e e1       	ldi	r24, 0x1E	; 30
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	82 1b       	sub	r24, r18
     8b2:	93 0b       	sbc	r25, r19
     8b4:	29 85       	ldd	r18, Y+9	; 0x09
     8b6:	3a 85       	ldd	r19, Y+10	; 0x0a
     8b8:	4b 85       	ldd	r20, Y+11	; 0x0b
     8ba:	5c 85       	ldd	r21, Y+12	; 0x0c
     8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <__stack+0x67>
     8be:	56 95       	lsr	r21
     8c0:	47 95       	ror	r20
     8c2:	37 95       	ror	r19
     8c4:	27 95       	ror	r18
     8c6:	8a 95       	dec	r24
     8c8:	d2 f7       	brpl	.-12     	; 0x8be <__stack+0x5f>
     8ca:	66 23       	and	r22, r22
     8cc:	b1 f0       	breq	.+44     	; 0x8fa <__stack+0x9b>
     8ce:	50 95       	com	r21
     8d0:	40 95       	com	r20
     8d2:	30 95       	com	r19
     8d4:	21 95       	neg	r18
     8d6:	3f 4f       	sbci	r19, 0xFF	; 255
     8d8:	4f 4f       	sbci	r20, 0xFF	; 255
     8da:	5f 4f       	sbci	r21, 0xFF	; 255
     8dc:	0e c0       	rjmp	.+28     	; 0x8fa <__stack+0x9b>
     8de:	20 e0       	ldi	r18, 0x00	; 0
     8e0:	30 e0       	ldi	r19, 0x00	; 0
     8e2:	40 e0       	ldi	r20, 0x00	; 0
     8e4:	50 e0       	ldi	r21, 0x00	; 0
     8e6:	09 c0       	rjmp	.+18     	; 0x8fa <__stack+0x9b>
     8e8:	2f ef       	ldi	r18, 0xFF	; 255
     8ea:	3f ef       	ldi	r19, 0xFF	; 255
     8ec:	4f ef       	ldi	r20, 0xFF	; 255
     8ee:	5f e7       	ldi	r21, 0x7F	; 127
     8f0:	04 c0       	rjmp	.+8      	; 0x8fa <__stack+0x9b>
     8f2:	20 e0       	ldi	r18, 0x00	; 0
     8f4:	30 e0       	ldi	r19, 0x00	; 0
     8f6:	40 e0       	ldi	r20, 0x00	; 0
     8f8:	50 e8       	ldi	r21, 0x80	; 128
     8fa:	b9 01       	movw	r22, r18
     8fc:	ca 01       	movw	r24, r20
     8fe:	2c 96       	adiw	r28, 0x0c	; 12
     900:	e2 e0       	ldi	r30, 0x02	; 2
     902:	0c 94 1d 12 	jmp	0x243a	; 0x243a <__epilogue_restores__+0x20>

00000906 <__floatunsisf>:
     906:	a8 e0       	ldi	r26, 0x08	; 8
     908:	b0 e0       	ldi	r27, 0x00	; 0
     90a:	e9 e8       	ldi	r30, 0x89	; 137
     90c:	f4 e0       	ldi	r31, 0x04	; 4
     90e:	0c 94 f9 11 	jmp	0x23f2	; 0x23f2 <__prologue_saves__+0x10>
     912:	7b 01       	movw	r14, r22
     914:	8c 01       	movw	r16, r24
     916:	61 15       	cp	r22, r1
     918:	71 05       	cpc	r23, r1
     91a:	81 05       	cpc	r24, r1
     91c:	91 05       	cpc	r25, r1
     91e:	19 f4       	brne	.+6      	; 0x926 <__floatunsisf+0x20>
     920:	82 e0       	ldi	r24, 0x02	; 2
     922:	89 83       	std	Y+1, r24	; 0x01
     924:	60 c0       	rjmp	.+192    	; 0x9e6 <__floatunsisf+0xe0>
     926:	83 e0       	ldi	r24, 0x03	; 3
     928:	89 83       	std	Y+1, r24	; 0x01
     92a:	8e e1       	ldi	r24, 0x1E	; 30
     92c:	c8 2e       	mov	r12, r24
     92e:	d1 2c       	mov	r13, r1
     930:	dc 82       	std	Y+4, r13	; 0x04
     932:	cb 82       	std	Y+3, r12	; 0x03
     934:	ed 82       	std	Y+5, r14	; 0x05
     936:	fe 82       	std	Y+6, r15	; 0x06
     938:	0f 83       	std	Y+7, r16	; 0x07
     93a:	18 87       	std	Y+8, r17	; 0x08
     93c:	c8 01       	movw	r24, r16
     93e:	b7 01       	movw	r22, r14
     940:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <__clzsi2>
     944:	fc 01       	movw	r30, r24
     946:	31 97       	sbiw	r30, 0x01	; 1
     948:	f7 ff       	sbrs	r31, 7
     94a:	3b c0       	rjmp	.+118    	; 0x9c2 <__floatunsisf+0xbc>
     94c:	22 27       	eor	r18, r18
     94e:	33 27       	eor	r19, r19
     950:	2e 1b       	sub	r18, r30
     952:	3f 0b       	sbc	r19, r31
     954:	57 01       	movw	r10, r14
     956:	68 01       	movw	r12, r16
     958:	02 2e       	mov	r0, r18
     95a:	04 c0       	rjmp	.+8      	; 0x964 <__floatunsisf+0x5e>
     95c:	d6 94       	lsr	r13
     95e:	c7 94       	ror	r12
     960:	b7 94       	ror	r11
     962:	a7 94       	ror	r10
     964:	0a 94       	dec	r0
     966:	d2 f7       	brpl	.-12     	; 0x95c <__floatunsisf+0x56>
     968:	40 e0       	ldi	r20, 0x00	; 0
     96a:	50 e0       	ldi	r21, 0x00	; 0
     96c:	60 e0       	ldi	r22, 0x00	; 0
     96e:	70 e0       	ldi	r23, 0x00	; 0
     970:	81 e0       	ldi	r24, 0x01	; 1
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	a0 e0       	ldi	r26, 0x00	; 0
     976:	b0 e0       	ldi	r27, 0x00	; 0
     978:	04 c0       	rjmp	.+8      	; 0x982 <__floatunsisf+0x7c>
     97a:	88 0f       	add	r24, r24
     97c:	99 1f       	adc	r25, r25
     97e:	aa 1f       	adc	r26, r26
     980:	bb 1f       	adc	r27, r27
     982:	2a 95       	dec	r18
     984:	d2 f7       	brpl	.-12     	; 0x97a <__floatunsisf+0x74>
     986:	01 97       	sbiw	r24, 0x01	; 1
     988:	a1 09       	sbc	r26, r1
     98a:	b1 09       	sbc	r27, r1
     98c:	8e 21       	and	r24, r14
     98e:	9f 21       	and	r25, r15
     990:	a0 23       	and	r26, r16
     992:	b1 23       	and	r27, r17
     994:	00 97       	sbiw	r24, 0x00	; 0
     996:	a1 05       	cpc	r26, r1
     998:	b1 05       	cpc	r27, r1
     99a:	21 f0       	breq	.+8      	; 0x9a4 <__floatunsisf+0x9e>
     99c:	41 e0       	ldi	r20, 0x01	; 1
     99e:	50 e0       	ldi	r21, 0x00	; 0
     9a0:	60 e0       	ldi	r22, 0x00	; 0
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	4a 29       	or	r20, r10
     9a6:	5b 29       	or	r21, r11
     9a8:	6c 29       	or	r22, r12
     9aa:	7d 29       	or	r23, r13
     9ac:	4d 83       	std	Y+5, r20	; 0x05
     9ae:	5e 83       	std	Y+6, r21	; 0x06
     9b0:	6f 83       	std	Y+7, r22	; 0x07
     9b2:	78 87       	std	Y+8, r23	; 0x08
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	8e 1b       	sub	r24, r30
     9ba:	9f 0b       	sbc	r25, r31
     9bc:	9c 83       	std	Y+4, r25	; 0x04
     9be:	8b 83       	std	Y+3, r24	; 0x03
     9c0:	12 c0       	rjmp	.+36     	; 0x9e6 <__floatunsisf+0xe0>
     9c2:	30 97       	sbiw	r30, 0x00	; 0
     9c4:	81 f0       	breq	.+32     	; 0x9e6 <__floatunsisf+0xe0>
     9c6:	0e 2e       	mov	r0, r30
     9c8:	04 c0       	rjmp	.+8      	; 0x9d2 <__floatunsisf+0xcc>
     9ca:	ee 0c       	add	r14, r14
     9cc:	ff 1c       	adc	r15, r15
     9ce:	00 1f       	adc	r16, r16
     9d0:	11 1f       	adc	r17, r17
     9d2:	0a 94       	dec	r0
     9d4:	d2 f7       	brpl	.-12     	; 0x9ca <__floatunsisf+0xc4>
     9d6:	ed 82       	std	Y+5, r14	; 0x05
     9d8:	fe 82       	std	Y+6, r15	; 0x06
     9da:	0f 83       	std	Y+7, r16	; 0x07
     9dc:	18 87       	std	Y+8, r17	; 0x08
     9de:	ce 1a       	sub	r12, r30
     9e0:	df 0a       	sbc	r13, r31
     9e2:	dc 82       	std	Y+4, r13	; 0x04
     9e4:	cb 82       	std	Y+3, r12	; 0x03
     9e6:	1a 82       	std	Y+2, r1	; 0x02
     9e8:	ce 01       	movw	r24, r28
     9ea:	01 96       	adiw	r24, 0x01	; 1
     9ec:	0e 94 4b 05 	call	0xa96	; 0xa96 <__pack_f>
     9f0:	28 96       	adiw	r28, 0x08	; 8
     9f2:	ea e0       	ldi	r30, 0x0A	; 10
     9f4:	0c 94 15 12 	jmp	0x242a	; 0x242a <__epilogue_restores__+0x10>

000009f8 <__clzsi2>:
     9f8:	ef 92       	push	r14
     9fa:	ff 92       	push	r15
     9fc:	0f 93       	push	r16
     9fe:	1f 93       	push	r17
     a00:	7b 01       	movw	r14, r22
     a02:	8c 01       	movw	r16, r24
     a04:	80 e0       	ldi	r24, 0x00	; 0
     a06:	e8 16       	cp	r14, r24
     a08:	80 e0       	ldi	r24, 0x00	; 0
     a0a:	f8 06       	cpc	r15, r24
     a0c:	81 e0       	ldi	r24, 0x01	; 1
     a0e:	08 07       	cpc	r16, r24
     a10:	80 e0       	ldi	r24, 0x00	; 0
     a12:	18 07       	cpc	r17, r24
     a14:	88 f4       	brcc	.+34     	; 0xa38 <__clzsi2+0x40>
     a16:	8f ef       	ldi	r24, 0xFF	; 255
     a18:	e8 16       	cp	r14, r24
     a1a:	f1 04       	cpc	r15, r1
     a1c:	01 05       	cpc	r16, r1
     a1e:	11 05       	cpc	r17, r1
     a20:	31 f0       	breq	.+12     	; 0xa2e <__clzsi2+0x36>
     a22:	28 f0       	brcs	.+10     	; 0xa2e <__clzsi2+0x36>
     a24:	88 e0       	ldi	r24, 0x08	; 8
     a26:	90 e0       	ldi	r25, 0x00	; 0
     a28:	a0 e0       	ldi	r26, 0x00	; 0
     a2a:	b0 e0       	ldi	r27, 0x00	; 0
     a2c:	17 c0       	rjmp	.+46     	; 0xa5c <__clzsi2+0x64>
     a2e:	80 e0       	ldi	r24, 0x00	; 0
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	a0 e0       	ldi	r26, 0x00	; 0
     a34:	b0 e0       	ldi	r27, 0x00	; 0
     a36:	12 c0       	rjmp	.+36     	; 0xa5c <__clzsi2+0x64>
     a38:	80 e0       	ldi	r24, 0x00	; 0
     a3a:	e8 16       	cp	r14, r24
     a3c:	80 e0       	ldi	r24, 0x00	; 0
     a3e:	f8 06       	cpc	r15, r24
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	08 07       	cpc	r16, r24
     a44:	81 e0       	ldi	r24, 0x01	; 1
     a46:	18 07       	cpc	r17, r24
     a48:	28 f0       	brcs	.+10     	; 0xa54 <__clzsi2+0x5c>
     a4a:	88 e1       	ldi	r24, 0x18	; 24
     a4c:	90 e0       	ldi	r25, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	b0 e0       	ldi	r27, 0x00	; 0
     a52:	04 c0       	rjmp	.+8      	; 0xa5c <__clzsi2+0x64>
     a54:	80 e1       	ldi	r24, 0x10	; 16
     a56:	90 e0       	ldi	r25, 0x00	; 0
     a58:	a0 e0       	ldi	r26, 0x00	; 0
     a5a:	b0 e0       	ldi	r27, 0x00	; 0
     a5c:	20 e2       	ldi	r18, 0x20	; 32
     a5e:	30 e0       	ldi	r19, 0x00	; 0
     a60:	40 e0       	ldi	r20, 0x00	; 0
     a62:	50 e0       	ldi	r21, 0x00	; 0
     a64:	28 1b       	sub	r18, r24
     a66:	39 0b       	sbc	r19, r25
     a68:	4a 0b       	sbc	r20, r26
     a6a:	5b 0b       	sbc	r21, r27
     a6c:	04 c0       	rjmp	.+8      	; 0xa76 <__clzsi2+0x7e>
     a6e:	16 95       	lsr	r17
     a70:	07 95       	ror	r16
     a72:	f7 94       	ror	r15
     a74:	e7 94       	ror	r14
     a76:	8a 95       	dec	r24
     a78:	d2 f7       	brpl	.-12     	; 0xa6e <__clzsi2+0x76>
     a7a:	f7 01       	movw	r30, r14
     a7c:	e4 58       	subi	r30, 0x84	; 132
     a7e:	ff 4f       	sbci	r31, 0xFF	; 255
     a80:	80 81       	ld	r24, Z
     a82:	28 1b       	sub	r18, r24
     a84:	31 09       	sbc	r19, r1
     a86:	41 09       	sbc	r20, r1
     a88:	51 09       	sbc	r21, r1
     a8a:	c9 01       	movw	r24, r18
     a8c:	1f 91       	pop	r17
     a8e:	0f 91       	pop	r16
     a90:	ff 90       	pop	r15
     a92:	ef 90       	pop	r14
     a94:	08 95       	ret

00000a96 <__pack_f>:
     a96:	df 92       	push	r13
     a98:	ef 92       	push	r14
     a9a:	ff 92       	push	r15
     a9c:	0f 93       	push	r16
     a9e:	1f 93       	push	r17
     aa0:	fc 01       	movw	r30, r24
     aa2:	e4 80       	ldd	r14, Z+4	; 0x04
     aa4:	f5 80       	ldd	r15, Z+5	; 0x05
     aa6:	06 81       	ldd	r16, Z+6	; 0x06
     aa8:	17 81       	ldd	r17, Z+7	; 0x07
     aaa:	d1 80       	ldd	r13, Z+1	; 0x01
     aac:	80 81       	ld	r24, Z
     aae:	82 30       	cpi	r24, 0x02	; 2
     ab0:	48 f4       	brcc	.+18     	; 0xac4 <__pack_f+0x2e>
     ab2:	80 e0       	ldi	r24, 0x00	; 0
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	a0 e1       	ldi	r26, 0x10	; 16
     ab8:	b0 e0       	ldi	r27, 0x00	; 0
     aba:	e8 2a       	or	r14, r24
     abc:	f9 2a       	or	r15, r25
     abe:	0a 2b       	or	r16, r26
     ac0:	1b 2b       	or	r17, r27
     ac2:	a5 c0       	rjmp	.+330    	; 0xc0e <__pack_f+0x178>
     ac4:	84 30       	cpi	r24, 0x04	; 4
     ac6:	09 f4       	brne	.+2      	; 0xaca <__pack_f+0x34>
     ac8:	9f c0       	rjmp	.+318    	; 0xc08 <__pack_f+0x172>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	21 f4       	brne	.+8      	; 0xad6 <__pack_f+0x40>
     ace:	ee 24       	eor	r14, r14
     ad0:	ff 24       	eor	r15, r15
     ad2:	87 01       	movw	r16, r14
     ad4:	05 c0       	rjmp	.+10     	; 0xae0 <__pack_f+0x4a>
     ad6:	e1 14       	cp	r14, r1
     ad8:	f1 04       	cpc	r15, r1
     ada:	01 05       	cpc	r16, r1
     adc:	11 05       	cpc	r17, r1
     ade:	19 f4       	brne	.+6      	; 0xae6 <__pack_f+0x50>
     ae0:	e0 e0       	ldi	r30, 0x00	; 0
     ae2:	f0 e0       	ldi	r31, 0x00	; 0
     ae4:	96 c0       	rjmp	.+300    	; 0xc12 <__pack_f+0x17c>
     ae6:	62 81       	ldd	r22, Z+2	; 0x02
     ae8:	73 81       	ldd	r23, Z+3	; 0x03
     aea:	9f ef       	ldi	r25, 0xFF	; 255
     aec:	62 38       	cpi	r22, 0x82	; 130
     aee:	79 07       	cpc	r23, r25
     af0:	0c f0       	brlt	.+2      	; 0xaf4 <__pack_f+0x5e>
     af2:	5b c0       	rjmp	.+182    	; 0xbaa <__pack_f+0x114>
     af4:	22 e8       	ldi	r18, 0x82	; 130
     af6:	3f ef       	ldi	r19, 0xFF	; 255
     af8:	26 1b       	sub	r18, r22
     afa:	37 0b       	sbc	r19, r23
     afc:	2a 31       	cpi	r18, 0x1A	; 26
     afe:	31 05       	cpc	r19, r1
     b00:	2c f0       	brlt	.+10     	; 0xb0c <__pack_f+0x76>
     b02:	20 e0       	ldi	r18, 0x00	; 0
     b04:	30 e0       	ldi	r19, 0x00	; 0
     b06:	40 e0       	ldi	r20, 0x00	; 0
     b08:	50 e0       	ldi	r21, 0x00	; 0
     b0a:	2a c0       	rjmp	.+84     	; 0xb60 <__pack_f+0xca>
     b0c:	b8 01       	movw	r22, r16
     b0e:	a7 01       	movw	r20, r14
     b10:	02 2e       	mov	r0, r18
     b12:	04 c0       	rjmp	.+8      	; 0xb1c <__pack_f+0x86>
     b14:	76 95       	lsr	r23
     b16:	67 95       	ror	r22
     b18:	57 95       	ror	r21
     b1a:	47 95       	ror	r20
     b1c:	0a 94       	dec	r0
     b1e:	d2 f7       	brpl	.-12     	; 0xb14 <__pack_f+0x7e>
     b20:	81 e0       	ldi	r24, 0x01	; 1
     b22:	90 e0       	ldi	r25, 0x00	; 0
     b24:	a0 e0       	ldi	r26, 0x00	; 0
     b26:	b0 e0       	ldi	r27, 0x00	; 0
     b28:	04 c0       	rjmp	.+8      	; 0xb32 <__pack_f+0x9c>
     b2a:	88 0f       	add	r24, r24
     b2c:	99 1f       	adc	r25, r25
     b2e:	aa 1f       	adc	r26, r26
     b30:	bb 1f       	adc	r27, r27
     b32:	2a 95       	dec	r18
     b34:	d2 f7       	brpl	.-12     	; 0xb2a <__pack_f+0x94>
     b36:	01 97       	sbiw	r24, 0x01	; 1
     b38:	a1 09       	sbc	r26, r1
     b3a:	b1 09       	sbc	r27, r1
     b3c:	8e 21       	and	r24, r14
     b3e:	9f 21       	and	r25, r15
     b40:	a0 23       	and	r26, r16
     b42:	b1 23       	and	r27, r17
     b44:	00 97       	sbiw	r24, 0x00	; 0
     b46:	a1 05       	cpc	r26, r1
     b48:	b1 05       	cpc	r27, r1
     b4a:	21 f0       	breq	.+8      	; 0xb54 <__pack_f+0xbe>
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	a0 e0       	ldi	r26, 0x00	; 0
     b52:	b0 e0       	ldi	r27, 0x00	; 0
     b54:	9a 01       	movw	r18, r20
     b56:	ab 01       	movw	r20, r22
     b58:	28 2b       	or	r18, r24
     b5a:	39 2b       	or	r19, r25
     b5c:	4a 2b       	or	r20, r26
     b5e:	5b 2b       	or	r21, r27
     b60:	da 01       	movw	r26, r20
     b62:	c9 01       	movw	r24, r18
     b64:	8f 77       	andi	r24, 0x7F	; 127
     b66:	90 70       	andi	r25, 0x00	; 0
     b68:	a0 70       	andi	r26, 0x00	; 0
     b6a:	b0 70       	andi	r27, 0x00	; 0
     b6c:	80 34       	cpi	r24, 0x40	; 64
     b6e:	91 05       	cpc	r25, r1
     b70:	a1 05       	cpc	r26, r1
     b72:	b1 05       	cpc	r27, r1
     b74:	39 f4       	brne	.+14     	; 0xb84 <__pack_f+0xee>
     b76:	27 ff       	sbrs	r18, 7
     b78:	09 c0       	rjmp	.+18     	; 0xb8c <__pack_f+0xf6>
     b7a:	20 5c       	subi	r18, 0xC0	; 192
     b7c:	3f 4f       	sbci	r19, 0xFF	; 255
     b7e:	4f 4f       	sbci	r20, 0xFF	; 255
     b80:	5f 4f       	sbci	r21, 0xFF	; 255
     b82:	04 c0       	rjmp	.+8      	; 0xb8c <__pack_f+0xf6>
     b84:	21 5c       	subi	r18, 0xC1	; 193
     b86:	3f 4f       	sbci	r19, 0xFF	; 255
     b88:	4f 4f       	sbci	r20, 0xFF	; 255
     b8a:	5f 4f       	sbci	r21, 0xFF	; 255
     b8c:	e0 e0       	ldi	r30, 0x00	; 0
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	20 30       	cpi	r18, 0x00	; 0
     b92:	a0 e0       	ldi	r26, 0x00	; 0
     b94:	3a 07       	cpc	r19, r26
     b96:	a0 e0       	ldi	r26, 0x00	; 0
     b98:	4a 07       	cpc	r20, r26
     b9a:	a0 e4       	ldi	r26, 0x40	; 64
     b9c:	5a 07       	cpc	r21, r26
     b9e:	10 f0       	brcs	.+4      	; 0xba4 <__pack_f+0x10e>
     ba0:	e1 e0       	ldi	r30, 0x01	; 1
     ba2:	f0 e0       	ldi	r31, 0x00	; 0
     ba4:	79 01       	movw	r14, r18
     ba6:	8a 01       	movw	r16, r20
     ba8:	27 c0       	rjmp	.+78     	; 0xbf8 <__pack_f+0x162>
     baa:	60 38       	cpi	r22, 0x80	; 128
     bac:	71 05       	cpc	r23, r1
     bae:	64 f5       	brge	.+88     	; 0xc08 <__pack_f+0x172>
     bb0:	fb 01       	movw	r30, r22
     bb2:	e1 58       	subi	r30, 0x81	; 129
     bb4:	ff 4f       	sbci	r31, 0xFF	; 255
     bb6:	d8 01       	movw	r26, r16
     bb8:	c7 01       	movw	r24, r14
     bba:	8f 77       	andi	r24, 0x7F	; 127
     bbc:	90 70       	andi	r25, 0x00	; 0
     bbe:	a0 70       	andi	r26, 0x00	; 0
     bc0:	b0 70       	andi	r27, 0x00	; 0
     bc2:	80 34       	cpi	r24, 0x40	; 64
     bc4:	91 05       	cpc	r25, r1
     bc6:	a1 05       	cpc	r26, r1
     bc8:	b1 05       	cpc	r27, r1
     bca:	39 f4       	brne	.+14     	; 0xbda <__pack_f+0x144>
     bcc:	e7 fe       	sbrs	r14, 7
     bce:	0d c0       	rjmp	.+26     	; 0xbea <__pack_f+0x154>
     bd0:	80 e4       	ldi	r24, 0x40	; 64
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	a0 e0       	ldi	r26, 0x00	; 0
     bd6:	b0 e0       	ldi	r27, 0x00	; 0
     bd8:	04 c0       	rjmp	.+8      	; 0xbe2 <__pack_f+0x14c>
     bda:	8f e3       	ldi	r24, 0x3F	; 63
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	b0 e0       	ldi	r27, 0x00	; 0
     be2:	e8 0e       	add	r14, r24
     be4:	f9 1e       	adc	r15, r25
     be6:	0a 1f       	adc	r16, r26
     be8:	1b 1f       	adc	r17, r27
     bea:	17 ff       	sbrs	r17, 7
     bec:	05 c0       	rjmp	.+10     	; 0xbf8 <__pack_f+0x162>
     bee:	16 95       	lsr	r17
     bf0:	07 95       	ror	r16
     bf2:	f7 94       	ror	r15
     bf4:	e7 94       	ror	r14
     bf6:	31 96       	adiw	r30, 0x01	; 1
     bf8:	87 e0       	ldi	r24, 0x07	; 7
     bfa:	16 95       	lsr	r17
     bfc:	07 95       	ror	r16
     bfe:	f7 94       	ror	r15
     c00:	e7 94       	ror	r14
     c02:	8a 95       	dec	r24
     c04:	d1 f7       	brne	.-12     	; 0xbfa <__pack_f+0x164>
     c06:	05 c0       	rjmp	.+10     	; 0xc12 <__pack_f+0x17c>
     c08:	ee 24       	eor	r14, r14
     c0a:	ff 24       	eor	r15, r15
     c0c:	87 01       	movw	r16, r14
     c0e:	ef ef       	ldi	r30, 0xFF	; 255
     c10:	f0 e0       	ldi	r31, 0x00	; 0
     c12:	6e 2f       	mov	r22, r30
     c14:	67 95       	ror	r22
     c16:	66 27       	eor	r22, r22
     c18:	67 95       	ror	r22
     c1a:	90 2f       	mov	r25, r16
     c1c:	9f 77       	andi	r25, 0x7F	; 127
     c1e:	d7 94       	ror	r13
     c20:	dd 24       	eor	r13, r13
     c22:	d7 94       	ror	r13
     c24:	8e 2f       	mov	r24, r30
     c26:	86 95       	lsr	r24
     c28:	49 2f       	mov	r20, r25
     c2a:	46 2b       	or	r20, r22
     c2c:	58 2f       	mov	r21, r24
     c2e:	5d 29       	or	r21, r13
     c30:	b7 01       	movw	r22, r14
     c32:	ca 01       	movw	r24, r20
     c34:	1f 91       	pop	r17
     c36:	0f 91       	pop	r16
     c38:	ff 90       	pop	r15
     c3a:	ef 90       	pop	r14
     c3c:	df 90       	pop	r13
     c3e:	08 95       	ret

00000c40 <__unpack_f>:
     c40:	fc 01       	movw	r30, r24
     c42:	db 01       	movw	r26, r22
     c44:	40 81       	ld	r20, Z
     c46:	51 81       	ldd	r21, Z+1	; 0x01
     c48:	22 81       	ldd	r18, Z+2	; 0x02
     c4a:	62 2f       	mov	r22, r18
     c4c:	6f 77       	andi	r22, 0x7F	; 127
     c4e:	70 e0       	ldi	r23, 0x00	; 0
     c50:	22 1f       	adc	r18, r18
     c52:	22 27       	eor	r18, r18
     c54:	22 1f       	adc	r18, r18
     c56:	93 81       	ldd	r25, Z+3	; 0x03
     c58:	89 2f       	mov	r24, r25
     c5a:	88 0f       	add	r24, r24
     c5c:	82 2b       	or	r24, r18
     c5e:	28 2f       	mov	r18, r24
     c60:	30 e0       	ldi	r19, 0x00	; 0
     c62:	99 1f       	adc	r25, r25
     c64:	99 27       	eor	r25, r25
     c66:	99 1f       	adc	r25, r25
     c68:	11 96       	adiw	r26, 0x01	; 1
     c6a:	9c 93       	st	X, r25
     c6c:	11 97       	sbiw	r26, 0x01	; 1
     c6e:	21 15       	cp	r18, r1
     c70:	31 05       	cpc	r19, r1
     c72:	a9 f5       	brne	.+106    	; 0xcde <__unpack_f+0x9e>
     c74:	41 15       	cp	r20, r1
     c76:	51 05       	cpc	r21, r1
     c78:	61 05       	cpc	r22, r1
     c7a:	71 05       	cpc	r23, r1
     c7c:	11 f4       	brne	.+4      	; 0xc82 <__unpack_f+0x42>
     c7e:	82 e0       	ldi	r24, 0x02	; 2
     c80:	37 c0       	rjmp	.+110    	; 0xcf0 <__unpack_f+0xb0>
     c82:	82 e8       	ldi	r24, 0x82	; 130
     c84:	9f ef       	ldi	r25, 0xFF	; 255
     c86:	13 96       	adiw	r26, 0x03	; 3
     c88:	9c 93       	st	X, r25
     c8a:	8e 93       	st	-X, r24
     c8c:	12 97       	sbiw	r26, 0x02	; 2
     c8e:	9a 01       	movw	r18, r20
     c90:	ab 01       	movw	r20, r22
     c92:	67 e0       	ldi	r22, 0x07	; 7
     c94:	22 0f       	add	r18, r18
     c96:	33 1f       	adc	r19, r19
     c98:	44 1f       	adc	r20, r20
     c9a:	55 1f       	adc	r21, r21
     c9c:	6a 95       	dec	r22
     c9e:	d1 f7       	brne	.-12     	; 0xc94 <__unpack_f+0x54>
     ca0:	83 e0       	ldi	r24, 0x03	; 3
     ca2:	8c 93       	st	X, r24
     ca4:	0d c0       	rjmp	.+26     	; 0xcc0 <__unpack_f+0x80>
     ca6:	22 0f       	add	r18, r18
     ca8:	33 1f       	adc	r19, r19
     caa:	44 1f       	adc	r20, r20
     cac:	55 1f       	adc	r21, r21
     cae:	12 96       	adiw	r26, 0x02	; 2
     cb0:	8d 91       	ld	r24, X+
     cb2:	9c 91       	ld	r25, X
     cb4:	13 97       	sbiw	r26, 0x03	; 3
     cb6:	01 97       	sbiw	r24, 0x01	; 1
     cb8:	13 96       	adiw	r26, 0x03	; 3
     cba:	9c 93       	st	X, r25
     cbc:	8e 93       	st	-X, r24
     cbe:	12 97       	sbiw	r26, 0x02	; 2
     cc0:	20 30       	cpi	r18, 0x00	; 0
     cc2:	80 e0       	ldi	r24, 0x00	; 0
     cc4:	38 07       	cpc	r19, r24
     cc6:	80 e0       	ldi	r24, 0x00	; 0
     cc8:	48 07       	cpc	r20, r24
     cca:	80 e4       	ldi	r24, 0x40	; 64
     ccc:	58 07       	cpc	r21, r24
     cce:	58 f3       	brcs	.-42     	; 0xca6 <__unpack_f+0x66>
     cd0:	14 96       	adiw	r26, 0x04	; 4
     cd2:	2d 93       	st	X+, r18
     cd4:	3d 93       	st	X+, r19
     cd6:	4d 93       	st	X+, r20
     cd8:	5c 93       	st	X, r21
     cda:	17 97       	sbiw	r26, 0x07	; 7
     cdc:	08 95       	ret
     cde:	2f 3f       	cpi	r18, 0xFF	; 255
     ce0:	31 05       	cpc	r19, r1
     ce2:	79 f4       	brne	.+30     	; 0xd02 <__unpack_f+0xc2>
     ce4:	41 15       	cp	r20, r1
     ce6:	51 05       	cpc	r21, r1
     ce8:	61 05       	cpc	r22, r1
     cea:	71 05       	cpc	r23, r1
     cec:	19 f4       	brne	.+6      	; 0xcf4 <__unpack_f+0xb4>
     cee:	84 e0       	ldi	r24, 0x04	; 4
     cf0:	8c 93       	st	X, r24
     cf2:	08 95       	ret
     cf4:	64 ff       	sbrs	r22, 4
     cf6:	03 c0       	rjmp	.+6      	; 0xcfe <__unpack_f+0xbe>
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	8c 93       	st	X, r24
     cfc:	12 c0       	rjmp	.+36     	; 0xd22 <__unpack_f+0xe2>
     cfe:	1c 92       	st	X, r1
     d00:	10 c0       	rjmp	.+32     	; 0xd22 <__unpack_f+0xe2>
     d02:	2f 57       	subi	r18, 0x7F	; 127
     d04:	30 40       	sbci	r19, 0x00	; 0
     d06:	13 96       	adiw	r26, 0x03	; 3
     d08:	3c 93       	st	X, r19
     d0a:	2e 93       	st	-X, r18
     d0c:	12 97       	sbiw	r26, 0x02	; 2
     d0e:	83 e0       	ldi	r24, 0x03	; 3
     d10:	8c 93       	st	X, r24
     d12:	87 e0       	ldi	r24, 0x07	; 7
     d14:	44 0f       	add	r20, r20
     d16:	55 1f       	adc	r21, r21
     d18:	66 1f       	adc	r22, r22
     d1a:	77 1f       	adc	r23, r23
     d1c:	8a 95       	dec	r24
     d1e:	d1 f7       	brne	.-12     	; 0xd14 <__unpack_f+0xd4>
     d20:	70 64       	ori	r23, 0x40	; 64
     d22:	14 96       	adiw	r26, 0x04	; 4
     d24:	4d 93       	st	X+, r20
     d26:	5d 93       	st	X+, r21
     d28:	6d 93       	st	X+, r22
     d2a:	7c 93       	st	X, r23
     d2c:	17 97       	sbiw	r26, 0x07	; 7
     d2e:	08 95       	ret

00000d30 <__fpcmp_parts_f>:
     d30:	1f 93       	push	r17
     d32:	dc 01       	movw	r26, r24
     d34:	fb 01       	movw	r30, r22
     d36:	9c 91       	ld	r25, X
     d38:	92 30       	cpi	r25, 0x02	; 2
     d3a:	08 f4       	brcc	.+2      	; 0xd3e <__fpcmp_parts_f+0xe>
     d3c:	47 c0       	rjmp	.+142    	; 0xdcc <__fpcmp_parts_f+0x9c>
     d3e:	80 81       	ld	r24, Z
     d40:	82 30       	cpi	r24, 0x02	; 2
     d42:	08 f4       	brcc	.+2      	; 0xd46 <__fpcmp_parts_f+0x16>
     d44:	43 c0       	rjmp	.+134    	; 0xdcc <__fpcmp_parts_f+0x9c>
     d46:	94 30       	cpi	r25, 0x04	; 4
     d48:	51 f4       	brne	.+20     	; 0xd5e <__fpcmp_parts_f+0x2e>
     d4a:	11 96       	adiw	r26, 0x01	; 1
     d4c:	1c 91       	ld	r17, X
     d4e:	84 30       	cpi	r24, 0x04	; 4
     d50:	99 f5       	brne	.+102    	; 0xdb8 <__fpcmp_parts_f+0x88>
     d52:	81 81       	ldd	r24, Z+1	; 0x01
     d54:	68 2f       	mov	r22, r24
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	61 1b       	sub	r22, r17
     d5a:	71 09       	sbc	r23, r1
     d5c:	3f c0       	rjmp	.+126    	; 0xddc <__fpcmp_parts_f+0xac>
     d5e:	84 30       	cpi	r24, 0x04	; 4
     d60:	21 f0       	breq	.+8      	; 0xd6a <__fpcmp_parts_f+0x3a>
     d62:	92 30       	cpi	r25, 0x02	; 2
     d64:	31 f4       	brne	.+12     	; 0xd72 <__fpcmp_parts_f+0x42>
     d66:	82 30       	cpi	r24, 0x02	; 2
     d68:	b9 f1       	breq	.+110    	; 0xdd8 <__fpcmp_parts_f+0xa8>
     d6a:	81 81       	ldd	r24, Z+1	; 0x01
     d6c:	88 23       	and	r24, r24
     d6e:	89 f1       	breq	.+98     	; 0xdd2 <__fpcmp_parts_f+0xa2>
     d70:	2d c0       	rjmp	.+90     	; 0xdcc <__fpcmp_parts_f+0x9c>
     d72:	11 96       	adiw	r26, 0x01	; 1
     d74:	1c 91       	ld	r17, X
     d76:	11 97       	sbiw	r26, 0x01	; 1
     d78:	82 30       	cpi	r24, 0x02	; 2
     d7a:	f1 f0       	breq	.+60     	; 0xdb8 <__fpcmp_parts_f+0x88>
     d7c:	81 81       	ldd	r24, Z+1	; 0x01
     d7e:	18 17       	cp	r17, r24
     d80:	d9 f4       	brne	.+54     	; 0xdb8 <__fpcmp_parts_f+0x88>
     d82:	12 96       	adiw	r26, 0x02	; 2
     d84:	2d 91       	ld	r18, X+
     d86:	3c 91       	ld	r19, X
     d88:	13 97       	sbiw	r26, 0x03	; 3
     d8a:	82 81       	ldd	r24, Z+2	; 0x02
     d8c:	93 81       	ldd	r25, Z+3	; 0x03
     d8e:	82 17       	cp	r24, r18
     d90:	93 07       	cpc	r25, r19
     d92:	94 f0       	brlt	.+36     	; 0xdb8 <__fpcmp_parts_f+0x88>
     d94:	28 17       	cp	r18, r24
     d96:	39 07       	cpc	r19, r25
     d98:	bc f0       	brlt	.+46     	; 0xdc8 <__fpcmp_parts_f+0x98>
     d9a:	14 96       	adiw	r26, 0x04	; 4
     d9c:	8d 91       	ld	r24, X+
     d9e:	9d 91       	ld	r25, X+
     da0:	0d 90       	ld	r0, X+
     da2:	bc 91       	ld	r27, X
     da4:	a0 2d       	mov	r26, r0
     da6:	24 81       	ldd	r18, Z+4	; 0x04
     da8:	35 81       	ldd	r19, Z+5	; 0x05
     daa:	46 81       	ldd	r20, Z+6	; 0x06
     dac:	57 81       	ldd	r21, Z+7	; 0x07
     dae:	28 17       	cp	r18, r24
     db0:	39 07       	cpc	r19, r25
     db2:	4a 07       	cpc	r20, r26
     db4:	5b 07       	cpc	r21, r27
     db6:	18 f4       	brcc	.+6      	; 0xdbe <__fpcmp_parts_f+0x8e>
     db8:	11 23       	and	r17, r17
     dba:	41 f0       	breq	.+16     	; 0xdcc <__fpcmp_parts_f+0x9c>
     dbc:	0a c0       	rjmp	.+20     	; 0xdd2 <__fpcmp_parts_f+0xa2>
     dbe:	82 17       	cp	r24, r18
     dc0:	93 07       	cpc	r25, r19
     dc2:	a4 07       	cpc	r26, r20
     dc4:	b5 07       	cpc	r27, r21
     dc6:	40 f4       	brcc	.+16     	; 0xdd8 <__fpcmp_parts_f+0xa8>
     dc8:	11 23       	and	r17, r17
     dca:	19 f0       	breq	.+6      	; 0xdd2 <__fpcmp_parts_f+0xa2>
     dcc:	61 e0       	ldi	r22, 0x01	; 1
     dce:	70 e0       	ldi	r23, 0x00	; 0
     dd0:	05 c0       	rjmp	.+10     	; 0xddc <__fpcmp_parts_f+0xac>
     dd2:	6f ef       	ldi	r22, 0xFF	; 255
     dd4:	7f ef       	ldi	r23, 0xFF	; 255
     dd6:	02 c0       	rjmp	.+4      	; 0xddc <__fpcmp_parts_f+0xac>
     dd8:	60 e0       	ldi	r22, 0x00	; 0
     dda:	70 e0       	ldi	r23, 0x00	; 0
     ddc:	cb 01       	movw	r24, r22
     dde:	1f 91       	pop	r17
     de0:	08 95       	ret

00000de2 <C_LCD_voidSendCommand>:

#include "CLCD_private.h"


void C_LCD_voidSendCommand(u8 Copy_u8Command)
{
     de2:	1f 93       	push	r17
     de4:	df 93       	push	r29
     de6:	cf 93       	push	r28
     de8:	cd b7       	in	r28, 0x3d	; 61
     dea:	de b7       	in	r29, 0x3e	; 62
     dec:	ea 97       	sbiw	r28, 0x3a	; 58
     dee:	0f b6       	in	r0, 0x3f	; 63
     df0:	f8 94       	cli
     df2:	de bf       	out	0x3e, r29	; 62
     df4:	0f be       	out	0x3f, r0	; 63
     df6:	cd bf       	out	0x3d, r28	; 61
     df8:	8a af       	std	Y+58, r24	; 0x3a
	/*Set RS Pin to low to send command */
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_LOW);
     dfa:	82 e0       	ldi	r24, 0x02	; 2
     dfc:	62 e0       	ldi	r22, 0x02	; 2
     dfe:	40 e0       	ldi	r20, 0x00	; 0
     e00:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <DIO_u8SetPinValue>
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);

#elif   MODE_SELECT ==_4_BIT_MODE

	u8 Local_u8Command = (((Copy_u8Command ) & CLCD_COMMAND_MASK) | DIO_u8AndWithPort(CLCD_DATA_PORT, CLCD_DATA_PORT_MASK));
     e04:	8a ad       	ldd	r24, Y+58	; 0x3a
     e06:	18 2f       	mov	r17, r24
     e08:	10 7f       	andi	r17, 0xF0	; 240
     e0a:	82 e0       	ldi	r24, 0x02	; 2
     e0c:	6f e0       	ldi	r22, 0x0F	; 15
     e0e:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <DIO_u8AndWithPort>
     e12:	81 2b       	or	r24, r17
     e14:	89 af       	std	Y+57, r24	; 0x39
	/* Set Command to data pins */
	DIO_u8SetPortValue(CLCD_DATA_PORT,Local_u8Command);
     e16:	82 e0       	ldi	r24, 0x02	; 2
     e18:	69 ad       	ldd	r22, Y+57	; 0x39
     e1a:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <DIO_u8SetPortValue>

	/*Send Enable pulse */
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
     e1e:	82 e0       	ldi	r24, 0x02	; 2
     e20:	63 e0       	ldi	r22, 0x03	; 3
     e22:	41 e0       	ldi	r20, 0x01	; 1
     e24:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <DIO_u8SetPinValue>
     e28:	80 e0       	ldi	r24, 0x00	; 0
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	a0 e0       	ldi	r26, 0x00	; 0
     e2e:	b0 e4       	ldi	r27, 0x40	; 64
     e30:	8d ab       	std	Y+53, r24	; 0x35
     e32:	9e ab       	std	Y+54, r25	; 0x36
     e34:	af ab       	std	Y+55, r26	; 0x37
     e36:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e38:	6d a9       	ldd	r22, Y+53	; 0x35
     e3a:	7e a9       	ldd	r23, Y+54	; 0x36
     e3c:	8f a9       	ldd	r24, Y+55	; 0x37
     e3e:	98 ad       	ldd	r25, Y+56	; 0x38
     e40:	20 e0       	ldi	r18, 0x00	; 0
     e42:	30 e0       	ldi	r19, 0x00	; 0
     e44:	4a ef       	ldi	r20, 0xFA	; 250
     e46:	54 e4       	ldi	r21, 0x44	; 68
     e48:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e4c:	dc 01       	movw	r26, r24
     e4e:	cb 01       	movw	r24, r22
     e50:	89 ab       	std	Y+49, r24	; 0x31
     e52:	9a ab       	std	Y+50, r25	; 0x32
     e54:	ab ab       	std	Y+51, r26	; 0x33
     e56:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     e58:	69 a9       	ldd	r22, Y+49	; 0x31
     e5a:	7a a9       	ldd	r23, Y+50	; 0x32
     e5c:	8b a9       	ldd	r24, Y+51	; 0x33
     e5e:	9c a9       	ldd	r25, Y+52	; 0x34
     e60:	20 e0       	ldi	r18, 0x00	; 0
     e62:	30 e0       	ldi	r19, 0x00	; 0
     e64:	40 e8       	ldi	r20, 0x80	; 128
     e66:	5f e3       	ldi	r21, 0x3F	; 63
     e68:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
     e6c:	88 23       	and	r24, r24
     e6e:	2c f4       	brge	.+10     	; 0xe7a <C_LCD_voidSendCommand+0x98>
		__ticks = 1;
     e70:	81 e0       	ldi	r24, 0x01	; 1
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	98 ab       	std	Y+48, r25	; 0x30
     e76:	8f a7       	std	Y+47, r24	; 0x2f
     e78:	3f c0       	rjmp	.+126    	; 0xef8 <C_LCD_voidSendCommand+0x116>
	else if (__tmp > 65535)
     e7a:	69 a9       	ldd	r22, Y+49	; 0x31
     e7c:	7a a9       	ldd	r23, Y+50	; 0x32
     e7e:	8b a9       	ldd	r24, Y+51	; 0x33
     e80:	9c a9       	ldd	r25, Y+52	; 0x34
     e82:	20 e0       	ldi	r18, 0x00	; 0
     e84:	3f ef       	ldi	r19, 0xFF	; 255
     e86:	4f e7       	ldi	r20, 0x7F	; 127
     e88:	57 e4       	ldi	r21, 0x47	; 71
     e8a:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
     e8e:	18 16       	cp	r1, r24
     e90:	4c f5       	brge	.+82     	; 0xee4 <C_LCD_voidSendCommand+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e92:	6d a9       	ldd	r22, Y+53	; 0x35
     e94:	7e a9       	ldd	r23, Y+54	; 0x36
     e96:	8f a9       	ldd	r24, Y+55	; 0x37
     e98:	98 ad       	ldd	r25, Y+56	; 0x38
     e9a:	20 e0       	ldi	r18, 0x00	; 0
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	40 e2       	ldi	r20, 0x20	; 32
     ea0:	51 e4       	ldi	r21, 0x41	; 65
     ea2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     ea6:	dc 01       	movw	r26, r24
     ea8:	cb 01       	movw	r24, r22
     eaa:	bc 01       	movw	r22, r24
     eac:	cd 01       	movw	r24, r26
     eae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     eb2:	dc 01       	movw	r26, r24
     eb4:	cb 01       	movw	r24, r22
     eb6:	98 ab       	std	Y+48, r25	; 0x30
     eb8:	8f a7       	std	Y+47, r24	; 0x2f
     eba:	0f c0       	rjmp	.+30     	; 0xeda <C_LCD_voidSendCommand+0xf8>
     ebc:	88 ec       	ldi	r24, 0xC8	; 200
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	9e a7       	std	Y+46, r25	; 0x2e
     ec2:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ec4:	8d a5       	ldd	r24, Y+45	; 0x2d
     ec6:	9e a5       	ldd	r25, Y+46	; 0x2e
     ec8:	01 97       	sbiw	r24, 0x01	; 1
     eca:	f1 f7       	brne	.-4      	; 0xec8 <C_LCD_voidSendCommand+0xe6>
     ecc:	9e a7       	std	Y+46, r25	; 0x2e
     ece:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ed0:	8f a5       	ldd	r24, Y+47	; 0x2f
     ed2:	98 a9       	ldd	r25, Y+48	; 0x30
     ed4:	01 97       	sbiw	r24, 0x01	; 1
     ed6:	98 ab       	std	Y+48, r25	; 0x30
     ed8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     eda:	8f a5       	ldd	r24, Y+47	; 0x2f
     edc:	98 a9       	ldd	r25, Y+48	; 0x30
     ede:	00 97       	sbiw	r24, 0x00	; 0
     ee0:	69 f7       	brne	.-38     	; 0xebc <C_LCD_voidSendCommand+0xda>
     ee2:	14 c0       	rjmp	.+40     	; 0xf0c <C_LCD_voidSendCommand+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ee4:	69 a9       	ldd	r22, Y+49	; 0x31
     ee6:	7a a9       	ldd	r23, Y+50	; 0x32
     ee8:	8b a9       	ldd	r24, Y+51	; 0x33
     eea:	9c a9       	ldd	r25, Y+52	; 0x34
     eec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     ef0:	dc 01       	movw	r26, r24
     ef2:	cb 01       	movw	r24, r22
     ef4:	98 ab       	std	Y+48, r25	; 0x30
     ef6:	8f a7       	std	Y+47, r24	; 0x2f
     ef8:	8f a5       	ldd	r24, Y+47	; 0x2f
     efa:	98 a9       	ldd	r25, Y+48	; 0x30
     efc:	9c a7       	std	Y+44, r25	; 0x2c
     efe:	8b a7       	std	Y+43, r24	; 0x2b
     f00:	8b a5       	ldd	r24, Y+43	; 0x2b
     f02:	9c a5       	ldd	r25, Y+44	; 0x2c
     f04:	01 97       	sbiw	r24, 0x01	; 1
     f06:	f1 f7       	brne	.-4      	; 0xf04 <C_LCD_voidSendCommand+0x122>
     f08:	9c a7       	std	Y+44, r25	; 0x2c
     f0a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
     f0c:	82 e0       	ldi	r24, 0x02	; 2
     f0e:	63 e0       	ldi	r22, 0x03	; 3
     f10:	40 e0       	ldi	r20, 0x00	; 0
     f12:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <DIO_u8SetPinValue>
     f16:	80 e0       	ldi	r24, 0x00	; 0
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	a0 ea       	ldi	r26, 0xA0	; 160
     f1c:	b0 e4       	ldi	r27, 0x40	; 64
     f1e:	8f a3       	std	Y+39, r24	; 0x27
     f20:	98 a7       	std	Y+40, r25	; 0x28
     f22:	a9 a7       	std	Y+41, r26	; 0x29
     f24:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f26:	6f a1       	ldd	r22, Y+39	; 0x27
     f28:	78 a5       	ldd	r23, Y+40	; 0x28
     f2a:	89 a5       	ldd	r24, Y+41	; 0x29
     f2c:	9a a5       	ldd	r25, Y+42	; 0x2a
     f2e:	20 e0       	ldi	r18, 0x00	; 0
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	4a ef       	ldi	r20, 0xFA	; 250
     f34:	54 e4       	ldi	r21, 0x44	; 68
     f36:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f3a:	dc 01       	movw	r26, r24
     f3c:	cb 01       	movw	r24, r22
     f3e:	8b a3       	std	Y+35, r24	; 0x23
     f40:	9c a3       	std	Y+36, r25	; 0x24
     f42:	ad a3       	std	Y+37, r26	; 0x25
     f44:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     f46:	6b a1       	ldd	r22, Y+35	; 0x23
     f48:	7c a1       	ldd	r23, Y+36	; 0x24
     f4a:	8d a1       	ldd	r24, Y+37	; 0x25
     f4c:	9e a1       	ldd	r25, Y+38	; 0x26
     f4e:	20 e0       	ldi	r18, 0x00	; 0
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	40 e8       	ldi	r20, 0x80	; 128
     f54:	5f e3       	ldi	r21, 0x3F	; 63
     f56:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
     f5a:	88 23       	and	r24, r24
     f5c:	2c f4       	brge	.+10     	; 0xf68 <C_LCD_voidSendCommand+0x186>
		__ticks = 1;
     f5e:	81 e0       	ldi	r24, 0x01	; 1
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	9a a3       	std	Y+34, r25	; 0x22
     f64:	89 a3       	std	Y+33, r24	; 0x21
     f66:	3f c0       	rjmp	.+126    	; 0xfe6 <C_LCD_voidSendCommand+0x204>
	else if (__tmp > 65535)
     f68:	6b a1       	ldd	r22, Y+35	; 0x23
     f6a:	7c a1       	ldd	r23, Y+36	; 0x24
     f6c:	8d a1       	ldd	r24, Y+37	; 0x25
     f6e:	9e a1       	ldd	r25, Y+38	; 0x26
     f70:	20 e0       	ldi	r18, 0x00	; 0
     f72:	3f ef       	ldi	r19, 0xFF	; 255
     f74:	4f e7       	ldi	r20, 0x7F	; 127
     f76:	57 e4       	ldi	r21, 0x47	; 71
     f78:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
     f7c:	18 16       	cp	r1, r24
     f7e:	4c f5       	brge	.+82     	; 0xfd2 <C_LCD_voidSendCommand+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f80:	6f a1       	ldd	r22, Y+39	; 0x27
     f82:	78 a5       	ldd	r23, Y+40	; 0x28
     f84:	89 a5       	ldd	r24, Y+41	; 0x29
     f86:	9a a5       	ldd	r25, Y+42	; 0x2a
     f88:	20 e0       	ldi	r18, 0x00	; 0
     f8a:	30 e0       	ldi	r19, 0x00	; 0
     f8c:	40 e2       	ldi	r20, 0x20	; 32
     f8e:	51 e4       	ldi	r21, 0x41	; 65
     f90:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f94:	dc 01       	movw	r26, r24
     f96:	cb 01       	movw	r24, r22
     f98:	bc 01       	movw	r22, r24
     f9a:	cd 01       	movw	r24, r26
     f9c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     fa0:	dc 01       	movw	r26, r24
     fa2:	cb 01       	movw	r24, r22
     fa4:	9a a3       	std	Y+34, r25	; 0x22
     fa6:	89 a3       	std	Y+33, r24	; 0x21
     fa8:	0f c0       	rjmp	.+30     	; 0xfc8 <C_LCD_voidSendCommand+0x1e6>
     faa:	88 ec       	ldi	r24, 0xC8	; 200
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	98 a3       	std	Y+32, r25	; 0x20
     fb0:	8f 8f       	std	Y+31, r24	; 0x1f
     fb2:	8f 8d       	ldd	r24, Y+31	; 0x1f
     fb4:	98 a1       	ldd	r25, Y+32	; 0x20
     fb6:	01 97       	sbiw	r24, 0x01	; 1
     fb8:	f1 f7       	brne	.-4      	; 0xfb6 <C_LCD_voidSendCommand+0x1d4>
     fba:	98 a3       	std	Y+32, r25	; 0x20
     fbc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fbe:	89 a1       	ldd	r24, Y+33	; 0x21
     fc0:	9a a1       	ldd	r25, Y+34	; 0x22
     fc2:	01 97       	sbiw	r24, 0x01	; 1
     fc4:	9a a3       	std	Y+34, r25	; 0x22
     fc6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fc8:	89 a1       	ldd	r24, Y+33	; 0x21
     fca:	9a a1       	ldd	r25, Y+34	; 0x22
     fcc:	00 97       	sbiw	r24, 0x00	; 0
     fce:	69 f7       	brne	.-38     	; 0xfaa <C_LCD_voidSendCommand+0x1c8>
     fd0:	14 c0       	rjmp	.+40     	; 0xffa <C_LCD_voidSendCommand+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fd2:	6b a1       	ldd	r22, Y+35	; 0x23
     fd4:	7c a1       	ldd	r23, Y+36	; 0x24
     fd6:	8d a1       	ldd	r24, Y+37	; 0x25
     fd8:	9e a1       	ldd	r25, Y+38	; 0x26
     fda:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     fde:	dc 01       	movw	r26, r24
     fe0:	cb 01       	movw	r24, r22
     fe2:	9a a3       	std	Y+34, r25	; 0x22
     fe4:	89 a3       	std	Y+33, r24	; 0x21
     fe6:	89 a1       	ldd	r24, Y+33	; 0x21
     fe8:	9a a1       	ldd	r25, Y+34	; 0x22
     fea:	9e 8f       	std	Y+30, r25	; 0x1e
     fec:	8d 8f       	std	Y+29, r24	; 0x1d
     fee:	8d 8d       	ldd	r24, Y+29	; 0x1d
     ff0:	9e 8d       	ldd	r25, Y+30	; 0x1e
     ff2:	01 97       	sbiw	r24, 0x01	; 1
     ff4:	f1 f7       	brne	.-4      	; 0xff2 <C_LCD_voidSendCommand+0x210>
     ff6:	9e 8f       	std	Y+30, r25	; 0x1e
     ff8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);

	Local_u8Command = ((Copy_u8Command <<4) |DIO_u8AndWithPort(CLCD_DATA_PORT, CLCD_DATA_PORT_MASK));
     ffa:	8a ad       	ldd	r24, Y+58	; 0x3a
     ffc:	88 2f       	mov	r24, r24
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	82 95       	swap	r24
    1002:	92 95       	swap	r25
    1004:	90 7f       	andi	r25, 0xF0	; 240
    1006:	98 27       	eor	r25, r24
    1008:	80 7f       	andi	r24, 0xF0	; 240
    100a:	98 27       	eor	r25, r24
    100c:	18 2f       	mov	r17, r24
    100e:	82 e0       	ldi	r24, 0x02	; 2
    1010:	6f e0       	ldi	r22, 0x0F	; 15
    1012:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <DIO_u8AndWithPort>
    1016:	81 2b       	or	r24, r17
    1018:	89 af       	std	Y+57, r24	; 0x39
	DIO_u8SetPortValue(CLCD_DATA_PORT,Local_u8Command);
    101a:	82 e0       	ldi	r24, 0x02	; 2
    101c:	69 ad       	ldd	r22, Y+57	; 0x39
    101e:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <DIO_u8SetPortValue>

	/*Send Enable pulse */
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    1022:	82 e0       	ldi	r24, 0x02	; 2
    1024:	63 e0       	ldi	r22, 0x03	; 3
    1026:	41 e0       	ldi	r20, 0x01	; 1
    1028:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <DIO_u8SetPinValue>
    102c:	80 e0       	ldi	r24, 0x00	; 0
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	a0 e0       	ldi	r26, 0x00	; 0
    1032:	b0 e4       	ldi	r27, 0x40	; 64
    1034:	89 8f       	std	Y+25, r24	; 0x19
    1036:	9a 8f       	std	Y+26, r25	; 0x1a
    1038:	ab 8f       	std	Y+27, r26	; 0x1b
    103a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    103c:	69 8d       	ldd	r22, Y+25	; 0x19
    103e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1040:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1042:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1044:	20 e0       	ldi	r18, 0x00	; 0
    1046:	30 e0       	ldi	r19, 0x00	; 0
    1048:	4a ef       	ldi	r20, 0xFA	; 250
    104a:	54 e4       	ldi	r21, 0x44	; 68
    104c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1050:	dc 01       	movw	r26, r24
    1052:	cb 01       	movw	r24, r22
    1054:	8d 8b       	std	Y+21, r24	; 0x15
    1056:	9e 8b       	std	Y+22, r25	; 0x16
    1058:	af 8b       	std	Y+23, r26	; 0x17
    105a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    105c:	6d 89       	ldd	r22, Y+21	; 0x15
    105e:	7e 89       	ldd	r23, Y+22	; 0x16
    1060:	8f 89       	ldd	r24, Y+23	; 0x17
    1062:	98 8d       	ldd	r25, Y+24	; 0x18
    1064:	20 e0       	ldi	r18, 0x00	; 0
    1066:	30 e0       	ldi	r19, 0x00	; 0
    1068:	40 e8       	ldi	r20, 0x80	; 128
    106a:	5f e3       	ldi	r21, 0x3F	; 63
    106c:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    1070:	88 23       	and	r24, r24
    1072:	2c f4       	brge	.+10     	; 0x107e <C_LCD_voidSendCommand+0x29c>
		__ticks = 1;
    1074:	81 e0       	ldi	r24, 0x01	; 1
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	9c 8b       	std	Y+20, r25	; 0x14
    107a:	8b 8b       	std	Y+19, r24	; 0x13
    107c:	3f c0       	rjmp	.+126    	; 0x10fc <C_LCD_voidSendCommand+0x31a>
	else if (__tmp > 65535)
    107e:	6d 89       	ldd	r22, Y+21	; 0x15
    1080:	7e 89       	ldd	r23, Y+22	; 0x16
    1082:	8f 89       	ldd	r24, Y+23	; 0x17
    1084:	98 8d       	ldd	r25, Y+24	; 0x18
    1086:	20 e0       	ldi	r18, 0x00	; 0
    1088:	3f ef       	ldi	r19, 0xFF	; 255
    108a:	4f e7       	ldi	r20, 0x7F	; 127
    108c:	57 e4       	ldi	r21, 0x47	; 71
    108e:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    1092:	18 16       	cp	r1, r24
    1094:	4c f5       	brge	.+82     	; 0x10e8 <C_LCD_voidSendCommand+0x306>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1096:	69 8d       	ldd	r22, Y+25	; 0x19
    1098:	7a 8d       	ldd	r23, Y+26	; 0x1a
    109a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    109c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    109e:	20 e0       	ldi	r18, 0x00	; 0
    10a0:	30 e0       	ldi	r19, 0x00	; 0
    10a2:	40 e2       	ldi	r20, 0x20	; 32
    10a4:	51 e4       	ldi	r21, 0x41	; 65
    10a6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    10aa:	dc 01       	movw	r26, r24
    10ac:	cb 01       	movw	r24, r22
    10ae:	bc 01       	movw	r22, r24
    10b0:	cd 01       	movw	r24, r26
    10b2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    10b6:	dc 01       	movw	r26, r24
    10b8:	cb 01       	movw	r24, r22
    10ba:	9c 8b       	std	Y+20, r25	; 0x14
    10bc:	8b 8b       	std	Y+19, r24	; 0x13
    10be:	0f c0       	rjmp	.+30     	; 0x10de <C_LCD_voidSendCommand+0x2fc>
    10c0:	88 ec       	ldi	r24, 0xC8	; 200
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	9a 8b       	std	Y+18, r25	; 0x12
    10c6:	89 8b       	std	Y+17, r24	; 0x11
    10c8:	89 89       	ldd	r24, Y+17	; 0x11
    10ca:	9a 89       	ldd	r25, Y+18	; 0x12
    10cc:	01 97       	sbiw	r24, 0x01	; 1
    10ce:	f1 f7       	brne	.-4      	; 0x10cc <C_LCD_voidSendCommand+0x2ea>
    10d0:	9a 8b       	std	Y+18, r25	; 0x12
    10d2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10d4:	8b 89       	ldd	r24, Y+19	; 0x13
    10d6:	9c 89       	ldd	r25, Y+20	; 0x14
    10d8:	01 97       	sbiw	r24, 0x01	; 1
    10da:	9c 8b       	std	Y+20, r25	; 0x14
    10dc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10de:	8b 89       	ldd	r24, Y+19	; 0x13
    10e0:	9c 89       	ldd	r25, Y+20	; 0x14
    10e2:	00 97       	sbiw	r24, 0x00	; 0
    10e4:	69 f7       	brne	.-38     	; 0x10c0 <C_LCD_voidSendCommand+0x2de>
    10e6:	14 c0       	rjmp	.+40     	; 0x1110 <C_LCD_voidSendCommand+0x32e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10e8:	6d 89       	ldd	r22, Y+21	; 0x15
    10ea:	7e 89       	ldd	r23, Y+22	; 0x16
    10ec:	8f 89       	ldd	r24, Y+23	; 0x17
    10ee:	98 8d       	ldd	r25, Y+24	; 0x18
    10f0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    10f4:	dc 01       	movw	r26, r24
    10f6:	cb 01       	movw	r24, r22
    10f8:	9c 8b       	std	Y+20, r25	; 0x14
    10fa:	8b 8b       	std	Y+19, r24	; 0x13
    10fc:	8b 89       	ldd	r24, Y+19	; 0x13
    10fe:	9c 89       	ldd	r25, Y+20	; 0x14
    1100:	98 8b       	std	Y+16, r25	; 0x10
    1102:	8f 87       	std	Y+15, r24	; 0x0f
    1104:	8f 85       	ldd	r24, Y+15	; 0x0f
    1106:	98 89       	ldd	r25, Y+16	; 0x10
    1108:	01 97       	sbiw	r24, 0x01	; 1
    110a:	f1 f7       	brne	.-4      	; 0x1108 <C_LCD_voidSendCommand+0x326>
    110c:	98 8b       	std	Y+16, r25	; 0x10
    110e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    1110:	82 e0       	ldi	r24, 0x02	; 2
    1112:	63 e0       	ldi	r22, 0x03	; 3
    1114:	40 e0       	ldi	r20, 0x00	; 0
    1116:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <DIO_u8SetPinValue>
    111a:	80 e0       	ldi	r24, 0x00	; 0
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	a0 ea       	ldi	r26, 0xA0	; 160
    1120:	b0 e4       	ldi	r27, 0x40	; 64
    1122:	8b 87       	std	Y+11, r24	; 0x0b
    1124:	9c 87       	std	Y+12, r25	; 0x0c
    1126:	ad 87       	std	Y+13, r26	; 0x0d
    1128:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    112a:	6b 85       	ldd	r22, Y+11	; 0x0b
    112c:	7c 85       	ldd	r23, Y+12	; 0x0c
    112e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1130:	9e 85       	ldd	r25, Y+14	; 0x0e
    1132:	20 e0       	ldi	r18, 0x00	; 0
    1134:	30 e0       	ldi	r19, 0x00	; 0
    1136:	4a ef       	ldi	r20, 0xFA	; 250
    1138:	54 e4       	ldi	r21, 0x44	; 68
    113a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    113e:	dc 01       	movw	r26, r24
    1140:	cb 01       	movw	r24, r22
    1142:	8f 83       	std	Y+7, r24	; 0x07
    1144:	98 87       	std	Y+8, r25	; 0x08
    1146:	a9 87       	std	Y+9, r26	; 0x09
    1148:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    114a:	6f 81       	ldd	r22, Y+7	; 0x07
    114c:	78 85       	ldd	r23, Y+8	; 0x08
    114e:	89 85       	ldd	r24, Y+9	; 0x09
    1150:	9a 85       	ldd	r25, Y+10	; 0x0a
    1152:	20 e0       	ldi	r18, 0x00	; 0
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	40 e8       	ldi	r20, 0x80	; 128
    1158:	5f e3       	ldi	r21, 0x3F	; 63
    115a:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    115e:	88 23       	and	r24, r24
    1160:	2c f4       	brge	.+10     	; 0x116c <C_LCD_voidSendCommand+0x38a>
		__ticks = 1;
    1162:	81 e0       	ldi	r24, 0x01	; 1
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	9e 83       	std	Y+6, r25	; 0x06
    1168:	8d 83       	std	Y+5, r24	; 0x05
    116a:	3f c0       	rjmp	.+126    	; 0x11ea <C_LCD_voidSendCommand+0x408>
	else if (__tmp > 65535)
    116c:	6f 81       	ldd	r22, Y+7	; 0x07
    116e:	78 85       	ldd	r23, Y+8	; 0x08
    1170:	89 85       	ldd	r24, Y+9	; 0x09
    1172:	9a 85       	ldd	r25, Y+10	; 0x0a
    1174:	20 e0       	ldi	r18, 0x00	; 0
    1176:	3f ef       	ldi	r19, 0xFF	; 255
    1178:	4f e7       	ldi	r20, 0x7F	; 127
    117a:	57 e4       	ldi	r21, 0x47	; 71
    117c:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    1180:	18 16       	cp	r1, r24
    1182:	4c f5       	brge	.+82     	; 0x11d6 <C_LCD_voidSendCommand+0x3f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1184:	6b 85       	ldd	r22, Y+11	; 0x0b
    1186:	7c 85       	ldd	r23, Y+12	; 0x0c
    1188:	8d 85       	ldd	r24, Y+13	; 0x0d
    118a:	9e 85       	ldd	r25, Y+14	; 0x0e
    118c:	20 e0       	ldi	r18, 0x00	; 0
    118e:	30 e0       	ldi	r19, 0x00	; 0
    1190:	40 e2       	ldi	r20, 0x20	; 32
    1192:	51 e4       	ldi	r21, 0x41	; 65
    1194:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1198:	dc 01       	movw	r26, r24
    119a:	cb 01       	movw	r24, r22
    119c:	bc 01       	movw	r22, r24
    119e:	cd 01       	movw	r24, r26
    11a0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11a4:	dc 01       	movw	r26, r24
    11a6:	cb 01       	movw	r24, r22
    11a8:	9e 83       	std	Y+6, r25	; 0x06
    11aa:	8d 83       	std	Y+5, r24	; 0x05
    11ac:	0f c0       	rjmp	.+30     	; 0x11cc <C_LCD_voidSendCommand+0x3ea>
    11ae:	88 ec       	ldi	r24, 0xC8	; 200
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	9c 83       	std	Y+4, r25	; 0x04
    11b4:	8b 83       	std	Y+3, r24	; 0x03
    11b6:	8b 81       	ldd	r24, Y+3	; 0x03
    11b8:	9c 81       	ldd	r25, Y+4	; 0x04
    11ba:	01 97       	sbiw	r24, 0x01	; 1
    11bc:	f1 f7       	brne	.-4      	; 0x11ba <C_LCD_voidSendCommand+0x3d8>
    11be:	9c 83       	std	Y+4, r25	; 0x04
    11c0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11c2:	8d 81       	ldd	r24, Y+5	; 0x05
    11c4:	9e 81       	ldd	r25, Y+6	; 0x06
    11c6:	01 97       	sbiw	r24, 0x01	; 1
    11c8:	9e 83       	std	Y+6, r25	; 0x06
    11ca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11cc:	8d 81       	ldd	r24, Y+5	; 0x05
    11ce:	9e 81       	ldd	r25, Y+6	; 0x06
    11d0:	00 97       	sbiw	r24, 0x00	; 0
    11d2:	69 f7       	brne	.-38     	; 0x11ae <C_LCD_voidSendCommand+0x3cc>
    11d4:	14 c0       	rjmp	.+40     	; 0x11fe <C_LCD_voidSendCommand+0x41c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11d6:	6f 81       	ldd	r22, Y+7	; 0x07
    11d8:	78 85       	ldd	r23, Y+8	; 0x08
    11da:	89 85       	ldd	r24, Y+9	; 0x09
    11dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    11de:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11e2:	dc 01       	movw	r26, r24
    11e4:	cb 01       	movw	r24, r22
    11e6:	9e 83       	std	Y+6, r25	; 0x06
    11e8:	8d 83       	std	Y+5, r24	; 0x05
    11ea:	8d 81       	ldd	r24, Y+5	; 0x05
    11ec:	9e 81       	ldd	r25, Y+6	; 0x06
    11ee:	9a 83       	std	Y+2, r25	; 0x02
    11f0:	89 83       	std	Y+1, r24	; 0x01
    11f2:	89 81       	ldd	r24, Y+1	; 0x01
    11f4:	9a 81       	ldd	r25, Y+2	; 0x02
    11f6:	01 97       	sbiw	r24, 0x01	; 1
    11f8:	f1 f7       	brne	.-4      	; 0x11f6 <C_LCD_voidSendCommand+0x414>
    11fa:	9a 83       	std	Y+2, r25	; 0x02
    11fc:	89 83       	std	Y+1, r24	; 0x01

#endif



}
    11fe:	ea 96       	adiw	r28, 0x3a	; 58
    1200:	0f b6       	in	r0, 0x3f	; 63
    1202:	f8 94       	cli
    1204:	de bf       	out	0x3e, r29	; 62
    1206:	0f be       	out	0x3f, r0	; 63
    1208:	cd bf       	out	0x3d, r28	; 61
    120a:	cf 91       	pop	r28
    120c:	df 91       	pop	r29
    120e:	1f 91       	pop	r17
    1210:	08 95       	ret

00001212 <CLCD_voidSendData>:

void CLCD_voidSendData(u8 Copy_u8Data)
{
    1212:	1f 93       	push	r17
    1214:	df 93       	push	r29
    1216:	cf 93       	push	r28
    1218:	cd b7       	in	r28, 0x3d	; 61
    121a:	de b7       	in	r29, 0x3e	; 62
    121c:	ea 97       	sbiw	r28, 0x3a	; 58
    121e:	0f b6       	in	r0, 0x3f	; 63
    1220:	f8 94       	cli
    1222:	de bf       	out	0x3e, r29	; 62
    1224:	0f be       	out	0x3f, r0	; 63
    1226:	cd bf       	out	0x3d, r28	; 61
    1228:	8a af       	std	Y+58, r24	; 0x3a
	/*Set RS Pin to low to send data */
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_HIGH);
    122a:	82 e0       	ldi	r24, 0x02	; 2
    122c:	62 e0       	ldi	r22, 0x02	; 2
    122e:	41 e0       	ldi	r20, 0x01	; 1
    1230:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <DIO_u8SetPinValue>
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);

#elif   MODE_SELECT ==_4_BIT_MODE

	u8 Local_u8Data = (((Copy_u8Data) & CLCD_COMMAND_MASK) | DIO_u8AndWithPort(CLCD_DATA_PORT, CLCD_DATA_PORT_MASK));
    1234:	8a ad       	ldd	r24, Y+58	; 0x3a
    1236:	18 2f       	mov	r17, r24
    1238:	10 7f       	andi	r17, 0xF0	; 240
    123a:	82 e0       	ldi	r24, 0x02	; 2
    123c:	6f e0       	ldi	r22, 0x0F	; 15
    123e:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <DIO_u8AndWithPort>
    1242:	81 2b       	or	r24, r17
    1244:	89 af       	std	Y+57, r24	; 0x39
	/* Set Command to data pins */
	DIO_u8SetPortValue(CLCD_DATA_PORT,Local_u8Data);
    1246:	82 e0       	ldi	r24, 0x02	; 2
    1248:	69 ad       	ldd	r22, Y+57	; 0x39
    124a:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <DIO_u8SetPortValue>

	/*Send Enable pulse */
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    124e:	82 e0       	ldi	r24, 0x02	; 2
    1250:	63 e0       	ldi	r22, 0x03	; 3
    1252:	41 e0       	ldi	r20, 0x01	; 1
    1254:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <DIO_u8SetPinValue>
    1258:	80 e0       	ldi	r24, 0x00	; 0
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	a0 e0       	ldi	r26, 0x00	; 0
    125e:	b0 e4       	ldi	r27, 0x40	; 64
    1260:	8d ab       	std	Y+53, r24	; 0x35
    1262:	9e ab       	std	Y+54, r25	; 0x36
    1264:	af ab       	std	Y+55, r26	; 0x37
    1266:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1268:	6d a9       	ldd	r22, Y+53	; 0x35
    126a:	7e a9       	ldd	r23, Y+54	; 0x36
    126c:	8f a9       	ldd	r24, Y+55	; 0x37
    126e:	98 ad       	ldd	r25, Y+56	; 0x38
    1270:	20 e0       	ldi	r18, 0x00	; 0
    1272:	30 e0       	ldi	r19, 0x00	; 0
    1274:	4a ef       	ldi	r20, 0xFA	; 250
    1276:	54 e4       	ldi	r21, 0x44	; 68
    1278:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    127c:	dc 01       	movw	r26, r24
    127e:	cb 01       	movw	r24, r22
    1280:	89 ab       	std	Y+49, r24	; 0x31
    1282:	9a ab       	std	Y+50, r25	; 0x32
    1284:	ab ab       	std	Y+51, r26	; 0x33
    1286:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1288:	69 a9       	ldd	r22, Y+49	; 0x31
    128a:	7a a9       	ldd	r23, Y+50	; 0x32
    128c:	8b a9       	ldd	r24, Y+51	; 0x33
    128e:	9c a9       	ldd	r25, Y+52	; 0x34
    1290:	20 e0       	ldi	r18, 0x00	; 0
    1292:	30 e0       	ldi	r19, 0x00	; 0
    1294:	40 e8       	ldi	r20, 0x80	; 128
    1296:	5f e3       	ldi	r21, 0x3F	; 63
    1298:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    129c:	88 23       	and	r24, r24
    129e:	2c f4       	brge	.+10     	; 0x12aa <CLCD_voidSendData+0x98>
		__ticks = 1;
    12a0:	81 e0       	ldi	r24, 0x01	; 1
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	98 ab       	std	Y+48, r25	; 0x30
    12a6:	8f a7       	std	Y+47, r24	; 0x2f
    12a8:	3f c0       	rjmp	.+126    	; 0x1328 <CLCD_voidSendData+0x116>
	else if (__tmp > 65535)
    12aa:	69 a9       	ldd	r22, Y+49	; 0x31
    12ac:	7a a9       	ldd	r23, Y+50	; 0x32
    12ae:	8b a9       	ldd	r24, Y+51	; 0x33
    12b0:	9c a9       	ldd	r25, Y+52	; 0x34
    12b2:	20 e0       	ldi	r18, 0x00	; 0
    12b4:	3f ef       	ldi	r19, 0xFF	; 255
    12b6:	4f e7       	ldi	r20, 0x7F	; 127
    12b8:	57 e4       	ldi	r21, 0x47	; 71
    12ba:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    12be:	18 16       	cp	r1, r24
    12c0:	4c f5       	brge	.+82     	; 0x1314 <CLCD_voidSendData+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12c2:	6d a9       	ldd	r22, Y+53	; 0x35
    12c4:	7e a9       	ldd	r23, Y+54	; 0x36
    12c6:	8f a9       	ldd	r24, Y+55	; 0x37
    12c8:	98 ad       	ldd	r25, Y+56	; 0x38
    12ca:	20 e0       	ldi	r18, 0x00	; 0
    12cc:	30 e0       	ldi	r19, 0x00	; 0
    12ce:	40 e2       	ldi	r20, 0x20	; 32
    12d0:	51 e4       	ldi	r21, 0x41	; 65
    12d2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    12d6:	dc 01       	movw	r26, r24
    12d8:	cb 01       	movw	r24, r22
    12da:	bc 01       	movw	r22, r24
    12dc:	cd 01       	movw	r24, r26
    12de:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    12e2:	dc 01       	movw	r26, r24
    12e4:	cb 01       	movw	r24, r22
    12e6:	98 ab       	std	Y+48, r25	; 0x30
    12e8:	8f a7       	std	Y+47, r24	; 0x2f
    12ea:	0f c0       	rjmp	.+30     	; 0x130a <CLCD_voidSendData+0xf8>
    12ec:	88 ec       	ldi	r24, 0xC8	; 200
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	9e a7       	std	Y+46, r25	; 0x2e
    12f2:	8d a7       	std	Y+45, r24	; 0x2d
    12f4:	8d a5       	ldd	r24, Y+45	; 0x2d
    12f6:	9e a5       	ldd	r25, Y+46	; 0x2e
    12f8:	01 97       	sbiw	r24, 0x01	; 1
    12fa:	f1 f7       	brne	.-4      	; 0x12f8 <CLCD_voidSendData+0xe6>
    12fc:	9e a7       	std	Y+46, r25	; 0x2e
    12fe:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1300:	8f a5       	ldd	r24, Y+47	; 0x2f
    1302:	98 a9       	ldd	r25, Y+48	; 0x30
    1304:	01 97       	sbiw	r24, 0x01	; 1
    1306:	98 ab       	std	Y+48, r25	; 0x30
    1308:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    130a:	8f a5       	ldd	r24, Y+47	; 0x2f
    130c:	98 a9       	ldd	r25, Y+48	; 0x30
    130e:	00 97       	sbiw	r24, 0x00	; 0
    1310:	69 f7       	brne	.-38     	; 0x12ec <CLCD_voidSendData+0xda>
    1312:	14 c0       	rjmp	.+40     	; 0x133c <CLCD_voidSendData+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1314:	69 a9       	ldd	r22, Y+49	; 0x31
    1316:	7a a9       	ldd	r23, Y+50	; 0x32
    1318:	8b a9       	ldd	r24, Y+51	; 0x33
    131a:	9c a9       	ldd	r25, Y+52	; 0x34
    131c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1320:	dc 01       	movw	r26, r24
    1322:	cb 01       	movw	r24, r22
    1324:	98 ab       	std	Y+48, r25	; 0x30
    1326:	8f a7       	std	Y+47, r24	; 0x2f
    1328:	8f a5       	ldd	r24, Y+47	; 0x2f
    132a:	98 a9       	ldd	r25, Y+48	; 0x30
    132c:	9c a7       	std	Y+44, r25	; 0x2c
    132e:	8b a7       	std	Y+43, r24	; 0x2b
    1330:	8b a5       	ldd	r24, Y+43	; 0x2b
    1332:	9c a5       	ldd	r25, Y+44	; 0x2c
    1334:	01 97       	sbiw	r24, 0x01	; 1
    1336:	f1 f7       	brne	.-4      	; 0x1334 <CLCD_voidSendData+0x122>
    1338:	9c a7       	std	Y+44, r25	; 0x2c
    133a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    133c:	82 e0       	ldi	r24, 0x02	; 2
    133e:	63 e0       	ldi	r22, 0x03	; 3
    1340:	40 e0       	ldi	r20, 0x00	; 0
    1342:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <DIO_u8SetPinValue>
    1346:	80 e0       	ldi	r24, 0x00	; 0
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	a0 ea       	ldi	r26, 0xA0	; 160
    134c:	b0 e4       	ldi	r27, 0x40	; 64
    134e:	8f a3       	std	Y+39, r24	; 0x27
    1350:	98 a7       	std	Y+40, r25	; 0x28
    1352:	a9 a7       	std	Y+41, r26	; 0x29
    1354:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1356:	6f a1       	ldd	r22, Y+39	; 0x27
    1358:	78 a5       	ldd	r23, Y+40	; 0x28
    135a:	89 a5       	ldd	r24, Y+41	; 0x29
    135c:	9a a5       	ldd	r25, Y+42	; 0x2a
    135e:	20 e0       	ldi	r18, 0x00	; 0
    1360:	30 e0       	ldi	r19, 0x00	; 0
    1362:	4a ef       	ldi	r20, 0xFA	; 250
    1364:	54 e4       	ldi	r21, 0x44	; 68
    1366:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    136a:	dc 01       	movw	r26, r24
    136c:	cb 01       	movw	r24, r22
    136e:	8b a3       	std	Y+35, r24	; 0x23
    1370:	9c a3       	std	Y+36, r25	; 0x24
    1372:	ad a3       	std	Y+37, r26	; 0x25
    1374:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1376:	6b a1       	ldd	r22, Y+35	; 0x23
    1378:	7c a1       	ldd	r23, Y+36	; 0x24
    137a:	8d a1       	ldd	r24, Y+37	; 0x25
    137c:	9e a1       	ldd	r25, Y+38	; 0x26
    137e:	20 e0       	ldi	r18, 0x00	; 0
    1380:	30 e0       	ldi	r19, 0x00	; 0
    1382:	40 e8       	ldi	r20, 0x80	; 128
    1384:	5f e3       	ldi	r21, 0x3F	; 63
    1386:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    138a:	88 23       	and	r24, r24
    138c:	2c f4       	brge	.+10     	; 0x1398 <CLCD_voidSendData+0x186>
		__ticks = 1;
    138e:	81 e0       	ldi	r24, 0x01	; 1
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	9a a3       	std	Y+34, r25	; 0x22
    1394:	89 a3       	std	Y+33, r24	; 0x21
    1396:	3f c0       	rjmp	.+126    	; 0x1416 <CLCD_voidSendData+0x204>
	else if (__tmp > 65535)
    1398:	6b a1       	ldd	r22, Y+35	; 0x23
    139a:	7c a1       	ldd	r23, Y+36	; 0x24
    139c:	8d a1       	ldd	r24, Y+37	; 0x25
    139e:	9e a1       	ldd	r25, Y+38	; 0x26
    13a0:	20 e0       	ldi	r18, 0x00	; 0
    13a2:	3f ef       	ldi	r19, 0xFF	; 255
    13a4:	4f e7       	ldi	r20, 0x7F	; 127
    13a6:	57 e4       	ldi	r21, 0x47	; 71
    13a8:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    13ac:	18 16       	cp	r1, r24
    13ae:	4c f5       	brge	.+82     	; 0x1402 <CLCD_voidSendData+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13b0:	6f a1       	ldd	r22, Y+39	; 0x27
    13b2:	78 a5       	ldd	r23, Y+40	; 0x28
    13b4:	89 a5       	ldd	r24, Y+41	; 0x29
    13b6:	9a a5       	ldd	r25, Y+42	; 0x2a
    13b8:	20 e0       	ldi	r18, 0x00	; 0
    13ba:	30 e0       	ldi	r19, 0x00	; 0
    13bc:	40 e2       	ldi	r20, 0x20	; 32
    13be:	51 e4       	ldi	r21, 0x41	; 65
    13c0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13c4:	dc 01       	movw	r26, r24
    13c6:	cb 01       	movw	r24, r22
    13c8:	bc 01       	movw	r22, r24
    13ca:	cd 01       	movw	r24, r26
    13cc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13d0:	dc 01       	movw	r26, r24
    13d2:	cb 01       	movw	r24, r22
    13d4:	9a a3       	std	Y+34, r25	; 0x22
    13d6:	89 a3       	std	Y+33, r24	; 0x21
    13d8:	0f c0       	rjmp	.+30     	; 0x13f8 <CLCD_voidSendData+0x1e6>
    13da:	88 ec       	ldi	r24, 0xC8	; 200
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	98 a3       	std	Y+32, r25	; 0x20
    13e0:	8f 8f       	std	Y+31, r24	; 0x1f
    13e2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    13e4:	98 a1       	ldd	r25, Y+32	; 0x20
    13e6:	01 97       	sbiw	r24, 0x01	; 1
    13e8:	f1 f7       	brne	.-4      	; 0x13e6 <CLCD_voidSendData+0x1d4>
    13ea:	98 a3       	std	Y+32, r25	; 0x20
    13ec:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13ee:	89 a1       	ldd	r24, Y+33	; 0x21
    13f0:	9a a1       	ldd	r25, Y+34	; 0x22
    13f2:	01 97       	sbiw	r24, 0x01	; 1
    13f4:	9a a3       	std	Y+34, r25	; 0x22
    13f6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13f8:	89 a1       	ldd	r24, Y+33	; 0x21
    13fa:	9a a1       	ldd	r25, Y+34	; 0x22
    13fc:	00 97       	sbiw	r24, 0x00	; 0
    13fe:	69 f7       	brne	.-38     	; 0x13da <CLCD_voidSendData+0x1c8>
    1400:	14 c0       	rjmp	.+40     	; 0x142a <CLCD_voidSendData+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1402:	6b a1       	ldd	r22, Y+35	; 0x23
    1404:	7c a1       	ldd	r23, Y+36	; 0x24
    1406:	8d a1       	ldd	r24, Y+37	; 0x25
    1408:	9e a1       	ldd	r25, Y+38	; 0x26
    140a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    140e:	dc 01       	movw	r26, r24
    1410:	cb 01       	movw	r24, r22
    1412:	9a a3       	std	Y+34, r25	; 0x22
    1414:	89 a3       	std	Y+33, r24	; 0x21
    1416:	89 a1       	ldd	r24, Y+33	; 0x21
    1418:	9a a1       	ldd	r25, Y+34	; 0x22
    141a:	9e 8f       	std	Y+30, r25	; 0x1e
    141c:	8d 8f       	std	Y+29, r24	; 0x1d
    141e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1420:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1422:	01 97       	sbiw	r24, 0x01	; 1
    1424:	f1 f7       	brne	.-4      	; 0x1422 <CLCD_voidSendData+0x210>
    1426:	9e 8f       	std	Y+30, r25	; 0x1e
    1428:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);

	Local_u8Data = ((Copy_u8Data <<4) |DIO_u8AndWithPort(CLCD_DATA_PORT, CLCD_DATA_PORT_MASK));
    142a:	8a ad       	ldd	r24, Y+58	; 0x3a
    142c:	88 2f       	mov	r24, r24
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	82 95       	swap	r24
    1432:	92 95       	swap	r25
    1434:	90 7f       	andi	r25, 0xF0	; 240
    1436:	98 27       	eor	r25, r24
    1438:	80 7f       	andi	r24, 0xF0	; 240
    143a:	98 27       	eor	r25, r24
    143c:	18 2f       	mov	r17, r24
    143e:	82 e0       	ldi	r24, 0x02	; 2
    1440:	6f e0       	ldi	r22, 0x0F	; 15
    1442:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <DIO_u8AndWithPort>
    1446:	81 2b       	or	r24, r17
    1448:	89 af       	std	Y+57, r24	; 0x39

	DIO_u8SetPortValue(CLCD_DATA_PORT,Local_u8Data);
    144a:	82 e0       	ldi	r24, 0x02	; 2
    144c:	69 ad       	ldd	r22, Y+57	; 0x39
    144e:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <DIO_u8SetPortValue>

	/*Send Enable pulse */
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    1452:	82 e0       	ldi	r24, 0x02	; 2
    1454:	63 e0       	ldi	r22, 0x03	; 3
    1456:	41 e0       	ldi	r20, 0x01	; 1
    1458:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <DIO_u8SetPinValue>
    145c:	80 e0       	ldi	r24, 0x00	; 0
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	a0 e0       	ldi	r26, 0x00	; 0
    1462:	b0 e4       	ldi	r27, 0x40	; 64
    1464:	89 8f       	std	Y+25, r24	; 0x19
    1466:	9a 8f       	std	Y+26, r25	; 0x1a
    1468:	ab 8f       	std	Y+27, r26	; 0x1b
    146a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    146c:	69 8d       	ldd	r22, Y+25	; 0x19
    146e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1470:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1472:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1474:	20 e0       	ldi	r18, 0x00	; 0
    1476:	30 e0       	ldi	r19, 0x00	; 0
    1478:	4a ef       	ldi	r20, 0xFA	; 250
    147a:	54 e4       	ldi	r21, 0x44	; 68
    147c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1480:	dc 01       	movw	r26, r24
    1482:	cb 01       	movw	r24, r22
    1484:	8d 8b       	std	Y+21, r24	; 0x15
    1486:	9e 8b       	std	Y+22, r25	; 0x16
    1488:	af 8b       	std	Y+23, r26	; 0x17
    148a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    148c:	6d 89       	ldd	r22, Y+21	; 0x15
    148e:	7e 89       	ldd	r23, Y+22	; 0x16
    1490:	8f 89       	ldd	r24, Y+23	; 0x17
    1492:	98 8d       	ldd	r25, Y+24	; 0x18
    1494:	20 e0       	ldi	r18, 0x00	; 0
    1496:	30 e0       	ldi	r19, 0x00	; 0
    1498:	40 e8       	ldi	r20, 0x80	; 128
    149a:	5f e3       	ldi	r21, 0x3F	; 63
    149c:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    14a0:	88 23       	and	r24, r24
    14a2:	2c f4       	brge	.+10     	; 0x14ae <CLCD_voidSendData+0x29c>
		__ticks = 1;
    14a4:	81 e0       	ldi	r24, 0x01	; 1
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	9c 8b       	std	Y+20, r25	; 0x14
    14aa:	8b 8b       	std	Y+19, r24	; 0x13
    14ac:	3f c0       	rjmp	.+126    	; 0x152c <CLCD_voidSendData+0x31a>
	else if (__tmp > 65535)
    14ae:	6d 89       	ldd	r22, Y+21	; 0x15
    14b0:	7e 89       	ldd	r23, Y+22	; 0x16
    14b2:	8f 89       	ldd	r24, Y+23	; 0x17
    14b4:	98 8d       	ldd	r25, Y+24	; 0x18
    14b6:	20 e0       	ldi	r18, 0x00	; 0
    14b8:	3f ef       	ldi	r19, 0xFF	; 255
    14ba:	4f e7       	ldi	r20, 0x7F	; 127
    14bc:	57 e4       	ldi	r21, 0x47	; 71
    14be:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    14c2:	18 16       	cp	r1, r24
    14c4:	4c f5       	brge	.+82     	; 0x1518 <CLCD_voidSendData+0x306>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14c6:	69 8d       	ldd	r22, Y+25	; 0x19
    14c8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14ce:	20 e0       	ldi	r18, 0x00	; 0
    14d0:	30 e0       	ldi	r19, 0x00	; 0
    14d2:	40 e2       	ldi	r20, 0x20	; 32
    14d4:	51 e4       	ldi	r21, 0x41	; 65
    14d6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14da:	dc 01       	movw	r26, r24
    14dc:	cb 01       	movw	r24, r22
    14de:	bc 01       	movw	r22, r24
    14e0:	cd 01       	movw	r24, r26
    14e2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14e6:	dc 01       	movw	r26, r24
    14e8:	cb 01       	movw	r24, r22
    14ea:	9c 8b       	std	Y+20, r25	; 0x14
    14ec:	8b 8b       	std	Y+19, r24	; 0x13
    14ee:	0f c0       	rjmp	.+30     	; 0x150e <CLCD_voidSendData+0x2fc>
    14f0:	88 ec       	ldi	r24, 0xC8	; 200
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	9a 8b       	std	Y+18, r25	; 0x12
    14f6:	89 8b       	std	Y+17, r24	; 0x11
    14f8:	89 89       	ldd	r24, Y+17	; 0x11
    14fa:	9a 89       	ldd	r25, Y+18	; 0x12
    14fc:	01 97       	sbiw	r24, 0x01	; 1
    14fe:	f1 f7       	brne	.-4      	; 0x14fc <CLCD_voidSendData+0x2ea>
    1500:	9a 8b       	std	Y+18, r25	; 0x12
    1502:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1504:	8b 89       	ldd	r24, Y+19	; 0x13
    1506:	9c 89       	ldd	r25, Y+20	; 0x14
    1508:	01 97       	sbiw	r24, 0x01	; 1
    150a:	9c 8b       	std	Y+20, r25	; 0x14
    150c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    150e:	8b 89       	ldd	r24, Y+19	; 0x13
    1510:	9c 89       	ldd	r25, Y+20	; 0x14
    1512:	00 97       	sbiw	r24, 0x00	; 0
    1514:	69 f7       	brne	.-38     	; 0x14f0 <CLCD_voidSendData+0x2de>
    1516:	14 c0       	rjmp	.+40     	; 0x1540 <CLCD_voidSendData+0x32e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1518:	6d 89       	ldd	r22, Y+21	; 0x15
    151a:	7e 89       	ldd	r23, Y+22	; 0x16
    151c:	8f 89       	ldd	r24, Y+23	; 0x17
    151e:	98 8d       	ldd	r25, Y+24	; 0x18
    1520:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1524:	dc 01       	movw	r26, r24
    1526:	cb 01       	movw	r24, r22
    1528:	9c 8b       	std	Y+20, r25	; 0x14
    152a:	8b 8b       	std	Y+19, r24	; 0x13
    152c:	8b 89       	ldd	r24, Y+19	; 0x13
    152e:	9c 89       	ldd	r25, Y+20	; 0x14
    1530:	98 8b       	std	Y+16, r25	; 0x10
    1532:	8f 87       	std	Y+15, r24	; 0x0f
    1534:	8f 85       	ldd	r24, Y+15	; 0x0f
    1536:	98 89       	ldd	r25, Y+16	; 0x10
    1538:	01 97       	sbiw	r24, 0x01	; 1
    153a:	f1 f7       	brne	.-4      	; 0x1538 <CLCD_voidSendData+0x326>
    153c:	98 8b       	std	Y+16, r25	; 0x10
    153e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    1540:	82 e0       	ldi	r24, 0x02	; 2
    1542:	63 e0       	ldi	r22, 0x03	; 3
    1544:	40 e0       	ldi	r20, 0x00	; 0
    1546:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <DIO_u8SetPinValue>
    154a:	80 e0       	ldi	r24, 0x00	; 0
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	a0 ea       	ldi	r26, 0xA0	; 160
    1550:	b0 e4       	ldi	r27, 0x40	; 64
    1552:	8b 87       	std	Y+11, r24	; 0x0b
    1554:	9c 87       	std	Y+12, r25	; 0x0c
    1556:	ad 87       	std	Y+13, r26	; 0x0d
    1558:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    155a:	6b 85       	ldd	r22, Y+11	; 0x0b
    155c:	7c 85       	ldd	r23, Y+12	; 0x0c
    155e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1560:	9e 85       	ldd	r25, Y+14	; 0x0e
    1562:	20 e0       	ldi	r18, 0x00	; 0
    1564:	30 e0       	ldi	r19, 0x00	; 0
    1566:	4a ef       	ldi	r20, 0xFA	; 250
    1568:	54 e4       	ldi	r21, 0x44	; 68
    156a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    156e:	dc 01       	movw	r26, r24
    1570:	cb 01       	movw	r24, r22
    1572:	8f 83       	std	Y+7, r24	; 0x07
    1574:	98 87       	std	Y+8, r25	; 0x08
    1576:	a9 87       	std	Y+9, r26	; 0x09
    1578:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    157a:	6f 81       	ldd	r22, Y+7	; 0x07
    157c:	78 85       	ldd	r23, Y+8	; 0x08
    157e:	89 85       	ldd	r24, Y+9	; 0x09
    1580:	9a 85       	ldd	r25, Y+10	; 0x0a
    1582:	20 e0       	ldi	r18, 0x00	; 0
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	40 e8       	ldi	r20, 0x80	; 128
    1588:	5f e3       	ldi	r21, 0x3F	; 63
    158a:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    158e:	88 23       	and	r24, r24
    1590:	2c f4       	brge	.+10     	; 0x159c <CLCD_voidSendData+0x38a>
		__ticks = 1;
    1592:	81 e0       	ldi	r24, 0x01	; 1
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	9e 83       	std	Y+6, r25	; 0x06
    1598:	8d 83       	std	Y+5, r24	; 0x05
    159a:	3f c0       	rjmp	.+126    	; 0x161a <CLCD_voidSendData+0x408>
	else if (__tmp > 65535)
    159c:	6f 81       	ldd	r22, Y+7	; 0x07
    159e:	78 85       	ldd	r23, Y+8	; 0x08
    15a0:	89 85       	ldd	r24, Y+9	; 0x09
    15a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    15a4:	20 e0       	ldi	r18, 0x00	; 0
    15a6:	3f ef       	ldi	r19, 0xFF	; 255
    15a8:	4f e7       	ldi	r20, 0x7F	; 127
    15aa:	57 e4       	ldi	r21, 0x47	; 71
    15ac:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    15b0:	18 16       	cp	r1, r24
    15b2:	4c f5       	brge	.+82     	; 0x1606 <CLCD_voidSendData+0x3f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    15b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    15b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    15ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    15bc:	20 e0       	ldi	r18, 0x00	; 0
    15be:	30 e0       	ldi	r19, 0x00	; 0
    15c0:	40 e2       	ldi	r20, 0x20	; 32
    15c2:	51 e4       	ldi	r21, 0x41	; 65
    15c4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15c8:	dc 01       	movw	r26, r24
    15ca:	cb 01       	movw	r24, r22
    15cc:	bc 01       	movw	r22, r24
    15ce:	cd 01       	movw	r24, r26
    15d0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15d4:	dc 01       	movw	r26, r24
    15d6:	cb 01       	movw	r24, r22
    15d8:	9e 83       	std	Y+6, r25	; 0x06
    15da:	8d 83       	std	Y+5, r24	; 0x05
    15dc:	0f c0       	rjmp	.+30     	; 0x15fc <CLCD_voidSendData+0x3ea>
    15de:	88 ec       	ldi	r24, 0xC8	; 200
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	9c 83       	std	Y+4, r25	; 0x04
    15e4:	8b 83       	std	Y+3, r24	; 0x03
    15e6:	8b 81       	ldd	r24, Y+3	; 0x03
    15e8:	9c 81       	ldd	r25, Y+4	; 0x04
    15ea:	01 97       	sbiw	r24, 0x01	; 1
    15ec:	f1 f7       	brne	.-4      	; 0x15ea <CLCD_voidSendData+0x3d8>
    15ee:	9c 83       	std	Y+4, r25	; 0x04
    15f0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15f2:	8d 81       	ldd	r24, Y+5	; 0x05
    15f4:	9e 81       	ldd	r25, Y+6	; 0x06
    15f6:	01 97       	sbiw	r24, 0x01	; 1
    15f8:	9e 83       	std	Y+6, r25	; 0x06
    15fa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15fc:	8d 81       	ldd	r24, Y+5	; 0x05
    15fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1600:	00 97       	sbiw	r24, 0x00	; 0
    1602:	69 f7       	brne	.-38     	; 0x15de <CLCD_voidSendData+0x3cc>
    1604:	14 c0       	rjmp	.+40     	; 0x162e <CLCD_voidSendData+0x41c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1606:	6f 81       	ldd	r22, Y+7	; 0x07
    1608:	78 85       	ldd	r23, Y+8	; 0x08
    160a:	89 85       	ldd	r24, Y+9	; 0x09
    160c:	9a 85       	ldd	r25, Y+10	; 0x0a
    160e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1612:	dc 01       	movw	r26, r24
    1614:	cb 01       	movw	r24, r22
    1616:	9e 83       	std	Y+6, r25	; 0x06
    1618:	8d 83       	std	Y+5, r24	; 0x05
    161a:	8d 81       	ldd	r24, Y+5	; 0x05
    161c:	9e 81       	ldd	r25, Y+6	; 0x06
    161e:	9a 83       	std	Y+2, r25	; 0x02
    1620:	89 83       	std	Y+1, r24	; 0x01
    1622:	89 81       	ldd	r24, Y+1	; 0x01
    1624:	9a 81       	ldd	r25, Y+2	; 0x02
    1626:	01 97       	sbiw	r24, 0x01	; 1
    1628:	f1 f7       	brne	.-4      	; 0x1626 <CLCD_voidSendData+0x414>
    162a:	9a 83       	std	Y+2, r25	; 0x02
    162c:	89 83       	std	Y+1, r24	; 0x01



#endif

}
    162e:	ea 96       	adiw	r28, 0x3a	; 58
    1630:	0f b6       	in	r0, 0x3f	; 63
    1632:	f8 94       	cli
    1634:	de bf       	out	0x3e, r29	; 62
    1636:	0f be       	out	0x3f, r0	; 63
    1638:	cd bf       	out	0x3d, r28	; 61
    163a:	cf 91       	pop	r28
    163c:	df 91       	pop	r29
    163e:	1f 91       	pop	r17
    1640:	08 95       	ret

00001642 <CLCD_voidInit>:

void CLCD_voidInit(void)
{
    1642:	df 93       	push	r29
    1644:	cf 93       	push	r28
    1646:	cd b7       	in	r28, 0x3d	; 61
    1648:	de b7       	in	r29, 0x3e	; 62
    164a:	2e 97       	sbiw	r28, 0x0e	; 14
    164c:	0f b6       	in	r0, 0x3f	; 63
    164e:	f8 94       	cli
    1650:	de bf       	out	0x3e, r29	; 62
    1652:	0f be       	out	0x3f, r0	; 63
    1654:	cd bf       	out	0x3d, r28	; 61
    1656:	80 e0       	ldi	r24, 0x00	; 0
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	a0 e2       	ldi	r26, 0x20	; 32
    165c:	b2 e4       	ldi	r27, 0x42	; 66
    165e:	8b 87       	std	Y+11, r24	; 0x0b
    1660:	9c 87       	std	Y+12, r25	; 0x0c
    1662:	ad 87       	std	Y+13, r26	; 0x0d
    1664:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1666:	6b 85       	ldd	r22, Y+11	; 0x0b
    1668:	7c 85       	ldd	r23, Y+12	; 0x0c
    166a:	8d 85       	ldd	r24, Y+13	; 0x0d
    166c:	9e 85       	ldd	r25, Y+14	; 0x0e
    166e:	20 e0       	ldi	r18, 0x00	; 0
    1670:	30 e0       	ldi	r19, 0x00	; 0
    1672:	4a ef       	ldi	r20, 0xFA	; 250
    1674:	54 e4       	ldi	r21, 0x44	; 68
    1676:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    167a:	dc 01       	movw	r26, r24
    167c:	cb 01       	movw	r24, r22
    167e:	8f 83       	std	Y+7, r24	; 0x07
    1680:	98 87       	std	Y+8, r25	; 0x08
    1682:	a9 87       	std	Y+9, r26	; 0x09
    1684:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1686:	6f 81       	ldd	r22, Y+7	; 0x07
    1688:	78 85       	ldd	r23, Y+8	; 0x08
    168a:	89 85       	ldd	r24, Y+9	; 0x09
    168c:	9a 85       	ldd	r25, Y+10	; 0x0a
    168e:	20 e0       	ldi	r18, 0x00	; 0
    1690:	30 e0       	ldi	r19, 0x00	; 0
    1692:	40 e8       	ldi	r20, 0x80	; 128
    1694:	5f e3       	ldi	r21, 0x3F	; 63
    1696:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    169a:	88 23       	and	r24, r24
    169c:	2c f4       	brge	.+10     	; 0x16a8 <CLCD_voidInit+0x66>
		__ticks = 1;
    169e:	81 e0       	ldi	r24, 0x01	; 1
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	9e 83       	std	Y+6, r25	; 0x06
    16a4:	8d 83       	std	Y+5, r24	; 0x05
    16a6:	3f c0       	rjmp	.+126    	; 0x1726 <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
    16a8:	6f 81       	ldd	r22, Y+7	; 0x07
    16aa:	78 85       	ldd	r23, Y+8	; 0x08
    16ac:	89 85       	ldd	r24, Y+9	; 0x09
    16ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    16b0:	20 e0       	ldi	r18, 0x00	; 0
    16b2:	3f ef       	ldi	r19, 0xFF	; 255
    16b4:	4f e7       	ldi	r20, 0x7F	; 127
    16b6:	57 e4       	ldi	r21, 0x47	; 71
    16b8:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    16bc:	18 16       	cp	r1, r24
    16be:	4c f5       	brge	.+82     	; 0x1712 <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    16c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    16c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    16c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    16c8:	20 e0       	ldi	r18, 0x00	; 0
    16ca:	30 e0       	ldi	r19, 0x00	; 0
    16cc:	40 e2       	ldi	r20, 0x20	; 32
    16ce:	51 e4       	ldi	r21, 0x41	; 65
    16d0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16d4:	dc 01       	movw	r26, r24
    16d6:	cb 01       	movw	r24, r22
    16d8:	bc 01       	movw	r22, r24
    16da:	cd 01       	movw	r24, r26
    16dc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16e0:	dc 01       	movw	r26, r24
    16e2:	cb 01       	movw	r24, r22
    16e4:	9e 83       	std	Y+6, r25	; 0x06
    16e6:	8d 83       	std	Y+5, r24	; 0x05
    16e8:	0f c0       	rjmp	.+30     	; 0x1708 <CLCD_voidInit+0xc6>
    16ea:	88 ec       	ldi	r24, 0xC8	; 200
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	9c 83       	std	Y+4, r25	; 0x04
    16f0:	8b 83       	std	Y+3, r24	; 0x03
    16f2:	8b 81       	ldd	r24, Y+3	; 0x03
    16f4:	9c 81       	ldd	r25, Y+4	; 0x04
    16f6:	01 97       	sbiw	r24, 0x01	; 1
    16f8:	f1 f7       	brne	.-4      	; 0x16f6 <CLCD_voidInit+0xb4>
    16fa:	9c 83       	std	Y+4, r25	; 0x04
    16fc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1700:	9e 81       	ldd	r25, Y+6	; 0x06
    1702:	01 97       	sbiw	r24, 0x01	; 1
    1704:	9e 83       	std	Y+6, r25	; 0x06
    1706:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1708:	8d 81       	ldd	r24, Y+5	; 0x05
    170a:	9e 81       	ldd	r25, Y+6	; 0x06
    170c:	00 97       	sbiw	r24, 0x00	; 0
    170e:	69 f7       	brne	.-38     	; 0x16ea <CLCD_voidInit+0xa8>
    1710:	14 c0       	rjmp	.+40     	; 0x173a <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1712:	6f 81       	ldd	r22, Y+7	; 0x07
    1714:	78 85       	ldd	r23, Y+8	; 0x08
    1716:	89 85       	ldd	r24, Y+9	; 0x09
    1718:	9a 85       	ldd	r25, Y+10	; 0x0a
    171a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    171e:	dc 01       	movw	r26, r24
    1720:	cb 01       	movw	r24, r22
    1722:	9e 83       	std	Y+6, r25	; 0x06
    1724:	8d 83       	std	Y+5, r24	; 0x05
    1726:	8d 81       	ldd	r24, Y+5	; 0x05
    1728:	9e 81       	ldd	r25, Y+6	; 0x06
    172a:	9a 83       	std	Y+2, r25	; 0x02
    172c:	89 83       	std	Y+1, r24	; 0x01
    172e:	89 81       	ldd	r24, Y+1	; 0x01
    1730:	9a 81       	ldd	r25, Y+2	; 0x02
    1732:	01 97       	sbiw	r24, 0x01	; 1
    1734:	f1 f7       	brne	.-4      	; 0x1732 <CLCD_voidInit+0xf0>
    1736:	9a 83       	std	Y+2, r25	; 0x02
    1738:	89 83       	std	Y+1, r24	; 0x01
	C_LCD_voidSendCommand(0x01); /* 1 or 0x01 or 0b00000001*/

#elif   MODE_SELECT ==_4_BIT_MODE

	/* Function set command : 2 lines , 5*8 font size */
	C_LCD_voidSendCommand(0x33);
    173a:	83 e3       	ldi	r24, 0x33	; 51
    173c:	0e 94 f1 06 	call	0xde2	; 0xde2 <C_LCD_voidSendCommand>
	C_LCD_voidSendCommand(0x32);
    1740:	82 e3       	ldi	r24, 0x32	; 50
    1742:	0e 94 f1 06 	call	0xde2	; 0xde2 <C_LCD_voidSendCommand>
	C_LCD_voidSendCommand(0x28);   /* 0bNFXXXXXX  --> N: no of lines F: font size*/
    1746:	88 e2       	ldi	r24, 0x28	; 40
    1748:	0e 94 f1 06 	call	0xde2	; 0xde2 <C_LCD_voidSendCommand>


	/*Display on off control : disable enable , disable cursor , no blink cursor*/
	C_LCD_voidSendCommand(0x0C);
    174c:	8c e0       	ldi	r24, 0x0C	; 12
    174e:	0e 94 f1 06 	call	0xde2	; 0xde2 <C_LCD_voidSendCommand>
	C_LCD_voidSendCommand(0x02);
    1752:	82 e0       	ldi	r24, 0x02	; 2
    1754:	0e 94 f1 06 	call	0xde2	; 0xde2 <C_LCD_voidSendCommand>

	C_LCD_voidSendCommand(0x06);
    1758:	86 e0       	ldi	r24, 0x06	; 6
    175a:	0e 94 f1 06 	call	0xde2	; 0xde2 <C_LCD_voidSendCommand>

	/* Clear display */
	C_LCD_voidSendCommand(0x01);
    175e:	81 e0       	ldi	r24, 0x01	; 1
    1760:	0e 94 f1 06 	call	0xde2	; 0xde2 <C_LCD_voidSendCommand>


#endif


}
    1764:	2e 96       	adiw	r28, 0x0e	; 14
    1766:	0f b6       	in	r0, 0x3f	; 63
    1768:	f8 94       	cli
    176a:	de bf       	out	0x3e, r29	; 62
    176c:	0f be       	out	0x3f, r0	; 63
    176e:	cd bf       	out	0x3d, r28	; 61
    1770:	cf 91       	pop	r28
    1772:	df 91       	pop	r29
    1774:	08 95       	ret

00001776 <CLCD_voidSendString>:

void CLCD_voidSendString(const char* Copy_pcString )
{
    1776:	df 93       	push	r29
    1778:	cf 93       	push	r28
    177a:	00 d0       	rcall	.+0      	; 0x177c <CLCD_voidSendString+0x6>
    177c:	0f 92       	push	r0
    177e:	cd b7       	in	r28, 0x3d	; 61
    1780:	de b7       	in	r29, 0x3e	; 62
    1782:	9b 83       	std	Y+3, r25	; 0x03
    1784:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Counter = 0;
    1786:	19 82       	std	Y+1, r1	; 0x01
    1788:	0e c0       	rjmp	.+28     	; 0x17a6 <CLCD_voidSendString+0x30>
	while (Copy_pcString[Local_u8Counter] != NULL)
	{
		CLCD_voidSendData(Copy_pcString[Local_u8Counter]);
    178a:	89 81       	ldd	r24, Y+1	; 0x01
    178c:	28 2f       	mov	r18, r24
    178e:	30 e0       	ldi	r19, 0x00	; 0
    1790:	8a 81       	ldd	r24, Y+2	; 0x02
    1792:	9b 81       	ldd	r25, Y+3	; 0x03
    1794:	fc 01       	movw	r30, r24
    1796:	e2 0f       	add	r30, r18
    1798:	f3 1f       	adc	r31, r19
    179a:	80 81       	ld	r24, Z
    179c:	0e 94 09 09 	call	0x1212	; 0x1212 <CLCD_voidSendData>
		Local_u8Counter++;
    17a0:	89 81       	ldd	r24, Y+1	; 0x01
    17a2:	8f 5f       	subi	r24, 0xFF	; 255
    17a4:	89 83       	std	Y+1, r24	; 0x01
}

void CLCD_voidSendString(const char* Copy_pcString )
{
	u8 Local_u8Counter = 0;
	while (Copy_pcString[Local_u8Counter] != NULL)
    17a6:	89 81       	ldd	r24, Y+1	; 0x01
    17a8:	28 2f       	mov	r18, r24
    17aa:	30 e0       	ldi	r19, 0x00	; 0
    17ac:	8a 81       	ldd	r24, Y+2	; 0x02
    17ae:	9b 81       	ldd	r25, Y+3	; 0x03
    17b0:	fc 01       	movw	r30, r24
    17b2:	e2 0f       	add	r30, r18
    17b4:	f3 1f       	adc	r31, r19
    17b6:	80 81       	ld	r24, Z
    17b8:	88 23       	and	r24, r24
    17ba:	39 f7       	brne	.-50     	; 0x178a <CLCD_voidSendString+0x14>
	{
		CLCD_voidSendData(Copy_pcString[Local_u8Counter]);
		Local_u8Counter++;
	}
}
    17bc:	0f 90       	pop	r0
    17be:	0f 90       	pop	r0
    17c0:	0f 90       	pop	r0
    17c2:	cf 91       	pop	r28
    17c4:	df 91       	pop	r29
    17c6:	08 95       	ret

000017c8 <CLCD_voidGoToXY>:

void CLCD_voidGoToXY(u8 Copy_u8Xpos, u8 Copy_u8Ypos)
{
    17c8:	df 93       	push	r29
    17ca:	cf 93       	push	r28
    17cc:	00 d0       	rcall	.+0      	; 0x17ce <CLCD_voidGoToXY+0x6>
    17ce:	0f 92       	push	r0
    17d0:	cd b7       	in	r28, 0x3d	; 61
    17d2:	de b7       	in	r29, 0x3e	; 62
    17d4:	8a 83       	std	Y+2, r24	; 0x02
    17d6:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Adress=0;
    17d8:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8Xpos == 0)
    17da:	8a 81       	ldd	r24, Y+2	; 0x02
    17dc:	88 23       	and	r24, r24
    17de:	19 f4       	brne	.+6      	; 0x17e6 <CLCD_voidGoToXY+0x1e>
	{
		Local_u8Adress = Copy_u8Ypos;
    17e0:	8b 81       	ldd	r24, Y+3	; 0x03
    17e2:	89 83       	std	Y+1, r24	; 0x01
    17e4:	06 c0       	rjmp	.+12     	; 0x17f2 <CLCD_voidGoToXY+0x2a>
	}
	else if (Copy_u8Xpos == 1)
    17e6:	8a 81       	ldd	r24, Y+2	; 0x02
    17e8:	81 30       	cpi	r24, 0x01	; 1
    17ea:	19 f4       	brne	.+6      	; 0x17f2 <CLCD_voidGoToXY+0x2a>
	{
		Local_u8Adress = Copy_u8Ypos+0x40;
    17ec:	8b 81       	ldd	r24, Y+3	; 0x03
    17ee:	80 5c       	subi	r24, 0xC0	; 192
    17f0:	89 83       	std	Y+1, r24	; 0x01
	}

	C_LCD_voidSendCommand(Local_u8Adress+128);
    17f2:	89 81       	ldd	r24, Y+1	; 0x01
    17f4:	80 58       	subi	r24, 0x80	; 128
    17f6:	0e 94 f1 06 	call	0xde2	; 0xde2 <C_LCD_voidSendCommand>



}
    17fa:	0f 90       	pop	r0
    17fc:	0f 90       	pop	r0
    17fe:	0f 90       	pop	r0
    1800:	cf 91       	pop	r28
    1802:	df 91       	pop	r29
    1804:	08 95       	ret

00001806 <CLCD_voidWriteSpecialCharacter>:

void CLCD_voidWriteSpecialCharacter(u8* Copy_pu8Pattern, u8 Copy_u8PatternNumber, u8 Copy_u8XPos, u8 Copy_u8YPos)
{
    1806:	df 93       	push	r29
    1808:	cf 93       	push	r28
    180a:	cd b7       	in	r28, 0x3d	; 61
    180c:	de b7       	in	r29, 0x3e	; 62
    180e:	27 97       	sbiw	r28, 0x07	; 7
    1810:	0f b6       	in	r0, 0x3f	; 63
    1812:	f8 94       	cli
    1814:	de bf       	out	0x3e, r29	; 62
    1816:	0f be       	out	0x3f, r0	; 63
    1818:	cd bf       	out	0x3d, r28	; 61
    181a:	9c 83       	std	Y+4, r25	; 0x04
    181c:	8b 83       	std	Y+3, r24	; 0x03
    181e:	6d 83       	std	Y+5, r22	; 0x05
    1820:	4e 83       	std	Y+6, r20	; 0x06
    1822:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8CGRAMAddress= 0, Local_u8Iterator;
    1824:	1a 82       	std	Y+2, r1	; 0x02
	/* Calculate the CGRAM address whose each block is 8 bytes */
	Local_u8CGRAMAddress =Copy_u8PatternNumber*8;
    1826:	8d 81       	ldd	r24, Y+5	; 0x05
    1828:	88 2f       	mov	r24, r24
    182a:	90 e0       	ldi	r25, 0x00	; 0
    182c:	88 0f       	add	r24, r24
    182e:	99 1f       	adc	r25, r25
    1830:	88 0f       	add	r24, r24
    1832:	99 1f       	adc	r25, r25
    1834:	88 0f       	add	r24, r24
    1836:	99 1f       	adc	r25, r25
    1838:	8a 83       	std	Y+2, r24	; 0x02

	/* Send CGRAM Address command to LCD, with setting bit 6, clearing bit 7*/
	C_LCD_voidSendCommand(Local_u8CGRAMAddress+64);
    183a:	8a 81       	ldd	r24, Y+2	; 0x02
    183c:	80 5c       	subi	r24, 0xC0	; 192
    183e:	0e 94 f1 06 	call	0xde2	; 0xde2 <C_LCD_voidSendCommand>

	/* Write the pattern into CGRAM */

	for (Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++)
    1842:	19 82       	std	Y+1, r1	; 0x01
    1844:	0e c0       	rjmp	.+28     	; 0x1862 <CLCD_voidWriteSpecialCharacter+0x5c>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Iterator]);
    1846:	89 81       	ldd	r24, Y+1	; 0x01
    1848:	28 2f       	mov	r18, r24
    184a:	30 e0       	ldi	r19, 0x00	; 0
    184c:	8b 81       	ldd	r24, Y+3	; 0x03
    184e:	9c 81       	ldd	r25, Y+4	; 0x04
    1850:	fc 01       	movw	r30, r24
    1852:	e2 0f       	add	r30, r18
    1854:	f3 1f       	adc	r31, r19
    1856:	80 81       	ld	r24, Z
    1858:	0e 94 09 09 	call	0x1212	; 0x1212 <CLCD_voidSendData>
	/* Send CGRAM Address command to LCD, with setting bit 6, clearing bit 7*/
	C_LCD_voidSendCommand(Local_u8CGRAMAddress+64);

	/* Write the pattern into CGRAM */

	for (Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++)
    185c:	89 81       	ldd	r24, Y+1	; 0x01
    185e:	8f 5f       	subi	r24, 0xFF	; 255
    1860:	89 83       	std	Y+1, r24	; 0x01
    1862:	89 81       	ldd	r24, Y+1	; 0x01
    1864:	88 30       	cpi	r24, 0x08	; 8
    1866:	78 f3       	brcs	.-34     	; 0x1846 <CLCD_voidWriteSpecialCharacter+0x40>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Iterator]);
	}

	/* go back to the DDRAM to display the Pattern*/
	CLCD_voidGoToXY(Copy_u8XPos,Copy_u8YPos);
    1868:	8e 81       	ldd	r24, Y+6	; 0x06
    186a:	6f 81       	ldd	r22, Y+7	; 0x07
    186c:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <CLCD_voidGoToXY>
	/* Display the pattern written in the CGRAM*/
	CLCD_voidSendData(Copy_u8PatternNumber);
    1870:	8d 81       	ldd	r24, Y+5	; 0x05
    1872:	0e 94 09 09 	call	0x1212	; 0x1212 <CLCD_voidSendData>
}
    1876:	27 96       	adiw	r28, 0x07	; 7
    1878:	0f b6       	in	r0, 0x3f	; 63
    187a:	f8 94       	cli
    187c:	de bf       	out	0x3e, r29	; 62
    187e:	0f be       	out	0x3f, r0	; 63
    1880:	cd bf       	out	0x3d, r28	; 61
    1882:	cf 91       	pop	r28
    1884:	df 91       	pop	r29
    1886:	08 95       	ret

00001888 <CLCD_VoidWriteNumber>:

void CLCD_VoidWriteNumber(f32 Copy_u32Number)
{
    1888:	0f 93       	push	r16
    188a:	1f 93       	push	r17
    188c:	df 93       	push	r29
    188e:	cf 93       	push	r28
    1890:	cd b7       	in	r28, 0x3d	; 61
    1892:	de b7       	in	r29, 0x3e	; 62
    1894:	6d 97       	sbiw	r28, 0x1d	; 29
    1896:	0f b6       	in	r0, 0x3f	; 63
    1898:	f8 94       	cli
    189a:	de bf       	out	0x3e, r29	; 62
    189c:	0f be       	out	0x3f, r0	; 63
    189e:	cd bf       	out	0x3d, r28	; 61
    18a0:	6a 8f       	std	Y+26, r22	; 0x1a
    18a2:	7b 8f       	std	Y+27, r23	; 0x1b
    18a4:	8c 8f       	std	Y+28, r24	; 0x1c
    18a6:	9d 8f       	std	Y+29, r25	; 0x1d
	s32 Local_s32Number = Copy_u32Number;
    18a8:	6a 8d       	ldd	r22, Y+26	; 0x1a
    18aa:	7b 8d       	ldd	r23, Y+27	; 0x1b
    18ac:	8c 8d       	ldd	r24, Y+28	; 0x1c
    18ae:	9d 8d       	ldd	r25, Y+29	; 0x1d
    18b0:	0e 94 2f 04 	call	0x85e	; 0x85e <__fixsfsi>
    18b4:	dc 01       	movw	r26, r24
    18b6:	cb 01       	movw	r24, r22
    18b8:	8a 83       	std	Y+2, r24	; 0x02
    18ba:	9b 83       	std	Y+3, r25	; 0x03
    18bc:	ac 83       	std	Y+4, r26	; 0x04
    18be:	bd 83       	std	Y+5, r27	; 0x05

	if(Local_s32Number == 0)
    18c0:	8a 81       	ldd	r24, Y+2	; 0x02
    18c2:	9b 81       	ldd	r25, Y+3	; 0x03
    18c4:	ac 81       	ldd	r26, Y+4	; 0x04
    18c6:	bd 81       	ldd	r27, Y+5	; 0x05
    18c8:	00 97       	sbiw	r24, 0x00	; 0
    18ca:	a1 05       	cpc	r26, r1
    18cc:	b1 05       	cpc	r27, r1
    18ce:	21 f4       	brne	.+8      	; 0x18d8 <CLCD_VoidWriteNumber+0x50>
	{
		CLCD_voidSendData('0');
    18d0:	80 e3       	ldi	r24, 0x30	; 48
    18d2:	0e 94 09 09 	call	0x1212	; 0x1212 <CLCD_voidSendData>
    18d6:	18 c0       	rjmp	.+48     	; 0x1908 <CLCD_VoidWriteNumber+0x80>
	}
	else if (Local_s32Number <0)
    18d8:	8a 81       	ldd	r24, Y+2	; 0x02
    18da:	9b 81       	ldd	r25, Y+3	; 0x03
    18dc:	ac 81       	ldd	r26, Y+4	; 0x04
    18de:	bd 81       	ldd	r27, Y+5	; 0x05
    18e0:	bb 23       	and	r27, r27
    18e2:	94 f4       	brge	.+36     	; 0x1908 <CLCD_VoidWriteNumber+0x80>
	{
		CLCD_voidSendData('-');
    18e4:	8d e2       	ldi	r24, 0x2D	; 45
    18e6:	0e 94 09 09 	call	0x1212	; 0x1212 <CLCD_voidSendData>
		Local_s32Number = Local_s32Number *(-1);
    18ea:	8a 81       	ldd	r24, Y+2	; 0x02
    18ec:	9b 81       	ldd	r25, Y+3	; 0x03
    18ee:	ac 81       	ldd	r26, Y+4	; 0x04
    18f0:	bd 81       	ldd	r27, Y+5	; 0x05
    18f2:	b0 95       	com	r27
    18f4:	a0 95       	com	r26
    18f6:	90 95       	com	r25
    18f8:	81 95       	neg	r24
    18fa:	9f 4f       	sbci	r25, 0xFF	; 255
    18fc:	af 4f       	sbci	r26, 0xFF	; 255
    18fe:	bf 4f       	sbci	r27, 0xFF	; 255
    1900:	8a 83       	std	Y+2, r24	; 0x02
    1902:	9b 83       	std	Y+3, r25	; 0x03
    1904:	ac 83       	std	Y+4, r26	; 0x04
    1906:	bd 83       	std	Y+5, r27	; 0x05

	}
	u8 Local_u8Array[20]={0};
    1908:	84 e1       	ldi	r24, 0x14	; 20
    190a:	fe 01       	movw	r30, r28
    190c:	36 96       	adiw	r30, 0x06	; 6
    190e:	df 01       	movw	r26, r30
    1910:	98 2f       	mov	r25, r24
    1912:	1d 92       	st	X+, r1
    1914:	9a 95       	dec	r25
    1916:	e9 f7       	brne	.-6      	; 0x1912 <CLCD_VoidWriteNumber+0x8a>
	s8 local_s8Counter =0;
    1918:	19 82       	std	Y+1, r1	; 0x01
    191a:	2f c0       	rjmp	.+94     	; 0x197a <CLCD_VoidWriteNumber+0xf2>
	while (Local_s32Number != 0)
	{
		Local_u8Array[local_s8Counter]= Local_s32Number%10;
    191c:	89 81       	ldd	r24, Y+1	; 0x01
    191e:	08 2f       	mov	r16, r24
    1920:	11 27       	eor	r17, r17
    1922:	07 fd       	sbrc	r16, 7
    1924:	10 95       	com	r17
    1926:	8a 81       	ldd	r24, Y+2	; 0x02
    1928:	9b 81       	ldd	r25, Y+3	; 0x03
    192a:	ac 81       	ldd	r26, Y+4	; 0x04
    192c:	bd 81       	ldd	r27, Y+5	; 0x05
    192e:	2a e0       	ldi	r18, 0x0A	; 10
    1930:	30 e0       	ldi	r19, 0x00	; 0
    1932:	40 e0       	ldi	r20, 0x00	; 0
    1934:	50 e0       	ldi	r21, 0x00	; 0
    1936:	bc 01       	movw	r22, r24
    1938:	cd 01       	movw	r24, r26
    193a:	0e 94 b4 11 	call	0x2368	; 0x2368 <__divmodsi4>
    193e:	dc 01       	movw	r26, r24
    1940:	cb 01       	movw	r24, r22
    1942:	28 2f       	mov	r18, r24
    1944:	ce 01       	movw	r24, r28
    1946:	06 96       	adiw	r24, 0x06	; 6
    1948:	fc 01       	movw	r30, r24
    194a:	e0 0f       	add	r30, r16
    194c:	f1 1f       	adc	r31, r17
    194e:	20 83       	st	Z, r18
		Local_s32Number/=10;
    1950:	8a 81       	ldd	r24, Y+2	; 0x02
    1952:	9b 81       	ldd	r25, Y+3	; 0x03
    1954:	ac 81       	ldd	r26, Y+4	; 0x04
    1956:	bd 81       	ldd	r27, Y+5	; 0x05
    1958:	2a e0       	ldi	r18, 0x0A	; 10
    195a:	30 e0       	ldi	r19, 0x00	; 0
    195c:	40 e0       	ldi	r20, 0x00	; 0
    195e:	50 e0       	ldi	r21, 0x00	; 0
    1960:	bc 01       	movw	r22, r24
    1962:	cd 01       	movw	r24, r26
    1964:	0e 94 b4 11 	call	0x2368	; 0x2368 <__divmodsi4>
    1968:	da 01       	movw	r26, r20
    196a:	c9 01       	movw	r24, r18
    196c:	8a 83       	std	Y+2, r24	; 0x02
    196e:	9b 83       	std	Y+3, r25	; 0x03
    1970:	ac 83       	std	Y+4, r26	; 0x04
    1972:	bd 83       	std	Y+5, r27	; 0x05
		local_s8Counter++;
    1974:	89 81       	ldd	r24, Y+1	; 0x01
    1976:	8f 5f       	subi	r24, 0xFF	; 255
    1978:	89 83       	std	Y+1, r24	; 0x01
		Local_s32Number = Local_s32Number *(-1);

	}
	u8 Local_u8Array[20]={0};
	s8 local_s8Counter =0;
	while (Local_s32Number != 0)
    197a:	8a 81       	ldd	r24, Y+2	; 0x02
    197c:	9b 81       	ldd	r25, Y+3	; 0x03
    197e:	ac 81       	ldd	r26, Y+4	; 0x04
    1980:	bd 81       	ldd	r27, Y+5	; 0x05
    1982:	00 97       	sbiw	r24, 0x00	; 0
    1984:	a1 05       	cpc	r26, r1
    1986:	b1 05       	cpc	r27, r1
    1988:	49 f6       	brne	.-110    	; 0x191c <CLCD_VoidWriteNumber+0x94>
	{
		Local_u8Array[local_s8Counter]= Local_s32Number%10;
		Local_s32Number/=10;
		local_s8Counter++;
	}
	local_s8Counter--;
    198a:	89 81       	ldd	r24, Y+1	; 0x01
    198c:	81 50       	subi	r24, 0x01	; 1
    198e:	89 83       	std	Y+1, r24	; 0x01
    1990:	11 c0       	rjmp	.+34     	; 0x19b4 <CLCD_VoidWriteNumber+0x12c>
	while (local_s8Counter>=0)
	{
		CLCD_voidSendData(Local_u8Array[local_s8Counter]+'0');
    1992:	89 81       	ldd	r24, Y+1	; 0x01
    1994:	28 2f       	mov	r18, r24
    1996:	33 27       	eor	r19, r19
    1998:	27 fd       	sbrc	r18, 7
    199a:	30 95       	com	r19
    199c:	ce 01       	movw	r24, r28
    199e:	06 96       	adiw	r24, 0x06	; 6
    19a0:	fc 01       	movw	r30, r24
    19a2:	e2 0f       	add	r30, r18
    19a4:	f3 1f       	adc	r31, r19
    19a6:	80 81       	ld	r24, Z
    19a8:	80 5d       	subi	r24, 0xD0	; 208
    19aa:	0e 94 09 09 	call	0x1212	; 0x1212 <CLCD_voidSendData>
		local_s8Counter--;
    19ae:	89 81       	ldd	r24, Y+1	; 0x01
    19b0:	81 50       	subi	r24, 0x01	; 1
    19b2:	89 83       	std	Y+1, r24	; 0x01
		Local_u8Array[local_s8Counter]= Local_s32Number%10;
		Local_s32Number/=10;
		local_s8Counter++;
	}
	local_s8Counter--;
	while (local_s8Counter>=0)
    19b4:	89 81       	ldd	r24, Y+1	; 0x01
    19b6:	88 23       	and	r24, r24
    19b8:	64 f7       	brge	.-40     	; 0x1992 <CLCD_VoidWriteNumber+0x10a>
	{
		CLCD_voidSendData(Local_u8Array[local_s8Counter]+'0');
		local_s8Counter--;
	}
}
    19ba:	6d 96       	adiw	r28, 0x1d	; 29
    19bc:	0f b6       	in	r0, 0x3f	; 63
    19be:	f8 94       	cli
    19c0:	de bf       	out	0x3e, r29	; 62
    19c2:	0f be       	out	0x3f, r0	; 63
    19c4:	cd bf       	out	0x3d, r28	; 61
    19c6:	cf 91       	pop	r28
    19c8:	df 91       	pop	r29
    19ca:	1f 91       	pop	r17
    19cc:	0f 91       	pop	r16
    19ce:	08 95       	ret

000019d0 <CLCD_voidWriteFloatNumber>:

void CLCD_voidWriteFloatNumber(f32 Copy_f32FloatNumber )
{
    19d0:	df 93       	push	r29
    19d2:	cf 93       	push	r28
    19d4:	cd b7       	in	r28, 0x3d	; 61
    19d6:	de b7       	in	r29, 0x3e	; 62
    19d8:	28 97       	sbiw	r28, 0x08	; 8
    19da:	0f b6       	in	r0, 0x3f	; 63
    19dc:	f8 94       	cli
    19de:	de bf       	out	0x3e, r29	; 62
    19e0:	0f be       	out	0x3f, r0	; 63
    19e2:	cd bf       	out	0x3d, r28	; 61
    19e4:	6d 83       	std	Y+5, r22	; 0x05
    19e6:	7e 83       	std	Y+6, r23	; 0x06
    19e8:	8f 83       	std	Y+7, r24	; 0x07
    19ea:	98 87       	std	Y+8, r25	; 0x08

	if(Copy_f32FloatNumber == 0)
    19ec:	6d 81       	ldd	r22, Y+5	; 0x05
    19ee:	7e 81       	ldd	r23, Y+6	; 0x06
    19f0:	8f 81       	ldd	r24, Y+7	; 0x07
    19f2:	98 85       	ldd	r25, Y+8	; 0x08
    19f4:	20 e0       	ldi	r18, 0x00	; 0
    19f6:	30 e0       	ldi	r19, 0x00	; 0
    19f8:	40 e0       	ldi	r20, 0x00	; 0
    19fa:	50 e0       	ldi	r21, 0x00	; 0
    19fc:	0e 94 11 03 	call	0x622	; 0x622 <__eqsf2>
    1a00:	88 23       	and	r24, r24
    1a02:	39 f4       	brne	.+14     	; 0x1a12 <CLCD_voidWriteFloatNumber+0x42>
	{
		CLCD_VoidWriteNumber(0);
    1a04:	60 e0       	ldi	r22, 0x00	; 0
    1a06:	70 e0       	ldi	r23, 0x00	; 0
    1a08:	80 e0       	ldi	r24, 0x00	; 0
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	0e 94 44 0c 	call	0x1888	; 0x1888 <CLCD_VoidWriteNumber>
    1a10:	7c c0       	rjmp	.+248    	; 0x1b0a <CLCD_voidWriteFloatNumber+0x13a>
	}

	else
	{
		s32 Local_s32DecemalNum=Copy_f32FloatNumber;
    1a12:	6d 81       	ldd	r22, Y+5	; 0x05
    1a14:	7e 81       	ldd	r23, Y+6	; 0x06
    1a16:	8f 81       	ldd	r24, Y+7	; 0x07
    1a18:	98 85       	ldd	r25, Y+8	; 0x08
    1a1a:	0e 94 2f 04 	call	0x85e	; 0x85e <__fixsfsi>
    1a1e:	dc 01       	movw	r26, r24
    1a20:	cb 01       	movw	r24, r22
    1a22:	89 83       	std	Y+1, r24	; 0x01
    1a24:	9a 83       	std	Y+2, r25	; 0x02
    1a26:	ab 83       	std	Y+3, r26	; 0x03
    1a28:	bc 83       	std	Y+4, r27	; 0x04
		CLCD_VoidWriteNumber(Local_s32DecemalNum);
    1a2a:	69 81       	ldd	r22, Y+1	; 0x01
    1a2c:	7a 81       	ldd	r23, Y+2	; 0x02
    1a2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a30:	9c 81       	ldd	r25, Y+4	; 0x04
    1a32:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <__floatsisf>
    1a36:	dc 01       	movw	r26, r24
    1a38:	cb 01       	movw	r24, r22
    1a3a:	bc 01       	movw	r22, r24
    1a3c:	cd 01       	movw	r24, r26
    1a3e:	0e 94 44 0c 	call	0x1888	; 0x1888 <CLCD_VoidWriteNumber>
		CLCD_voidSendData('.');
    1a42:	8e e2       	ldi	r24, 0x2E	; 46
    1a44:	0e 94 09 09 	call	0x1212	; 0x1212 <CLCD_voidSendData>
		Copy_f32FloatNumber = Copy_f32FloatNumber -Local_s32DecemalNum;
    1a48:	69 81       	ldd	r22, Y+1	; 0x01
    1a4a:	7a 81       	ldd	r23, Y+2	; 0x02
    1a4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a50:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <__floatsisf>
    1a54:	9b 01       	movw	r18, r22
    1a56:	ac 01       	movw	r20, r24
    1a58:	6d 81       	ldd	r22, Y+5	; 0x05
    1a5a:	7e 81       	ldd	r23, Y+6	; 0x06
    1a5c:	8f 81       	ldd	r24, Y+7	; 0x07
    1a5e:	98 85       	ldd	r25, Y+8	; 0x08
    1a60:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
    1a64:	dc 01       	movw	r26, r24
    1a66:	cb 01       	movw	r24, r22
    1a68:	8d 83       	std	Y+5, r24	; 0x05
    1a6a:	9e 83       	std	Y+6, r25	; 0x06
    1a6c:	af 83       	std	Y+7, r26	; 0x07
    1a6e:	b8 87       	std	Y+8, r27	; 0x08

		Copy_f32FloatNumber*=100000;
    1a70:	6d 81       	ldd	r22, Y+5	; 0x05
    1a72:	7e 81       	ldd	r23, Y+6	; 0x06
    1a74:	8f 81       	ldd	r24, Y+7	; 0x07
    1a76:	98 85       	ldd	r25, Y+8	; 0x08
    1a78:	20 e0       	ldi	r18, 0x00	; 0
    1a7a:	30 e5       	ldi	r19, 0x50	; 80
    1a7c:	43 ec       	ldi	r20, 0xC3	; 195
    1a7e:	57 e4       	ldi	r21, 0x47	; 71
    1a80:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a84:	dc 01       	movw	r26, r24
    1a86:	cb 01       	movw	r24, r22
    1a88:	8d 83       	std	Y+5, r24	; 0x05
    1a8a:	9e 83       	std	Y+6, r25	; 0x06
    1a8c:	af 83       	std	Y+7, r26	; 0x07
    1a8e:	b8 87       	std	Y+8, r27	; 0x08
		Local_s32DecemalNum = Copy_f32FloatNumber;
    1a90:	6d 81       	ldd	r22, Y+5	; 0x05
    1a92:	7e 81       	ldd	r23, Y+6	; 0x06
    1a94:	8f 81       	ldd	r24, Y+7	; 0x07
    1a96:	98 85       	ldd	r25, Y+8	; 0x08
    1a98:	0e 94 2f 04 	call	0x85e	; 0x85e <__fixsfsi>
    1a9c:	dc 01       	movw	r26, r24
    1a9e:	cb 01       	movw	r24, r22
    1aa0:	89 83       	std	Y+1, r24	; 0x01
    1aa2:	9a 83       	std	Y+2, r25	; 0x02
    1aa4:	ab 83       	std	Y+3, r26	; 0x03
    1aa6:	bc 83       	std	Y+4, r27	; 0x04
    1aa8:	12 c0       	rjmp	.+36     	; 0x1ace <CLCD_voidWriteFloatNumber+0xfe>

		while (Local_s32DecemalNum%10 == 0)
		{
			Local_s32DecemalNum/=10;
    1aaa:	89 81       	ldd	r24, Y+1	; 0x01
    1aac:	9a 81       	ldd	r25, Y+2	; 0x02
    1aae:	ab 81       	ldd	r26, Y+3	; 0x03
    1ab0:	bc 81       	ldd	r27, Y+4	; 0x04
    1ab2:	2a e0       	ldi	r18, 0x0A	; 10
    1ab4:	30 e0       	ldi	r19, 0x00	; 0
    1ab6:	40 e0       	ldi	r20, 0x00	; 0
    1ab8:	50 e0       	ldi	r21, 0x00	; 0
    1aba:	bc 01       	movw	r22, r24
    1abc:	cd 01       	movw	r24, r26
    1abe:	0e 94 b4 11 	call	0x2368	; 0x2368 <__divmodsi4>
    1ac2:	da 01       	movw	r26, r20
    1ac4:	c9 01       	movw	r24, r18
    1ac6:	89 83       	std	Y+1, r24	; 0x01
    1ac8:	9a 83       	std	Y+2, r25	; 0x02
    1aca:	ab 83       	std	Y+3, r26	; 0x03
    1acc:	bc 83       	std	Y+4, r27	; 0x04
		Copy_f32FloatNumber = Copy_f32FloatNumber -Local_s32DecemalNum;

		Copy_f32FloatNumber*=100000;
		Local_s32DecemalNum = Copy_f32FloatNumber;

		while (Local_s32DecemalNum%10 == 0)
    1ace:	89 81       	ldd	r24, Y+1	; 0x01
    1ad0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ad2:	ab 81       	ldd	r26, Y+3	; 0x03
    1ad4:	bc 81       	ldd	r27, Y+4	; 0x04
    1ad6:	2a e0       	ldi	r18, 0x0A	; 10
    1ad8:	30 e0       	ldi	r19, 0x00	; 0
    1ada:	40 e0       	ldi	r20, 0x00	; 0
    1adc:	50 e0       	ldi	r21, 0x00	; 0
    1ade:	bc 01       	movw	r22, r24
    1ae0:	cd 01       	movw	r24, r26
    1ae2:	0e 94 b4 11 	call	0x2368	; 0x2368 <__divmodsi4>
    1ae6:	dc 01       	movw	r26, r24
    1ae8:	cb 01       	movw	r24, r22
    1aea:	00 97       	sbiw	r24, 0x00	; 0
    1aec:	a1 05       	cpc	r26, r1
    1aee:	b1 05       	cpc	r27, r1
    1af0:	e1 f2       	breq	.-72     	; 0x1aaa <CLCD_voidWriteFloatNumber+0xda>
		{
			Local_s32DecemalNum/=10;
		}
		CLCD_VoidWriteNumber(Local_s32DecemalNum);
    1af2:	69 81       	ldd	r22, Y+1	; 0x01
    1af4:	7a 81       	ldd	r23, Y+2	; 0x02
    1af6:	8b 81       	ldd	r24, Y+3	; 0x03
    1af8:	9c 81       	ldd	r25, Y+4	; 0x04
    1afa:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <__floatsisf>
    1afe:	dc 01       	movw	r26, r24
    1b00:	cb 01       	movw	r24, r22
    1b02:	bc 01       	movw	r22, r24
    1b04:	cd 01       	movw	r24, r26
    1b06:	0e 94 44 0c 	call	0x1888	; 0x1888 <CLCD_VoidWriteNumber>
	}
}
    1b0a:	28 96       	adiw	r28, 0x08	; 8
    1b0c:	0f b6       	in	r0, 0x3f	; 63
    1b0e:	f8 94       	cli
    1b10:	de bf       	out	0x3e, r29	; 62
    1b12:	0f be       	out	0x3f, r0	; 63
    1b14:	cd bf       	out	0x3d, r28	; 61
    1b16:	cf 91       	pop	r28
    1b18:	df 91       	pop	r29
    1b1a:	08 95       	ret

00001b1c <CLCD_voidClear>:
//}



void CLCD_voidClear()
{
    1b1c:	df 93       	push	r29
    1b1e:	cf 93       	push	r28
    1b20:	cd b7       	in	r28, 0x3d	; 61
    1b22:	de b7       	in	r29, 0x3e	; 62
	C_LCD_voidSendCommand(0x01);
    1b24:	81 e0       	ldi	r24, 0x01	; 1
    1b26:	0e 94 f1 06 	call	0xde2	; 0xde2 <C_LCD_voidSendCommand>

}
    1b2a:	cf 91       	pop	r28
    1b2c:	df 91       	pop	r29
    1b2e:	08 95       	ret

00001b30 <DIO_u8SetPinValue>:
//
//	return Local_u8ErrorState;
//}

u8 DIO_u8SetPinValue(u8 Copy_u8port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
    1b30:	df 93       	push	r29
    1b32:	cf 93       	push	r28
    1b34:	cd b7       	in	r28, 0x3d	; 61
    1b36:	de b7       	in	r29, 0x3e	; 62
    1b38:	28 97       	sbiw	r28, 0x08	; 8
    1b3a:	0f b6       	in	r0, 0x3f	; 63
    1b3c:	f8 94       	cli
    1b3e:	de bf       	out	0x3e, r29	; 62
    1b40:	0f be       	out	0x3f, r0	; 63
    1b42:	cd bf       	out	0x3d, r28	; 61
    1b44:	8a 83       	std	Y+2, r24	; 0x02
    1b46:	6b 83       	std	Y+3, r22	; 0x03
    1b48:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    1b4a:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin<=DIO_u8PIN7)
    1b4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b4e:	88 30       	cpi	r24, 0x08	; 8
    1b50:	08 f0       	brcs	.+2      	; 0x1b54 <DIO_u8SetPinValue+0x24>
    1b52:	f4 c0       	rjmp	.+488    	; 0x1d3c <DIO_u8SetPinValue+0x20c>
	{
		if(Copy_u8Value == DIO_u8PIN_LOW)
    1b54:	8c 81       	ldd	r24, Y+4	; 0x04
    1b56:	88 23       	and	r24, r24
    1b58:	09 f0       	breq	.+2      	; 0x1b5c <DIO_u8SetPinValue+0x2c>
    1b5a:	77 c0       	rjmp	.+238    	; 0x1c4a <DIO_u8SetPinValue+0x11a>
		{

			switch(Copy_u8port)
    1b5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5e:	28 2f       	mov	r18, r24
    1b60:	30 e0       	ldi	r19, 0x00	; 0
    1b62:	38 87       	std	Y+8, r19	; 0x08
    1b64:	2f 83       	std	Y+7, r18	; 0x07
    1b66:	8f 81       	ldd	r24, Y+7	; 0x07
    1b68:	98 85       	ldd	r25, Y+8	; 0x08
    1b6a:	81 30       	cpi	r24, 0x01	; 1
    1b6c:	91 05       	cpc	r25, r1
    1b6e:	59 f1       	breq	.+86     	; 0x1bc6 <DIO_u8SetPinValue+0x96>
    1b70:	2f 81       	ldd	r18, Y+7	; 0x07
    1b72:	38 85       	ldd	r19, Y+8	; 0x08
    1b74:	22 30       	cpi	r18, 0x02	; 2
    1b76:	31 05       	cpc	r19, r1
    1b78:	2c f4       	brge	.+10     	; 0x1b84 <DIO_u8SetPinValue+0x54>
    1b7a:	8f 81       	ldd	r24, Y+7	; 0x07
    1b7c:	98 85       	ldd	r25, Y+8	; 0x08
    1b7e:	00 97       	sbiw	r24, 0x00	; 0
    1b80:	69 f0       	breq	.+26     	; 0x1b9c <DIO_u8SetPinValue+0x6c>
    1b82:	60 c0       	rjmp	.+192    	; 0x1c44 <DIO_u8SetPinValue+0x114>
    1b84:	2f 81       	ldd	r18, Y+7	; 0x07
    1b86:	38 85       	ldd	r19, Y+8	; 0x08
    1b88:	22 30       	cpi	r18, 0x02	; 2
    1b8a:	31 05       	cpc	r19, r1
    1b8c:	89 f1       	breq	.+98     	; 0x1bf0 <DIO_u8SetPinValue+0xc0>
    1b8e:	8f 81       	ldd	r24, Y+7	; 0x07
    1b90:	98 85       	ldd	r25, Y+8	; 0x08
    1b92:	83 30       	cpi	r24, 0x03	; 3
    1b94:	91 05       	cpc	r25, r1
    1b96:	09 f4       	brne	.+2      	; 0x1b9a <DIO_u8SetPinValue+0x6a>
    1b98:	40 c0       	rjmp	.+128    	; 0x1c1a <DIO_u8SetPinValue+0xea>
    1b9a:	54 c0       	rjmp	.+168    	; 0x1c44 <DIO_u8SetPinValue+0x114>
			{
			case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
    1b9c:	ab e3       	ldi	r26, 0x3B	; 59
    1b9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ba0:	eb e3       	ldi	r30, 0x3B	; 59
    1ba2:	f0 e0       	ldi	r31, 0x00	; 0
    1ba4:	80 81       	ld	r24, Z
    1ba6:	48 2f       	mov	r20, r24
    1ba8:	8b 81       	ldd	r24, Y+3	; 0x03
    1baa:	28 2f       	mov	r18, r24
    1bac:	30 e0       	ldi	r19, 0x00	; 0
    1bae:	81 e0       	ldi	r24, 0x01	; 1
    1bb0:	90 e0       	ldi	r25, 0x00	; 0
    1bb2:	02 2e       	mov	r0, r18
    1bb4:	02 c0       	rjmp	.+4      	; 0x1bba <DIO_u8SetPinValue+0x8a>
    1bb6:	88 0f       	add	r24, r24
    1bb8:	99 1f       	adc	r25, r25
    1bba:	0a 94       	dec	r0
    1bbc:	e2 f7       	brpl	.-8      	; 0x1bb6 <DIO_u8SetPinValue+0x86>
    1bbe:	80 95       	com	r24
    1bc0:	84 23       	and	r24, r20
    1bc2:	8c 93       	st	X, r24
    1bc4:	bd c0       	rjmp	.+378    	; 0x1d40 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
    1bc6:	a8 e3       	ldi	r26, 0x38	; 56
    1bc8:	b0 e0       	ldi	r27, 0x00	; 0
    1bca:	e8 e3       	ldi	r30, 0x38	; 56
    1bcc:	f0 e0       	ldi	r31, 0x00	; 0
    1bce:	80 81       	ld	r24, Z
    1bd0:	48 2f       	mov	r20, r24
    1bd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd4:	28 2f       	mov	r18, r24
    1bd6:	30 e0       	ldi	r19, 0x00	; 0
    1bd8:	81 e0       	ldi	r24, 0x01	; 1
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	02 2e       	mov	r0, r18
    1bde:	02 c0       	rjmp	.+4      	; 0x1be4 <DIO_u8SetPinValue+0xb4>
    1be0:	88 0f       	add	r24, r24
    1be2:	99 1f       	adc	r25, r25
    1be4:	0a 94       	dec	r0
    1be6:	e2 f7       	brpl	.-8      	; 0x1be0 <DIO_u8SetPinValue+0xb0>
    1be8:	80 95       	com	r24
    1bea:	84 23       	and	r24, r20
    1bec:	8c 93       	st	X, r24
    1bee:	a8 c0       	rjmp	.+336    	; 0x1d40 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin); break;
    1bf0:	a5 e3       	ldi	r26, 0x35	; 53
    1bf2:	b0 e0       	ldi	r27, 0x00	; 0
    1bf4:	e5 e3       	ldi	r30, 0x35	; 53
    1bf6:	f0 e0       	ldi	r31, 0x00	; 0
    1bf8:	80 81       	ld	r24, Z
    1bfa:	48 2f       	mov	r20, r24
    1bfc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bfe:	28 2f       	mov	r18, r24
    1c00:	30 e0       	ldi	r19, 0x00	; 0
    1c02:	81 e0       	ldi	r24, 0x01	; 1
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	02 2e       	mov	r0, r18
    1c08:	02 c0       	rjmp	.+4      	; 0x1c0e <DIO_u8SetPinValue+0xde>
    1c0a:	88 0f       	add	r24, r24
    1c0c:	99 1f       	adc	r25, r25
    1c0e:	0a 94       	dec	r0
    1c10:	e2 f7       	brpl	.-8      	; 0x1c0a <DIO_u8SetPinValue+0xda>
    1c12:	80 95       	com	r24
    1c14:	84 23       	and	r24, r20
    1c16:	8c 93       	st	X, r24
    1c18:	93 c0       	rjmp	.+294    	; 0x1d40 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin); break;
    1c1a:	a2 e3       	ldi	r26, 0x32	; 50
    1c1c:	b0 e0       	ldi	r27, 0x00	; 0
    1c1e:	e2 e3       	ldi	r30, 0x32	; 50
    1c20:	f0 e0       	ldi	r31, 0x00	; 0
    1c22:	80 81       	ld	r24, Z
    1c24:	48 2f       	mov	r20, r24
    1c26:	8b 81       	ldd	r24, Y+3	; 0x03
    1c28:	28 2f       	mov	r18, r24
    1c2a:	30 e0       	ldi	r19, 0x00	; 0
    1c2c:	81 e0       	ldi	r24, 0x01	; 1
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	02 2e       	mov	r0, r18
    1c32:	02 c0       	rjmp	.+4      	; 0x1c38 <DIO_u8SetPinValue+0x108>
    1c34:	88 0f       	add	r24, r24
    1c36:	99 1f       	adc	r25, r25
    1c38:	0a 94       	dec	r0
    1c3a:	e2 f7       	brpl	.-8      	; 0x1c34 <DIO_u8SetPinValue+0x104>
    1c3c:	80 95       	com	r24
    1c3e:	84 23       	and	r24, r20
    1c40:	8c 93       	st	X, r24
    1c42:	7e c0       	rjmp	.+252    	; 0x1d40 <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState =1; break;
    1c44:	81 e0       	ldi	r24, 0x01	; 1
    1c46:	89 83       	std	Y+1, r24	; 0x01
    1c48:	7b c0       	rjmp	.+246    	; 0x1d40 <DIO_u8SetPinValue+0x210>

			}
		}
		else if(Copy_u8Value == DIO_u8PIN_HIGH)
    1c4a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c4c:	81 30       	cpi	r24, 0x01	; 1
    1c4e:	09 f0       	breq	.+2      	; 0x1c52 <DIO_u8SetPinValue+0x122>
    1c50:	72 c0       	rjmp	.+228    	; 0x1d36 <DIO_u8SetPinValue+0x206>
		{

			switch(Copy_u8port)
    1c52:	8a 81       	ldd	r24, Y+2	; 0x02
    1c54:	28 2f       	mov	r18, r24
    1c56:	30 e0       	ldi	r19, 0x00	; 0
    1c58:	3e 83       	std	Y+6, r19	; 0x06
    1c5a:	2d 83       	std	Y+5, r18	; 0x05
    1c5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c5e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c60:	81 30       	cpi	r24, 0x01	; 1
    1c62:	91 05       	cpc	r25, r1
    1c64:	49 f1       	breq	.+82     	; 0x1cb8 <DIO_u8SetPinValue+0x188>
    1c66:	2d 81       	ldd	r18, Y+5	; 0x05
    1c68:	3e 81       	ldd	r19, Y+6	; 0x06
    1c6a:	22 30       	cpi	r18, 0x02	; 2
    1c6c:	31 05       	cpc	r19, r1
    1c6e:	2c f4       	brge	.+10     	; 0x1c7a <DIO_u8SetPinValue+0x14a>
    1c70:	8d 81       	ldd	r24, Y+5	; 0x05
    1c72:	9e 81       	ldd	r25, Y+6	; 0x06
    1c74:	00 97       	sbiw	r24, 0x00	; 0
    1c76:	61 f0       	breq	.+24     	; 0x1c90 <DIO_u8SetPinValue+0x160>
    1c78:	5b c0       	rjmp	.+182    	; 0x1d30 <DIO_u8SetPinValue+0x200>
    1c7a:	2d 81       	ldd	r18, Y+5	; 0x05
    1c7c:	3e 81       	ldd	r19, Y+6	; 0x06
    1c7e:	22 30       	cpi	r18, 0x02	; 2
    1c80:	31 05       	cpc	r19, r1
    1c82:	71 f1       	breq	.+92     	; 0x1ce0 <DIO_u8SetPinValue+0x1b0>
    1c84:	8d 81       	ldd	r24, Y+5	; 0x05
    1c86:	9e 81       	ldd	r25, Y+6	; 0x06
    1c88:	83 30       	cpi	r24, 0x03	; 3
    1c8a:	91 05       	cpc	r25, r1
    1c8c:	e9 f1       	breq	.+122    	; 0x1d08 <DIO_u8SetPinValue+0x1d8>
    1c8e:	50 c0       	rjmp	.+160    	; 0x1d30 <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
    1c90:	ab e3       	ldi	r26, 0x3B	; 59
    1c92:	b0 e0       	ldi	r27, 0x00	; 0
    1c94:	eb e3       	ldi	r30, 0x3B	; 59
    1c96:	f0 e0       	ldi	r31, 0x00	; 0
    1c98:	80 81       	ld	r24, Z
    1c9a:	48 2f       	mov	r20, r24
    1c9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c9e:	28 2f       	mov	r18, r24
    1ca0:	30 e0       	ldi	r19, 0x00	; 0
    1ca2:	81 e0       	ldi	r24, 0x01	; 1
    1ca4:	90 e0       	ldi	r25, 0x00	; 0
    1ca6:	02 2e       	mov	r0, r18
    1ca8:	02 c0       	rjmp	.+4      	; 0x1cae <DIO_u8SetPinValue+0x17e>
    1caa:	88 0f       	add	r24, r24
    1cac:	99 1f       	adc	r25, r25
    1cae:	0a 94       	dec	r0
    1cb0:	e2 f7       	brpl	.-8      	; 0x1caa <DIO_u8SetPinValue+0x17a>
    1cb2:	84 2b       	or	r24, r20
    1cb4:	8c 93       	st	X, r24
    1cb6:	44 c0       	rjmp	.+136    	; 0x1d40 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
    1cb8:	a8 e3       	ldi	r26, 0x38	; 56
    1cba:	b0 e0       	ldi	r27, 0x00	; 0
    1cbc:	e8 e3       	ldi	r30, 0x38	; 56
    1cbe:	f0 e0       	ldi	r31, 0x00	; 0
    1cc0:	80 81       	ld	r24, Z
    1cc2:	48 2f       	mov	r20, r24
    1cc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc6:	28 2f       	mov	r18, r24
    1cc8:	30 e0       	ldi	r19, 0x00	; 0
    1cca:	81 e0       	ldi	r24, 0x01	; 1
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	02 2e       	mov	r0, r18
    1cd0:	02 c0       	rjmp	.+4      	; 0x1cd6 <DIO_u8SetPinValue+0x1a6>
    1cd2:	88 0f       	add	r24, r24
    1cd4:	99 1f       	adc	r25, r25
    1cd6:	0a 94       	dec	r0
    1cd8:	e2 f7       	brpl	.-8      	; 0x1cd2 <DIO_u8SetPinValue+0x1a2>
    1cda:	84 2b       	or	r24, r20
    1cdc:	8c 93       	st	X, r24
    1cde:	30 c0       	rjmp	.+96     	; 0x1d40 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin); break;
    1ce0:	a5 e3       	ldi	r26, 0x35	; 53
    1ce2:	b0 e0       	ldi	r27, 0x00	; 0
    1ce4:	e5 e3       	ldi	r30, 0x35	; 53
    1ce6:	f0 e0       	ldi	r31, 0x00	; 0
    1ce8:	80 81       	ld	r24, Z
    1cea:	48 2f       	mov	r20, r24
    1cec:	8b 81       	ldd	r24, Y+3	; 0x03
    1cee:	28 2f       	mov	r18, r24
    1cf0:	30 e0       	ldi	r19, 0x00	; 0
    1cf2:	81 e0       	ldi	r24, 0x01	; 1
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	02 2e       	mov	r0, r18
    1cf8:	02 c0       	rjmp	.+4      	; 0x1cfe <DIO_u8SetPinValue+0x1ce>
    1cfa:	88 0f       	add	r24, r24
    1cfc:	99 1f       	adc	r25, r25
    1cfe:	0a 94       	dec	r0
    1d00:	e2 f7       	brpl	.-8      	; 0x1cfa <DIO_u8SetPinValue+0x1ca>
    1d02:	84 2b       	or	r24, r20
    1d04:	8c 93       	st	X, r24
    1d06:	1c c0       	rjmp	.+56     	; 0x1d40 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin); break;
    1d08:	a2 e3       	ldi	r26, 0x32	; 50
    1d0a:	b0 e0       	ldi	r27, 0x00	; 0
    1d0c:	e2 e3       	ldi	r30, 0x32	; 50
    1d0e:	f0 e0       	ldi	r31, 0x00	; 0
    1d10:	80 81       	ld	r24, Z
    1d12:	48 2f       	mov	r20, r24
    1d14:	8b 81       	ldd	r24, Y+3	; 0x03
    1d16:	28 2f       	mov	r18, r24
    1d18:	30 e0       	ldi	r19, 0x00	; 0
    1d1a:	81 e0       	ldi	r24, 0x01	; 1
    1d1c:	90 e0       	ldi	r25, 0x00	; 0
    1d1e:	02 2e       	mov	r0, r18
    1d20:	02 c0       	rjmp	.+4      	; 0x1d26 <DIO_u8SetPinValue+0x1f6>
    1d22:	88 0f       	add	r24, r24
    1d24:	99 1f       	adc	r25, r25
    1d26:	0a 94       	dec	r0
    1d28:	e2 f7       	brpl	.-8      	; 0x1d22 <DIO_u8SetPinValue+0x1f2>
    1d2a:	84 2b       	or	r24, r20
    1d2c:	8c 93       	st	X, r24
    1d2e:	08 c0       	rjmp	.+16     	; 0x1d40 <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState =1; break;
    1d30:	81 e0       	ldi	r24, 0x01	; 1
    1d32:	89 83       	std	Y+1, r24	; 0x01
    1d34:	05 c0       	rjmp	.+10     	; 0x1d40 <DIO_u8SetPinValue+0x210>

			}
		}
		else
		{
			Local_u8ErrorState = 1;
    1d36:	81 e0       	ldi	r24, 0x01	; 1
    1d38:	89 83       	std	Y+1, r24	; 0x01
    1d3a:	02 c0       	rjmp	.+4      	; 0x1d40 <DIO_u8SetPinValue+0x210>
		}

	}
	else
	{
		Local_u8ErrorState = 1;
    1d3c:	81 e0       	ldi	r24, 0x01	; 1
    1d3e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1d40:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d42:	28 96       	adiw	r28, 0x08	; 8
    1d44:	0f b6       	in	r0, 0x3f	; 63
    1d46:	f8 94       	cli
    1d48:	de bf       	out	0x3e, r29	; 62
    1d4a:	0f be       	out	0x3f, r0	; 63
    1d4c:	cd bf       	out	0x3d, r28	; 61
    1d4e:	cf 91       	pop	r28
    1d50:	df 91       	pop	r29
    1d52:	08 95       	ret

00001d54 <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8port, u8 Copy_u8Value)
{
    1d54:	df 93       	push	r29
    1d56:	cf 93       	push	r28
    1d58:	00 d0       	rcall	.+0      	; 0x1d5a <DIO_u8SetPortValue+0x6>
    1d5a:	00 d0       	rcall	.+0      	; 0x1d5c <DIO_u8SetPortValue+0x8>
    1d5c:	0f 92       	push	r0
    1d5e:	cd b7       	in	r28, 0x3d	; 61
    1d60:	de b7       	in	r29, 0x3e	; 62
    1d62:	8a 83       	std	Y+2, r24	; 0x02
    1d64:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    1d66:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8port<=DIO_u8PORTD)
    1d68:	8a 81       	ldd	r24, Y+2	; 0x02
    1d6a:	84 30       	cpi	r24, 0x04	; 4
    1d6c:	b0 f5       	brcc	.+108    	; 0x1dda <DIO_u8SetPortValue+0x86>
	{
		switch(Copy_u8port)
    1d6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d70:	28 2f       	mov	r18, r24
    1d72:	30 e0       	ldi	r19, 0x00	; 0
    1d74:	3d 83       	std	Y+5, r19	; 0x05
    1d76:	2c 83       	std	Y+4, r18	; 0x04
    1d78:	8c 81       	ldd	r24, Y+4	; 0x04
    1d7a:	9d 81       	ldd	r25, Y+5	; 0x05
    1d7c:	81 30       	cpi	r24, 0x01	; 1
    1d7e:	91 05       	cpc	r25, r1
    1d80:	d1 f0       	breq	.+52     	; 0x1db6 <DIO_u8SetPortValue+0x62>
    1d82:	2c 81       	ldd	r18, Y+4	; 0x04
    1d84:	3d 81       	ldd	r19, Y+5	; 0x05
    1d86:	22 30       	cpi	r18, 0x02	; 2
    1d88:	31 05       	cpc	r19, r1
    1d8a:	2c f4       	brge	.+10     	; 0x1d96 <DIO_u8SetPortValue+0x42>
    1d8c:	8c 81       	ldd	r24, Y+4	; 0x04
    1d8e:	9d 81       	ldd	r25, Y+5	; 0x05
    1d90:	00 97       	sbiw	r24, 0x00	; 0
    1d92:	61 f0       	breq	.+24     	; 0x1dac <DIO_u8SetPortValue+0x58>
    1d94:	1f c0       	rjmp	.+62     	; 0x1dd4 <DIO_u8SetPortValue+0x80>
    1d96:	2c 81       	ldd	r18, Y+4	; 0x04
    1d98:	3d 81       	ldd	r19, Y+5	; 0x05
    1d9a:	22 30       	cpi	r18, 0x02	; 2
    1d9c:	31 05       	cpc	r19, r1
    1d9e:	81 f0       	breq	.+32     	; 0x1dc0 <DIO_u8SetPortValue+0x6c>
    1da0:	8c 81       	ldd	r24, Y+4	; 0x04
    1da2:	9d 81       	ldd	r25, Y+5	; 0x05
    1da4:	83 30       	cpi	r24, 0x03	; 3
    1da6:	91 05       	cpc	r25, r1
    1da8:	81 f0       	breq	.+32     	; 0x1dca <DIO_u8SetPortValue+0x76>
    1daa:	14 c0       	rjmp	.+40     	; 0x1dd4 <DIO_u8SetPortValue+0x80>
		{
		case DIO_u8PORTA: PORTA = Copy_u8Value; break;
    1dac:	eb e3       	ldi	r30, 0x3B	; 59
    1dae:	f0 e0       	ldi	r31, 0x00	; 0
    1db0:	8b 81       	ldd	r24, Y+3	; 0x03
    1db2:	80 83       	st	Z, r24
    1db4:	14 c0       	rjmp	.+40     	; 0x1dde <DIO_u8SetPortValue+0x8a>
		case DIO_u8PORTB: PORTB = Copy_u8Value; break;
    1db6:	e8 e3       	ldi	r30, 0x38	; 56
    1db8:	f0 e0       	ldi	r31, 0x00	; 0
    1dba:	8b 81       	ldd	r24, Y+3	; 0x03
    1dbc:	80 83       	st	Z, r24
    1dbe:	0f c0       	rjmp	.+30     	; 0x1dde <DIO_u8SetPortValue+0x8a>
		case DIO_u8PORTC: PORTC = Copy_u8Value; break;
    1dc0:	e5 e3       	ldi	r30, 0x35	; 53
    1dc2:	f0 e0       	ldi	r31, 0x00	; 0
    1dc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc6:	80 83       	st	Z, r24
    1dc8:	0a c0       	rjmp	.+20     	; 0x1dde <DIO_u8SetPortValue+0x8a>
		case DIO_u8PORTD: PORTD = Copy_u8Value; break;
    1dca:	e2 e3       	ldi	r30, 0x32	; 50
    1dcc:	f0 e0       	ldi	r31, 0x00	; 0
    1dce:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd0:	80 83       	st	Z, r24
    1dd2:	05 c0       	rjmp	.+10     	; 0x1dde <DIO_u8SetPortValue+0x8a>
		default: Local_u8ErrorState =1; break;
    1dd4:	81 e0       	ldi	r24, 0x01	; 1
    1dd6:	89 83       	std	Y+1, r24	; 0x01
    1dd8:	02 c0       	rjmp	.+4      	; 0x1dde <DIO_u8SetPortValue+0x8a>

		}
	}
	else
	{
		Local_u8ErrorState = 1;
    1dda:	81 e0       	ldi	r24, 0x01	; 1
    1ddc:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_u8ErrorState;
    1dde:	89 81       	ldd	r24, Y+1	; 0x01
}
    1de0:	0f 90       	pop	r0
    1de2:	0f 90       	pop	r0
    1de4:	0f 90       	pop	r0
    1de6:	0f 90       	pop	r0
    1de8:	0f 90       	pop	r0
    1dea:	cf 91       	pop	r28
    1dec:	df 91       	pop	r29
    1dee:	08 95       	ret

00001df0 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8port, u8 Copy_u8Pin, u8* Copy_Pu8Value)
{
    1df0:	df 93       	push	r29
    1df2:	cf 93       	push	r28
    1df4:	cd b7       	in	r28, 0x3d	; 61
    1df6:	de b7       	in	r29, 0x3e	; 62
    1df8:	27 97       	sbiw	r28, 0x07	; 7
    1dfa:	0f b6       	in	r0, 0x3f	; 63
    1dfc:	f8 94       	cli
    1dfe:	de bf       	out	0x3e, r29	; 62
    1e00:	0f be       	out	0x3f, r0	; 63
    1e02:	cd bf       	out	0x3d, r28	; 61
    1e04:	8a 83       	std	Y+2, r24	; 0x02
    1e06:	6b 83       	std	Y+3, r22	; 0x03
    1e08:	5d 83       	std	Y+5, r21	; 0x05
    1e0a:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    1e0c:	19 82       	std	Y+1, r1	; 0x01

	if((Copy_Pu8Value != NULL )&&(Copy_u8Pin<=DIO_u8PIN7))
    1e0e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e10:	9d 81       	ldd	r25, Y+5	; 0x05
    1e12:	00 97       	sbiw	r24, 0x00	; 0
    1e14:	09 f4       	brne	.+2      	; 0x1e18 <DIO_u8GetPinValue+0x28>
    1e16:	78 c0       	rjmp	.+240    	; 0x1f08 <DIO_u8GetPinValue+0x118>
    1e18:	8b 81       	ldd	r24, Y+3	; 0x03
    1e1a:	88 30       	cpi	r24, 0x08	; 8
    1e1c:	08 f0       	brcs	.+2      	; 0x1e20 <DIO_u8GetPinValue+0x30>
    1e1e:	74 c0       	rjmp	.+232    	; 0x1f08 <DIO_u8GetPinValue+0x118>
	{


			switch(Copy_u8port)
    1e20:	8a 81       	ldd	r24, Y+2	; 0x02
    1e22:	28 2f       	mov	r18, r24
    1e24:	30 e0       	ldi	r19, 0x00	; 0
    1e26:	3f 83       	std	Y+7, r19	; 0x07
    1e28:	2e 83       	std	Y+6, r18	; 0x06
    1e2a:	4e 81       	ldd	r20, Y+6	; 0x06
    1e2c:	5f 81       	ldd	r21, Y+7	; 0x07
    1e2e:	41 30       	cpi	r20, 0x01	; 1
    1e30:	51 05       	cpc	r21, r1
    1e32:	59 f1       	breq	.+86     	; 0x1e8a <DIO_u8GetPinValue+0x9a>
    1e34:	8e 81       	ldd	r24, Y+6	; 0x06
    1e36:	9f 81       	ldd	r25, Y+7	; 0x07
    1e38:	82 30       	cpi	r24, 0x02	; 2
    1e3a:	91 05       	cpc	r25, r1
    1e3c:	34 f4       	brge	.+12     	; 0x1e4a <DIO_u8GetPinValue+0x5a>
    1e3e:	2e 81       	ldd	r18, Y+6	; 0x06
    1e40:	3f 81       	ldd	r19, Y+7	; 0x07
    1e42:	21 15       	cp	r18, r1
    1e44:	31 05       	cpc	r19, r1
    1e46:	69 f0       	breq	.+26     	; 0x1e62 <DIO_u8GetPinValue+0x72>
    1e48:	5c c0       	rjmp	.+184    	; 0x1f02 <DIO_u8GetPinValue+0x112>
    1e4a:	4e 81       	ldd	r20, Y+6	; 0x06
    1e4c:	5f 81       	ldd	r21, Y+7	; 0x07
    1e4e:	42 30       	cpi	r20, 0x02	; 2
    1e50:	51 05       	cpc	r21, r1
    1e52:	79 f1       	breq	.+94     	; 0x1eb2 <DIO_u8GetPinValue+0xc2>
    1e54:	8e 81       	ldd	r24, Y+6	; 0x06
    1e56:	9f 81       	ldd	r25, Y+7	; 0x07
    1e58:	83 30       	cpi	r24, 0x03	; 3
    1e5a:	91 05       	cpc	r25, r1
    1e5c:	09 f4       	brne	.+2      	; 0x1e60 <DIO_u8GetPinValue+0x70>
    1e5e:	3d c0       	rjmp	.+122    	; 0x1eda <DIO_u8GetPinValue+0xea>
    1e60:	50 c0       	rjmp	.+160    	; 0x1f02 <DIO_u8GetPinValue+0x112>
			{
			case DIO_u8PORTA: * Copy_Pu8Value = GET_BIT(PINA,Copy_u8Pin); break;
    1e62:	e9 e3       	ldi	r30, 0x39	; 57
    1e64:	f0 e0       	ldi	r31, 0x00	; 0
    1e66:	80 81       	ld	r24, Z
    1e68:	28 2f       	mov	r18, r24
    1e6a:	30 e0       	ldi	r19, 0x00	; 0
    1e6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e6e:	88 2f       	mov	r24, r24
    1e70:	90 e0       	ldi	r25, 0x00	; 0
    1e72:	a9 01       	movw	r20, r18
    1e74:	02 c0       	rjmp	.+4      	; 0x1e7a <DIO_u8GetPinValue+0x8a>
    1e76:	55 95       	asr	r21
    1e78:	47 95       	ror	r20
    1e7a:	8a 95       	dec	r24
    1e7c:	e2 f7       	brpl	.-8      	; 0x1e76 <DIO_u8GetPinValue+0x86>
    1e7e:	ca 01       	movw	r24, r20
    1e80:	81 70       	andi	r24, 0x01	; 1
    1e82:	ec 81       	ldd	r30, Y+4	; 0x04
    1e84:	fd 81       	ldd	r31, Y+5	; 0x05
    1e86:	80 83       	st	Z, r24
    1e88:	41 c0       	rjmp	.+130    	; 0x1f0c <DIO_u8GetPinValue+0x11c>
			case DIO_u8PORTB: * Copy_Pu8Value = GET_BIT(PINB,Copy_u8Pin); break;
    1e8a:	e6 e3       	ldi	r30, 0x36	; 54
    1e8c:	f0 e0       	ldi	r31, 0x00	; 0
    1e8e:	80 81       	ld	r24, Z
    1e90:	28 2f       	mov	r18, r24
    1e92:	30 e0       	ldi	r19, 0x00	; 0
    1e94:	8b 81       	ldd	r24, Y+3	; 0x03
    1e96:	88 2f       	mov	r24, r24
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	a9 01       	movw	r20, r18
    1e9c:	02 c0       	rjmp	.+4      	; 0x1ea2 <DIO_u8GetPinValue+0xb2>
    1e9e:	55 95       	asr	r21
    1ea0:	47 95       	ror	r20
    1ea2:	8a 95       	dec	r24
    1ea4:	e2 f7       	brpl	.-8      	; 0x1e9e <DIO_u8GetPinValue+0xae>
    1ea6:	ca 01       	movw	r24, r20
    1ea8:	81 70       	andi	r24, 0x01	; 1
    1eaa:	ec 81       	ldd	r30, Y+4	; 0x04
    1eac:	fd 81       	ldd	r31, Y+5	; 0x05
    1eae:	80 83       	st	Z, r24
    1eb0:	2d c0       	rjmp	.+90     	; 0x1f0c <DIO_u8GetPinValue+0x11c>
			case DIO_u8PORTC: * Copy_Pu8Value = GET_BIT(PINC,Copy_u8Pin); break;
    1eb2:	e3 e3       	ldi	r30, 0x33	; 51
    1eb4:	f0 e0       	ldi	r31, 0x00	; 0
    1eb6:	80 81       	ld	r24, Z
    1eb8:	28 2f       	mov	r18, r24
    1eba:	30 e0       	ldi	r19, 0x00	; 0
    1ebc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ebe:	88 2f       	mov	r24, r24
    1ec0:	90 e0       	ldi	r25, 0x00	; 0
    1ec2:	a9 01       	movw	r20, r18
    1ec4:	02 c0       	rjmp	.+4      	; 0x1eca <DIO_u8GetPinValue+0xda>
    1ec6:	55 95       	asr	r21
    1ec8:	47 95       	ror	r20
    1eca:	8a 95       	dec	r24
    1ecc:	e2 f7       	brpl	.-8      	; 0x1ec6 <DIO_u8GetPinValue+0xd6>
    1ece:	ca 01       	movw	r24, r20
    1ed0:	81 70       	andi	r24, 0x01	; 1
    1ed2:	ec 81       	ldd	r30, Y+4	; 0x04
    1ed4:	fd 81       	ldd	r31, Y+5	; 0x05
    1ed6:	80 83       	st	Z, r24
    1ed8:	19 c0       	rjmp	.+50     	; 0x1f0c <DIO_u8GetPinValue+0x11c>
			case DIO_u8PORTD: * Copy_Pu8Value = GET_BIT(PIND,Copy_u8Pin); break;
    1eda:	e0 e3       	ldi	r30, 0x30	; 48
    1edc:	f0 e0       	ldi	r31, 0x00	; 0
    1ede:	80 81       	ld	r24, Z
    1ee0:	28 2f       	mov	r18, r24
    1ee2:	30 e0       	ldi	r19, 0x00	; 0
    1ee4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee6:	88 2f       	mov	r24, r24
    1ee8:	90 e0       	ldi	r25, 0x00	; 0
    1eea:	a9 01       	movw	r20, r18
    1eec:	02 c0       	rjmp	.+4      	; 0x1ef2 <DIO_u8GetPinValue+0x102>
    1eee:	55 95       	asr	r21
    1ef0:	47 95       	ror	r20
    1ef2:	8a 95       	dec	r24
    1ef4:	e2 f7       	brpl	.-8      	; 0x1eee <DIO_u8GetPinValue+0xfe>
    1ef6:	ca 01       	movw	r24, r20
    1ef8:	81 70       	andi	r24, 0x01	; 1
    1efa:	ec 81       	ldd	r30, Y+4	; 0x04
    1efc:	fd 81       	ldd	r31, Y+5	; 0x05
    1efe:	80 83       	st	Z, r24
    1f00:	05 c0       	rjmp	.+10     	; 0x1f0c <DIO_u8GetPinValue+0x11c>
			default: Local_u8ErrorState =1; break;
    1f02:	81 e0       	ldi	r24, 0x01	; 1
    1f04:	89 83       	std	Y+1, r24	; 0x01
    1f06:	02 c0       	rjmp	.+4      	; 0x1f0c <DIO_u8GetPinValue+0x11c>

			}
	}
	else
	{
		Local_u8ErrorState = 1;
    1f08:	81 e0       	ldi	r24, 0x01	; 1
    1f0a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1f0c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f0e:	27 96       	adiw	r28, 0x07	; 7
    1f10:	0f b6       	in	r0, 0x3f	; 63
    1f12:	f8 94       	cli
    1f14:	de bf       	out	0x3e, r29	; 62
    1f16:	0f be       	out	0x3f, r0	; 63
    1f18:	cd bf       	out	0x3d, r28	; 61
    1f1a:	cf 91       	pop	r28
    1f1c:	df 91       	pop	r29
    1f1e:	08 95       	ret

00001f20 <DIO_u8AndWithPort>:

u8 DIO_u8AndWithPort(u8 Copy_u8port, u8 Copy_u8Value)
{
    1f20:	df 93       	push	r29
    1f22:	cf 93       	push	r28
    1f24:	00 d0       	rcall	.+0      	; 0x1f26 <DIO_u8AndWithPort+0x6>
    1f26:	00 d0       	rcall	.+0      	; 0x1f28 <DIO_u8AndWithPort+0x8>
    1f28:	0f 92       	push	r0
    1f2a:	cd b7       	in	r28, 0x3d	; 61
    1f2c:	de b7       	in	r29, 0x3e	; 62
    1f2e:	8a 83       	std	Y+2, r24	; 0x02
    1f30:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Result = 0;
    1f32:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8port)
    1f34:	8a 81       	ldd	r24, Y+2	; 0x02
    1f36:	28 2f       	mov	r18, r24
    1f38:	30 e0       	ldi	r19, 0x00	; 0
    1f3a:	3d 83       	std	Y+5, r19	; 0x05
    1f3c:	2c 83       	std	Y+4, r18	; 0x04
    1f3e:	8c 81       	ldd	r24, Y+4	; 0x04
    1f40:	9d 81       	ldd	r25, Y+5	; 0x05
    1f42:	81 30       	cpi	r24, 0x01	; 1
    1f44:	91 05       	cpc	r25, r1
    1f46:	e1 f0       	breq	.+56     	; 0x1f80 <DIO_u8AndWithPort+0x60>
    1f48:	2c 81       	ldd	r18, Y+4	; 0x04
    1f4a:	3d 81       	ldd	r19, Y+5	; 0x05
    1f4c:	22 30       	cpi	r18, 0x02	; 2
    1f4e:	31 05       	cpc	r19, r1
    1f50:	2c f4       	brge	.+10     	; 0x1f5c <DIO_u8AndWithPort+0x3c>
    1f52:	8c 81       	ldd	r24, Y+4	; 0x04
    1f54:	9d 81       	ldd	r25, Y+5	; 0x05
    1f56:	00 97       	sbiw	r24, 0x00	; 0
    1f58:	61 f0       	breq	.+24     	; 0x1f72 <DIO_u8AndWithPort+0x52>
    1f5a:	26 c0       	rjmp	.+76     	; 0x1fa8 <DIO_u8AndWithPort+0x88>
    1f5c:	2c 81       	ldd	r18, Y+4	; 0x04
    1f5e:	3d 81       	ldd	r19, Y+5	; 0x05
    1f60:	22 30       	cpi	r18, 0x02	; 2
    1f62:	31 05       	cpc	r19, r1
    1f64:	a1 f0       	breq	.+40     	; 0x1f8e <DIO_u8AndWithPort+0x6e>
    1f66:	8c 81       	ldd	r24, Y+4	; 0x04
    1f68:	9d 81       	ldd	r25, Y+5	; 0x05
    1f6a:	83 30       	cpi	r24, 0x03	; 3
    1f6c:	91 05       	cpc	r25, r1
    1f6e:	b1 f0       	breq	.+44     	; 0x1f9c <DIO_u8AndWithPort+0x7c>
    1f70:	1b c0       	rjmp	.+54     	; 0x1fa8 <DIO_u8AndWithPort+0x88>
			{
			case DIO_u8PORTA: Local_u8Result= PORTA & Copy_u8Value; break;
    1f72:	eb e3       	ldi	r30, 0x3B	; 59
    1f74:	f0 e0       	ldi	r31, 0x00	; 0
    1f76:	90 81       	ld	r25, Z
    1f78:	8b 81       	ldd	r24, Y+3	; 0x03
    1f7a:	89 23       	and	r24, r25
    1f7c:	89 83       	std	Y+1, r24	; 0x01
    1f7e:	14 c0       	rjmp	.+40     	; 0x1fa8 <DIO_u8AndWithPort+0x88>
			case DIO_u8PORTB: Local_u8Result= PORTB & Copy_u8Value; break;
    1f80:	e8 e3       	ldi	r30, 0x38	; 56
    1f82:	f0 e0       	ldi	r31, 0x00	; 0
    1f84:	90 81       	ld	r25, Z
    1f86:	8b 81       	ldd	r24, Y+3	; 0x03
    1f88:	89 23       	and	r24, r25
    1f8a:	89 83       	std	Y+1, r24	; 0x01
    1f8c:	0d c0       	rjmp	.+26     	; 0x1fa8 <DIO_u8AndWithPort+0x88>
			case DIO_u8PORTC: Local_u8Result= PORTC & Copy_u8Value; break;
    1f8e:	e5 e3       	ldi	r30, 0x35	; 53
    1f90:	f0 e0       	ldi	r31, 0x00	; 0
    1f92:	90 81       	ld	r25, Z
    1f94:	8b 81       	ldd	r24, Y+3	; 0x03
    1f96:	89 23       	and	r24, r25
    1f98:	89 83       	std	Y+1, r24	; 0x01
    1f9a:	06 c0       	rjmp	.+12     	; 0x1fa8 <DIO_u8AndWithPort+0x88>
			case DIO_u8PORTD: Local_u8Result = PORTD & Copy_u8Value; break;
    1f9c:	e2 e3       	ldi	r30, 0x32	; 50
    1f9e:	f0 e0       	ldi	r31, 0x00	; 0
    1fa0:	90 81       	ld	r25, Z
    1fa2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa4:	89 23       	and	r24, r25
    1fa6:	89 83       	std	Y+1, r24	; 0x01
			default:  break;


			}
	return Local_u8Result;
    1fa8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1faa:	0f 90       	pop	r0
    1fac:	0f 90       	pop	r0
    1fae:	0f 90       	pop	r0
    1fb0:	0f 90       	pop	r0
    1fb2:	0f 90       	pop	r0
    1fb4:	cf 91       	pop	r28
    1fb6:	df 91       	pop	r29
    1fb8:	08 95       	ret

00001fba <KPD_u8GetPressedKey>:
#include "KPD_private.h"



u8 KPD_u8GetPressedKey(void)
{
    1fba:	df 93       	push	r29
    1fbc:	cf 93       	push	r28
    1fbe:	00 d0       	rcall	.+0      	; 0x1fc0 <KPD_u8GetPressedKey+0x6>
    1fc0:	00 d0       	rcall	.+0      	; 0x1fc2 <KPD_u8GetPressedKey+0x8>
    1fc2:	0f 92       	push	r0
    1fc4:	cd b7       	in	r28, 0x3d	; 61
    1fc6:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8PressedKey = KPD_NO_PRESSED_KEY;
    1fc8:	8f ef       	ldi	r24, 0xFF	; 255
    1fca:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8PinState;
	static u8 Local_u8KPDColArr[COLUMN_NUM]= {KPD_COL_0_PIN,KPD_COL_1_PIN,KPD_COL_2_PIN,KPD_COL_3_PIN };
	static u8 Local_u8KPDRowArr[ROW_NUM]= {KPD_ROW_0_PIN,KPD_ROW_1_PIN,KPD_ROW_2_PIN,KPD_ROW_3_PIN };
	static u8 Local_u8KPDArr[ROW_NUM][COLUMN_NUM]=KPD_ARR_VAL;

	for (Local_u8ColCounter=0;Local_u8ColCounter<COLUMN_NUM;Local_u8ColCounter++)
    1fcc:	19 82       	std	Y+1, r1	; 0x01
    1fce:	5e c0       	rjmp	.+188    	; 0x208c <KPD_u8GetPressedKey+0xd2>
	{
		/* Activate current Cloumn*/
		DIO_u8SetPinValue(KPD_COL_PORT,Local_u8KPDColArr[Local_u8ColCounter],DIO_u8PIN_LOW);
    1fd0:	89 81       	ldd	r24, Y+1	; 0x01
    1fd2:	88 2f       	mov	r24, r24
    1fd4:	90 e0       	ldi	r25, 0x00	; 0
    1fd6:	fc 01       	movw	r30, r24
    1fd8:	e0 57       	subi	r30, 0x70	; 112
    1fda:	fe 4f       	sbci	r31, 0xFE	; 254
    1fdc:	90 81       	ld	r25, Z
    1fde:	81 e0       	ldi	r24, 0x01	; 1
    1fe0:	69 2f       	mov	r22, r25
    1fe2:	40 e0       	ldi	r20, 0x00	; 0
    1fe4:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <DIO_u8SetPinValue>

		for(Local_u8RowCounter=0;Local_u8RowCounter<ROW_NUM;Local_u8RowCounter++)
    1fe8:	1a 82       	std	Y+2, r1	; 0x02
    1fea:	3d c0       	rjmp	.+122    	; 0x2066 <KPD_u8GetPressedKey+0xac>
		{
			/* Read the current row */
			DIO_u8GetPinValue(KPD_ROW_PORT,Local_u8KPDRowArr[Local_u8RowCounter],&Local_u8PinState);
    1fec:	8a 81       	ldd	r24, Y+2	; 0x02
    1fee:	88 2f       	mov	r24, r24
    1ff0:	90 e0       	ldi	r25, 0x00	; 0
    1ff2:	fc 01       	movw	r30, r24
    1ff4:	e4 57       	subi	r30, 0x74	; 116
    1ff6:	fe 4f       	sbci	r31, 0xFE	; 254
    1ff8:	90 81       	ld	r25, Z
    1ffa:	9e 01       	movw	r18, r28
    1ffc:	2c 5f       	subi	r18, 0xFC	; 252
    1ffe:	3f 4f       	sbci	r19, 0xFF	; 255
    2000:	81 e0       	ldi	r24, 0x01	; 1
    2002:	69 2f       	mov	r22, r25
    2004:	a9 01       	movw	r20, r18
    2006:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <DIO_u8GetPinValue>
			/* Check if switch is pressed */

			if(DIO_u8PIN_LOW == Local_u8PinState )
    200a:	8c 81       	ldd	r24, Y+4	; 0x04
    200c:	88 23       	and	r24, r24
    200e:	41 f5       	brne	.+80     	; 0x2060 <KPD_u8GetPressedKey+0xa6>
			{

				Local_u8PressedKey = Local_u8KPDArr[Local_u8RowCounter][Local_u8ColCounter];
    2010:	8a 81       	ldd	r24, Y+2	; 0x02
    2012:	48 2f       	mov	r20, r24
    2014:	50 e0       	ldi	r21, 0x00	; 0
    2016:	89 81       	ldd	r24, Y+1	; 0x01
    2018:	28 2f       	mov	r18, r24
    201a:	30 e0       	ldi	r19, 0x00	; 0
    201c:	ca 01       	movw	r24, r20
    201e:	88 0f       	add	r24, r24
    2020:	99 1f       	adc	r25, r25
    2022:	88 0f       	add	r24, r24
    2024:	99 1f       	adc	r25, r25
    2026:	82 0f       	add	r24, r18
    2028:	93 1f       	adc	r25, r19
    202a:	fc 01       	movw	r30, r24
    202c:	e4 58       	subi	r30, 0x84	; 132
    202e:	fe 4f       	sbci	r31, 0xFE	; 254
    2030:	80 81       	ld	r24, Z
    2032:	8b 83       	std	Y+3, r24	; 0x03
    2034:	0f c0       	rjmp	.+30     	; 0x2054 <KPD_u8GetPressedKey+0x9a>
				/* Polling (busy waiting ) until the key is released */
				while (DIO_u8PIN_LOW == Local_u8PinState)
				{
					DIO_u8GetPinValue(KPD_ROW_PORT,Local_u8KPDRowArr[Local_u8RowCounter],&Local_u8PinState);
    2036:	8a 81       	ldd	r24, Y+2	; 0x02
    2038:	88 2f       	mov	r24, r24
    203a:	90 e0       	ldi	r25, 0x00	; 0
    203c:	fc 01       	movw	r30, r24
    203e:	e4 57       	subi	r30, 0x74	; 116
    2040:	fe 4f       	sbci	r31, 0xFE	; 254
    2042:	90 81       	ld	r25, Z
    2044:	9e 01       	movw	r18, r28
    2046:	2c 5f       	subi	r18, 0xFC	; 252
    2048:	3f 4f       	sbci	r19, 0xFF	; 255
    204a:	81 e0       	ldi	r24, 0x01	; 1
    204c:	69 2f       	mov	r22, r25
    204e:	a9 01       	movw	r20, r18
    2050:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <DIO_u8GetPinValue>
			if(DIO_u8PIN_LOW == Local_u8PinState )
			{

				Local_u8PressedKey = Local_u8KPDArr[Local_u8RowCounter][Local_u8ColCounter];
				/* Polling (busy waiting ) until the key is released */
				while (DIO_u8PIN_LOW == Local_u8PinState)
    2054:	8c 81       	ldd	r24, Y+4	; 0x04
    2056:	88 23       	and	r24, r24
    2058:	71 f3       	breq	.-36     	; 0x2036 <KPD_u8GetPressedKey+0x7c>
				{
					DIO_u8GetPinValue(KPD_ROW_PORT,Local_u8KPDRowArr[Local_u8RowCounter],&Local_u8PinState);

				}
				return Local_u8PressedKey;
    205a:	8b 81       	ldd	r24, Y+3	; 0x03
    205c:	8d 83       	std	Y+5, r24	; 0x05
    205e:	1c c0       	rjmp	.+56     	; 0x2098 <KPD_u8GetPressedKey+0xde>
	for (Local_u8ColCounter=0;Local_u8ColCounter<COLUMN_NUM;Local_u8ColCounter++)
	{
		/* Activate current Cloumn*/
		DIO_u8SetPinValue(KPD_COL_PORT,Local_u8KPDColArr[Local_u8ColCounter],DIO_u8PIN_LOW);

		for(Local_u8RowCounter=0;Local_u8RowCounter<ROW_NUM;Local_u8RowCounter++)
    2060:	8a 81       	ldd	r24, Y+2	; 0x02
    2062:	8f 5f       	subi	r24, 0xFF	; 255
    2064:	8a 83       	std	Y+2, r24	; 0x02
    2066:	8a 81       	ldd	r24, Y+2	; 0x02
    2068:	84 30       	cpi	r24, 0x04	; 4
    206a:	08 f4       	brcc	.+2      	; 0x206e <KPD_u8GetPressedKey+0xb4>
    206c:	bf cf       	rjmp	.-130    	; 0x1fec <KPD_u8GetPressedKey+0x32>

		}

		/* Deactivate the current column */

		DIO_u8SetPinValue(KPD_COL_PORT,Local_u8KPDColArr[Local_u8ColCounter],DIO_u8PIN_HIGH);
    206e:	89 81       	ldd	r24, Y+1	; 0x01
    2070:	88 2f       	mov	r24, r24
    2072:	90 e0       	ldi	r25, 0x00	; 0
    2074:	fc 01       	movw	r30, r24
    2076:	e0 57       	subi	r30, 0x70	; 112
    2078:	fe 4f       	sbci	r31, 0xFE	; 254
    207a:	90 81       	ld	r25, Z
    207c:	81 e0       	ldi	r24, 0x01	; 1
    207e:	69 2f       	mov	r22, r25
    2080:	41 e0       	ldi	r20, 0x01	; 1
    2082:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <DIO_u8SetPinValue>
	u8 Local_u8PinState;
	static u8 Local_u8KPDColArr[COLUMN_NUM]= {KPD_COL_0_PIN,KPD_COL_1_PIN,KPD_COL_2_PIN,KPD_COL_3_PIN };
	static u8 Local_u8KPDRowArr[ROW_NUM]= {KPD_ROW_0_PIN,KPD_ROW_1_PIN,KPD_ROW_2_PIN,KPD_ROW_3_PIN };
	static u8 Local_u8KPDArr[ROW_NUM][COLUMN_NUM]=KPD_ARR_VAL;

	for (Local_u8ColCounter=0;Local_u8ColCounter<COLUMN_NUM;Local_u8ColCounter++)
    2086:	89 81       	ldd	r24, Y+1	; 0x01
    2088:	8f 5f       	subi	r24, 0xFF	; 255
    208a:	89 83       	std	Y+1, r24	; 0x01
    208c:	89 81       	ldd	r24, Y+1	; 0x01
    208e:	84 30       	cpi	r24, 0x04	; 4
    2090:	08 f4       	brcc	.+2      	; 0x2094 <KPD_u8GetPressedKey+0xda>
    2092:	9e cf       	rjmp	.-196    	; 0x1fd0 <KPD_u8GetPressedKey+0x16>

		DIO_u8SetPinValue(KPD_COL_PORT,Local_u8KPDColArr[Local_u8ColCounter],DIO_u8PIN_HIGH);

	}

	return Local_u8PressedKey;
    2094:	8b 81       	ldd	r24, Y+3	; 0x03
    2096:	8d 83       	std	Y+5, r24	; 0x05
    2098:	8d 81       	ldd	r24, Y+5	; 0x05





}
    209a:	0f 90       	pop	r0
    209c:	0f 90       	pop	r0
    209e:	0f 90       	pop	r0
    20a0:	0f 90       	pop	r0
    20a2:	0f 90       	pop	r0
    20a4:	cf 91       	pop	r28
    20a6:	df 91       	pop	r29
    20a8:	08 95       	ret

000020aa <PORT_VoidInit>:
#include "PORT_interface.h"
#include "PORT_register.h"


void PORT_VoidInit(void)
{
    20aa:	df 93       	push	r29
    20ac:	cf 93       	push	r28
    20ae:	cd b7       	in	r28, 0x3d	; 61
    20b0:	de b7       	in	r29, 0x3e	; 62
	DDRA = PORTA_DIR;
    20b2:	ea e3       	ldi	r30, 0x3A	; 58
    20b4:	f0 e0       	ldi	r31, 0x00	; 0
    20b6:	10 82       	st	Z, r1
	DDRB = PORTB_DIR;
    20b8:	e7 e3       	ldi	r30, 0x37	; 55
    20ba:	f0 e0       	ldi	r31, 0x00	; 0
    20bc:	80 ef       	ldi	r24, 0xF0	; 240
    20be:	80 83       	st	Z, r24
	DDRC = PORTC_DIR;
    20c0:	e4 e3       	ldi	r30, 0x34	; 52
    20c2:	f0 e0       	ldi	r31, 0x00	; 0
    20c4:	8c ef       	ldi	r24, 0xFC	; 252
    20c6:	80 83       	st	Z, r24
	DDRD = PORTD_DIR;
    20c8:	e1 e3       	ldi	r30, 0x31	; 49
    20ca:	f0 e0       	ldi	r31, 0x00	; 0
    20cc:	10 82       	st	Z, r1
	
	PORTA = PORTA_INITIAL_VALUE;
    20ce:	eb e3       	ldi	r30, 0x3B	; 59
    20d0:	f0 e0       	ldi	r31, 0x00	; 0
    20d2:	10 82       	st	Z, r1
	PORTB = PORTB_INITIAL_VALUE;
    20d4:	e8 e3       	ldi	r30, 0x38	; 56
    20d6:	f0 e0       	ldi	r31, 0x00	; 0
    20d8:	8f e0       	ldi	r24, 0x0F	; 15
    20da:	80 83       	st	Z, r24
	PORTC = PORTC_INITIAL_VALUE;
    20dc:	e5 e3       	ldi	r30, 0x35	; 53
    20de:	f0 e0       	ldi	r31, 0x00	; 0
    20e0:	10 82       	st	Z, r1
	PORTD = PORTD_INITIAL_VALUE;
    20e2:	e2 e3       	ldi	r30, 0x32	; 50
    20e4:	f0 e0       	ldi	r31, 0x00	; 0
    20e6:	10 82       	st	Z, r1


}
    20e8:	cf 91       	pop	r28
    20ea:	df 91       	pop	r29
    20ec:	08 95       	ret

000020ee <main>:
/*********************Global Variables *****************************/


/************************ Main Prog *******************************/
void main(void)
{
    20ee:	0f 93       	push	r16
    20f0:	1f 93       	push	r17
    20f2:	df 93       	push	r29
    20f4:	cf 93       	push	r28
    20f6:	cd b7       	in	r28, 0x3d	; 61
    20f8:	de b7       	in	r29, 0x3e	; 62
    20fa:	28 97       	sbiw	r28, 0x08	; 8
    20fc:	0f b6       	in	r0, 0x3f	; 63
    20fe:	f8 94       	cli
    2100:	de bf       	out	0x3e, r29	; 62
    2102:	0f be       	out	0x3f, r0	; 63
    2104:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8Counter;
	u8 Local_u8CalcArr[5];


	/******************** Driver Init ***************************/
	PORT_VoidInit();
    2106:	0e 94 55 10 	call	0x20aa	; 0x20aa <PORT_VoidInit>
	CLCD_voidInit();
    210a:	0e 94 21 0b 	call	0x1642	; 0x1642 <CLCD_voidInit>



	while(1)
	{
		CLCD_voidGoToXY(0,0);
    210e:	80 e0       	ldi	r24, 0x00	; 0
    2110:	60 e0       	ldi	r22, 0x00	; 0
    2112:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <CLCD_voidGoToXY>
		CLCD_voidSendString("  Simple CalC");
    2116:	80 e6       	ldi	r24, 0x60	; 96
    2118:	90 e0       	ldi	r25, 0x00	; 0
    211a:	0e 94 bb 0b 	call	0x1776	; 0x1776 <CLCD_voidSendString>
		CLCD_voidGoToXY(1,4);
    211e:	81 e0       	ldi	r24, 0x01	; 1
    2120:	64 e0       	ldi	r22, 0x04	; 4
    2122:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <CLCD_voidGoToXY>

		for(Local_u8Counter=0;Local_u8Counter<5;Local_u8Counter++)
    2126:	19 82       	std	Y+1, r1	; 0x01
    2128:	0e c1       	rjmp	.+540    	; 0x2346 <main+0x258>
			//	for(;;)
		{
			do
			{
				Local_u8CalcArr[Local_u8Counter] = KPD_u8GetPressedKey();
    212a:	89 81       	ldd	r24, Y+1	; 0x01
    212c:	08 2f       	mov	r16, r24
    212e:	10 e0       	ldi	r17, 0x00	; 0
    2130:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <KPD_u8GetPressedKey>
    2134:	28 2f       	mov	r18, r24
    2136:	ce 01       	movw	r24, r28
    2138:	02 96       	adiw	r24, 0x02	; 2
    213a:	fc 01       	movw	r30, r24
    213c:	e0 0f       	add	r30, r16
    213e:	f1 1f       	adc	r31, r17
    2140:	20 83       	st	Z, r18
			}while(Local_u8CalcArr[Local_u8Counter]==0xff);
    2142:	89 81       	ldd	r24, Y+1	; 0x01
    2144:	28 2f       	mov	r18, r24
    2146:	30 e0       	ldi	r19, 0x00	; 0
    2148:	ce 01       	movw	r24, r28
    214a:	02 96       	adiw	r24, 0x02	; 2
    214c:	fc 01       	movw	r30, r24
    214e:	e2 0f       	add	r30, r18
    2150:	f3 1f       	adc	r31, r19
    2152:	80 81       	ld	r24, Z
    2154:	8f 3f       	cpi	r24, 0xFF	; 255
    2156:	49 f3       	breq	.-46     	; 0x212a <main+0x3c>
			if(Local_u8CalcArr[Local_u8Counter] == '/'||Local_u8CalcArr[Local_u8Counter] =='*'||Local_u8CalcArr[Local_u8Counter] =='-'||Local_u8CalcArr[Local_u8Counter] =='+'||Local_u8CalcArr[Local_u8Counter] =='=')
    2158:	89 81       	ldd	r24, Y+1	; 0x01
    215a:	28 2f       	mov	r18, r24
    215c:	30 e0       	ldi	r19, 0x00	; 0
    215e:	ce 01       	movw	r24, r28
    2160:	02 96       	adiw	r24, 0x02	; 2
    2162:	fc 01       	movw	r30, r24
    2164:	e2 0f       	add	r30, r18
    2166:	f3 1f       	adc	r31, r19
    2168:	80 81       	ld	r24, Z
    216a:	8f 32       	cpi	r24, 0x2F	; 47
    216c:	69 f1       	breq	.+90     	; 0x21c8 <main+0xda>
    216e:	89 81       	ldd	r24, Y+1	; 0x01
    2170:	28 2f       	mov	r18, r24
    2172:	30 e0       	ldi	r19, 0x00	; 0
    2174:	ce 01       	movw	r24, r28
    2176:	02 96       	adiw	r24, 0x02	; 2
    2178:	fc 01       	movw	r30, r24
    217a:	e2 0f       	add	r30, r18
    217c:	f3 1f       	adc	r31, r19
    217e:	80 81       	ld	r24, Z
    2180:	8a 32       	cpi	r24, 0x2A	; 42
    2182:	11 f1       	breq	.+68     	; 0x21c8 <main+0xda>
    2184:	89 81       	ldd	r24, Y+1	; 0x01
    2186:	28 2f       	mov	r18, r24
    2188:	30 e0       	ldi	r19, 0x00	; 0
    218a:	ce 01       	movw	r24, r28
    218c:	02 96       	adiw	r24, 0x02	; 2
    218e:	fc 01       	movw	r30, r24
    2190:	e2 0f       	add	r30, r18
    2192:	f3 1f       	adc	r31, r19
    2194:	80 81       	ld	r24, Z
    2196:	8d 32       	cpi	r24, 0x2D	; 45
    2198:	b9 f0       	breq	.+46     	; 0x21c8 <main+0xda>
    219a:	89 81       	ldd	r24, Y+1	; 0x01
    219c:	28 2f       	mov	r18, r24
    219e:	30 e0       	ldi	r19, 0x00	; 0
    21a0:	ce 01       	movw	r24, r28
    21a2:	02 96       	adiw	r24, 0x02	; 2
    21a4:	fc 01       	movw	r30, r24
    21a6:	e2 0f       	add	r30, r18
    21a8:	f3 1f       	adc	r31, r19
    21aa:	80 81       	ld	r24, Z
    21ac:	8b 32       	cpi	r24, 0x2B	; 43
    21ae:	61 f0       	breq	.+24     	; 0x21c8 <main+0xda>
    21b0:	89 81       	ldd	r24, Y+1	; 0x01
    21b2:	28 2f       	mov	r18, r24
    21b4:	30 e0       	ldi	r19, 0x00	; 0
    21b6:	ce 01       	movw	r24, r28
    21b8:	02 96       	adiw	r24, 0x02	; 2
    21ba:	fc 01       	movw	r30, r24
    21bc:	e2 0f       	add	r30, r18
    21be:	f3 1f       	adc	r31, r19
    21c0:	80 81       	ld	r24, Z
    21c2:	8d 33       	cpi	r24, 0x3D	; 61
    21c4:	09 f0       	breq	.+2      	; 0x21c8 <main+0xda>
    21c6:	97 c0       	rjmp	.+302    	; 0x22f6 <main+0x208>
			{
				CLCD_voidSendData(Local_u8CalcArr[Local_u8Counter]);
    21c8:	89 81       	ldd	r24, Y+1	; 0x01
    21ca:	28 2f       	mov	r18, r24
    21cc:	30 e0       	ldi	r19, 0x00	; 0
    21ce:	ce 01       	movw	r24, r28
    21d0:	02 96       	adiw	r24, 0x02	; 2
    21d2:	fc 01       	movw	r30, r24
    21d4:	e2 0f       	add	r30, r18
    21d6:	f3 1f       	adc	r31, r19
    21d8:	80 81       	ld	r24, Z
    21da:	0e 94 09 09 	call	0x1212	; 0x1212 <CLCD_voidSendData>
				if(Local_u8CalcArr[Local_u8Counter] =='=')
    21de:	89 81       	ldd	r24, Y+1	; 0x01
    21e0:	28 2f       	mov	r18, r24
    21e2:	30 e0       	ldi	r19, 0x00	; 0
    21e4:	ce 01       	movw	r24, r28
    21e6:	02 96       	adiw	r24, 0x02	; 2
    21e8:	fc 01       	movw	r30, r24
    21ea:	e2 0f       	add	r30, r18
    21ec:	f3 1f       	adc	r31, r19
    21ee:	80 81       	ld	r24, Z
    21f0:	8d 33       	cpi	r24, 0x3D	; 61
    21f2:	09 f0       	breq	.+2      	; 0x21f6 <main+0x108>
    21f4:	a5 c0       	rjmp	.+330    	; 0x2340 <main+0x252>
				{
					switch(Local_u8CalcArr[1])
    21f6:	8b 81       	ldd	r24, Y+3	; 0x03
    21f8:	28 2f       	mov	r18, r24
    21fa:	30 e0       	ldi	r19, 0x00	; 0
    21fc:	38 87       	std	Y+8, r19	; 0x08
    21fe:	2f 83       	std	Y+7, r18	; 0x07
    2200:	8f 81       	ldd	r24, Y+7	; 0x07
    2202:	98 85       	ldd	r25, Y+8	; 0x08
    2204:	8b 32       	cpi	r24, 0x2B	; 43
    2206:	91 05       	cpc	r25, r1
    2208:	b9 f0       	breq	.+46     	; 0x2238 <main+0x14a>
    220a:	2f 81       	ldd	r18, Y+7	; 0x07
    220c:	38 85       	ldd	r19, Y+8	; 0x08
    220e:	2c 32       	cpi	r18, 0x2C	; 44
    2210:	31 05       	cpc	r19, r1
    2212:	34 f4       	brge	.+12     	; 0x2220 <main+0x132>
    2214:	8f 81       	ldd	r24, Y+7	; 0x07
    2216:	98 85       	ldd	r25, Y+8	; 0x08
    2218:	8a 32       	cpi	r24, 0x2A	; 42
    221a:	91 05       	cpc	r25, r1
    221c:	b9 f1       	breq	.+110    	; 0x228c <main+0x19e>
    221e:	62 c0       	rjmp	.+196    	; 0x22e4 <main+0x1f6>
    2220:	2f 81       	ldd	r18, Y+7	; 0x07
    2222:	38 85       	ldd	r19, Y+8	; 0x08
    2224:	2d 32       	cpi	r18, 0x2D	; 45
    2226:	31 05       	cpc	r19, r1
    2228:	d9 f0       	breq	.+54     	; 0x2260 <main+0x172>
    222a:	8f 81       	ldd	r24, Y+7	; 0x07
    222c:	98 85       	ldd	r25, Y+8	; 0x08
    222e:	8f 32       	cpi	r24, 0x2F	; 47
    2230:	91 05       	cpc	r25, r1
    2232:	09 f4       	brne	.+2      	; 0x2236 <main+0x148>
    2234:	41 c0       	rjmp	.+130    	; 0x22b8 <main+0x1ca>
    2236:	56 c0       	rjmp	.+172    	; 0x22e4 <main+0x1f6>
					{
					case '+':
						Local_u8CalcArr[5] =Local_u8CalcArr[0]+Local_u8CalcArr[2];
    2238:	9a 81       	ldd	r25, Y+2	; 0x02
    223a:	8c 81       	ldd	r24, Y+4	; 0x04
    223c:	89 0f       	add	r24, r25
    223e:	8f 83       	std	Y+7, r24	; 0x07
						CLCD_VoidWriteNumber(Local_u8CalcArr[5]);
    2240:	8f 81       	ldd	r24, Y+7	; 0x07
    2242:	88 2f       	mov	r24, r24
    2244:	90 e0       	ldi	r25, 0x00	; 0
    2246:	a0 e0       	ldi	r26, 0x00	; 0
    2248:	b0 e0       	ldi	r27, 0x00	; 0
    224a:	bc 01       	movw	r22, r24
    224c:	cd 01       	movw	r24, r26
    224e:	0e 94 83 04 	call	0x906	; 0x906 <__floatunsisf>
    2252:	dc 01       	movw	r26, r24
    2254:	cb 01       	movw	r24, r22
    2256:	bc 01       	movw	r22, r24
    2258:	cd 01       	movw	r24, r26
    225a:	0e 94 44 0c 	call	0x1888	; 0x1888 <CLCD_VoidWriteNumber>
    225e:	70 c0       	rjmp	.+224    	; 0x2340 <main+0x252>
						break;
					case '-':
						Local_u8CalcArr[5] =Local_u8CalcArr[0]-Local_u8CalcArr[2];
    2260:	9a 81       	ldd	r25, Y+2	; 0x02
    2262:	8c 81       	ldd	r24, Y+4	; 0x04
    2264:	29 2f       	mov	r18, r25
    2266:	28 1b       	sub	r18, r24
    2268:	82 2f       	mov	r24, r18
    226a:	8f 83       	std	Y+7, r24	; 0x07
						CLCD_VoidWriteNumber(Local_u8CalcArr[5]);
    226c:	8f 81       	ldd	r24, Y+7	; 0x07
    226e:	88 2f       	mov	r24, r24
    2270:	90 e0       	ldi	r25, 0x00	; 0
    2272:	a0 e0       	ldi	r26, 0x00	; 0
    2274:	b0 e0       	ldi	r27, 0x00	; 0
    2276:	bc 01       	movw	r22, r24
    2278:	cd 01       	movw	r24, r26
    227a:	0e 94 83 04 	call	0x906	; 0x906 <__floatunsisf>
    227e:	dc 01       	movw	r26, r24
    2280:	cb 01       	movw	r24, r22
    2282:	bc 01       	movw	r22, r24
    2284:	cd 01       	movw	r24, r26
    2286:	0e 94 44 0c 	call	0x1888	; 0x1888 <CLCD_VoidWriteNumber>
    228a:	5a c0       	rjmp	.+180    	; 0x2340 <main+0x252>
						break;
					case '*':
						Local_u8CalcArr[5] =Local_u8CalcArr[0]*Local_u8CalcArr[2];
    228c:	9a 81       	ldd	r25, Y+2	; 0x02
    228e:	8c 81       	ldd	r24, Y+4	; 0x04
    2290:	98 9f       	mul	r25, r24
    2292:	80 2d       	mov	r24, r0
    2294:	11 24       	eor	r1, r1
    2296:	8f 83       	std	Y+7, r24	; 0x07
						CLCD_VoidWriteNumber(Local_u8CalcArr[5]);
    2298:	8f 81       	ldd	r24, Y+7	; 0x07
    229a:	88 2f       	mov	r24, r24
    229c:	90 e0       	ldi	r25, 0x00	; 0
    229e:	a0 e0       	ldi	r26, 0x00	; 0
    22a0:	b0 e0       	ldi	r27, 0x00	; 0
    22a2:	bc 01       	movw	r22, r24
    22a4:	cd 01       	movw	r24, r26
    22a6:	0e 94 83 04 	call	0x906	; 0x906 <__floatunsisf>
    22aa:	dc 01       	movw	r26, r24
    22ac:	cb 01       	movw	r24, r22
    22ae:	bc 01       	movw	r22, r24
    22b0:	cd 01       	movw	r24, r26
    22b2:	0e 94 44 0c 	call	0x1888	; 0x1888 <CLCD_VoidWriteNumber>
    22b6:	44 c0       	rjmp	.+136    	; 0x2340 <main+0x252>
						break;
					case '/':
						Local_u8CalcArr[5] =Local_u8CalcArr[0]/Local_u8CalcArr[2];
    22b8:	8a 81       	ldd	r24, Y+2	; 0x02
    22ba:	9c 81       	ldd	r25, Y+4	; 0x04
    22bc:	69 2f       	mov	r22, r25
    22be:	0e 94 a8 11 	call	0x2350	; 0x2350 <__udivmodqi4>
    22c2:	8f 83       	std	Y+7, r24	; 0x07
						CLCD_VoidWriteNumber(Local_u8CalcArr[5]);
    22c4:	8f 81       	ldd	r24, Y+7	; 0x07
    22c6:	88 2f       	mov	r24, r24
    22c8:	90 e0       	ldi	r25, 0x00	; 0
    22ca:	a0 e0       	ldi	r26, 0x00	; 0
    22cc:	b0 e0       	ldi	r27, 0x00	; 0
    22ce:	bc 01       	movw	r22, r24
    22d0:	cd 01       	movw	r24, r26
    22d2:	0e 94 83 04 	call	0x906	; 0x906 <__floatunsisf>
    22d6:	dc 01       	movw	r26, r24
    22d8:	cb 01       	movw	r24, r22
    22da:	bc 01       	movw	r22, r24
    22dc:	cd 01       	movw	r24, r26
    22de:	0e 94 44 0c 	call	0x1888	; 0x1888 <CLCD_VoidWriteNumber>
    22e2:	2e c0       	rjmp	.+92     	; 0x2340 <main+0x252>
						break;
					default:
						CLCD_voidGoToXY(1,0);
    22e4:	81 e0       	ldi	r24, 0x01	; 1
    22e6:	60 e0       	ldi	r22, 0x00	; 0
    22e8:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <CLCD_voidGoToXY>
						CLCD_voidSendString("ERORR");
    22ec:	8e e6       	ldi	r24, 0x6E	; 110
    22ee:	90 e0       	ldi	r25, 0x00	; 0
    22f0:	0e 94 bb 0b 	call	0x1776	; 0x1776 <CLCD_voidSendString>
    22f4:	25 c0       	rjmp	.+74     	; 0x2340 <main+0x252>
						break;
					}
				}
			}
			else if(Local_u8CalcArr[Local_u8Counter] == 'c')
    22f6:	89 81       	ldd	r24, Y+1	; 0x01
    22f8:	28 2f       	mov	r18, r24
    22fa:	30 e0       	ldi	r19, 0x00	; 0
    22fc:	ce 01       	movw	r24, r28
    22fe:	02 96       	adiw	r24, 0x02	; 2
    2300:	fc 01       	movw	r30, r24
    2302:	e2 0f       	add	r30, r18
    2304:	f3 1f       	adc	r31, r19
    2306:	80 81       	ld	r24, Z
    2308:	83 36       	cpi	r24, 0x63	; 99
    230a:	19 f4       	brne	.+6      	; 0x2312 <main+0x224>
			{
				CLCD_voidClear();
    230c:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <CLCD_voidClear>
    2310:	fe ce       	rjmp	.-516    	; 0x210e <main+0x20>
				break;
			}
			else
			{
				CLCD_VoidWriteNumber(Local_u8CalcArr[Local_u8Counter]);
    2312:	89 81       	ldd	r24, Y+1	; 0x01
    2314:	28 2f       	mov	r18, r24
    2316:	30 e0       	ldi	r19, 0x00	; 0
    2318:	ce 01       	movw	r24, r28
    231a:	02 96       	adiw	r24, 0x02	; 2
    231c:	fc 01       	movw	r30, r24
    231e:	e2 0f       	add	r30, r18
    2320:	f3 1f       	adc	r31, r19
    2322:	80 81       	ld	r24, Z
    2324:	88 2f       	mov	r24, r24
    2326:	90 e0       	ldi	r25, 0x00	; 0
    2328:	a0 e0       	ldi	r26, 0x00	; 0
    232a:	b0 e0       	ldi	r27, 0x00	; 0
    232c:	bc 01       	movw	r22, r24
    232e:	cd 01       	movw	r24, r26
    2330:	0e 94 83 04 	call	0x906	; 0x906 <__floatunsisf>
    2334:	dc 01       	movw	r26, r24
    2336:	cb 01       	movw	r24, r22
    2338:	bc 01       	movw	r22, r24
    233a:	cd 01       	movw	r24, r26
    233c:	0e 94 44 0c 	call	0x1888	; 0x1888 <CLCD_VoidWriteNumber>
	{
		CLCD_voidGoToXY(0,0);
		CLCD_voidSendString("  Simple CalC");
		CLCD_voidGoToXY(1,4);

		for(Local_u8Counter=0;Local_u8Counter<5;Local_u8Counter++)
    2340:	89 81       	ldd	r24, Y+1	; 0x01
    2342:	8f 5f       	subi	r24, 0xFF	; 255
    2344:	89 83       	std	Y+1, r24	; 0x01
    2346:	89 81       	ldd	r24, Y+1	; 0x01
    2348:	85 30       	cpi	r24, 0x05	; 5
    234a:	08 f4       	brcc	.+2      	; 0x234e <main+0x260>
    234c:	ee ce       	rjmp	.-548    	; 0x212a <main+0x3c>
    234e:	df ce       	rjmp	.-578    	; 0x210e <main+0x20>

00002350 <__udivmodqi4>:
    2350:	99 1b       	sub	r25, r25
    2352:	79 e0       	ldi	r23, 0x09	; 9
    2354:	04 c0       	rjmp	.+8      	; 0x235e <__udivmodqi4_ep>

00002356 <__udivmodqi4_loop>:
    2356:	99 1f       	adc	r25, r25
    2358:	96 17       	cp	r25, r22
    235a:	08 f0       	brcs	.+2      	; 0x235e <__udivmodqi4_ep>
    235c:	96 1b       	sub	r25, r22

0000235e <__udivmodqi4_ep>:
    235e:	88 1f       	adc	r24, r24
    2360:	7a 95       	dec	r23
    2362:	c9 f7       	brne	.-14     	; 0x2356 <__udivmodqi4_loop>
    2364:	80 95       	com	r24
    2366:	08 95       	ret

00002368 <__divmodsi4>:
    2368:	97 fb       	bst	r25, 7
    236a:	09 2e       	mov	r0, r25
    236c:	05 26       	eor	r0, r21
    236e:	0e d0       	rcall	.+28     	; 0x238c <__divmodsi4_neg1>
    2370:	57 fd       	sbrc	r21, 7
    2372:	04 d0       	rcall	.+8      	; 0x237c <__divmodsi4_neg2>
    2374:	14 d0       	rcall	.+40     	; 0x239e <__udivmodsi4>
    2376:	0a d0       	rcall	.+20     	; 0x238c <__divmodsi4_neg1>
    2378:	00 1c       	adc	r0, r0
    237a:	38 f4       	brcc	.+14     	; 0x238a <__divmodsi4_exit>

0000237c <__divmodsi4_neg2>:
    237c:	50 95       	com	r21
    237e:	40 95       	com	r20
    2380:	30 95       	com	r19
    2382:	21 95       	neg	r18
    2384:	3f 4f       	sbci	r19, 0xFF	; 255
    2386:	4f 4f       	sbci	r20, 0xFF	; 255
    2388:	5f 4f       	sbci	r21, 0xFF	; 255

0000238a <__divmodsi4_exit>:
    238a:	08 95       	ret

0000238c <__divmodsi4_neg1>:
    238c:	f6 f7       	brtc	.-4      	; 0x238a <__divmodsi4_exit>
    238e:	90 95       	com	r25
    2390:	80 95       	com	r24
    2392:	70 95       	com	r23
    2394:	61 95       	neg	r22
    2396:	7f 4f       	sbci	r23, 0xFF	; 255
    2398:	8f 4f       	sbci	r24, 0xFF	; 255
    239a:	9f 4f       	sbci	r25, 0xFF	; 255
    239c:	08 95       	ret

0000239e <__udivmodsi4>:
    239e:	a1 e2       	ldi	r26, 0x21	; 33
    23a0:	1a 2e       	mov	r1, r26
    23a2:	aa 1b       	sub	r26, r26
    23a4:	bb 1b       	sub	r27, r27
    23a6:	fd 01       	movw	r30, r26
    23a8:	0d c0       	rjmp	.+26     	; 0x23c4 <__udivmodsi4_ep>

000023aa <__udivmodsi4_loop>:
    23aa:	aa 1f       	adc	r26, r26
    23ac:	bb 1f       	adc	r27, r27
    23ae:	ee 1f       	adc	r30, r30
    23b0:	ff 1f       	adc	r31, r31
    23b2:	a2 17       	cp	r26, r18
    23b4:	b3 07       	cpc	r27, r19
    23b6:	e4 07       	cpc	r30, r20
    23b8:	f5 07       	cpc	r31, r21
    23ba:	20 f0       	brcs	.+8      	; 0x23c4 <__udivmodsi4_ep>
    23bc:	a2 1b       	sub	r26, r18
    23be:	b3 0b       	sbc	r27, r19
    23c0:	e4 0b       	sbc	r30, r20
    23c2:	f5 0b       	sbc	r31, r21

000023c4 <__udivmodsi4_ep>:
    23c4:	66 1f       	adc	r22, r22
    23c6:	77 1f       	adc	r23, r23
    23c8:	88 1f       	adc	r24, r24
    23ca:	99 1f       	adc	r25, r25
    23cc:	1a 94       	dec	r1
    23ce:	69 f7       	brne	.-38     	; 0x23aa <__udivmodsi4_loop>
    23d0:	60 95       	com	r22
    23d2:	70 95       	com	r23
    23d4:	80 95       	com	r24
    23d6:	90 95       	com	r25
    23d8:	9b 01       	movw	r18, r22
    23da:	ac 01       	movw	r20, r24
    23dc:	bd 01       	movw	r22, r26
    23de:	cf 01       	movw	r24, r30
    23e0:	08 95       	ret

000023e2 <__prologue_saves__>:
    23e2:	2f 92       	push	r2
    23e4:	3f 92       	push	r3
    23e6:	4f 92       	push	r4
    23e8:	5f 92       	push	r5
    23ea:	6f 92       	push	r6
    23ec:	7f 92       	push	r7
    23ee:	8f 92       	push	r8
    23f0:	9f 92       	push	r9
    23f2:	af 92       	push	r10
    23f4:	bf 92       	push	r11
    23f6:	cf 92       	push	r12
    23f8:	df 92       	push	r13
    23fa:	ef 92       	push	r14
    23fc:	ff 92       	push	r15
    23fe:	0f 93       	push	r16
    2400:	1f 93       	push	r17
    2402:	cf 93       	push	r28
    2404:	df 93       	push	r29
    2406:	cd b7       	in	r28, 0x3d	; 61
    2408:	de b7       	in	r29, 0x3e	; 62
    240a:	ca 1b       	sub	r28, r26
    240c:	db 0b       	sbc	r29, r27
    240e:	0f b6       	in	r0, 0x3f	; 63
    2410:	f8 94       	cli
    2412:	de bf       	out	0x3e, r29	; 62
    2414:	0f be       	out	0x3f, r0	; 63
    2416:	cd bf       	out	0x3d, r28	; 61
    2418:	09 94       	ijmp

0000241a <__epilogue_restores__>:
    241a:	2a 88       	ldd	r2, Y+18	; 0x12
    241c:	39 88       	ldd	r3, Y+17	; 0x11
    241e:	48 88       	ldd	r4, Y+16	; 0x10
    2420:	5f 84       	ldd	r5, Y+15	; 0x0f
    2422:	6e 84       	ldd	r6, Y+14	; 0x0e
    2424:	7d 84       	ldd	r7, Y+13	; 0x0d
    2426:	8c 84       	ldd	r8, Y+12	; 0x0c
    2428:	9b 84       	ldd	r9, Y+11	; 0x0b
    242a:	aa 84       	ldd	r10, Y+10	; 0x0a
    242c:	b9 84       	ldd	r11, Y+9	; 0x09
    242e:	c8 84       	ldd	r12, Y+8	; 0x08
    2430:	df 80       	ldd	r13, Y+7	; 0x07
    2432:	ee 80       	ldd	r14, Y+6	; 0x06
    2434:	fd 80       	ldd	r15, Y+5	; 0x05
    2436:	0c 81       	ldd	r16, Y+4	; 0x04
    2438:	1b 81       	ldd	r17, Y+3	; 0x03
    243a:	aa 81       	ldd	r26, Y+2	; 0x02
    243c:	b9 81       	ldd	r27, Y+1	; 0x01
    243e:	ce 0f       	add	r28, r30
    2440:	d1 1d       	adc	r29, r1
    2442:	0f b6       	in	r0, 0x3f	; 63
    2444:	f8 94       	cli
    2446:	de bf       	out	0x3e, r29	; 62
    2448:	0f be       	out	0x3f, r0	; 63
    244a:	cd bf       	out	0x3d, r28	; 61
    244c:	ed 01       	movw	r28, r26
    244e:	08 95       	ret

00002450 <_exit>:
    2450:	f8 94       	cli

00002452 <__stop_program>:
    2452:	ff cf       	rjmp	.-2      	; 0x2452 <__stop_program>
