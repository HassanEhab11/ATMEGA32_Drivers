
DIO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f80  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000062  00800060  00002f80  00002ff4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002940  00000000  00000000  00003058  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000edc  00000000  00000000  00005998  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00006874  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  000069b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00006b24  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  0000876d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00009658  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  0000a408  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  0000a568  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  0000a7f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000afc3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e8       	ldi	r30, 0x80	; 128
      68:	ff e2       	ldi	r31, 0x2F	; 47
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 3c       	cpi	r26, 0xC2	; 194
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <main>
      7a:	0c 94 be 17 	jmp	0x2f7c	; 0x2f7c <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 87 17 	jmp	0x2f0e	; 0x2f0e <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 a3 17 	jmp	0x2f46	; 0x2f46 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 93 17 	jmp	0x2f26	; 0x2f26 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 af 17 	jmp	0x2f5e	; 0x2f5e <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 93 17 	jmp	0x2f26	; 0x2f26 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 af 17 	jmp	0x2f5e	; 0x2f5e <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 87 17 	jmp	0x2f0e	; 0x2f0e <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 a3 17 	jmp	0x2f46	; 0x2f46 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 93 17 	jmp	0x2f26	; 0x2f26 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 af 17 	jmp	0x2f5e	; 0x2f5e <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 93 17 	jmp	0x2f26	; 0x2f26 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 af 17 	jmp	0x2f5e	; 0x2f5e <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 93 17 	jmp	0x2f26	; 0x2f26 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 af 17 	jmp	0x2f5e	; 0x2f5e <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 97 17 	jmp	0x2f2e	; 0x2f2e <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 b3 17 	jmp	0x2f66	; 0x2f66 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <C_LCD_voidSendCommand>:
#include "CLCD_config.h"
#include "CLCD_private.h"


void C_LCD_voidSendCommand(u8 Copy_u8Command)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	ea 97       	sbiw	r28, 0x3a	; 58
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61
     b4a:	8a af       	std	Y+58, r24	; 0x3a
	u8 Copy_u8CommandTemp;
	/*Set RS Pin to low to send command */
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_LOW);
     b4c:	80 e0       	ldi	r24, 0x00	; 0
     b4e:	61 e0       	ldi	r22, 0x01	; 1
     b50:	40 e0       	ldi	r20, 0x00	; 0
     b52:	0e 94 50 10 	call	0x20a0	; 0x20a0 <DIO_u8SetPinValue>

	/*Set RW Pin to low to write command */
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
     b56:	80 e0       	ldi	r24, 0x00	; 0
     b58:	60 e0       	ldi	r22, 0x00	; 0
     b5a:	40 e0       	ldi	r20, 0x00	; 0
     b5c:	0e 94 50 10 	call	0x20a0	; 0x20a0 <DIO_u8SetPinValue>

	/* Set Command to data pins */
	Copy_u8CommandTemp =( ((Copy_u8Command>>1)&0b01111000)|(CLCD_DATA_PORT&0b10000111));
     b60:	8a ad       	ldd	r24, Y+58	; 0x3a
     b62:	86 95       	lsr	r24
     b64:	88 77       	andi	r24, 0x78	; 120
     b66:	89 af       	std	Y+57, r24	; 0x39

	DIO_u8SetPortValue(CLCD_DATA_PORT,Copy_u8CommandTemp);
     b68:	80 e0       	ldi	r24, 0x00	; 0
     b6a:	69 ad       	ldd	r22, Y+57	; 0x39
     b6c:	0e 94 62 11 	call	0x22c4	; 0x22c4 <DIO_u8SetPortValue>

	/*Send Enable pulse */
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	62 e0       	ldi	r22, 0x02	; 2
     b74:	41 e0       	ldi	r20, 0x01	; 1
     b76:	0e 94 50 10 	call	0x20a0	; 0x20a0 <DIO_u8SetPinValue>
     b7a:	80 e0       	ldi	r24, 0x00	; 0
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	a0 e8       	ldi	r26, 0x80	; 128
     b80:	bf e3       	ldi	r27, 0x3F	; 63
     b82:	8d ab       	std	Y+53, r24	; 0x35
     b84:	9e ab       	std	Y+54, r25	; 0x36
     b86:	af ab       	std	Y+55, r26	; 0x37
     b88:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b8a:	6d a9       	ldd	r22, Y+53	; 0x35
     b8c:	7e a9       	ldd	r23, Y+54	; 0x36
     b8e:	8f a9       	ldd	r24, Y+55	; 0x37
     b90:	98 ad       	ldd	r25, Y+56	; 0x38
     b92:	20 e0       	ldi	r18, 0x00	; 0
     b94:	30 e0       	ldi	r19, 0x00	; 0
     b96:	4a ef       	ldi	r20, 0xFA	; 250
     b98:	54 e4       	ldi	r21, 0x44	; 68
     b9a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     b9e:	dc 01       	movw	r26, r24
     ba0:	cb 01       	movw	r24, r22
     ba2:	89 ab       	std	Y+49, r24	; 0x31
     ba4:	9a ab       	std	Y+50, r25	; 0x32
     ba6:	ab ab       	std	Y+51, r26	; 0x33
     ba8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     baa:	69 a9       	ldd	r22, Y+49	; 0x31
     bac:	7a a9       	ldd	r23, Y+50	; 0x32
     bae:	8b a9       	ldd	r24, Y+51	; 0x33
     bb0:	9c a9       	ldd	r25, Y+52	; 0x34
     bb2:	20 e0       	ldi	r18, 0x00	; 0
     bb4:	30 e0       	ldi	r19, 0x00	; 0
     bb6:	40 e8       	ldi	r20, 0x80	; 128
     bb8:	5f e3       	ldi	r21, 0x3F	; 63
     bba:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     bbe:	88 23       	and	r24, r24
     bc0:	2c f4       	brge	.+10     	; 0xbcc <C_LCD_voidSendCommand+0x96>
		__ticks = 1;
     bc2:	81 e0       	ldi	r24, 0x01	; 1
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	98 ab       	std	Y+48, r25	; 0x30
     bc8:	8f a7       	std	Y+47, r24	; 0x2f
     bca:	3f c0       	rjmp	.+126    	; 0xc4a <C_LCD_voidSendCommand+0x114>
	else if (__tmp > 65535)
     bcc:	69 a9       	ldd	r22, Y+49	; 0x31
     bce:	7a a9       	ldd	r23, Y+50	; 0x32
     bd0:	8b a9       	ldd	r24, Y+51	; 0x33
     bd2:	9c a9       	ldd	r25, Y+52	; 0x34
     bd4:	20 e0       	ldi	r18, 0x00	; 0
     bd6:	3f ef       	ldi	r19, 0xFF	; 255
     bd8:	4f e7       	ldi	r20, 0x7F	; 127
     bda:	57 e4       	ldi	r21, 0x47	; 71
     bdc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     be0:	18 16       	cp	r1, r24
     be2:	4c f5       	brge	.+82     	; 0xc36 <C_LCD_voidSendCommand+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     be4:	6d a9       	ldd	r22, Y+53	; 0x35
     be6:	7e a9       	ldd	r23, Y+54	; 0x36
     be8:	8f a9       	ldd	r24, Y+55	; 0x37
     bea:	98 ad       	ldd	r25, Y+56	; 0x38
     bec:	20 e0       	ldi	r18, 0x00	; 0
     bee:	30 e0       	ldi	r19, 0x00	; 0
     bf0:	40 e2       	ldi	r20, 0x20	; 32
     bf2:	51 e4       	ldi	r21, 0x41	; 65
     bf4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     bf8:	dc 01       	movw	r26, r24
     bfa:	cb 01       	movw	r24, r22
     bfc:	bc 01       	movw	r22, r24
     bfe:	cd 01       	movw	r24, r26
     c00:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     c04:	dc 01       	movw	r26, r24
     c06:	cb 01       	movw	r24, r22
     c08:	98 ab       	std	Y+48, r25	; 0x30
     c0a:	8f a7       	std	Y+47, r24	; 0x2f
     c0c:	0f c0       	rjmp	.+30     	; 0xc2c <C_LCD_voidSendCommand+0xf6>
     c0e:	88 ec       	ldi	r24, 0xC8	; 200
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	9e a7       	std	Y+46, r25	; 0x2e
     c14:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c16:	8d a5       	ldd	r24, Y+45	; 0x2d
     c18:	9e a5       	ldd	r25, Y+46	; 0x2e
     c1a:	01 97       	sbiw	r24, 0x01	; 1
     c1c:	f1 f7       	brne	.-4      	; 0xc1a <C_LCD_voidSendCommand+0xe4>
     c1e:	9e a7       	std	Y+46, r25	; 0x2e
     c20:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c22:	8f a5       	ldd	r24, Y+47	; 0x2f
     c24:	98 a9       	ldd	r25, Y+48	; 0x30
     c26:	01 97       	sbiw	r24, 0x01	; 1
     c28:	98 ab       	std	Y+48, r25	; 0x30
     c2a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c2c:	8f a5       	ldd	r24, Y+47	; 0x2f
     c2e:	98 a9       	ldd	r25, Y+48	; 0x30
     c30:	00 97       	sbiw	r24, 0x00	; 0
     c32:	69 f7       	brne	.-38     	; 0xc0e <C_LCD_voidSendCommand+0xd8>
     c34:	14 c0       	rjmp	.+40     	; 0xc5e <C_LCD_voidSendCommand+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c36:	69 a9       	ldd	r22, Y+49	; 0x31
     c38:	7a a9       	ldd	r23, Y+50	; 0x32
     c3a:	8b a9       	ldd	r24, Y+51	; 0x33
     c3c:	9c a9       	ldd	r25, Y+52	; 0x34
     c3e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     c42:	dc 01       	movw	r26, r24
     c44:	cb 01       	movw	r24, r22
     c46:	98 ab       	std	Y+48, r25	; 0x30
     c48:	8f a7       	std	Y+47, r24	; 0x2f
     c4a:	8f a5       	ldd	r24, Y+47	; 0x2f
     c4c:	98 a9       	ldd	r25, Y+48	; 0x30
     c4e:	9c a7       	std	Y+44, r25	; 0x2c
     c50:	8b a7       	std	Y+43, r24	; 0x2b
     c52:	8b a5       	ldd	r24, Y+43	; 0x2b
     c54:	9c a5       	ldd	r25, Y+44	; 0x2c
     c56:	01 97       	sbiw	r24, 0x01	; 1
     c58:	f1 f7       	brne	.-4      	; 0xc56 <C_LCD_voidSendCommand+0x120>
     c5a:	9c a7       	std	Y+44, r25	; 0x2c
     c5c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
     c5e:	80 e0       	ldi	r24, 0x00	; 0
     c60:	62 e0       	ldi	r22, 0x02	; 2
     c62:	40 e0       	ldi	r20, 0x00	; 0
     c64:	0e 94 50 10 	call	0x20a0	; 0x20a0 <DIO_u8SetPinValue>
     c68:	80 e0       	ldi	r24, 0x00	; 0
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	a0 ea       	ldi	r26, 0xA0	; 160
     c6e:	b0 e4       	ldi	r27, 0x40	; 64
     c70:	8f a3       	std	Y+39, r24	; 0x27
     c72:	98 a7       	std	Y+40, r25	; 0x28
     c74:	a9 a7       	std	Y+41, r26	; 0x29
     c76:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c78:	6f a1       	ldd	r22, Y+39	; 0x27
     c7a:	78 a5       	ldd	r23, Y+40	; 0x28
     c7c:	89 a5       	ldd	r24, Y+41	; 0x29
     c7e:	9a a5       	ldd	r25, Y+42	; 0x2a
     c80:	20 e0       	ldi	r18, 0x00	; 0
     c82:	30 e0       	ldi	r19, 0x00	; 0
     c84:	4a ef       	ldi	r20, 0xFA	; 250
     c86:	54 e4       	ldi	r21, 0x44	; 68
     c88:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     c8c:	dc 01       	movw	r26, r24
     c8e:	cb 01       	movw	r24, r22
     c90:	8b a3       	std	Y+35, r24	; 0x23
     c92:	9c a3       	std	Y+36, r25	; 0x24
     c94:	ad a3       	std	Y+37, r26	; 0x25
     c96:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     c98:	6b a1       	ldd	r22, Y+35	; 0x23
     c9a:	7c a1       	ldd	r23, Y+36	; 0x24
     c9c:	8d a1       	ldd	r24, Y+37	; 0x25
     c9e:	9e a1       	ldd	r25, Y+38	; 0x26
     ca0:	20 e0       	ldi	r18, 0x00	; 0
     ca2:	30 e0       	ldi	r19, 0x00	; 0
     ca4:	40 e8       	ldi	r20, 0x80	; 128
     ca6:	5f e3       	ldi	r21, 0x3F	; 63
     ca8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     cac:	88 23       	and	r24, r24
     cae:	2c f4       	brge	.+10     	; 0xcba <C_LCD_voidSendCommand+0x184>
		__ticks = 1;
     cb0:	81 e0       	ldi	r24, 0x01	; 1
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	9a a3       	std	Y+34, r25	; 0x22
     cb6:	89 a3       	std	Y+33, r24	; 0x21
     cb8:	3f c0       	rjmp	.+126    	; 0xd38 <C_LCD_voidSendCommand+0x202>
	else if (__tmp > 65535)
     cba:	6b a1       	ldd	r22, Y+35	; 0x23
     cbc:	7c a1       	ldd	r23, Y+36	; 0x24
     cbe:	8d a1       	ldd	r24, Y+37	; 0x25
     cc0:	9e a1       	ldd	r25, Y+38	; 0x26
     cc2:	20 e0       	ldi	r18, 0x00	; 0
     cc4:	3f ef       	ldi	r19, 0xFF	; 255
     cc6:	4f e7       	ldi	r20, 0x7F	; 127
     cc8:	57 e4       	ldi	r21, 0x47	; 71
     cca:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     cce:	18 16       	cp	r1, r24
     cd0:	4c f5       	brge	.+82     	; 0xd24 <C_LCD_voidSendCommand+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cd2:	6f a1       	ldd	r22, Y+39	; 0x27
     cd4:	78 a5       	ldd	r23, Y+40	; 0x28
     cd6:	89 a5       	ldd	r24, Y+41	; 0x29
     cd8:	9a a5       	ldd	r25, Y+42	; 0x2a
     cda:	20 e0       	ldi	r18, 0x00	; 0
     cdc:	30 e0       	ldi	r19, 0x00	; 0
     cde:	40 e2       	ldi	r20, 0x20	; 32
     ce0:	51 e4       	ldi	r21, 0x41	; 65
     ce2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     ce6:	dc 01       	movw	r26, r24
     ce8:	cb 01       	movw	r24, r22
     cea:	bc 01       	movw	r22, r24
     cec:	cd 01       	movw	r24, r26
     cee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     cf2:	dc 01       	movw	r26, r24
     cf4:	cb 01       	movw	r24, r22
     cf6:	9a a3       	std	Y+34, r25	; 0x22
     cf8:	89 a3       	std	Y+33, r24	; 0x21
     cfa:	0f c0       	rjmp	.+30     	; 0xd1a <C_LCD_voidSendCommand+0x1e4>
     cfc:	88 ec       	ldi	r24, 0xC8	; 200
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	98 a3       	std	Y+32, r25	; 0x20
     d02:	8f 8f       	std	Y+31, r24	; 0x1f
     d04:	8f 8d       	ldd	r24, Y+31	; 0x1f
     d06:	98 a1       	ldd	r25, Y+32	; 0x20
     d08:	01 97       	sbiw	r24, 0x01	; 1
     d0a:	f1 f7       	brne	.-4      	; 0xd08 <C_LCD_voidSendCommand+0x1d2>
     d0c:	98 a3       	std	Y+32, r25	; 0x20
     d0e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d10:	89 a1       	ldd	r24, Y+33	; 0x21
     d12:	9a a1       	ldd	r25, Y+34	; 0x22
     d14:	01 97       	sbiw	r24, 0x01	; 1
     d16:	9a a3       	std	Y+34, r25	; 0x22
     d18:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d1a:	89 a1       	ldd	r24, Y+33	; 0x21
     d1c:	9a a1       	ldd	r25, Y+34	; 0x22
     d1e:	00 97       	sbiw	r24, 0x00	; 0
     d20:	69 f7       	brne	.-38     	; 0xcfc <C_LCD_voidSendCommand+0x1c6>
     d22:	14 c0       	rjmp	.+40     	; 0xd4c <C_LCD_voidSendCommand+0x216>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d24:	6b a1       	ldd	r22, Y+35	; 0x23
     d26:	7c a1       	ldd	r23, Y+36	; 0x24
     d28:	8d a1       	ldd	r24, Y+37	; 0x25
     d2a:	9e a1       	ldd	r25, Y+38	; 0x26
     d2c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     d30:	dc 01       	movw	r26, r24
     d32:	cb 01       	movw	r24, r22
     d34:	9a a3       	std	Y+34, r25	; 0x22
     d36:	89 a3       	std	Y+33, r24	; 0x21
     d38:	89 a1       	ldd	r24, Y+33	; 0x21
     d3a:	9a a1       	ldd	r25, Y+34	; 0x22
     d3c:	9e 8f       	std	Y+30, r25	; 0x1e
     d3e:	8d 8f       	std	Y+29, r24	; 0x1d
     d40:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d42:	9e 8d       	ldd	r25, Y+30	; 0x1e
     d44:	01 97       	sbiw	r24, 0x01	; 1
     d46:	f1 f7       	brne	.-4      	; 0xd44 <C_LCD_voidSendCommand+0x20e>
     d48:	9e 8f       	std	Y+30, r25	; 0x1e
     d4a:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(5);
	Copy_u8CommandTemp = (((Copy_u8Command)<<3)|(CLCD_DATA_PORT&0b10000111));
     d4c:	8a ad       	ldd	r24, Y+58	; 0x3a
     d4e:	88 0f       	add	r24, r24
     d50:	88 0f       	add	r24, r24
     d52:	88 0f       	add	r24, r24
     d54:	89 af       	std	Y+57, r24	; 0x39

	DIO_u8SetPortValue(CLCD_DATA_PORT,Copy_u8CommandTemp);
     d56:	80 e0       	ldi	r24, 0x00	; 0
     d58:	69 ad       	ldd	r22, Y+57	; 0x39
     d5a:	0e 94 62 11 	call	0x22c4	; 0x22c4 <DIO_u8SetPortValue>
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
     d5e:	80 e0       	ldi	r24, 0x00	; 0
     d60:	62 e0       	ldi	r22, 0x02	; 2
     d62:	41 e0       	ldi	r20, 0x01	; 1
     d64:	0e 94 50 10 	call	0x20a0	; 0x20a0 <DIO_u8SetPinValue>
     d68:	80 e0       	ldi	r24, 0x00	; 0
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	a0 e8       	ldi	r26, 0x80	; 128
     d6e:	bf e3       	ldi	r27, 0x3F	; 63
     d70:	89 8f       	std	Y+25, r24	; 0x19
     d72:	9a 8f       	std	Y+26, r25	; 0x1a
     d74:	ab 8f       	std	Y+27, r26	; 0x1b
     d76:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d78:	69 8d       	ldd	r22, Y+25	; 0x19
     d7a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d7c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d7e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d80:	20 e0       	ldi	r18, 0x00	; 0
     d82:	30 e0       	ldi	r19, 0x00	; 0
     d84:	4a ef       	ldi	r20, 0xFA	; 250
     d86:	54 e4       	ldi	r21, 0x44	; 68
     d88:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d8c:	dc 01       	movw	r26, r24
     d8e:	cb 01       	movw	r24, r22
     d90:	8d 8b       	std	Y+21, r24	; 0x15
     d92:	9e 8b       	std	Y+22, r25	; 0x16
     d94:	af 8b       	std	Y+23, r26	; 0x17
     d96:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     d98:	6d 89       	ldd	r22, Y+21	; 0x15
     d9a:	7e 89       	ldd	r23, Y+22	; 0x16
     d9c:	8f 89       	ldd	r24, Y+23	; 0x17
     d9e:	98 8d       	ldd	r25, Y+24	; 0x18
     da0:	20 e0       	ldi	r18, 0x00	; 0
     da2:	30 e0       	ldi	r19, 0x00	; 0
     da4:	40 e8       	ldi	r20, 0x80	; 128
     da6:	5f e3       	ldi	r21, 0x3F	; 63
     da8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     dac:	88 23       	and	r24, r24
     dae:	2c f4       	brge	.+10     	; 0xdba <C_LCD_voidSendCommand+0x284>
		__ticks = 1;
     db0:	81 e0       	ldi	r24, 0x01	; 1
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	9c 8b       	std	Y+20, r25	; 0x14
     db6:	8b 8b       	std	Y+19, r24	; 0x13
     db8:	3f c0       	rjmp	.+126    	; 0xe38 <C_LCD_voidSendCommand+0x302>
	else if (__tmp > 65535)
     dba:	6d 89       	ldd	r22, Y+21	; 0x15
     dbc:	7e 89       	ldd	r23, Y+22	; 0x16
     dbe:	8f 89       	ldd	r24, Y+23	; 0x17
     dc0:	98 8d       	ldd	r25, Y+24	; 0x18
     dc2:	20 e0       	ldi	r18, 0x00	; 0
     dc4:	3f ef       	ldi	r19, 0xFF	; 255
     dc6:	4f e7       	ldi	r20, 0x7F	; 127
     dc8:	57 e4       	ldi	r21, 0x47	; 71
     dca:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     dce:	18 16       	cp	r1, r24
     dd0:	4c f5       	brge	.+82     	; 0xe24 <C_LCD_voidSendCommand+0x2ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dd2:	69 8d       	ldd	r22, Y+25	; 0x19
     dd4:	7a 8d       	ldd	r23, Y+26	; 0x1a
     dd6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     dd8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     dda:	20 e0       	ldi	r18, 0x00	; 0
     ddc:	30 e0       	ldi	r19, 0x00	; 0
     dde:	40 e2       	ldi	r20, 0x20	; 32
     de0:	51 e4       	ldi	r21, 0x41	; 65
     de2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     de6:	dc 01       	movw	r26, r24
     de8:	cb 01       	movw	r24, r22
     dea:	bc 01       	movw	r22, r24
     dec:	cd 01       	movw	r24, r26
     dee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     df2:	dc 01       	movw	r26, r24
     df4:	cb 01       	movw	r24, r22
     df6:	9c 8b       	std	Y+20, r25	; 0x14
     df8:	8b 8b       	std	Y+19, r24	; 0x13
     dfa:	0f c0       	rjmp	.+30     	; 0xe1a <C_LCD_voidSendCommand+0x2e4>
     dfc:	88 ec       	ldi	r24, 0xC8	; 200
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	9a 8b       	std	Y+18, r25	; 0x12
     e02:	89 8b       	std	Y+17, r24	; 0x11
     e04:	89 89       	ldd	r24, Y+17	; 0x11
     e06:	9a 89       	ldd	r25, Y+18	; 0x12
     e08:	01 97       	sbiw	r24, 0x01	; 1
     e0a:	f1 f7       	brne	.-4      	; 0xe08 <C_LCD_voidSendCommand+0x2d2>
     e0c:	9a 8b       	std	Y+18, r25	; 0x12
     e0e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e10:	8b 89       	ldd	r24, Y+19	; 0x13
     e12:	9c 89       	ldd	r25, Y+20	; 0x14
     e14:	01 97       	sbiw	r24, 0x01	; 1
     e16:	9c 8b       	std	Y+20, r25	; 0x14
     e18:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e1a:	8b 89       	ldd	r24, Y+19	; 0x13
     e1c:	9c 89       	ldd	r25, Y+20	; 0x14
     e1e:	00 97       	sbiw	r24, 0x00	; 0
     e20:	69 f7       	brne	.-38     	; 0xdfc <C_LCD_voidSendCommand+0x2c6>
     e22:	14 c0       	rjmp	.+40     	; 0xe4c <C_LCD_voidSendCommand+0x316>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e24:	6d 89       	ldd	r22, Y+21	; 0x15
     e26:	7e 89       	ldd	r23, Y+22	; 0x16
     e28:	8f 89       	ldd	r24, Y+23	; 0x17
     e2a:	98 8d       	ldd	r25, Y+24	; 0x18
     e2c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e30:	dc 01       	movw	r26, r24
     e32:	cb 01       	movw	r24, r22
     e34:	9c 8b       	std	Y+20, r25	; 0x14
     e36:	8b 8b       	std	Y+19, r24	; 0x13
     e38:	8b 89       	ldd	r24, Y+19	; 0x13
     e3a:	9c 89       	ldd	r25, Y+20	; 0x14
     e3c:	98 8b       	std	Y+16, r25	; 0x10
     e3e:	8f 87       	std	Y+15, r24	; 0x0f
     e40:	8f 85       	ldd	r24, Y+15	; 0x0f
     e42:	98 89       	ldd	r25, Y+16	; 0x10
     e44:	01 97       	sbiw	r24, 0x01	; 1
     e46:	f1 f7       	brne	.-4      	; 0xe44 <C_LCD_voidSendCommand+0x30e>
     e48:	98 8b       	std	Y+16, r25	; 0x10
     e4a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
     e4c:	80 e0       	ldi	r24, 0x00	; 0
     e4e:	62 e0       	ldi	r22, 0x02	; 2
     e50:	40 e0       	ldi	r20, 0x00	; 0
     e52:	0e 94 50 10 	call	0x20a0	; 0x20a0 <DIO_u8SetPinValue>
     e56:	80 e0       	ldi	r24, 0x00	; 0
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	a0 ea       	ldi	r26, 0xA0	; 160
     e5c:	b0 e4       	ldi	r27, 0x40	; 64
     e5e:	8b 87       	std	Y+11, r24	; 0x0b
     e60:	9c 87       	std	Y+12, r25	; 0x0c
     e62:	ad 87       	std	Y+13, r26	; 0x0d
     e64:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e66:	6b 85       	ldd	r22, Y+11	; 0x0b
     e68:	7c 85       	ldd	r23, Y+12	; 0x0c
     e6a:	8d 85       	ldd	r24, Y+13	; 0x0d
     e6c:	9e 85       	ldd	r25, Y+14	; 0x0e
     e6e:	20 e0       	ldi	r18, 0x00	; 0
     e70:	30 e0       	ldi	r19, 0x00	; 0
     e72:	4a ef       	ldi	r20, 0xFA	; 250
     e74:	54 e4       	ldi	r21, 0x44	; 68
     e76:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e7a:	dc 01       	movw	r26, r24
     e7c:	cb 01       	movw	r24, r22
     e7e:	8f 83       	std	Y+7, r24	; 0x07
     e80:	98 87       	std	Y+8, r25	; 0x08
     e82:	a9 87       	std	Y+9, r26	; 0x09
     e84:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e86:	6f 81       	ldd	r22, Y+7	; 0x07
     e88:	78 85       	ldd	r23, Y+8	; 0x08
     e8a:	89 85       	ldd	r24, Y+9	; 0x09
     e8c:	9a 85       	ldd	r25, Y+10	; 0x0a
     e8e:	20 e0       	ldi	r18, 0x00	; 0
     e90:	30 e0       	ldi	r19, 0x00	; 0
     e92:	40 e8       	ldi	r20, 0x80	; 128
     e94:	5f e3       	ldi	r21, 0x3F	; 63
     e96:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     e9a:	88 23       	and	r24, r24
     e9c:	2c f4       	brge	.+10     	; 0xea8 <C_LCD_voidSendCommand+0x372>
		__ticks = 1;
     e9e:	81 e0       	ldi	r24, 0x01	; 1
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	9e 83       	std	Y+6, r25	; 0x06
     ea4:	8d 83       	std	Y+5, r24	; 0x05
     ea6:	3f c0       	rjmp	.+126    	; 0xf26 <C_LCD_voidSendCommand+0x3f0>
	else if (__tmp > 65535)
     ea8:	6f 81       	ldd	r22, Y+7	; 0x07
     eaa:	78 85       	ldd	r23, Y+8	; 0x08
     eac:	89 85       	ldd	r24, Y+9	; 0x09
     eae:	9a 85       	ldd	r25, Y+10	; 0x0a
     eb0:	20 e0       	ldi	r18, 0x00	; 0
     eb2:	3f ef       	ldi	r19, 0xFF	; 255
     eb4:	4f e7       	ldi	r20, 0x7F	; 127
     eb6:	57 e4       	ldi	r21, 0x47	; 71
     eb8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     ebc:	18 16       	cp	r1, r24
     ebe:	4c f5       	brge	.+82     	; 0xf12 <C_LCD_voidSendCommand+0x3dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ec0:	6b 85       	ldd	r22, Y+11	; 0x0b
     ec2:	7c 85       	ldd	r23, Y+12	; 0x0c
     ec4:	8d 85       	ldd	r24, Y+13	; 0x0d
     ec6:	9e 85       	ldd	r25, Y+14	; 0x0e
     ec8:	20 e0       	ldi	r18, 0x00	; 0
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	40 e2       	ldi	r20, 0x20	; 32
     ece:	51 e4       	ldi	r21, 0x41	; 65
     ed0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     ed4:	dc 01       	movw	r26, r24
     ed6:	cb 01       	movw	r24, r22
     ed8:	bc 01       	movw	r22, r24
     eda:	cd 01       	movw	r24, r26
     edc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     ee0:	dc 01       	movw	r26, r24
     ee2:	cb 01       	movw	r24, r22
     ee4:	9e 83       	std	Y+6, r25	; 0x06
     ee6:	8d 83       	std	Y+5, r24	; 0x05
     ee8:	0f c0       	rjmp	.+30     	; 0xf08 <C_LCD_voidSendCommand+0x3d2>
     eea:	88 ec       	ldi	r24, 0xC8	; 200
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	9c 83       	std	Y+4, r25	; 0x04
     ef0:	8b 83       	std	Y+3, r24	; 0x03
     ef2:	8b 81       	ldd	r24, Y+3	; 0x03
     ef4:	9c 81       	ldd	r25, Y+4	; 0x04
     ef6:	01 97       	sbiw	r24, 0x01	; 1
     ef8:	f1 f7       	brne	.-4      	; 0xef6 <C_LCD_voidSendCommand+0x3c0>
     efa:	9c 83       	std	Y+4, r25	; 0x04
     efc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     efe:	8d 81       	ldd	r24, Y+5	; 0x05
     f00:	9e 81       	ldd	r25, Y+6	; 0x06
     f02:	01 97       	sbiw	r24, 0x01	; 1
     f04:	9e 83       	std	Y+6, r25	; 0x06
     f06:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f08:	8d 81       	ldd	r24, Y+5	; 0x05
     f0a:	9e 81       	ldd	r25, Y+6	; 0x06
     f0c:	00 97       	sbiw	r24, 0x00	; 0
     f0e:	69 f7       	brne	.-38     	; 0xeea <C_LCD_voidSendCommand+0x3b4>
     f10:	14 c0       	rjmp	.+40     	; 0xf3a <C_LCD_voidSendCommand+0x404>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f12:	6f 81       	ldd	r22, Y+7	; 0x07
     f14:	78 85       	ldd	r23, Y+8	; 0x08
     f16:	89 85       	ldd	r24, Y+9	; 0x09
     f18:	9a 85       	ldd	r25, Y+10	; 0x0a
     f1a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f1e:	dc 01       	movw	r26, r24
     f20:	cb 01       	movw	r24, r22
     f22:	9e 83       	std	Y+6, r25	; 0x06
     f24:	8d 83       	std	Y+5, r24	; 0x05
     f26:	8d 81       	ldd	r24, Y+5	; 0x05
     f28:	9e 81       	ldd	r25, Y+6	; 0x06
     f2a:	9a 83       	std	Y+2, r25	; 0x02
     f2c:	89 83       	std	Y+1, r24	; 0x01
     f2e:	89 81       	ldd	r24, Y+1	; 0x01
     f30:	9a 81       	ldd	r25, Y+2	; 0x02
     f32:	01 97       	sbiw	r24, 0x01	; 1
     f34:	f1 f7       	brne	.-4      	; 0xf32 <C_LCD_voidSendCommand+0x3fc>
     f36:	9a 83       	std	Y+2, r25	; 0x02
     f38:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(5);

}
     f3a:	ea 96       	adiw	r28, 0x3a	; 58
     f3c:	0f b6       	in	r0, 0x3f	; 63
     f3e:	f8 94       	cli
     f40:	de bf       	out	0x3e, r29	; 62
     f42:	0f be       	out	0x3f, r0	; 63
     f44:	cd bf       	out	0x3d, r28	; 61
     f46:	cf 91       	pop	r28
     f48:	df 91       	pop	r29
     f4a:	08 95       	ret

00000f4c <CLCD_voidSendData>:

void CLCD_voidSendData(u8 Copy_u8Data)
{
     f4c:	df 93       	push	r29
     f4e:	cf 93       	push	r28
     f50:	cd b7       	in	r28, 0x3d	; 61
     f52:	de b7       	in	r29, 0x3e	; 62
     f54:	ea 97       	sbiw	r28, 0x3a	; 58
     f56:	0f b6       	in	r0, 0x3f	; 63
     f58:	f8 94       	cli
     f5a:	de bf       	out	0x3e, r29	; 62
     f5c:	0f be       	out	0x3f, r0	; 63
     f5e:	cd bf       	out	0x3d, r28	; 61
     f60:	8a af       	std	Y+58, r24	; 0x3a
//	_delay_ms(2);
//	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);

	u8 Copy_u8DataTemp;
	/*Set RS Pin to low to send command */
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_LOW);
     f62:	80 e0       	ldi	r24, 0x00	; 0
     f64:	61 e0       	ldi	r22, 0x01	; 1
     f66:	40 e0       	ldi	r20, 0x00	; 0
     f68:	0e 94 50 10 	call	0x20a0	; 0x20a0 <DIO_u8SetPinValue>

	/*Set RW Pin to low to write command */
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
     f6c:	80 e0       	ldi	r24, 0x00	; 0
     f6e:	60 e0       	ldi	r22, 0x00	; 0
     f70:	40 e0       	ldi	r20, 0x00	; 0
     f72:	0e 94 50 10 	call	0x20a0	; 0x20a0 <DIO_u8SetPinValue>

	/* Set Command to data pins */
	Copy_u8DataTemp = (((Copy_u8Data>>1)&0b01111000)|(CLCD_DATA_PORT&0b10000111));
     f76:	8a ad       	ldd	r24, Y+58	; 0x3a
     f78:	86 95       	lsr	r24
     f7a:	88 77       	andi	r24, 0x78	; 120
     f7c:	89 af       	std	Y+57, r24	; 0x39
	DIO_u8SetPortValue(CLCD_DATA_PORT,Copy_u8DataTemp);
     f7e:	80 e0       	ldi	r24, 0x00	; 0
     f80:	69 ad       	ldd	r22, Y+57	; 0x39
     f82:	0e 94 62 11 	call	0x22c4	; 0x22c4 <DIO_u8SetPortValue>

	/*Send Enable pulse */
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
     f86:	80 e0       	ldi	r24, 0x00	; 0
     f88:	62 e0       	ldi	r22, 0x02	; 2
     f8a:	41 e0       	ldi	r20, 0x01	; 1
     f8c:	0e 94 50 10 	call	0x20a0	; 0x20a0 <DIO_u8SetPinValue>
     f90:	80 e0       	ldi	r24, 0x00	; 0
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	a0 e8       	ldi	r26, 0x80	; 128
     f96:	bf e3       	ldi	r27, 0x3F	; 63
     f98:	8d ab       	std	Y+53, r24	; 0x35
     f9a:	9e ab       	std	Y+54, r25	; 0x36
     f9c:	af ab       	std	Y+55, r26	; 0x37
     f9e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fa0:	6d a9       	ldd	r22, Y+53	; 0x35
     fa2:	7e a9       	ldd	r23, Y+54	; 0x36
     fa4:	8f a9       	ldd	r24, Y+55	; 0x37
     fa6:	98 ad       	ldd	r25, Y+56	; 0x38
     fa8:	20 e0       	ldi	r18, 0x00	; 0
     faa:	30 e0       	ldi	r19, 0x00	; 0
     fac:	4a ef       	ldi	r20, 0xFA	; 250
     fae:	54 e4       	ldi	r21, 0x44	; 68
     fb0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     fb4:	dc 01       	movw	r26, r24
     fb6:	cb 01       	movw	r24, r22
     fb8:	89 ab       	std	Y+49, r24	; 0x31
     fba:	9a ab       	std	Y+50, r25	; 0x32
     fbc:	ab ab       	std	Y+51, r26	; 0x33
     fbe:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     fc0:	69 a9       	ldd	r22, Y+49	; 0x31
     fc2:	7a a9       	ldd	r23, Y+50	; 0x32
     fc4:	8b a9       	ldd	r24, Y+51	; 0x33
     fc6:	9c a9       	ldd	r25, Y+52	; 0x34
     fc8:	20 e0       	ldi	r18, 0x00	; 0
     fca:	30 e0       	ldi	r19, 0x00	; 0
     fcc:	40 e8       	ldi	r20, 0x80	; 128
     fce:	5f e3       	ldi	r21, 0x3F	; 63
     fd0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     fd4:	88 23       	and	r24, r24
     fd6:	2c f4       	brge	.+10     	; 0xfe2 <CLCD_voidSendData+0x96>
		__ticks = 1;
     fd8:	81 e0       	ldi	r24, 0x01	; 1
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	98 ab       	std	Y+48, r25	; 0x30
     fde:	8f a7       	std	Y+47, r24	; 0x2f
     fe0:	3f c0       	rjmp	.+126    	; 0x1060 <CLCD_voidSendData+0x114>
	else if (__tmp > 65535)
     fe2:	69 a9       	ldd	r22, Y+49	; 0x31
     fe4:	7a a9       	ldd	r23, Y+50	; 0x32
     fe6:	8b a9       	ldd	r24, Y+51	; 0x33
     fe8:	9c a9       	ldd	r25, Y+52	; 0x34
     fea:	20 e0       	ldi	r18, 0x00	; 0
     fec:	3f ef       	ldi	r19, 0xFF	; 255
     fee:	4f e7       	ldi	r20, 0x7F	; 127
     ff0:	57 e4       	ldi	r21, 0x47	; 71
     ff2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     ff6:	18 16       	cp	r1, r24
     ff8:	4c f5       	brge	.+82     	; 0x104c <CLCD_voidSendData+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ffa:	6d a9       	ldd	r22, Y+53	; 0x35
     ffc:	7e a9       	ldd	r23, Y+54	; 0x36
     ffe:	8f a9       	ldd	r24, Y+55	; 0x37
    1000:	98 ad       	ldd	r25, Y+56	; 0x38
    1002:	20 e0       	ldi	r18, 0x00	; 0
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	40 e2       	ldi	r20, 0x20	; 32
    1008:	51 e4       	ldi	r21, 0x41	; 65
    100a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    100e:	dc 01       	movw	r26, r24
    1010:	cb 01       	movw	r24, r22
    1012:	bc 01       	movw	r22, r24
    1014:	cd 01       	movw	r24, r26
    1016:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    101a:	dc 01       	movw	r26, r24
    101c:	cb 01       	movw	r24, r22
    101e:	98 ab       	std	Y+48, r25	; 0x30
    1020:	8f a7       	std	Y+47, r24	; 0x2f
    1022:	0f c0       	rjmp	.+30     	; 0x1042 <CLCD_voidSendData+0xf6>
    1024:	88 ec       	ldi	r24, 0xC8	; 200
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	9e a7       	std	Y+46, r25	; 0x2e
    102a:	8d a7       	std	Y+45, r24	; 0x2d
    102c:	8d a5       	ldd	r24, Y+45	; 0x2d
    102e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1030:	01 97       	sbiw	r24, 0x01	; 1
    1032:	f1 f7       	brne	.-4      	; 0x1030 <CLCD_voidSendData+0xe4>
    1034:	9e a7       	std	Y+46, r25	; 0x2e
    1036:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1038:	8f a5       	ldd	r24, Y+47	; 0x2f
    103a:	98 a9       	ldd	r25, Y+48	; 0x30
    103c:	01 97       	sbiw	r24, 0x01	; 1
    103e:	98 ab       	std	Y+48, r25	; 0x30
    1040:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1042:	8f a5       	ldd	r24, Y+47	; 0x2f
    1044:	98 a9       	ldd	r25, Y+48	; 0x30
    1046:	00 97       	sbiw	r24, 0x00	; 0
    1048:	69 f7       	brne	.-38     	; 0x1024 <CLCD_voidSendData+0xd8>
    104a:	14 c0       	rjmp	.+40     	; 0x1074 <CLCD_voidSendData+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    104c:	69 a9       	ldd	r22, Y+49	; 0x31
    104e:	7a a9       	ldd	r23, Y+50	; 0x32
    1050:	8b a9       	ldd	r24, Y+51	; 0x33
    1052:	9c a9       	ldd	r25, Y+52	; 0x34
    1054:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1058:	dc 01       	movw	r26, r24
    105a:	cb 01       	movw	r24, r22
    105c:	98 ab       	std	Y+48, r25	; 0x30
    105e:	8f a7       	std	Y+47, r24	; 0x2f
    1060:	8f a5       	ldd	r24, Y+47	; 0x2f
    1062:	98 a9       	ldd	r25, Y+48	; 0x30
    1064:	9c a7       	std	Y+44, r25	; 0x2c
    1066:	8b a7       	std	Y+43, r24	; 0x2b
    1068:	8b a5       	ldd	r24, Y+43	; 0x2b
    106a:	9c a5       	ldd	r25, Y+44	; 0x2c
    106c:	01 97       	sbiw	r24, 0x01	; 1
    106e:	f1 f7       	brne	.-4      	; 0x106c <CLCD_voidSendData+0x120>
    1070:	9c a7       	std	Y+44, r25	; 0x2c
    1072:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    1074:	80 e0       	ldi	r24, 0x00	; 0
    1076:	62 e0       	ldi	r22, 0x02	; 2
    1078:	40 e0       	ldi	r20, 0x00	; 0
    107a:	0e 94 50 10 	call	0x20a0	; 0x20a0 <DIO_u8SetPinValue>
    107e:	80 e0       	ldi	r24, 0x00	; 0
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	a0 ea       	ldi	r26, 0xA0	; 160
    1084:	b0 e4       	ldi	r27, 0x40	; 64
    1086:	8f a3       	std	Y+39, r24	; 0x27
    1088:	98 a7       	std	Y+40, r25	; 0x28
    108a:	a9 a7       	std	Y+41, r26	; 0x29
    108c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    108e:	6f a1       	ldd	r22, Y+39	; 0x27
    1090:	78 a5       	ldd	r23, Y+40	; 0x28
    1092:	89 a5       	ldd	r24, Y+41	; 0x29
    1094:	9a a5       	ldd	r25, Y+42	; 0x2a
    1096:	20 e0       	ldi	r18, 0x00	; 0
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	4a ef       	ldi	r20, 0xFA	; 250
    109c:	54 e4       	ldi	r21, 0x44	; 68
    109e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    10a2:	dc 01       	movw	r26, r24
    10a4:	cb 01       	movw	r24, r22
    10a6:	8b a3       	std	Y+35, r24	; 0x23
    10a8:	9c a3       	std	Y+36, r25	; 0x24
    10aa:	ad a3       	std	Y+37, r26	; 0x25
    10ac:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    10ae:	6b a1       	ldd	r22, Y+35	; 0x23
    10b0:	7c a1       	ldd	r23, Y+36	; 0x24
    10b2:	8d a1       	ldd	r24, Y+37	; 0x25
    10b4:	9e a1       	ldd	r25, Y+38	; 0x26
    10b6:	20 e0       	ldi	r18, 0x00	; 0
    10b8:	30 e0       	ldi	r19, 0x00	; 0
    10ba:	40 e8       	ldi	r20, 0x80	; 128
    10bc:	5f e3       	ldi	r21, 0x3F	; 63
    10be:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    10c2:	88 23       	and	r24, r24
    10c4:	2c f4       	brge	.+10     	; 0x10d0 <CLCD_voidSendData+0x184>
		__ticks = 1;
    10c6:	81 e0       	ldi	r24, 0x01	; 1
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	9a a3       	std	Y+34, r25	; 0x22
    10cc:	89 a3       	std	Y+33, r24	; 0x21
    10ce:	3f c0       	rjmp	.+126    	; 0x114e <CLCD_voidSendData+0x202>
	else if (__tmp > 65535)
    10d0:	6b a1       	ldd	r22, Y+35	; 0x23
    10d2:	7c a1       	ldd	r23, Y+36	; 0x24
    10d4:	8d a1       	ldd	r24, Y+37	; 0x25
    10d6:	9e a1       	ldd	r25, Y+38	; 0x26
    10d8:	20 e0       	ldi	r18, 0x00	; 0
    10da:	3f ef       	ldi	r19, 0xFF	; 255
    10dc:	4f e7       	ldi	r20, 0x7F	; 127
    10de:	57 e4       	ldi	r21, 0x47	; 71
    10e0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    10e4:	18 16       	cp	r1, r24
    10e6:	4c f5       	brge	.+82     	; 0x113a <CLCD_voidSendData+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10e8:	6f a1       	ldd	r22, Y+39	; 0x27
    10ea:	78 a5       	ldd	r23, Y+40	; 0x28
    10ec:	89 a5       	ldd	r24, Y+41	; 0x29
    10ee:	9a a5       	ldd	r25, Y+42	; 0x2a
    10f0:	20 e0       	ldi	r18, 0x00	; 0
    10f2:	30 e0       	ldi	r19, 0x00	; 0
    10f4:	40 e2       	ldi	r20, 0x20	; 32
    10f6:	51 e4       	ldi	r21, 0x41	; 65
    10f8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    10fc:	dc 01       	movw	r26, r24
    10fe:	cb 01       	movw	r24, r22
    1100:	bc 01       	movw	r22, r24
    1102:	cd 01       	movw	r24, r26
    1104:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1108:	dc 01       	movw	r26, r24
    110a:	cb 01       	movw	r24, r22
    110c:	9a a3       	std	Y+34, r25	; 0x22
    110e:	89 a3       	std	Y+33, r24	; 0x21
    1110:	0f c0       	rjmp	.+30     	; 0x1130 <CLCD_voidSendData+0x1e4>
    1112:	88 ec       	ldi	r24, 0xC8	; 200
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	98 a3       	std	Y+32, r25	; 0x20
    1118:	8f 8f       	std	Y+31, r24	; 0x1f
    111a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    111c:	98 a1       	ldd	r25, Y+32	; 0x20
    111e:	01 97       	sbiw	r24, 0x01	; 1
    1120:	f1 f7       	brne	.-4      	; 0x111e <CLCD_voidSendData+0x1d2>
    1122:	98 a3       	std	Y+32, r25	; 0x20
    1124:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1126:	89 a1       	ldd	r24, Y+33	; 0x21
    1128:	9a a1       	ldd	r25, Y+34	; 0x22
    112a:	01 97       	sbiw	r24, 0x01	; 1
    112c:	9a a3       	std	Y+34, r25	; 0x22
    112e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1130:	89 a1       	ldd	r24, Y+33	; 0x21
    1132:	9a a1       	ldd	r25, Y+34	; 0x22
    1134:	00 97       	sbiw	r24, 0x00	; 0
    1136:	69 f7       	brne	.-38     	; 0x1112 <CLCD_voidSendData+0x1c6>
    1138:	14 c0       	rjmp	.+40     	; 0x1162 <CLCD_voidSendData+0x216>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    113a:	6b a1       	ldd	r22, Y+35	; 0x23
    113c:	7c a1       	ldd	r23, Y+36	; 0x24
    113e:	8d a1       	ldd	r24, Y+37	; 0x25
    1140:	9e a1       	ldd	r25, Y+38	; 0x26
    1142:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1146:	dc 01       	movw	r26, r24
    1148:	cb 01       	movw	r24, r22
    114a:	9a a3       	std	Y+34, r25	; 0x22
    114c:	89 a3       	std	Y+33, r24	; 0x21
    114e:	89 a1       	ldd	r24, Y+33	; 0x21
    1150:	9a a1       	ldd	r25, Y+34	; 0x22
    1152:	9e 8f       	std	Y+30, r25	; 0x1e
    1154:	8d 8f       	std	Y+29, r24	; 0x1d
    1156:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1158:	9e 8d       	ldd	r25, Y+30	; 0x1e
    115a:	01 97       	sbiw	r24, 0x01	; 1
    115c:	f1 f7       	brne	.-4      	; 0x115a <CLCD_voidSendData+0x20e>
    115e:	9e 8f       	std	Y+30, r25	; 0x1e
    1160:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(5);

	Copy_u8DataTemp = (((Copy_u8Data)<<3)|(CLCD_DATA_PORT&0b10000111));
    1162:	8a ad       	ldd	r24, Y+58	; 0x3a
    1164:	88 0f       	add	r24, r24
    1166:	88 0f       	add	r24, r24
    1168:	88 0f       	add	r24, r24
    116a:	89 af       	std	Y+57, r24	; 0x39
	DIO_u8SetPortValue(CLCD_DATA_PORT,Copy_u8DataTemp);
    116c:	80 e0       	ldi	r24, 0x00	; 0
    116e:	69 ad       	ldd	r22, Y+57	; 0x39
    1170:	0e 94 62 11 	call	0x22c4	; 0x22c4 <DIO_u8SetPortValue>
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    1174:	80 e0       	ldi	r24, 0x00	; 0
    1176:	62 e0       	ldi	r22, 0x02	; 2
    1178:	41 e0       	ldi	r20, 0x01	; 1
    117a:	0e 94 50 10 	call	0x20a0	; 0x20a0 <DIO_u8SetPinValue>
    117e:	80 e0       	ldi	r24, 0x00	; 0
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	a0 e8       	ldi	r26, 0x80	; 128
    1184:	bf e3       	ldi	r27, 0x3F	; 63
    1186:	89 8f       	std	Y+25, r24	; 0x19
    1188:	9a 8f       	std	Y+26, r25	; 0x1a
    118a:	ab 8f       	std	Y+27, r26	; 0x1b
    118c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    118e:	69 8d       	ldd	r22, Y+25	; 0x19
    1190:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1192:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1194:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1196:	20 e0       	ldi	r18, 0x00	; 0
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	4a ef       	ldi	r20, 0xFA	; 250
    119c:	54 e4       	ldi	r21, 0x44	; 68
    119e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    11a2:	dc 01       	movw	r26, r24
    11a4:	cb 01       	movw	r24, r22
    11a6:	8d 8b       	std	Y+21, r24	; 0x15
    11a8:	9e 8b       	std	Y+22, r25	; 0x16
    11aa:	af 8b       	std	Y+23, r26	; 0x17
    11ac:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    11ae:	6d 89       	ldd	r22, Y+21	; 0x15
    11b0:	7e 89       	ldd	r23, Y+22	; 0x16
    11b2:	8f 89       	ldd	r24, Y+23	; 0x17
    11b4:	98 8d       	ldd	r25, Y+24	; 0x18
    11b6:	20 e0       	ldi	r18, 0x00	; 0
    11b8:	30 e0       	ldi	r19, 0x00	; 0
    11ba:	40 e8       	ldi	r20, 0x80	; 128
    11bc:	5f e3       	ldi	r21, 0x3F	; 63
    11be:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    11c2:	88 23       	and	r24, r24
    11c4:	2c f4       	brge	.+10     	; 0x11d0 <CLCD_voidSendData+0x284>
		__ticks = 1;
    11c6:	81 e0       	ldi	r24, 0x01	; 1
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	9c 8b       	std	Y+20, r25	; 0x14
    11cc:	8b 8b       	std	Y+19, r24	; 0x13
    11ce:	3f c0       	rjmp	.+126    	; 0x124e <CLCD_voidSendData+0x302>
	else if (__tmp > 65535)
    11d0:	6d 89       	ldd	r22, Y+21	; 0x15
    11d2:	7e 89       	ldd	r23, Y+22	; 0x16
    11d4:	8f 89       	ldd	r24, Y+23	; 0x17
    11d6:	98 8d       	ldd	r25, Y+24	; 0x18
    11d8:	20 e0       	ldi	r18, 0x00	; 0
    11da:	3f ef       	ldi	r19, 0xFF	; 255
    11dc:	4f e7       	ldi	r20, 0x7F	; 127
    11de:	57 e4       	ldi	r21, 0x47	; 71
    11e0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    11e4:	18 16       	cp	r1, r24
    11e6:	4c f5       	brge	.+82     	; 0x123a <CLCD_voidSendData+0x2ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11e8:	69 8d       	ldd	r22, Y+25	; 0x19
    11ea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    11ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    11f0:	20 e0       	ldi	r18, 0x00	; 0
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	40 e2       	ldi	r20, 0x20	; 32
    11f6:	51 e4       	ldi	r21, 0x41	; 65
    11f8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    11fc:	dc 01       	movw	r26, r24
    11fe:	cb 01       	movw	r24, r22
    1200:	bc 01       	movw	r22, r24
    1202:	cd 01       	movw	r24, r26
    1204:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1208:	dc 01       	movw	r26, r24
    120a:	cb 01       	movw	r24, r22
    120c:	9c 8b       	std	Y+20, r25	; 0x14
    120e:	8b 8b       	std	Y+19, r24	; 0x13
    1210:	0f c0       	rjmp	.+30     	; 0x1230 <CLCD_voidSendData+0x2e4>
    1212:	88 ec       	ldi	r24, 0xC8	; 200
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	9a 8b       	std	Y+18, r25	; 0x12
    1218:	89 8b       	std	Y+17, r24	; 0x11
    121a:	89 89       	ldd	r24, Y+17	; 0x11
    121c:	9a 89       	ldd	r25, Y+18	; 0x12
    121e:	01 97       	sbiw	r24, 0x01	; 1
    1220:	f1 f7       	brne	.-4      	; 0x121e <CLCD_voidSendData+0x2d2>
    1222:	9a 8b       	std	Y+18, r25	; 0x12
    1224:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1226:	8b 89       	ldd	r24, Y+19	; 0x13
    1228:	9c 89       	ldd	r25, Y+20	; 0x14
    122a:	01 97       	sbiw	r24, 0x01	; 1
    122c:	9c 8b       	std	Y+20, r25	; 0x14
    122e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1230:	8b 89       	ldd	r24, Y+19	; 0x13
    1232:	9c 89       	ldd	r25, Y+20	; 0x14
    1234:	00 97       	sbiw	r24, 0x00	; 0
    1236:	69 f7       	brne	.-38     	; 0x1212 <CLCD_voidSendData+0x2c6>
    1238:	14 c0       	rjmp	.+40     	; 0x1262 <CLCD_voidSendData+0x316>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    123a:	6d 89       	ldd	r22, Y+21	; 0x15
    123c:	7e 89       	ldd	r23, Y+22	; 0x16
    123e:	8f 89       	ldd	r24, Y+23	; 0x17
    1240:	98 8d       	ldd	r25, Y+24	; 0x18
    1242:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1246:	dc 01       	movw	r26, r24
    1248:	cb 01       	movw	r24, r22
    124a:	9c 8b       	std	Y+20, r25	; 0x14
    124c:	8b 8b       	std	Y+19, r24	; 0x13
    124e:	8b 89       	ldd	r24, Y+19	; 0x13
    1250:	9c 89       	ldd	r25, Y+20	; 0x14
    1252:	98 8b       	std	Y+16, r25	; 0x10
    1254:	8f 87       	std	Y+15, r24	; 0x0f
    1256:	8f 85       	ldd	r24, Y+15	; 0x0f
    1258:	98 89       	ldd	r25, Y+16	; 0x10
    125a:	01 97       	sbiw	r24, 0x01	; 1
    125c:	f1 f7       	brne	.-4      	; 0x125a <CLCD_voidSendData+0x30e>
    125e:	98 8b       	std	Y+16, r25	; 0x10
    1260:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    1262:	80 e0       	ldi	r24, 0x00	; 0
    1264:	62 e0       	ldi	r22, 0x02	; 2
    1266:	40 e0       	ldi	r20, 0x00	; 0
    1268:	0e 94 50 10 	call	0x20a0	; 0x20a0 <DIO_u8SetPinValue>
    126c:	80 e0       	ldi	r24, 0x00	; 0
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	a0 ea       	ldi	r26, 0xA0	; 160
    1272:	b0 e4       	ldi	r27, 0x40	; 64
    1274:	8b 87       	std	Y+11, r24	; 0x0b
    1276:	9c 87       	std	Y+12, r25	; 0x0c
    1278:	ad 87       	std	Y+13, r26	; 0x0d
    127a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    127c:	6b 85       	ldd	r22, Y+11	; 0x0b
    127e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1280:	8d 85       	ldd	r24, Y+13	; 0x0d
    1282:	9e 85       	ldd	r25, Y+14	; 0x0e
    1284:	20 e0       	ldi	r18, 0x00	; 0
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	4a ef       	ldi	r20, 0xFA	; 250
    128a:	54 e4       	ldi	r21, 0x44	; 68
    128c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1290:	dc 01       	movw	r26, r24
    1292:	cb 01       	movw	r24, r22
    1294:	8f 83       	std	Y+7, r24	; 0x07
    1296:	98 87       	std	Y+8, r25	; 0x08
    1298:	a9 87       	std	Y+9, r26	; 0x09
    129a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    129c:	6f 81       	ldd	r22, Y+7	; 0x07
    129e:	78 85       	ldd	r23, Y+8	; 0x08
    12a0:	89 85       	ldd	r24, Y+9	; 0x09
    12a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    12a4:	20 e0       	ldi	r18, 0x00	; 0
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	40 e8       	ldi	r20, 0x80	; 128
    12aa:	5f e3       	ldi	r21, 0x3F	; 63
    12ac:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    12b0:	88 23       	and	r24, r24
    12b2:	2c f4       	brge	.+10     	; 0x12be <CLCD_voidSendData+0x372>
		__ticks = 1;
    12b4:	81 e0       	ldi	r24, 0x01	; 1
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	9e 83       	std	Y+6, r25	; 0x06
    12ba:	8d 83       	std	Y+5, r24	; 0x05
    12bc:	3f c0       	rjmp	.+126    	; 0x133c <CLCD_voidSendData+0x3f0>
	else if (__tmp > 65535)
    12be:	6f 81       	ldd	r22, Y+7	; 0x07
    12c0:	78 85       	ldd	r23, Y+8	; 0x08
    12c2:	89 85       	ldd	r24, Y+9	; 0x09
    12c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    12c6:	20 e0       	ldi	r18, 0x00	; 0
    12c8:	3f ef       	ldi	r19, 0xFF	; 255
    12ca:	4f e7       	ldi	r20, 0x7F	; 127
    12cc:	57 e4       	ldi	r21, 0x47	; 71
    12ce:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    12d2:	18 16       	cp	r1, r24
    12d4:	4c f5       	brge	.+82     	; 0x1328 <CLCD_voidSendData+0x3dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    12d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    12da:	8d 85       	ldd	r24, Y+13	; 0x0d
    12dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    12de:	20 e0       	ldi	r18, 0x00	; 0
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	40 e2       	ldi	r20, 0x20	; 32
    12e4:	51 e4       	ldi	r21, 0x41	; 65
    12e6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    12ea:	dc 01       	movw	r26, r24
    12ec:	cb 01       	movw	r24, r22
    12ee:	bc 01       	movw	r22, r24
    12f0:	cd 01       	movw	r24, r26
    12f2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    12f6:	dc 01       	movw	r26, r24
    12f8:	cb 01       	movw	r24, r22
    12fa:	9e 83       	std	Y+6, r25	; 0x06
    12fc:	8d 83       	std	Y+5, r24	; 0x05
    12fe:	0f c0       	rjmp	.+30     	; 0x131e <CLCD_voidSendData+0x3d2>
    1300:	88 ec       	ldi	r24, 0xC8	; 200
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	9c 83       	std	Y+4, r25	; 0x04
    1306:	8b 83       	std	Y+3, r24	; 0x03
    1308:	8b 81       	ldd	r24, Y+3	; 0x03
    130a:	9c 81       	ldd	r25, Y+4	; 0x04
    130c:	01 97       	sbiw	r24, 0x01	; 1
    130e:	f1 f7       	brne	.-4      	; 0x130c <CLCD_voidSendData+0x3c0>
    1310:	9c 83       	std	Y+4, r25	; 0x04
    1312:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1314:	8d 81       	ldd	r24, Y+5	; 0x05
    1316:	9e 81       	ldd	r25, Y+6	; 0x06
    1318:	01 97       	sbiw	r24, 0x01	; 1
    131a:	9e 83       	std	Y+6, r25	; 0x06
    131c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    131e:	8d 81       	ldd	r24, Y+5	; 0x05
    1320:	9e 81       	ldd	r25, Y+6	; 0x06
    1322:	00 97       	sbiw	r24, 0x00	; 0
    1324:	69 f7       	brne	.-38     	; 0x1300 <CLCD_voidSendData+0x3b4>
    1326:	14 c0       	rjmp	.+40     	; 0x1350 <CLCD_voidSendData+0x404>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1328:	6f 81       	ldd	r22, Y+7	; 0x07
    132a:	78 85       	ldd	r23, Y+8	; 0x08
    132c:	89 85       	ldd	r24, Y+9	; 0x09
    132e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1330:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1334:	dc 01       	movw	r26, r24
    1336:	cb 01       	movw	r24, r22
    1338:	9e 83       	std	Y+6, r25	; 0x06
    133a:	8d 83       	std	Y+5, r24	; 0x05
    133c:	8d 81       	ldd	r24, Y+5	; 0x05
    133e:	9e 81       	ldd	r25, Y+6	; 0x06
    1340:	9a 83       	std	Y+2, r25	; 0x02
    1342:	89 83       	std	Y+1, r24	; 0x01
    1344:	89 81       	ldd	r24, Y+1	; 0x01
    1346:	9a 81       	ldd	r25, Y+2	; 0x02
    1348:	01 97       	sbiw	r24, 0x01	; 1
    134a:	f1 f7       	brne	.-4      	; 0x1348 <CLCD_voidSendData+0x3fc>
    134c:	9a 83       	std	Y+2, r25	; 0x02
    134e:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(5);



}
    1350:	ea 96       	adiw	r28, 0x3a	; 58
    1352:	0f b6       	in	r0, 0x3f	; 63
    1354:	f8 94       	cli
    1356:	de bf       	out	0x3e, r29	; 62
    1358:	0f be       	out	0x3f, r0	; 63
    135a:	cd bf       	out	0x3d, r28	; 61
    135c:	cf 91       	pop	r28
    135e:	df 91       	pop	r29
    1360:	08 95       	ret

00001362 <CLCD_voidInit>:

void CLCD_voidInit(void)
{
    1362:	df 93       	push	r29
    1364:	cf 93       	push	r28
    1366:	cd b7       	in	r28, 0x3d	; 61
    1368:	de b7       	in	r29, 0x3e	; 62
    136a:	2e 97       	sbiw	r28, 0x0e	; 14
    136c:	0f b6       	in	r0, 0x3f	; 63
    136e:	f8 94       	cli
    1370:	de bf       	out	0x3e, r29	; 62
    1372:	0f be       	out	0x3f, r0	; 63
    1374:	cd bf       	out	0x3d, r28	; 61
    1376:	80 e0       	ldi	r24, 0x00	; 0
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	a0 e2       	ldi	r26, 0x20	; 32
    137c:	b2 e4       	ldi	r27, 0x42	; 66
    137e:	8b 87       	std	Y+11, r24	; 0x0b
    1380:	9c 87       	std	Y+12, r25	; 0x0c
    1382:	ad 87       	std	Y+13, r26	; 0x0d
    1384:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1386:	6b 85       	ldd	r22, Y+11	; 0x0b
    1388:	7c 85       	ldd	r23, Y+12	; 0x0c
    138a:	8d 85       	ldd	r24, Y+13	; 0x0d
    138c:	9e 85       	ldd	r25, Y+14	; 0x0e
    138e:	20 e0       	ldi	r18, 0x00	; 0
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	4a ef       	ldi	r20, 0xFA	; 250
    1394:	54 e4       	ldi	r21, 0x44	; 68
    1396:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    139a:	dc 01       	movw	r26, r24
    139c:	cb 01       	movw	r24, r22
    139e:	8f 83       	std	Y+7, r24	; 0x07
    13a0:	98 87       	std	Y+8, r25	; 0x08
    13a2:	a9 87       	std	Y+9, r26	; 0x09
    13a4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13a6:	6f 81       	ldd	r22, Y+7	; 0x07
    13a8:	78 85       	ldd	r23, Y+8	; 0x08
    13aa:	89 85       	ldd	r24, Y+9	; 0x09
    13ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    13ae:	20 e0       	ldi	r18, 0x00	; 0
    13b0:	30 e0       	ldi	r19, 0x00	; 0
    13b2:	40 e8       	ldi	r20, 0x80	; 128
    13b4:	5f e3       	ldi	r21, 0x3F	; 63
    13b6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    13ba:	88 23       	and	r24, r24
    13bc:	2c f4       	brge	.+10     	; 0x13c8 <CLCD_voidInit+0x66>
		__ticks = 1;
    13be:	81 e0       	ldi	r24, 0x01	; 1
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	9e 83       	std	Y+6, r25	; 0x06
    13c4:	8d 83       	std	Y+5, r24	; 0x05
    13c6:	3f c0       	rjmp	.+126    	; 0x1446 <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
    13c8:	6f 81       	ldd	r22, Y+7	; 0x07
    13ca:	78 85       	ldd	r23, Y+8	; 0x08
    13cc:	89 85       	ldd	r24, Y+9	; 0x09
    13ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    13d0:	20 e0       	ldi	r18, 0x00	; 0
    13d2:	3f ef       	ldi	r19, 0xFF	; 255
    13d4:	4f e7       	ldi	r20, 0x7F	; 127
    13d6:	57 e4       	ldi	r21, 0x47	; 71
    13d8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    13dc:	18 16       	cp	r1, r24
    13de:	4c f5       	brge	.+82     	; 0x1432 <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    13e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    13e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    13e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    13e8:	20 e0       	ldi	r18, 0x00	; 0
    13ea:	30 e0       	ldi	r19, 0x00	; 0
    13ec:	40 e2       	ldi	r20, 0x20	; 32
    13ee:	51 e4       	ldi	r21, 0x41	; 65
    13f0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13f4:	dc 01       	movw	r26, r24
    13f6:	cb 01       	movw	r24, r22
    13f8:	bc 01       	movw	r22, r24
    13fa:	cd 01       	movw	r24, r26
    13fc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1400:	dc 01       	movw	r26, r24
    1402:	cb 01       	movw	r24, r22
    1404:	9e 83       	std	Y+6, r25	; 0x06
    1406:	8d 83       	std	Y+5, r24	; 0x05
    1408:	0f c0       	rjmp	.+30     	; 0x1428 <CLCD_voidInit+0xc6>
    140a:	88 ec       	ldi	r24, 0xC8	; 200
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	9c 83       	std	Y+4, r25	; 0x04
    1410:	8b 83       	std	Y+3, r24	; 0x03
    1412:	8b 81       	ldd	r24, Y+3	; 0x03
    1414:	9c 81       	ldd	r25, Y+4	; 0x04
    1416:	01 97       	sbiw	r24, 0x01	; 1
    1418:	f1 f7       	brne	.-4      	; 0x1416 <CLCD_voidInit+0xb4>
    141a:	9c 83       	std	Y+4, r25	; 0x04
    141c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    141e:	8d 81       	ldd	r24, Y+5	; 0x05
    1420:	9e 81       	ldd	r25, Y+6	; 0x06
    1422:	01 97       	sbiw	r24, 0x01	; 1
    1424:	9e 83       	std	Y+6, r25	; 0x06
    1426:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1428:	8d 81       	ldd	r24, Y+5	; 0x05
    142a:	9e 81       	ldd	r25, Y+6	; 0x06
    142c:	00 97       	sbiw	r24, 0x00	; 0
    142e:	69 f7       	brne	.-38     	; 0x140a <CLCD_voidInit+0xa8>
    1430:	14 c0       	rjmp	.+40     	; 0x145a <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1432:	6f 81       	ldd	r22, Y+7	; 0x07
    1434:	78 85       	ldd	r23, Y+8	; 0x08
    1436:	89 85       	ldd	r24, Y+9	; 0x09
    1438:	9a 85       	ldd	r25, Y+10	; 0x0a
    143a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    143e:	dc 01       	movw	r26, r24
    1440:	cb 01       	movw	r24, r22
    1442:	9e 83       	std	Y+6, r25	; 0x06
    1444:	8d 83       	std	Y+5, r24	; 0x05
    1446:	8d 81       	ldd	r24, Y+5	; 0x05
    1448:	9e 81       	ldd	r25, Y+6	; 0x06
    144a:	9a 83       	std	Y+2, r25	; 0x02
    144c:	89 83       	std	Y+1, r24	; 0x01
    144e:	89 81       	ldd	r24, Y+1	; 0x01
    1450:	9a 81       	ldd	r25, Y+2	; 0x02
    1452:	01 97       	sbiw	r24, 0x01	; 1
    1454:	f1 f7       	brne	.-4      	; 0x1452 <CLCD_voidInit+0xf0>
    1456:	9a 83       	std	Y+2, r25	; 0x02
    1458:	89 83       	std	Y+1, r24	; 0x01
//	/* Clear display */
//	//C_LCD_voidSendCommand(0x01); /* 1 or 0x01 or 0b00000001*/ /* 8_BIT_MODE */
//	/* 4_BIT_MODE */
//	C_LCD_voidSendCommand(0b00000000);
//	C_LCD_voidSendCommand(0b00010000);
	C_LCD_voidSendCommand(0x33);
    145a:	83 e3       	ldi	r24, 0x33	; 51
    145c:	0e 94 9b 05 	call	0xb36	; 0xb36 <C_LCD_voidSendCommand>
	C_LCD_voidSendCommand(0x32);
    1460:	82 e3       	ldi	r24, 0x32	; 50
    1462:	0e 94 9b 05 	call	0xb36	; 0xb36 <C_LCD_voidSendCommand>
	C_LCD_voidSendCommand(0x28);
    1466:	88 e2       	ldi	r24, 0x28	; 40
    1468:	0e 94 9b 05 	call	0xb36	; 0xb36 <C_LCD_voidSendCommand>
	C_LCD_voidSendCommand(0x0C);
    146c:	8c e0       	ldi	r24, 0x0C	; 12
    146e:	0e 94 9b 05 	call	0xb36	; 0xb36 <C_LCD_voidSendCommand>
	C_LCD_voidSendCommand(0x02);
    1472:	82 e0       	ldi	r24, 0x02	; 2
    1474:	0e 94 9b 05 	call	0xb36	; 0xb36 <C_LCD_voidSendCommand>
	C_LCD_voidSendCommand(0x06);
    1478:	86 e0       	ldi	r24, 0x06	; 6
    147a:	0e 94 9b 05 	call	0xb36	; 0xb36 <C_LCD_voidSendCommand>
	C_LCD_voidSendCommand(0x01);
    147e:	81 e0       	ldi	r24, 0x01	; 1
    1480:	0e 94 9b 05 	call	0xb36	; 0xb36 <C_LCD_voidSendCommand>


}
    1484:	2e 96       	adiw	r28, 0x0e	; 14
    1486:	0f b6       	in	r0, 0x3f	; 63
    1488:	f8 94       	cli
    148a:	de bf       	out	0x3e, r29	; 62
    148c:	0f be       	out	0x3f, r0	; 63
    148e:	cd bf       	out	0x3d, r28	; 61
    1490:	cf 91       	pop	r28
    1492:	df 91       	pop	r29
    1494:	08 95       	ret

00001496 <CLCD_voidSendString>:

void CLCD_voidSendString(const char* Copy_pcString )
{
    1496:	df 93       	push	r29
    1498:	cf 93       	push	r28
    149a:	00 d0       	rcall	.+0      	; 0x149c <CLCD_voidSendString+0x6>
    149c:	0f 92       	push	r0
    149e:	cd b7       	in	r28, 0x3d	; 61
    14a0:	de b7       	in	r29, 0x3e	; 62
    14a2:	9b 83       	std	Y+3, r25	; 0x03
    14a4:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Counter = 0;
    14a6:	19 82       	std	Y+1, r1	; 0x01
    14a8:	0e c0       	rjmp	.+28     	; 0x14c6 <CLCD_voidSendString+0x30>
	while (Copy_pcString[Local_u8Counter] != NULL)
	{
		CLCD_voidSendData(Copy_pcString[Local_u8Counter]);
    14aa:	89 81       	ldd	r24, Y+1	; 0x01
    14ac:	28 2f       	mov	r18, r24
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	8a 81       	ldd	r24, Y+2	; 0x02
    14b2:	9b 81       	ldd	r25, Y+3	; 0x03
    14b4:	fc 01       	movw	r30, r24
    14b6:	e2 0f       	add	r30, r18
    14b8:	f3 1f       	adc	r31, r19
    14ba:	80 81       	ld	r24, Z
    14bc:	0e 94 a6 07 	call	0xf4c	; 0xf4c <CLCD_voidSendData>
		Local_u8Counter++;
    14c0:	89 81       	ldd	r24, Y+1	; 0x01
    14c2:	8f 5f       	subi	r24, 0xFF	; 255
    14c4:	89 83       	std	Y+1, r24	; 0x01
}

void CLCD_voidSendString(const char* Copy_pcString )
{
	u8 Local_u8Counter = 0;
	while (Copy_pcString[Local_u8Counter] != NULL)
    14c6:	89 81       	ldd	r24, Y+1	; 0x01
    14c8:	28 2f       	mov	r18, r24
    14ca:	30 e0       	ldi	r19, 0x00	; 0
    14cc:	8a 81       	ldd	r24, Y+2	; 0x02
    14ce:	9b 81       	ldd	r25, Y+3	; 0x03
    14d0:	fc 01       	movw	r30, r24
    14d2:	e2 0f       	add	r30, r18
    14d4:	f3 1f       	adc	r31, r19
    14d6:	80 81       	ld	r24, Z
    14d8:	88 23       	and	r24, r24
    14da:	39 f7       	brne	.-50     	; 0x14aa <CLCD_voidSendString+0x14>
	{
		CLCD_voidSendData(Copy_pcString[Local_u8Counter]);
		Local_u8Counter++;
	}
}
    14dc:	0f 90       	pop	r0
    14de:	0f 90       	pop	r0
    14e0:	0f 90       	pop	r0
    14e2:	cf 91       	pop	r28
    14e4:	df 91       	pop	r29
    14e6:	08 95       	ret

000014e8 <CLCD_voidGoToXY>:

void CLCD_voidGoToXY(u8 Copy_u8Xpos, u8 Copy_u8Ypos)
{
    14e8:	df 93       	push	r29
    14ea:	cf 93       	push	r28
    14ec:	00 d0       	rcall	.+0      	; 0x14ee <CLCD_voidGoToXY+0x6>
    14ee:	0f 92       	push	r0
    14f0:	cd b7       	in	r28, 0x3d	; 61
    14f2:	de b7       	in	r29, 0x3e	; 62
    14f4:	8a 83       	std	Y+2, r24	; 0x02
    14f6:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Adress;
	if (Copy_u8Xpos == 0)
    14f8:	8a 81       	ldd	r24, Y+2	; 0x02
    14fa:	88 23       	and	r24, r24
    14fc:	19 f4       	brne	.+6      	; 0x1504 <CLCD_voidGoToXY+0x1c>
	{
		Local_u8Adress = Copy_u8Ypos;
    14fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1500:	89 83       	std	Y+1, r24	; 0x01
    1502:	06 c0       	rjmp	.+12     	; 0x1510 <CLCD_voidGoToXY+0x28>
	}
	else if (Copy_u8Xpos == 1)
    1504:	8a 81       	ldd	r24, Y+2	; 0x02
    1506:	81 30       	cpi	r24, 0x01	; 1
    1508:	19 f4       	brne	.+6      	; 0x1510 <CLCD_voidGoToXY+0x28>
	{
		Local_u8Adress = Copy_u8Ypos+0x40;
    150a:	8b 81       	ldd	r24, Y+3	; 0x03
    150c:	80 5c       	subi	r24, 0xC0	; 192
    150e:	89 83       	std	Y+1, r24	; 0x01
	}

	C_LCD_voidSendCommand(Local_u8Adress+128);
    1510:	89 81       	ldd	r24, Y+1	; 0x01
    1512:	80 58       	subi	r24, 0x80	; 128
    1514:	0e 94 9b 05 	call	0xb36	; 0xb36 <C_LCD_voidSendCommand>



}
    1518:	0f 90       	pop	r0
    151a:	0f 90       	pop	r0
    151c:	0f 90       	pop	r0
    151e:	cf 91       	pop	r28
    1520:	df 91       	pop	r29
    1522:	08 95       	ret

00001524 <CLCD_voidWriteSpecialCharacter>:

void CLCD_voidWriteSpecialCharacter(u8* Copy_pu8Pattern, u8 Copy_u8PatternNumber, u8 Copy_u8XPos, u8 Copy_u8YPos)
{
    1524:	df 93       	push	r29
    1526:	cf 93       	push	r28
    1528:	cd b7       	in	r28, 0x3d	; 61
    152a:	de b7       	in	r29, 0x3e	; 62
    152c:	27 97       	sbiw	r28, 0x07	; 7
    152e:	0f b6       	in	r0, 0x3f	; 63
    1530:	f8 94       	cli
    1532:	de bf       	out	0x3e, r29	; 62
    1534:	0f be       	out	0x3f, r0	; 63
    1536:	cd bf       	out	0x3d, r28	; 61
    1538:	9c 83       	std	Y+4, r25	; 0x04
    153a:	8b 83       	std	Y+3, r24	; 0x03
    153c:	6d 83       	std	Y+5, r22	; 0x05
    153e:	4e 83       	std	Y+6, r20	; 0x06
    1540:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8CGRAMAddress= 0, Local_u8Iterator;
    1542:	1a 82       	std	Y+2, r1	; 0x02
	/* Calculate the CGRAM address whose each block is 8 bytes */
	Local_u8CGRAMAddress =Copy_u8PatternNumber*8;
    1544:	8d 81       	ldd	r24, Y+5	; 0x05
    1546:	88 2f       	mov	r24, r24
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	88 0f       	add	r24, r24
    154c:	99 1f       	adc	r25, r25
    154e:	88 0f       	add	r24, r24
    1550:	99 1f       	adc	r25, r25
    1552:	88 0f       	add	r24, r24
    1554:	99 1f       	adc	r25, r25
    1556:	8a 83       	std	Y+2, r24	; 0x02

	/* Send CGRAM Address command to LCD, with setting bit 6, clearing bit 7*/
	C_LCD_voidSendCommand(Local_u8CGRAMAddress+64);
    1558:	8a 81       	ldd	r24, Y+2	; 0x02
    155a:	80 5c       	subi	r24, 0xC0	; 192
    155c:	0e 94 9b 05 	call	0xb36	; 0xb36 <C_LCD_voidSendCommand>

	/* Write the pattern into CGRAM */

	for (Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++)
    1560:	19 82       	std	Y+1, r1	; 0x01
    1562:	0e c0       	rjmp	.+28     	; 0x1580 <CLCD_voidWriteSpecialCharacter+0x5c>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Iterator]);
    1564:	89 81       	ldd	r24, Y+1	; 0x01
    1566:	28 2f       	mov	r18, r24
    1568:	30 e0       	ldi	r19, 0x00	; 0
    156a:	8b 81       	ldd	r24, Y+3	; 0x03
    156c:	9c 81       	ldd	r25, Y+4	; 0x04
    156e:	fc 01       	movw	r30, r24
    1570:	e2 0f       	add	r30, r18
    1572:	f3 1f       	adc	r31, r19
    1574:	80 81       	ld	r24, Z
    1576:	0e 94 a6 07 	call	0xf4c	; 0xf4c <CLCD_voidSendData>
	/* Send CGRAM Address command to LCD, with setting bit 6, clearing bit 7*/
	C_LCD_voidSendCommand(Local_u8CGRAMAddress+64);

	/* Write the pattern into CGRAM */

	for (Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++)
    157a:	89 81       	ldd	r24, Y+1	; 0x01
    157c:	8f 5f       	subi	r24, 0xFF	; 255
    157e:	89 83       	std	Y+1, r24	; 0x01
    1580:	89 81       	ldd	r24, Y+1	; 0x01
    1582:	88 30       	cpi	r24, 0x08	; 8
    1584:	78 f3       	brcs	.-34     	; 0x1564 <CLCD_voidWriteSpecialCharacter+0x40>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Iterator]);
	}

	/* go back to the DDRAM to display the Pattern*/
	CLCD_voidGoToXY(Copy_u8XPos,Copy_u8YPos);
    1586:	8e 81       	ldd	r24, Y+6	; 0x06
    1588:	6f 81       	ldd	r22, Y+7	; 0x07
    158a:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <CLCD_voidGoToXY>
	/* Display the pattern written in the CGRAM*/
	CLCD_voidSendData(Copy_u8PatternNumber);
    158e:	8d 81       	ldd	r24, Y+5	; 0x05
    1590:	0e 94 a6 07 	call	0xf4c	; 0xf4c <CLCD_voidSendData>
}
    1594:	27 96       	adiw	r28, 0x07	; 7
    1596:	0f b6       	in	r0, 0x3f	; 63
    1598:	f8 94       	cli
    159a:	de bf       	out	0x3e, r29	; 62
    159c:	0f be       	out	0x3f, r0	; 63
    159e:	cd bf       	out	0x3d, r28	; 61
    15a0:	cf 91       	pop	r28
    15a2:	df 91       	pop	r29
    15a4:	08 95       	ret

000015a6 <main>:
#include "CLCD_interface.h"



void main (void)
{
    15a6:	df 93       	push	r29
    15a8:	cf 93       	push	r28
    15aa:	cd b7       	in	r28, 0x3d	; 61
    15ac:	de b7       	in	r29, 0x3e	; 62
    15ae:	ce 59       	subi	r28, 0x9E	; 158
    15b0:	d0 40       	sbci	r29, 0x00	; 0
    15b2:	0f b6       	in	r0, 0x3f	; 63
    15b4:	f8 94       	cli
    15b6:	de bf       	out	0x3e, r29	; 62
    15b8:	0f be       	out	0x3f, r0	; 63
    15ba:	cd bf       	out	0x3d, r28	; 61
	u8 arr1[8] ={0b00011000,0b00000000,0b00010010,0b00010010,0b00010011,0b00011110,0b00011110,0b00000000};
    15bc:	ce 01       	movw	r24, r28
    15be:	4d 96       	adiw	r24, 0x1d	; 29
    15c0:	af 96       	adiw	r28, 0x2f	; 47
    15c2:	9f af       	std	Y+63, r25	; 0x3f
    15c4:	8e af       	std	Y+62, r24	; 0x3e
    15c6:	af 97       	sbiw	r28, 0x2f	; 47
    15c8:	ea eb       	ldi	r30, 0xBA	; 186
    15ca:	f0 e0       	ldi	r31, 0x00	; 0
    15cc:	e1 96       	adiw	r28, 0x31	; 49
    15ce:	ff af       	std	Y+63, r31	; 0x3f
    15d0:	ee af       	std	Y+62, r30	; 0x3e
    15d2:	e1 97       	sbiw	r28, 0x31	; 49
    15d4:	f8 e0       	ldi	r31, 0x08	; 8
    15d6:	e2 96       	adiw	r28, 0x32	; 50
    15d8:	ff af       	std	Y+63, r31	; 0x3f
    15da:	e2 97       	sbiw	r28, 0x32	; 50
    15dc:	e1 96       	adiw	r28, 0x31	; 49
    15de:	ee ad       	ldd	r30, Y+62	; 0x3e
    15e0:	ff ad       	ldd	r31, Y+63	; 0x3f
    15e2:	e1 97       	sbiw	r28, 0x31	; 49
    15e4:	00 80       	ld	r0, Z
    15e6:	e1 96       	adiw	r28, 0x31	; 49
    15e8:	8e ad       	ldd	r24, Y+62	; 0x3e
    15ea:	9f ad       	ldd	r25, Y+63	; 0x3f
    15ec:	e1 97       	sbiw	r28, 0x31	; 49
    15ee:	01 96       	adiw	r24, 0x01	; 1
    15f0:	e1 96       	adiw	r28, 0x31	; 49
    15f2:	9f af       	std	Y+63, r25	; 0x3f
    15f4:	8e af       	std	Y+62, r24	; 0x3e
    15f6:	e1 97       	sbiw	r28, 0x31	; 49
    15f8:	af 96       	adiw	r28, 0x2f	; 47
    15fa:	ee ad       	ldd	r30, Y+62	; 0x3e
    15fc:	ff ad       	ldd	r31, Y+63	; 0x3f
    15fe:	af 97       	sbiw	r28, 0x2f	; 47
    1600:	00 82       	st	Z, r0
    1602:	af 96       	adiw	r28, 0x2f	; 47
    1604:	8e ad       	ldd	r24, Y+62	; 0x3e
    1606:	9f ad       	ldd	r25, Y+63	; 0x3f
    1608:	af 97       	sbiw	r28, 0x2f	; 47
    160a:	01 96       	adiw	r24, 0x01	; 1
    160c:	af 96       	adiw	r28, 0x2f	; 47
    160e:	9f af       	std	Y+63, r25	; 0x3f
    1610:	8e af       	std	Y+62, r24	; 0x3e
    1612:	af 97       	sbiw	r28, 0x2f	; 47
    1614:	e2 96       	adiw	r28, 0x32	; 50
    1616:	9f ad       	ldd	r25, Y+63	; 0x3f
    1618:	e2 97       	sbiw	r28, 0x32	; 50
    161a:	91 50       	subi	r25, 0x01	; 1
    161c:	e2 96       	adiw	r28, 0x32	; 50
    161e:	9f af       	std	Y+63, r25	; 0x3f
    1620:	e2 97       	sbiw	r28, 0x32	; 50
    1622:	e2 96       	adiw	r28, 0x32	; 50
    1624:	ef ad       	ldd	r30, Y+63	; 0x3f
    1626:	e2 97       	sbiw	r28, 0x32	; 50
    1628:	ee 23       	and	r30, r30
    162a:	c1 f6       	brne	.-80     	; 0x15dc <main+0x36>
	u8 arr2[8] ={0b00000000,0b00001010,0b00001010,0b00001010,0b00011111,0b00000000,0b00000000,0b00000000};
    162c:	ce 01       	movw	r24, r28
    162e:	85 96       	adiw	r24, 0x25	; 37
    1630:	e4 96       	adiw	r28, 0x34	; 52
    1632:	9f af       	std	Y+63, r25	; 0x3f
    1634:	8e af       	std	Y+62, r24	; 0x3e
    1636:	e4 97       	sbiw	r28, 0x34	; 52
    1638:	e2 eb       	ldi	r30, 0xB2	; 178
    163a:	f0 e0       	ldi	r31, 0x00	; 0
    163c:	e6 96       	adiw	r28, 0x36	; 54
    163e:	ff af       	std	Y+63, r31	; 0x3f
    1640:	ee af       	std	Y+62, r30	; 0x3e
    1642:	e6 97       	sbiw	r28, 0x36	; 54
    1644:	f8 e0       	ldi	r31, 0x08	; 8
    1646:	e7 96       	adiw	r28, 0x37	; 55
    1648:	ff af       	std	Y+63, r31	; 0x3f
    164a:	e7 97       	sbiw	r28, 0x37	; 55
    164c:	e6 96       	adiw	r28, 0x36	; 54
    164e:	ee ad       	ldd	r30, Y+62	; 0x3e
    1650:	ff ad       	ldd	r31, Y+63	; 0x3f
    1652:	e6 97       	sbiw	r28, 0x36	; 54
    1654:	00 80       	ld	r0, Z
    1656:	e6 96       	adiw	r28, 0x36	; 54
    1658:	8e ad       	ldd	r24, Y+62	; 0x3e
    165a:	9f ad       	ldd	r25, Y+63	; 0x3f
    165c:	e6 97       	sbiw	r28, 0x36	; 54
    165e:	01 96       	adiw	r24, 0x01	; 1
    1660:	e6 96       	adiw	r28, 0x36	; 54
    1662:	9f af       	std	Y+63, r25	; 0x3f
    1664:	8e af       	std	Y+62, r24	; 0x3e
    1666:	e6 97       	sbiw	r28, 0x36	; 54
    1668:	e4 96       	adiw	r28, 0x34	; 52
    166a:	ee ad       	ldd	r30, Y+62	; 0x3e
    166c:	ff ad       	ldd	r31, Y+63	; 0x3f
    166e:	e4 97       	sbiw	r28, 0x34	; 52
    1670:	00 82       	st	Z, r0
    1672:	e4 96       	adiw	r28, 0x34	; 52
    1674:	8e ad       	ldd	r24, Y+62	; 0x3e
    1676:	9f ad       	ldd	r25, Y+63	; 0x3f
    1678:	e4 97       	sbiw	r28, 0x34	; 52
    167a:	01 96       	adiw	r24, 0x01	; 1
    167c:	e4 96       	adiw	r28, 0x34	; 52
    167e:	9f af       	std	Y+63, r25	; 0x3f
    1680:	8e af       	std	Y+62, r24	; 0x3e
    1682:	e4 97       	sbiw	r28, 0x34	; 52
    1684:	e7 96       	adiw	r28, 0x37	; 55
    1686:	9f ad       	ldd	r25, Y+63	; 0x3f
    1688:	e7 97       	sbiw	r28, 0x37	; 55
    168a:	91 50       	subi	r25, 0x01	; 1
    168c:	e7 96       	adiw	r28, 0x37	; 55
    168e:	9f af       	std	Y+63, r25	; 0x3f
    1690:	e7 97       	sbiw	r28, 0x37	; 55
    1692:	e7 96       	adiw	r28, 0x37	; 55
    1694:	ef ad       	ldd	r30, Y+63	; 0x3f
    1696:	e7 97       	sbiw	r28, 0x37	; 55
    1698:	ee 23       	and	r30, r30
    169a:	c1 f6       	brne	.-80     	; 0x164c <main+0xa6>
	u8 arr3[8] ={0b00000111,0b00010001,0b00010001,0b00010001,0b00011111,0b00000000,0b00000000,0b00000000};
    169c:	ce 01       	movw	r24, r28
    169e:	8d 96       	adiw	r24, 0x2d	; 45
    16a0:	e9 96       	adiw	r28, 0x39	; 57
    16a2:	9f af       	std	Y+63, r25	; 0x3f
    16a4:	8e af       	std	Y+62, r24	; 0x3e
    16a6:	e9 97       	sbiw	r28, 0x39	; 57
    16a8:	ea ea       	ldi	r30, 0xAA	; 170
    16aa:	f0 e0       	ldi	r31, 0x00	; 0
    16ac:	eb 96       	adiw	r28, 0x3b	; 59
    16ae:	ff af       	std	Y+63, r31	; 0x3f
    16b0:	ee af       	std	Y+62, r30	; 0x3e
    16b2:	eb 97       	sbiw	r28, 0x3b	; 59
    16b4:	f8 e0       	ldi	r31, 0x08	; 8
    16b6:	ec 96       	adiw	r28, 0x3c	; 60
    16b8:	ff af       	std	Y+63, r31	; 0x3f
    16ba:	ec 97       	sbiw	r28, 0x3c	; 60
    16bc:	eb 96       	adiw	r28, 0x3b	; 59
    16be:	ee ad       	ldd	r30, Y+62	; 0x3e
    16c0:	ff ad       	ldd	r31, Y+63	; 0x3f
    16c2:	eb 97       	sbiw	r28, 0x3b	; 59
    16c4:	00 80       	ld	r0, Z
    16c6:	eb 96       	adiw	r28, 0x3b	; 59
    16c8:	8e ad       	ldd	r24, Y+62	; 0x3e
    16ca:	9f ad       	ldd	r25, Y+63	; 0x3f
    16cc:	eb 97       	sbiw	r28, 0x3b	; 59
    16ce:	01 96       	adiw	r24, 0x01	; 1
    16d0:	eb 96       	adiw	r28, 0x3b	; 59
    16d2:	9f af       	std	Y+63, r25	; 0x3f
    16d4:	8e af       	std	Y+62, r24	; 0x3e
    16d6:	eb 97       	sbiw	r28, 0x3b	; 59
    16d8:	e9 96       	adiw	r28, 0x39	; 57
    16da:	ee ad       	ldd	r30, Y+62	; 0x3e
    16dc:	ff ad       	ldd	r31, Y+63	; 0x3f
    16de:	e9 97       	sbiw	r28, 0x39	; 57
    16e0:	00 82       	st	Z, r0
    16e2:	e9 96       	adiw	r28, 0x39	; 57
    16e4:	8e ad       	ldd	r24, Y+62	; 0x3e
    16e6:	9f ad       	ldd	r25, Y+63	; 0x3f
    16e8:	e9 97       	sbiw	r28, 0x39	; 57
    16ea:	01 96       	adiw	r24, 0x01	; 1
    16ec:	e9 96       	adiw	r28, 0x39	; 57
    16ee:	9f af       	std	Y+63, r25	; 0x3f
    16f0:	8e af       	std	Y+62, r24	; 0x3e
    16f2:	e9 97       	sbiw	r28, 0x39	; 57
    16f4:	ec 96       	adiw	r28, 0x3c	; 60
    16f6:	9f ad       	ldd	r25, Y+63	; 0x3f
    16f8:	ec 97       	sbiw	r28, 0x3c	; 60
    16fa:	91 50       	subi	r25, 0x01	; 1
    16fc:	ec 96       	adiw	r28, 0x3c	; 60
    16fe:	9f af       	std	Y+63, r25	; 0x3f
    1700:	ec 97       	sbiw	r28, 0x3c	; 60
    1702:	ec 96       	adiw	r28, 0x3c	; 60
    1704:	ef ad       	ldd	r30, Y+63	; 0x3f
    1706:	ec 97       	sbiw	r28, 0x3c	; 60
    1708:	ee 23       	and	r30, r30
    170a:	c1 f6       	brne	.-80     	; 0x16bc <main+0x116>
	u8 arr4[8] ={0b00000100,0b00001010,0b00000100,0b00000100,0b00001110,0b00000100,0b00001010,0b00010100};
    170c:	ce 01       	movw	r24, r28
    170e:	c5 96       	adiw	r24, 0x35	; 53
    1710:	ee 96       	adiw	r28, 0x3e	; 62
    1712:	9f af       	std	Y+63, r25	; 0x3f
    1714:	8e af       	std	Y+62, r24	; 0x3e
    1716:	ee 97       	sbiw	r28, 0x3e	; 62
    1718:	e2 ea       	ldi	r30, 0xA2	; 162
    171a:	f0 e0       	ldi	r31, 0x00	; 0
    171c:	c2 58       	subi	r28, 0x82	; 130
    171e:	df 4f       	sbci	r29, 0xFF	; 255
    1720:	f9 83       	std	Y+1, r31	; 0x01
    1722:	e8 83       	st	Y, r30
    1724:	ce 57       	subi	r28, 0x7E	; 126
    1726:	d0 40       	sbci	r29, 0x00	; 0
    1728:	f8 e0       	ldi	r31, 0x08	; 8
    172a:	c0 58       	subi	r28, 0x80	; 128
    172c:	df 4f       	sbci	r29, 0xFF	; 255
    172e:	f8 83       	st	Y, r31
    1730:	c0 58       	subi	r28, 0x80	; 128
    1732:	d0 40       	sbci	r29, 0x00	; 0
    1734:	c2 58       	subi	r28, 0x82	; 130
    1736:	df 4f       	sbci	r29, 0xFF	; 255
    1738:	e8 81       	ld	r30, Y
    173a:	f9 81       	ldd	r31, Y+1	; 0x01
    173c:	ce 57       	subi	r28, 0x7E	; 126
    173e:	d0 40       	sbci	r29, 0x00	; 0
    1740:	00 80       	ld	r0, Z
    1742:	c2 58       	subi	r28, 0x82	; 130
    1744:	df 4f       	sbci	r29, 0xFF	; 255
    1746:	88 81       	ld	r24, Y
    1748:	99 81       	ldd	r25, Y+1	; 0x01
    174a:	ce 57       	subi	r28, 0x7E	; 126
    174c:	d0 40       	sbci	r29, 0x00	; 0
    174e:	01 96       	adiw	r24, 0x01	; 1
    1750:	c2 58       	subi	r28, 0x82	; 130
    1752:	df 4f       	sbci	r29, 0xFF	; 255
    1754:	99 83       	std	Y+1, r25	; 0x01
    1756:	88 83       	st	Y, r24
    1758:	ce 57       	subi	r28, 0x7E	; 126
    175a:	d0 40       	sbci	r29, 0x00	; 0
    175c:	ee 96       	adiw	r28, 0x3e	; 62
    175e:	ee ad       	ldd	r30, Y+62	; 0x3e
    1760:	ff ad       	ldd	r31, Y+63	; 0x3f
    1762:	ee 97       	sbiw	r28, 0x3e	; 62
    1764:	00 82       	st	Z, r0
    1766:	ee 96       	adiw	r28, 0x3e	; 62
    1768:	8e ad       	ldd	r24, Y+62	; 0x3e
    176a:	9f ad       	ldd	r25, Y+63	; 0x3f
    176c:	ee 97       	sbiw	r28, 0x3e	; 62
    176e:	01 96       	adiw	r24, 0x01	; 1
    1770:	ee 96       	adiw	r28, 0x3e	; 62
    1772:	9f af       	std	Y+63, r25	; 0x3f
    1774:	8e af       	std	Y+62, r24	; 0x3e
    1776:	ee 97       	sbiw	r28, 0x3e	; 62
    1778:	c0 58       	subi	r28, 0x80	; 128
    177a:	df 4f       	sbci	r29, 0xFF	; 255
    177c:	98 81       	ld	r25, Y
    177e:	c0 58       	subi	r28, 0x80	; 128
    1780:	d0 40       	sbci	r29, 0x00	; 0
    1782:	91 50       	subi	r25, 0x01	; 1
    1784:	c0 58       	subi	r28, 0x80	; 128
    1786:	df 4f       	sbci	r29, 0xFF	; 255
    1788:	98 83       	st	Y, r25
    178a:	c0 58       	subi	r28, 0x80	; 128
    178c:	d0 40       	sbci	r29, 0x00	; 0
    178e:	c0 58       	subi	r28, 0x80	; 128
    1790:	df 4f       	sbci	r29, 0xFF	; 255
    1792:	e8 81       	ld	r30, Y
    1794:	c0 58       	subi	r28, 0x80	; 128
    1796:	d0 40       	sbci	r29, 0x00	; 0
    1798:	ee 23       	and	r30, r30
    179a:	61 f6       	brne	.-104    	; 0x1734 <main+0x18e>
	u8 arr5[8] ={0b00000100,0b00001010,0b00000100,0b00000100,0b00001110,0b00000100,0b00001010,0b00010100};
    179c:	ce 01       	movw	r24, r28
    179e:	cd 96       	adiw	r24, 0x3d	; 61
    17a0:	cf 57       	subi	r28, 0x7F	; 127
    17a2:	df 4f       	sbci	r29, 0xFF	; 255
    17a4:	99 83       	std	Y+1, r25	; 0x01
    17a6:	88 83       	st	Y, r24
    17a8:	c1 58       	subi	r28, 0x81	; 129
    17aa:	d0 40       	sbci	r29, 0x00	; 0
    17ac:	ea e9       	ldi	r30, 0x9A	; 154
    17ae:	f0 e0       	ldi	r31, 0x00	; 0
    17b0:	cd 57       	subi	r28, 0x7D	; 125
    17b2:	df 4f       	sbci	r29, 0xFF	; 255
    17b4:	f9 83       	std	Y+1, r31	; 0x01
    17b6:	e8 83       	st	Y, r30
    17b8:	c3 58       	subi	r28, 0x83	; 131
    17ba:	d0 40       	sbci	r29, 0x00	; 0
    17bc:	f8 e0       	ldi	r31, 0x08	; 8
    17be:	cb 57       	subi	r28, 0x7B	; 123
    17c0:	df 4f       	sbci	r29, 0xFF	; 255
    17c2:	f8 83       	st	Y, r31
    17c4:	c5 58       	subi	r28, 0x85	; 133
    17c6:	d0 40       	sbci	r29, 0x00	; 0
    17c8:	cd 57       	subi	r28, 0x7D	; 125
    17ca:	df 4f       	sbci	r29, 0xFF	; 255
    17cc:	e8 81       	ld	r30, Y
    17ce:	f9 81       	ldd	r31, Y+1	; 0x01
    17d0:	c3 58       	subi	r28, 0x83	; 131
    17d2:	d0 40       	sbci	r29, 0x00	; 0
    17d4:	00 80       	ld	r0, Z
    17d6:	cd 57       	subi	r28, 0x7D	; 125
    17d8:	df 4f       	sbci	r29, 0xFF	; 255
    17da:	88 81       	ld	r24, Y
    17dc:	99 81       	ldd	r25, Y+1	; 0x01
    17de:	c3 58       	subi	r28, 0x83	; 131
    17e0:	d0 40       	sbci	r29, 0x00	; 0
    17e2:	01 96       	adiw	r24, 0x01	; 1
    17e4:	cd 57       	subi	r28, 0x7D	; 125
    17e6:	df 4f       	sbci	r29, 0xFF	; 255
    17e8:	99 83       	std	Y+1, r25	; 0x01
    17ea:	88 83       	st	Y, r24
    17ec:	c3 58       	subi	r28, 0x83	; 131
    17ee:	d0 40       	sbci	r29, 0x00	; 0
    17f0:	cf 57       	subi	r28, 0x7F	; 127
    17f2:	df 4f       	sbci	r29, 0xFF	; 255
    17f4:	e8 81       	ld	r30, Y
    17f6:	f9 81       	ldd	r31, Y+1	; 0x01
    17f8:	c1 58       	subi	r28, 0x81	; 129
    17fa:	d0 40       	sbci	r29, 0x00	; 0
    17fc:	00 82       	st	Z, r0
    17fe:	cf 57       	subi	r28, 0x7F	; 127
    1800:	df 4f       	sbci	r29, 0xFF	; 255
    1802:	88 81       	ld	r24, Y
    1804:	99 81       	ldd	r25, Y+1	; 0x01
    1806:	c1 58       	subi	r28, 0x81	; 129
    1808:	d0 40       	sbci	r29, 0x00	; 0
    180a:	01 96       	adiw	r24, 0x01	; 1
    180c:	cf 57       	subi	r28, 0x7F	; 127
    180e:	df 4f       	sbci	r29, 0xFF	; 255
    1810:	99 83       	std	Y+1, r25	; 0x01
    1812:	88 83       	st	Y, r24
    1814:	c1 58       	subi	r28, 0x81	; 129
    1816:	d0 40       	sbci	r29, 0x00	; 0
    1818:	cb 57       	subi	r28, 0x7B	; 123
    181a:	df 4f       	sbci	r29, 0xFF	; 255
    181c:	98 81       	ld	r25, Y
    181e:	c5 58       	subi	r28, 0x85	; 133
    1820:	d0 40       	sbci	r29, 0x00	; 0
    1822:	91 50       	subi	r25, 0x01	; 1
    1824:	cb 57       	subi	r28, 0x7B	; 123
    1826:	df 4f       	sbci	r29, 0xFF	; 255
    1828:	98 83       	st	Y, r25
    182a:	c5 58       	subi	r28, 0x85	; 133
    182c:	d0 40       	sbci	r29, 0x00	; 0
    182e:	cb 57       	subi	r28, 0x7B	; 123
    1830:	df 4f       	sbci	r29, 0xFF	; 255
    1832:	e8 81       	ld	r30, Y
    1834:	c5 58       	subi	r28, 0x85	; 133
    1836:	d0 40       	sbci	r29, 0x00	; 0
    1838:	ee 23       	and	r30, r30
    183a:	31 f6       	brne	.-116    	; 0x17c8 <main+0x222>

	u8 shape1[8] ={0b00001110,0b00010001,0b00010001,0b00010001,0b00001110,0b00000100,0b00000100,0b00000100};
    183c:	ce 01       	movw	r24, r28
    183e:	8b 5b       	subi	r24, 0xBB	; 187
    1840:	9f 4f       	sbci	r25, 0xFF	; 255
    1842:	ca 57       	subi	r28, 0x7A	; 122
    1844:	df 4f       	sbci	r29, 0xFF	; 255
    1846:	99 83       	std	Y+1, r25	; 0x01
    1848:	88 83       	st	Y, r24
    184a:	c6 58       	subi	r28, 0x86	; 134
    184c:	d0 40       	sbci	r29, 0x00	; 0
    184e:	82 e9       	ldi	r24, 0x92	; 146
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	c8 57       	subi	r28, 0x78	; 120
    1854:	df 4f       	sbci	r29, 0xFF	; 255
    1856:	99 83       	std	Y+1, r25	; 0x01
    1858:	88 83       	st	Y, r24
    185a:	c8 58       	subi	r28, 0x88	; 136
    185c:	d0 40       	sbci	r29, 0x00	; 0
    185e:	98 e0       	ldi	r25, 0x08	; 8
    1860:	c6 57       	subi	r28, 0x76	; 118
    1862:	df 4f       	sbci	r29, 0xFF	; 255
    1864:	98 83       	st	Y, r25
    1866:	ca 58       	subi	r28, 0x8A	; 138
    1868:	d0 40       	sbci	r29, 0x00	; 0
    186a:	c8 57       	subi	r28, 0x78	; 120
    186c:	df 4f       	sbci	r29, 0xFF	; 255
    186e:	e8 81       	ld	r30, Y
    1870:	f9 81       	ldd	r31, Y+1	; 0x01
    1872:	c8 58       	subi	r28, 0x88	; 136
    1874:	d0 40       	sbci	r29, 0x00	; 0
    1876:	00 80       	ld	r0, Z
    1878:	c8 57       	subi	r28, 0x78	; 120
    187a:	df 4f       	sbci	r29, 0xFF	; 255
    187c:	88 81       	ld	r24, Y
    187e:	99 81       	ldd	r25, Y+1	; 0x01
    1880:	c8 58       	subi	r28, 0x88	; 136
    1882:	d0 40       	sbci	r29, 0x00	; 0
    1884:	01 96       	adiw	r24, 0x01	; 1
    1886:	c8 57       	subi	r28, 0x78	; 120
    1888:	df 4f       	sbci	r29, 0xFF	; 255
    188a:	99 83       	std	Y+1, r25	; 0x01
    188c:	88 83       	st	Y, r24
    188e:	c8 58       	subi	r28, 0x88	; 136
    1890:	d0 40       	sbci	r29, 0x00	; 0
    1892:	ca 57       	subi	r28, 0x7A	; 122
    1894:	df 4f       	sbci	r29, 0xFF	; 255
    1896:	e8 81       	ld	r30, Y
    1898:	f9 81       	ldd	r31, Y+1	; 0x01
    189a:	c6 58       	subi	r28, 0x86	; 134
    189c:	d0 40       	sbci	r29, 0x00	; 0
    189e:	00 82       	st	Z, r0
    18a0:	ca 57       	subi	r28, 0x7A	; 122
    18a2:	df 4f       	sbci	r29, 0xFF	; 255
    18a4:	88 81       	ld	r24, Y
    18a6:	99 81       	ldd	r25, Y+1	; 0x01
    18a8:	c6 58       	subi	r28, 0x86	; 134
    18aa:	d0 40       	sbci	r29, 0x00	; 0
    18ac:	01 96       	adiw	r24, 0x01	; 1
    18ae:	ca 57       	subi	r28, 0x7A	; 122
    18b0:	df 4f       	sbci	r29, 0xFF	; 255
    18b2:	99 83       	std	Y+1, r25	; 0x01
    18b4:	88 83       	st	Y, r24
    18b6:	c6 58       	subi	r28, 0x86	; 134
    18b8:	d0 40       	sbci	r29, 0x00	; 0
    18ba:	c6 57       	subi	r28, 0x76	; 118
    18bc:	df 4f       	sbci	r29, 0xFF	; 255
    18be:	98 81       	ld	r25, Y
    18c0:	ca 58       	subi	r28, 0x8A	; 138
    18c2:	d0 40       	sbci	r29, 0x00	; 0
    18c4:	91 50       	subi	r25, 0x01	; 1
    18c6:	c6 57       	subi	r28, 0x76	; 118
    18c8:	df 4f       	sbci	r29, 0xFF	; 255
    18ca:	98 83       	st	Y, r25
    18cc:	ca 58       	subi	r28, 0x8A	; 138
    18ce:	d0 40       	sbci	r29, 0x00	; 0
    18d0:	c6 57       	subi	r28, 0x76	; 118
    18d2:	df 4f       	sbci	r29, 0xFF	; 255
    18d4:	e8 81       	ld	r30, Y
    18d6:	ca 58       	subi	r28, 0x8A	; 138
    18d8:	d0 40       	sbci	r29, 0x00	; 0
    18da:	ee 23       	and	r30, r30
    18dc:	31 f6       	brne	.-116    	; 0x186a <main+0x2c4>
	u8 shape2[8] ={0b00011111,0b00000100,0b00000100,0b00000100,0b00000100,0b00001010,0b00010001,0b00000100};
    18de:	ce 01       	movw	r24, r28
    18e0:	83 5b       	subi	r24, 0xB3	; 179
    18e2:	9f 4f       	sbci	r25, 0xFF	; 255
    18e4:	c5 57       	subi	r28, 0x75	; 117
    18e6:	df 4f       	sbci	r29, 0xFF	; 255
    18e8:	99 83       	std	Y+1, r25	; 0x01
    18ea:	88 83       	st	Y, r24
    18ec:	cb 58       	subi	r28, 0x8B	; 139
    18ee:	d0 40       	sbci	r29, 0x00	; 0
    18f0:	8a e8       	ldi	r24, 0x8A	; 138
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	c3 57       	subi	r28, 0x73	; 115
    18f6:	df 4f       	sbci	r29, 0xFF	; 255
    18f8:	99 83       	std	Y+1, r25	; 0x01
    18fa:	88 83       	st	Y, r24
    18fc:	cd 58       	subi	r28, 0x8D	; 141
    18fe:	d0 40       	sbci	r29, 0x00	; 0
    1900:	98 e0       	ldi	r25, 0x08	; 8
    1902:	c1 57       	subi	r28, 0x71	; 113
    1904:	df 4f       	sbci	r29, 0xFF	; 255
    1906:	98 83       	st	Y, r25
    1908:	cf 58       	subi	r28, 0x8F	; 143
    190a:	d0 40       	sbci	r29, 0x00	; 0
    190c:	c3 57       	subi	r28, 0x73	; 115
    190e:	df 4f       	sbci	r29, 0xFF	; 255
    1910:	e8 81       	ld	r30, Y
    1912:	f9 81       	ldd	r31, Y+1	; 0x01
    1914:	cd 58       	subi	r28, 0x8D	; 141
    1916:	d0 40       	sbci	r29, 0x00	; 0
    1918:	00 80       	ld	r0, Z
    191a:	c3 57       	subi	r28, 0x73	; 115
    191c:	df 4f       	sbci	r29, 0xFF	; 255
    191e:	88 81       	ld	r24, Y
    1920:	99 81       	ldd	r25, Y+1	; 0x01
    1922:	cd 58       	subi	r28, 0x8D	; 141
    1924:	d0 40       	sbci	r29, 0x00	; 0
    1926:	01 96       	adiw	r24, 0x01	; 1
    1928:	c3 57       	subi	r28, 0x73	; 115
    192a:	df 4f       	sbci	r29, 0xFF	; 255
    192c:	99 83       	std	Y+1, r25	; 0x01
    192e:	88 83       	st	Y, r24
    1930:	cd 58       	subi	r28, 0x8D	; 141
    1932:	d0 40       	sbci	r29, 0x00	; 0
    1934:	c5 57       	subi	r28, 0x75	; 117
    1936:	df 4f       	sbci	r29, 0xFF	; 255
    1938:	e8 81       	ld	r30, Y
    193a:	f9 81       	ldd	r31, Y+1	; 0x01
    193c:	cb 58       	subi	r28, 0x8B	; 139
    193e:	d0 40       	sbci	r29, 0x00	; 0
    1940:	00 82       	st	Z, r0
    1942:	c5 57       	subi	r28, 0x75	; 117
    1944:	df 4f       	sbci	r29, 0xFF	; 255
    1946:	88 81       	ld	r24, Y
    1948:	99 81       	ldd	r25, Y+1	; 0x01
    194a:	cb 58       	subi	r28, 0x8B	; 139
    194c:	d0 40       	sbci	r29, 0x00	; 0
    194e:	01 96       	adiw	r24, 0x01	; 1
    1950:	c5 57       	subi	r28, 0x75	; 117
    1952:	df 4f       	sbci	r29, 0xFF	; 255
    1954:	99 83       	std	Y+1, r25	; 0x01
    1956:	88 83       	st	Y, r24
    1958:	cb 58       	subi	r28, 0x8B	; 139
    195a:	d0 40       	sbci	r29, 0x00	; 0
    195c:	c1 57       	subi	r28, 0x71	; 113
    195e:	df 4f       	sbci	r29, 0xFF	; 255
    1960:	98 81       	ld	r25, Y
    1962:	cf 58       	subi	r28, 0x8F	; 143
    1964:	d0 40       	sbci	r29, 0x00	; 0
    1966:	91 50       	subi	r25, 0x01	; 1
    1968:	c1 57       	subi	r28, 0x71	; 113
    196a:	df 4f       	sbci	r29, 0xFF	; 255
    196c:	98 83       	st	Y, r25
    196e:	cf 58       	subi	r28, 0x8F	; 143
    1970:	d0 40       	sbci	r29, 0x00	; 0
    1972:	c1 57       	subi	r28, 0x71	; 113
    1974:	df 4f       	sbci	r29, 0xFF	; 255
    1976:	e8 81       	ld	r30, Y
    1978:	cf 58       	subi	r28, 0x8F	; 143
    197a:	d0 40       	sbci	r29, 0x00	; 0
    197c:	ee 23       	and	r30, r30
    197e:	31 f6       	brne	.-116    	; 0x190c <main+0x366>
	u8 shape3[8] ={0b00000111,0b00001100,0b00010100,0b00000100,0b00000100,0b00001010,0b00010001,0b00000100};
    1980:	ce 01       	movw	r24, r28
    1982:	8b 5a       	subi	r24, 0xAB	; 171
    1984:	9f 4f       	sbci	r25, 0xFF	; 255
    1986:	c0 57       	subi	r28, 0x70	; 112
    1988:	df 4f       	sbci	r29, 0xFF	; 255
    198a:	99 83       	std	Y+1, r25	; 0x01
    198c:	88 83       	st	Y, r24
    198e:	c0 59       	subi	r28, 0x90	; 144
    1990:	d0 40       	sbci	r29, 0x00	; 0
    1992:	82 e8       	ldi	r24, 0x82	; 130
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	ce 56       	subi	r28, 0x6E	; 110
    1998:	df 4f       	sbci	r29, 0xFF	; 255
    199a:	99 83       	std	Y+1, r25	; 0x01
    199c:	88 83       	st	Y, r24
    199e:	c2 59       	subi	r28, 0x92	; 146
    19a0:	d0 40       	sbci	r29, 0x00	; 0
    19a2:	98 e0       	ldi	r25, 0x08	; 8
    19a4:	cc 56       	subi	r28, 0x6C	; 108
    19a6:	df 4f       	sbci	r29, 0xFF	; 255
    19a8:	98 83       	st	Y, r25
    19aa:	c4 59       	subi	r28, 0x94	; 148
    19ac:	d0 40       	sbci	r29, 0x00	; 0
    19ae:	ce 56       	subi	r28, 0x6E	; 110
    19b0:	df 4f       	sbci	r29, 0xFF	; 255
    19b2:	e8 81       	ld	r30, Y
    19b4:	f9 81       	ldd	r31, Y+1	; 0x01
    19b6:	c2 59       	subi	r28, 0x92	; 146
    19b8:	d0 40       	sbci	r29, 0x00	; 0
    19ba:	00 80       	ld	r0, Z
    19bc:	ce 56       	subi	r28, 0x6E	; 110
    19be:	df 4f       	sbci	r29, 0xFF	; 255
    19c0:	88 81       	ld	r24, Y
    19c2:	99 81       	ldd	r25, Y+1	; 0x01
    19c4:	c2 59       	subi	r28, 0x92	; 146
    19c6:	d0 40       	sbci	r29, 0x00	; 0
    19c8:	01 96       	adiw	r24, 0x01	; 1
    19ca:	ce 56       	subi	r28, 0x6E	; 110
    19cc:	df 4f       	sbci	r29, 0xFF	; 255
    19ce:	99 83       	std	Y+1, r25	; 0x01
    19d0:	88 83       	st	Y, r24
    19d2:	c2 59       	subi	r28, 0x92	; 146
    19d4:	d0 40       	sbci	r29, 0x00	; 0
    19d6:	c0 57       	subi	r28, 0x70	; 112
    19d8:	df 4f       	sbci	r29, 0xFF	; 255
    19da:	e8 81       	ld	r30, Y
    19dc:	f9 81       	ldd	r31, Y+1	; 0x01
    19de:	c0 59       	subi	r28, 0x90	; 144
    19e0:	d0 40       	sbci	r29, 0x00	; 0
    19e2:	00 82       	st	Z, r0
    19e4:	c0 57       	subi	r28, 0x70	; 112
    19e6:	df 4f       	sbci	r29, 0xFF	; 255
    19e8:	88 81       	ld	r24, Y
    19ea:	99 81       	ldd	r25, Y+1	; 0x01
    19ec:	c0 59       	subi	r28, 0x90	; 144
    19ee:	d0 40       	sbci	r29, 0x00	; 0
    19f0:	01 96       	adiw	r24, 0x01	; 1
    19f2:	c0 57       	subi	r28, 0x70	; 112
    19f4:	df 4f       	sbci	r29, 0xFF	; 255
    19f6:	99 83       	std	Y+1, r25	; 0x01
    19f8:	88 83       	st	Y, r24
    19fa:	c0 59       	subi	r28, 0x90	; 144
    19fc:	d0 40       	sbci	r29, 0x00	; 0
    19fe:	cc 56       	subi	r28, 0x6C	; 108
    1a00:	df 4f       	sbci	r29, 0xFF	; 255
    1a02:	98 81       	ld	r25, Y
    1a04:	c4 59       	subi	r28, 0x94	; 148
    1a06:	d0 40       	sbci	r29, 0x00	; 0
    1a08:	91 50       	subi	r25, 0x01	; 1
    1a0a:	cc 56       	subi	r28, 0x6C	; 108
    1a0c:	df 4f       	sbci	r29, 0xFF	; 255
    1a0e:	98 83       	st	Y, r25
    1a10:	c4 59       	subi	r28, 0x94	; 148
    1a12:	d0 40       	sbci	r29, 0x00	; 0
    1a14:	cc 56       	subi	r28, 0x6C	; 108
    1a16:	df 4f       	sbci	r29, 0xFF	; 255
    1a18:	e8 81       	ld	r30, Y
    1a1a:	c4 59       	subi	r28, 0x94	; 148
    1a1c:	d0 40       	sbci	r29, 0x00	; 0
    1a1e:	ee 23       	and	r30, r30
    1a20:	31 f6       	brne	.-116    	; 0x19ae <main+0x408>
	u8 ballup[8] ={0b00000000,0b00001110,0b00010001,0b00010001,0b00001110,0b00000000,0b00000000,0b00000000};
    1a22:	ce 01       	movw	r24, r28
    1a24:	83 5a       	subi	r24, 0xA3	; 163
    1a26:	9f 4f       	sbci	r25, 0xFF	; 255
    1a28:	cb 56       	subi	r28, 0x6B	; 107
    1a2a:	df 4f       	sbci	r29, 0xFF	; 255
    1a2c:	99 83       	std	Y+1, r25	; 0x01
    1a2e:	88 83       	st	Y, r24
    1a30:	c5 59       	subi	r28, 0x95	; 149
    1a32:	d0 40       	sbci	r29, 0x00	; 0
    1a34:	8a e7       	ldi	r24, 0x7A	; 122
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	c9 56       	subi	r28, 0x69	; 105
    1a3a:	df 4f       	sbci	r29, 0xFF	; 255
    1a3c:	99 83       	std	Y+1, r25	; 0x01
    1a3e:	88 83       	st	Y, r24
    1a40:	c7 59       	subi	r28, 0x97	; 151
    1a42:	d0 40       	sbci	r29, 0x00	; 0
    1a44:	98 e0       	ldi	r25, 0x08	; 8
    1a46:	c7 56       	subi	r28, 0x67	; 103
    1a48:	df 4f       	sbci	r29, 0xFF	; 255
    1a4a:	98 83       	st	Y, r25
    1a4c:	c9 59       	subi	r28, 0x99	; 153
    1a4e:	d0 40       	sbci	r29, 0x00	; 0
    1a50:	c9 56       	subi	r28, 0x69	; 105
    1a52:	df 4f       	sbci	r29, 0xFF	; 255
    1a54:	e8 81       	ld	r30, Y
    1a56:	f9 81       	ldd	r31, Y+1	; 0x01
    1a58:	c7 59       	subi	r28, 0x97	; 151
    1a5a:	d0 40       	sbci	r29, 0x00	; 0
    1a5c:	00 80       	ld	r0, Z
    1a5e:	c9 56       	subi	r28, 0x69	; 105
    1a60:	df 4f       	sbci	r29, 0xFF	; 255
    1a62:	88 81       	ld	r24, Y
    1a64:	99 81       	ldd	r25, Y+1	; 0x01
    1a66:	c7 59       	subi	r28, 0x97	; 151
    1a68:	d0 40       	sbci	r29, 0x00	; 0
    1a6a:	01 96       	adiw	r24, 0x01	; 1
    1a6c:	c9 56       	subi	r28, 0x69	; 105
    1a6e:	df 4f       	sbci	r29, 0xFF	; 255
    1a70:	99 83       	std	Y+1, r25	; 0x01
    1a72:	88 83       	st	Y, r24
    1a74:	c7 59       	subi	r28, 0x97	; 151
    1a76:	d0 40       	sbci	r29, 0x00	; 0
    1a78:	cb 56       	subi	r28, 0x6B	; 107
    1a7a:	df 4f       	sbci	r29, 0xFF	; 255
    1a7c:	e8 81       	ld	r30, Y
    1a7e:	f9 81       	ldd	r31, Y+1	; 0x01
    1a80:	c5 59       	subi	r28, 0x95	; 149
    1a82:	d0 40       	sbci	r29, 0x00	; 0
    1a84:	00 82       	st	Z, r0
    1a86:	cb 56       	subi	r28, 0x6B	; 107
    1a88:	df 4f       	sbci	r29, 0xFF	; 255
    1a8a:	88 81       	ld	r24, Y
    1a8c:	99 81       	ldd	r25, Y+1	; 0x01
    1a8e:	c5 59       	subi	r28, 0x95	; 149
    1a90:	d0 40       	sbci	r29, 0x00	; 0
    1a92:	01 96       	adiw	r24, 0x01	; 1
    1a94:	cb 56       	subi	r28, 0x6B	; 107
    1a96:	df 4f       	sbci	r29, 0xFF	; 255
    1a98:	99 83       	std	Y+1, r25	; 0x01
    1a9a:	88 83       	st	Y, r24
    1a9c:	c5 59       	subi	r28, 0x95	; 149
    1a9e:	d0 40       	sbci	r29, 0x00	; 0
    1aa0:	c7 56       	subi	r28, 0x67	; 103
    1aa2:	df 4f       	sbci	r29, 0xFF	; 255
    1aa4:	98 81       	ld	r25, Y
    1aa6:	c9 59       	subi	r28, 0x99	; 153
    1aa8:	d0 40       	sbci	r29, 0x00	; 0
    1aaa:	91 50       	subi	r25, 0x01	; 1
    1aac:	c7 56       	subi	r28, 0x67	; 103
    1aae:	df 4f       	sbci	r29, 0xFF	; 255
    1ab0:	98 83       	st	Y, r25
    1ab2:	c9 59       	subi	r28, 0x99	; 153
    1ab4:	d0 40       	sbci	r29, 0x00	; 0
    1ab6:	c7 56       	subi	r28, 0x67	; 103
    1ab8:	df 4f       	sbci	r29, 0xFF	; 255
    1aba:	e8 81       	ld	r30, Y
    1abc:	c9 59       	subi	r28, 0x99	; 153
    1abe:	d0 40       	sbci	r29, 0x00	; 0
    1ac0:	ee 23       	and	r30, r30
    1ac2:	31 f6       	brne	.-116    	; 0x1a50 <main+0x4aa>
	u8 balldown[8] ={0b00000000,0b00000000,0b00000000,0b00001110,0b00010001,0b00010001,0b00001110,0b00000000};
    1ac4:	ce 01       	movw	r24, r28
    1ac6:	8b 59       	subi	r24, 0x9B	; 155
    1ac8:	9f 4f       	sbci	r25, 0xFF	; 255
    1aca:	c6 56       	subi	r28, 0x66	; 102
    1acc:	df 4f       	sbci	r29, 0xFF	; 255
    1ace:	99 83       	std	Y+1, r25	; 0x01
    1ad0:	88 83       	st	Y, r24
    1ad2:	ca 59       	subi	r28, 0x9A	; 154
    1ad4:	d0 40       	sbci	r29, 0x00	; 0
    1ad6:	82 e7       	ldi	r24, 0x72	; 114
    1ad8:	90 e0       	ldi	r25, 0x00	; 0
    1ada:	c4 56       	subi	r28, 0x64	; 100
    1adc:	df 4f       	sbci	r29, 0xFF	; 255
    1ade:	99 83       	std	Y+1, r25	; 0x01
    1ae0:	88 83       	st	Y, r24
    1ae2:	cc 59       	subi	r28, 0x9C	; 156
    1ae4:	d0 40       	sbci	r29, 0x00	; 0
    1ae6:	98 e0       	ldi	r25, 0x08	; 8
    1ae8:	c2 56       	subi	r28, 0x62	; 98
    1aea:	df 4f       	sbci	r29, 0xFF	; 255
    1aec:	98 83       	st	Y, r25
    1aee:	ce 59       	subi	r28, 0x9E	; 158
    1af0:	d0 40       	sbci	r29, 0x00	; 0
    1af2:	c4 56       	subi	r28, 0x64	; 100
    1af4:	df 4f       	sbci	r29, 0xFF	; 255
    1af6:	e8 81       	ld	r30, Y
    1af8:	f9 81       	ldd	r31, Y+1	; 0x01
    1afa:	cc 59       	subi	r28, 0x9C	; 156
    1afc:	d0 40       	sbci	r29, 0x00	; 0
    1afe:	00 80       	ld	r0, Z
    1b00:	c4 56       	subi	r28, 0x64	; 100
    1b02:	df 4f       	sbci	r29, 0xFF	; 255
    1b04:	88 81       	ld	r24, Y
    1b06:	99 81       	ldd	r25, Y+1	; 0x01
    1b08:	cc 59       	subi	r28, 0x9C	; 156
    1b0a:	d0 40       	sbci	r29, 0x00	; 0
    1b0c:	01 96       	adiw	r24, 0x01	; 1
    1b0e:	c4 56       	subi	r28, 0x64	; 100
    1b10:	df 4f       	sbci	r29, 0xFF	; 255
    1b12:	99 83       	std	Y+1, r25	; 0x01
    1b14:	88 83       	st	Y, r24
    1b16:	cc 59       	subi	r28, 0x9C	; 156
    1b18:	d0 40       	sbci	r29, 0x00	; 0
    1b1a:	c6 56       	subi	r28, 0x66	; 102
    1b1c:	df 4f       	sbci	r29, 0xFF	; 255
    1b1e:	e8 81       	ld	r30, Y
    1b20:	f9 81       	ldd	r31, Y+1	; 0x01
    1b22:	ca 59       	subi	r28, 0x9A	; 154
    1b24:	d0 40       	sbci	r29, 0x00	; 0
    1b26:	00 82       	st	Z, r0
    1b28:	c6 56       	subi	r28, 0x66	; 102
    1b2a:	df 4f       	sbci	r29, 0xFF	; 255
    1b2c:	88 81       	ld	r24, Y
    1b2e:	99 81       	ldd	r25, Y+1	; 0x01
    1b30:	ca 59       	subi	r28, 0x9A	; 154
    1b32:	d0 40       	sbci	r29, 0x00	; 0
    1b34:	01 96       	adiw	r24, 0x01	; 1
    1b36:	c6 56       	subi	r28, 0x66	; 102
    1b38:	df 4f       	sbci	r29, 0xFF	; 255
    1b3a:	99 83       	std	Y+1, r25	; 0x01
    1b3c:	88 83       	st	Y, r24
    1b3e:	ca 59       	subi	r28, 0x9A	; 154
    1b40:	d0 40       	sbci	r29, 0x00	; 0
    1b42:	c2 56       	subi	r28, 0x62	; 98
    1b44:	df 4f       	sbci	r29, 0xFF	; 255
    1b46:	98 81       	ld	r25, Y
    1b48:	ce 59       	subi	r28, 0x9E	; 158
    1b4a:	d0 40       	sbci	r29, 0x00	; 0
    1b4c:	91 50       	subi	r25, 0x01	; 1
    1b4e:	c2 56       	subi	r28, 0x62	; 98
    1b50:	df 4f       	sbci	r29, 0xFF	; 255
    1b52:	98 83       	st	Y, r25
    1b54:	ce 59       	subi	r28, 0x9E	; 158
    1b56:	d0 40       	sbci	r29, 0x00	; 0
    1b58:	c2 56       	subi	r28, 0x62	; 98
    1b5a:	df 4f       	sbci	r29, 0xFF	; 255
    1b5c:	e8 81       	ld	r30, Y
    1b5e:	ce 59       	subi	r28, 0x9E	; 158
    1b60:	d0 40       	sbci	r29, 0x00	; 0
    1b62:	ee 23       	and	r30, r30
    1b64:	31 f6       	brne	.-116    	; 0x1af2 <main+0x54c>


	/* Set Direction */

	DIO_u8SetPortDirection(DIO_u8PORTA,DIO_u8PORT_OUTPUT);
    1b66:	80 e0       	ldi	r24, 0x00	; 0
    1b68:	6f ef       	ldi	r22, 0xFF	; 255
    1b6a:	0e 94 02 10 	call	0x2004	; 0x2004 <DIO_u8SetPortDirection>
	DIO_u8SetPinDirection(DIO_u8PORTB,DIO_u8PIN0,DIO_u8PIN_OUTPUT);
    1b6e:	81 e0       	ldi	r24, 0x01	; 1
    1b70:	60 e0       	ldi	r22, 0x00	; 0
    1b72:	41 e0       	ldi	r20, 0x01	; 1
    1b74:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTB,DIO_u8PIN1,DIO_u8PIN_OUTPUT);
    1b78:	81 e0       	ldi	r24, 0x01	; 1
    1b7a:	61 e0       	ldi	r22, 0x01	; 1
    1b7c:	41 e0       	ldi	r20, 0x01	; 1
    1b7e:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTB,DIO_u8PIN2,DIO_u8PIN_OUTPUT);
    1b82:	81 e0       	ldi	r24, 0x01	; 1
    1b84:	62 e0       	ldi	r22, 0x02	; 2
    1b86:	41 e0       	ldi	r20, 0x01	; 1
    1b88:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <DIO_u8SetPinDirection>

	CLCD_voidInit();
    1b8c:	0e 94 b1 09 	call	0x1362	; 0x1362 <CLCD_voidInit>
//	CLCD_voidSendData('A');
//	CLCD_voidSendData('S');
//	CLCD_voidSendData('S');
//	CLCD_voidSendData('A');
//	CLCD_voidSendData('N');
	CLCD_voidGoToXY(1,5);
    1b90:	81 e0       	ldi	r24, 0x01	; 1
    1b92:	65 e0       	ldi	r22, 0x05	; 5
    1b94:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <CLCD_voidGoToXY>
//CLCD_voidSendString("Hassan10.5");
//CLCD_voidWriteSpecialCharacter(arr1,0,0,0);
//CLCD_voidWriteSpecialCharacter(arr2,1,0,1);
//CLCD_voidWriteSpecialCharacter(arr3,2,0,2);
CLCD_voidWriteSpecialCharacter(arr4,3,1,2);
    1b98:	ce 01       	movw	r24, r28
    1b9a:	c5 96       	adiw	r24, 0x35	; 53
    1b9c:	63 e0       	ldi	r22, 0x03	; 3
    1b9e:	41 e0       	ldi	r20, 0x01	; 1
    1ba0:	22 e0       	ldi	r18, 0x02	; 2
    1ba2:	0e 94 92 0a 	call	0x1524	; 0x1524 <CLCD_voidWriteSpecialCharacter>


	while (1)
	{
		CLCD_voidWriteSpecialCharacter(shape1,5,0,15);
    1ba6:	ce 01       	movw	r24, r28
    1ba8:	8b 5b       	subi	r24, 0xBB	; 187
    1baa:	9f 4f       	sbci	r25, 0xFF	; 255
    1bac:	65 e0       	ldi	r22, 0x05	; 5
    1bae:	40 e0       	ldi	r20, 0x00	; 0
    1bb0:	2f e0       	ldi	r18, 0x0F	; 15
    1bb2:	0e 94 92 0a 	call	0x1524	; 0x1524 <CLCD_voidWriteSpecialCharacter>
		CLCD_voidWriteSpecialCharacter(shape2,6,1,15);
    1bb6:	ce 01       	movw	r24, r28
    1bb8:	83 5b       	subi	r24, 0xB3	; 179
    1bba:	9f 4f       	sbci	r25, 0xFF	; 255
    1bbc:	66 e0       	ldi	r22, 0x06	; 6
    1bbe:	41 e0       	ldi	r20, 0x01	; 1
    1bc0:	2f e0       	ldi	r18, 0x0F	; 15
    1bc2:	0e 94 92 0a 	call	0x1524	; 0x1524 <CLCD_voidWriteSpecialCharacter>
		CLCD_voidWriteSpecialCharacter(ballup,0,1,14);
    1bc6:	ce 01       	movw	r24, r28
    1bc8:	83 5a       	subi	r24, 0xA3	; 163
    1bca:	9f 4f       	sbci	r25, 0xFF	; 255
    1bcc:	60 e0       	ldi	r22, 0x00	; 0
    1bce:	41 e0       	ldi	r20, 0x01	; 1
    1bd0:	2e e0       	ldi	r18, 0x0E	; 14
    1bd2:	0e 94 92 0a 	call	0x1524	; 0x1524 <CLCD_voidWriteSpecialCharacter>
    1bd6:	80 e0       	ldi	r24, 0x00	; 0
    1bd8:	90 e0       	ldi	r25, 0x00	; 0
    1bda:	aa ef       	ldi	r26, 0xFA	; 250
    1bdc:	b3 e4       	ldi	r27, 0x43	; 67
    1bde:	89 8f       	std	Y+25, r24	; 0x19
    1be0:	9a 8f       	std	Y+26, r25	; 0x1a
    1be2:	ab 8f       	std	Y+27, r26	; 0x1b
    1be4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1be6:	69 8d       	ldd	r22, Y+25	; 0x19
    1be8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bee:	20 e0       	ldi	r18, 0x00	; 0
    1bf0:	30 e0       	ldi	r19, 0x00	; 0
    1bf2:	4a ef       	ldi	r20, 0xFA	; 250
    1bf4:	54 e4       	ldi	r21, 0x44	; 68
    1bf6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bfa:	dc 01       	movw	r26, r24
    1bfc:	cb 01       	movw	r24, r22
    1bfe:	8d 8b       	std	Y+21, r24	; 0x15
    1c00:	9e 8b       	std	Y+22, r25	; 0x16
    1c02:	af 8b       	std	Y+23, r26	; 0x17
    1c04:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c06:	6d 89       	ldd	r22, Y+21	; 0x15
    1c08:	7e 89       	ldd	r23, Y+22	; 0x16
    1c0a:	8f 89       	ldd	r24, Y+23	; 0x17
    1c0c:	98 8d       	ldd	r25, Y+24	; 0x18
    1c0e:	20 e0       	ldi	r18, 0x00	; 0
    1c10:	30 e0       	ldi	r19, 0x00	; 0
    1c12:	40 e8       	ldi	r20, 0x80	; 128
    1c14:	5f e3       	ldi	r21, 0x3F	; 63
    1c16:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1c1a:	88 23       	and	r24, r24
    1c1c:	2c f4       	brge	.+10     	; 0x1c28 <main+0x682>
		__ticks = 1;
    1c1e:	81 e0       	ldi	r24, 0x01	; 1
    1c20:	90 e0       	ldi	r25, 0x00	; 0
    1c22:	9c 8b       	std	Y+20, r25	; 0x14
    1c24:	8b 8b       	std	Y+19, r24	; 0x13
    1c26:	3f c0       	rjmp	.+126    	; 0x1ca6 <main+0x700>
	else if (__tmp > 65535)
    1c28:	6d 89       	ldd	r22, Y+21	; 0x15
    1c2a:	7e 89       	ldd	r23, Y+22	; 0x16
    1c2c:	8f 89       	ldd	r24, Y+23	; 0x17
    1c2e:	98 8d       	ldd	r25, Y+24	; 0x18
    1c30:	20 e0       	ldi	r18, 0x00	; 0
    1c32:	3f ef       	ldi	r19, 0xFF	; 255
    1c34:	4f e7       	ldi	r20, 0x7F	; 127
    1c36:	57 e4       	ldi	r21, 0x47	; 71
    1c38:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1c3c:	18 16       	cp	r1, r24
    1c3e:	4c f5       	brge	.+82     	; 0x1c92 <main+0x6ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c40:	69 8d       	ldd	r22, Y+25	; 0x19
    1c42:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c44:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c46:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c48:	20 e0       	ldi	r18, 0x00	; 0
    1c4a:	30 e0       	ldi	r19, 0x00	; 0
    1c4c:	40 e2       	ldi	r20, 0x20	; 32
    1c4e:	51 e4       	ldi	r21, 0x41	; 65
    1c50:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c54:	dc 01       	movw	r26, r24
    1c56:	cb 01       	movw	r24, r22
    1c58:	bc 01       	movw	r22, r24
    1c5a:	cd 01       	movw	r24, r26
    1c5c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c60:	dc 01       	movw	r26, r24
    1c62:	cb 01       	movw	r24, r22
    1c64:	9c 8b       	std	Y+20, r25	; 0x14
    1c66:	8b 8b       	std	Y+19, r24	; 0x13
    1c68:	0f c0       	rjmp	.+30     	; 0x1c88 <main+0x6e2>
    1c6a:	88 ec       	ldi	r24, 0xC8	; 200
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	9a 8b       	std	Y+18, r25	; 0x12
    1c70:	89 8b       	std	Y+17, r24	; 0x11
    1c72:	89 89       	ldd	r24, Y+17	; 0x11
    1c74:	9a 89       	ldd	r25, Y+18	; 0x12
    1c76:	01 97       	sbiw	r24, 0x01	; 1
    1c78:	f1 f7       	brne	.-4      	; 0x1c76 <main+0x6d0>
    1c7a:	9a 8b       	std	Y+18, r25	; 0x12
    1c7c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c7e:	8b 89       	ldd	r24, Y+19	; 0x13
    1c80:	9c 89       	ldd	r25, Y+20	; 0x14
    1c82:	01 97       	sbiw	r24, 0x01	; 1
    1c84:	9c 8b       	std	Y+20, r25	; 0x14
    1c86:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c88:	8b 89       	ldd	r24, Y+19	; 0x13
    1c8a:	9c 89       	ldd	r25, Y+20	; 0x14
    1c8c:	00 97       	sbiw	r24, 0x00	; 0
    1c8e:	69 f7       	brne	.-38     	; 0x1c6a <main+0x6c4>
    1c90:	14 c0       	rjmp	.+40     	; 0x1cba <main+0x714>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c92:	6d 89       	ldd	r22, Y+21	; 0x15
    1c94:	7e 89       	ldd	r23, Y+22	; 0x16
    1c96:	8f 89       	ldd	r24, Y+23	; 0x17
    1c98:	98 8d       	ldd	r25, Y+24	; 0x18
    1c9a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c9e:	dc 01       	movw	r26, r24
    1ca0:	cb 01       	movw	r24, r22
    1ca2:	9c 8b       	std	Y+20, r25	; 0x14
    1ca4:	8b 8b       	std	Y+19, r24	; 0x13
    1ca6:	8b 89       	ldd	r24, Y+19	; 0x13
    1ca8:	9c 89       	ldd	r25, Y+20	; 0x14
    1caa:	98 8b       	std	Y+16, r25	; 0x10
    1cac:	8f 87       	std	Y+15, r24	; 0x0f
    1cae:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cb0:	98 89       	ldd	r25, Y+16	; 0x10
    1cb2:	01 97       	sbiw	r24, 0x01	; 1
    1cb4:	f1 f7       	brne	.-4      	; 0x1cb2 <main+0x70c>
    1cb6:	98 8b       	std	Y+16, r25	; 0x10
    1cb8:	8f 87       	std	Y+15, r24	; 0x0f

		_delay_ms(500);
		CLCD_voidWriteSpecialCharacter(shape3,6,1,15);
    1cba:	ce 01       	movw	r24, r28
    1cbc:	8b 5a       	subi	r24, 0xAB	; 171
    1cbe:	9f 4f       	sbci	r25, 0xFF	; 255
    1cc0:	66 e0       	ldi	r22, 0x06	; 6
    1cc2:	41 e0       	ldi	r20, 0x01	; 1
    1cc4:	2f e0       	ldi	r18, 0x0F	; 15
    1cc6:	0e 94 92 0a 	call	0x1524	; 0x1524 <CLCD_voidWriteSpecialCharacter>
		CLCD_voidWriteSpecialCharacter(balldown,1,1,14);
    1cca:	ce 01       	movw	r24, r28
    1ccc:	8b 59       	subi	r24, 0x9B	; 155
    1cce:	9f 4f       	sbci	r25, 0xFF	; 255
    1cd0:	61 e0       	ldi	r22, 0x01	; 1
    1cd2:	41 e0       	ldi	r20, 0x01	; 1
    1cd4:	2e e0       	ldi	r18, 0x0E	; 14
    1cd6:	0e 94 92 0a 	call	0x1524	; 0x1524 <CLCD_voidWriteSpecialCharacter>
    1cda:	80 e0       	ldi	r24, 0x00	; 0
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	aa ef       	ldi	r26, 0xFA	; 250
    1ce0:	b3 e4       	ldi	r27, 0x43	; 67
    1ce2:	8b 87       	std	Y+11, r24	; 0x0b
    1ce4:	9c 87       	std	Y+12, r25	; 0x0c
    1ce6:	ad 87       	std	Y+13, r26	; 0x0d
    1ce8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cea:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cec:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cee:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cf0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cf2:	20 e0       	ldi	r18, 0x00	; 0
    1cf4:	30 e0       	ldi	r19, 0x00	; 0
    1cf6:	4a ef       	ldi	r20, 0xFA	; 250
    1cf8:	54 e4       	ldi	r21, 0x44	; 68
    1cfa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cfe:	dc 01       	movw	r26, r24
    1d00:	cb 01       	movw	r24, r22
    1d02:	8f 83       	std	Y+7, r24	; 0x07
    1d04:	98 87       	std	Y+8, r25	; 0x08
    1d06:	a9 87       	std	Y+9, r26	; 0x09
    1d08:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d0a:	6f 81       	ldd	r22, Y+7	; 0x07
    1d0c:	78 85       	ldd	r23, Y+8	; 0x08
    1d0e:	89 85       	ldd	r24, Y+9	; 0x09
    1d10:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d12:	20 e0       	ldi	r18, 0x00	; 0
    1d14:	30 e0       	ldi	r19, 0x00	; 0
    1d16:	40 e8       	ldi	r20, 0x80	; 128
    1d18:	5f e3       	ldi	r21, 0x3F	; 63
    1d1a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1d1e:	88 23       	and	r24, r24
    1d20:	2c f4       	brge	.+10     	; 0x1d2c <main+0x786>
		__ticks = 1;
    1d22:	81 e0       	ldi	r24, 0x01	; 1
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	9e 83       	std	Y+6, r25	; 0x06
    1d28:	8d 83       	std	Y+5, r24	; 0x05
    1d2a:	3f c0       	rjmp	.+126    	; 0x1daa <main+0x804>
	else if (__tmp > 65535)
    1d2c:	6f 81       	ldd	r22, Y+7	; 0x07
    1d2e:	78 85       	ldd	r23, Y+8	; 0x08
    1d30:	89 85       	ldd	r24, Y+9	; 0x09
    1d32:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d34:	20 e0       	ldi	r18, 0x00	; 0
    1d36:	3f ef       	ldi	r19, 0xFF	; 255
    1d38:	4f e7       	ldi	r20, 0x7F	; 127
    1d3a:	57 e4       	ldi	r21, 0x47	; 71
    1d3c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1d40:	18 16       	cp	r1, r24
    1d42:	4c f5       	brge	.+82     	; 0x1d96 <main+0x7f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d44:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d46:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d48:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d4c:	20 e0       	ldi	r18, 0x00	; 0
    1d4e:	30 e0       	ldi	r19, 0x00	; 0
    1d50:	40 e2       	ldi	r20, 0x20	; 32
    1d52:	51 e4       	ldi	r21, 0x41	; 65
    1d54:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d58:	dc 01       	movw	r26, r24
    1d5a:	cb 01       	movw	r24, r22
    1d5c:	bc 01       	movw	r22, r24
    1d5e:	cd 01       	movw	r24, r26
    1d60:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d64:	dc 01       	movw	r26, r24
    1d66:	cb 01       	movw	r24, r22
    1d68:	9e 83       	std	Y+6, r25	; 0x06
    1d6a:	8d 83       	std	Y+5, r24	; 0x05
    1d6c:	0f c0       	rjmp	.+30     	; 0x1d8c <main+0x7e6>
    1d6e:	88 ec       	ldi	r24, 0xC8	; 200
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	9c 83       	std	Y+4, r25	; 0x04
    1d74:	8b 83       	std	Y+3, r24	; 0x03
    1d76:	8b 81       	ldd	r24, Y+3	; 0x03
    1d78:	9c 81       	ldd	r25, Y+4	; 0x04
    1d7a:	01 97       	sbiw	r24, 0x01	; 1
    1d7c:	f1 f7       	brne	.-4      	; 0x1d7a <main+0x7d4>
    1d7e:	9c 83       	std	Y+4, r25	; 0x04
    1d80:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d82:	8d 81       	ldd	r24, Y+5	; 0x05
    1d84:	9e 81       	ldd	r25, Y+6	; 0x06
    1d86:	01 97       	sbiw	r24, 0x01	; 1
    1d88:	9e 83       	std	Y+6, r25	; 0x06
    1d8a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d8e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d90:	00 97       	sbiw	r24, 0x00	; 0
    1d92:	69 f7       	brne	.-38     	; 0x1d6e <main+0x7c8>
    1d94:	14 c0       	rjmp	.+40     	; 0x1dbe <main+0x818>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d96:	6f 81       	ldd	r22, Y+7	; 0x07
    1d98:	78 85       	ldd	r23, Y+8	; 0x08
    1d9a:	89 85       	ldd	r24, Y+9	; 0x09
    1d9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d9e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1da2:	dc 01       	movw	r26, r24
    1da4:	cb 01       	movw	r24, r22
    1da6:	9e 83       	std	Y+6, r25	; 0x06
    1da8:	8d 83       	std	Y+5, r24	; 0x05
    1daa:	8d 81       	ldd	r24, Y+5	; 0x05
    1dac:	9e 81       	ldd	r25, Y+6	; 0x06
    1dae:	9a 83       	std	Y+2, r25	; 0x02
    1db0:	89 83       	std	Y+1, r24	; 0x01
    1db2:	89 81       	ldd	r24, Y+1	; 0x01
    1db4:	9a 81       	ldd	r25, Y+2	; 0x02
    1db6:	01 97       	sbiw	r24, 0x01	; 1
    1db8:	f1 f7       	brne	.-4      	; 0x1db6 <main+0x810>
    1dba:	9a 83       	std	Y+2, r25	; 0x02
    1dbc:	89 83       	std	Y+1, r24	; 0x01

		_delay_ms(500);
		CLCD_voidWriteSpecialCharacter(shape2,6,1,15);
    1dbe:	ce 01       	movw	r24, r28
    1dc0:	83 5b       	subi	r24, 0xB3	; 179
    1dc2:	9f 4f       	sbci	r25, 0xFF	; 255
    1dc4:	66 e0       	ldi	r22, 0x06	; 6
    1dc6:	41 e0       	ldi	r20, 0x01	; 1
    1dc8:	2f e0       	ldi	r18, 0x0F	; 15
    1dca:	0e 94 92 0a 	call	0x1524	; 0x1524 <CLCD_voidWriteSpecialCharacter>
		CLCD_voidWriteSpecialCharacter(ballup,0,1,14);
    1dce:	ce 01       	movw	r24, r28
    1dd0:	83 5a       	subi	r24, 0xA3	; 163
    1dd2:	9f 4f       	sbci	r25, 0xFF	; 255
    1dd4:	60 e0       	ldi	r22, 0x00	; 0
    1dd6:	41 e0       	ldi	r20, 0x01	; 1
    1dd8:	2e e0       	ldi	r18, 0x0E	; 14
    1dda:	0e 94 92 0a 	call	0x1524	; 0x1524 <CLCD_voidWriteSpecialCharacter>
    1dde:	e3 ce       	rjmp	.-570    	; 0x1ba6 <main+0x600>

00001de0 <DIO_u8SetPinDirection>:
#include "DIO_register.h"
#include "DIO_private.h"
#include "DIO_config.h"

u8 DIO_u8SetPinDirection(u8 Copy_u8port, u8 Copy_u8Pin, u8 Copy_u8Direction)
{
    1de0:	df 93       	push	r29
    1de2:	cf 93       	push	r28
    1de4:	cd b7       	in	r28, 0x3d	; 61
    1de6:	de b7       	in	r29, 0x3e	; 62
    1de8:	28 97       	sbiw	r28, 0x08	; 8
    1dea:	0f b6       	in	r0, 0x3f	; 63
    1dec:	f8 94       	cli
    1dee:	de bf       	out	0x3e, r29	; 62
    1df0:	0f be       	out	0x3f, r0	; 63
    1df2:	cd bf       	out	0x3d, r28	; 61
    1df4:	8a 83       	std	Y+2, r24	; 0x02
    1df6:	6b 83       	std	Y+3, r22	; 0x03
    1df8:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    1dfa:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin<=DIO_u8PIN7)
    1dfc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfe:	88 30       	cpi	r24, 0x08	; 8
    1e00:	08 f0       	brcs	.+2      	; 0x1e04 <DIO_u8SetPinDirection+0x24>
    1e02:	f4 c0       	rjmp	.+488    	; 0x1fec <DIO_u8SetPinDirection+0x20c>
	{
		if(Copy_u8Direction == DIO_u8PIN_INPUT)
    1e04:	8c 81       	ldd	r24, Y+4	; 0x04
    1e06:	88 23       	and	r24, r24
    1e08:	09 f0       	breq	.+2      	; 0x1e0c <DIO_u8SetPinDirection+0x2c>
    1e0a:	77 c0       	rjmp	.+238    	; 0x1efa <DIO_u8SetPinDirection+0x11a>
		{

			switch(Copy_u8port)
    1e0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e0e:	28 2f       	mov	r18, r24
    1e10:	30 e0       	ldi	r19, 0x00	; 0
    1e12:	38 87       	std	Y+8, r19	; 0x08
    1e14:	2f 83       	std	Y+7, r18	; 0x07
    1e16:	8f 81       	ldd	r24, Y+7	; 0x07
    1e18:	98 85       	ldd	r25, Y+8	; 0x08
    1e1a:	81 30       	cpi	r24, 0x01	; 1
    1e1c:	91 05       	cpc	r25, r1
    1e1e:	59 f1       	breq	.+86     	; 0x1e76 <DIO_u8SetPinDirection+0x96>
    1e20:	2f 81       	ldd	r18, Y+7	; 0x07
    1e22:	38 85       	ldd	r19, Y+8	; 0x08
    1e24:	22 30       	cpi	r18, 0x02	; 2
    1e26:	31 05       	cpc	r19, r1
    1e28:	2c f4       	brge	.+10     	; 0x1e34 <DIO_u8SetPinDirection+0x54>
    1e2a:	8f 81       	ldd	r24, Y+7	; 0x07
    1e2c:	98 85       	ldd	r25, Y+8	; 0x08
    1e2e:	00 97       	sbiw	r24, 0x00	; 0
    1e30:	69 f0       	breq	.+26     	; 0x1e4c <DIO_u8SetPinDirection+0x6c>
    1e32:	60 c0       	rjmp	.+192    	; 0x1ef4 <DIO_u8SetPinDirection+0x114>
    1e34:	2f 81       	ldd	r18, Y+7	; 0x07
    1e36:	38 85       	ldd	r19, Y+8	; 0x08
    1e38:	22 30       	cpi	r18, 0x02	; 2
    1e3a:	31 05       	cpc	r19, r1
    1e3c:	89 f1       	breq	.+98     	; 0x1ea0 <DIO_u8SetPinDirection+0xc0>
    1e3e:	8f 81       	ldd	r24, Y+7	; 0x07
    1e40:	98 85       	ldd	r25, Y+8	; 0x08
    1e42:	83 30       	cpi	r24, 0x03	; 3
    1e44:	91 05       	cpc	r25, r1
    1e46:	09 f4       	brne	.+2      	; 0x1e4a <DIO_u8SetPinDirection+0x6a>
    1e48:	40 c0       	rjmp	.+128    	; 0x1eca <DIO_u8SetPinDirection+0xea>
    1e4a:	54 c0       	rjmp	.+168    	; 0x1ef4 <DIO_u8SetPinDirection+0x114>
			{
			case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin); break;
    1e4c:	aa e3       	ldi	r26, 0x3A	; 58
    1e4e:	b0 e0       	ldi	r27, 0x00	; 0
    1e50:	ea e3       	ldi	r30, 0x3A	; 58
    1e52:	f0 e0       	ldi	r31, 0x00	; 0
    1e54:	80 81       	ld	r24, Z
    1e56:	48 2f       	mov	r20, r24
    1e58:	8b 81       	ldd	r24, Y+3	; 0x03
    1e5a:	28 2f       	mov	r18, r24
    1e5c:	30 e0       	ldi	r19, 0x00	; 0
    1e5e:	81 e0       	ldi	r24, 0x01	; 1
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	02 2e       	mov	r0, r18
    1e64:	02 c0       	rjmp	.+4      	; 0x1e6a <DIO_u8SetPinDirection+0x8a>
    1e66:	88 0f       	add	r24, r24
    1e68:	99 1f       	adc	r25, r25
    1e6a:	0a 94       	dec	r0
    1e6c:	e2 f7       	brpl	.-8      	; 0x1e66 <DIO_u8SetPinDirection+0x86>
    1e6e:	80 95       	com	r24
    1e70:	84 23       	and	r24, r20
    1e72:	8c 93       	st	X, r24
    1e74:	bd c0       	rjmp	.+378    	; 0x1ff0 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB: CLR_BIT(DDRB,Copy_u8Pin); break;
    1e76:	a7 e3       	ldi	r26, 0x37	; 55
    1e78:	b0 e0       	ldi	r27, 0x00	; 0
    1e7a:	e7 e3       	ldi	r30, 0x37	; 55
    1e7c:	f0 e0       	ldi	r31, 0x00	; 0
    1e7e:	80 81       	ld	r24, Z
    1e80:	48 2f       	mov	r20, r24
    1e82:	8b 81       	ldd	r24, Y+3	; 0x03
    1e84:	28 2f       	mov	r18, r24
    1e86:	30 e0       	ldi	r19, 0x00	; 0
    1e88:	81 e0       	ldi	r24, 0x01	; 1
    1e8a:	90 e0       	ldi	r25, 0x00	; 0
    1e8c:	02 2e       	mov	r0, r18
    1e8e:	02 c0       	rjmp	.+4      	; 0x1e94 <DIO_u8SetPinDirection+0xb4>
    1e90:	88 0f       	add	r24, r24
    1e92:	99 1f       	adc	r25, r25
    1e94:	0a 94       	dec	r0
    1e96:	e2 f7       	brpl	.-8      	; 0x1e90 <DIO_u8SetPinDirection+0xb0>
    1e98:	80 95       	com	r24
    1e9a:	84 23       	and	r24, r20
    1e9c:	8c 93       	st	X, r24
    1e9e:	a8 c0       	rjmp	.+336    	; 0x1ff0 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC: CLR_BIT(DDRC,Copy_u8Pin); break;
    1ea0:	a4 e3       	ldi	r26, 0x34	; 52
    1ea2:	b0 e0       	ldi	r27, 0x00	; 0
    1ea4:	e4 e3       	ldi	r30, 0x34	; 52
    1ea6:	f0 e0       	ldi	r31, 0x00	; 0
    1ea8:	80 81       	ld	r24, Z
    1eaa:	48 2f       	mov	r20, r24
    1eac:	8b 81       	ldd	r24, Y+3	; 0x03
    1eae:	28 2f       	mov	r18, r24
    1eb0:	30 e0       	ldi	r19, 0x00	; 0
    1eb2:	81 e0       	ldi	r24, 0x01	; 1
    1eb4:	90 e0       	ldi	r25, 0x00	; 0
    1eb6:	02 2e       	mov	r0, r18
    1eb8:	02 c0       	rjmp	.+4      	; 0x1ebe <DIO_u8SetPinDirection+0xde>
    1eba:	88 0f       	add	r24, r24
    1ebc:	99 1f       	adc	r25, r25
    1ebe:	0a 94       	dec	r0
    1ec0:	e2 f7       	brpl	.-8      	; 0x1eba <DIO_u8SetPinDirection+0xda>
    1ec2:	80 95       	com	r24
    1ec4:	84 23       	and	r24, r20
    1ec6:	8c 93       	st	X, r24
    1ec8:	93 c0       	rjmp	.+294    	; 0x1ff0 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD: CLR_BIT(DDRD,Copy_u8Pin); break;
    1eca:	a1 e3       	ldi	r26, 0x31	; 49
    1ecc:	b0 e0       	ldi	r27, 0x00	; 0
    1ece:	e1 e3       	ldi	r30, 0x31	; 49
    1ed0:	f0 e0       	ldi	r31, 0x00	; 0
    1ed2:	80 81       	ld	r24, Z
    1ed4:	48 2f       	mov	r20, r24
    1ed6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed8:	28 2f       	mov	r18, r24
    1eda:	30 e0       	ldi	r19, 0x00	; 0
    1edc:	81 e0       	ldi	r24, 0x01	; 1
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	02 2e       	mov	r0, r18
    1ee2:	02 c0       	rjmp	.+4      	; 0x1ee8 <DIO_u8SetPinDirection+0x108>
    1ee4:	88 0f       	add	r24, r24
    1ee6:	99 1f       	adc	r25, r25
    1ee8:	0a 94       	dec	r0
    1eea:	e2 f7       	brpl	.-8      	; 0x1ee4 <DIO_u8SetPinDirection+0x104>
    1eec:	80 95       	com	r24
    1eee:	84 23       	and	r24, r20
    1ef0:	8c 93       	st	X, r24
    1ef2:	7e c0       	rjmp	.+252    	; 0x1ff0 <DIO_u8SetPinDirection+0x210>
			default: Local_u8ErrorState =1; break;
    1ef4:	81 e0       	ldi	r24, 0x01	; 1
    1ef6:	89 83       	std	Y+1, r24	; 0x01
    1ef8:	7b c0       	rjmp	.+246    	; 0x1ff0 <DIO_u8SetPinDirection+0x210>

			}
		}
		else if(Copy_u8Direction == DIO_u8PIN_OUTPUT)
    1efa:	8c 81       	ldd	r24, Y+4	; 0x04
    1efc:	81 30       	cpi	r24, 0x01	; 1
    1efe:	09 f0       	breq	.+2      	; 0x1f02 <DIO_u8SetPinDirection+0x122>
    1f00:	72 c0       	rjmp	.+228    	; 0x1fe6 <DIO_u8SetPinDirection+0x206>
		{

			switch(Copy_u8port)
    1f02:	8a 81       	ldd	r24, Y+2	; 0x02
    1f04:	28 2f       	mov	r18, r24
    1f06:	30 e0       	ldi	r19, 0x00	; 0
    1f08:	3e 83       	std	Y+6, r19	; 0x06
    1f0a:	2d 83       	std	Y+5, r18	; 0x05
    1f0c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f0e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f10:	81 30       	cpi	r24, 0x01	; 1
    1f12:	91 05       	cpc	r25, r1
    1f14:	49 f1       	breq	.+82     	; 0x1f68 <DIO_u8SetPinDirection+0x188>
    1f16:	2d 81       	ldd	r18, Y+5	; 0x05
    1f18:	3e 81       	ldd	r19, Y+6	; 0x06
    1f1a:	22 30       	cpi	r18, 0x02	; 2
    1f1c:	31 05       	cpc	r19, r1
    1f1e:	2c f4       	brge	.+10     	; 0x1f2a <DIO_u8SetPinDirection+0x14a>
    1f20:	8d 81       	ldd	r24, Y+5	; 0x05
    1f22:	9e 81       	ldd	r25, Y+6	; 0x06
    1f24:	00 97       	sbiw	r24, 0x00	; 0
    1f26:	61 f0       	breq	.+24     	; 0x1f40 <DIO_u8SetPinDirection+0x160>
    1f28:	5b c0       	rjmp	.+182    	; 0x1fe0 <DIO_u8SetPinDirection+0x200>
    1f2a:	2d 81       	ldd	r18, Y+5	; 0x05
    1f2c:	3e 81       	ldd	r19, Y+6	; 0x06
    1f2e:	22 30       	cpi	r18, 0x02	; 2
    1f30:	31 05       	cpc	r19, r1
    1f32:	71 f1       	breq	.+92     	; 0x1f90 <DIO_u8SetPinDirection+0x1b0>
    1f34:	8d 81       	ldd	r24, Y+5	; 0x05
    1f36:	9e 81       	ldd	r25, Y+6	; 0x06
    1f38:	83 30       	cpi	r24, 0x03	; 3
    1f3a:	91 05       	cpc	r25, r1
    1f3c:	e9 f1       	breq	.+122    	; 0x1fb8 <DIO_u8SetPinDirection+0x1d8>
    1f3e:	50 c0       	rjmp	.+160    	; 0x1fe0 <DIO_u8SetPinDirection+0x200>
			{
			case DIO_u8PORTA: SET_BIT(DDRA,Copy_u8Pin); break;
    1f40:	aa e3       	ldi	r26, 0x3A	; 58
    1f42:	b0 e0       	ldi	r27, 0x00	; 0
    1f44:	ea e3       	ldi	r30, 0x3A	; 58
    1f46:	f0 e0       	ldi	r31, 0x00	; 0
    1f48:	80 81       	ld	r24, Z
    1f4a:	48 2f       	mov	r20, r24
    1f4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f4e:	28 2f       	mov	r18, r24
    1f50:	30 e0       	ldi	r19, 0x00	; 0
    1f52:	81 e0       	ldi	r24, 0x01	; 1
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	02 2e       	mov	r0, r18
    1f58:	02 c0       	rjmp	.+4      	; 0x1f5e <DIO_u8SetPinDirection+0x17e>
    1f5a:	88 0f       	add	r24, r24
    1f5c:	99 1f       	adc	r25, r25
    1f5e:	0a 94       	dec	r0
    1f60:	e2 f7       	brpl	.-8      	; 0x1f5a <DIO_u8SetPinDirection+0x17a>
    1f62:	84 2b       	or	r24, r20
    1f64:	8c 93       	st	X, r24
    1f66:	44 c0       	rjmp	.+136    	; 0x1ff0 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB: SET_BIT(DDRB,Copy_u8Pin); break;
    1f68:	a7 e3       	ldi	r26, 0x37	; 55
    1f6a:	b0 e0       	ldi	r27, 0x00	; 0
    1f6c:	e7 e3       	ldi	r30, 0x37	; 55
    1f6e:	f0 e0       	ldi	r31, 0x00	; 0
    1f70:	80 81       	ld	r24, Z
    1f72:	48 2f       	mov	r20, r24
    1f74:	8b 81       	ldd	r24, Y+3	; 0x03
    1f76:	28 2f       	mov	r18, r24
    1f78:	30 e0       	ldi	r19, 0x00	; 0
    1f7a:	81 e0       	ldi	r24, 0x01	; 1
    1f7c:	90 e0       	ldi	r25, 0x00	; 0
    1f7e:	02 2e       	mov	r0, r18
    1f80:	02 c0       	rjmp	.+4      	; 0x1f86 <DIO_u8SetPinDirection+0x1a6>
    1f82:	88 0f       	add	r24, r24
    1f84:	99 1f       	adc	r25, r25
    1f86:	0a 94       	dec	r0
    1f88:	e2 f7       	brpl	.-8      	; 0x1f82 <DIO_u8SetPinDirection+0x1a2>
    1f8a:	84 2b       	or	r24, r20
    1f8c:	8c 93       	st	X, r24
    1f8e:	30 c0       	rjmp	.+96     	; 0x1ff0 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC: SET_BIT(DDRC,Copy_u8Pin); break;
    1f90:	a4 e3       	ldi	r26, 0x34	; 52
    1f92:	b0 e0       	ldi	r27, 0x00	; 0
    1f94:	e4 e3       	ldi	r30, 0x34	; 52
    1f96:	f0 e0       	ldi	r31, 0x00	; 0
    1f98:	80 81       	ld	r24, Z
    1f9a:	48 2f       	mov	r20, r24
    1f9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f9e:	28 2f       	mov	r18, r24
    1fa0:	30 e0       	ldi	r19, 0x00	; 0
    1fa2:	81 e0       	ldi	r24, 0x01	; 1
    1fa4:	90 e0       	ldi	r25, 0x00	; 0
    1fa6:	02 2e       	mov	r0, r18
    1fa8:	02 c0       	rjmp	.+4      	; 0x1fae <DIO_u8SetPinDirection+0x1ce>
    1faa:	88 0f       	add	r24, r24
    1fac:	99 1f       	adc	r25, r25
    1fae:	0a 94       	dec	r0
    1fb0:	e2 f7       	brpl	.-8      	; 0x1faa <DIO_u8SetPinDirection+0x1ca>
    1fb2:	84 2b       	or	r24, r20
    1fb4:	8c 93       	st	X, r24
    1fb6:	1c c0       	rjmp	.+56     	; 0x1ff0 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD: SET_BIT(DDRD,Copy_u8Pin); break;
    1fb8:	a1 e3       	ldi	r26, 0x31	; 49
    1fba:	b0 e0       	ldi	r27, 0x00	; 0
    1fbc:	e1 e3       	ldi	r30, 0x31	; 49
    1fbe:	f0 e0       	ldi	r31, 0x00	; 0
    1fc0:	80 81       	ld	r24, Z
    1fc2:	48 2f       	mov	r20, r24
    1fc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc6:	28 2f       	mov	r18, r24
    1fc8:	30 e0       	ldi	r19, 0x00	; 0
    1fca:	81 e0       	ldi	r24, 0x01	; 1
    1fcc:	90 e0       	ldi	r25, 0x00	; 0
    1fce:	02 2e       	mov	r0, r18
    1fd0:	02 c0       	rjmp	.+4      	; 0x1fd6 <DIO_u8SetPinDirection+0x1f6>
    1fd2:	88 0f       	add	r24, r24
    1fd4:	99 1f       	adc	r25, r25
    1fd6:	0a 94       	dec	r0
    1fd8:	e2 f7       	brpl	.-8      	; 0x1fd2 <DIO_u8SetPinDirection+0x1f2>
    1fda:	84 2b       	or	r24, r20
    1fdc:	8c 93       	st	X, r24
    1fde:	08 c0       	rjmp	.+16     	; 0x1ff0 <DIO_u8SetPinDirection+0x210>
			default: Local_u8ErrorState =1; break;
    1fe0:	81 e0       	ldi	r24, 0x01	; 1
    1fe2:	89 83       	std	Y+1, r24	; 0x01
    1fe4:	05 c0       	rjmp	.+10     	; 0x1ff0 <DIO_u8SetPinDirection+0x210>

			}
		}
		else
		{
			Local_u8ErrorState = 1;
    1fe6:	81 e0       	ldi	r24, 0x01	; 1
    1fe8:	89 83       	std	Y+1, r24	; 0x01
    1fea:	02 c0       	rjmp	.+4      	; 0x1ff0 <DIO_u8SetPinDirection+0x210>
		}

	}
	else
	{
		Local_u8ErrorState = 1;
    1fec:	81 e0       	ldi	r24, 0x01	; 1
    1fee:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1ff0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ff2:	28 96       	adiw	r28, 0x08	; 8
    1ff4:	0f b6       	in	r0, 0x3f	; 63
    1ff6:	f8 94       	cli
    1ff8:	de bf       	out	0x3e, r29	; 62
    1ffa:	0f be       	out	0x3f, r0	; 63
    1ffc:	cd bf       	out	0x3d, r28	; 61
    1ffe:	cf 91       	pop	r28
    2000:	df 91       	pop	r29
    2002:	08 95       	ret

00002004 <DIO_u8SetPortDirection>:



u8 DIO_u8SetPortDirection(u8 Copy_u8port, u8 Copy_u8Direction)
{
    2004:	df 93       	push	r29
    2006:	cf 93       	push	r28
    2008:	00 d0       	rcall	.+0      	; 0x200a <DIO_u8SetPortDirection+0x6>
    200a:	00 d0       	rcall	.+0      	; 0x200c <DIO_u8SetPortDirection+0x8>
    200c:	0f 92       	push	r0
    200e:	cd b7       	in	r28, 0x3d	; 61
    2010:	de b7       	in	r29, 0x3e	; 62
    2012:	8a 83       	std	Y+2, r24	; 0x02
    2014:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    2016:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8port<=DIO_u8PORTD)
    2018:	8a 81       	ldd	r24, Y+2	; 0x02
    201a:	84 30       	cpi	r24, 0x04	; 4
    201c:	b0 f5       	brcc	.+108    	; 0x208a <DIO_u8SetPortDirection+0x86>
	{
		switch(Copy_u8port)
    201e:	8a 81       	ldd	r24, Y+2	; 0x02
    2020:	28 2f       	mov	r18, r24
    2022:	30 e0       	ldi	r19, 0x00	; 0
    2024:	3d 83       	std	Y+5, r19	; 0x05
    2026:	2c 83       	std	Y+4, r18	; 0x04
    2028:	8c 81       	ldd	r24, Y+4	; 0x04
    202a:	9d 81       	ldd	r25, Y+5	; 0x05
    202c:	81 30       	cpi	r24, 0x01	; 1
    202e:	91 05       	cpc	r25, r1
    2030:	d1 f0       	breq	.+52     	; 0x2066 <DIO_u8SetPortDirection+0x62>
    2032:	2c 81       	ldd	r18, Y+4	; 0x04
    2034:	3d 81       	ldd	r19, Y+5	; 0x05
    2036:	22 30       	cpi	r18, 0x02	; 2
    2038:	31 05       	cpc	r19, r1
    203a:	2c f4       	brge	.+10     	; 0x2046 <DIO_u8SetPortDirection+0x42>
    203c:	8c 81       	ldd	r24, Y+4	; 0x04
    203e:	9d 81       	ldd	r25, Y+5	; 0x05
    2040:	00 97       	sbiw	r24, 0x00	; 0
    2042:	61 f0       	breq	.+24     	; 0x205c <DIO_u8SetPortDirection+0x58>
    2044:	1f c0       	rjmp	.+62     	; 0x2084 <DIO_u8SetPortDirection+0x80>
    2046:	2c 81       	ldd	r18, Y+4	; 0x04
    2048:	3d 81       	ldd	r19, Y+5	; 0x05
    204a:	22 30       	cpi	r18, 0x02	; 2
    204c:	31 05       	cpc	r19, r1
    204e:	81 f0       	breq	.+32     	; 0x2070 <DIO_u8SetPortDirection+0x6c>
    2050:	8c 81       	ldd	r24, Y+4	; 0x04
    2052:	9d 81       	ldd	r25, Y+5	; 0x05
    2054:	83 30       	cpi	r24, 0x03	; 3
    2056:	91 05       	cpc	r25, r1
    2058:	81 f0       	breq	.+32     	; 0x207a <DIO_u8SetPortDirection+0x76>
    205a:	14 c0       	rjmp	.+40     	; 0x2084 <DIO_u8SetPortDirection+0x80>
		{
		case DIO_u8PORTA: DDRA = Copy_u8Direction; break;
    205c:	ea e3       	ldi	r30, 0x3A	; 58
    205e:	f0 e0       	ldi	r31, 0x00	; 0
    2060:	8b 81       	ldd	r24, Y+3	; 0x03
    2062:	80 83       	st	Z, r24
    2064:	14 c0       	rjmp	.+40     	; 0x208e <DIO_u8SetPortDirection+0x8a>
		case DIO_u8PORTB: DDRB = Copy_u8Direction; break;
    2066:	e7 e3       	ldi	r30, 0x37	; 55
    2068:	f0 e0       	ldi	r31, 0x00	; 0
    206a:	8b 81       	ldd	r24, Y+3	; 0x03
    206c:	80 83       	st	Z, r24
    206e:	0f c0       	rjmp	.+30     	; 0x208e <DIO_u8SetPortDirection+0x8a>
		case DIO_u8PORTC: DDRC = Copy_u8Direction; break;
    2070:	e4 e3       	ldi	r30, 0x34	; 52
    2072:	f0 e0       	ldi	r31, 0x00	; 0
    2074:	8b 81       	ldd	r24, Y+3	; 0x03
    2076:	80 83       	st	Z, r24
    2078:	0a c0       	rjmp	.+20     	; 0x208e <DIO_u8SetPortDirection+0x8a>
		case DIO_u8PORTD: DDRD = Copy_u8Direction; break;
    207a:	e1 e3       	ldi	r30, 0x31	; 49
    207c:	f0 e0       	ldi	r31, 0x00	; 0
    207e:	8b 81       	ldd	r24, Y+3	; 0x03
    2080:	80 83       	st	Z, r24
    2082:	05 c0       	rjmp	.+10     	; 0x208e <DIO_u8SetPortDirection+0x8a>
		default: Local_u8ErrorState =1; break;
    2084:	81 e0       	ldi	r24, 0x01	; 1
    2086:	89 83       	std	Y+1, r24	; 0x01
    2088:	02 c0       	rjmp	.+4      	; 0x208e <DIO_u8SetPortDirection+0x8a>

		}
	}
	else
	{
		Local_u8ErrorState = 1;
    208a:	81 e0       	ldi	r24, 0x01	; 1
    208c:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_u8ErrorState;
    208e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2090:	0f 90       	pop	r0
    2092:	0f 90       	pop	r0
    2094:	0f 90       	pop	r0
    2096:	0f 90       	pop	r0
    2098:	0f 90       	pop	r0
    209a:	cf 91       	pop	r28
    209c:	df 91       	pop	r29
    209e:	08 95       	ret

000020a0 <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
    20a0:	df 93       	push	r29
    20a2:	cf 93       	push	r28
    20a4:	cd b7       	in	r28, 0x3d	; 61
    20a6:	de b7       	in	r29, 0x3e	; 62
    20a8:	28 97       	sbiw	r28, 0x08	; 8
    20aa:	0f b6       	in	r0, 0x3f	; 63
    20ac:	f8 94       	cli
    20ae:	de bf       	out	0x3e, r29	; 62
    20b0:	0f be       	out	0x3f, r0	; 63
    20b2:	cd bf       	out	0x3d, r28	; 61
    20b4:	8a 83       	std	Y+2, r24	; 0x02
    20b6:	6b 83       	std	Y+3, r22	; 0x03
    20b8:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    20ba:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin<=DIO_u8PIN7)
    20bc:	8b 81       	ldd	r24, Y+3	; 0x03
    20be:	88 30       	cpi	r24, 0x08	; 8
    20c0:	08 f0       	brcs	.+2      	; 0x20c4 <DIO_u8SetPinValue+0x24>
    20c2:	f4 c0       	rjmp	.+488    	; 0x22ac <DIO_u8SetPinValue+0x20c>
	{
		if(Copy_u8Value == DIO_u8PIN_LOW)
    20c4:	8c 81       	ldd	r24, Y+4	; 0x04
    20c6:	88 23       	and	r24, r24
    20c8:	09 f0       	breq	.+2      	; 0x20cc <DIO_u8SetPinValue+0x2c>
    20ca:	77 c0       	rjmp	.+238    	; 0x21ba <DIO_u8SetPinValue+0x11a>
		{

			switch(Copy_u8port)
    20cc:	8a 81       	ldd	r24, Y+2	; 0x02
    20ce:	28 2f       	mov	r18, r24
    20d0:	30 e0       	ldi	r19, 0x00	; 0
    20d2:	38 87       	std	Y+8, r19	; 0x08
    20d4:	2f 83       	std	Y+7, r18	; 0x07
    20d6:	8f 81       	ldd	r24, Y+7	; 0x07
    20d8:	98 85       	ldd	r25, Y+8	; 0x08
    20da:	81 30       	cpi	r24, 0x01	; 1
    20dc:	91 05       	cpc	r25, r1
    20de:	59 f1       	breq	.+86     	; 0x2136 <DIO_u8SetPinValue+0x96>
    20e0:	2f 81       	ldd	r18, Y+7	; 0x07
    20e2:	38 85       	ldd	r19, Y+8	; 0x08
    20e4:	22 30       	cpi	r18, 0x02	; 2
    20e6:	31 05       	cpc	r19, r1
    20e8:	2c f4       	brge	.+10     	; 0x20f4 <DIO_u8SetPinValue+0x54>
    20ea:	8f 81       	ldd	r24, Y+7	; 0x07
    20ec:	98 85       	ldd	r25, Y+8	; 0x08
    20ee:	00 97       	sbiw	r24, 0x00	; 0
    20f0:	69 f0       	breq	.+26     	; 0x210c <DIO_u8SetPinValue+0x6c>
    20f2:	60 c0       	rjmp	.+192    	; 0x21b4 <DIO_u8SetPinValue+0x114>
    20f4:	2f 81       	ldd	r18, Y+7	; 0x07
    20f6:	38 85       	ldd	r19, Y+8	; 0x08
    20f8:	22 30       	cpi	r18, 0x02	; 2
    20fa:	31 05       	cpc	r19, r1
    20fc:	89 f1       	breq	.+98     	; 0x2160 <DIO_u8SetPinValue+0xc0>
    20fe:	8f 81       	ldd	r24, Y+7	; 0x07
    2100:	98 85       	ldd	r25, Y+8	; 0x08
    2102:	83 30       	cpi	r24, 0x03	; 3
    2104:	91 05       	cpc	r25, r1
    2106:	09 f4       	brne	.+2      	; 0x210a <DIO_u8SetPinValue+0x6a>
    2108:	40 c0       	rjmp	.+128    	; 0x218a <DIO_u8SetPinValue+0xea>
    210a:	54 c0       	rjmp	.+168    	; 0x21b4 <DIO_u8SetPinValue+0x114>
			{
			case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
    210c:	ab e3       	ldi	r26, 0x3B	; 59
    210e:	b0 e0       	ldi	r27, 0x00	; 0
    2110:	eb e3       	ldi	r30, 0x3B	; 59
    2112:	f0 e0       	ldi	r31, 0x00	; 0
    2114:	80 81       	ld	r24, Z
    2116:	48 2f       	mov	r20, r24
    2118:	8b 81       	ldd	r24, Y+3	; 0x03
    211a:	28 2f       	mov	r18, r24
    211c:	30 e0       	ldi	r19, 0x00	; 0
    211e:	81 e0       	ldi	r24, 0x01	; 1
    2120:	90 e0       	ldi	r25, 0x00	; 0
    2122:	02 2e       	mov	r0, r18
    2124:	02 c0       	rjmp	.+4      	; 0x212a <DIO_u8SetPinValue+0x8a>
    2126:	88 0f       	add	r24, r24
    2128:	99 1f       	adc	r25, r25
    212a:	0a 94       	dec	r0
    212c:	e2 f7       	brpl	.-8      	; 0x2126 <DIO_u8SetPinValue+0x86>
    212e:	80 95       	com	r24
    2130:	84 23       	and	r24, r20
    2132:	8c 93       	st	X, r24
    2134:	bd c0       	rjmp	.+378    	; 0x22b0 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
    2136:	a8 e3       	ldi	r26, 0x38	; 56
    2138:	b0 e0       	ldi	r27, 0x00	; 0
    213a:	e8 e3       	ldi	r30, 0x38	; 56
    213c:	f0 e0       	ldi	r31, 0x00	; 0
    213e:	80 81       	ld	r24, Z
    2140:	48 2f       	mov	r20, r24
    2142:	8b 81       	ldd	r24, Y+3	; 0x03
    2144:	28 2f       	mov	r18, r24
    2146:	30 e0       	ldi	r19, 0x00	; 0
    2148:	81 e0       	ldi	r24, 0x01	; 1
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	02 2e       	mov	r0, r18
    214e:	02 c0       	rjmp	.+4      	; 0x2154 <DIO_u8SetPinValue+0xb4>
    2150:	88 0f       	add	r24, r24
    2152:	99 1f       	adc	r25, r25
    2154:	0a 94       	dec	r0
    2156:	e2 f7       	brpl	.-8      	; 0x2150 <DIO_u8SetPinValue+0xb0>
    2158:	80 95       	com	r24
    215a:	84 23       	and	r24, r20
    215c:	8c 93       	st	X, r24
    215e:	a8 c0       	rjmp	.+336    	; 0x22b0 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin); break;
    2160:	a5 e3       	ldi	r26, 0x35	; 53
    2162:	b0 e0       	ldi	r27, 0x00	; 0
    2164:	e5 e3       	ldi	r30, 0x35	; 53
    2166:	f0 e0       	ldi	r31, 0x00	; 0
    2168:	80 81       	ld	r24, Z
    216a:	48 2f       	mov	r20, r24
    216c:	8b 81       	ldd	r24, Y+3	; 0x03
    216e:	28 2f       	mov	r18, r24
    2170:	30 e0       	ldi	r19, 0x00	; 0
    2172:	81 e0       	ldi	r24, 0x01	; 1
    2174:	90 e0       	ldi	r25, 0x00	; 0
    2176:	02 2e       	mov	r0, r18
    2178:	02 c0       	rjmp	.+4      	; 0x217e <DIO_u8SetPinValue+0xde>
    217a:	88 0f       	add	r24, r24
    217c:	99 1f       	adc	r25, r25
    217e:	0a 94       	dec	r0
    2180:	e2 f7       	brpl	.-8      	; 0x217a <DIO_u8SetPinValue+0xda>
    2182:	80 95       	com	r24
    2184:	84 23       	and	r24, r20
    2186:	8c 93       	st	X, r24
    2188:	93 c0       	rjmp	.+294    	; 0x22b0 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin); break;
    218a:	a2 e3       	ldi	r26, 0x32	; 50
    218c:	b0 e0       	ldi	r27, 0x00	; 0
    218e:	e2 e3       	ldi	r30, 0x32	; 50
    2190:	f0 e0       	ldi	r31, 0x00	; 0
    2192:	80 81       	ld	r24, Z
    2194:	48 2f       	mov	r20, r24
    2196:	8b 81       	ldd	r24, Y+3	; 0x03
    2198:	28 2f       	mov	r18, r24
    219a:	30 e0       	ldi	r19, 0x00	; 0
    219c:	81 e0       	ldi	r24, 0x01	; 1
    219e:	90 e0       	ldi	r25, 0x00	; 0
    21a0:	02 2e       	mov	r0, r18
    21a2:	02 c0       	rjmp	.+4      	; 0x21a8 <DIO_u8SetPinValue+0x108>
    21a4:	88 0f       	add	r24, r24
    21a6:	99 1f       	adc	r25, r25
    21a8:	0a 94       	dec	r0
    21aa:	e2 f7       	brpl	.-8      	; 0x21a4 <DIO_u8SetPinValue+0x104>
    21ac:	80 95       	com	r24
    21ae:	84 23       	and	r24, r20
    21b0:	8c 93       	st	X, r24
    21b2:	7e c0       	rjmp	.+252    	; 0x22b0 <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState =1; break;
    21b4:	81 e0       	ldi	r24, 0x01	; 1
    21b6:	89 83       	std	Y+1, r24	; 0x01
    21b8:	7b c0       	rjmp	.+246    	; 0x22b0 <DIO_u8SetPinValue+0x210>

			}
		}
		else if(Copy_u8Value == DIO_u8PIN_HIGH)
    21ba:	8c 81       	ldd	r24, Y+4	; 0x04
    21bc:	81 30       	cpi	r24, 0x01	; 1
    21be:	09 f0       	breq	.+2      	; 0x21c2 <DIO_u8SetPinValue+0x122>
    21c0:	72 c0       	rjmp	.+228    	; 0x22a6 <DIO_u8SetPinValue+0x206>
		{

			switch(Copy_u8port)
    21c2:	8a 81       	ldd	r24, Y+2	; 0x02
    21c4:	28 2f       	mov	r18, r24
    21c6:	30 e0       	ldi	r19, 0x00	; 0
    21c8:	3e 83       	std	Y+6, r19	; 0x06
    21ca:	2d 83       	std	Y+5, r18	; 0x05
    21cc:	8d 81       	ldd	r24, Y+5	; 0x05
    21ce:	9e 81       	ldd	r25, Y+6	; 0x06
    21d0:	81 30       	cpi	r24, 0x01	; 1
    21d2:	91 05       	cpc	r25, r1
    21d4:	49 f1       	breq	.+82     	; 0x2228 <DIO_u8SetPinValue+0x188>
    21d6:	2d 81       	ldd	r18, Y+5	; 0x05
    21d8:	3e 81       	ldd	r19, Y+6	; 0x06
    21da:	22 30       	cpi	r18, 0x02	; 2
    21dc:	31 05       	cpc	r19, r1
    21de:	2c f4       	brge	.+10     	; 0x21ea <DIO_u8SetPinValue+0x14a>
    21e0:	8d 81       	ldd	r24, Y+5	; 0x05
    21e2:	9e 81       	ldd	r25, Y+6	; 0x06
    21e4:	00 97       	sbiw	r24, 0x00	; 0
    21e6:	61 f0       	breq	.+24     	; 0x2200 <DIO_u8SetPinValue+0x160>
    21e8:	5b c0       	rjmp	.+182    	; 0x22a0 <DIO_u8SetPinValue+0x200>
    21ea:	2d 81       	ldd	r18, Y+5	; 0x05
    21ec:	3e 81       	ldd	r19, Y+6	; 0x06
    21ee:	22 30       	cpi	r18, 0x02	; 2
    21f0:	31 05       	cpc	r19, r1
    21f2:	71 f1       	breq	.+92     	; 0x2250 <DIO_u8SetPinValue+0x1b0>
    21f4:	8d 81       	ldd	r24, Y+5	; 0x05
    21f6:	9e 81       	ldd	r25, Y+6	; 0x06
    21f8:	83 30       	cpi	r24, 0x03	; 3
    21fa:	91 05       	cpc	r25, r1
    21fc:	e9 f1       	breq	.+122    	; 0x2278 <DIO_u8SetPinValue+0x1d8>
    21fe:	50 c0       	rjmp	.+160    	; 0x22a0 <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
    2200:	ab e3       	ldi	r26, 0x3B	; 59
    2202:	b0 e0       	ldi	r27, 0x00	; 0
    2204:	eb e3       	ldi	r30, 0x3B	; 59
    2206:	f0 e0       	ldi	r31, 0x00	; 0
    2208:	80 81       	ld	r24, Z
    220a:	48 2f       	mov	r20, r24
    220c:	8b 81       	ldd	r24, Y+3	; 0x03
    220e:	28 2f       	mov	r18, r24
    2210:	30 e0       	ldi	r19, 0x00	; 0
    2212:	81 e0       	ldi	r24, 0x01	; 1
    2214:	90 e0       	ldi	r25, 0x00	; 0
    2216:	02 2e       	mov	r0, r18
    2218:	02 c0       	rjmp	.+4      	; 0x221e <DIO_u8SetPinValue+0x17e>
    221a:	88 0f       	add	r24, r24
    221c:	99 1f       	adc	r25, r25
    221e:	0a 94       	dec	r0
    2220:	e2 f7       	brpl	.-8      	; 0x221a <DIO_u8SetPinValue+0x17a>
    2222:	84 2b       	or	r24, r20
    2224:	8c 93       	st	X, r24
    2226:	44 c0       	rjmp	.+136    	; 0x22b0 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
    2228:	a8 e3       	ldi	r26, 0x38	; 56
    222a:	b0 e0       	ldi	r27, 0x00	; 0
    222c:	e8 e3       	ldi	r30, 0x38	; 56
    222e:	f0 e0       	ldi	r31, 0x00	; 0
    2230:	80 81       	ld	r24, Z
    2232:	48 2f       	mov	r20, r24
    2234:	8b 81       	ldd	r24, Y+3	; 0x03
    2236:	28 2f       	mov	r18, r24
    2238:	30 e0       	ldi	r19, 0x00	; 0
    223a:	81 e0       	ldi	r24, 0x01	; 1
    223c:	90 e0       	ldi	r25, 0x00	; 0
    223e:	02 2e       	mov	r0, r18
    2240:	02 c0       	rjmp	.+4      	; 0x2246 <DIO_u8SetPinValue+0x1a6>
    2242:	88 0f       	add	r24, r24
    2244:	99 1f       	adc	r25, r25
    2246:	0a 94       	dec	r0
    2248:	e2 f7       	brpl	.-8      	; 0x2242 <DIO_u8SetPinValue+0x1a2>
    224a:	84 2b       	or	r24, r20
    224c:	8c 93       	st	X, r24
    224e:	30 c0       	rjmp	.+96     	; 0x22b0 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin); break;
    2250:	a5 e3       	ldi	r26, 0x35	; 53
    2252:	b0 e0       	ldi	r27, 0x00	; 0
    2254:	e5 e3       	ldi	r30, 0x35	; 53
    2256:	f0 e0       	ldi	r31, 0x00	; 0
    2258:	80 81       	ld	r24, Z
    225a:	48 2f       	mov	r20, r24
    225c:	8b 81       	ldd	r24, Y+3	; 0x03
    225e:	28 2f       	mov	r18, r24
    2260:	30 e0       	ldi	r19, 0x00	; 0
    2262:	81 e0       	ldi	r24, 0x01	; 1
    2264:	90 e0       	ldi	r25, 0x00	; 0
    2266:	02 2e       	mov	r0, r18
    2268:	02 c0       	rjmp	.+4      	; 0x226e <DIO_u8SetPinValue+0x1ce>
    226a:	88 0f       	add	r24, r24
    226c:	99 1f       	adc	r25, r25
    226e:	0a 94       	dec	r0
    2270:	e2 f7       	brpl	.-8      	; 0x226a <DIO_u8SetPinValue+0x1ca>
    2272:	84 2b       	or	r24, r20
    2274:	8c 93       	st	X, r24
    2276:	1c c0       	rjmp	.+56     	; 0x22b0 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin); break;
    2278:	a2 e3       	ldi	r26, 0x32	; 50
    227a:	b0 e0       	ldi	r27, 0x00	; 0
    227c:	e2 e3       	ldi	r30, 0x32	; 50
    227e:	f0 e0       	ldi	r31, 0x00	; 0
    2280:	80 81       	ld	r24, Z
    2282:	48 2f       	mov	r20, r24
    2284:	8b 81       	ldd	r24, Y+3	; 0x03
    2286:	28 2f       	mov	r18, r24
    2288:	30 e0       	ldi	r19, 0x00	; 0
    228a:	81 e0       	ldi	r24, 0x01	; 1
    228c:	90 e0       	ldi	r25, 0x00	; 0
    228e:	02 2e       	mov	r0, r18
    2290:	02 c0       	rjmp	.+4      	; 0x2296 <DIO_u8SetPinValue+0x1f6>
    2292:	88 0f       	add	r24, r24
    2294:	99 1f       	adc	r25, r25
    2296:	0a 94       	dec	r0
    2298:	e2 f7       	brpl	.-8      	; 0x2292 <DIO_u8SetPinValue+0x1f2>
    229a:	84 2b       	or	r24, r20
    229c:	8c 93       	st	X, r24
    229e:	08 c0       	rjmp	.+16     	; 0x22b0 <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState =1; break;
    22a0:	81 e0       	ldi	r24, 0x01	; 1
    22a2:	89 83       	std	Y+1, r24	; 0x01
    22a4:	05 c0       	rjmp	.+10     	; 0x22b0 <DIO_u8SetPinValue+0x210>

			}
		}
		else
		{
			Local_u8ErrorState = 1;
    22a6:	81 e0       	ldi	r24, 0x01	; 1
    22a8:	89 83       	std	Y+1, r24	; 0x01
    22aa:	02 c0       	rjmp	.+4      	; 0x22b0 <DIO_u8SetPinValue+0x210>
		}

	}
	else
	{
		Local_u8ErrorState = 1;
    22ac:	81 e0       	ldi	r24, 0x01	; 1
    22ae:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    22b0:	89 81       	ldd	r24, Y+1	; 0x01
}
    22b2:	28 96       	adiw	r28, 0x08	; 8
    22b4:	0f b6       	in	r0, 0x3f	; 63
    22b6:	f8 94       	cli
    22b8:	de bf       	out	0x3e, r29	; 62
    22ba:	0f be       	out	0x3f, r0	; 63
    22bc:	cd bf       	out	0x3d, r28	; 61
    22be:	cf 91       	pop	r28
    22c0:	df 91       	pop	r29
    22c2:	08 95       	ret

000022c4 <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8port, u8 Copy_u8Value)
{
    22c4:	df 93       	push	r29
    22c6:	cf 93       	push	r28
    22c8:	00 d0       	rcall	.+0      	; 0x22ca <DIO_u8SetPortValue+0x6>
    22ca:	00 d0       	rcall	.+0      	; 0x22cc <DIO_u8SetPortValue+0x8>
    22cc:	0f 92       	push	r0
    22ce:	cd b7       	in	r28, 0x3d	; 61
    22d0:	de b7       	in	r29, 0x3e	; 62
    22d2:	8a 83       	std	Y+2, r24	; 0x02
    22d4:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    22d6:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8port<=DIO_u8PORTD)
    22d8:	8a 81       	ldd	r24, Y+2	; 0x02
    22da:	84 30       	cpi	r24, 0x04	; 4
    22dc:	b0 f5       	brcc	.+108    	; 0x234a <DIO_u8SetPortValue+0x86>
	{
		switch(Copy_u8port)
    22de:	8a 81       	ldd	r24, Y+2	; 0x02
    22e0:	28 2f       	mov	r18, r24
    22e2:	30 e0       	ldi	r19, 0x00	; 0
    22e4:	3d 83       	std	Y+5, r19	; 0x05
    22e6:	2c 83       	std	Y+4, r18	; 0x04
    22e8:	8c 81       	ldd	r24, Y+4	; 0x04
    22ea:	9d 81       	ldd	r25, Y+5	; 0x05
    22ec:	81 30       	cpi	r24, 0x01	; 1
    22ee:	91 05       	cpc	r25, r1
    22f0:	d1 f0       	breq	.+52     	; 0x2326 <DIO_u8SetPortValue+0x62>
    22f2:	2c 81       	ldd	r18, Y+4	; 0x04
    22f4:	3d 81       	ldd	r19, Y+5	; 0x05
    22f6:	22 30       	cpi	r18, 0x02	; 2
    22f8:	31 05       	cpc	r19, r1
    22fa:	2c f4       	brge	.+10     	; 0x2306 <DIO_u8SetPortValue+0x42>
    22fc:	8c 81       	ldd	r24, Y+4	; 0x04
    22fe:	9d 81       	ldd	r25, Y+5	; 0x05
    2300:	00 97       	sbiw	r24, 0x00	; 0
    2302:	61 f0       	breq	.+24     	; 0x231c <DIO_u8SetPortValue+0x58>
    2304:	1f c0       	rjmp	.+62     	; 0x2344 <DIO_u8SetPortValue+0x80>
    2306:	2c 81       	ldd	r18, Y+4	; 0x04
    2308:	3d 81       	ldd	r19, Y+5	; 0x05
    230a:	22 30       	cpi	r18, 0x02	; 2
    230c:	31 05       	cpc	r19, r1
    230e:	81 f0       	breq	.+32     	; 0x2330 <DIO_u8SetPortValue+0x6c>
    2310:	8c 81       	ldd	r24, Y+4	; 0x04
    2312:	9d 81       	ldd	r25, Y+5	; 0x05
    2314:	83 30       	cpi	r24, 0x03	; 3
    2316:	91 05       	cpc	r25, r1
    2318:	81 f0       	breq	.+32     	; 0x233a <DIO_u8SetPortValue+0x76>
    231a:	14 c0       	rjmp	.+40     	; 0x2344 <DIO_u8SetPortValue+0x80>
		{
		case DIO_u8PORTA: PORTA = Copy_u8Value; break;
    231c:	eb e3       	ldi	r30, 0x3B	; 59
    231e:	f0 e0       	ldi	r31, 0x00	; 0
    2320:	8b 81       	ldd	r24, Y+3	; 0x03
    2322:	80 83       	st	Z, r24
    2324:	14 c0       	rjmp	.+40     	; 0x234e <DIO_u8SetPortValue+0x8a>
		case DIO_u8PORTB: PORTB = Copy_u8Value; break;
    2326:	e8 e3       	ldi	r30, 0x38	; 56
    2328:	f0 e0       	ldi	r31, 0x00	; 0
    232a:	8b 81       	ldd	r24, Y+3	; 0x03
    232c:	80 83       	st	Z, r24
    232e:	0f c0       	rjmp	.+30     	; 0x234e <DIO_u8SetPortValue+0x8a>
		case DIO_u8PORTC: PORTC = Copy_u8Value; break;
    2330:	e5 e3       	ldi	r30, 0x35	; 53
    2332:	f0 e0       	ldi	r31, 0x00	; 0
    2334:	8b 81       	ldd	r24, Y+3	; 0x03
    2336:	80 83       	st	Z, r24
    2338:	0a c0       	rjmp	.+20     	; 0x234e <DIO_u8SetPortValue+0x8a>
		case DIO_u8PORTD: PORTD = Copy_u8Value; break;
    233a:	e2 e3       	ldi	r30, 0x32	; 50
    233c:	f0 e0       	ldi	r31, 0x00	; 0
    233e:	8b 81       	ldd	r24, Y+3	; 0x03
    2340:	80 83       	st	Z, r24
    2342:	05 c0       	rjmp	.+10     	; 0x234e <DIO_u8SetPortValue+0x8a>
		default: Local_u8ErrorState =1; break;
    2344:	81 e0       	ldi	r24, 0x01	; 1
    2346:	89 83       	std	Y+1, r24	; 0x01
    2348:	02 c0       	rjmp	.+4      	; 0x234e <DIO_u8SetPortValue+0x8a>

		}
	}
	else
	{
		Local_u8ErrorState = 1;
    234a:	81 e0       	ldi	r24, 0x01	; 1
    234c:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_u8ErrorState;
    234e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2350:	0f 90       	pop	r0
    2352:	0f 90       	pop	r0
    2354:	0f 90       	pop	r0
    2356:	0f 90       	pop	r0
    2358:	0f 90       	pop	r0
    235a:	cf 91       	pop	r28
    235c:	df 91       	pop	r29
    235e:	08 95       	ret

00002360 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8port, u8 Copy_u8Pin, u8* Copy_Pu8Value)
{
    2360:	df 93       	push	r29
    2362:	cf 93       	push	r28
    2364:	cd b7       	in	r28, 0x3d	; 61
    2366:	de b7       	in	r29, 0x3e	; 62
    2368:	27 97       	sbiw	r28, 0x07	; 7
    236a:	0f b6       	in	r0, 0x3f	; 63
    236c:	f8 94       	cli
    236e:	de bf       	out	0x3e, r29	; 62
    2370:	0f be       	out	0x3f, r0	; 63
    2372:	cd bf       	out	0x3d, r28	; 61
    2374:	8a 83       	std	Y+2, r24	; 0x02
    2376:	6b 83       	std	Y+3, r22	; 0x03
    2378:	5d 83       	std	Y+5, r21	; 0x05
    237a:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    237c:	19 82       	std	Y+1, r1	; 0x01

	if((Copy_Pu8Value != NULL )&&(Copy_u8Pin<=DIO_u8PIN7))
    237e:	8c 81       	ldd	r24, Y+4	; 0x04
    2380:	9d 81       	ldd	r25, Y+5	; 0x05
    2382:	00 97       	sbiw	r24, 0x00	; 0
    2384:	09 f4       	brne	.+2      	; 0x2388 <DIO_u8GetPinValue+0x28>
    2386:	78 c0       	rjmp	.+240    	; 0x2478 <DIO_u8GetPinValue+0x118>
    2388:	8b 81       	ldd	r24, Y+3	; 0x03
    238a:	88 30       	cpi	r24, 0x08	; 8
    238c:	08 f0       	brcs	.+2      	; 0x2390 <DIO_u8GetPinValue+0x30>
    238e:	74 c0       	rjmp	.+232    	; 0x2478 <DIO_u8GetPinValue+0x118>
	{


		switch(Copy_u8port)
    2390:	8a 81       	ldd	r24, Y+2	; 0x02
    2392:	28 2f       	mov	r18, r24
    2394:	30 e0       	ldi	r19, 0x00	; 0
    2396:	3f 83       	std	Y+7, r19	; 0x07
    2398:	2e 83       	std	Y+6, r18	; 0x06
    239a:	4e 81       	ldd	r20, Y+6	; 0x06
    239c:	5f 81       	ldd	r21, Y+7	; 0x07
    239e:	41 30       	cpi	r20, 0x01	; 1
    23a0:	51 05       	cpc	r21, r1
    23a2:	59 f1       	breq	.+86     	; 0x23fa <DIO_u8GetPinValue+0x9a>
    23a4:	8e 81       	ldd	r24, Y+6	; 0x06
    23a6:	9f 81       	ldd	r25, Y+7	; 0x07
    23a8:	82 30       	cpi	r24, 0x02	; 2
    23aa:	91 05       	cpc	r25, r1
    23ac:	34 f4       	brge	.+12     	; 0x23ba <DIO_u8GetPinValue+0x5a>
    23ae:	2e 81       	ldd	r18, Y+6	; 0x06
    23b0:	3f 81       	ldd	r19, Y+7	; 0x07
    23b2:	21 15       	cp	r18, r1
    23b4:	31 05       	cpc	r19, r1
    23b6:	69 f0       	breq	.+26     	; 0x23d2 <DIO_u8GetPinValue+0x72>
    23b8:	5c c0       	rjmp	.+184    	; 0x2472 <DIO_u8GetPinValue+0x112>
    23ba:	4e 81       	ldd	r20, Y+6	; 0x06
    23bc:	5f 81       	ldd	r21, Y+7	; 0x07
    23be:	42 30       	cpi	r20, 0x02	; 2
    23c0:	51 05       	cpc	r21, r1
    23c2:	79 f1       	breq	.+94     	; 0x2422 <DIO_u8GetPinValue+0xc2>
    23c4:	8e 81       	ldd	r24, Y+6	; 0x06
    23c6:	9f 81       	ldd	r25, Y+7	; 0x07
    23c8:	83 30       	cpi	r24, 0x03	; 3
    23ca:	91 05       	cpc	r25, r1
    23cc:	09 f4       	brne	.+2      	; 0x23d0 <DIO_u8GetPinValue+0x70>
    23ce:	3d c0       	rjmp	.+122    	; 0x244a <DIO_u8GetPinValue+0xea>
    23d0:	50 c0       	rjmp	.+160    	; 0x2472 <DIO_u8GetPinValue+0x112>
		{
		case DIO_u8PORTA: * Copy_Pu8Value = GET_BIT(PINA,Copy_u8Pin); break;
    23d2:	e9 e3       	ldi	r30, 0x39	; 57
    23d4:	f0 e0       	ldi	r31, 0x00	; 0
    23d6:	80 81       	ld	r24, Z
    23d8:	28 2f       	mov	r18, r24
    23da:	30 e0       	ldi	r19, 0x00	; 0
    23dc:	8b 81       	ldd	r24, Y+3	; 0x03
    23de:	88 2f       	mov	r24, r24
    23e0:	90 e0       	ldi	r25, 0x00	; 0
    23e2:	a9 01       	movw	r20, r18
    23e4:	02 c0       	rjmp	.+4      	; 0x23ea <DIO_u8GetPinValue+0x8a>
    23e6:	55 95       	asr	r21
    23e8:	47 95       	ror	r20
    23ea:	8a 95       	dec	r24
    23ec:	e2 f7       	brpl	.-8      	; 0x23e6 <DIO_u8GetPinValue+0x86>
    23ee:	ca 01       	movw	r24, r20
    23f0:	81 70       	andi	r24, 0x01	; 1
    23f2:	ec 81       	ldd	r30, Y+4	; 0x04
    23f4:	fd 81       	ldd	r31, Y+5	; 0x05
    23f6:	80 83       	st	Z, r24
    23f8:	41 c0       	rjmp	.+130    	; 0x247c <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTB: * Copy_Pu8Value = GET_BIT(PINB,Copy_u8Pin); break;
    23fa:	e6 e3       	ldi	r30, 0x36	; 54
    23fc:	f0 e0       	ldi	r31, 0x00	; 0
    23fe:	80 81       	ld	r24, Z
    2400:	28 2f       	mov	r18, r24
    2402:	30 e0       	ldi	r19, 0x00	; 0
    2404:	8b 81       	ldd	r24, Y+3	; 0x03
    2406:	88 2f       	mov	r24, r24
    2408:	90 e0       	ldi	r25, 0x00	; 0
    240a:	a9 01       	movw	r20, r18
    240c:	02 c0       	rjmp	.+4      	; 0x2412 <DIO_u8GetPinValue+0xb2>
    240e:	55 95       	asr	r21
    2410:	47 95       	ror	r20
    2412:	8a 95       	dec	r24
    2414:	e2 f7       	brpl	.-8      	; 0x240e <DIO_u8GetPinValue+0xae>
    2416:	ca 01       	movw	r24, r20
    2418:	81 70       	andi	r24, 0x01	; 1
    241a:	ec 81       	ldd	r30, Y+4	; 0x04
    241c:	fd 81       	ldd	r31, Y+5	; 0x05
    241e:	80 83       	st	Z, r24
    2420:	2d c0       	rjmp	.+90     	; 0x247c <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTC: * Copy_Pu8Value = GET_BIT(PINC,Copy_u8Pin); break;
    2422:	e3 e3       	ldi	r30, 0x33	; 51
    2424:	f0 e0       	ldi	r31, 0x00	; 0
    2426:	80 81       	ld	r24, Z
    2428:	28 2f       	mov	r18, r24
    242a:	30 e0       	ldi	r19, 0x00	; 0
    242c:	8b 81       	ldd	r24, Y+3	; 0x03
    242e:	88 2f       	mov	r24, r24
    2430:	90 e0       	ldi	r25, 0x00	; 0
    2432:	a9 01       	movw	r20, r18
    2434:	02 c0       	rjmp	.+4      	; 0x243a <DIO_u8GetPinValue+0xda>
    2436:	55 95       	asr	r21
    2438:	47 95       	ror	r20
    243a:	8a 95       	dec	r24
    243c:	e2 f7       	brpl	.-8      	; 0x2436 <DIO_u8GetPinValue+0xd6>
    243e:	ca 01       	movw	r24, r20
    2440:	81 70       	andi	r24, 0x01	; 1
    2442:	ec 81       	ldd	r30, Y+4	; 0x04
    2444:	fd 81       	ldd	r31, Y+5	; 0x05
    2446:	80 83       	st	Z, r24
    2448:	19 c0       	rjmp	.+50     	; 0x247c <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTD: * Copy_Pu8Value = GET_BIT(PIND,Copy_u8Pin); break;
    244a:	e0 e3       	ldi	r30, 0x30	; 48
    244c:	f0 e0       	ldi	r31, 0x00	; 0
    244e:	80 81       	ld	r24, Z
    2450:	28 2f       	mov	r18, r24
    2452:	30 e0       	ldi	r19, 0x00	; 0
    2454:	8b 81       	ldd	r24, Y+3	; 0x03
    2456:	88 2f       	mov	r24, r24
    2458:	90 e0       	ldi	r25, 0x00	; 0
    245a:	a9 01       	movw	r20, r18
    245c:	02 c0       	rjmp	.+4      	; 0x2462 <DIO_u8GetPinValue+0x102>
    245e:	55 95       	asr	r21
    2460:	47 95       	ror	r20
    2462:	8a 95       	dec	r24
    2464:	e2 f7       	brpl	.-8      	; 0x245e <DIO_u8GetPinValue+0xfe>
    2466:	ca 01       	movw	r24, r20
    2468:	81 70       	andi	r24, 0x01	; 1
    246a:	ec 81       	ldd	r30, Y+4	; 0x04
    246c:	fd 81       	ldd	r31, Y+5	; 0x05
    246e:	80 83       	st	Z, r24
    2470:	05 c0       	rjmp	.+10     	; 0x247c <DIO_u8GetPinValue+0x11c>
		default: Local_u8ErrorState =1; break;
    2472:	81 e0       	ldi	r24, 0x01	; 1
    2474:	89 83       	std	Y+1, r24	; 0x01
    2476:	02 c0       	rjmp	.+4      	; 0x247c <DIO_u8GetPinValue+0x11c>

		}
	}
	else
	{
		Local_u8ErrorState = 1;
    2478:	81 e0       	ldi	r24, 0x01	; 1
    247a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    247c:	89 81       	ldd	r24, Y+1	; 0x01
}
    247e:	27 96       	adiw	r28, 0x07	; 7
    2480:	0f b6       	in	r0, 0x3f	; 63
    2482:	f8 94       	cli
    2484:	de bf       	out	0x3e, r29	; 62
    2486:	0f be       	out	0x3f, r0	; 63
    2488:	cd bf       	out	0x3d, r28	; 61
    248a:	cf 91       	pop	r28
    248c:	df 91       	pop	r29
    248e:	08 95       	ret

00002490 <DIO_u8PinPullUp>:

u8 DIO_u8PinPullUp(u8 Copy_u8port, u8 Copy_u8Pin, u8 Copy_u8State)
{
    2490:	df 93       	push	r29
    2492:	cf 93       	push	r28
    2494:	cd b7       	in	r28, 0x3d	; 61
    2496:	de b7       	in	r29, 0x3e	; 62
    2498:	28 97       	sbiw	r28, 0x08	; 8
    249a:	0f b6       	in	r0, 0x3f	; 63
    249c:	f8 94       	cli
    249e:	de bf       	out	0x3e, r29	; 62
    24a0:	0f be       	out	0x3f, r0	; 63
    24a2:	cd bf       	out	0x3d, r28	; 61
    24a4:	8a 83       	std	Y+2, r24	; 0x02
    24a6:	6b 83       	std	Y+3, r22	; 0x03
    24a8:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = 0;
    24aa:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8port<=DIO_u8PORTD && Copy_u8Pin <= DIO_u8PIN7)
    24ac:	8a 81       	ldd	r24, Y+2	; 0x02
    24ae:	84 30       	cpi	r24, 0x04	; 4
    24b0:	08 f0       	brcs	.+2      	; 0x24b4 <DIO_u8PinPullUp+0x24>
    24b2:	f7 c0       	rjmp	.+494    	; 0x26a2 <DIO_u8PinPullUp+0x212>
    24b4:	8b 81       	ldd	r24, Y+3	; 0x03
    24b6:	88 30       	cpi	r24, 0x08	; 8
    24b8:	08 f0       	brcs	.+2      	; 0x24bc <DIO_u8PinPullUp+0x2c>
    24ba:	f3 c0       	rjmp	.+486    	; 0x26a2 <DIO_u8PinPullUp+0x212>
	{
		if(Copy_u8State == DIO_u8PIN_PullUpDIS)
    24bc:	8c 81       	ldd	r24, Y+4	; 0x04
    24be:	88 23       	and	r24, r24
    24c0:	09 f0       	breq	.+2      	; 0x24c4 <DIO_u8PinPullUp+0x34>
    24c2:	77 c0       	rjmp	.+238    	; 0x25b2 <DIO_u8PinPullUp+0x122>
		{

			switch(Copy_u8port)
    24c4:	8a 81       	ldd	r24, Y+2	; 0x02
    24c6:	28 2f       	mov	r18, r24
    24c8:	30 e0       	ldi	r19, 0x00	; 0
    24ca:	38 87       	std	Y+8, r19	; 0x08
    24cc:	2f 83       	std	Y+7, r18	; 0x07
    24ce:	8f 81       	ldd	r24, Y+7	; 0x07
    24d0:	98 85       	ldd	r25, Y+8	; 0x08
    24d2:	81 30       	cpi	r24, 0x01	; 1
    24d4:	91 05       	cpc	r25, r1
    24d6:	59 f1       	breq	.+86     	; 0x252e <DIO_u8PinPullUp+0x9e>
    24d8:	2f 81       	ldd	r18, Y+7	; 0x07
    24da:	38 85       	ldd	r19, Y+8	; 0x08
    24dc:	22 30       	cpi	r18, 0x02	; 2
    24de:	31 05       	cpc	r19, r1
    24e0:	2c f4       	brge	.+10     	; 0x24ec <DIO_u8PinPullUp+0x5c>
    24e2:	8f 81       	ldd	r24, Y+7	; 0x07
    24e4:	98 85       	ldd	r25, Y+8	; 0x08
    24e6:	00 97       	sbiw	r24, 0x00	; 0
    24e8:	69 f0       	breq	.+26     	; 0x2504 <DIO_u8PinPullUp+0x74>
    24ea:	60 c0       	rjmp	.+192    	; 0x25ac <DIO_u8PinPullUp+0x11c>
    24ec:	2f 81       	ldd	r18, Y+7	; 0x07
    24ee:	38 85       	ldd	r19, Y+8	; 0x08
    24f0:	22 30       	cpi	r18, 0x02	; 2
    24f2:	31 05       	cpc	r19, r1
    24f4:	89 f1       	breq	.+98     	; 0x2558 <DIO_u8PinPullUp+0xc8>
    24f6:	8f 81       	ldd	r24, Y+7	; 0x07
    24f8:	98 85       	ldd	r25, Y+8	; 0x08
    24fa:	83 30       	cpi	r24, 0x03	; 3
    24fc:	91 05       	cpc	r25, r1
    24fe:	09 f4       	brne	.+2      	; 0x2502 <DIO_u8PinPullUp+0x72>
    2500:	40 c0       	rjmp	.+128    	; 0x2582 <DIO_u8PinPullUp+0xf2>
    2502:	54 c0       	rjmp	.+168    	; 0x25ac <DIO_u8PinPullUp+0x11c>
			{
			case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
    2504:	ab e3       	ldi	r26, 0x3B	; 59
    2506:	b0 e0       	ldi	r27, 0x00	; 0
    2508:	eb e3       	ldi	r30, 0x3B	; 59
    250a:	f0 e0       	ldi	r31, 0x00	; 0
    250c:	80 81       	ld	r24, Z
    250e:	48 2f       	mov	r20, r24
    2510:	8b 81       	ldd	r24, Y+3	; 0x03
    2512:	28 2f       	mov	r18, r24
    2514:	30 e0       	ldi	r19, 0x00	; 0
    2516:	81 e0       	ldi	r24, 0x01	; 1
    2518:	90 e0       	ldi	r25, 0x00	; 0
    251a:	02 2e       	mov	r0, r18
    251c:	02 c0       	rjmp	.+4      	; 0x2522 <DIO_u8PinPullUp+0x92>
    251e:	88 0f       	add	r24, r24
    2520:	99 1f       	adc	r25, r25
    2522:	0a 94       	dec	r0
    2524:	e2 f7       	brpl	.-8      	; 0x251e <DIO_u8PinPullUp+0x8e>
    2526:	80 95       	com	r24
    2528:	84 23       	and	r24, r20
    252a:	8c 93       	st	X, r24
    252c:	ba c0       	rjmp	.+372    	; 0x26a2 <DIO_u8PinPullUp+0x212>
			case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
    252e:	a8 e3       	ldi	r26, 0x38	; 56
    2530:	b0 e0       	ldi	r27, 0x00	; 0
    2532:	e8 e3       	ldi	r30, 0x38	; 56
    2534:	f0 e0       	ldi	r31, 0x00	; 0
    2536:	80 81       	ld	r24, Z
    2538:	48 2f       	mov	r20, r24
    253a:	8b 81       	ldd	r24, Y+3	; 0x03
    253c:	28 2f       	mov	r18, r24
    253e:	30 e0       	ldi	r19, 0x00	; 0
    2540:	81 e0       	ldi	r24, 0x01	; 1
    2542:	90 e0       	ldi	r25, 0x00	; 0
    2544:	02 2e       	mov	r0, r18
    2546:	02 c0       	rjmp	.+4      	; 0x254c <DIO_u8PinPullUp+0xbc>
    2548:	88 0f       	add	r24, r24
    254a:	99 1f       	adc	r25, r25
    254c:	0a 94       	dec	r0
    254e:	e2 f7       	brpl	.-8      	; 0x2548 <DIO_u8PinPullUp+0xb8>
    2550:	80 95       	com	r24
    2552:	84 23       	and	r24, r20
    2554:	8c 93       	st	X, r24
    2556:	a5 c0       	rjmp	.+330    	; 0x26a2 <DIO_u8PinPullUp+0x212>
			case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin); break;
    2558:	a5 e3       	ldi	r26, 0x35	; 53
    255a:	b0 e0       	ldi	r27, 0x00	; 0
    255c:	e5 e3       	ldi	r30, 0x35	; 53
    255e:	f0 e0       	ldi	r31, 0x00	; 0
    2560:	80 81       	ld	r24, Z
    2562:	48 2f       	mov	r20, r24
    2564:	8b 81       	ldd	r24, Y+3	; 0x03
    2566:	28 2f       	mov	r18, r24
    2568:	30 e0       	ldi	r19, 0x00	; 0
    256a:	81 e0       	ldi	r24, 0x01	; 1
    256c:	90 e0       	ldi	r25, 0x00	; 0
    256e:	02 2e       	mov	r0, r18
    2570:	02 c0       	rjmp	.+4      	; 0x2576 <DIO_u8PinPullUp+0xe6>
    2572:	88 0f       	add	r24, r24
    2574:	99 1f       	adc	r25, r25
    2576:	0a 94       	dec	r0
    2578:	e2 f7       	brpl	.-8      	; 0x2572 <DIO_u8PinPullUp+0xe2>
    257a:	80 95       	com	r24
    257c:	84 23       	and	r24, r20
    257e:	8c 93       	st	X, r24
    2580:	90 c0       	rjmp	.+288    	; 0x26a2 <DIO_u8PinPullUp+0x212>
			case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin); break;
    2582:	a2 e3       	ldi	r26, 0x32	; 50
    2584:	b0 e0       	ldi	r27, 0x00	; 0
    2586:	e2 e3       	ldi	r30, 0x32	; 50
    2588:	f0 e0       	ldi	r31, 0x00	; 0
    258a:	80 81       	ld	r24, Z
    258c:	48 2f       	mov	r20, r24
    258e:	8b 81       	ldd	r24, Y+3	; 0x03
    2590:	28 2f       	mov	r18, r24
    2592:	30 e0       	ldi	r19, 0x00	; 0
    2594:	81 e0       	ldi	r24, 0x01	; 1
    2596:	90 e0       	ldi	r25, 0x00	; 0
    2598:	02 2e       	mov	r0, r18
    259a:	02 c0       	rjmp	.+4      	; 0x25a0 <DIO_u8PinPullUp+0x110>
    259c:	88 0f       	add	r24, r24
    259e:	99 1f       	adc	r25, r25
    25a0:	0a 94       	dec	r0
    25a2:	e2 f7       	brpl	.-8      	; 0x259c <DIO_u8PinPullUp+0x10c>
    25a4:	80 95       	com	r24
    25a6:	84 23       	and	r24, r20
    25a8:	8c 93       	st	X, r24
    25aa:	7b c0       	rjmp	.+246    	; 0x26a2 <DIO_u8PinPullUp+0x212>
			default: Local_u8ErrorState =1; break;
    25ac:	81 e0       	ldi	r24, 0x01	; 1
    25ae:	89 83       	std	Y+1, r24	; 0x01
    25b0:	78 c0       	rjmp	.+240    	; 0x26a2 <DIO_u8PinPullUp+0x212>

			}
		}
		else if(Copy_u8State == DIO_u8PIN_PullUpEN)
    25b2:	8c 81       	ldd	r24, Y+4	; 0x04
    25b4:	81 30       	cpi	r24, 0x01	; 1
    25b6:	09 f0       	breq	.+2      	; 0x25ba <DIO_u8PinPullUp+0x12a>
    25b8:	72 c0       	rjmp	.+228    	; 0x269e <DIO_u8PinPullUp+0x20e>
		{

			switch(Copy_u8port)
    25ba:	8a 81       	ldd	r24, Y+2	; 0x02
    25bc:	28 2f       	mov	r18, r24
    25be:	30 e0       	ldi	r19, 0x00	; 0
    25c0:	3e 83       	std	Y+6, r19	; 0x06
    25c2:	2d 83       	std	Y+5, r18	; 0x05
    25c4:	8d 81       	ldd	r24, Y+5	; 0x05
    25c6:	9e 81       	ldd	r25, Y+6	; 0x06
    25c8:	81 30       	cpi	r24, 0x01	; 1
    25ca:	91 05       	cpc	r25, r1
    25cc:	49 f1       	breq	.+82     	; 0x2620 <DIO_u8PinPullUp+0x190>
    25ce:	2d 81       	ldd	r18, Y+5	; 0x05
    25d0:	3e 81       	ldd	r19, Y+6	; 0x06
    25d2:	22 30       	cpi	r18, 0x02	; 2
    25d4:	31 05       	cpc	r19, r1
    25d6:	2c f4       	brge	.+10     	; 0x25e2 <DIO_u8PinPullUp+0x152>
    25d8:	8d 81       	ldd	r24, Y+5	; 0x05
    25da:	9e 81       	ldd	r25, Y+6	; 0x06
    25dc:	00 97       	sbiw	r24, 0x00	; 0
    25de:	61 f0       	breq	.+24     	; 0x25f8 <DIO_u8PinPullUp+0x168>
    25e0:	5b c0       	rjmp	.+182    	; 0x2698 <DIO_u8PinPullUp+0x208>
    25e2:	2d 81       	ldd	r18, Y+5	; 0x05
    25e4:	3e 81       	ldd	r19, Y+6	; 0x06
    25e6:	22 30       	cpi	r18, 0x02	; 2
    25e8:	31 05       	cpc	r19, r1
    25ea:	71 f1       	breq	.+92     	; 0x2648 <DIO_u8PinPullUp+0x1b8>
    25ec:	8d 81       	ldd	r24, Y+5	; 0x05
    25ee:	9e 81       	ldd	r25, Y+6	; 0x06
    25f0:	83 30       	cpi	r24, 0x03	; 3
    25f2:	91 05       	cpc	r25, r1
    25f4:	e9 f1       	breq	.+122    	; 0x2670 <DIO_u8PinPullUp+0x1e0>
    25f6:	50 c0       	rjmp	.+160    	; 0x2698 <DIO_u8PinPullUp+0x208>
			{
			case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
    25f8:	ab e3       	ldi	r26, 0x3B	; 59
    25fa:	b0 e0       	ldi	r27, 0x00	; 0
    25fc:	eb e3       	ldi	r30, 0x3B	; 59
    25fe:	f0 e0       	ldi	r31, 0x00	; 0
    2600:	80 81       	ld	r24, Z
    2602:	48 2f       	mov	r20, r24
    2604:	8b 81       	ldd	r24, Y+3	; 0x03
    2606:	28 2f       	mov	r18, r24
    2608:	30 e0       	ldi	r19, 0x00	; 0
    260a:	81 e0       	ldi	r24, 0x01	; 1
    260c:	90 e0       	ldi	r25, 0x00	; 0
    260e:	02 2e       	mov	r0, r18
    2610:	02 c0       	rjmp	.+4      	; 0x2616 <DIO_u8PinPullUp+0x186>
    2612:	88 0f       	add	r24, r24
    2614:	99 1f       	adc	r25, r25
    2616:	0a 94       	dec	r0
    2618:	e2 f7       	brpl	.-8      	; 0x2612 <DIO_u8PinPullUp+0x182>
    261a:	84 2b       	or	r24, r20
    261c:	8c 93       	st	X, r24
    261e:	41 c0       	rjmp	.+130    	; 0x26a2 <DIO_u8PinPullUp+0x212>
			case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
    2620:	a8 e3       	ldi	r26, 0x38	; 56
    2622:	b0 e0       	ldi	r27, 0x00	; 0
    2624:	e8 e3       	ldi	r30, 0x38	; 56
    2626:	f0 e0       	ldi	r31, 0x00	; 0
    2628:	80 81       	ld	r24, Z
    262a:	48 2f       	mov	r20, r24
    262c:	8b 81       	ldd	r24, Y+3	; 0x03
    262e:	28 2f       	mov	r18, r24
    2630:	30 e0       	ldi	r19, 0x00	; 0
    2632:	81 e0       	ldi	r24, 0x01	; 1
    2634:	90 e0       	ldi	r25, 0x00	; 0
    2636:	02 2e       	mov	r0, r18
    2638:	02 c0       	rjmp	.+4      	; 0x263e <DIO_u8PinPullUp+0x1ae>
    263a:	88 0f       	add	r24, r24
    263c:	99 1f       	adc	r25, r25
    263e:	0a 94       	dec	r0
    2640:	e2 f7       	brpl	.-8      	; 0x263a <DIO_u8PinPullUp+0x1aa>
    2642:	84 2b       	or	r24, r20
    2644:	8c 93       	st	X, r24
    2646:	2d c0       	rjmp	.+90     	; 0x26a2 <DIO_u8PinPullUp+0x212>
			case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin); break;
    2648:	a5 e3       	ldi	r26, 0x35	; 53
    264a:	b0 e0       	ldi	r27, 0x00	; 0
    264c:	e5 e3       	ldi	r30, 0x35	; 53
    264e:	f0 e0       	ldi	r31, 0x00	; 0
    2650:	80 81       	ld	r24, Z
    2652:	48 2f       	mov	r20, r24
    2654:	8b 81       	ldd	r24, Y+3	; 0x03
    2656:	28 2f       	mov	r18, r24
    2658:	30 e0       	ldi	r19, 0x00	; 0
    265a:	81 e0       	ldi	r24, 0x01	; 1
    265c:	90 e0       	ldi	r25, 0x00	; 0
    265e:	02 2e       	mov	r0, r18
    2660:	02 c0       	rjmp	.+4      	; 0x2666 <DIO_u8PinPullUp+0x1d6>
    2662:	88 0f       	add	r24, r24
    2664:	99 1f       	adc	r25, r25
    2666:	0a 94       	dec	r0
    2668:	e2 f7       	brpl	.-8      	; 0x2662 <DIO_u8PinPullUp+0x1d2>
    266a:	84 2b       	or	r24, r20
    266c:	8c 93       	st	X, r24
    266e:	19 c0       	rjmp	.+50     	; 0x26a2 <DIO_u8PinPullUp+0x212>
			case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin); break;
    2670:	a2 e3       	ldi	r26, 0x32	; 50
    2672:	b0 e0       	ldi	r27, 0x00	; 0
    2674:	e2 e3       	ldi	r30, 0x32	; 50
    2676:	f0 e0       	ldi	r31, 0x00	; 0
    2678:	80 81       	ld	r24, Z
    267a:	48 2f       	mov	r20, r24
    267c:	8b 81       	ldd	r24, Y+3	; 0x03
    267e:	28 2f       	mov	r18, r24
    2680:	30 e0       	ldi	r19, 0x00	; 0
    2682:	81 e0       	ldi	r24, 0x01	; 1
    2684:	90 e0       	ldi	r25, 0x00	; 0
    2686:	02 2e       	mov	r0, r18
    2688:	02 c0       	rjmp	.+4      	; 0x268e <DIO_u8PinPullUp+0x1fe>
    268a:	88 0f       	add	r24, r24
    268c:	99 1f       	adc	r25, r25
    268e:	0a 94       	dec	r0
    2690:	e2 f7       	brpl	.-8      	; 0x268a <DIO_u8PinPullUp+0x1fa>
    2692:	84 2b       	or	r24, r20
    2694:	8c 93       	st	X, r24
    2696:	05 c0       	rjmp	.+10     	; 0x26a2 <DIO_u8PinPullUp+0x212>
			default: Local_u8ErrorState =1; break;
    2698:	81 e0       	ldi	r24, 0x01	; 1
    269a:	89 83       	std	Y+1, r24	; 0x01
    269c:	02 c0       	rjmp	.+4      	; 0x26a2 <DIO_u8PinPullUp+0x212>

			}
		}
		else
		{
			Local_u8ErrorState = 1;
    269e:	81 e0       	ldi	r24, 0x01	; 1
    26a0:	89 83       	std	Y+1, r24	; 0x01
		}

	}

	return Local_u8ErrorState;
    26a2:	89 81       	ldd	r24, Y+1	; 0x01
}
    26a4:	28 96       	adiw	r28, 0x08	; 8
    26a6:	0f b6       	in	r0, 0x3f	; 63
    26a8:	f8 94       	cli
    26aa:	de bf       	out	0x3e, r29	; 62
    26ac:	0f be       	out	0x3f, r0	; 63
    26ae:	cd bf       	out	0x3d, r28	; 61
    26b0:	cf 91       	pop	r28
    26b2:	df 91       	pop	r29
    26b4:	08 95       	ret

000026b6 <LED_u8Init>:
#include "LED_interface.h"
#include "LED_config.h"
#include "LED_private.h"

u8 LED_u8Init(LED_t* LED)
{
    26b6:	df 93       	push	r29
    26b8:	cf 93       	push	r28
    26ba:	00 d0       	rcall	.+0      	; 0x26bc <LED_u8Init+0x6>
    26bc:	0f 92       	push	r0
    26be:	cd b7       	in	r28, 0x3d	; 61
    26c0:	de b7       	in	r29, 0x3e	; 62
    26c2:	9b 83       	std	Y+3, r25	; 0x03
    26c4:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = 0;
    26c6:	19 82       	std	Y+1, r1	; 0x01

	if (LED->Copy_u8Port<=DIO_u8PORTD && LED ->Copy_u8Pin<=DIO_u8PIN7)
    26c8:	ea 81       	ldd	r30, Y+2	; 0x02
    26ca:	fb 81       	ldd	r31, Y+3	; 0x03
    26cc:	80 81       	ld	r24, Z
    26ce:	84 30       	cpi	r24, 0x04	; 4
    26d0:	80 f4       	brcc	.+32     	; 0x26f2 <LED_u8Init+0x3c>
    26d2:	ea 81       	ldd	r30, Y+2	; 0x02
    26d4:	fb 81       	ldd	r31, Y+3	; 0x03
    26d6:	81 81       	ldd	r24, Z+1	; 0x01
    26d8:	88 30       	cpi	r24, 0x08	; 8
    26da:	58 f4       	brcc	.+22     	; 0x26f2 <LED_u8Init+0x3c>
	{
		DIO_u8SetPinDirection(LED->Copy_u8Port,LED->Copy_u8Pin,DIO_u8PIN_OUTPUT);
    26dc:	ea 81       	ldd	r30, Y+2	; 0x02
    26de:	fb 81       	ldd	r31, Y+3	; 0x03
    26e0:	80 81       	ld	r24, Z
    26e2:	ea 81       	ldd	r30, Y+2	; 0x02
    26e4:	fb 81       	ldd	r31, Y+3	; 0x03
    26e6:	91 81       	ldd	r25, Z+1	; 0x01
    26e8:	69 2f       	mov	r22, r25
    26ea:	41 e0       	ldi	r20, 0x01	; 1
    26ec:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <DIO_u8SetPinDirection>
    26f0:	02 c0       	rjmp	.+4      	; 0x26f6 <LED_u8Init+0x40>

	}
	else
	{
		Local_u8ErrorState = 1;
    26f2:	81 e0       	ldi	r24, 0x01	; 1
    26f4:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    26f6:	89 81       	ldd	r24, Y+1	; 0x01
}
    26f8:	0f 90       	pop	r0
    26fa:	0f 90       	pop	r0
    26fc:	0f 90       	pop	r0
    26fe:	cf 91       	pop	r28
    2700:	df 91       	pop	r29
    2702:	08 95       	ret

00002704 <LED_u8TurnOn>:


u8 LED_u8TurnOn(LED_t* LED)
{
    2704:	df 93       	push	r29
    2706:	cf 93       	push	r28
    2708:	00 d0       	rcall	.+0      	; 0x270a <LED_u8TurnOn+0x6>
    270a:	0f 92       	push	r0
    270c:	cd b7       	in	r28, 0x3d	; 61
    270e:	de b7       	in	r29, 0x3e	; 62
    2710:	9b 83       	std	Y+3, r25	; 0x03
    2712:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = 0;
    2714:	19 82       	std	Y+1, r1	; 0x01


	if(LED->Copy_u8ConnecType == LED_u8_CONNEC_SINK)
    2716:	ea 81       	ldd	r30, Y+2	; 0x02
    2718:	fb 81       	ldd	r31, Y+3	; 0x03
    271a:	82 81       	ldd	r24, Z+2	; 0x02
    271c:	88 23       	and	r24, r24
    271e:	59 f4       	brne	.+22     	; 0x2736 <LED_u8TurnOn+0x32>
	{
		DIO_u8SetPinValue(LED->Copy_u8Port,LED->Copy_u8Pin,DIO_u8PIN_LOW);
    2720:	ea 81       	ldd	r30, Y+2	; 0x02
    2722:	fb 81       	ldd	r31, Y+3	; 0x03
    2724:	80 81       	ld	r24, Z
    2726:	ea 81       	ldd	r30, Y+2	; 0x02
    2728:	fb 81       	ldd	r31, Y+3	; 0x03
    272a:	91 81       	ldd	r25, Z+1	; 0x01
    272c:	69 2f       	mov	r22, r25
    272e:	40 e0       	ldi	r20, 0x00	; 0
    2730:	0e 94 50 10 	call	0x20a0	; 0x20a0 <DIO_u8SetPinValue>
    2734:	12 c0       	rjmp	.+36     	; 0x275a <LED_u8TurnOn+0x56>

	}
	else if(LED->Copy_u8ConnecType == LED_u8_CONNEC_SOURCE)
    2736:	ea 81       	ldd	r30, Y+2	; 0x02
    2738:	fb 81       	ldd	r31, Y+3	; 0x03
    273a:	82 81       	ldd	r24, Z+2	; 0x02
    273c:	81 30       	cpi	r24, 0x01	; 1
    273e:	59 f4       	brne	.+22     	; 0x2756 <LED_u8TurnOn+0x52>
	{
		DIO_u8SetPinValue(LED->Copy_u8Port,LED->Copy_u8Pin,DIO_u8PIN_HIGH);
    2740:	ea 81       	ldd	r30, Y+2	; 0x02
    2742:	fb 81       	ldd	r31, Y+3	; 0x03
    2744:	80 81       	ld	r24, Z
    2746:	ea 81       	ldd	r30, Y+2	; 0x02
    2748:	fb 81       	ldd	r31, Y+3	; 0x03
    274a:	91 81       	ldd	r25, Z+1	; 0x01
    274c:	69 2f       	mov	r22, r25
    274e:	41 e0       	ldi	r20, 0x01	; 1
    2750:	0e 94 50 10 	call	0x20a0	; 0x20a0 <DIO_u8SetPinValue>
    2754:	02 c0       	rjmp	.+4      	; 0x275a <LED_u8TurnOn+0x56>
	}
	else
	{
		Local_u8ErrorState = 1;
    2756:	81 e0       	ldi	r24, 0x01	; 1
    2758:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    275a:	89 81       	ldd	r24, Y+1	; 0x01
}
    275c:	0f 90       	pop	r0
    275e:	0f 90       	pop	r0
    2760:	0f 90       	pop	r0
    2762:	cf 91       	pop	r28
    2764:	df 91       	pop	r29
    2766:	08 95       	ret

00002768 <LED_u8TurnOff>:

u8 LED_u8TurnOff(LED_t* LED)
{
    2768:	df 93       	push	r29
    276a:	cf 93       	push	r28
    276c:	00 d0       	rcall	.+0      	; 0x276e <LED_u8TurnOff+0x6>
    276e:	0f 92       	push	r0
    2770:	cd b7       	in	r28, 0x3d	; 61
    2772:	de b7       	in	r29, 0x3e	; 62
    2774:	9b 83       	std	Y+3, r25	; 0x03
    2776:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = 0;
    2778:	19 82       	std	Y+1, r1	; 0x01
	if(LED->Copy_u8ConnecType == LED_u8_CONNEC_SINK)
    277a:	ea 81       	ldd	r30, Y+2	; 0x02
    277c:	fb 81       	ldd	r31, Y+3	; 0x03
    277e:	82 81       	ldd	r24, Z+2	; 0x02
    2780:	88 23       	and	r24, r24
    2782:	59 f4       	brne	.+22     	; 0x279a <LED_u8TurnOff+0x32>
	{
		DIO_u8SetPinValue(LED->Copy_u8Port,LED->Copy_u8Pin,DIO_u8PIN_HIGH);
    2784:	ea 81       	ldd	r30, Y+2	; 0x02
    2786:	fb 81       	ldd	r31, Y+3	; 0x03
    2788:	80 81       	ld	r24, Z
    278a:	ea 81       	ldd	r30, Y+2	; 0x02
    278c:	fb 81       	ldd	r31, Y+3	; 0x03
    278e:	91 81       	ldd	r25, Z+1	; 0x01
    2790:	69 2f       	mov	r22, r25
    2792:	41 e0       	ldi	r20, 0x01	; 1
    2794:	0e 94 50 10 	call	0x20a0	; 0x20a0 <DIO_u8SetPinValue>
    2798:	12 c0       	rjmp	.+36     	; 0x27be <LED_u8TurnOff+0x56>

	}
	else if(LED->Copy_u8ConnecType == LED_u8_CONNEC_SOURCE)
    279a:	ea 81       	ldd	r30, Y+2	; 0x02
    279c:	fb 81       	ldd	r31, Y+3	; 0x03
    279e:	82 81       	ldd	r24, Z+2	; 0x02
    27a0:	81 30       	cpi	r24, 0x01	; 1
    27a2:	59 f4       	brne	.+22     	; 0x27ba <LED_u8TurnOff+0x52>
	{
		DIO_u8SetPinValue(LED->Copy_u8Port,LED->Copy_u8Pin,DIO_u8PIN_LOW);
    27a4:	ea 81       	ldd	r30, Y+2	; 0x02
    27a6:	fb 81       	ldd	r31, Y+3	; 0x03
    27a8:	80 81       	ld	r24, Z
    27aa:	ea 81       	ldd	r30, Y+2	; 0x02
    27ac:	fb 81       	ldd	r31, Y+3	; 0x03
    27ae:	91 81       	ldd	r25, Z+1	; 0x01
    27b0:	69 2f       	mov	r22, r25
    27b2:	40 e0       	ldi	r20, 0x00	; 0
    27b4:	0e 94 50 10 	call	0x20a0	; 0x20a0 <DIO_u8SetPinValue>
    27b8:	02 c0       	rjmp	.+4      	; 0x27be <LED_u8TurnOff+0x56>
	}
	else
	{
		Local_u8ErrorState = 1;
    27ba:	81 e0       	ldi	r24, 0x01	; 1
    27bc:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    27be:	89 81       	ldd	r24, Y+1	; 0x01
}
    27c0:	0f 90       	pop	r0
    27c2:	0f 90       	pop	r0
    27c4:	0f 90       	pop	r0
    27c6:	cf 91       	pop	r28
    27c8:	df 91       	pop	r29
    27ca:	08 95       	ret

000027cc <PB_u8Init>:
#include "PB_private.h"



u8 PB_u8Init(u8 Copy_u8Port, u8 Copy_u8Pin)
{
    27cc:	df 93       	push	r29
    27ce:	cf 93       	push	r28
    27d0:	00 d0       	rcall	.+0      	; 0x27d2 <PB_u8Init+0x6>
    27d2:	0f 92       	push	r0
    27d4:	cd b7       	in	r28, 0x3d	; 61
    27d6:	de b7       	in	r29, 0x3e	; 62
    27d8:	8a 83       	std	Y+2, r24	; 0x02
    27da:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    27dc:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8Port<=DIO_u8PORTD && Copy_u8Pin <= DIO_u8PIN7)
    27de:	8a 81       	ldd	r24, Y+2	; 0x02
    27e0:	84 30       	cpi	r24, 0x04	; 4
    27e2:	48 f4       	brcc	.+18     	; 0x27f6 <PB_u8Init+0x2a>
    27e4:	8b 81       	ldd	r24, Y+3	; 0x03
    27e6:	88 30       	cpi	r24, 0x08	; 8
    27e8:	30 f4       	brcc	.+12     	; 0x27f6 <PB_u8Init+0x2a>
	{
		DIO_u8SetPinDirection(Copy_u8Port, Copy_u8Pin, DIO_u8PIN_INPUT);
    27ea:	8a 81       	ldd	r24, Y+2	; 0x02
    27ec:	6b 81       	ldd	r22, Y+3	; 0x03
    27ee:	40 e0       	ldi	r20, 0x00	; 0
    27f0:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <DIO_u8SetPinDirection>
    27f4:	02 c0       	rjmp	.+4      	; 0x27fa <PB_u8Init+0x2e>
	}
	else
	{
		Local_u8ErrorState = 1;
    27f6:	81 e0       	ldi	r24, 0x01	; 1
    27f8:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_u8ErrorState;
    27fa:	89 81       	ldd	r24, Y+1	; 0x01
}
    27fc:	0f 90       	pop	r0
    27fe:	0f 90       	pop	r0
    2800:	0f 90       	pop	r0
    2802:	cf 91       	pop	r28
    2804:	df 91       	pop	r29
    2806:	08 95       	ret

00002808 <PB_u8GetState>:

u8 PB_u8GetState(u8 Copy_u8Port, u8 Copy_u8Pin, u8* Copy_Pu8Value)
{
    2808:	df 93       	push	r29
    280a:	cf 93       	push	r28
    280c:	cd b7       	in	r28, 0x3d	; 61
    280e:	de b7       	in	r29, 0x3e	; 62
    2810:	64 97       	sbiw	r28, 0x14	; 20
    2812:	0f b6       	in	r0, 0x3f	; 63
    2814:	f8 94       	cli
    2816:	de bf       	out	0x3e, r29	; 62
    2818:	0f be       	out	0x3f, r0	; 63
    281a:	cd bf       	out	0x3d, r28	; 61
    281c:	89 8b       	std	Y+17, r24	; 0x11
    281e:	6a 8b       	std	Y+18, r22	; 0x12
    2820:	5c 8b       	std	Y+20, r21	; 0x14
    2822:	4b 8b       	std	Y+19, r20	; 0x13
		u8 Local_u8ErrorState=0;
    2824:	1f 86       	std	Y+15, r1	; 0x0f
		u8 Local_u8PinState=1;
    2826:	81 e0       	ldi	r24, 0x01	; 1
    2828:	88 8b       	std	Y+16, r24	; 0x10
		if (Copy_u8Port<=DIO_u8PORTD && Copy_u8Pin <= DIO_u8PIN7)
    282a:	89 89       	ldd	r24, Y+17	; 0x11
    282c:	84 30       	cpi	r24, 0x04	; 4
    282e:	08 f0       	brcs	.+2      	; 0x2832 <PB_u8GetState+0x2a>
    2830:	91 c0       	rjmp	.+290    	; 0x2954 <PB_u8GetState+0x14c>
    2832:	8a 89       	ldd	r24, Y+18	; 0x12
    2834:	88 30       	cpi	r24, 0x08	; 8
    2836:	08 f0       	brcs	.+2      	; 0x283a <PB_u8GetState+0x32>
    2838:	8d c0       	rjmp	.+282    	; 0x2954 <PB_u8GetState+0x14c>
		{
		DIO_u8GetPinValue(Copy_u8Port, Copy_u8Pin,&Local_u8PinState);
    283a:	9e 01       	movw	r18, r28
    283c:	20 5f       	subi	r18, 0xF0	; 240
    283e:	3f 4f       	sbci	r19, 0xFF	; 255
    2840:	89 89       	ldd	r24, Y+17	; 0x11
    2842:	6a 89       	ldd	r22, Y+18	; 0x12
    2844:	a9 01       	movw	r20, r18
    2846:	0e 94 b0 11 	call	0x2360	; 0x2360 <DIO_u8GetPinValue>

		if (Local_u8PinState == 0 )
    284a:	88 89       	ldd	r24, Y+16	; 0x10
    284c:	88 23       	and	r24, r24
    284e:	09 f0       	breq	.+2      	; 0x2852 <PB_u8GetState+0x4a>
    2850:	77 c0       	rjmp	.+238    	; 0x2940 <PB_u8GetState+0x138>
    2852:	80 e0       	ldi	r24, 0x00	; 0
    2854:	90 e0       	ldi	r25, 0x00	; 0
    2856:	a6 e1       	ldi	r26, 0x16	; 22
    2858:	b3 e4       	ldi	r27, 0x43	; 67
    285a:	8b 87       	std	Y+11, r24	; 0x0b
    285c:	9c 87       	std	Y+12, r25	; 0x0c
    285e:	ad 87       	std	Y+13, r26	; 0x0d
    2860:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2862:	6b 85       	ldd	r22, Y+11	; 0x0b
    2864:	7c 85       	ldd	r23, Y+12	; 0x0c
    2866:	8d 85       	ldd	r24, Y+13	; 0x0d
    2868:	9e 85       	ldd	r25, Y+14	; 0x0e
    286a:	20 e0       	ldi	r18, 0x00	; 0
    286c:	30 e0       	ldi	r19, 0x00	; 0
    286e:	4a ef       	ldi	r20, 0xFA	; 250
    2870:	54 e4       	ldi	r21, 0x44	; 68
    2872:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2876:	dc 01       	movw	r26, r24
    2878:	cb 01       	movw	r24, r22
    287a:	8f 83       	std	Y+7, r24	; 0x07
    287c:	98 87       	std	Y+8, r25	; 0x08
    287e:	a9 87       	std	Y+9, r26	; 0x09
    2880:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2882:	6f 81       	ldd	r22, Y+7	; 0x07
    2884:	78 85       	ldd	r23, Y+8	; 0x08
    2886:	89 85       	ldd	r24, Y+9	; 0x09
    2888:	9a 85       	ldd	r25, Y+10	; 0x0a
    288a:	20 e0       	ldi	r18, 0x00	; 0
    288c:	30 e0       	ldi	r19, 0x00	; 0
    288e:	40 e8       	ldi	r20, 0x80	; 128
    2890:	5f e3       	ldi	r21, 0x3F	; 63
    2892:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2896:	88 23       	and	r24, r24
    2898:	2c f4       	brge	.+10     	; 0x28a4 <PB_u8GetState+0x9c>
		__ticks = 1;
    289a:	81 e0       	ldi	r24, 0x01	; 1
    289c:	90 e0       	ldi	r25, 0x00	; 0
    289e:	9e 83       	std	Y+6, r25	; 0x06
    28a0:	8d 83       	std	Y+5, r24	; 0x05
    28a2:	3f c0       	rjmp	.+126    	; 0x2922 <PB_u8GetState+0x11a>
	else if (__tmp > 65535)
    28a4:	6f 81       	ldd	r22, Y+7	; 0x07
    28a6:	78 85       	ldd	r23, Y+8	; 0x08
    28a8:	89 85       	ldd	r24, Y+9	; 0x09
    28aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    28ac:	20 e0       	ldi	r18, 0x00	; 0
    28ae:	3f ef       	ldi	r19, 0xFF	; 255
    28b0:	4f e7       	ldi	r20, 0x7F	; 127
    28b2:	57 e4       	ldi	r21, 0x47	; 71
    28b4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    28b8:	18 16       	cp	r1, r24
    28ba:	4c f5       	brge	.+82     	; 0x290e <PB_u8GetState+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    28be:	7c 85       	ldd	r23, Y+12	; 0x0c
    28c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    28c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    28c4:	20 e0       	ldi	r18, 0x00	; 0
    28c6:	30 e0       	ldi	r19, 0x00	; 0
    28c8:	40 e2       	ldi	r20, 0x20	; 32
    28ca:	51 e4       	ldi	r21, 0x41	; 65
    28cc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28d0:	dc 01       	movw	r26, r24
    28d2:	cb 01       	movw	r24, r22
    28d4:	bc 01       	movw	r22, r24
    28d6:	cd 01       	movw	r24, r26
    28d8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28dc:	dc 01       	movw	r26, r24
    28de:	cb 01       	movw	r24, r22
    28e0:	9e 83       	std	Y+6, r25	; 0x06
    28e2:	8d 83       	std	Y+5, r24	; 0x05
    28e4:	0f c0       	rjmp	.+30     	; 0x2904 <PB_u8GetState+0xfc>
    28e6:	88 ec       	ldi	r24, 0xC8	; 200
    28e8:	90 e0       	ldi	r25, 0x00	; 0
    28ea:	9c 83       	std	Y+4, r25	; 0x04
    28ec:	8b 83       	std	Y+3, r24	; 0x03
    28ee:	8b 81       	ldd	r24, Y+3	; 0x03
    28f0:	9c 81       	ldd	r25, Y+4	; 0x04
    28f2:	01 97       	sbiw	r24, 0x01	; 1
    28f4:	f1 f7       	brne	.-4      	; 0x28f2 <PB_u8GetState+0xea>
    28f6:	9c 83       	std	Y+4, r25	; 0x04
    28f8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28fa:	8d 81       	ldd	r24, Y+5	; 0x05
    28fc:	9e 81       	ldd	r25, Y+6	; 0x06
    28fe:	01 97       	sbiw	r24, 0x01	; 1
    2900:	9e 83       	std	Y+6, r25	; 0x06
    2902:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2904:	8d 81       	ldd	r24, Y+5	; 0x05
    2906:	9e 81       	ldd	r25, Y+6	; 0x06
    2908:	00 97       	sbiw	r24, 0x00	; 0
    290a:	69 f7       	brne	.-38     	; 0x28e6 <PB_u8GetState+0xde>
    290c:	14 c0       	rjmp	.+40     	; 0x2936 <PB_u8GetState+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    290e:	6f 81       	ldd	r22, Y+7	; 0x07
    2910:	78 85       	ldd	r23, Y+8	; 0x08
    2912:	89 85       	ldd	r24, Y+9	; 0x09
    2914:	9a 85       	ldd	r25, Y+10	; 0x0a
    2916:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    291a:	dc 01       	movw	r26, r24
    291c:	cb 01       	movw	r24, r22
    291e:	9e 83       	std	Y+6, r25	; 0x06
    2920:	8d 83       	std	Y+5, r24	; 0x05
    2922:	8d 81       	ldd	r24, Y+5	; 0x05
    2924:	9e 81       	ldd	r25, Y+6	; 0x06
    2926:	9a 83       	std	Y+2, r25	; 0x02
    2928:	89 83       	std	Y+1, r24	; 0x01
    292a:	89 81       	ldd	r24, Y+1	; 0x01
    292c:	9a 81       	ldd	r25, Y+2	; 0x02
    292e:	01 97       	sbiw	r24, 0x01	; 1
    2930:	f1 f7       	brne	.-4      	; 0x292e <PB_u8GetState+0x126>
    2932:	9a 83       	std	Y+2, r25	; 0x02
    2934:	89 83       	std	Y+1, r24	; 0x01
		{
			_delay_ms(150);
			//while(Local_u8PinState == 0 ); /* not working */
			*Copy_Pu8Value = 1;
    2936:	eb 89       	ldd	r30, Y+19	; 0x13
    2938:	fc 89       	ldd	r31, Y+20	; 0x14
    293a:	81 e0       	ldi	r24, 0x01	; 1
    293c:	80 83       	st	Z, r24
    293e:	0c c0       	rjmp	.+24     	; 0x2958 <PB_u8GetState+0x150>
		}
		else if (Local_u8PinState == 1 )
    2940:	88 89       	ldd	r24, Y+16	; 0x10
    2942:	81 30       	cpi	r24, 0x01	; 1
    2944:	21 f4       	brne	.+8      	; 0x294e <PB_u8GetState+0x146>
		{
			*Copy_Pu8Value = 0;
    2946:	eb 89       	ldd	r30, Y+19	; 0x13
    2948:	fc 89       	ldd	r31, Y+20	; 0x14
    294a:	10 82       	st	Z, r1
    294c:	05 c0       	rjmp	.+10     	; 0x2958 <PB_u8GetState+0x150>
		}

		else
		{
			Local_u8ErrorState = 1;
    294e:	81 e0       	ldi	r24, 0x01	; 1
    2950:	8f 87       	std	Y+15, r24	; 0x0f
    2952:	02 c0       	rjmp	.+4      	; 0x2958 <PB_u8GetState+0x150>

		}

		else
		{
			Local_u8ErrorState = 1;
    2954:	81 e0       	ldi	r24, 0x01	; 1
    2956:	8f 87       	std	Y+15, r24	; 0x0f
		}


		return Local_u8ErrorState;
    2958:	8f 85       	ldd	r24, Y+15	; 0x0f

}
    295a:	64 96       	adiw	r28, 0x14	; 20
    295c:	0f b6       	in	r0, 0x3f	; 63
    295e:	f8 94       	cli
    2960:	de bf       	out	0x3e, r29	; 62
    2962:	0f be       	out	0x3f, r0	; 63
    2964:	cd bf       	out	0x3d, r28	; 61
    2966:	cf 91       	pop	r28
    2968:	df 91       	pop	r29
    296a:	08 95       	ret

0000296c <SSD_u8Init>:
		0b11111010,0b00001110,0b11111110,
		0b11011110};

u8 SSD_u8Init(void)

{
    296c:	df 93       	push	r29
    296e:	cf 93       	push	r28
    2970:	0f 92       	push	r0
    2972:	cd b7       	in	r28, 0x3d	; 61
    2974:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8ErrorState = 0;
    2976:	19 82       	std	Y+1, r1	; 0x01

	DIO_u8SetPortDirection(DIO_u8PORTA,254);   /* SSD PORT */
    2978:	80 e0       	ldi	r24, 0x00	; 0
    297a:	6e ef       	ldi	r22, 0xFE	; 254
    297c:	0e 94 02 10 	call	0x2004	; 0x2004 <DIO_u8SetPortDirection>
	DIO_u8SetPinDirection(DIO_u8PORTC,DIO_u8PIN6,DIO_u8PIN_OUTPUT);    /* SSD1 EN PIN */
    2980:	82 e0       	ldi	r24, 0x02	; 2
    2982:	66 e0       	ldi	r22, 0x06	; 6
    2984:	41 e0       	ldi	r20, 0x01	; 1
    2986:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTC,DIO_u8PIN7,DIO_u8PIN_OUTPUT);   /* SSD2 EN PIN */
    298a:	82 e0       	ldi	r24, 0x02	; 2
    298c:	67 e0       	ldi	r22, 0x07	; 7
    298e:	41 e0       	ldi	r20, 0x01	; 1
    2990:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <DIO_u8SetPinDirection>


	return Local_u8ErrorState;
    2994:	89 81       	ldd	r24, Y+1	; 0x01

}
    2996:	0f 90       	pop	r0
    2998:	cf 91       	pop	r28
    299a:	df 91       	pop	r29
    299c:	08 95       	ret

0000299e <SSD_u8DisplayBlink>:

u8 SSD_u8DisplayBlink(u8 Copy_u8number)
{
    299e:	df 93       	push	r29
    29a0:	cf 93       	push	r28
    29a2:	cd b7       	in	r28, 0x3d	; 61
    29a4:	de b7       	in	r29, 0x3e	; 62
    29a6:	a1 97       	sbiw	r28, 0x21	; 33
    29a8:	0f b6       	in	r0, 0x3f	; 63
    29aa:	f8 94       	cli
    29ac:	de bf       	out	0x3e, r29	; 62
    29ae:	0f be       	out	0x3f, r0	; 63
    29b0:	cd bf       	out	0x3d, r28	; 61
    29b2:	89 a3       	std	Y+33, r24	; 0x21
	u8 Local_u8ErrorState = 0;
    29b4:	18 a2       	std	Y+32, r1	; 0x20

	u8 i;
	u8 ones = Copy_u8number%10;
    29b6:	89 a1       	ldd	r24, Y+33	; 0x21
    29b8:	9a e0       	ldi	r25, 0x0A	; 10
    29ba:	69 2f       	mov	r22, r25
    29bc:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <__udivmodqi4>
    29c0:	89 2f       	mov	r24, r25
    29c2:	8e 8f       	std	Y+30, r24	; 0x1e
	u8 tens = Copy_u8number/10;
    29c4:	89 a1       	ldd	r24, Y+33	; 0x21
    29c6:	9a e0       	ldi	r25, 0x0A	; 10
    29c8:	69 2f       	mov	r22, r25
    29ca:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <__udivmodqi4>
    29ce:	8d 8f       	std	Y+29, r24	; 0x1d

	for(i=0;i<185;i++)
    29d0:	1f 8e       	std	Y+31, r1	; 0x1f
    29d2:	1b c1       	rjmp	.+566    	; 0x2c0a <SSD_u8DisplayBlink+0x26c>
	{
		DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN6,DIO_u8PIN_HIGH);
    29d4:	82 e0       	ldi	r24, 0x02	; 2
    29d6:	66 e0       	ldi	r22, 0x06	; 6
    29d8:	41 e0       	ldi	r20, 0x01	; 1
    29da:	0e 94 50 10 	call	0x20a0	; 0x20a0 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN7,DIO_u8PIN_LOW);
    29de:	82 e0       	ldi	r24, 0x02	; 2
    29e0:	67 e0       	ldi	r22, 0x07	; 7
    29e2:	40 e0       	ldi	r20, 0x00	; 0
    29e4:	0e 94 50 10 	call	0x20a0	; 0x20a0 <DIO_u8SetPinValue>
		DIO_u8SetPortValue(DIO_u8PORTA,seven_seg[ones]);
    29e8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    29ea:	88 2f       	mov	r24, r24
    29ec:	90 e0       	ldi	r25, 0x00	; 0
    29ee:	fc 01       	movw	r30, r24
    29f0:	e8 59       	subi	r30, 0x98	; 152
    29f2:	ff 4f       	sbci	r31, 0xFF	; 255
    29f4:	90 81       	ld	r25, Z
    29f6:	80 e0       	ldi	r24, 0x00	; 0
    29f8:	69 2f       	mov	r22, r25
    29fa:	0e 94 62 11 	call	0x22c4	; 0x22c4 <DIO_u8SetPortValue>
    29fe:	80 e0       	ldi	r24, 0x00	; 0
    2a00:	90 e0       	ldi	r25, 0x00	; 0
    2a02:	a0 ea       	ldi	r26, 0xA0	; 160
    2a04:	b0 e4       	ldi	r27, 0x40	; 64
    2a06:	89 8f       	std	Y+25, r24	; 0x19
    2a08:	9a 8f       	std	Y+26, r25	; 0x1a
    2a0a:	ab 8f       	std	Y+27, r26	; 0x1b
    2a0c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a0e:	69 8d       	ldd	r22, Y+25	; 0x19
    2a10:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a12:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a14:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a16:	20 e0       	ldi	r18, 0x00	; 0
    2a18:	30 e0       	ldi	r19, 0x00	; 0
    2a1a:	4a ef       	ldi	r20, 0xFA	; 250
    2a1c:	54 e4       	ldi	r21, 0x44	; 68
    2a1e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a22:	dc 01       	movw	r26, r24
    2a24:	cb 01       	movw	r24, r22
    2a26:	8d 8b       	std	Y+21, r24	; 0x15
    2a28:	9e 8b       	std	Y+22, r25	; 0x16
    2a2a:	af 8b       	std	Y+23, r26	; 0x17
    2a2c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2a2e:	6d 89       	ldd	r22, Y+21	; 0x15
    2a30:	7e 89       	ldd	r23, Y+22	; 0x16
    2a32:	8f 89       	ldd	r24, Y+23	; 0x17
    2a34:	98 8d       	ldd	r25, Y+24	; 0x18
    2a36:	20 e0       	ldi	r18, 0x00	; 0
    2a38:	30 e0       	ldi	r19, 0x00	; 0
    2a3a:	40 e8       	ldi	r20, 0x80	; 128
    2a3c:	5f e3       	ldi	r21, 0x3F	; 63
    2a3e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2a42:	88 23       	and	r24, r24
    2a44:	2c f4       	brge	.+10     	; 0x2a50 <SSD_u8DisplayBlink+0xb2>
		__ticks = 1;
    2a46:	81 e0       	ldi	r24, 0x01	; 1
    2a48:	90 e0       	ldi	r25, 0x00	; 0
    2a4a:	9c 8b       	std	Y+20, r25	; 0x14
    2a4c:	8b 8b       	std	Y+19, r24	; 0x13
    2a4e:	3f c0       	rjmp	.+126    	; 0x2ace <SSD_u8DisplayBlink+0x130>
	else if (__tmp > 65535)
    2a50:	6d 89       	ldd	r22, Y+21	; 0x15
    2a52:	7e 89       	ldd	r23, Y+22	; 0x16
    2a54:	8f 89       	ldd	r24, Y+23	; 0x17
    2a56:	98 8d       	ldd	r25, Y+24	; 0x18
    2a58:	20 e0       	ldi	r18, 0x00	; 0
    2a5a:	3f ef       	ldi	r19, 0xFF	; 255
    2a5c:	4f e7       	ldi	r20, 0x7F	; 127
    2a5e:	57 e4       	ldi	r21, 0x47	; 71
    2a60:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2a64:	18 16       	cp	r1, r24
    2a66:	4c f5       	brge	.+82     	; 0x2aba <SSD_u8DisplayBlink+0x11c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a68:	69 8d       	ldd	r22, Y+25	; 0x19
    2a6a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a6c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a6e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a70:	20 e0       	ldi	r18, 0x00	; 0
    2a72:	30 e0       	ldi	r19, 0x00	; 0
    2a74:	40 e2       	ldi	r20, 0x20	; 32
    2a76:	51 e4       	ldi	r21, 0x41	; 65
    2a78:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a7c:	dc 01       	movw	r26, r24
    2a7e:	cb 01       	movw	r24, r22
    2a80:	bc 01       	movw	r22, r24
    2a82:	cd 01       	movw	r24, r26
    2a84:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a88:	dc 01       	movw	r26, r24
    2a8a:	cb 01       	movw	r24, r22
    2a8c:	9c 8b       	std	Y+20, r25	; 0x14
    2a8e:	8b 8b       	std	Y+19, r24	; 0x13
    2a90:	0f c0       	rjmp	.+30     	; 0x2ab0 <SSD_u8DisplayBlink+0x112>
    2a92:	88 ec       	ldi	r24, 0xC8	; 200
    2a94:	90 e0       	ldi	r25, 0x00	; 0
    2a96:	9a 8b       	std	Y+18, r25	; 0x12
    2a98:	89 8b       	std	Y+17, r24	; 0x11
    2a9a:	89 89       	ldd	r24, Y+17	; 0x11
    2a9c:	9a 89       	ldd	r25, Y+18	; 0x12
    2a9e:	01 97       	sbiw	r24, 0x01	; 1
    2aa0:	f1 f7       	brne	.-4      	; 0x2a9e <SSD_u8DisplayBlink+0x100>
    2aa2:	9a 8b       	std	Y+18, r25	; 0x12
    2aa4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2aa6:	8b 89       	ldd	r24, Y+19	; 0x13
    2aa8:	9c 89       	ldd	r25, Y+20	; 0x14
    2aaa:	01 97       	sbiw	r24, 0x01	; 1
    2aac:	9c 8b       	std	Y+20, r25	; 0x14
    2aae:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ab0:	8b 89       	ldd	r24, Y+19	; 0x13
    2ab2:	9c 89       	ldd	r25, Y+20	; 0x14
    2ab4:	00 97       	sbiw	r24, 0x00	; 0
    2ab6:	69 f7       	brne	.-38     	; 0x2a92 <SSD_u8DisplayBlink+0xf4>
    2ab8:	14 c0       	rjmp	.+40     	; 0x2ae2 <SSD_u8DisplayBlink+0x144>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2aba:	6d 89       	ldd	r22, Y+21	; 0x15
    2abc:	7e 89       	ldd	r23, Y+22	; 0x16
    2abe:	8f 89       	ldd	r24, Y+23	; 0x17
    2ac0:	98 8d       	ldd	r25, Y+24	; 0x18
    2ac2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ac6:	dc 01       	movw	r26, r24
    2ac8:	cb 01       	movw	r24, r22
    2aca:	9c 8b       	std	Y+20, r25	; 0x14
    2acc:	8b 8b       	std	Y+19, r24	; 0x13
    2ace:	8b 89       	ldd	r24, Y+19	; 0x13
    2ad0:	9c 89       	ldd	r25, Y+20	; 0x14
    2ad2:	98 8b       	std	Y+16, r25	; 0x10
    2ad4:	8f 87       	std	Y+15, r24	; 0x0f
    2ad6:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ad8:	98 89       	ldd	r25, Y+16	; 0x10
    2ada:	01 97       	sbiw	r24, 0x01	; 1
    2adc:	f1 f7       	brne	.-4      	; 0x2ada <SSD_u8DisplayBlink+0x13c>
    2ade:	98 8b       	std	Y+16, r25	; 0x10
    2ae0:	8f 87       	std	Y+15, r24	; 0x0f

		_delay_ms(5);
		DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN6,DIO_u8PIN_LOW);
    2ae2:	82 e0       	ldi	r24, 0x02	; 2
    2ae4:	66 e0       	ldi	r22, 0x06	; 6
    2ae6:	40 e0       	ldi	r20, 0x00	; 0
    2ae8:	0e 94 50 10 	call	0x20a0	; 0x20a0 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN7,DIO_u8PIN_HIGH);
    2aec:	82 e0       	ldi	r24, 0x02	; 2
    2aee:	67 e0       	ldi	r22, 0x07	; 7
    2af0:	41 e0       	ldi	r20, 0x01	; 1
    2af2:	0e 94 50 10 	call	0x20a0	; 0x20a0 <DIO_u8SetPinValue>
		DIO_u8SetPortValue(DIO_u8PORTA,seven_seg[tens]);
    2af6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2af8:	88 2f       	mov	r24, r24
    2afa:	90 e0       	ldi	r25, 0x00	; 0
    2afc:	fc 01       	movw	r30, r24
    2afe:	e8 59       	subi	r30, 0x98	; 152
    2b00:	ff 4f       	sbci	r31, 0xFF	; 255
    2b02:	90 81       	ld	r25, Z
    2b04:	80 e0       	ldi	r24, 0x00	; 0
    2b06:	69 2f       	mov	r22, r25
    2b08:	0e 94 62 11 	call	0x22c4	; 0x22c4 <DIO_u8SetPortValue>
    2b0c:	80 e0       	ldi	r24, 0x00	; 0
    2b0e:	90 e0       	ldi	r25, 0x00	; 0
    2b10:	a0 ea       	ldi	r26, 0xA0	; 160
    2b12:	b0 e4       	ldi	r27, 0x40	; 64
    2b14:	8b 87       	std	Y+11, r24	; 0x0b
    2b16:	9c 87       	std	Y+12, r25	; 0x0c
    2b18:	ad 87       	std	Y+13, r26	; 0x0d
    2b1a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b1c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b1e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b20:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b22:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b24:	20 e0       	ldi	r18, 0x00	; 0
    2b26:	30 e0       	ldi	r19, 0x00	; 0
    2b28:	4a ef       	ldi	r20, 0xFA	; 250
    2b2a:	54 e4       	ldi	r21, 0x44	; 68
    2b2c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b30:	dc 01       	movw	r26, r24
    2b32:	cb 01       	movw	r24, r22
    2b34:	8f 83       	std	Y+7, r24	; 0x07
    2b36:	98 87       	std	Y+8, r25	; 0x08
    2b38:	a9 87       	std	Y+9, r26	; 0x09
    2b3a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b3c:	6f 81       	ldd	r22, Y+7	; 0x07
    2b3e:	78 85       	ldd	r23, Y+8	; 0x08
    2b40:	89 85       	ldd	r24, Y+9	; 0x09
    2b42:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b44:	20 e0       	ldi	r18, 0x00	; 0
    2b46:	30 e0       	ldi	r19, 0x00	; 0
    2b48:	40 e8       	ldi	r20, 0x80	; 128
    2b4a:	5f e3       	ldi	r21, 0x3F	; 63
    2b4c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2b50:	88 23       	and	r24, r24
    2b52:	2c f4       	brge	.+10     	; 0x2b5e <SSD_u8DisplayBlink+0x1c0>
		__ticks = 1;
    2b54:	81 e0       	ldi	r24, 0x01	; 1
    2b56:	90 e0       	ldi	r25, 0x00	; 0
    2b58:	9e 83       	std	Y+6, r25	; 0x06
    2b5a:	8d 83       	std	Y+5, r24	; 0x05
    2b5c:	3f c0       	rjmp	.+126    	; 0x2bdc <SSD_u8DisplayBlink+0x23e>
	else if (__tmp > 65535)
    2b5e:	6f 81       	ldd	r22, Y+7	; 0x07
    2b60:	78 85       	ldd	r23, Y+8	; 0x08
    2b62:	89 85       	ldd	r24, Y+9	; 0x09
    2b64:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b66:	20 e0       	ldi	r18, 0x00	; 0
    2b68:	3f ef       	ldi	r19, 0xFF	; 255
    2b6a:	4f e7       	ldi	r20, 0x7F	; 127
    2b6c:	57 e4       	ldi	r21, 0x47	; 71
    2b6e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2b72:	18 16       	cp	r1, r24
    2b74:	4c f5       	brge	.+82     	; 0x2bc8 <SSD_u8DisplayBlink+0x22a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b76:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b78:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b7a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b7c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b7e:	20 e0       	ldi	r18, 0x00	; 0
    2b80:	30 e0       	ldi	r19, 0x00	; 0
    2b82:	40 e2       	ldi	r20, 0x20	; 32
    2b84:	51 e4       	ldi	r21, 0x41	; 65
    2b86:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b8a:	dc 01       	movw	r26, r24
    2b8c:	cb 01       	movw	r24, r22
    2b8e:	bc 01       	movw	r22, r24
    2b90:	cd 01       	movw	r24, r26
    2b92:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b96:	dc 01       	movw	r26, r24
    2b98:	cb 01       	movw	r24, r22
    2b9a:	9e 83       	std	Y+6, r25	; 0x06
    2b9c:	8d 83       	std	Y+5, r24	; 0x05
    2b9e:	0f c0       	rjmp	.+30     	; 0x2bbe <SSD_u8DisplayBlink+0x220>
    2ba0:	88 ec       	ldi	r24, 0xC8	; 200
    2ba2:	90 e0       	ldi	r25, 0x00	; 0
    2ba4:	9c 83       	std	Y+4, r25	; 0x04
    2ba6:	8b 83       	std	Y+3, r24	; 0x03
    2ba8:	8b 81       	ldd	r24, Y+3	; 0x03
    2baa:	9c 81       	ldd	r25, Y+4	; 0x04
    2bac:	01 97       	sbiw	r24, 0x01	; 1
    2bae:	f1 f7       	brne	.-4      	; 0x2bac <SSD_u8DisplayBlink+0x20e>
    2bb0:	9c 83       	std	Y+4, r25	; 0x04
    2bb2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bb4:	8d 81       	ldd	r24, Y+5	; 0x05
    2bb6:	9e 81       	ldd	r25, Y+6	; 0x06
    2bb8:	01 97       	sbiw	r24, 0x01	; 1
    2bba:	9e 83       	std	Y+6, r25	; 0x06
    2bbc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bbe:	8d 81       	ldd	r24, Y+5	; 0x05
    2bc0:	9e 81       	ldd	r25, Y+6	; 0x06
    2bc2:	00 97       	sbiw	r24, 0x00	; 0
    2bc4:	69 f7       	brne	.-38     	; 0x2ba0 <SSD_u8DisplayBlink+0x202>
    2bc6:	14 c0       	rjmp	.+40     	; 0x2bf0 <SSD_u8DisplayBlink+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bc8:	6f 81       	ldd	r22, Y+7	; 0x07
    2bca:	78 85       	ldd	r23, Y+8	; 0x08
    2bcc:	89 85       	ldd	r24, Y+9	; 0x09
    2bce:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bd0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2bd4:	dc 01       	movw	r26, r24
    2bd6:	cb 01       	movw	r24, r22
    2bd8:	9e 83       	std	Y+6, r25	; 0x06
    2bda:	8d 83       	std	Y+5, r24	; 0x05
    2bdc:	8d 81       	ldd	r24, Y+5	; 0x05
    2bde:	9e 81       	ldd	r25, Y+6	; 0x06
    2be0:	9a 83       	std	Y+2, r25	; 0x02
    2be2:	89 83       	std	Y+1, r24	; 0x01
    2be4:	89 81       	ldd	r24, Y+1	; 0x01
    2be6:	9a 81       	ldd	r25, Y+2	; 0x02
    2be8:	01 97       	sbiw	r24, 0x01	; 1
    2bea:	f1 f7       	brne	.-4      	; 0x2be8 <SSD_u8DisplayBlink+0x24a>
    2bec:	9a 83       	std	Y+2, r25	; 0x02
    2bee:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(5);
		DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN6,DIO_u8PIN_LOW);
    2bf0:	82 e0       	ldi	r24, 0x02	; 2
    2bf2:	66 e0       	ldi	r22, 0x06	; 6
    2bf4:	40 e0       	ldi	r20, 0x00	; 0
    2bf6:	0e 94 50 10 	call	0x20a0	; 0x20a0 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN7,DIO_u8PIN_LOW);
    2bfa:	82 e0       	ldi	r24, 0x02	; 2
    2bfc:	67 e0       	ldi	r22, 0x07	; 7
    2bfe:	40 e0       	ldi	r20, 0x00	; 0
    2c00:	0e 94 50 10 	call	0x20a0	; 0x20a0 <DIO_u8SetPinValue>

	u8 i;
	u8 ones = Copy_u8number%10;
	u8 tens = Copy_u8number/10;

	for(i=0;i<185;i++)
    2c04:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2c06:	8f 5f       	subi	r24, 0xFF	; 255
    2c08:	8f 8f       	std	Y+31, r24	; 0x1f
    2c0a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2c0c:	89 3b       	cpi	r24, 0xB9	; 185
    2c0e:	08 f4       	brcc	.+2      	; 0x2c12 <SSD_u8DisplayBlink+0x274>
    2c10:	e1 ce       	rjmp	.-574    	; 0x29d4 <SSD_u8DisplayBlink+0x36>
		DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN6,DIO_u8PIN_LOW);
		DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN7,DIO_u8PIN_LOW);

	}

	return Local_u8ErrorState;
    2c12:	88 a1       	ldd	r24, Y+32	; 0x20

}
    2c14:	a1 96       	adiw	r28, 0x21	; 33
    2c16:	0f b6       	in	r0, 0x3f	; 63
    2c18:	f8 94       	cli
    2c1a:	de bf       	out	0x3e, r29	; 62
    2c1c:	0f be       	out	0x3f, r0	; 63
    2c1e:	cd bf       	out	0x3d, r28	; 61
    2c20:	cf 91       	pop	r28
    2c22:	df 91       	pop	r29
    2c24:	08 95       	ret

00002c26 <SSD_u8Displaynum>:
//
//	return Local_u8ErrorState;
//}

u8 SSD_u8Displaynum(u8 Copy_u8number)
{
    2c26:	df 93       	push	r29
    2c28:	cf 93       	push	r28
    2c2a:	cd b7       	in	r28, 0x3d	; 61
    2c2c:	de b7       	in	r29, 0x3e	; 62
    2c2e:	a0 97       	sbiw	r28, 0x20	; 32
    2c30:	0f b6       	in	r0, 0x3f	; 63
    2c32:	f8 94       	cli
    2c34:	de bf       	out	0x3e, r29	; 62
    2c36:	0f be       	out	0x3f, r0	; 63
    2c38:	cd bf       	out	0x3d, r28	; 61
    2c3a:	88 a3       	std	Y+32, r24	; 0x20
	u8 Local_u8ErrorState = 0;
    2c3c:	1f 8e       	std	Y+31, r1	; 0x1f

	u8 ones = Copy_u8number%10;
    2c3e:	88 a1       	ldd	r24, Y+32	; 0x20
    2c40:	9a e0       	ldi	r25, 0x0A	; 10
    2c42:	69 2f       	mov	r22, r25
    2c44:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <__udivmodqi4>
    2c48:	89 2f       	mov	r24, r25
    2c4a:	8e 8f       	std	Y+30, r24	; 0x1e
	u8 tens = Copy_u8number/10;
    2c4c:	88 a1       	ldd	r24, Y+32	; 0x20
    2c4e:	9a e0       	ldi	r25, 0x0A	; 10
    2c50:	69 2f       	mov	r22, r25
    2c52:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <__udivmodqi4>
    2c56:	8d 8f       	std	Y+29, r24	; 0x1d

	for(;;)
	{
		DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN6,DIO_u8PIN_HIGH);
    2c58:	82 e0       	ldi	r24, 0x02	; 2
    2c5a:	66 e0       	ldi	r22, 0x06	; 6
    2c5c:	41 e0       	ldi	r20, 0x01	; 1
    2c5e:	0e 94 50 10 	call	0x20a0	; 0x20a0 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN7,DIO_u8PIN_LOW);
    2c62:	82 e0       	ldi	r24, 0x02	; 2
    2c64:	67 e0       	ldi	r22, 0x07	; 7
    2c66:	40 e0       	ldi	r20, 0x00	; 0
    2c68:	0e 94 50 10 	call	0x20a0	; 0x20a0 <DIO_u8SetPinValue>
		DIO_u8SetPortValue(DIO_u8PORTA,seven_seg[ones]);
    2c6c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2c6e:	88 2f       	mov	r24, r24
    2c70:	90 e0       	ldi	r25, 0x00	; 0
    2c72:	fc 01       	movw	r30, r24
    2c74:	e8 59       	subi	r30, 0x98	; 152
    2c76:	ff 4f       	sbci	r31, 0xFF	; 255
    2c78:	90 81       	ld	r25, Z
    2c7a:	80 e0       	ldi	r24, 0x00	; 0
    2c7c:	69 2f       	mov	r22, r25
    2c7e:	0e 94 62 11 	call	0x22c4	; 0x22c4 <DIO_u8SetPortValue>
    2c82:	80 e0       	ldi	r24, 0x00	; 0
    2c84:	90 e0       	ldi	r25, 0x00	; 0
    2c86:	a0 ea       	ldi	r26, 0xA0	; 160
    2c88:	b0 e4       	ldi	r27, 0x40	; 64
    2c8a:	89 8f       	std	Y+25, r24	; 0x19
    2c8c:	9a 8f       	std	Y+26, r25	; 0x1a
    2c8e:	ab 8f       	std	Y+27, r26	; 0x1b
    2c90:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c92:	69 8d       	ldd	r22, Y+25	; 0x19
    2c94:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c96:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c98:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c9a:	20 e0       	ldi	r18, 0x00	; 0
    2c9c:	30 e0       	ldi	r19, 0x00	; 0
    2c9e:	4a ef       	ldi	r20, 0xFA	; 250
    2ca0:	54 e4       	ldi	r21, 0x44	; 68
    2ca2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ca6:	dc 01       	movw	r26, r24
    2ca8:	cb 01       	movw	r24, r22
    2caa:	8d 8b       	std	Y+21, r24	; 0x15
    2cac:	9e 8b       	std	Y+22, r25	; 0x16
    2cae:	af 8b       	std	Y+23, r26	; 0x17
    2cb0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2cb2:	6d 89       	ldd	r22, Y+21	; 0x15
    2cb4:	7e 89       	ldd	r23, Y+22	; 0x16
    2cb6:	8f 89       	ldd	r24, Y+23	; 0x17
    2cb8:	98 8d       	ldd	r25, Y+24	; 0x18
    2cba:	20 e0       	ldi	r18, 0x00	; 0
    2cbc:	30 e0       	ldi	r19, 0x00	; 0
    2cbe:	40 e8       	ldi	r20, 0x80	; 128
    2cc0:	5f e3       	ldi	r21, 0x3F	; 63
    2cc2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2cc6:	88 23       	and	r24, r24
    2cc8:	2c f4       	brge	.+10     	; 0x2cd4 <SSD_u8Displaynum+0xae>
		__ticks = 1;
    2cca:	81 e0       	ldi	r24, 0x01	; 1
    2ccc:	90 e0       	ldi	r25, 0x00	; 0
    2cce:	9c 8b       	std	Y+20, r25	; 0x14
    2cd0:	8b 8b       	std	Y+19, r24	; 0x13
    2cd2:	3f c0       	rjmp	.+126    	; 0x2d52 <SSD_u8Displaynum+0x12c>
	else if (__tmp > 65535)
    2cd4:	6d 89       	ldd	r22, Y+21	; 0x15
    2cd6:	7e 89       	ldd	r23, Y+22	; 0x16
    2cd8:	8f 89       	ldd	r24, Y+23	; 0x17
    2cda:	98 8d       	ldd	r25, Y+24	; 0x18
    2cdc:	20 e0       	ldi	r18, 0x00	; 0
    2cde:	3f ef       	ldi	r19, 0xFF	; 255
    2ce0:	4f e7       	ldi	r20, 0x7F	; 127
    2ce2:	57 e4       	ldi	r21, 0x47	; 71
    2ce4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2ce8:	18 16       	cp	r1, r24
    2cea:	4c f5       	brge	.+82     	; 0x2d3e <SSD_u8Displaynum+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cec:	69 8d       	ldd	r22, Y+25	; 0x19
    2cee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2cf0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2cf2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2cf4:	20 e0       	ldi	r18, 0x00	; 0
    2cf6:	30 e0       	ldi	r19, 0x00	; 0
    2cf8:	40 e2       	ldi	r20, 0x20	; 32
    2cfa:	51 e4       	ldi	r21, 0x41	; 65
    2cfc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d00:	dc 01       	movw	r26, r24
    2d02:	cb 01       	movw	r24, r22
    2d04:	bc 01       	movw	r22, r24
    2d06:	cd 01       	movw	r24, r26
    2d08:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d0c:	dc 01       	movw	r26, r24
    2d0e:	cb 01       	movw	r24, r22
    2d10:	9c 8b       	std	Y+20, r25	; 0x14
    2d12:	8b 8b       	std	Y+19, r24	; 0x13
    2d14:	0f c0       	rjmp	.+30     	; 0x2d34 <SSD_u8Displaynum+0x10e>
    2d16:	88 ec       	ldi	r24, 0xC8	; 200
    2d18:	90 e0       	ldi	r25, 0x00	; 0
    2d1a:	9a 8b       	std	Y+18, r25	; 0x12
    2d1c:	89 8b       	std	Y+17, r24	; 0x11
    2d1e:	89 89       	ldd	r24, Y+17	; 0x11
    2d20:	9a 89       	ldd	r25, Y+18	; 0x12
    2d22:	01 97       	sbiw	r24, 0x01	; 1
    2d24:	f1 f7       	brne	.-4      	; 0x2d22 <SSD_u8Displaynum+0xfc>
    2d26:	9a 8b       	std	Y+18, r25	; 0x12
    2d28:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d2a:	8b 89       	ldd	r24, Y+19	; 0x13
    2d2c:	9c 89       	ldd	r25, Y+20	; 0x14
    2d2e:	01 97       	sbiw	r24, 0x01	; 1
    2d30:	9c 8b       	std	Y+20, r25	; 0x14
    2d32:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d34:	8b 89       	ldd	r24, Y+19	; 0x13
    2d36:	9c 89       	ldd	r25, Y+20	; 0x14
    2d38:	00 97       	sbiw	r24, 0x00	; 0
    2d3a:	69 f7       	brne	.-38     	; 0x2d16 <SSD_u8Displaynum+0xf0>
    2d3c:	14 c0       	rjmp	.+40     	; 0x2d66 <SSD_u8Displaynum+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d3e:	6d 89       	ldd	r22, Y+21	; 0x15
    2d40:	7e 89       	ldd	r23, Y+22	; 0x16
    2d42:	8f 89       	ldd	r24, Y+23	; 0x17
    2d44:	98 8d       	ldd	r25, Y+24	; 0x18
    2d46:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d4a:	dc 01       	movw	r26, r24
    2d4c:	cb 01       	movw	r24, r22
    2d4e:	9c 8b       	std	Y+20, r25	; 0x14
    2d50:	8b 8b       	std	Y+19, r24	; 0x13
    2d52:	8b 89       	ldd	r24, Y+19	; 0x13
    2d54:	9c 89       	ldd	r25, Y+20	; 0x14
    2d56:	98 8b       	std	Y+16, r25	; 0x10
    2d58:	8f 87       	std	Y+15, r24	; 0x0f
    2d5a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d5c:	98 89       	ldd	r25, Y+16	; 0x10
    2d5e:	01 97       	sbiw	r24, 0x01	; 1
    2d60:	f1 f7       	brne	.-4      	; 0x2d5e <SSD_u8Displaynum+0x138>
    2d62:	98 8b       	std	Y+16, r25	; 0x10
    2d64:	8f 87       	std	Y+15, r24	; 0x0f

		_delay_ms(5);
		DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN6,DIO_u8PIN_LOW);
    2d66:	82 e0       	ldi	r24, 0x02	; 2
    2d68:	66 e0       	ldi	r22, 0x06	; 6
    2d6a:	40 e0       	ldi	r20, 0x00	; 0
    2d6c:	0e 94 50 10 	call	0x20a0	; 0x20a0 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN7,DIO_u8PIN_HIGH);
    2d70:	82 e0       	ldi	r24, 0x02	; 2
    2d72:	67 e0       	ldi	r22, 0x07	; 7
    2d74:	41 e0       	ldi	r20, 0x01	; 1
    2d76:	0e 94 50 10 	call	0x20a0	; 0x20a0 <DIO_u8SetPinValue>
		DIO_u8SetPortValue(DIO_u8PORTA,seven_seg[tens]);
    2d7a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d7c:	88 2f       	mov	r24, r24
    2d7e:	90 e0       	ldi	r25, 0x00	; 0
    2d80:	fc 01       	movw	r30, r24
    2d82:	e8 59       	subi	r30, 0x98	; 152
    2d84:	ff 4f       	sbci	r31, 0xFF	; 255
    2d86:	90 81       	ld	r25, Z
    2d88:	80 e0       	ldi	r24, 0x00	; 0
    2d8a:	69 2f       	mov	r22, r25
    2d8c:	0e 94 62 11 	call	0x22c4	; 0x22c4 <DIO_u8SetPortValue>
    2d90:	80 e0       	ldi	r24, 0x00	; 0
    2d92:	90 e0       	ldi	r25, 0x00	; 0
    2d94:	a0 ea       	ldi	r26, 0xA0	; 160
    2d96:	b0 e4       	ldi	r27, 0x40	; 64
    2d98:	8b 87       	std	Y+11, r24	; 0x0b
    2d9a:	9c 87       	std	Y+12, r25	; 0x0c
    2d9c:	ad 87       	std	Y+13, r26	; 0x0d
    2d9e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2da0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2da2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2da4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2da6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2da8:	20 e0       	ldi	r18, 0x00	; 0
    2daa:	30 e0       	ldi	r19, 0x00	; 0
    2dac:	4a ef       	ldi	r20, 0xFA	; 250
    2dae:	54 e4       	ldi	r21, 0x44	; 68
    2db0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2db4:	dc 01       	movw	r26, r24
    2db6:	cb 01       	movw	r24, r22
    2db8:	8f 83       	std	Y+7, r24	; 0x07
    2dba:	98 87       	std	Y+8, r25	; 0x08
    2dbc:	a9 87       	std	Y+9, r26	; 0x09
    2dbe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2dc0:	6f 81       	ldd	r22, Y+7	; 0x07
    2dc2:	78 85       	ldd	r23, Y+8	; 0x08
    2dc4:	89 85       	ldd	r24, Y+9	; 0x09
    2dc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dc8:	20 e0       	ldi	r18, 0x00	; 0
    2dca:	30 e0       	ldi	r19, 0x00	; 0
    2dcc:	40 e8       	ldi	r20, 0x80	; 128
    2dce:	5f e3       	ldi	r21, 0x3F	; 63
    2dd0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2dd4:	88 23       	and	r24, r24
    2dd6:	2c f4       	brge	.+10     	; 0x2de2 <SSD_u8Displaynum+0x1bc>
		__ticks = 1;
    2dd8:	81 e0       	ldi	r24, 0x01	; 1
    2dda:	90 e0       	ldi	r25, 0x00	; 0
    2ddc:	9e 83       	std	Y+6, r25	; 0x06
    2dde:	8d 83       	std	Y+5, r24	; 0x05
    2de0:	3f c0       	rjmp	.+126    	; 0x2e60 <SSD_u8Displaynum+0x23a>
	else if (__tmp > 65535)
    2de2:	6f 81       	ldd	r22, Y+7	; 0x07
    2de4:	78 85       	ldd	r23, Y+8	; 0x08
    2de6:	89 85       	ldd	r24, Y+9	; 0x09
    2de8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dea:	20 e0       	ldi	r18, 0x00	; 0
    2dec:	3f ef       	ldi	r19, 0xFF	; 255
    2dee:	4f e7       	ldi	r20, 0x7F	; 127
    2df0:	57 e4       	ldi	r21, 0x47	; 71
    2df2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2df6:	18 16       	cp	r1, r24
    2df8:	4c f5       	brge	.+82     	; 0x2e4c <SSD_u8Displaynum+0x226>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dfa:	6b 85       	ldd	r22, Y+11	; 0x0b
    2dfc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2dfe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e00:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e02:	20 e0       	ldi	r18, 0x00	; 0
    2e04:	30 e0       	ldi	r19, 0x00	; 0
    2e06:	40 e2       	ldi	r20, 0x20	; 32
    2e08:	51 e4       	ldi	r21, 0x41	; 65
    2e0a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e0e:	dc 01       	movw	r26, r24
    2e10:	cb 01       	movw	r24, r22
    2e12:	bc 01       	movw	r22, r24
    2e14:	cd 01       	movw	r24, r26
    2e16:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2e1a:	dc 01       	movw	r26, r24
    2e1c:	cb 01       	movw	r24, r22
    2e1e:	9e 83       	std	Y+6, r25	; 0x06
    2e20:	8d 83       	std	Y+5, r24	; 0x05
    2e22:	0f c0       	rjmp	.+30     	; 0x2e42 <SSD_u8Displaynum+0x21c>
    2e24:	88 ec       	ldi	r24, 0xC8	; 200
    2e26:	90 e0       	ldi	r25, 0x00	; 0
    2e28:	9c 83       	std	Y+4, r25	; 0x04
    2e2a:	8b 83       	std	Y+3, r24	; 0x03
    2e2c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e2e:	9c 81       	ldd	r25, Y+4	; 0x04
    2e30:	01 97       	sbiw	r24, 0x01	; 1
    2e32:	f1 f7       	brne	.-4      	; 0x2e30 <SSD_u8Displaynum+0x20a>
    2e34:	9c 83       	std	Y+4, r25	; 0x04
    2e36:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e38:	8d 81       	ldd	r24, Y+5	; 0x05
    2e3a:	9e 81       	ldd	r25, Y+6	; 0x06
    2e3c:	01 97       	sbiw	r24, 0x01	; 1
    2e3e:	9e 83       	std	Y+6, r25	; 0x06
    2e40:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e42:	8d 81       	ldd	r24, Y+5	; 0x05
    2e44:	9e 81       	ldd	r25, Y+6	; 0x06
    2e46:	00 97       	sbiw	r24, 0x00	; 0
    2e48:	69 f7       	brne	.-38     	; 0x2e24 <SSD_u8Displaynum+0x1fe>
    2e4a:	14 c0       	rjmp	.+40     	; 0x2e74 <SSD_u8Displaynum+0x24e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e4c:	6f 81       	ldd	r22, Y+7	; 0x07
    2e4e:	78 85       	ldd	r23, Y+8	; 0x08
    2e50:	89 85       	ldd	r24, Y+9	; 0x09
    2e52:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e54:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2e58:	dc 01       	movw	r26, r24
    2e5a:	cb 01       	movw	r24, r22
    2e5c:	9e 83       	std	Y+6, r25	; 0x06
    2e5e:	8d 83       	std	Y+5, r24	; 0x05
    2e60:	8d 81       	ldd	r24, Y+5	; 0x05
    2e62:	9e 81       	ldd	r25, Y+6	; 0x06
    2e64:	9a 83       	std	Y+2, r25	; 0x02
    2e66:	89 83       	std	Y+1, r24	; 0x01
    2e68:	89 81       	ldd	r24, Y+1	; 0x01
    2e6a:	9a 81       	ldd	r25, Y+2	; 0x02
    2e6c:	01 97       	sbiw	r24, 0x01	; 1
    2e6e:	f1 f7       	brne	.-4      	; 0x2e6c <SSD_u8Displaynum+0x246>
    2e70:	9a 83       	std	Y+2, r25	; 0x02
    2e72:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(5);
		DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN6,DIO_u8PIN_LOW);
    2e74:	82 e0       	ldi	r24, 0x02	; 2
    2e76:	66 e0       	ldi	r22, 0x06	; 6
    2e78:	40 e0       	ldi	r20, 0x00	; 0
    2e7a:	0e 94 50 10 	call	0x20a0	; 0x20a0 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN7,DIO_u8PIN_LOW);
    2e7e:	82 e0       	ldi	r24, 0x02	; 2
    2e80:	67 e0       	ldi	r22, 0x07	; 7
    2e82:	40 e0       	ldi	r20, 0x00	; 0
    2e84:	0e 94 50 10 	call	0x20a0	; 0x20a0 <DIO_u8SetPinValue>
    2e88:	e7 ce       	rjmp	.-562    	; 0x2c58 <SSD_u8Displaynum+0x32>

00002e8a <SSD_u8CountUp>:
	return Local_u8ErrorState;

}

u8 SSD_u8CountUp(u8 Copy_u8number)
{
    2e8a:	df 93       	push	r29
    2e8c:	cf 93       	push	r28
    2e8e:	00 d0       	rcall	.+0      	; 0x2e90 <SSD_u8CountUp+0x6>
    2e90:	0f 92       	push	r0
    2e92:	cd b7       	in	r28, 0x3d	; 61
    2e94:	de b7       	in	r29, 0x3e	; 62
    2e96:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8ErrorState = 0;
    2e98:	1a 82       	std	Y+2, r1	; 0x02

	u8 i;
		for(i=0;i<=Copy_u8number;i++)
    2e9a:	19 82       	std	Y+1, r1	; 0x01
    2e9c:	06 c0       	rjmp	.+12     	; 0x2eaa <SSD_u8CountUp+0x20>
		{
			SSD_u8DisplayBlink(i);
    2e9e:	89 81       	ldd	r24, Y+1	; 0x01
    2ea0:	0e 94 cf 14 	call	0x299e	; 0x299e <SSD_u8DisplayBlink>
u8 SSD_u8CountUp(u8 Copy_u8number)
{
	u8 Local_u8ErrorState = 0;

	u8 i;
		for(i=0;i<=Copy_u8number;i++)
    2ea4:	89 81       	ldd	r24, Y+1	; 0x01
    2ea6:	8f 5f       	subi	r24, 0xFF	; 255
    2ea8:	89 83       	std	Y+1, r24	; 0x01
    2eaa:	99 81       	ldd	r25, Y+1	; 0x01
    2eac:	8b 81       	ldd	r24, Y+3	; 0x03
    2eae:	89 17       	cp	r24, r25
    2eb0:	b0 f7       	brcc	.-20     	; 0x2e9e <SSD_u8CountUp+0x14>
		{
			SSD_u8DisplayBlink(i);

		}

	return Local_u8ErrorState;
    2eb2:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2eb4:	0f 90       	pop	r0
    2eb6:	0f 90       	pop	r0
    2eb8:	0f 90       	pop	r0
    2eba:	cf 91       	pop	r28
    2ebc:	df 91       	pop	r29
    2ebe:	08 95       	ret

00002ec0 <SSD_u8CountDown>:
u8 SSD_u8CountDown(u8 Copy_u8number)
{
    2ec0:	df 93       	push	r29
    2ec2:	cf 93       	push	r28
    2ec4:	00 d0       	rcall	.+0      	; 0x2ec6 <SSD_u8CountDown+0x6>
    2ec6:	0f 92       	push	r0
    2ec8:	cd b7       	in	r28, 0x3d	; 61
    2eca:	de b7       	in	r29, 0x3e	; 62
    2ecc:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8ErrorState = 0;
    2ece:	1a 82       	std	Y+2, r1	; 0x02
	s8 i;
	for(i=Copy_u8number;i>=0;i--)
    2ed0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ed2:	89 83       	std	Y+1, r24	; 0x01
    2ed4:	06 c0       	rjmp	.+12     	; 0x2ee2 <SSD_u8CountDown+0x22>
	{
		SSD_u8DisplayBlink(i);
    2ed6:	89 81       	ldd	r24, Y+1	; 0x01
    2ed8:	0e 94 cf 14 	call	0x299e	; 0x299e <SSD_u8DisplayBlink>
}
u8 SSD_u8CountDown(u8 Copy_u8number)
{
	u8 Local_u8ErrorState = 0;
	s8 i;
	for(i=Copy_u8number;i>=0;i--)
    2edc:	89 81       	ldd	r24, Y+1	; 0x01
    2ede:	81 50       	subi	r24, 0x01	; 1
    2ee0:	89 83       	std	Y+1, r24	; 0x01
    2ee2:	89 81       	ldd	r24, Y+1	; 0x01
    2ee4:	88 23       	and	r24, r24
    2ee6:	bc f7       	brge	.-18     	; 0x2ed6 <SSD_u8CountDown+0x16>
	{
		SSD_u8DisplayBlink(i);

	}

	return Local_u8ErrorState;
    2ee8:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2eea:	0f 90       	pop	r0
    2eec:	0f 90       	pop	r0
    2eee:	0f 90       	pop	r0
    2ef0:	cf 91       	pop	r28
    2ef2:	df 91       	pop	r29
    2ef4:	08 95       	ret

00002ef6 <__udivmodqi4>:
    2ef6:	99 1b       	sub	r25, r25
    2ef8:	79 e0       	ldi	r23, 0x09	; 9
    2efa:	04 c0       	rjmp	.+8      	; 0x2f04 <__udivmodqi4_ep>

00002efc <__udivmodqi4_loop>:
    2efc:	99 1f       	adc	r25, r25
    2efe:	96 17       	cp	r25, r22
    2f00:	08 f0       	brcs	.+2      	; 0x2f04 <__udivmodqi4_ep>
    2f02:	96 1b       	sub	r25, r22

00002f04 <__udivmodqi4_ep>:
    2f04:	88 1f       	adc	r24, r24
    2f06:	7a 95       	dec	r23
    2f08:	c9 f7       	brne	.-14     	; 0x2efc <__udivmodqi4_loop>
    2f0a:	80 95       	com	r24
    2f0c:	08 95       	ret

00002f0e <__prologue_saves__>:
    2f0e:	2f 92       	push	r2
    2f10:	3f 92       	push	r3
    2f12:	4f 92       	push	r4
    2f14:	5f 92       	push	r5
    2f16:	6f 92       	push	r6
    2f18:	7f 92       	push	r7
    2f1a:	8f 92       	push	r8
    2f1c:	9f 92       	push	r9
    2f1e:	af 92       	push	r10
    2f20:	bf 92       	push	r11
    2f22:	cf 92       	push	r12
    2f24:	df 92       	push	r13
    2f26:	ef 92       	push	r14
    2f28:	ff 92       	push	r15
    2f2a:	0f 93       	push	r16
    2f2c:	1f 93       	push	r17
    2f2e:	cf 93       	push	r28
    2f30:	df 93       	push	r29
    2f32:	cd b7       	in	r28, 0x3d	; 61
    2f34:	de b7       	in	r29, 0x3e	; 62
    2f36:	ca 1b       	sub	r28, r26
    2f38:	db 0b       	sbc	r29, r27
    2f3a:	0f b6       	in	r0, 0x3f	; 63
    2f3c:	f8 94       	cli
    2f3e:	de bf       	out	0x3e, r29	; 62
    2f40:	0f be       	out	0x3f, r0	; 63
    2f42:	cd bf       	out	0x3d, r28	; 61
    2f44:	09 94       	ijmp

00002f46 <__epilogue_restores__>:
    2f46:	2a 88       	ldd	r2, Y+18	; 0x12
    2f48:	39 88       	ldd	r3, Y+17	; 0x11
    2f4a:	48 88       	ldd	r4, Y+16	; 0x10
    2f4c:	5f 84       	ldd	r5, Y+15	; 0x0f
    2f4e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2f50:	7d 84       	ldd	r7, Y+13	; 0x0d
    2f52:	8c 84       	ldd	r8, Y+12	; 0x0c
    2f54:	9b 84       	ldd	r9, Y+11	; 0x0b
    2f56:	aa 84       	ldd	r10, Y+10	; 0x0a
    2f58:	b9 84       	ldd	r11, Y+9	; 0x09
    2f5a:	c8 84       	ldd	r12, Y+8	; 0x08
    2f5c:	df 80       	ldd	r13, Y+7	; 0x07
    2f5e:	ee 80       	ldd	r14, Y+6	; 0x06
    2f60:	fd 80       	ldd	r15, Y+5	; 0x05
    2f62:	0c 81       	ldd	r16, Y+4	; 0x04
    2f64:	1b 81       	ldd	r17, Y+3	; 0x03
    2f66:	aa 81       	ldd	r26, Y+2	; 0x02
    2f68:	b9 81       	ldd	r27, Y+1	; 0x01
    2f6a:	ce 0f       	add	r28, r30
    2f6c:	d1 1d       	adc	r29, r1
    2f6e:	0f b6       	in	r0, 0x3f	; 63
    2f70:	f8 94       	cli
    2f72:	de bf       	out	0x3e, r29	; 62
    2f74:	0f be       	out	0x3f, r0	; 63
    2f76:	cd bf       	out	0x3d, r28	; 61
    2f78:	ed 01       	movw	r28, r26
    2f7a:	08 95       	ret

00002f7c <_exit>:
    2f7c:	f8 94       	cli

00002f7e <__stop_program>:
    2f7e:	ff cf       	rjmp	.-2      	; 0x2f7e <__stop_program>
