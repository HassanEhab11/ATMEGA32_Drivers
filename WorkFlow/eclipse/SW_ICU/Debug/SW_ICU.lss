
SW_ICU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002a34  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000126  00800060  00002a34  00002ac8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  00800186  00800186  00002bee  2**0
                  ALLOC
  3 .stab         0000255c  00000000  00000000  00002bf0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000010fb  00000000  00000000  0000514c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  00006247  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000213  00000000  00000000  00006407  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002495  00000000  00000000  0000661a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001412  00000000  00000000  00008aaf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001209  00000000  00000000  00009ec1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0000b0cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002da  00000000  00000000  0000b2ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000996  00000000  00000000  0000b586  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bf1c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 42 12 	jmp	0x2484	; 0x2484 <__vector_1>
       8:	0c 94 75 12 	jmp	0x24ea	; 0x24ea <__vector_2>
       c:	0c 94 a8 12 	jmp	0x2550	; 0x2550 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 d5 13 	jmp	0x27aa	; 0x27aa <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e3       	ldi	r30, 0x34	; 52
      68:	fa e2       	ldi	r31, 0x2A	; 42
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 38       	cpi	r26, 0x86	; 134
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e8       	ldi	r26, 0x86	; 134
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 39       	cpi	r26, 0x95	; 149
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 08 14 	call	0x2810	; 0x2810 <main>
      8a:	0c 94 18 15 	jmp	0x2a30	; 0x2a30 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 37 04 	call	0x86e	; 0x86e <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 37 04 	call	0x86e	; 0x86e <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 e1 14 	jmp	0x29c2	; 0x29c2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ae e7       	ldi	r26, 0x7E	; 126
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 fd 14 	jmp	0x29fa	; 0x29fa <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ed 14 	jmp	0x29da	; 0x29da <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 28 06 	call	0xc50	; 0xc50 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 28 06 	call	0xc50	; 0xc50 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 53 05 	call	0xaa6	; 0xaa6 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 09 15 	jmp	0x2a12	; 0x2a12 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ed 14 	jmp	0x29da	; 0x29da <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 28 06 	call	0xc50	; 0xc50 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 28 06 	call	0xc50	; 0xc50 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 53 05 	call	0xaa6	; 0xaa6 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 09 15 	jmp	0x2a12	; 0x2a12 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 e1 14 	jmp	0x29c2	; 0x29c2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 28 06 	call	0xc50	; 0xc50 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 28 06 	call	0xc50	; 0xc50 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8e e7       	ldi	r24, 0x7E	; 126
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 53 05 	call	0xaa6	; 0xaa6 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 fd 14 	jmp	0x29fa	; 0x29fa <__epilogue_restores__>

00000632 <__eqsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ed 14 	jmp	0x29da	; 0x29da <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 28 06 	call	0xc50	; 0xc50 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 28 06 	call	0xc50	; 0xc50 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__eqsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__eqsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 a0 06 	call	0xd40	; 0xd40 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__eqsf2+0x58>
     688:	81 e0       	ldi	r24, 0x01	; 1
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 09 15 	jmp	0x2a12	; 0x2a12 <__epilogue_restores__+0x18>

00000692 <__gtsf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 ed 14 	jmp	0x29da	; 0x29da <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 28 06 	call	0xc50	; 0xc50 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 28 06 	call	0xc50	; 0xc50 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gtsf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gtsf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 a0 06 	call	0xd40	; 0xd40 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gtsf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 09 15 	jmp	0x2a12	; 0x2a12 <__epilogue_restores__+0x18>

000006f2 <__gesf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 ed 14 	jmp	0x29da	; 0x29da <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 28 06 	call	0xc50	; 0xc50 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 28 06 	call	0xc50	; 0xc50 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__gesf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__gesf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 a0 06 	call	0xd40	; 0xd40 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__gesf2+0x58>
     748:	8f ef       	ldi	r24, 0xFF	; 255
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 09 15 	jmp	0x2a12	; 0x2a12 <__epilogue_restores__+0x18>

00000752 <__ltsf2>:
     752:	a8 e1       	ldi	r26, 0x18	; 24
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 ed 14 	jmp	0x29da	; 0x29da <__prologue_saves__+0x18>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	2d 83       	std	Y+5, r18	; 0x05
     768:	3e 83       	std	Y+6, r19	; 0x06
     76a:	4f 83       	std	Y+7, r20	; 0x07
     76c:	58 87       	std	Y+8, r21	; 0x08
     76e:	89 e0       	ldi	r24, 0x09	; 9
     770:	e8 2e       	mov	r14, r24
     772:	f1 2c       	mov	r15, r1
     774:	ec 0e       	add	r14, r28
     776:	fd 1e       	adc	r15, r29
     778:	ce 01       	movw	r24, r28
     77a:	01 96       	adiw	r24, 0x01	; 1
     77c:	b7 01       	movw	r22, r14
     77e:	0e 94 28 06 	call	0xc50	; 0xc50 <__unpack_f>
     782:	8e 01       	movw	r16, r28
     784:	0f 5e       	subi	r16, 0xEF	; 239
     786:	1f 4f       	sbci	r17, 0xFF	; 255
     788:	ce 01       	movw	r24, r28
     78a:	05 96       	adiw	r24, 0x05	; 5
     78c:	b8 01       	movw	r22, r16
     78e:	0e 94 28 06 	call	0xc50	; 0xc50 <__unpack_f>
     792:	89 85       	ldd	r24, Y+9	; 0x09
     794:	82 30       	cpi	r24, 0x02	; 2
     796:	40 f0       	brcs	.+16     	; 0x7a8 <__ltsf2+0x56>
     798:	89 89       	ldd	r24, Y+17	; 0x11
     79a:	82 30       	cpi	r24, 0x02	; 2
     79c:	28 f0       	brcs	.+10     	; 0x7a8 <__ltsf2+0x56>
     79e:	c7 01       	movw	r24, r14
     7a0:	b8 01       	movw	r22, r16
     7a2:	0e 94 a0 06 	call	0xd40	; 0xd40 <__fpcmp_parts_f>
     7a6:	01 c0       	rjmp	.+2      	; 0x7aa <__ltsf2+0x58>
     7a8:	81 e0       	ldi	r24, 0x01	; 1
     7aa:	68 96       	adiw	r28, 0x18	; 24
     7ac:	e6 e0       	ldi	r30, 0x06	; 6
     7ae:	0c 94 09 15 	jmp	0x2a12	; 0x2a12 <__epilogue_restores__+0x18>

000007b2 <__floatsisf>:
     7b2:	a8 e0       	ldi	r26, 0x08	; 8
     7b4:	b0 e0       	ldi	r27, 0x00	; 0
     7b6:	ef ed       	ldi	r30, 0xDF	; 223
     7b8:	f3 e0       	ldi	r31, 0x03	; 3
     7ba:	0c 94 ea 14 	jmp	0x29d4	; 0x29d4 <__prologue_saves__+0x12>
     7be:	9b 01       	movw	r18, r22
     7c0:	ac 01       	movw	r20, r24
     7c2:	83 e0       	ldi	r24, 0x03	; 3
     7c4:	89 83       	std	Y+1, r24	; 0x01
     7c6:	da 01       	movw	r26, r20
     7c8:	c9 01       	movw	r24, r18
     7ca:	88 27       	eor	r24, r24
     7cc:	b7 fd       	sbrc	r27, 7
     7ce:	83 95       	inc	r24
     7d0:	99 27       	eor	r25, r25
     7d2:	aa 27       	eor	r26, r26
     7d4:	bb 27       	eor	r27, r27
     7d6:	b8 2e       	mov	r11, r24
     7d8:	21 15       	cp	r18, r1
     7da:	31 05       	cpc	r19, r1
     7dc:	41 05       	cpc	r20, r1
     7de:	51 05       	cpc	r21, r1
     7e0:	19 f4       	brne	.+6      	; 0x7e8 <__floatsisf+0x36>
     7e2:	82 e0       	ldi	r24, 0x02	; 2
     7e4:	89 83       	std	Y+1, r24	; 0x01
     7e6:	3a c0       	rjmp	.+116    	; 0x85c <__floatsisf+0xaa>
     7e8:	88 23       	and	r24, r24
     7ea:	a9 f0       	breq	.+42     	; 0x816 <__floatsisf+0x64>
     7ec:	20 30       	cpi	r18, 0x00	; 0
     7ee:	80 e0       	ldi	r24, 0x00	; 0
     7f0:	38 07       	cpc	r19, r24
     7f2:	80 e0       	ldi	r24, 0x00	; 0
     7f4:	48 07       	cpc	r20, r24
     7f6:	80 e8       	ldi	r24, 0x80	; 128
     7f8:	58 07       	cpc	r21, r24
     7fa:	29 f4       	brne	.+10     	; 0x806 <__floatsisf+0x54>
     7fc:	60 e0       	ldi	r22, 0x00	; 0
     7fe:	70 e0       	ldi	r23, 0x00	; 0
     800:	80 e0       	ldi	r24, 0x00	; 0
     802:	9f ec       	ldi	r25, 0xCF	; 207
     804:	30 c0       	rjmp	.+96     	; 0x866 <__stack+0x7>
     806:	ee 24       	eor	r14, r14
     808:	ff 24       	eor	r15, r15
     80a:	87 01       	movw	r16, r14
     80c:	e2 1a       	sub	r14, r18
     80e:	f3 0a       	sbc	r15, r19
     810:	04 0b       	sbc	r16, r20
     812:	15 0b       	sbc	r17, r21
     814:	02 c0       	rjmp	.+4      	; 0x81a <__floatsisf+0x68>
     816:	79 01       	movw	r14, r18
     818:	8a 01       	movw	r16, r20
     81a:	8e e1       	ldi	r24, 0x1E	; 30
     81c:	c8 2e       	mov	r12, r24
     81e:	d1 2c       	mov	r13, r1
     820:	dc 82       	std	Y+4, r13	; 0x04
     822:	cb 82       	std	Y+3, r12	; 0x03
     824:	ed 82       	std	Y+5, r14	; 0x05
     826:	fe 82       	std	Y+6, r15	; 0x06
     828:	0f 83       	std	Y+7, r16	; 0x07
     82a:	18 87       	std	Y+8, r17	; 0x08
     82c:	c8 01       	movw	r24, r16
     82e:	b7 01       	movw	r22, r14
     830:	0e 94 04 05 	call	0xa08	; 0xa08 <__clzsi2>
     834:	01 97       	sbiw	r24, 0x01	; 1
     836:	18 16       	cp	r1, r24
     838:	19 06       	cpc	r1, r25
     83a:	84 f4       	brge	.+32     	; 0x85c <__floatsisf+0xaa>
     83c:	08 2e       	mov	r0, r24
     83e:	04 c0       	rjmp	.+8      	; 0x848 <__floatsisf+0x96>
     840:	ee 0c       	add	r14, r14
     842:	ff 1c       	adc	r15, r15
     844:	00 1f       	adc	r16, r16
     846:	11 1f       	adc	r17, r17
     848:	0a 94       	dec	r0
     84a:	d2 f7       	brpl	.-12     	; 0x840 <__floatsisf+0x8e>
     84c:	ed 82       	std	Y+5, r14	; 0x05
     84e:	fe 82       	std	Y+6, r15	; 0x06
     850:	0f 83       	std	Y+7, r16	; 0x07
     852:	18 87       	std	Y+8, r17	; 0x08
     854:	c8 1a       	sub	r12, r24
     856:	d9 0a       	sbc	r13, r25
     858:	dc 82       	std	Y+4, r13	; 0x04
     85a:	cb 82       	std	Y+3, r12	; 0x03
     85c:	ba 82       	std	Y+2, r11	; 0x02
     85e:	ce 01       	movw	r24, r28
     860:	01 96       	adiw	r24, 0x01	; 1
     862:	0e 94 53 05 	call	0xaa6	; 0xaa6 <__pack_f>
     866:	28 96       	adiw	r28, 0x08	; 8
     868:	e9 e0       	ldi	r30, 0x09	; 9
     86a:	0c 94 06 15 	jmp	0x2a0c	; 0x2a0c <__epilogue_restores__+0x12>

0000086e <__fixsfsi>:
     86e:	ac e0       	ldi	r26, 0x0C	; 12
     870:	b0 e0       	ldi	r27, 0x00	; 0
     872:	ed e3       	ldi	r30, 0x3D	; 61
     874:	f4 e0       	ldi	r31, 0x04	; 4
     876:	0c 94 f1 14 	jmp	0x29e2	; 0x29e2 <__prologue_saves__+0x20>
     87a:	69 83       	std	Y+1, r22	; 0x01
     87c:	7a 83       	std	Y+2, r23	; 0x02
     87e:	8b 83       	std	Y+3, r24	; 0x03
     880:	9c 83       	std	Y+4, r25	; 0x04
     882:	ce 01       	movw	r24, r28
     884:	01 96       	adiw	r24, 0x01	; 1
     886:	be 01       	movw	r22, r28
     888:	6b 5f       	subi	r22, 0xFB	; 251
     88a:	7f 4f       	sbci	r23, 0xFF	; 255
     88c:	0e 94 28 06 	call	0xc50	; 0xc50 <__unpack_f>
     890:	8d 81       	ldd	r24, Y+5	; 0x05
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	61 f1       	breq	.+88     	; 0x8ee <__fixsfsi+0x80>
     896:	82 30       	cpi	r24, 0x02	; 2
     898:	50 f1       	brcs	.+84     	; 0x8ee <__fixsfsi+0x80>
     89a:	84 30       	cpi	r24, 0x04	; 4
     89c:	21 f4       	brne	.+8      	; 0x8a6 <__fixsfsi+0x38>
     89e:	8e 81       	ldd	r24, Y+6	; 0x06
     8a0:	88 23       	and	r24, r24
     8a2:	51 f1       	breq	.+84     	; 0x8f8 <__fixsfsi+0x8a>
     8a4:	2e c0       	rjmp	.+92     	; 0x902 <__fixsfsi+0x94>
     8a6:	2f 81       	ldd	r18, Y+7	; 0x07
     8a8:	38 85       	ldd	r19, Y+8	; 0x08
     8aa:	37 fd       	sbrc	r19, 7
     8ac:	20 c0       	rjmp	.+64     	; 0x8ee <__fixsfsi+0x80>
     8ae:	6e 81       	ldd	r22, Y+6	; 0x06
     8b0:	2f 31       	cpi	r18, 0x1F	; 31
     8b2:	31 05       	cpc	r19, r1
     8b4:	1c f0       	brlt	.+6      	; 0x8bc <__fixsfsi+0x4e>
     8b6:	66 23       	and	r22, r22
     8b8:	f9 f0       	breq	.+62     	; 0x8f8 <__fixsfsi+0x8a>
     8ba:	23 c0       	rjmp	.+70     	; 0x902 <__fixsfsi+0x94>
     8bc:	8e e1       	ldi	r24, 0x1E	; 30
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	82 1b       	sub	r24, r18
     8c2:	93 0b       	sbc	r25, r19
     8c4:	29 85       	ldd	r18, Y+9	; 0x09
     8c6:	3a 85       	ldd	r19, Y+10	; 0x0a
     8c8:	4b 85       	ldd	r20, Y+11	; 0x0b
     8ca:	5c 85       	ldd	r21, Y+12	; 0x0c
     8cc:	04 c0       	rjmp	.+8      	; 0x8d6 <__fixsfsi+0x68>
     8ce:	56 95       	lsr	r21
     8d0:	47 95       	ror	r20
     8d2:	37 95       	ror	r19
     8d4:	27 95       	ror	r18
     8d6:	8a 95       	dec	r24
     8d8:	d2 f7       	brpl	.-12     	; 0x8ce <__fixsfsi+0x60>
     8da:	66 23       	and	r22, r22
     8dc:	b1 f0       	breq	.+44     	; 0x90a <__fixsfsi+0x9c>
     8de:	50 95       	com	r21
     8e0:	40 95       	com	r20
     8e2:	30 95       	com	r19
     8e4:	21 95       	neg	r18
     8e6:	3f 4f       	sbci	r19, 0xFF	; 255
     8e8:	4f 4f       	sbci	r20, 0xFF	; 255
     8ea:	5f 4f       	sbci	r21, 0xFF	; 255
     8ec:	0e c0       	rjmp	.+28     	; 0x90a <__fixsfsi+0x9c>
     8ee:	20 e0       	ldi	r18, 0x00	; 0
     8f0:	30 e0       	ldi	r19, 0x00	; 0
     8f2:	40 e0       	ldi	r20, 0x00	; 0
     8f4:	50 e0       	ldi	r21, 0x00	; 0
     8f6:	09 c0       	rjmp	.+18     	; 0x90a <__fixsfsi+0x9c>
     8f8:	2f ef       	ldi	r18, 0xFF	; 255
     8fa:	3f ef       	ldi	r19, 0xFF	; 255
     8fc:	4f ef       	ldi	r20, 0xFF	; 255
     8fe:	5f e7       	ldi	r21, 0x7F	; 127
     900:	04 c0       	rjmp	.+8      	; 0x90a <__fixsfsi+0x9c>
     902:	20 e0       	ldi	r18, 0x00	; 0
     904:	30 e0       	ldi	r19, 0x00	; 0
     906:	40 e0       	ldi	r20, 0x00	; 0
     908:	50 e8       	ldi	r21, 0x80	; 128
     90a:	b9 01       	movw	r22, r18
     90c:	ca 01       	movw	r24, r20
     90e:	2c 96       	adiw	r28, 0x0c	; 12
     910:	e2 e0       	ldi	r30, 0x02	; 2
     912:	0c 94 0d 15 	jmp	0x2a1a	; 0x2a1a <__epilogue_restores__+0x20>

00000916 <__floatunsisf>:
     916:	a8 e0       	ldi	r26, 0x08	; 8
     918:	b0 e0       	ldi	r27, 0x00	; 0
     91a:	e1 e9       	ldi	r30, 0x91	; 145
     91c:	f4 e0       	ldi	r31, 0x04	; 4
     91e:	0c 94 e9 14 	jmp	0x29d2	; 0x29d2 <__prologue_saves__+0x10>
     922:	7b 01       	movw	r14, r22
     924:	8c 01       	movw	r16, r24
     926:	61 15       	cp	r22, r1
     928:	71 05       	cpc	r23, r1
     92a:	81 05       	cpc	r24, r1
     92c:	91 05       	cpc	r25, r1
     92e:	19 f4       	brne	.+6      	; 0x936 <__floatunsisf+0x20>
     930:	82 e0       	ldi	r24, 0x02	; 2
     932:	89 83       	std	Y+1, r24	; 0x01
     934:	60 c0       	rjmp	.+192    	; 0x9f6 <__floatunsisf+0xe0>
     936:	83 e0       	ldi	r24, 0x03	; 3
     938:	89 83       	std	Y+1, r24	; 0x01
     93a:	8e e1       	ldi	r24, 0x1E	; 30
     93c:	c8 2e       	mov	r12, r24
     93e:	d1 2c       	mov	r13, r1
     940:	dc 82       	std	Y+4, r13	; 0x04
     942:	cb 82       	std	Y+3, r12	; 0x03
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 01       	movw	r24, r16
     94e:	b7 01       	movw	r22, r14
     950:	0e 94 04 05 	call	0xa08	; 0xa08 <__clzsi2>
     954:	fc 01       	movw	r30, r24
     956:	31 97       	sbiw	r30, 0x01	; 1
     958:	f7 ff       	sbrs	r31, 7
     95a:	3b c0       	rjmp	.+118    	; 0x9d2 <__floatunsisf+0xbc>
     95c:	22 27       	eor	r18, r18
     95e:	33 27       	eor	r19, r19
     960:	2e 1b       	sub	r18, r30
     962:	3f 0b       	sbc	r19, r31
     964:	57 01       	movw	r10, r14
     966:	68 01       	movw	r12, r16
     968:	02 2e       	mov	r0, r18
     96a:	04 c0       	rjmp	.+8      	; 0x974 <__floatunsisf+0x5e>
     96c:	d6 94       	lsr	r13
     96e:	c7 94       	ror	r12
     970:	b7 94       	ror	r11
     972:	a7 94       	ror	r10
     974:	0a 94       	dec	r0
     976:	d2 f7       	brpl	.-12     	; 0x96c <__floatunsisf+0x56>
     978:	40 e0       	ldi	r20, 0x00	; 0
     97a:	50 e0       	ldi	r21, 0x00	; 0
     97c:	60 e0       	ldi	r22, 0x00	; 0
     97e:	70 e0       	ldi	r23, 0x00	; 0
     980:	81 e0       	ldi	r24, 0x01	; 1
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	a0 e0       	ldi	r26, 0x00	; 0
     986:	b0 e0       	ldi	r27, 0x00	; 0
     988:	04 c0       	rjmp	.+8      	; 0x992 <__floatunsisf+0x7c>
     98a:	88 0f       	add	r24, r24
     98c:	99 1f       	adc	r25, r25
     98e:	aa 1f       	adc	r26, r26
     990:	bb 1f       	adc	r27, r27
     992:	2a 95       	dec	r18
     994:	d2 f7       	brpl	.-12     	; 0x98a <__floatunsisf+0x74>
     996:	01 97       	sbiw	r24, 0x01	; 1
     998:	a1 09       	sbc	r26, r1
     99a:	b1 09       	sbc	r27, r1
     99c:	8e 21       	and	r24, r14
     99e:	9f 21       	and	r25, r15
     9a0:	a0 23       	and	r26, r16
     9a2:	b1 23       	and	r27, r17
     9a4:	00 97       	sbiw	r24, 0x00	; 0
     9a6:	a1 05       	cpc	r26, r1
     9a8:	b1 05       	cpc	r27, r1
     9aa:	21 f0       	breq	.+8      	; 0x9b4 <__floatunsisf+0x9e>
     9ac:	41 e0       	ldi	r20, 0x01	; 1
     9ae:	50 e0       	ldi	r21, 0x00	; 0
     9b0:	60 e0       	ldi	r22, 0x00	; 0
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	4a 29       	or	r20, r10
     9b6:	5b 29       	or	r21, r11
     9b8:	6c 29       	or	r22, r12
     9ba:	7d 29       	or	r23, r13
     9bc:	4d 83       	std	Y+5, r20	; 0x05
     9be:	5e 83       	std	Y+6, r21	; 0x06
     9c0:	6f 83       	std	Y+7, r22	; 0x07
     9c2:	78 87       	std	Y+8, r23	; 0x08
     9c4:	8e e1       	ldi	r24, 0x1E	; 30
     9c6:	90 e0       	ldi	r25, 0x00	; 0
     9c8:	8e 1b       	sub	r24, r30
     9ca:	9f 0b       	sbc	r25, r31
     9cc:	9c 83       	std	Y+4, r25	; 0x04
     9ce:	8b 83       	std	Y+3, r24	; 0x03
     9d0:	12 c0       	rjmp	.+36     	; 0x9f6 <__floatunsisf+0xe0>
     9d2:	30 97       	sbiw	r30, 0x00	; 0
     9d4:	81 f0       	breq	.+32     	; 0x9f6 <__floatunsisf+0xe0>
     9d6:	0e 2e       	mov	r0, r30
     9d8:	04 c0       	rjmp	.+8      	; 0x9e2 <__floatunsisf+0xcc>
     9da:	ee 0c       	add	r14, r14
     9dc:	ff 1c       	adc	r15, r15
     9de:	00 1f       	adc	r16, r16
     9e0:	11 1f       	adc	r17, r17
     9e2:	0a 94       	dec	r0
     9e4:	d2 f7       	brpl	.-12     	; 0x9da <__floatunsisf+0xc4>
     9e6:	ed 82       	std	Y+5, r14	; 0x05
     9e8:	fe 82       	std	Y+6, r15	; 0x06
     9ea:	0f 83       	std	Y+7, r16	; 0x07
     9ec:	18 87       	std	Y+8, r17	; 0x08
     9ee:	ce 1a       	sub	r12, r30
     9f0:	df 0a       	sbc	r13, r31
     9f2:	dc 82       	std	Y+4, r13	; 0x04
     9f4:	cb 82       	std	Y+3, r12	; 0x03
     9f6:	1a 82       	std	Y+2, r1	; 0x02
     9f8:	ce 01       	movw	r24, r28
     9fa:	01 96       	adiw	r24, 0x01	; 1
     9fc:	0e 94 53 05 	call	0xaa6	; 0xaa6 <__pack_f>
     a00:	28 96       	adiw	r28, 0x08	; 8
     a02:	ea e0       	ldi	r30, 0x0A	; 10
     a04:	0c 94 05 15 	jmp	0x2a0a	; 0x2a0a <__epilogue_restores__+0x10>

00000a08 <__clzsi2>:
     a08:	ef 92       	push	r14
     a0a:	ff 92       	push	r15
     a0c:	0f 93       	push	r16
     a0e:	1f 93       	push	r17
     a10:	7b 01       	movw	r14, r22
     a12:	8c 01       	movw	r16, r24
     a14:	80 e0       	ldi	r24, 0x00	; 0
     a16:	e8 16       	cp	r14, r24
     a18:	80 e0       	ldi	r24, 0x00	; 0
     a1a:	f8 06       	cpc	r15, r24
     a1c:	81 e0       	ldi	r24, 0x01	; 1
     a1e:	08 07       	cpc	r16, r24
     a20:	80 e0       	ldi	r24, 0x00	; 0
     a22:	18 07       	cpc	r17, r24
     a24:	88 f4       	brcc	.+34     	; 0xa48 <__clzsi2+0x40>
     a26:	8f ef       	ldi	r24, 0xFF	; 255
     a28:	e8 16       	cp	r14, r24
     a2a:	f1 04       	cpc	r15, r1
     a2c:	01 05       	cpc	r16, r1
     a2e:	11 05       	cpc	r17, r1
     a30:	31 f0       	breq	.+12     	; 0xa3e <__clzsi2+0x36>
     a32:	28 f0       	brcs	.+10     	; 0xa3e <__clzsi2+0x36>
     a34:	88 e0       	ldi	r24, 0x08	; 8
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	a0 e0       	ldi	r26, 0x00	; 0
     a3a:	b0 e0       	ldi	r27, 0x00	; 0
     a3c:	17 c0       	rjmp	.+46     	; 0xa6c <__clzsi2+0x64>
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	b0 e0       	ldi	r27, 0x00	; 0
     a46:	12 c0       	rjmp	.+36     	; 0xa6c <__clzsi2+0x64>
     a48:	80 e0       	ldi	r24, 0x00	; 0
     a4a:	e8 16       	cp	r14, r24
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	f8 06       	cpc	r15, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	08 07       	cpc	r16, r24
     a54:	81 e0       	ldi	r24, 0x01	; 1
     a56:	18 07       	cpc	r17, r24
     a58:	28 f0       	brcs	.+10     	; 0xa64 <__clzsi2+0x5c>
     a5a:	88 e1       	ldi	r24, 0x18	; 24
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	a0 e0       	ldi	r26, 0x00	; 0
     a60:	b0 e0       	ldi	r27, 0x00	; 0
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__clzsi2+0x64>
     a64:	80 e1       	ldi	r24, 0x10	; 16
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	a0 e0       	ldi	r26, 0x00	; 0
     a6a:	b0 e0       	ldi	r27, 0x00	; 0
     a6c:	20 e2       	ldi	r18, 0x20	; 32
     a6e:	30 e0       	ldi	r19, 0x00	; 0
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	28 1b       	sub	r18, r24
     a76:	39 0b       	sbc	r19, r25
     a78:	4a 0b       	sbc	r20, r26
     a7a:	5b 0b       	sbc	r21, r27
     a7c:	04 c0       	rjmp	.+8      	; 0xa86 <__clzsi2+0x7e>
     a7e:	16 95       	lsr	r17
     a80:	07 95       	ror	r16
     a82:	f7 94       	ror	r15
     a84:	e7 94       	ror	r14
     a86:	8a 95       	dec	r24
     a88:	d2 f7       	brpl	.-12     	; 0xa7e <__clzsi2+0x76>
     a8a:	f7 01       	movw	r30, r14
     a8c:	ea 57       	subi	r30, 0x7A	; 122
     a8e:	ff 4f       	sbci	r31, 0xFF	; 255
     a90:	80 81       	ld	r24, Z
     a92:	28 1b       	sub	r18, r24
     a94:	31 09       	sbc	r19, r1
     a96:	41 09       	sbc	r20, r1
     a98:	51 09       	sbc	r21, r1
     a9a:	c9 01       	movw	r24, r18
     a9c:	1f 91       	pop	r17
     a9e:	0f 91       	pop	r16
     aa0:	ff 90       	pop	r15
     aa2:	ef 90       	pop	r14
     aa4:	08 95       	ret

00000aa6 <__pack_f>:
     aa6:	df 92       	push	r13
     aa8:	ef 92       	push	r14
     aaa:	ff 92       	push	r15
     aac:	0f 93       	push	r16
     aae:	1f 93       	push	r17
     ab0:	fc 01       	movw	r30, r24
     ab2:	e4 80       	ldd	r14, Z+4	; 0x04
     ab4:	f5 80       	ldd	r15, Z+5	; 0x05
     ab6:	06 81       	ldd	r16, Z+6	; 0x06
     ab8:	17 81       	ldd	r17, Z+7	; 0x07
     aba:	d1 80       	ldd	r13, Z+1	; 0x01
     abc:	80 81       	ld	r24, Z
     abe:	82 30       	cpi	r24, 0x02	; 2
     ac0:	48 f4       	brcc	.+18     	; 0xad4 <__pack_f+0x2e>
     ac2:	80 e0       	ldi	r24, 0x00	; 0
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	a0 e1       	ldi	r26, 0x10	; 16
     ac8:	b0 e0       	ldi	r27, 0x00	; 0
     aca:	e8 2a       	or	r14, r24
     acc:	f9 2a       	or	r15, r25
     ace:	0a 2b       	or	r16, r26
     ad0:	1b 2b       	or	r17, r27
     ad2:	a5 c0       	rjmp	.+330    	; 0xc1e <__pack_f+0x178>
     ad4:	84 30       	cpi	r24, 0x04	; 4
     ad6:	09 f4       	brne	.+2      	; 0xada <__pack_f+0x34>
     ad8:	9f c0       	rjmp	.+318    	; 0xc18 <__pack_f+0x172>
     ada:	82 30       	cpi	r24, 0x02	; 2
     adc:	21 f4       	brne	.+8      	; 0xae6 <__pack_f+0x40>
     ade:	ee 24       	eor	r14, r14
     ae0:	ff 24       	eor	r15, r15
     ae2:	87 01       	movw	r16, r14
     ae4:	05 c0       	rjmp	.+10     	; 0xaf0 <__pack_f+0x4a>
     ae6:	e1 14       	cp	r14, r1
     ae8:	f1 04       	cpc	r15, r1
     aea:	01 05       	cpc	r16, r1
     aec:	11 05       	cpc	r17, r1
     aee:	19 f4       	brne	.+6      	; 0xaf6 <__pack_f+0x50>
     af0:	e0 e0       	ldi	r30, 0x00	; 0
     af2:	f0 e0       	ldi	r31, 0x00	; 0
     af4:	96 c0       	rjmp	.+300    	; 0xc22 <__pack_f+0x17c>
     af6:	62 81       	ldd	r22, Z+2	; 0x02
     af8:	73 81       	ldd	r23, Z+3	; 0x03
     afa:	9f ef       	ldi	r25, 0xFF	; 255
     afc:	62 38       	cpi	r22, 0x82	; 130
     afe:	79 07       	cpc	r23, r25
     b00:	0c f0       	brlt	.+2      	; 0xb04 <__pack_f+0x5e>
     b02:	5b c0       	rjmp	.+182    	; 0xbba <__pack_f+0x114>
     b04:	22 e8       	ldi	r18, 0x82	; 130
     b06:	3f ef       	ldi	r19, 0xFF	; 255
     b08:	26 1b       	sub	r18, r22
     b0a:	37 0b       	sbc	r19, r23
     b0c:	2a 31       	cpi	r18, 0x1A	; 26
     b0e:	31 05       	cpc	r19, r1
     b10:	2c f0       	brlt	.+10     	; 0xb1c <__pack_f+0x76>
     b12:	20 e0       	ldi	r18, 0x00	; 0
     b14:	30 e0       	ldi	r19, 0x00	; 0
     b16:	40 e0       	ldi	r20, 0x00	; 0
     b18:	50 e0       	ldi	r21, 0x00	; 0
     b1a:	2a c0       	rjmp	.+84     	; 0xb70 <__pack_f+0xca>
     b1c:	b8 01       	movw	r22, r16
     b1e:	a7 01       	movw	r20, r14
     b20:	02 2e       	mov	r0, r18
     b22:	04 c0       	rjmp	.+8      	; 0xb2c <__pack_f+0x86>
     b24:	76 95       	lsr	r23
     b26:	67 95       	ror	r22
     b28:	57 95       	ror	r21
     b2a:	47 95       	ror	r20
     b2c:	0a 94       	dec	r0
     b2e:	d2 f7       	brpl	.-12     	; 0xb24 <__pack_f+0x7e>
     b30:	81 e0       	ldi	r24, 0x01	; 1
     b32:	90 e0       	ldi	r25, 0x00	; 0
     b34:	a0 e0       	ldi	r26, 0x00	; 0
     b36:	b0 e0       	ldi	r27, 0x00	; 0
     b38:	04 c0       	rjmp	.+8      	; 0xb42 <__pack_f+0x9c>
     b3a:	88 0f       	add	r24, r24
     b3c:	99 1f       	adc	r25, r25
     b3e:	aa 1f       	adc	r26, r26
     b40:	bb 1f       	adc	r27, r27
     b42:	2a 95       	dec	r18
     b44:	d2 f7       	brpl	.-12     	; 0xb3a <__pack_f+0x94>
     b46:	01 97       	sbiw	r24, 0x01	; 1
     b48:	a1 09       	sbc	r26, r1
     b4a:	b1 09       	sbc	r27, r1
     b4c:	8e 21       	and	r24, r14
     b4e:	9f 21       	and	r25, r15
     b50:	a0 23       	and	r26, r16
     b52:	b1 23       	and	r27, r17
     b54:	00 97       	sbiw	r24, 0x00	; 0
     b56:	a1 05       	cpc	r26, r1
     b58:	b1 05       	cpc	r27, r1
     b5a:	21 f0       	breq	.+8      	; 0xb64 <__pack_f+0xbe>
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	9a 01       	movw	r18, r20
     b66:	ab 01       	movw	r20, r22
     b68:	28 2b       	or	r18, r24
     b6a:	39 2b       	or	r19, r25
     b6c:	4a 2b       	or	r20, r26
     b6e:	5b 2b       	or	r21, r27
     b70:	da 01       	movw	r26, r20
     b72:	c9 01       	movw	r24, r18
     b74:	8f 77       	andi	r24, 0x7F	; 127
     b76:	90 70       	andi	r25, 0x00	; 0
     b78:	a0 70       	andi	r26, 0x00	; 0
     b7a:	b0 70       	andi	r27, 0x00	; 0
     b7c:	80 34       	cpi	r24, 0x40	; 64
     b7e:	91 05       	cpc	r25, r1
     b80:	a1 05       	cpc	r26, r1
     b82:	b1 05       	cpc	r27, r1
     b84:	39 f4       	brne	.+14     	; 0xb94 <__pack_f+0xee>
     b86:	27 ff       	sbrs	r18, 7
     b88:	09 c0       	rjmp	.+18     	; 0xb9c <__pack_f+0xf6>
     b8a:	20 5c       	subi	r18, 0xC0	; 192
     b8c:	3f 4f       	sbci	r19, 0xFF	; 255
     b8e:	4f 4f       	sbci	r20, 0xFF	; 255
     b90:	5f 4f       	sbci	r21, 0xFF	; 255
     b92:	04 c0       	rjmp	.+8      	; 0xb9c <__pack_f+0xf6>
     b94:	21 5c       	subi	r18, 0xC1	; 193
     b96:	3f 4f       	sbci	r19, 0xFF	; 255
     b98:	4f 4f       	sbci	r20, 0xFF	; 255
     b9a:	5f 4f       	sbci	r21, 0xFF	; 255
     b9c:	e0 e0       	ldi	r30, 0x00	; 0
     b9e:	f0 e0       	ldi	r31, 0x00	; 0
     ba0:	20 30       	cpi	r18, 0x00	; 0
     ba2:	a0 e0       	ldi	r26, 0x00	; 0
     ba4:	3a 07       	cpc	r19, r26
     ba6:	a0 e0       	ldi	r26, 0x00	; 0
     ba8:	4a 07       	cpc	r20, r26
     baa:	a0 e4       	ldi	r26, 0x40	; 64
     bac:	5a 07       	cpc	r21, r26
     bae:	10 f0       	brcs	.+4      	; 0xbb4 <__pack_f+0x10e>
     bb0:	e1 e0       	ldi	r30, 0x01	; 1
     bb2:	f0 e0       	ldi	r31, 0x00	; 0
     bb4:	79 01       	movw	r14, r18
     bb6:	8a 01       	movw	r16, r20
     bb8:	27 c0       	rjmp	.+78     	; 0xc08 <__pack_f+0x162>
     bba:	60 38       	cpi	r22, 0x80	; 128
     bbc:	71 05       	cpc	r23, r1
     bbe:	64 f5       	brge	.+88     	; 0xc18 <__pack_f+0x172>
     bc0:	fb 01       	movw	r30, r22
     bc2:	e1 58       	subi	r30, 0x81	; 129
     bc4:	ff 4f       	sbci	r31, 0xFF	; 255
     bc6:	d8 01       	movw	r26, r16
     bc8:	c7 01       	movw	r24, r14
     bca:	8f 77       	andi	r24, 0x7F	; 127
     bcc:	90 70       	andi	r25, 0x00	; 0
     bce:	a0 70       	andi	r26, 0x00	; 0
     bd0:	b0 70       	andi	r27, 0x00	; 0
     bd2:	80 34       	cpi	r24, 0x40	; 64
     bd4:	91 05       	cpc	r25, r1
     bd6:	a1 05       	cpc	r26, r1
     bd8:	b1 05       	cpc	r27, r1
     bda:	39 f4       	brne	.+14     	; 0xbea <__pack_f+0x144>
     bdc:	e7 fe       	sbrs	r14, 7
     bde:	0d c0       	rjmp	.+26     	; 0xbfa <__pack_f+0x154>
     be0:	80 e4       	ldi	r24, 0x40	; 64
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	a0 e0       	ldi	r26, 0x00	; 0
     be6:	b0 e0       	ldi	r27, 0x00	; 0
     be8:	04 c0       	rjmp	.+8      	; 0xbf2 <__pack_f+0x14c>
     bea:	8f e3       	ldi	r24, 0x3F	; 63
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	a0 e0       	ldi	r26, 0x00	; 0
     bf0:	b0 e0       	ldi	r27, 0x00	; 0
     bf2:	e8 0e       	add	r14, r24
     bf4:	f9 1e       	adc	r15, r25
     bf6:	0a 1f       	adc	r16, r26
     bf8:	1b 1f       	adc	r17, r27
     bfa:	17 ff       	sbrs	r17, 7
     bfc:	05 c0       	rjmp	.+10     	; 0xc08 <__pack_f+0x162>
     bfe:	16 95       	lsr	r17
     c00:	07 95       	ror	r16
     c02:	f7 94       	ror	r15
     c04:	e7 94       	ror	r14
     c06:	31 96       	adiw	r30, 0x01	; 1
     c08:	87 e0       	ldi	r24, 0x07	; 7
     c0a:	16 95       	lsr	r17
     c0c:	07 95       	ror	r16
     c0e:	f7 94       	ror	r15
     c10:	e7 94       	ror	r14
     c12:	8a 95       	dec	r24
     c14:	d1 f7       	brne	.-12     	; 0xc0a <__pack_f+0x164>
     c16:	05 c0       	rjmp	.+10     	; 0xc22 <__pack_f+0x17c>
     c18:	ee 24       	eor	r14, r14
     c1a:	ff 24       	eor	r15, r15
     c1c:	87 01       	movw	r16, r14
     c1e:	ef ef       	ldi	r30, 0xFF	; 255
     c20:	f0 e0       	ldi	r31, 0x00	; 0
     c22:	6e 2f       	mov	r22, r30
     c24:	67 95       	ror	r22
     c26:	66 27       	eor	r22, r22
     c28:	67 95       	ror	r22
     c2a:	90 2f       	mov	r25, r16
     c2c:	9f 77       	andi	r25, 0x7F	; 127
     c2e:	d7 94       	ror	r13
     c30:	dd 24       	eor	r13, r13
     c32:	d7 94       	ror	r13
     c34:	8e 2f       	mov	r24, r30
     c36:	86 95       	lsr	r24
     c38:	49 2f       	mov	r20, r25
     c3a:	46 2b       	or	r20, r22
     c3c:	58 2f       	mov	r21, r24
     c3e:	5d 29       	or	r21, r13
     c40:	b7 01       	movw	r22, r14
     c42:	ca 01       	movw	r24, r20
     c44:	1f 91       	pop	r17
     c46:	0f 91       	pop	r16
     c48:	ff 90       	pop	r15
     c4a:	ef 90       	pop	r14
     c4c:	df 90       	pop	r13
     c4e:	08 95       	ret

00000c50 <__unpack_f>:
     c50:	fc 01       	movw	r30, r24
     c52:	db 01       	movw	r26, r22
     c54:	40 81       	ld	r20, Z
     c56:	51 81       	ldd	r21, Z+1	; 0x01
     c58:	22 81       	ldd	r18, Z+2	; 0x02
     c5a:	62 2f       	mov	r22, r18
     c5c:	6f 77       	andi	r22, 0x7F	; 127
     c5e:	70 e0       	ldi	r23, 0x00	; 0
     c60:	22 1f       	adc	r18, r18
     c62:	22 27       	eor	r18, r18
     c64:	22 1f       	adc	r18, r18
     c66:	93 81       	ldd	r25, Z+3	; 0x03
     c68:	89 2f       	mov	r24, r25
     c6a:	88 0f       	add	r24, r24
     c6c:	82 2b       	or	r24, r18
     c6e:	28 2f       	mov	r18, r24
     c70:	30 e0       	ldi	r19, 0x00	; 0
     c72:	99 1f       	adc	r25, r25
     c74:	99 27       	eor	r25, r25
     c76:	99 1f       	adc	r25, r25
     c78:	11 96       	adiw	r26, 0x01	; 1
     c7a:	9c 93       	st	X, r25
     c7c:	11 97       	sbiw	r26, 0x01	; 1
     c7e:	21 15       	cp	r18, r1
     c80:	31 05       	cpc	r19, r1
     c82:	a9 f5       	brne	.+106    	; 0xcee <__unpack_f+0x9e>
     c84:	41 15       	cp	r20, r1
     c86:	51 05       	cpc	r21, r1
     c88:	61 05       	cpc	r22, r1
     c8a:	71 05       	cpc	r23, r1
     c8c:	11 f4       	brne	.+4      	; 0xc92 <__unpack_f+0x42>
     c8e:	82 e0       	ldi	r24, 0x02	; 2
     c90:	37 c0       	rjmp	.+110    	; 0xd00 <__unpack_f+0xb0>
     c92:	82 e8       	ldi	r24, 0x82	; 130
     c94:	9f ef       	ldi	r25, 0xFF	; 255
     c96:	13 96       	adiw	r26, 0x03	; 3
     c98:	9c 93       	st	X, r25
     c9a:	8e 93       	st	-X, r24
     c9c:	12 97       	sbiw	r26, 0x02	; 2
     c9e:	9a 01       	movw	r18, r20
     ca0:	ab 01       	movw	r20, r22
     ca2:	67 e0       	ldi	r22, 0x07	; 7
     ca4:	22 0f       	add	r18, r18
     ca6:	33 1f       	adc	r19, r19
     ca8:	44 1f       	adc	r20, r20
     caa:	55 1f       	adc	r21, r21
     cac:	6a 95       	dec	r22
     cae:	d1 f7       	brne	.-12     	; 0xca4 <__unpack_f+0x54>
     cb0:	83 e0       	ldi	r24, 0x03	; 3
     cb2:	8c 93       	st	X, r24
     cb4:	0d c0       	rjmp	.+26     	; 0xcd0 <__unpack_f+0x80>
     cb6:	22 0f       	add	r18, r18
     cb8:	33 1f       	adc	r19, r19
     cba:	44 1f       	adc	r20, r20
     cbc:	55 1f       	adc	r21, r21
     cbe:	12 96       	adiw	r26, 0x02	; 2
     cc0:	8d 91       	ld	r24, X+
     cc2:	9c 91       	ld	r25, X
     cc4:	13 97       	sbiw	r26, 0x03	; 3
     cc6:	01 97       	sbiw	r24, 0x01	; 1
     cc8:	13 96       	adiw	r26, 0x03	; 3
     cca:	9c 93       	st	X, r25
     ccc:	8e 93       	st	-X, r24
     cce:	12 97       	sbiw	r26, 0x02	; 2
     cd0:	20 30       	cpi	r18, 0x00	; 0
     cd2:	80 e0       	ldi	r24, 0x00	; 0
     cd4:	38 07       	cpc	r19, r24
     cd6:	80 e0       	ldi	r24, 0x00	; 0
     cd8:	48 07       	cpc	r20, r24
     cda:	80 e4       	ldi	r24, 0x40	; 64
     cdc:	58 07       	cpc	r21, r24
     cde:	58 f3       	brcs	.-42     	; 0xcb6 <__unpack_f+0x66>
     ce0:	14 96       	adiw	r26, 0x04	; 4
     ce2:	2d 93       	st	X+, r18
     ce4:	3d 93       	st	X+, r19
     ce6:	4d 93       	st	X+, r20
     ce8:	5c 93       	st	X, r21
     cea:	17 97       	sbiw	r26, 0x07	; 7
     cec:	08 95       	ret
     cee:	2f 3f       	cpi	r18, 0xFF	; 255
     cf0:	31 05       	cpc	r19, r1
     cf2:	79 f4       	brne	.+30     	; 0xd12 <__unpack_f+0xc2>
     cf4:	41 15       	cp	r20, r1
     cf6:	51 05       	cpc	r21, r1
     cf8:	61 05       	cpc	r22, r1
     cfa:	71 05       	cpc	r23, r1
     cfc:	19 f4       	brne	.+6      	; 0xd04 <__unpack_f+0xb4>
     cfe:	84 e0       	ldi	r24, 0x04	; 4
     d00:	8c 93       	st	X, r24
     d02:	08 95       	ret
     d04:	64 ff       	sbrs	r22, 4
     d06:	03 c0       	rjmp	.+6      	; 0xd0e <__unpack_f+0xbe>
     d08:	81 e0       	ldi	r24, 0x01	; 1
     d0a:	8c 93       	st	X, r24
     d0c:	12 c0       	rjmp	.+36     	; 0xd32 <__unpack_f+0xe2>
     d0e:	1c 92       	st	X, r1
     d10:	10 c0       	rjmp	.+32     	; 0xd32 <__unpack_f+0xe2>
     d12:	2f 57       	subi	r18, 0x7F	; 127
     d14:	30 40       	sbci	r19, 0x00	; 0
     d16:	13 96       	adiw	r26, 0x03	; 3
     d18:	3c 93       	st	X, r19
     d1a:	2e 93       	st	-X, r18
     d1c:	12 97       	sbiw	r26, 0x02	; 2
     d1e:	83 e0       	ldi	r24, 0x03	; 3
     d20:	8c 93       	st	X, r24
     d22:	87 e0       	ldi	r24, 0x07	; 7
     d24:	44 0f       	add	r20, r20
     d26:	55 1f       	adc	r21, r21
     d28:	66 1f       	adc	r22, r22
     d2a:	77 1f       	adc	r23, r23
     d2c:	8a 95       	dec	r24
     d2e:	d1 f7       	brne	.-12     	; 0xd24 <__unpack_f+0xd4>
     d30:	70 64       	ori	r23, 0x40	; 64
     d32:	14 96       	adiw	r26, 0x04	; 4
     d34:	4d 93       	st	X+, r20
     d36:	5d 93       	st	X+, r21
     d38:	6d 93       	st	X+, r22
     d3a:	7c 93       	st	X, r23
     d3c:	17 97       	sbiw	r26, 0x07	; 7
     d3e:	08 95       	ret

00000d40 <__fpcmp_parts_f>:
     d40:	1f 93       	push	r17
     d42:	dc 01       	movw	r26, r24
     d44:	fb 01       	movw	r30, r22
     d46:	9c 91       	ld	r25, X
     d48:	92 30       	cpi	r25, 0x02	; 2
     d4a:	08 f4       	brcc	.+2      	; 0xd4e <__fpcmp_parts_f+0xe>
     d4c:	47 c0       	rjmp	.+142    	; 0xddc <__fpcmp_parts_f+0x9c>
     d4e:	80 81       	ld	r24, Z
     d50:	82 30       	cpi	r24, 0x02	; 2
     d52:	08 f4       	brcc	.+2      	; 0xd56 <__fpcmp_parts_f+0x16>
     d54:	43 c0       	rjmp	.+134    	; 0xddc <__fpcmp_parts_f+0x9c>
     d56:	94 30       	cpi	r25, 0x04	; 4
     d58:	51 f4       	brne	.+20     	; 0xd6e <__fpcmp_parts_f+0x2e>
     d5a:	11 96       	adiw	r26, 0x01	; 1
     d5c:	1c 91       	ld	r17, X
     d5e:	84 30       	cpi	r24, 0x04	; 4
     d60:	99 f5       	brne	.+102    	; 0xdc8 <__fpcmp_parts_f+0x88>
     d62:	81 81       	ldd	r24, Z+1	; 0x01
     d64:	68 2f       	mov	r22, r24
     d66:	70 e0       	ldi	r23, 0x00	; 0
     d68:	61 1b       	sub	r22, r17
     d6a:	71 09       	sbc	r23, r1
     d6c:	3f c0       	rjmp	.+126    	; 0xdec <__fpcmp_parts_f+0xac>
     d6e:	84 30       	cpi	r24, 0x04	; 4
     d70:	21 f0       	breq	.+8      	; 0xd7a <__fpcmp_parts_f+0x3a>
     d72:	92 30       	cpi	r25, 0x02	; 2
     d74:	31 f4       	brne	.+12     	; 0xd82 <__fpcmp_parts_f+0x42>
     d76:	82 30       	cpi	r24, 0x02	; 2
     d78:	b9 f1       	breq	.+110    	; 0xde8 <__fpcmp_parts_f+0xa8>
     d7a:	81 81       	ldd	r24, Z+1	; 0x01
     d7c:	88 23       	and	r24, r24
     d7e:	89 f1       	breq	.+98     	; 0xde2 <__fpcmp_parts_f+0xa2>
     d80:	2d c0       	rjmp	.+90     	; 0xddc <__fpcmp_parts_f+0x9c>
     d82:	11 96       	adiw	r26, 0x01	; 1
     d84:	1c 91       	ld	r17, X
     d86:	11 97       	sbiw	r26, 0x01	; 1
     d88:	82 30       	cpi	r24, 0x02	; 2
     d8a:	f1 f0       	breq	.+60     	; 0xdc8 <__fpcmp_parts_f+0x88>
     d8c:	81 81       	ldd	r24, Z+1	; 0x01
     d8e:	18 17       	cp	r17, r24
     d90:	d9 f4       	brne	.+54     	; 0xdc8 <__fpcmp_parts_f+0x88>
     d92:	12 96       	adiw	r26, 0x02	; 2
     d94:	2d 91       	ld	r18, X+
     d96:	3c 91       	ld	r19, X
     d98:	13 97       	sbiw	r26, 0x03	; 3
     d9a:	82 81       	ldd	r24, Z+2	; 0x02
     d9c:	93 81       	ldd	r25, Z+3	; 0x03
     d9e:	82 17       	cp	r24, r18
     da0:	93 07       	cpc	r25, r19
     da2:	94 f0       	brlt	.+36     	; 0xdc8 <__fpcmp_parts_f+0x88>
     da4:	28 17       	cp	r18, r24
     da6:	39 07       	cpc	r19, r25
     da8:	bc f0       	brlt	.+46     	; 0xdd8 <__fpcmp_parts_f+0x98>
     daa:	14 96       	adiw	r26, 0x04	; 4
     dac:	8d 91       	ld	r24, X+
     dae:	9d 91       	ld	r25, X+
     db0:	0d 90       	ld	r0, X+
     db2:	bc 91       	ld	r27, X
     db4:	a0 2d       	mov	r26, r0
     db6:	24 81       	ldd	r18, Z+4	; 0x04
     db8:	35 81       	ldd	r19, Z+5	; 0x05
     dba:	46 81       	ldd	r20, Z+6	; 0x06
     dbc:	57 81       	ldd	r21, Z+7	; 0x07
     dbe:	28 17       	cp	r18, r24
     dc0:	39 07       	cpc	r19, r25
     dc2:	4a 07       	cpc	r20, r26
     dc4:	5b 07       	cpc	r21, r27
     dc6:	18 f4       	brcc	.+6      	; 0xdce <__fpcmp_parts_f+0x8e>
     dc8:	11 23       	and	r17, r17
     dca:	41 f0       	breq	.+16     	; 0xddc <__fpcmp_parts_f+0x9c>
     dcc:	0a c0       	rjmp	.+20     	; 0xde2 <__fpcmp_parts_f+0xa2>
     dce:	82 17       	cp	r24, r18
     dd0:	93 07       	cpc	r25, r19
     dd2:	a4 07       	cpc	r26, r20
     dd4:	b5 07       	cpc	r27, r21
     dd6:	40 f4       	brcc	.+16     	; 0xde8 <__fpcmp_parts_f+0xa8>
     dd8:	11 23       	and	r17, r17
     dda:	19 f0       	breq	.+6      	; 0xde2 <__fpcmp_parts_f+0xa2>
     ddc:	61 e0       	ldi	r22, 0x01	; 1
     dde:	70 e0       	ldi	r23, 0x00	; 0
     de0:	05 c0       	rjmp	.+10     	; 0xdec <__fpcmp_parts_f+0xac>
     de2:	6f ef       	ldi	r22, 0xFF	; 255
     de4:	7f ef       	ldi	r23, 0xFF	; 255
     de6:	02 c0       	rjmp	.+4      	; 0xdec <__fpcmp_parts_f+0xac>
     de8:	60 e0       	ldi	r22, 0x00	; 0
     dea:	70 e0       	ldi	r23, 0x00	; 0
     dec:	cb 01       	movw	r24, r22
     dee:	1f 91       	pop	r17
     df0:	08 95       	ret

00000df2 <C_LCD_voidSendCommand>:
u8 Local_u8SetPositionX = X_INITIAL_POSITION;
u8 Local_u8SetPositionY = Y_INITIAL_POSITION;


void C_LCD_voidSendCommand(u8 Copy_u8Command)
{
     df2:	1f 93       	push	r17
     df4:	df 93       	push	r29
     df6:	cf 93       	push	r28
     df8:	cd b7       	in	r28, 0x3d	; 61
     dfa:	de b7       	in	r29, 0x3e	; 62
     dfc:	ea 97       	sbiw	r28, 0x3a	; 58
     dfe:	0f b6       	in	r0, 0x3f	; 63
     e00:	f8 94       	cli
     e02:	de bf       	out	0x3e, r29	; 62
     e04:	0f be       	out	0x3f, r0	; 63
     e06:	cd bf       	out	0x3d, r28	; 61
     e08:	8a af       	std	Y+58, r24	; 0x3a
	/*Set RS Pin to low to send command */
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_LOW);
     e0a:	82 e0       	ldi	r24, 0x02	; 2
     e0c:	62 e0       	ldi	r22, 0x02	; 2
     e0e:	40 e0       	ldi	r20, 0x00	; 0
     e10:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <DIO_u8SetPinValue>
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);

#elif   MODE_SELECT ==_4_BIT_MODE

	u8 Local_u8Command = (((Copy_u8Command ) & CLCD_COMMAND_MASK) | DIO_u8AndWithPort(CLCD_DATA_PORT, CLCD_DATA_PORT_MASK));
     e14:	8a ad       	ldd	r24, Y+58	; 0x3a
     e16:	18 2f       	mov	r17, r24
     e18:	10 7f       	andi	r17, 0xF0	; 240
     e1a:	82 e0       	ldi	r24, 0x02	; 2
     e1c:	6f e0       	ldi	r22, 0x0F	; 15
     e1e:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <DIO_u8AndWithPort>
     e22:	81 2b       	or	r24, r17
     e24:	89 af       	std	Y+57, r24	; 0x39
	/* Set Command to data pins */
	DIO_u8SetPortValue(CLCD_DATA_PORT,Local_u8Command);
     e26:	82 e0       	ldi	r24, 0x02	; 2
     e28:	69 ad       	ldd	r22, Y+57	; 0x39
     e2a:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <DIO_u8SetPortValue>

	/*Send Enable pulse */
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
     e2e:	82 e0       	ldi	r24, 0x02	; 2
     e30:	63 e0       	ldi	r22, 0x03	; 3
     e32:	41 e0       	ldi	r20, 0x01	; 1
     e34:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <DIO_u8SetPinValue>
     e38:	80 e0       	ldi	r24, 0x00	; 0
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	a0 e0       	ldi	r26, 0x00	; 0
     e3e:	b0 e4       	ldi	r27, 0x40	; 64
     e40:	8d ab       	std	Y+53, r24	; 0x35
     e42:	9e ab       	std	Y+54, r25	; 0x36
     e44:	af ab       	std	Y+55, r26	; 0x37
     e46:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e48:	6d a9       	ldd	r22, Y+53	; 0x35
     e4a:	7e a9       	ldd	r23, Y+54	; 0x36
     e4c:	8f a9       	ldd	r24, Y+55	; 0x37
     e4e:	98 ad       	ldd	r25, Y+56	; 0x38
     e50:	20 e0       	ldi	r18, 0x00	; 0
     e52:	30 e0       	ldi	r19, 0x00	; 0
     e54:	4a ef       	ldi	r20, 0xFA	; 250
     e56:	54 e4       	ldi	r21, 0x44	; 68
     e58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e5c:	dc 01       	movw	r26, r24
     e5e:	cb 01       	movw	r24, r22
     e60:	89 ab       	std	Y+49, r24	; 0x31
     e62:	9a ab       	std	Y+50, r25	; 0x32
     e64:	ab ab       	std	Y+51, r26	; 0x33
     e66:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     e68:	69 a9       	ldd	r22, Y+49	; 0x31
     e6a:	7a a9       	ldd	r23, Y+50	; 0x32
     e6c:	8b a9       	ldd	r24, Y+51	; 0x33
     e6e:	9c a9       	ldd	r25, Y+52	; 0x34
     e70:	20 e0       	ldi	r18, 0x00	; 0
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	40 e8       	ldi	r20, 0x80	; 128
     e76:	5f e3       	ldi	r21, 0x3F	; 63
     e78:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
     e7c:	88 23       	and	r24, r24
     e7e:	2c f4       	brge	.+10     	; 0xe8a <C_LCD_voidSendCommand+0x98>
		__ticks = 1;
     e80:	81 e0       	ldi	r24, 0x01	; 1
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	98 ab       	std	Y+48, r25	; 0x30
     e86:	8f a7       	std	Y+47, r24	; 0x2f
     e88:	3f c0       	rjmp	.+126    	; 0xf08 <C_LCD_voidSendCommand+0x116>
	else if (__tmp > 65535)
     e8a:	69 a9       	ldd	r22, Y+49	; 0x31
     e8c:	7a a9       	ldd	r23, Y+50	; 0x32
     e8e:	8b a9       	ldd	r24, Y+51	; 0x33
     e90:	9c a9       	ldd	r25, Y+52	; 0x34
     e92:	20 e0       	ldi	r18, 0x00	; 0
     e94:	3f ef       	ldi	r19, 0xFF	; 255
     e96:	4f e7       	ldi	r20, 0x7F	; 127
     e98:	57 e4       	ldi	r21, 0x47	; 71
     e9a:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
     e9e:	18 16       	cp	r1, r24
     ea0:	4c f5       	brge	.+82     	; 0xef4 <C_LCD_voidSendCommand+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ea2:	6d a9       	ldd	r22, Y+53	; 0x35
     ea4:	7e a9       	ldd	r23, Y+54	; 0x36
     ea6:	8f a9       	ldd	r24, Y+55	; 0x37
     ea8:	98 ad       	ldd	r25, Y+56	; 0x38
     eaa:	20 e0       	ldi	r18, 0x00	; 0
     eac:	30 e0       	ldi	r19, 0x00	; 0
     eae:	40 e2       	ldi	r20, 0x20	; 32
     eb0:	51 e4       	ldi	r21, 0x41	; 65
     eb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eb6:	dc 01       	movw	r26, r24
     eb8:	cb 01       	movw	r24, r22
     eba:	bc 01       	movw	r22, r24
     ebc:	cd 01       	movw	r24, r26
     ebe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ec2:	dc 01       	movw	r26, r24
     ec4:	cb 01       	movw	r24, r22
     ec6:	98 ab       	std	Y+48, r25	; 0x30
     ec8:	8f a7       	std	Y+47, r24	; 0x2f
     eca:	0f c0       	rjmp	.+30     	; 0xeea <C_LCD_voidSendCommand+0xf8>
     ecc:	88 ec       	ldi	r24, 0xC8	; 200
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	9e a7       	std	Y+46, r25	; 0x2e
     ed2:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ed4:	8d a5       	ldd	r24, Y+45	; 0x2d
     ed6:	9e a5       	ldd	r25, Y+46	; 0x2e
     ed8:	01 97       	sbiw	r24, 0x01	; 1
     eda:	f1 f7       	brne	.-4      	; 0xed8 <C_LCD_voidSendCommand+0xe6>
     edc:	9e a7       	std	Y+46, r25	; 0x2e
     ede:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ee0:	8f a5       	ldd	r24, Y+47	; 0x2f
     ee2:	98 a9       	ldd	r25, Y+48	; 0x30
     ee4:	01 97       	sbiw	r24, 0x01	; 1
     ee6:	98 ab       	std	Y+48, r25	; 0x30
     ee8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     eea:	8f a5       	ldd	r24, Y+47	; 0x2f
     eec:	98 a9       	ldd	r25, Y+48	; 0x30
     eee:	00 97       	sbiw	r24, 0x00	; 0
     ef0:	69 f7       	brne	.-38     	; 0xecc <C_LCD_voidSendCommand+0xda>
     ef2:	14 c0       	rjmp	.+40     	; 0xf1c <C_LCD_voidSendCommand+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ef4:	69 a9       	ldd	r22, Y+49	; 0x31
     ef6:	7a a9       	ldd	r23, Y+50	; 0x32
     ef8:	8b a9       	ldd	r24, Y+51	; 0x33
     efa:	9c a9       	ldd	r25, Y+52	; 0x34
     efc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f00:	dc 01       	movw	r26, r24
     f02:	cb 01       	movw	r24, r22
     f04:	98 ab       	std	Y+48, r25	; 0x30
     f06:	8f a7       	std	Y+47, r24	; 0x2f
     f08:	8f a5       	ldd	r24, Y+47	; 0x2f
     f0a:	98 a9       	ldd	r25, Y+48	; 0x30
     f0c:	9c a7       	std	Y+44, r25	; 0x2c
     f0e:	8b a7       	std	Y+43, r24	; 0x2b
     f10:	8b a5       	ldd	r24, Y+43	; 0x2b
     f12:	9c a5       	ldd	r25, Y+44	; 0x2c
     f14:	01 97       	sbiw	r24, 0x01	; 1
     f16:	f1 f7       	brne	.-4      	; 0xf14 <C_LCD_voidSendCommand+0x122>
     f18:	9c a7       	std	Y+44, r25	; 0x2c
     f1a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
     f1c:	82 e0       	ldi	r24, 0x02	; 2
     f1e:	63 e0       	ldi	r22, 0x03	; 3
     f20:	40 e0       	ldi	r20, 0x00	; 0
     f22:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <DIO_u8SetPinValue>
     f26:	80 e0       	ldi	r24, 0x00	; 0
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	a0 ea       	ldi	r26, 0xA0	; 160
     f2c:	b0 e4       	ldi	r27, 0x40	; 64
     f2e:	8f a3       	std	Y+39, r24	; 0x27
     f30:	98 a7       	std	Y+40, r25	; 0x28
     f32:	a9 a7       	std	Y+41, r26	; 0x29
     f34:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f36:	6f a1       	ldd	r22, Y+39	; 0x27
     f38:	78 a5       	ldd	r23, Y+40	; 0x28
     f3a:	89 a5       	ldd	r24, Y+41	; 0x29
     f3c:	9a a5       	ldd	r25, Y+42	; 0x2a
     f3e:	20 e0       	ldi	r18, 0x00	; 0
     f40:	30 e0       	ldi	r19, 0x00	; 0
     f42:	4a ef       	ldi	r20, 0xFA	; 250
     f44:	54 e4       	ldi	r21, 0x44	; 68
     f46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f4a:	dc 01       	movw	r26, r24
     f4c:	cb 01       	movw	r24, r22
     f4e:	8b a3       	std	Y+35, r24	; 0x23
     f50:	9c a3       	std	Y+36, r25	; 0x24
     f52:	ad a3       	std	Y+37, r26	; 0x25
     f54:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     f56:	6b a1       	ldd	r22, Y+35	; 0x23
     f58:	7c a1       	ldd	r23, Y+36	; 0x24
     f5a:	8d a1       	ldd	r24, Y+37	; 0x25
     f5c:	9e a1       	ldd	r25, Y+38	; 0x26
     f5e:	20 e0       	ldi	r18, 0x00	; 0
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	40 e8       	ldi	r20, 0x80	; 128
     f64:	5f e3       	ldi	r21, 0x3F	; 63
     f66:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
     f6a:	88 23       	and	r24, r24
     f6c:	2c f4       	brge	.+10     	; 0xf78 <C_LCD_voidSendCommand+0x186>
		__ticks = 1;
     f6e:	81 e0       	ldi	r24, 0x01	; 1
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	9a a3       	std	Y+34, r25	; 0x22
     f74:	89 a3       	std	Y+33, r24	; 0x21
     f76:	3f c0       	rjmp	.+126    	; 0xff6 <C_LCD_voidSendCommand+0x204>
	else if (__tmp > 65535)
     f78:	6b a1       	ldd	r22, Y+35	; 0x23
     f7a:	7c a1       	ldd	r23, Y+36	; 0x24
     f7c:	8d a1       	ldd	r24, Y+37	; 0x25
     f7e:	9e a1       	ldd	r25, Y+38	; 0x26
     f80:	20 e0       	ldi	r18, 0x00	; 0
     f82:	3f ef       	ldi	r19, 0xFF	; 255
     f84:	4f e7       	ldi	r20, 0x7F	; 127
     f86:	57 e4       	ldi	r21, 0x47	; 71
     f88:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
     f8c:	18 16       	cp	r1, r24
     f8e:	4c f5       	brge	.+82     	; 0xfe2 <C_LCD_voidSendCommand+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f90:	6f a1       	ldd	r22, Y+39	; 0x27
     f92:	78 a5       	ldd	r23, Y+40	; 0x28
     f94:	89 a5       	ldd	r24, Y+41	; 0x29
     f96:	9a a5       	ldd	r25, Y+42	; 0x2a
     f98:	20 e0       	ldi	r18, 0x00	; 0
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	40 e2       	ldi	r20, 0x20	; 32
     f9e:	51 e4       	ldi	r21, 0x41	; 65
     fa0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fa4:	dc 01       	movw	r26, r24
     fa6:	cb 01       	movw	r24, r22
     fa8:	bc 01       	movw	r22, r24
     faa:	cd 01       	movw	r24, r26
     fac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fb0:	dc 01       	movw	r26, r24
     fb2:	cb 01       	movw	r24, r22
     fb4:	9a a3       	std	Y+34, r25	; 0x22
     fb6:	89 a3       	std	Y+33, r24	; 0x21
     fb8:	0f c0       	rjmp	.+30     	; 0xfd8 <C_LCD_voidSendCommand+0x1e6>
     fba:	88 ec       	ldi	r24, 0xC8	; 200
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	98 a3       	std	Y+32, r25	; 0x20
     fc0:	8f 8f       	std	Y+31, r24	; 0x1f
     fc2:	8f 8d       	ldd	r24, Y+31	; 0x1f
     fc4:	98 a1       	ldd	r25, Y+32	; 0x20
     fc6:	01 97       	sbiw	r24, 0x01	; 1
     fc8:	f1 f7       	brne	.-4      	; 0xfc6 <C_LCD_voidSendCommand+0x1d4>
     fca:	98 a3       	std	Y+32, r25	; 0x20
     fcc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fce:	89 a1       	ldd	r24, Y+33	; 0x21
     fd0:	9a a1       	ldd	r25, Y+34	; 0x22
     fd2:	01 97       	sbiw	r24, 0x01	; 1
     fd4:	9a a3       	std	Y+34, r25	; 0x22
     fd6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fd8:	89 a1       	ldd	r24, Y+33	; 0x21
     fda:	9a a1       	ldd	r25, Y+34	; 0x22
     fdc:	00 97       	sbiw	r24, 0x00	; 0
     fde:	69 f7       	brne	.-38     	; 0xfba <C_LCD_voidSendCommand+0x1c8>
     fe0:	14 c0       	rjmp	.+40     	; 0x100a <C_LCD_voidSendCommand+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fe2:	6b a1       	ldd	r22, Y+35	; 0x23
     fe4:	7c a1       	ldd	r23, Y+36	; 0x24
     fe6:	8d a1       	ldd	r24, Y+37	; 0x25
     fe8:	9e a1       	ldd	r25, Y+38	; 0x26
     fea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fee:	dc 01       	movw	r26, r24
     ff0:	cb 01       	movw	r24, r22
     ff2:	9a a3       	std	Y+34, r25	; 0x22
     ff4:	89 a3       	std	Y+33, r24	; 0x21
     ff6:	89 a1       	ldd	r24, Y+33	; 0x21
     ff8:	9a a1       	ldd	r25, Y+34	; 0x22
     ffa:	9e 8f       	std	Y+30, r25	; 0x1e
     ffc:	8d 8f       	std	Y+29, r24	; 0x1d
     ffe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1000:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1002:	01 97       	sbiw	r24, 0x01	; 1
    1004:	f1 f7       	brne	.-4      	; 0x1002 <C_LCD_voidSendCommand+0x210>
    1006:	9e 8f       	std	Y+30, r25	; 0x1e
    1008:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);

	Local_u8Command = ((Copy_u8Command <<4) |DIO_u8AndWithPort(CLCD_DATA_PORT, CLCD_DATA_PORT_MASK));
    100a:	8a ad       	ldd	r24, Y+58	; 0x3a
    100c:	88 2f       	mov	r24, r24
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	82 95       	swap	r24
    1012:	92 95       	swap	r25
    1014:	90 7f       	andi	r25, 0xF0	; 240
    1016:	98 27       	eor	r25, r24
    1018:	80 7f       	andi	r24, 0xF0	; 240
    101a:	98 27       	eor	r25, r24
    101c:	18 2f       	mov	r17, r24
    101e:	82 e0       	ldi	r24, 0x02	; 2
    1020:	6f e0       	ldi	r22, 0x0F	; 15
    1022:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <DIO_u8AndWithPort>
    1026:	81 2b       	or	r24, r17
    1028:	89 af       	std	Y+57, r24	; 0x39
	DIO_u8SetPortValue(CLCD_DATA_PORT,Local_u8Command);
    102a:	82 e0       	ldi	r24, 0x02	; 2
    102c:	69 ad       	ldd	r22, Y+57	; 0x39
    102e:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <DIO_u8SetPortValue>

	/*Send Enable pulse */
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    1032:	82 e0       	ldi	r24, 0x02	; 2
    1034:	63 e0       	ldi	r22, 0x03	; 3
    1036:	41 e0       	ldi	r20, 0x01	; 1
    1038:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <DIO_u8SetPinValue>
    103c:	80 e0       	ldi	r24, 0x00	; 0
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	a0 e0       	ldi	r26, 0x00	; 0
    1042:	b0 e4       	ldi	r27, 0x40	; 64
    1044:	89 8f       	std	Y+25, r24	; 0x19
    1046:	9a 8f       	std	Y+26, r25	; 0x1a
    1048:	ab 8f       	std	Y+27, r26	; 0x1b
    104a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    104c:	69 8d       	ldd	r22, Y+25	; 0x19
    104e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1050:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1052:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1054:	20 e0       	ldi	r18, 0x00	; 0
    1056:	30 e0       	ldi	r19, 0x00	; 0
    1058:	4a ef       	ldi	r20, 0xFA	; 250
    105a:	54 e4       	ldi	r21, 0x44	; 68
    105c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1060:	dc 01       	movw	r26, r24
    1062:	cb 01       	movw	r24, r22
    1064:	8d 8b       	std	Y+21, r24	; 0x15
    1066:	9e 8b       	std	Y+22, r25	; 0x16
    1068:	af 8b       	std	Y+23, r26	; 0x17
    106a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    106c:	6d 89       	ldd	r22, Y+21	; 0x15
    106e:	7e 89       	ldd	r23, Y+22	; 0x16
    1070:	8f 89       	ldd	r24, Y+23	; 0x17
    1072:	98 8d       	ldd	r25, Y+24	; 0x18
    1074:	20 e0       	ldi	r18, 0x00	; 0
    1076:	30 e0       	ldi	r19, 0x00	; 0
    1078:	40 e8       	ldi	r20, 0x80	; 128
    107a:	5f e3       	ldi	r21, 0x3F	; 63
    107c:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    1080:	88 23       	and	r24, r24
    1082:	2c f4       	brge	.+10     	; 0x108e <C_LCD_voidSendCommand+0x29c>
		__ticks = 1;
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	9c 8b       	std	Y+20, r25	; 0x14
    108a:	8b 8b       	std	Y+19, r24	; 0x13
    108c:	3f c0       	rjmp	.+126    	; 0x110c <C_LCD_voidSendCommand+0x31a>
	else if (__tmp > 65535)
    108e:	6d 89       	ldd	r22, Y+21	; 0x15
    1090:	7e 89       	ldd	r23, Y+22	; 0x16
    1092:	8f 89       	ldd	r24, Y+23	; 0x17
    1094:	98 8d       	ldd	r25, Y+24	; 0x18
    1096:	20 e0       	ldi	r18, 0x00	; 0
    1098:	3f ef       	ldi	r19, 0xFF	; 255
    109a:	4f e7       	ldi	r20, 0x7F	; 127
    109c:	57 e4       	ldi	r21, 0x47	; 71
    109e:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    10a2:	18 16       	cp	r1, r24
    10a4:	4c f5       	brge	.+82     	; 0x10f8 <C_LCD_voidSendCommand+0x306>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10a6:	69 8d       	ldd	r22, Y+25	; 0x19
    10a8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    10aa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    10ac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    10ae:	20 e0       	ldi	r18, 0x00	; 0
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	40 e2       	ldi	r20, 0x20	; 32
    10b4:	51 e4       	ldi	r21, 0x41	; 65
    10b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10ba:	dc 01       	movw	r26, r24
    10bc:	cb 01       	movw	r24, r22
    10be:	bc 01       	movw	r22, r24
    10c0:	cd 01       	movw	r24, r26
    10c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10c6:	dc 01       	movw	r26, r24
    10c8:	cb 01       	movw	r24, r22
    10ca:	9c 8b       	std	Y+20, r25	; 0x14
    10cc:	8b 8b       	std	Y+19, r24	; 0x13
    10ce:	0f c0       	rjmp	.+30     	; 0x10ee <C_LCD_voidSendCommand+0x2fc>
    10d0:	88 ec       	ldi	r24, 0xC8	; 200
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	9a 8b       	std	Y+18, r25	; 0x12
    10d6:	89 8b       	std	Y+17, r24	; 0x11
    10d8:	89 89       	ldd	r24, Y+17	; 0x11
    10da:	9a 89       	ldd	r25, Y+18	; 0x12
    10dc:	01 97       	sbiw	r24, 0x01	; 1
    10de:	f1 f7       	brne	.-4      	; 0x10dc <C_LCD_voidSendCommand+0x2ea>
    10e0:	9a 8b       	std	Y+18, r25	; 0x12
    10e2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10e4:	8b 89       	ldd	r24, Y+19	; 0x13
    10e6:	9c 89       	ldd	r25, Y+20	; 0x14
    10e8:	01 97       	sbiw	r24, 0x01	; 1
    10ea:	9c 8b       	std	Y+20, r25	; 0x14
    10ec:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10ee:	8b 89       	ldd	r24, Y+19	; 0x13
    10f0:	9c 89       	ldd	r25, Y+20	; 0x14
    10f2:	00 97       	sbiw	r24, 0x00	; 0
    10f4:	69 f7       	brne	.-38     	; 0x10d0 <C_LCD_voidSendCommand+0x2de>
    10f6:	14 c0       	rjmp	.+40     	; 0x1120 <C_LCD_voidSendCommand+0x32e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10f8:	6d 89       	ldd	r22, Y+21	; 0x15
    10fa:	7e 89       	ldd	r23, Y+22	; 0x16
    10fc:	8f 89       	ldd	r24, Y+23	; 0x17
    10fe:	98 8d       	ldd	r25, Y+24	; 0x18
    1100:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1104:	dc 01       	movw	r26, r24
    1106:	cb 01       	movw	r24, r22
    1108:	9c 8b       	std	Y+20, r25	; 0x14
    110a:	8b 8b       	std	Y+19, r24	; 0x13
    110c:	8b 89       	ldd	r24, Y+19	; 0x13
    110e:	9c 89       	ldd	r25, Y+20	; 0x14
    1110:	98 8b       	std	Y+16, r25	; 0x10
    1112:	8f 87       	std	Y+15, r24	; 0x0f
    1114:	8f 85       	ldd	r24, Y+15	; 0x0f
    1116:	98 89       	ldd	r25, Y+16	; 0x10
    1118:	01 97       	sbiw	r24, 0x01	; 1
    111a:	f1 f7       	brne	.-4      	; 0x1118 <C_LCD_voidSendCommand+0x326>
    111c:	98 8b       	std	Y+16, r25	; 0x10
    111e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    1120:	82 e0       	ldi	r24, 0x02	; 2
    1122:	63 e0       	ldi	r22, 0x03	; 3
    1124:	40 e0       	ldi	r20, 0x00	; 0
    1126:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <DIO_u8SetPinValue>
    112a:	80 e0       	ldi	r24, 0x00	; 0
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	a0 ea       	ldi	r26, 0xA0	; 160
    1130:	b0 e4       	ldi	r27, 0x40	; 64
    1132:	8b 87       	std	Y+11, r24	; 0x0b
    1134:	9c 87       	std	Y+12, r25	; 0x0c
    1136:	ad 87       	std	Y+13, r26	; 0x0d
    1138:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    113a:	6b 85       	ldd	r22, Y+11	; 0x0b
    113c:	7c 85       	ldd	r23, Y+12	; 0x0c
    113e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1140:	9e 85       	ldd	r25, Y+14	; 0x0e
    1142:	20 e0       	ldi	r18, 0x00	; 0
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	4a ef       	ldi	r20, 0xFA	; 250
    1148:	54 e4       	ldi	r21, 0x44	; 68
    114a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    114e:	dc 01       	movw	r26, r24
    1150:	cb 01       	movw	r24, r22
    1152:	8f 83       	std	Y+7, r24	; 0x07
    1154:	98 87       	std	Y+8, r25	; 0x08
    1156:	a9 87       	std	Y+9, r26	; 0x09
    1158:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    115a:	6f 81       	ldd	r22, Y+7	; 0x07
    115c:	78 85       	ldd	r23, Y+8	; 0x08
    115e:	89 85       	ldd	r24, Y+9	; 0x09
    1160:	9a 85       	ldd	r25, Y+10	; 0x0a
    1162:	20 e0       	ldi	r18, 0x00	; 0
    1164:	30 e0       	ldi	r19, 0x00	; 0
    1166:	40 e8       	ldi	r20, 0x80	; 128
    1168:	5f e3       	ldi	r21, 0x3F	; 63
    116a:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    116e:	88 23       	and	r24, r24
    1170:	2c f4       	brge	.+10     	; 0x117c <C_LCD_voidSendCommand+0x38a>
		__ticks = 1;
    1172:	81 e0       	ldi	r24, 0x01	; 1
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	9e 83       	std	Y+6, r25	; 0x06
    1178:	8d 83       	std	Y+5, r24	; 0x05
    117a:	3f c0       	rjmp	.+126    	; 0x11fa <C_LCD_voidSendCommand+0x408>
	else if (__tmp > 65535)
    117c:	6f 81       	ldd	r22, Y+7	; 0x07
    117e:	78 85       	ldd	r23, Y+8	; 0x08
    1180:	89 85       	ldd	r24, Y+9	; 0x09
    1182:	9a 85       	ldd	r25, Y+10	; 0x0a
    1184:	20 e0       	ldi	r18, 0x00	; 0
    1186:	3f ef       	ldi	r19, 0xFF	; 255
    1188:	4f e7       	ldi	r20, 0x7F	; 127
    118a:	57 e4       	ldi	r21, 0x47	; 71
    118c:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    1190:	18 16       	cp	r1, r24
    1192:	4c f5       	brge	.+82     	; 0x11e6 <C_LCD_voidSendCommand+0x3f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1194:	6b 85       	ldd	r22, Y+11	; 0x0b
    1196:	7c 85       	ldd	r23, Y+12	; 0x0c
    1198:	8d 85       	ldd	r24, Y+13	; 0x0d
    119a:	9e 85       	ldd	r25, Y+14	; 0x0e
    119c:	20 e0       	ldi	r18, 0x00	; 0
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	40 e2       	ldi	r20, 0x20	; 32
    11a2:	51 e4       	ldi	r21, 0x41	; 65
    11a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11a8:	dc 01       	movw	r26, r24
    11aa:	cb 01       	movw	r24, r22
    11ac:	bc 01       	movw	r22, r24
    11ae:	cd 01       	movw	r24, r26
    11b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11b4:	dc 01       	movw	r26, r24
    11b6:	cb 01       	movw	r24, r22
    11b8:	9e 83       	std	Y+6, r25	; 0x06
    11ba:	8d 83       	std	Y+5, r24	; 0x05
    11bc:	0f c0       	rjmp	.+30     	; 0x11dc <C_LCD_voidSendCommand+0x3ea>
    11be:	88 ec       	ldi	r24, 0xC8	; 200
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	9c 83       	std	Y+4, r25	; 0x04
    11c4:	8b 83       	std	Y+3, r24	; 0x03
    11c6:	8b 81       	ldd	r24, Y+3	; 0x03
    11c8:	9c 81       	ldd	r25, Y+4	; 0x04
    11ca:	01 97       	sbiw	r24, 0x01	; 1
    11cc:	f1 f7       	brne	.-4      	; 0x11ca <C_LCD_voidSendCommand+0x3d8>
    11ce:	9c 83       	std	Y+4, r25	; 0x04
    11d0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11d2:	8d 81       	ldd	r24, Y+5	; 0x05
    11d4:	9e 81       	ldd	r25, Y+6	; 0x06
    11d6:	01 97       	sbiw	r24, 0x01	; 1
    11d8:	9e 83       	std	Y+6, r25	; 0x06
    11da:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11dc:	8d 81       	ldd	r24, Y+5	; 0x05
    11de:	9e 81       	ldd	r25, Y+6	; 0x06
    11e0:	00 97       	sbiw	r24, 0x00	; 0
    11e2:	69 f7       	brne	.-38     	; 0x11be <C_LCD_voidSendCommand+0x3cc>
    11e4:	14 c0       	rjmp	.+40     	; 0x120e <C_LCD_voidSendCommand+0x41c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11e6:	6f 81       	ldd	r22, Y+7	; 0x07
    11e8:	78 85       	ldd	r23, Y+8	; 0x08
    11ea:	89 85       	ldd	r24, Y+9	; 0x09
    11ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    11ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11f2:	dc 01       	movw	r26, r24
    11f4:	cb 01       	movw	r24, r22
    11f6:	9e 83       	std	Y+6, r25	; 0x06
    11f8:	8d 83       	std	Y+5, r24	; 0x05
    11fa:	8d 81       	ldd	r24, Y+5	; 0x05
    11fc:	9e 81       	ldd	r25, Y+6	; 0x06
    11fe:	9a 83       	std	Y+2, r25	; 0x02
    1200:	89 83       	std	Y+1, r24	; 0x01
    1202:	89 81       	ldd	r24, Y+1	; 0x01
    1204:	9a 81       	ldd	r25, Y+2	; 0x02
    1206:	01 97       	sbiw	r24, 0x01	; 1
    1208:	f1 f7       	brne	.-4      	; 0x1206 <C_LCD_voidSendCommand+0x414>
    120a:	9a 83       	std	Y+2, r25	; 0x02
    120c:	89 83       	std	Y+1, r24	; 0x01

#endif



}
    120e:	ea 96       	adiw	r28, 0x3a	; 58
    1210:	0f b6       	in	r0, 0x3f	; 63
    1212:	f8 94       	cli
    1214:	de bf       	out	0x3e, r29	; 62
    1216:	0f be       	out	0x3f, r0	; 63
    1218:	cd bf       	out	0x3d, r28	; 61
    121a:	cf 91       	pop	r28
    121c:	df 91       	pop	r29
    121e:	1f 91       	pop	r17
    1220:	08 95       	ret

00001222 <CLCD_voidSendData>:

void CLCD_voidSendData(u8 Copy_u8Data)
{
    1222:	1f 93       	push	r17
    1224:	df 93       	push	r29
    1226:	cf 93       	push	r28
    1228:	cd b7       	in	r28, 0x3d	; 61
    122a:	de b7       	in	r29, 0x3e	; 62
    122c:	ea 97       	sbiw	r28, 0x3a	; 58
    122e:	0f b6       	in	r0, 0x3f	; 63
    1230:	f8 94       	cli
    1232:	de bf       	out	0x3e, r29	; 62
    1234:	0f be       	out	0x3f, r0	; 63
    1236:	cd bf       	out	0x3d, r28	; 61
    1238:	8a af       	std	Y+58, r24	; 0x3a

	if(Local_u8SetPositionY>CLCD_COL_NUM)
    123a:	80 91 87 01 	lds	r24, 0x0187
    123e:	80 31       	cpi	r24, 0x10	; 16
    1240:	c8 f0       	brcs	.+50     	; 0x1274 <CLCD_voidSendData+0x52>
	{
		if(Local_u8SetPositionX>CLCD_ROW_NUM)
    1242:	80 91 86 01 	lds	r24, 0x0186
    1246:	84 30       	cpi	r24, 0x04	; 4
    1248:	10 f0       	brcs	.+4      	; 0x124e <CLCD_voidSendData+0x2c>
		{
			Local_u8SetPositionX = X_INITIAL_POSITION;
    124a:	10 92 86 01 	sts	0x0186, r1
		}
		DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN4,DIO_u8PIN_HIGH);
    124e:	80 e0       	ldi	r24, 0x00	; 0
    1250:	64 e0       	ldi	r22, 0x04	; 4
    1252:	41 e0       	ldi	r20, 0x01	; 1
    1254:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <DIO_u8SetPinValue>
		Local_u8SetPositionY = Y_INITIAL_POSITION;
    1258:	10 92 87 01 	sts	0x0187, r1
		Local_u8SetPositionX++;
    125c:	80 91 86 01 	lds	r24, 0x0186
    1260:	8f 5f       	subi	r24, 0xFF	; 255
    1262:	80 93 86 01 	sts	0x0186, r24
		CLCD_voidGoToXY(Local_u8SetPositionX,Local_u8SetPositionY);
    1266:	80 91 86 01 	lds	r24, 0x0186
    126a:	90 91 87 01 	lds	r25, 0x0187
    126e:	69 2f       	mov	r22, r25
    1270:	0e 94 0e 0c 	call	0x181c	; 0x181c <CLCD_voidGoToXY>
	}
	Local_u8SetPositionY++;
    1274:	80 91 87 01 	lds	r24, 0x0187
    1278:	8f 5f       	subi	r24, 0xFF	; 255
    127a:	80 93 87 01 	sts	0x0187, r24


	/*Set RS Pin to low to send data */
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_HIGH);
    127e:	82 e0       	ldi	r24, 0x02	; 2
    1280:	62 e0       	ldi	r22, 0x02	; 2
    1282:	41 e0       	ldi	r20, 0x01	; 1
    1284:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <DIO_u8SetPinValue>
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);

#elif   MODE_SELECT ==_4_BIT_MODE

	u8 Local_u8Data = (((Copy_u8Data) & CLCD_COMMAND_MASK) | DIO_u8AndWithPort(CLCD_DATA_PORT, CLCD_DATA_PORT_MASK));
    1288:	8a ad       	ldd	r24, Y+58	; 0x3a
    128a:	18 2f       	mov	r17, r24
    128c:	10 7f       	andi	r17, 0xF0	; 240
    128e:	82 e0       	ldi	r24, 0x02	; 2
    1290:	6f e0       	ldi	r22, 0x0F	; 15
    1292:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <DIO_u8AndWithPort>
    1296:	81 2b       	or	r24, r17
    1298:	89 af       	std	Y+57, r24	; 0x39
	/* Set Command to data pins */
	DIO_u8SetPortValue(CLCD_DATA_PORT,Local_u8Data);
    129a:	82 e0       	ldi	r24, 0x02	; 2
    129c:	69 ad       	ldd	r22, Y+57	; 0x39
    129e:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <DIO_u8SetPortValue>

	/*Send Enable pulse */
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    12a2:	82 e0       	ldi	r24, 0x02	; 2
    12a4:	63 e0       	ldi	r22, 0x03	; 3
    12a6:	41 e0       	ldi	r20, 0x01	; 1
    12a8:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <DIO_u8SetPinValue>
    12ac:	80 e0       	ldi	r24, 0x00	; 0
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	a0 e0       	ldi	r26, 0x00	; 0
    12b2:	b0 e4       	ldi	r27, 0x40	; 64
    12b4:	8d ab       	std	Y+53, r24	; 0x35
    12b6:	9e ab       	std	Y+54, r25	; 0x36
    12b8:	af ab       	std	Y+55, r26	; 0x37
    12ba:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12bc:	6d a9       	ldd	r22, Y+53	; 0x35
    12be:	7e a9       	ldd	r23, Y+54	; 0x36
    12c0:	8f a9       	ldd	r24, Y+55	; 0x37
    12c2:	98 ad       	ldd	r25, Y+56	; 0x38
    12c4:	20 e0       	ldi	r18, 0x00	; 0
    12c6:	30 e0       	ldi	r19, 0x00	; 0
    12c8:	4a ef       	ldi	r20, 0xFA	; 250
    12ca:	54 e4       	ldi	r21, 0x44	; 68
    12cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12d0:	dc 01       	movw	r26, r24
    12d2:	cb 01       	movw	r24, r22
    12d4:	89 ab       	std	Y+49, r24	; 0x31
    12d6:	9a ab       	std	Y+50, r25	; 0x32
    12d8:	ab ab       	std	Y+51, r26	; 0x33
    12da:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    12dc:	69 a9       	ldd	r22, Y+49	; 0x31
    12de:	7a a9       	ldd	r23, Y+50	; 0x32
    12e0:	8b a9       	ldd	r24, Y+51	; 0x33
    12e2:	9c a9       	ldd	r25, Y+52	; 0x34
    12e4:	20 e0       	ldi	r18, 0x00	; 0
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	40 e8       	ldi	r20, 0x80	; 128
    12ea:	5f e3       	ldi	r21, 0x3F	; 63
    12ec:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    12f0:	88 23       	and	r24, r24
    12f2:	2c f4       	brge	.+10     	; 0x12fe <CLCD_voidSendData+0xdc>
		__ticks = 1;
    12f4:	81 e0       	ldi	r24, 0x01	; 1
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	98 ab       	std	Y+48, r25	; 0x30
    12fa:	8f a7       	std	Y+47, r24	; 0x2f
    12fc:	3f c0       	rjmp	.+126    	; 0x137c <CLCD_voidSendData+0x15a>
	else if (__tmp > 65535)
    12fe:	69 a9       	ldd	r22, Y+49	; 0x31
    1300:	7a a9       	ldd	r23, Y+50	; 0x32
    1302:	8b a9       	ldd	r24, Y+51	; 0x33
    1304:	9c a9       	ldd	r25, Y+52	; 0x34
    1306:	20 e0       	ldi	r18, 0x00	; 0
    1308:	3f ef       	ldi	r19, 0xFF	; 255
    130a:	4f e7       	ldi	r20, 0x7F	; 127
    130c:	57 e4       	ldi	r21, 0x47	; 71
    130e:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    1312:	18 16       	cp	r1, r24
    1314:	4c f5       	brge	.+82     	; 0x1368 <CLCD_voidSendData+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1316:	6d a9       	ldd	r22, Y+53	; 0x35
    1318:	7e a9       	ldd	r23, Y+54	; 0x36
    131a:	8f a9       	ldd	r24, Y+55	; 0x37
    131c:	98 ad       	ldd	r25, Y+56	; 0x38
    131e:	20 e0       	ldi	r18, 0x00	; 0
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	40 e2       	ldi	r20, 0x20	; 32
    1324:	51 e4       	ldi	r21, 0x41	; 65
    1326:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    132a:	dc 01       	movw	r26, r24
    132c:	cb 01       	movw	r24, r22
    132e:	bc 01       	movw	r22, r24
    1330:	cd 01       	movw	r24, r26
    1332:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1336:	dc 01       	movw	r26, r24
    1338:	cb 01       	movw	r24, r22
    133a:	98 ab       	std	Y+48, r25	; 0x30
    133c:	8f a7       	std	Y+47, r24	; 0x2f
    133e:	0f c0       	rjmp	.+30     	; 0x135e <CLCD_voidSendData+0x13c>
    1340:	88 ec       	ldi	r24, 0xC8	; 200
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	9e a7       	std	Y+46, r25	; 0x2e
    1346:	8d a7       	std	Y+45, r24	; 0x2d
    1348:	8d a5       	ldd	r24, Y+45	; 0x2d
    134a:	9e a5       	ldd	r25, Y+46	; 0x2e
    134c:	01 97       	sbiw	r24, 0x01	; 1
    134e:	f1 f7       	brne	.-4      	; 0x134c <CLCD_voidSendData+0x12a>
    1350:	9e a7       	std	Y+46, r25	; 0x2e
    1352:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1354:	8f a5       	ldd	r24, Y+47	; 0x2f
    1356:	98 a9       	ldd	r25, Y+48	; 0x30
    1358:	01 97       	sbiw	r24, 0x01	; 1
    135a:	98 ab       	std	Y+48, r25	; 0x30
    135c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    135e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1360:	98 a9       	ldd	r25, Y+48	; 0x30
    1362:	00 97       	sbiw	r24, 0x00	; 0
    1364:	69 f7       	brne	.-38     	; 0x1340 <CLCD_voidSendData+0x11e>
    1366:	14 c0       	rjmp	.+40     	; 0x1390 <CLCD_voidSendData+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1368:	69 a9       	ldd	r22, Y+49	; 0x31
    136a:	7a a9       	ldd	r23, Y+50	; 0x32
    136c:	8b a9       	ldd	r24, Y+51	; 0x33
    136e:	9c a9       	ldd	r25, Y+52	; 0x34
    1370:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1374:	dc 01       	movw	r26, r24
    1376:	cb 01       	movw	r24, r22
    1378:	98 ab       	std	Y+48, r25	; 0x30
    137a:	8f a7       	std	Y+47, r24	; 0x2f
    137c:	8f a5       	ldd	r24, Y+47	; 0x2f
    137e:	98 a9       	ldd	r25, Y+48	; 0x30
    1380:	9c a7       	std	Y+44, r25	; 0x2c
    1382:	8b a7       	std	Y+43, r24	; 0x2b
    1384:	8b a5       	ldd	r24, Y+43	; 0x2b
    1386:	9c a5       	ldd	r25, Y+44	; 0x2c
    1388:	01 97       	sbiw	r24, 0x01	; 1
    138a:	f1 f7       	brne	.-4      	; 0x1388 <CLCD_voidSendData+0x166>
    138c:	9c a7       	std	Y+44, r25	; 0x2c
    138e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    1390:	82 e0       	ldi	r24, 0x02	; 2
    1392:	63 e0       	ldi	r22, 0x03	; 3
    1394:	40 e0       	ldi	r20, 0x00	; 0
    1396:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <DIO_u8SetPinValue>
    139a:	80 e0       	ldi	r24, 0x00	; 0
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	a0 ea       	ldi	r26, 0xA0	; 160
    13a0:	b0 e4       	ldi	r27, 0x40	; 64
    13a2:	8f a3       	std	Y+39, r24	; 0x27
    13a4:	98 a7       	std	Y+40, r25	; 0x28
    13a6:	a9 a7       	std	Y+41, r26	; 0x29
    13a8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13aa:	6f a1       	ldd	r22, Y+39	; 0x27
    13ac:	78 a5       	ldd	r23, Y+40	; 0x28
    13ae:	89 a5       	ldd	r24, Y+41	; 0x29
    13b0:	9a a5       	ldd	r25, Y+42	; 0x2a
    13b2:	20 e0       	ldi	r18, 0x00	; 0
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	4a ef       	ldi	r20, 0xFA	; 250
    13b8:	54 e4       	ldi	r21, 0x44	; 68
    13ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13be:	dc 01       	movw	r26, r24
    13c0:	cb 01       	movw	r24, r22
    13c2:	8b a3       	std	Y+35, r24	; 0x23
    13c4:	9c a3       	std	Y+36, r25	; 0x24
    13c6:	ad a3       	std	Y+37, r26	; 0x25
    13c8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    13ca:	6b a1       	ldd	r22, Y+35	; 0x23
    13cc:	7c a1       	ldd	r23, Y+36	; 0x24
    13ce:	8d a1       	ldd	r24, Y+37	; 0x25
    13d0:	9e a1       	ldd	r25, Y+38	; 0x26
    13d2:	20 e0       	ldi	r18, 0x00	; 0
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	40 e8       	ldi	r20, 0x80	; 128
    13d8:	5f e3       	ldi	r21, 0x3F	; 63
    13da:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    13de:	88 23       	and	r24, r24
    13e0:	2c f4       	brge	.+10     	; 0x13ec <CLCD_voidSendData+0x1ca>
		__ticks = 1;
    13e2:	81 e0       	ldi	r24, 0x01	; 1
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	9a a3       	std	Y+34, r25	; 0x22
    13e8:	89 a3       	std	Y+33, r24	; 0x21
    13ea:	3f c0       	rjmp	.+126    	; 0x146a <CLCD_voidSendData+0x248>
	else if (__tmp > 65535)
    13ec:	6b a1       	ldd	r22, Y+35	; 0x23
    13ee:	7c a1       	ldd	r23, Y+36	; 0x24
    13f0:	8d a1       	ldd	r24, Y+37	; 0x25
    13f2:	9e a1       	ldd	r25, Y+38	; 0x26
    13f4:	20 e0       	ldi	r18, 0x00	; 0
    13f6:	3f ef       	ldi	r19, 0xFF	; 255
    13f8:	4f e7       	ldi	r20, 0x7F	; 127
    13fa:	57 e4       	ldi	r21, 0x47	; 71
    13fc:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    1400:	18 16       	cp	r1, r24
    1402:	4c f5       	brge	.+82     	; 0x1456 <CLCD_voidSendData+0x234>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1404:	6f a1       	ldd	r22, Y+39	; 0x27
    1406:	78 a5       	ldd	r23, Y+40	; 0x28
    1408:	89 a5       	ldd	r24, Y+41	; 0x29
    140a:	9a a5       	ldd	r25, Y+42	; 0x2a
    140c:	20 e0       	ldi	r18, 0x00	; 0
    140e:	30 e0       	ldi	r19, 0x00	; 0
    1410:	40 e2       	ldi	r20, 0x20	; 32
    1412:	51 e4       	ldi	r21, 0x41	; 65
    1414:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1418:	dc 01       	movw	r26, r24
    141a:	cb 01       	movw	r24, r22
    141c:	bc 01       	movw	r22, r24
    141e:	cd 01       	movw	r24, r26
    1420:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1424:	dc 01       	movw	r26, r24
    1426:	cb 01       	movw	r24, r22
    1428:	9a a3       	std	Y+34, r25	; 0x22
    142a:	89 a3       	std	Y+33, r24	; 0x21
    142c:	0f c0       	rjmp	.+30     	; 0x144c <CLCD_voidSendData+0x22a>
    142e:	88 ec       	ldi	r24, 0xC8	; 200
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	98 a3       	std	Y+32, r25	; 0x20
    1434:	8f 8f       	std	Y+31, r24	; 0x1f
    1436:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1438:	98 a1       	ldd	r25, Y+32	; 0x20
    143a:	01 97       	sbiw	r24, 0x01	; 1
    143c:	f1 f7       	brne	.-4      	; 0x143a <CLCD_voidSendData+0x218>
    143e:	98 a3       	std	Y+32, r25	; 0x20
    1440:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1442:	89 a1       	ldd	r24, Y+33	; 0x21
    1444:	9a a1       	ldd	r25, Y+34	; 0x22
    1446:	01 97       	sbiw	r24, 0x01	; 1
    1448:	9a a3       	std	Y+34, r25	; 0x22
    144a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    144c:	89 a1       	ldd	r24, Y+33	; 0x21
    144e:	9a a1       	ldd	r25, Y+34	; 0x22
    1450:	00 97       	sbiw	r24, 0x00	; 0
    1452:	69 f7       	brne	.-38     	; 0x142e <CLCD_voidSendData+0x20c>
    1454:	14 c0       	rjmp	.+40     	; 0x147e <CLCD_voidSendData+0x25c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1456:	6b a1       	ldd	r22, Y+35	; 0x23
    1458:	7c a1       	ldd	r23, Y+36	; 0x24
    145a:	8d a1       	ldd	r24, Y+37	; 0x25
    145c:	9e a1       	ldd	r25, Y+38	; 0x26
    145e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1462:	dc 01       	movw	r26, r24
    1464:	cb 01       	movw	r24, r22
    1466:	9a a3       	std	Y+34, r25	; 0x22
    1468:	89 a3       	std	Y+33, r24	; 0x21
    146a:	89 a1       	ldd	r24, Y+33	; 0x21
    146c:	9a a1       	ldd	r25, Y+34	; 0x22
    146e:	9e 8f       	std	Y+30, r25	; 0x1e
    1470:	8d 8f       	std	Y+29, r24	; 0x1d
    1472:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1474:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1476:	01 97       	sbiw	r24, 0x01	; 1
    1478:	f1 f7       	brne	.-4      	; 0x1476 <CLCD_voidSendData+0x254>
    147a:	9e 8f       	std	Y+30, r25	; 0x1e
    147c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);

	Local_u8Data = ((Copy_u8Data <<4) |DIO_u8AndWithPort(CLCD_DATA_PORT, CLCD_DATA_PORT_MASK));
    147e:	8a ad       	ldd	r24, Y+58	; 0x3a
    1480:	88 2f       	mov	r24, r24
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	82 95       	swap	r24
    1486:	92 95       	swap	r25
    1488:	90 7f       	andi	r25, 0xF0	; 240
    148a:	98 27       	eor	r25, r24
    148c:	80 7f       	andi	r24, 0xF0	; 240
    148e:	98 27       	eor	r25, r24
    1490:	18 2f       	mov	r17, r24
    1492:	82 e0       	ldi	r24, 0x02	; 2
    1494:	6f e0       	ldi	r22, 0x0F	; 15
    1496:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <DIO_u8AndWithPort>
    149a:	81 2b       	or	r24, r17
    149c:	89 af       	std	Y+57, r24	; 0x39

	DIO_u8SetPortValue(CLCD_DATA_PORT,Local_u8Data);
    149e:	82 e0       	ldi	r24, 0x02	; 2
    14a0:	69 ad       	ldd	r22, Y+57	; 0x39
    14a2:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <DIO_u8SetPortValue>

	/*Send Enable pulse */
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    14a6:	82 e0       	ldi	r24, 0x02	; 2
    14a8:	63 e0       	ldi	r22, 0x03	; 3
    14aa:	41 e0       	ldi	r20, 0x01	; 1
    14ac:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <DIO_u8SetPinValue>
    14b0:	80 e0       	ldi	r24, 0x00	; 0
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	a0 e0       	ldi	r26, 0x00	; 0
    14b6:	b0 e4       	ldi	r27, 0x40	; 64
    14b8:	89 8f       	std	Y+25, r24	; 0x19
    14ba:	9a 8f       	std	Y+26, r25	; 0x1a
    14bc:	ab 8f       	std	Y+27, r26	; 0x1b
    14be:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14c0:	69 8d       	ldd	r22, Y+25	; 0x19
    14c2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14c4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14c6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14c8:	20 e0       	ldi	r18, 0x00	; 0
    14ca:	30 e0       	ldi	r19, 0x00	; 0
    14cc:	4a ef       	ldi	r20, 0xFA	; 250
    14ce:	54 e4       	ldi	r21, 0x44	; 68
    14d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14d4:	dc 01       	movw	r26, r24
    14d6:	cb 01       	movw	r24, r22
    14d8:	8d 8b       	std	Y+21, r24	; 0x15
    14da:	9e 8b       	std	Y+22, r25	; 0x16
    14dc:	af 8b       	std	Y+23, r26	; 0x17
    14de:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    14e0:	6d 89       	ldd	r22, Y+21	; 0x15
    14e2:	7e 89       	ldd	r23, Y+22	; 0x16
    14e4:	8f 89       	ldd	r24, Y+23	; 0x17
    14e6:	98 8d       	ldd	r25, Y+24	; 0x18
    14e8:	20 e0       	ldi	r18, 0x00	; 0
    14ea:	30 e0       	ldi	r19, 0x00	; 0
    14ec:	40 e8       	ldi	r20, 0x80	; 128
    14ee:	5f e3       	ldi	r21, 0x3F	; 63
    14f0:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    14f4:	88 23       	and	r24, r24
    14f6:	2c f4       	brge	.+10     	; 0x1502 <CLCD_voidSendData+0x2e0>
		__ticks = 1;
    14f8:	81 e0       	ldi	r24, 0x01	; 1
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	9c 8b       	std	Y+20, r25	; 0x14
    14fe:	8b 8b       	std	Y+19, r24	; 0x13
    1500:	3f c0       	rjmp	.+126    	; 0x1580 <CLCD_voidSendData+0x35e>
	else if (__tmp > 65535)
    1502:	6d 89       	ldd	r22, Y+21	; 0x15
    1504:	7e 89       	ldd	r23, Y+22	; 0x16
    1506:	8f 89       	ldd	r24, Y+23	; 0x17
    1508:	98 8d       	ldd	r25, Y+24	; 0x18
    150a:	20 e0       	ldi	r18, 0x00	; 0
    150c:	3f ef       	ldi	r19, 0xFF	; 255
    150e:	4f e7       	ldi	r20, 0x7F	; 127
    1510:	57 e4       	ldi	r21, 0x47	; 71
    1512:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    1516:	18 16       	cp	r1, r24
    1518:	4c f5       	brge	.+82     	; 0x156c <CLCD_voidSendData+0x34a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    151a:	69 8d       	ldd	r22, Y+25	; 0x19
    151c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    151e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1520:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1522:	20 e0       	ldi	r18, 0x00	; 0
    1524:	30 e0       	ldi	r19, 0x00	; 0
    1526:	40 e2       	ldi	r20, 0x20	; 32
    1528:	51 e4       	ldi	r21, 0x41	; 65
    152a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    152e:	dc 01       	movw	r26, r24
    1530:	cb 01       	movw	r24, r22
    1532:	bc 01       	movw	r22, r24
    1534:	cd 01       	movw	r24, r26
    1536:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    153a:	dc 01       	movw	r26, r24
    153c:	cb 01       	movw	r24, r22
    153e:	9c 8b       	std	Y+20, r25	; 0x14
    1540:	8b 8b       	std	Y+19, r24	; 0x13
    1542:	0f c0       	rjmp	.+30     	; 0x1562 <CLCD_voidSendData+0x340>
    1544:	88 ec       	ldi	r24, 0xC8	; 200
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	9a 8b       	std	Y+18, r25	; 0x12
    154a:	89 8b       	std	Y+17, r24	; 0x11
    154c:	89 89       	ldd	r24, Y+17	; 0x11
    154e:	9a 89       	ldd	r25, Y+18	; 0x12
    1550:	01 97       	sbiw	r24, 0x01	; 1
    1552:	f1 f7       	brne	.-4      	; 0x1550 <CLCD_voidSendData+0x32e>
    1554:	9a 8b       	std	Y+18, r25	; 0x12
    1556:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1558:	8b 89       	ldd	r24, Y+19	; 0x13
    155a:	9c 89       	ldd	r25, Y+20	; 0x14
    155c:	01 97       	sbiw	r24, 0x01	; 1
    155e:	9c 8b       	std	Y+20, r25	; 0x14
    1560:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1562:	8b 89       	ldd	r24, Y+19	; 0x13
    1564:	9c 89       	ldd	r25, Y+20	; 0x14
    1566:	00 97       	sbiw	r24, 0x00	; 0
    1568:	69 f7       	brne	.-38     	; 0x1544 <CLCD_voidSendData+0x322>
    156a:	14 c0       	rjmp	.+40     	; 0x1594 <CLCD_voidSendData+0x372>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    156c:	6d 89       	ldd	r22, Y+21	; 0x15
    156e:	7e 89       	ldd	r23, Y+22	; 0x16
    1570:	8f 89       	ldd	r24, Y+23	; 0x17
    1572:	98 8d       	ldd	r25, Y+24	; 0x18
    1574:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1578:	dc 01       	movw	r26, r24
    157a:	cb 01       	movw	r24, r22
    157c:	9c 8b       	std	Y+20, r25	; 0x14
    157e:	8b 8b       	std	Y+19, r24	; 0x13
    1580:	8b 89       	ldd	r24, Y+19	; 0x13
    1582:	9c 89       	ldd	r25, Y+20	; 0x14
    1584:	98 8b       	std	Y+16, r25	; 0x10
    1586:	8f 87       	std	Y+15, r24	; 0x0f
    1588:	8f 85       	ldd	r24, Y+15	; 0x0f
    158a:	98 89       	ldd	r25, Y+16	; 0x10
    158c:	01 97       	sbiw	r24, 0x01	; 1
    158e:	f1 f7       	brne	.-4      	; 0x158c <CLCD_voidSendData+0x36a>
    1590:	98 8b       	std	Y+16, r25	; 0x10
    1592:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    1594:	82 e0       	ldi	r24, 0x02	; 2
    1596:	63 e0       	ldi	r22, 0x03	; 3
    1598:	40 e0       	ldi	r20, 0x00	; 0
    159a:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <DIO_u8SetPinValue>
    159e:	80 e0       	ldi	r24, 0x00	; 0
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	a0 ea       	ldi	r26, 0xA0	; 160
    15a4:	b0 e4       	ldi	r27, 0x40	; 64
    15a6:	8b 87       	std	Y+11, r24	; 0x0b
    15a8:	9c 87       	std	Y+12, r25	; 0x0c
    15aa:	ad 87       	std	Y+13, r26	; 0x0d
    15ac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    15b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    15b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    15b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    15b6:	20 e0       	ldi	r18, 0x00	; 0
    15b8:	30 e0       	ldi	r19, 0x00	; 0
    15ba:	4a ef       	ldi	r20, 0xFA	; 250
    15bc:	54 e4       	ldi	r21, 0x44	; 68
    15be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15c2:	dc 01       	movw	r26, r24
    15c4:	cb 01       	movw	r24, r22
    15c6:	8f 83       	std	Y+7, r24	; 0x07
    15c8:	98 87       	std	Y+8, r25	; 0x08
    15ca:	a9 87       	std	Y+9, r26	; 0x09
    15cc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    15ce:	6f 81       	ldd	r22, Y+7	; 0x07
    15d0:	78 85       	ldd	r23, Y+8	; 0x08
    15d2:	89 85       	ldd	r24, Y+9	; 0x09
    15d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    15d6:	20 e0       	ldi	r18, 0x00	; 0
    15d8:	30 e0       	ldi	r19, 0x00	; 0
    15da:	40 e8       	ldi	r20, 0x80	; 128
    15dc:	5f e3       	ldi	r21, 0x3F	; 63
    15de:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    15e2:	88 23       	and	r24, r24
    15e4:	2c f4       	brge	.+10     	; 0x15f0 <CLCD_voidSendData+0x3ce>
		__ticks = 1;
    15e6:	81 e0       	ldi	r24, 0x01	; 1
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	9e 83       	std	Y+6, r25	; 0x06
    15ec:	8d 83       	std	Y+5, r24	; 0x05
    15ee:	3f c0       	rjmp	.+126    	; 0x166e <CLCD_voidSendData+0x44c>
	else if (__tmp > 65535)
    15f0:	6f 81       	ldd	r22, Y+7	; 0x07
    15f2:	78 85       	ldd	r23, Y+8	; 0x08
    15f4:	89 85       	ldd	r24, Y+9	; 0x09
    15f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    15f8:	20 e0       	ldi	r18, 0x00	; 0
    15fa:	3f ef       	ldi	r19, 0xFF	; 255
    15fc:	4f e7       	ldi	r20, 0x7F	; 127
    15fe:	57 e4       	ldi	r21, 0x47	; 71
    1600:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    1604:	18 16       	cp	r1, r24
    1606:	4c f5       	brge	.+82     	; 0x165a <CLCD_voidSendData+0x438>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1608:	6b 85       	ldd	r22, Y+11	; 0x0b
    160a:	7c 85       	ldd	r23, Y+12	; 0x0c
    160c:	8d 85       	ldd	r24, Y+13	; 0x0d
    160e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1610:	20 e0       	ldi	r18, 0x00	; 0
    1612:	30 e0       	ldi	r19, 0x00	; 0
    1614:	40 e2       	ldi	r20, 0x20	; 32
    1616:	51 e4       	ldi	r21, 0x41	; 65
    1618:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    161c:	dc 01       	movw	r26, r24
    161e:	cb 01       	movw	r24, r22
    1620:	bc 01       	movw	r22, r24
    1622:	cd 01       	movw	r24, r26
    1624:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1628:	dc 01       	movw	r26, r24
    162a:	cb 01       	movw	r24, r22
    162c:	9e 83       	std	Y+6, r25	; 0x06
    162e:	8d 83       	std	Y+5, r24	; 0x05
    1630:	0f c0       	rjmp	.+30     	; 0x1650 <CLCD_voidSendData+0x42e>
    1632:	88 ec       	ldi	r24, 0xC8	; 200
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	9c 83       	std	Y+4, r25	; 0x04
    1638:	8b 83       	std	Y+3, r24	; 0x03
    163a:	8b 81       	ldd	r24, Y+3	; 0x03
    163c:	9c 81       	ldd	r25, Y+4	; 0x04
    163e:	01 97       	sbiw	r24, 0x01	; 1
    1640:	f1 f7       	brne	.-4      	; 0x163e <CLCD_voidSendData+0x41c>
    1642:	9c 83       	std	Y+4, r25	; 0x04
    1644:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1646:	8d 81       	ldd	r24, Y+5	; 0x05
    1648:	9e 81       	ldd	r25, Y+6	; 0x06
    164a:	01 97       	sbiw	r24, 0x01	; 1
    164c:	9e 83       	std	Y+6, r25	; 0x06
    164e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1650:	8d 81       	ldd	r24, Y+5	; 0x05
    1652:	9e 81       	ldd	r25, Y+6	; 0x06
    1654:	00 97       	sbiw	r24, 0x00	; 0
    1656:	69 f7       	brne	.-38     	; 0x1632 <CLCD_voidSendData+0x410>
    1658:	14 c0       	rjmp	.+40     	; 0x1682 <CLCD_voidSendData+0x460>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    165a:	6f 81       	ldd	r22, Y+7	; 0x07
    165c:	78 85       	ldd	r23, Y+8	; 0x08
    165e:	89 85       	ldd	r24, Y+9	; 0x09
    1660:	9a 85       	ldd	r25, Y+10	; 0x0a
    1662:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1666:	dc 01       	movw	r26, r24
    1668:	cb 01       	movw	r24, r22
    166a:	9e 83       	std	Y+6, r25	; 0x06
    166c:	8d 83       	std	Y+5, r24	; 0x05
    166e:	8d 81       	ldd	r24, Y+5	; 0x05
    1670:	9e 81       	ldd	r25, Y+6	; 0x06
    1672:	9a 83       	std	Y+2, r25	; 0x02
    1674:	89 83       	std	Y+1, r24	; 0x01
    1676:	89 81       	ldd	r24, Y+1	; 0x01
    1678:	9a 81       	ldd	r25, Y+2	; 0x02
    167a:	01 97       	sbiw	r24, 0x01	; 1
    167c:	f1 f7       	brne	.-4      	; 0x167a <CLCD_voidSendData+0x458>
    167e:	9a 83       	std	Y+2, r25	; 0x02
    1680:	89 83       	std	Y+1, r24	; 0x01



#endif

}
    1682:	ea 96       	adiw	r28, 0x3a	; 58
    1684:	0f b6       	in	r0, 0x3f	; 63
    1686:	f8 94       	cli
    1688:	de bf       	out	0x3e, r29	; 62
    168a:	0f be       	out	0x3f, r0	; 63
    168c:	cd bf       	out	0x3d, r28	; 61
    168e:	cf 91       	pop	r28
    1690:	df 91       	pop	r29
    1692:	1f 91       	pop	r17
    1694:	08 95       	ret

00001696 <CLCD_voidInit>:

void CLCD_voidInit(void)
{
    1696:	df 93       	push	r29
    1698:	cf 93       	push	r28
    169a:	cd b7       	in	r28, 0x3d	; 61
    169c:	de b7       	in	r29, 0x3e	; 62
    169e:	2e 97       	sbiw	r28, 0x0e	; 14
    16a0:	0f b6       	in	r0, 0x3f	; 63
    16a2:	f8 94       	cli
    16a4:	de bf       	out	0x3e, r29	; 62
    16a6:	0f be       	out	0x3f, r0	; 63
    16a8:	cd bf       	out	0x3d, r28	; 61
    16aa:	80 e0       	ldi	r24, 0x00	; 0
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	a0 e2       	ldi	r26, 0x20	; 32
    16b0:	b2 e4       	ldi	r27, 0x42	; 66
    16b2:	8b 87       	std	Y+11, r24	; 0x0b
    16b4:	9c 87       	std	Y+12, r25	; 0x0c
    16b6:	ad 87       	std	Y+13, r26	; 0x0d
    16b8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    16bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    16be:	8d 85       	ldd	r24, Y+13	; 0x0d
    16c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    16c2:	20 e0       	ldi	r18, 0x00	; 0
    16c4:	30 e0       	ldi	r19, 0x00	; 0
    16c6:	4a ef       	ldi	r20, 0xFA	; 250
    16c8:	54 e4       	ldi	r21, 0x44	; 68
    16ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16ce:	dc 01       	movw	r26, r24
    16d0:	cb 01       	movw	r24, r22
    16d2:	8f 83       	std	Y+7, r24	; 0x07
    16d4:	98 87       	std	Y+8, r25	; 0x08
    16d6:	a9 87       	std	Y+9, r26	; 0x09
    16d8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16da:	6f 81       	ldd	r22, Y+7	; 0x07
    16dc:	78 85       	ldd	r23, Y+8	; 0x08
    16de:	89 85       	ldd	r24, Y+9	; 0x09
    16e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    16e2:	20 e0       	ldi	r18, 0x00	; 0
    16e4:	30 e0       	ldi	r19, 0x00	; 0
    16e6:	40 e8       	ldi	r20, 0x80	; 128
    16e8:	5f e3       	ldi	r21, 0x3F	; 63
    16ea:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    16ee:	88 23       	and	r24, r24
    16f0:	2c f4       	brge	.+10     	; 0x16fc <CLCD_voidInit+0x66>
		__ticks = 1;
    16f2:	81 e0       	ldi	r24, 0x01	; 1
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	9e 83       	std	Y+6, r25	; 0x06
    16f8:	8d 83       	std	Y+5, r24	; 0x05
    16fa:	3f c0       	rjmp	.+126    	; 0x177a <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
    16fc:	6f 81       	ldd	r22, Y+7	; 0x07
    16fe:	78 85       	ldd	r23, Y+8	; 0x08
    1700:	89 85       	ldd	r24, Y+9	; 0x09
    1702:	9a 85       	ldd	r25, Y+10	; 0x0a
    1704:	20 e0       	ldi	r18, 0x00	; 0
    1706:	3f ef       	ldi	r19, 0xFF	; 255
    1708:	4f e7       	ldi	r20, 0x7F	; 127
    170a:	57 e4       	ldi	r21, 0x47	; 71
    170c:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    1710:	18 16       	cp	r1, r24
    1712:	4c f5       	brge	.+82     	; 0x1766 <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1714:	6b 85       	ldd	r22, Y+11	; 0x0b
    1716:	7c 85       	ldd	r23, Y+12	; 0x0c
    1718:	8d 85       	ldd	r24, Y+13	; 0x0d
    171a:	9e 85       	ldd	r25, Y+14	; 0x0e
    171c:	20 e0       	ldi	r18, 0x00	; 0
    171e:	30 e0       	ldi	r19, 0x00	; 0
    1720:	40 e2       	ldi	r20, 0x20	; 32
    1722:	51 e4       	ldi	r21, 0x41	; 65
    1724:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1728:	dc 01       	movw	r26, r24
    172a:	cb 01       	movw	r24, r22
    172c:	bc 01       	movw	r22, r24
    172e:	cd 01       	movw	r24, r26
    1730:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1734:	dc 01       	movw	r26, r24
    1736:	cb 01       	movw	r24, r22
    1738:	9e 83       	std	Y+6, r25	; 0x06
    173a:	8d 83       	std	Y+5, r24	; 0x05
    173c:	0f c0       	rjmp	.+30     	; 0x175c <CLCD_voidInit+0xc6>
    173e:	88 ec       	ldi	r24, 0xC8	; 200
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	9c 83       	std	Y+4, r25	; 0x04
    1744:	8b 83       	std	Y+3, r24	; 0x03
    1746:	8b 81       	ldd	r24, Y+3	; 0x03
    1748:	9c 81       	ldd	r25, Y+4	; 0x04
    174a:	01 97       	sbiw	r24, 0x01	; 1
    174c:	f1 f7       	brne	.-4      	; 0x174a <CLCD_voidInit+0xb4>
    174e:	9c 83       	std	Y+4, r25	; 0x04
    1750:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1752:	8d 81       	ldd	r24, Y+5	; 0x05
    1754:	9e 81       	ldd	r25, Y+6	; 0x06
    1756:	01 97       	sbiw	r24, 0x01	; 1
    1758:	9e 83       	std	Y+6, r25	; 0x06
    175a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    175c:	8d 81       	ldd	r24, Y+5	; 0x05
    175e:	9e 81       	ldd	r25, Y+6	; 0x06
    1760:	00 97       	sbiw	r24, 0x00	; 0
    1762:	69 f7       	brne	.-38     	; 0x173e <CLCD_voidInit+0xa8>
    1764:	14 c0       	rjmp	.+40     	; 0x178e <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1766:	6f 81       	ldd	r22, Y+7	; 0x07
    1768:	78 85       	ldd	r23, Y+8	; 0x08
    176a:	89 85       	ldd	r24, Y+9	; 0x09
    176c:	9a 85       	ldd	r25, Y+10	; 0x0a
    176e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1772:	dc 01       	movw	r26, r24
    1774:	cb 01       	movw	r24, r22
    1776:	9e 83       	std	Y+6, r25	; 0x06
    1778:	8d 83       	std	Y+5, r24	; 0x05
    177a:	8d 81       	ldd	r24, Y+5	; 0x05
    177c:	9e 81       	ldd	r25, Y+6	; 0x06
    177e:	9a 83       	std	Y+2, r25	; 0x02
    1780:	89 83       	std	Y+1, r24	; 0x01
    1782:	89 81       	ldd	r24, Y+1	; 0x01
    1784:	9a 81       	ldd	r25, Y+2	; 0x02
    1786:	01 97       	sbiw	r24, 0x01	; 1
    1788:	f1 f7       	brne	.-4      	; 0x1786 <CLCD_voidInit+0xf0>
    178a:	9a 83       	std	Y+2, r25	; 0x02
    178c:	89 83       	std	Y+1, r24	; 0x01
	C_LCD_voidSendCommand(0x01); /* 1 or 0x01 or 0b00000001*/

#elif   MODE_SELECT ==_4_BIT_MODE

	/* Function set command : 2 lines , 5*8 font size */
	C_LCD_voidSendCommand(0x33);
    178e:	83 e3       	ldi	r24, 0x33	; 51
    1790:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <C_LCD_voidSendCommand>
	C_LCD_voidSendCommand(0x32);
    1794:	82 e3       	ldi	r24, 0x32	; 50
    1796:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <C_LCD_voidSendCommand>
	C_LCD_voidSendCommand(0x28);   /* 0bNFXXXXXX  --> N: no of lines F: font size*/
    179a:	88 e2       	ldi	r24, 0x28	; 40
    179c:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <C_LCD_voidSendCommand>


	/*Display on off control : disable enable , disable cursor , no blink cursor*/
	C_LCD_voidSendCommand(0x0C);
    17a0:	8c e0       	ldi	r24, 0x0C	; 12
    17a2:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <C_LCD_voidSendCommand>
	C_LCD_voidSendCommand(0x02);
    17a6:	82 e0       	ldi	r24, 0x02	; 2
    17a8:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <C_LCD_voidSendCommand>

	C_LCD_voidSendCommand(0x06);
    17ac:	86 e0       	ldi	r24, 0x06	; 6
    17ae:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <C_LCD_voidSendCommand>

	/* Clear display */
	C_LCD_voidSendCommand(0x01);
    17b2:	81 e0       	ldi	r24, 0x01	; 1
    17b4:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <C_LCD_voidSendCommand>


#endif


}
    17b8:	2e 96       	adiw	r28, 0x0e	; 14
    17ba:	0f b6       	in	r0, 0x3f	; 63
    17bc:	f8 94       	cli
    17be:	de bf       	out	0x3e, r29	; 62
    17c0:	0f be       	out	0x3f, r0	; 63
    17c2:	cd bf       	out	0x3d, r28	; 61
    17c4:	cf 91       	pop	r28
    17c6:	df 91       	pop	r29
    17c8:	08 95       	ret

000017ca <CLCD_voidSendString>:

void CLCD_voidSendString(const char* Copy_pcString )
{
    17ca:	df 93       	push	r29
    17cc:	cf 93       	push	r28
    17ce:	00 d0       	rcall	.+0      	; 0x17d0 <CLCD_voidSendString+0x6>
    17d0:	0f 92       	push	r0
    17d2:	cd b7       	in	r28, 0x3d	; 61
    17d4:	de b7       	in	r29, 0x3e	; 62
    17d6:	9b 83       	std	Y+3, r25	; 0x03
    17d8:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Counter = 0;
    17da:	19 82       	std	Y+1, r1	; 0x01
    17dc:	0e c0       	rjmp	.+28     	; 0x17fa <CLCD_voidSendString+0x30>
	while (Copy_pcString[Local_u8Counter] != NULL)
	{
		CLCD_voidSendData(Copy_pcString[Local_u8Counter]);
    17de:	89 81       	ldd	r24, Y+1	; 0x01
    17e0:	28 2f       	mov	r18, r24
    17e2:	30 e0       	ldi	r19, 0x00	; 0
    17e4:	8a 81       	ldd	r24, Y+2	; 0x02
    17e6:	9b 81       	ldd	r25, Y+3	; 0x03
    17e8:	fc 01       	movw	r30, r24
    17ea:	e2 0f       	add	r30, r18
    17ec:	f3 1f       	adc	r31, r19
    17ee:	80 81       	ld	r24, Z
    17f0:	0e 94 11 09 	call	0x1222	; 0x1222 <CLCD_voidSendData>
		Local_u8Counter++;
    17f4:	89 81       	ldd	r24, Y+1	; 0x01
    17f6:	8f 5f       	subi	r24, 0xFF	; 255
    17f8:	89 83       	std	Y+1, r24	; 0x01
}

void CLCD_voidSendString(const char* Copy_pcString )
{
	u8 Local_u8Counter = 0;
	while (Copy_pcString[Local_u8Counter] != NULL)
    17fa:	89 81       	ldd	r24, Y+1	; 0x01
    17fc:	28 2f       	mov	r18, r24
    17fe:	30 e0       	ldi	r19, 0x00	; 0
    1800:	8a 81       	ldd	r24, Y+2	; 0x02
    1802:	9b 81       	ldd	r25, Y+3	; 0x03
    1804:	fc 01       	movw	r30, r24
    1806:	e2 0f       	add	r30, r18
    1808:	f3 1f       	adc	r31, r19
    180a:	80 81       	ld	r24, Z
    180c:	88 23       	and	r24, r24
    180e:	39 f7       	brne	.-50     	; 0x17de <CLCD_voidSendString+0x14>
	{
		CLCD_voidSendData(Copy_pcString[Local_u8Counter]);
		Local_u8Counter++;
	}
}
    1810:	0f 90       	pop	r0
    1812:	0f 90       	pop	r0
    1814:	0f 90       	pop	r0
    1816:	cf 91       	pop	r28
    1818:	df 91       	pop	r29
    181a:	08 95       	ret

0000181c <CLCD_voidGoToXY>:

void CLCD_voidGoToXY(u8 Copy_u8Xpos, u8 Copy_u8Ypos)
{
    181c:	df 93       	push	r29
    181e:	cf 93       	push	r28
    1820:	00 d0       	rcall	.+0      	; 0x1822 <CLCD_voidGoToXY+0x6>
    1822:	0f 92       	push	r0
    1824:	cd b7       	in	r28, 0x3d	; 61
    1826:	de b7       	in	r29, 0x3e	; 62
    1828:	8a 83       	std	Y+2, r24	; 0x02
    182a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Adress=0;
    182c:	19 82       	std	Y+1, r1	; 0x01
	Local_u8SetPositionY = Copy_u8Ypos;
    182e:	8b 81       	ldd	r24, Y+3	; 0x03
    1830:	80 93 87 01 	sts	0x0187, r24
	Local_u8SetPositionX = Copy_u8Xpos;
    1834:	8a 81       	ldd	r24, Y+2	; 0x02
    1836:	80 93 86 01 	sts	0x0186, r24
	if (Copy_u8Xpos == 0)                      // First Line
    183a:	8a 81       	ldd	r24, Y+2	; 0x02
    183c:	88 23       	and	r24, r24
    183e:	19 f4       	brne	.+6      	; 0x1846 <CLCD_voidGoToXY+0x2a>
	{
		Local_u8Adress = Copy_u8Ypos;
    1840:	8b 81       	ldd	r24, Y+3	; 0x03
    1842:	89 83       	std	Y+1, r24	; 0x01
    1844:	14 c0       	rjmp	.+40     	; 0x186e <CLCD_voidGoToXY+0x52>
	}
	else if (Copy_u8Xpos == 1)                // Second Line
    1846:	8a 81       	ldd	r24, Y+2	; 0x02
    1848:	81 30       	cpi	r24, 0x01	; 1
    184a:	21 f4       	brne	.+8      	; 0x1854 <CLCD_voidGoToXY+0x38>
	{
		Local_u8Adress = Copy_u8Ypos+0x40;
    184c:	8b 81       	ldd	r24, Y+3	; 0x03
    184e:	80 5c       	subi	r24, 0xC0	; 192
    1850:	89 83       	std	Y+1, r24	; 0x01
    1852:	0d c0       	rjmp	.+26     	; 0x186e <CLCD_voidGoToXY+0x52>
	}
	else if (Copy_u8Xpos == 2)                // Third Line
    1854:	8a 81       	ldd	r24, Y+2	; 0x02
    1856:	82 30       	cpi	r24, 0x02	; 2
    1858:	21 f4       	brne	.+8      	; 0x1862 <CLCD_voidGoToXY+0x46>
	{
		Local_u8Adress = Copy_u8Ypos+0x10;
    185a:	8b 81       	ldd	r24, Y+3	; 0x03
    185c:	80 5f       	subi	r24, 0xF0	; 240
    185e:	89 83       	std	Y+1, r24	; 0x01
    1860:	06 c0       	rjmp	.+12     	; 0x186e <CLCD_voidGoToXY+0x52>
	}
	else if (Copy_u8Xpos == 3)                // Fourth Line
    1862:	8a 81       	ldd	r24, Y+2	; 0x02
    1864:	83 30       	cpi	r24, 0x03	; 3
    1866:	19 f4       	brne	.+6      	; 0x186e <CLCD_voidGoToXY+0x52>
	{
		Local_u8Adress = Copy_u8Ypos+0x50;
    1868:	8b 81       	ldd	r24, Y+3	; 0x03
    186a:	80 5b       	subi	r24, 0xB0	; 176
    186c:	89 83       	std	Y+1, r24	; 0x01
	}

	C_LCD_voidSendCommand(Local_u8Adress+128);
    186e:	89 81       	ldd	r24, Y+1	; 0x01
    1870:	80 58       	subi	r24, 0x80	; 128
    1872:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <C_LCD_voidSendCommand>



}
    1876:	0f 90       	pop	r0
    1878:	0f 90       	pop	r0
    187a:	0f 90       	pop	r0
    187c:	cf 91       	pop	r28
    187e:	df 91       	pop	r29
    1880:	08 95       	ret

00001882 <CLCD_voidWriteSpecialCharacter>:

void CLCD_voidWriteSpecialCharacter(u8* Copy_pu8Pattern, u8 Copy_u8PatternNumber, u8 Copy_u8XPos, u8 Copy_u8YPos)
{
    1882:	df 93       	push	r29
    1884:	cf 93       	push	r28
    1886:	cd b7       	in	r28, 0x3d	; 61
    1888:	de b7       	in	r29, 0x3e	; 62
    188a:	27 97       	sbiw	r28, 0x07	; 7
    188c:	0f b6       	in	r0, 0x3f	; 63
    188e:	f8 94       	cli
    1890:	de bf       	out	0x3e, r29	; 62
    1892:	0f be       	out	0x3f, r0	; 63
    1894:	cd bf       	out	0x3d, r28	; 61
    1896:	9c 83       	std	Y+4, r25	; 0x04
    1898:	8b 83       	std	Y+3, r24	; 0x03
    189a:	6d 83       	std	Y+5, r22	; 0x05
    189c:	4e 83       	std	Y+6, r20	; 0x06
    189e:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8CGRAMAddress= 0, Local_u8Iterator;
    18a0:	1a 82       	std	Y+2, r1	; 0x02
	/* Calculate the CGRAM address whose each block is 8 bytes */
	Local_u8CGRAMAddress =Copy_u8PatternNumber*8;
    18a2:	8d 81       	ldd	r24, Y+5	; 0x05
    18a4:	88 2f       	mov	r24, r24
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	88 0f       	add	r24, r24
    18aa:	99 1f       	adc	r25, r25
    18ac:	88 0f       	add	r24, r24
    18ae:	99 1f       	adc	r25, r25
    18b0:	88 0f       	add	r24, r24
    18b2:	99 1f       	adc	r25, r25
    18b4:	8a 83       	std	Y+2, r24	; 0x02

	/* Send CGRAM Address command to LCD, with setting bit 6, clearing bit 7*/
	C_LCD_voidSendCommand(Local_u8CGRAMAddress+64);
    18b6:	8a 81       	ldd	r24, Y+2	; 0x02
    18b8:	80 5c       	subi	r24, 0xC0	; 192
    18ba:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <C_LCD_voidSendCommand>

	/* Write the pattern into CGRAM */

	for (Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++)
    18be:	19 82       	std	Y+1, r1	; 0x01
    18c0:	0e c0       	rjmp	.+28     	; 0x18de <CLCD_voidWriteSpecialCharacter+0x5c>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Iterator]);
    18c2:	89 81       	ldd	r24, Y+1	; 0x01
    18c4:	28 2f       	mov	r18, r24
    18c6:	30 e0       	ldi	r19, 0x00	; 0
    18c8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ca:	9c 81       	ldd	r25, Y+4	; 0x04
    18cc:	fc 01       	movw	r30, r24
    18ce:	e2 0f       	add	r30, r18
    18d0:	f3 1f       	adc	r31, r19
    18d2:	80 81       	ld	r24, Z
    18d4:	0e 94 11 09 	call	0x1222	; 0x1222 <CLCD_voidSendData>
	/* Send CGRAM Address command to LCD, with setting bit 6, clearing bit 7*/
	C_LCD_voidSendCommand(Local_u8CGRAMAddress+64);

	/* Write the pattern into CGRAM */

	for (Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++)
    18d8:	89 81       	ldd	r24, Y+1	; 0x01
    18da:	8f 5f       	subi	r24, 0xFF	; 255
    18dc:	89 83       	std	Y+1, r24	; 0x01
    18de:	89 81       	ldd	r24, Y+1	; 0x01
    18e0:	88 30       	cpi	r24, 0x08	; 8
    18e2:	78 f3       	brcs	.-34     	; 0x18c2 <CLCD_voidWriteSpecialCharacter+0x40>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Iterator]);
	}

	/* go back to the DDRAM to display the Pattern*/
	CLCD_voidGoToXY(Copy_u8XPos,Copy_u8YPos);
    18e4:	8e 81       	ldd	r24, Y+6	; 0x06
    18e6:	6f 81       	ldd	r22, Y+7	; 0x07
    18e8:	0e 94 0e 0c 	call	0x181c	; 0x181c <CLCD_voidGoToXY>
	/* Display the pattern written in the CGRAM*/
	CLCD_voidSendData(Copy_u8PatternNumber);
    18ec:	8d 81       	ldd	r24, Y+5	; 0x05
    18ee:	0e 94 11 09 	call	0x1222	; 0x1222 <CLCD_voidSendData>
}
    18f2:	27 96       	adiw	r28, 0x07	; 7
    18f4:	0f b6       	in	r0, 0x3f	; 63
    18f6:	f8 94       	cli
    18f8:	de bf       	out	0x3e, r29	; 62
    18fa:	0f be       	out	0x3f, r0	; 63
    18fc:	cd bf       	out	0x3d, r28	; 61
    18fe:	cf 91       	pop	r28
    1900:	df 91       	pop	r29
    1902:	08 95       	ret

00001904 <CLCD_VoidWriteNumber>:

void CLCD_VoidWriteNumber(f32 Copy_u32Number)
{
    1904:	0f 93       	push	r16
    1906:	1f 93       	push	r17
    1908:	df 93       	push	r29
    190a:	cf 93       	push	r28
    190c:	cd b7       	in	r28, 0x3d	; 61
    190e:	de b7       	in	r29, 0x3e	; 62
    1910:	6d 97       	sbiw	r28, 0x1d	; 29
    1912:	0f b6       	in	r0, 0x3f	; 63
    1914:	f8 94       	cli
    1916:	de bf       	out	0x3e, r29	; 62
    1918:	0f be       	out	0x3f, r0	; 63
    191a:	cd bf       	out	0x3d, r28	; 61
    191c:	6a 8f       	std	Y+26, r22	; 0x1a
    191e:	7b 8f       	std	Y+27, r23	; 0x1b
    1920:	8c 8f       	std	Y+28, r24	; 0x1c
    1922:	9d 8f       	std	Y+29, r25	; 0x1d
	s32 Local_s32Number = Copy_u32Number;
    1924:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1926:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1928:	8c 8d       	ldd	r24, Y+28	; 0x1c
    192a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    192c:	0e 94 37 04 	call	0x86e	; 0x86e <__fixsfsi>
    1930:	dc 01       	movw	r26, r24
    1932:	cb 01       	movw	r24, r22
    1934:	8a 83       	std	Y+2, r24	; 0x02
    1936:	9b 83       	std	Y+3, r25	; 0x03
    1938:	ac 83       	std	Y+4, r26	; 0x04
    193a:	bd 83       	std	Y+5, r27	; 0x05

	if(Local_s32Number == 0)
    193c:	8a 81       	ldd	r24, Y+2	; 0x02
    193e:	9b 81       	ldd	r25, Y+3	; 0x03
    1940:	ac 81       	ldd	r26, Y+4	; 0x04
    1942:	bd 81       	ldd	r27, Y+5	; 0x05
    1944:	00 97       	sbiw	r24, 0x00	; 0
    1946:	a1 05       	cpc	r26, r1
    1948:	b1 05       	cpc	r27, r1
    194a:	21 f4       	brne	.+8      	; 0x1954 <CLCD_VoidWriteNumber+0x50>
	{
		CLCD_voidSendData('0');
    194c:	80 e3       	ldi	r24, 0x30	; 48
    194e:	0e 94 11 09 	call	0x1222	; 0x1222 <CLCD_voidSendData>
    1952:	18 c0       	rjmp	.+48     	; 0x1984 <CLCD_VoidWriteNumber+0x80>
	}
	else if (Local_s32Number <0)
    1954:	8a 81       	ldd	r24, Y+2	; 0x02
    1956:	9b 81       	ldd	r25, Y+3	; 0x03
    1958:	ac 81       	ldd	r26, Y+4	; 0x04
    195a:	bd 81       	ldd	r27, Y+5	; 0x05
    195c:	bb 23       	and	r27, r27
    195e:	94 f4       	brge	.+36     	; 0x1984 <CLCD_VoidWriteNumber+0x80>
	{
		CLCD_voidSendData('-');
    1960:	8d e2       	ldi	r24, 0x2D	; 45
    1962:	0e 94 11 09 	call	0x1222	; 0x1222 <CLCD_voidSendData>
		Local_s32Number = Local_s32Number *(-1);
    1966:	8a 81       	ldd	r24, Y+2	; 0x02
    1968:	9b 81       	ldd	r25, Y+3	; 0x03
    196a:	ac 81       	ldd	r26, Y+4	; 0x04
    196c:	bd 81       	ldd	r27, Y+5	; 0x05
    196e:	b0 95       	com	r27
    1970:	a0 95       	com	r26
    1972:	90 95       	com	r25
    1974:	81 95       	neg	r24
    1976:	9f 4f       	sbci	r25, 0xFF	; 255
    1978:	af 4f       	sbci	r26, 0xFF	; 255
    197a:	bf 4f       	sbci	r27, 0xFF	; 255
    197c:	8a 83       	std	Y+2, r24	; 0x02
    197e:	9b 83       	std	Y+3, r25	; 0x03
    1980:	ac 83       	std	Y+4, r26	; 0x04
    1982:	bd 83       	std	Y+5, r27	; 0x05

	}
	u8 Local_u8Array[20]={0};
    1984:	84 e1       	ldi	r24, 0x14	; 20
    1986:	fe 01       	movw	r30, r28
    1988:	36 96       	adiw	r30, 0x06	; 6
    198a:	df 01       	movw	r26, r30
    198c:	98 2f       	mov	r25, r24
    198e:	1d 92       	st	X+, r1
    1990:	9a 95       	dec	r25
    1992:	e9 f7       	brne	.-6      	; 0x198e <CLCD_VoidWriteNumber+0x8a>
	s8 local_s8Counter =0;
    1994:	19 82       	std	Y+1, r1	; 0x01
    1996:	2f c0       	rjmp	.+94     	; 0x19f6 <CLCD_VoidWriteNumber+0xf2>
	while (Local_s32Number != 0)
	{
		Local_u8Array[local_s8Counter]= Local_s32Number%10;
    1998:	89 81       	ldd	r24, Y+1	; 0x01
    199a:	08 2f       	mov	r16, r24
    199c:	11 27       	eor	r17, r17
    199e:	07 fd       	sbrc	r16, 7
    19a0:	10 95       	com	r17
    19a2:	8a 81       	ldd	r24, Y+2	; 0x02
    19a4:	9b 81       	ldd	r25, Y+3	; 0x03
    19a6:	ac 81       	ldd	r26, Y+4	; 0x04
    19a8:	bd 81       	ldd	r27, Y+5	; 0x05
    19aa:	2a e0       	ldi	r18, 0x0A	; 10
    19ac:	30 e0       	ldi	r19, 0x00	; 0
    19ae:	40 e0       	ldi	r20, 0x00	; 0
    19b0:	50 e0       	ldi	r21, 0x00	; 0
    19b2:	bc 01       	movw	r22, r24
    19b4:	cd 01       	movw	r24, r26
    19b6:	0e 94 a4 14 	call	0x2948	; 0x2948 <__divmodsi4>
    19ba:	dc 01       	movw	r26, r24
    19bc:	cb 01       	movw	r24, r22
    19be:	28 2f       	mov	r18, r24
    19c0:	ce 01       	movw	r24, r28
    19c2:	06 96       	adiw	r24, 0x06	; 6
    19c4:	fc 01       	movw	r30, r24
    19c6:	e0 0f       	add	r30, r16
    19c8:	f1 1f       	adc	r31, r17
    19ca:	20 83       	st	Z, r18
		Local_s32Number/=10;
    19cc:	8a 81       	ldd	r24, Y+2	; 0x02
    19ce:	9b 81       	ldd	r25, Y+3	; 0x03
    19d0:	ac 81       	ldd	r26, Y+4	; 0x04
    19d2:	bd 81       	ldd	r27, Y+5	; 0x05
    19d4:	2a e0       	ldi	r18, 0x0A	; 10
    19d6:	30 e0       	ldi	r19, 0x00	; 0
    19d8:	40 e0       	ldi	r20, 0x00	; 0
    19da:	50 e0       	ldi	r21, 0x00	; 0
    19dc:	bc 01       	movw	r22, r24
    19de:	cd 01       	movw	r24, r26
    19e0:	0e 94 a4 14 	call	0x2948	; 0x2948 <__divmodsi4>
    19e4:	da 01       	movw	r26, r20
    19e6:	c9 01       	movw	r24, r18
    19e8:	8a 83       	std	Y+2, r24	; 0x02
    19ea:	9b 83       	std	Y+3, r25	; 0x03
    19ec:	ac 83       	std	Y+4, r26	; 0x04
    19ee:	bd 83       	std	Y+5, r27	; 0x05
		local_s8Counter++;
    19f0:	89 81       	ldd	r24, Y+1	; 0x01
    19f2:	8f 5f       	subi	r24, 0xFF	; 255
    19f4:	89 83       	std	Y+1, r24	; 0x01
		Local_s32Number = Local_s32Number *(-1);

	}
	u8 Local_u8Array[20]={0};
	s8 local_s8Counter =0;
	while (Local_s32Number != 0)
    19f6:	8a 81       	ldd	r24, Y+2	; 0x02
    19f8:	9b 81       	ldd	r25, Y+3	; 0x03
    19fa:	ac 81       	ldd	r26, Y+4	; 0x04
    19fc:	bd 81       	ldd	r27, Y+5	; 0x05
    19fe:	00 97       	sbiw	r24, 0x00	; 0
    1a00:	a1 05       	cpc	r26, r1
    1a02:	b1 05       	cpc	r27, r1
    1a04:	49 f6       	brne	.-110    	; 0x1998 <CLCD_VoidWriteNumber+0x94>
	{
		Local_u8Array[local_s8Counter]= Local_s32Number%10;
		Local_s32Number/=10;
		local_s8Counter++;
	}
	local_s8Counter--;
    1a06:	89 81       	ldd	r24, Y+1	; 0x01
    1a08:	81 50       	subi	r24, 0x01	; 1
    1a0a:	89 83       	std	Y+1, r24	; 0x01
    1a0c:	11 c0       	rjmp	.+34     	; 0x1a30 <CLCD_VoidWriteNumber+0x12c>
	while (local_s8Counter>=0)
	{
		CLCD_voidSendData(Local_u8Array[local_s8Counter]+'0');
    1a0e:	89 81       	ldd	r24, Y+1	; 0x01
    1a10:	28 2f       	mov	r18, r24
    1a12:	33 27       	eor	r19, r19
    1a14:	27 fd       	sbrc	r18, 7
    1a16:	30 95       	com	r19
    1a18:	ce 01       	movw	r24, r28
    1a1a:	06 96       	adiw	r24, 0x06	; 6
    1a1c:	fc 01       	movw	r30, r24
    1a1e:	e2 0f       	add	r30, r18
    1a20:	f3 1f       	adc	r31, r19
    1a22:	80 81       	ld	r24, Z
    1a24:	80 5d       	subi	r24, 0xD0	; 208
    1a26:	0e 94 11 09 	call	0x1222	; 0x1222 <CLCD_voidSendData>
		local_s8Counter--;
    1a2a:	89 81       	ldd	r24, Y+1	; 0x01
    1a2c:	81 50       	subi	r24, 0x01	; 1
    1a2e:	89 83       	std	Y+1, r24	; 0x01
		Local_u8Array[local_s8Counter]= Local_s32Number%10;
		Local_s32Number/=10;
		local_s8Counter++;
	}
	local_s8Counter--;
	while (local_s8Counter>=0)
    1a30:	89 81       	ldd	r24, Y+1	; 0x01
    1a32:	88 23       	and	r24, r24
    1a34:	64 f7       	brge	.-40     	; 0x1a0e <CLCD_VoidWriteNumber+0x10a>
	{
		CLCD_voidSendData(Local_u8Array[local_s8Counter]+'0');
		local_s8Counter--;
	}
}
    1a36:	6d 96       	adiw	r28, 0x1d	; 29
    1a38:	0f b6       	in	r0, 0x3f	; 63
    1a3a:	f8 94       	cli
    1a3c:	de bf       	out	0x3e, r29	; 62
    1a3e:	0f be       	out	0x3f, r0	; 63
    1a40:	cd bf       	out	0x3d, r28	; 61
    1a42:	cf 91       	pop	r28
    1a44:	df 91       	pop	r29
    1a46:	1f 91       	pop	r17
    1a48:	0f 91       	pop	r16
    1a4a:	08 95       	ret

00001a4c <CLCD_voidWriteFloatNumber>:

void CLCD_voidWriteFloatNumber(f32 Copy_f32FloatNumber )
{
    1a4c:	df 93       	push	r29
    1a4e:	cf 93       	push	r28
    1a50:	cd b7       	in	r28, 0x3d	; 61
    1a52:	de b7       	in	r29, 0x3e	; 62
    1a54:	28 97       	sbiw	r28, 0x08	; 8
    1a56:	0f b6       	in	r0, 0x3f	; 63
    1a58:	f8 94       	cli
    1a5a:	de bf       	out	0x3e, r29	; 62
    1a5c:	0f be       	out	0x3f, r0	; 63
    1a5e:	cd bf       	out	0x3d, r28	; 61
    1a60:	6d 83       	std	Y+5, r22	; 0x05
    1a62:	7e 83       	std	Y+6, r23	; 0x06
    1a64:	8f 83       	std	Y+7, r24	; 0x07
    1a66:	98 87       	std	Y+8, r25	; 0x08

	if(Copy_f32FloatNumber == 0)
    1a68:	6d 81       	ldd	r22, Y+5	; 0x05
    1a6a:	7e 81       	ldd	r23, Y+6	; 0x06
    1a6c:	8f 81       	ldd	r24, Y+7	; 0x07
    1a6e:	98 85       	ldd	r25, Y+8	; 0x08
    1a70:	20 e0       	ldi	r18, 0x00	; 0
    1a72:	30 e0       	ldi	r19, 0x00	; 0
    1a74:	40 e0       	ldi	r20, 0x00	; 0
    1a76:	50 e0       	ldi	r21, 0x00	; 0
    1a78:	0e 94 19 03 	call	0x632	; 0x632 <__eqsf2>
    1a7c:	88 23       	and	r24, r24
    1a7e:	39 f4       	brne	.+14     	; 0x1a8e <CLCD_voidWriteFloatNumber+0x42>
	{
		CLCD_VoidWriteNumber(0);
    1a80:	60 e0       	ldi	r22, 0x00	; 0
    1a82:	70 e0       	ldi	r23, 0x00	; 0
    1a84:	80 e0       	ldi	r24, 0x00	; 0
    1a86:	90 e0       	ldi	r25, 0x00	; 0
    1a88:	0e 94 82 0c 	call	0x1904	; 0x1904 <CLCD_VoidWriteNumber>
    1a8c:	7c c0       	rjmp	.+248    	; 0x1b86 <CLCD_voidWriteFloatNumber+0x13a>
	}

	else
	{
		s32 Local_s32DecemalNum=Copy_f32FloatNumber;
    1a8e:	6d 81       	ldd	r22, Y+5	; 0x05
    1a90:	7e 81       	ldd	r23, Y+6	; 0x06
    1a92:	8f 81       	ldd	r24, Y+7	; 0x07
    1a94:	98 85       	ldd	r25, Y+8	; 0x08
    1a96:	0e 94 37 04 	call	0x86e	; 0x86e <__fixsfsi>
    1a9a:	dc 01       	movw	r26, r24
    1a9c:	cb 01       	movw	r24, r22
    1a9e:	89 83       	std	Y+1, r24	; 0x01
    1aa0:	9a 83       	std	Y+2, r25	; 0x02
    1aa2:	ab 83       	std	Y+3, r26	; 0x03
    1aa4:	bc 83       	std	Y+4, r27	; 0x04
		CLCD_VoidWriteNumber(Local_s32DecemalNum);
    1aa6:	69 81       	ldd	r22, Y+1	; 0x01
    1aa8:	7a 81       	ldd	r23, Y+2	; 0x02
    1aaa:	8b 81       	ldd	r24, Y+3	; 0x03
    1aac:	9c 81       	ldd	r25, Y+4	; 0x04
    1aae:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <__floatsisf>
    1ab2:	dc 01       	movw	r26, r24
    1ab4:	cb 01       	movw	r24, r22
    1ab6:	bc 01       	movw	r22, r24
    1ab8:	cd 01       	movw	r24, r26
    1aba:	0e 94 82 0c 	call	0x1904	; 0x1904 <CLCD_VoidWriteNumber>
		CLCD_voidSendData('.');
    1abe:	8e e2       	ldi	r24, 0x2E	; 46
    1ac0:	0e 94 11 09 	call	0x1222	; 0x1222 <CLCD_voidSendData>
		Copy_f32FloatNumber = Copy_f32FloatNumber -Local_s32DecemalNum;
    1ac4:	69 81       	ldd	r22, Y+1	; 0x01
    1ac6:	7a 81       	ldd	r23, Y+2	; 0x02
    1ac8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aca:	9c 81       	ldd	r25, Y+4	; 0x04
    1acc:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <__floatsisf>
    1ad0:	9b 01       	movw	r18, r22
    1ad2:	ac 01       	movw	r20, r24
    1ad4:	6d 81       	ldd	r22, Y+5	; 0x05
    1ad6:	7e 81       	ldd	r23, Y+6	; 0x06
    1ad8:	8f 81       	ldd	r24, Y+7	; 0x07
    1ada:	98 85       	ldd	r25, Y+8	; 0x08
    1adc:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1ae0:	dc 01       	movw	r26, r24
    1ae2:	cb 01       	movw	r24, r22
    1ae4:	8d 83       	std	Y+5, r24	; 0x05
    1ae6:	9e 83       	std	Y+6, r25	; 0x06
    1ae8:	af 83       	std	Y+7, r26	; 0x07
    1aea:	b8 87       	std	Y+8, r27	; 0x08

		Copy_f32FloatNumber*=100000;
    1aec:	6d 81       	ldd	r22, Y+5	; 0x05
    1aee:	7e 81       	ldd	r23, Y+6	; 0x06
    1af0:	8f 81       	ldd	r24, Y+7	; 0x07
    1af2:	98 85       	ldd	r25, Y+8	; 0x08
    1af4:	20 e0       	ldi	r18, 0x00	; 0
    1af6:	30 e5       	ldi	r19, 0x50	; 80
    1af8:	43 ec       	ldi	r20, 0xC3	; 195
    1afa:	57 e4       	ldi	r21, 0x47	; 71
    1afc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b00:	dc 01       	movw	r26, r24
    1b02:	cb 01       	movw	r24, r22
    1b04:	8d 83       	std	Y+5, r24	; 0x05
    1b06:	9e 83       	std	Y+6, r25	; 0x06
    1b08:	af 83       	std	Y+7, r26	; 0x07
    1b0a:	b8 87       	std	Y+8, r27	; 0x08
		Local_s32DecemalNum = Copy_f32FloatNumber;
    1b0c:	6d 81       	ldd	r22, Y+5	; 0x05
    1b0e:	7e 81       	ldd	r23, Y+6	; 0x06
    1b10:	8f 81       	ldd	r24, Y+7	; 0x07
    1b12:	98 85       	ldd	r25, Y+8	; 0x08
    1b14:	0e 94 37 04 	call	0x86e	; 0x86e <__fixsfsi>
    1b18:	dc 01       	movw	r26, r24
    1b1a:	cb 01       	movw	r24, r22
    1b1c:	89 83       	std	Y+1, r24	; 0x01
    1b1e:	9a 83       	std	Y+2, r25	; 0x02
    1b20:	ab 83       	std	Y+3, r26	; 0x03
    1b22:	bc 83       	std	Y+4, r27	; 0x04
    1b24:	12 c0       	rjmp	.+36     	; 0x1b4a <CLCD_voidWriteFloatNumber+0xfe>

		while (Local_s32DecemalNum%10 == 0)
		{
			Local_s32DecemalNum/=10;
    1b26:	89 81       	ldd	r24, Y+1	; 0x01
    1b28:	9a 81       	ldd	r25, Y+2	; 0x02
    1b2a:	ab 81       	ldd	r26, Y+3	; 0x03
    1b2c:	bc 81       	ldd	r27, Y+4	; 0x04
    1b2e:	2a e0       	ldi	r18, 0x0A	; 10
    1b30:	30 e0       	ldi	r19, 0x00	; 0
    1b32:	40 e0       	ldi	r20, 0x00	; 0
    1b34:	50 e0       	ldi	r21, 0x00	; 0
    1b36:	bc 01       	movw	r22, r24
    1b38:	cd 01       	movw	r24, r26
    1b3a:	0e 94 a4 14 	call	0x2948	; 0x2948 <__divmodsi4>
    1b3e:	da 01       	movw	r26, r20
    1b40:	c9 01       	movw	r24, r18
    1b42:	89 83       	std	Y+1, r24	; 0x01
    1b44:	9a 83       	std	Y+2, r25	; 0x02
    1b46:	ab 83       	std	Y+3, r26	; 0x03
    1b48:	bc 83       	std	Y+4, r27	; 0x04
		Copy_f32FloatNumber = Copy_f32FloatNumber -Local_s32DecemalNum;

		Copy_f32FloatNumber*=100000;
		Local_s32DecemalNum = Copy_f32FloatNumber;

		while (Local_s32DecemalNum%10 == 0)
    1b4a:	89 81       	ldd	r24, Y+1	; 0x01
    1b4c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b4e:	ab 81       	ldd	r26, Y+3	; 0x03
    1b50:	bc 81       	ldd	r27, Y+4	; 0x04
    1b52:	2a e0       	ldi	r18, 0x0A	; 10
    1b54:	30 e0       	ldi	r19, 0x00	; 0
    1b56:	40 e0       	ldi	r20, 0x00	; 0
    1b58:	50 e0       	ldi	r21, 0x00	; 0
    1b5a:	bc 01       	movw	r22, r24
    1b5c:	cd 01       	movw	r24, r26
    1b5e:	0e 94 a4 14 	call	0x2948	; 0x2948 <__divmodsi4>
    1b62:	dc 01       	movw	r26, r24
    1b64:	cb 01       	movw	r24, r22
    1b66:	00 97       	sbiw	r24, 0x00	; 0
    1b68:	a1 05       	cpc	r26, r1
    1b6a:	b1 05       	cpc	r27, r1
    1b6c:	e1 f2       	breq	.-72     	; 0x1b26 <CLCD_voidWriteFloatNumber+0xda>
		{
			Local_s32DecemalNum/=10;
		}
		CLCD_VoidWriteNumber(Local_s32DecemalNum);
    1b6e:	69 81       	ldd	r22, Y+1	; 0x01
    1b70:	7a 81       	ldd	r23, Y+2	; 0x02
    1b72:	8b 81       	ldd	r24, Y+3	; 0x03
    1b74:	9c 81       	ldd	r25, Y+4	; 0x04
    1b76:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <__floatsisf>
    1b7a:	dc 01       	movw	r26, r24
    1b7c:	cb 01       	movw	r24, r22
    1b7e:	bc 01       	movw	r22, r24
    1b80:	cd 01       	movw	r24, r26
    1b82:	0e 94 82 0c 	call	0x1904	; 0x1904 <CLCD_VoidWriteNumber>
	}
}
    1b86:	28 96       	adiw	r28, 0x08	; 8
    1b88:	0f b6       	in	r0, 0x3f	; 63
    1b8a:	f8 94       	cli
    1b8c:	de bf       	out	0x3e, r29	; 62
    1b8e:	0f be       	out	0x3f, r0	; 63
    1b90:	cd bf       	out	0x3d, r28	; 61
    1b92:	cf 91       	pop	r28
    1b94:	df 91       	pop	r29
    1b96:	08 95       	ret

00001b98 <CLCD_voidClear>:
//}



void CLCD_voidClear()
{
    1b98:	df 93       	push	r29
    1b9a:	cf 93       	push	r28
    1b9c:	cd b7       	in	r28, 0x3d	; 61
    1b9e:	de b7       	in	r29, 0x3e	; 62
	C_LCD_voidSendCommand(0x01);
    1ba0:	81 e0       	ldi	r24, 0x01	; 1
    1ba2:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <C_LCD_voidSendCommand>

}
    1ba6:	cf 91       	pop	r28
    1ba8:	df 91       	pop	r29
    1baa:	08 95       	ret

00001bac <DIO_u8SetPinValue>:
//
//	return Local_u8ErrorState;
//}

u8 DIO_u8SetPinValue(u8 Copy_u8port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
    1bac:	df 93       	push	r29
    1bae:	cf 93       	push	r28
    1bb0:	cd b7       	in	r28, 0x3d	; 61
    1bb2:	de b7       	in	r29, 0x3e	; 62
    1bb4:	28 97       	sbiw	r28, 0x08	; 8
    1bb6:	0f b6       	in	r0, 0x3f	; 63
    1bb8:	f8 94       	cli
    1bba:	de bf       	out	0x3e, r29	; 62
    1bbc:	0f be       	out	0x3f, r0	; 63
    1bbe:	cd bf       	out	0x3d, r28	; 61
    1bc0:	8a 83       	std	Y+2, r24	; 0x02
    1bc2:	6b 83       	std	Y+3, r22	; 0x03
    1bc4:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    1bc6:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin<=DIO_u8PIN7)
    1bc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bca:	88 30       	cpi	r24, 0x08	; 8
    1bcc:	08 f0       	brcs	.+2      	; 0x1bd0 <DIO_u8SetPinValue+0x24>
    1bce:	f4 c0       	rjmp	.+488    	; 0x1db8 <DIO_u8SetPinValue+0x20c>
	{
		if(Copy_u8Value == DIO_u8PIN_LOW)
    1bd0:	8c 81       	ldd	r24, Y+4	; 0x04
    1bd2:	88 23       	and	r24, r24
    1bd4:	09 f0       	breq	.+2      	; 0x1bd8 <DIO_u8SetPinValue+0x2c>
    1bd6:	77 c0       	rjmp	.+238    	; 0x1cc6 <DIO_u8SetPinValue+0x11a>
		{

			switch(Copy_u8port)
    1bd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bda:	28 2f       	mov	r18, r24
    1bdc:	30 e0       	ldi	r19, 0x00	; 0
    1bde:	38 87       	std	Y+8, r19	; 0x08
    1be0:	2f 83       	std	Y+7, r18	; 0x07
    1be2:	8f 81       	ldd	r24, Y+7	; 0x07
    1be4:	98 85       	ldd	r25, Y+8	; 0x08
    1be6:	81 30       	cpi	r24, 0x01	; 1
    1be8:	91 05       	cpc	r25, r1
    1bea:	59 f1       	breq	.+86     	; 0x1c42 <DIO_u8SetPinValue+0x96>
    1bec:	2f 81       	ldd	r18, Y+7	; 0x07
    1bee:	38 85       	ldd	r19, Y+8	; 0x08
    1bf0:	22 30       	cpi	r18, 0x02	; 2
    1bf2:	31 05       	cpc	r19, r1
    1bf4:	2c f4       	brge	.+10     	; 0x1c00 <DIO_u8SetPinValue+0x54>
    1bf6:	8f 81       	ldd	r24, Y+7	; 0x07
    1bf8:	98 85       	ldd	r25, Y+8	; 0x08
    1bfa:	00 97       	sbiw	r24, 0x00	; 0
    1bfc:	69 f0       	breq	.+26     	; 0x1c18 <DIO_u8SetPinValue+0x6c>
    1bfe:	60 c0       	rjmp	.+192    	; 0x1cc0 <DIO_u8SetPinValue+0x114>
    1c00:	2f 81       	ldd	r18, Y+7	; 0x07
    1c02:	38 85       	ldd	r19, Y+8	; 0x08
    1c04:	22 30       	cpi	r18, 0x02	; 2
    1c06:	31 05       	cpc	r19, r1
    1c08:	89 f1       	breq	.+98     	; 0x1c6c <DIO_u8SetPinValue+0xc0>
    1c0a:	8f 81       	ldd	r24, Y+7	; 0x07
    1c0c:	98 85       	ldd	r25, Y+8	; 0x08
    1c0e:	83 30       	cpi	r24, 0x03	; 3
    1c10:	91 05       	cpc	r25, r1
    1c12:	09 f4       	brne	.+2      	; 0x1c16 <DIO_u8SetPinValue+0x6a>
    1c14:	40 c0       	rjmp	.+128    	; 0x1c96 <DIO_u8SetPinValue+0xea>
    1c16:	54 c0       	rjmp	.+168    	; 0x1cc0 <DIO_u8SetPinValue+0x114>
			{
			case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
    1c18:	ab e3       	ldi	r26, 0x3B	; 59
    1c1a:	b0 e0       	ldi	r27, 0x00	; 0
    1c1c:	eb e3       	ldi	r30, 0x3B	; 59
    1c1e:	f0 e0       	ldi	r31, 0x00	; 0
    1c20:	80 81       	ld	r24, Z
    1c22:	48 2f       	mov	r20, r24
    1c24:	8b 81       	ldd	r24, Y+3	; 0x03
    1c26:	28 2f       	mov	r18, r24
    1c28:	30 e0       	ldi	r19, 0x00	; 0
    1c2a:	81 e0       	ldi	r24, 0x01	; 1
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	02 2e       	mov	r0, r18
    1c30:	02 c0       	rjmp	.+4      	; 0x1c36 <DIO_u8SetPinValue+0x8a>
    1c32:	88 0f       	add	r24, r24
    1c34:	99 1f       	adc	r25, r25
    1c36:	0a 94       	dec	r0
    1c38:	e2 f7       	brpl	.-8      	; 0x1c32 <DIO_u8SetPinValue+0x86>
    1c3a:	80 95       	com	r24
    1c3c:	84 23       	and	r24, r20
    1c3e:	8c 93       	st	X, r24
    1c40:	bd c0       	rjmp	.+378    	; 0x1dbc <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
    1c42:	a8 e3       	ldi	r26, 0x38	; 56
    1c44:	b0 e0       	ldi	r27, 0x00	; 0
    1c46:	e8 e3       	ldi	r30, 0x38	; 56
    1c48:	f0 e0       	ldi	r31, 0x00	; 0
    1c4a:	80 81       	ld	r24, Z
    1c4c:	48 2f       	mov	r20, r24
    1c4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c50:	28 2f       	mov	r18, r24
    1c52:	30 e0       	ldi	r19, 0x00	; 0
    1c54:	81 e0       	ldi	r24, 0x01	; 1
    1c56:	90 e0       	ldi	r25, 0x00	; 0
    1c58:	02 2e       	mov	r0, r18
    1c5a:	02 c0       	rjmp	.+4      	; 0x1c60 <DIO_u8SetPinValue+0xb4>
    1c5c:	88 0f       	add	r24, r24
    1c5e:	99 1f       	adc	r25, r25
    1c60:	0a 94       	dec	r0
    1c62:	e2 f7       	brpl	.-8      	; 0x1c5c <DIO_u8SetPinValue+0xb0>
    1c64:	80 95       	com	r24
    1c66:	84 23       	and	r24, r20
    1c68:	8c 93       	st	X, r24
    1c6a:	a8 c0       	rjmp	.+336    	; 0x1dbc <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin); break;
    1c6c:	a5 e3       	ldi	r26, 0x35	; 53
    1c6e:	b0 e0       	ldi	r27, 0x00	; 0
    1c70:	e5 e3       	ldi	r30, 0x35	; 53
    1c72:	f0 e0       	ldi	r31, 0x00	; 0
    1c74:	80 81       	ld	r24, Z
    1c76:	48 2f       	mov	r20, r24
    1c78:	8b 81       	ldd	r24, Y+3	; 0x03
    1c7a:	28 2f       	mov	r18, r24
    1c7c:	30 e0       	ldi	r19, 0x00	; 0
    1c7e:	81 e0       	ldi	r24, 0x01	; 1
    1c80:	90 e0       	ldi	r25, 0x00	; 0
    1c82:	02 2e       	mov	r0, r18
    1c84:	02 c0       	rjmp	.+4      	; 0x1c8a <DIO_u8SetPinValue+0xde>
    1c86:	88 0f       	add	r24, r24
    1c88:	99 1f       	adc	r25, r25
    1c8a:	0a 94       	dec	r0
    1c8c:	e2 f7       	brpl	.-8      	; 0x1c86 <DIO_u8SetPinValue+0xda>
    1c8e:	80 95       	com	r24
    1c90:	84 23       	and	r24, r20
    1c92:	8c 93       	st	X, r24
    1c94:	93 c0       	rjmp	.+294    	; 0x1dbc <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin); break;
    1c96:	a2 e3       	ldi	r26, 0x32	; 50
    1c98:	b0 e0       	ldi	r27, 0x00	; 0
    1c9a:	e2 e3       	ldi	r30, 0x32	; 50
    1c9c:	f0 e0       	ldi	r31, 0x00	; 0
    1c9e:	80 81       	ld	r24, Z
    1ca0:	48 2f       	mov	r20, r24
    1ca2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca4:	28 2f       	mov	r18, r24
    1ca6:	30 e0       	ldi	r19, 0x00	; 0
    1ca8:	81 e0       	ldi	r24, 0x01	; 1
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	02 2e       	mov	r0, r18
    1cae:	02 c0       	rjmp	.+4      	; 0x1cb4 <DIO_u8SetPinValue+0x108>
    1cb0:	88 0f       	add	r24, r24
    1cb2:	99 1f       	adc	r25, r25
    1cb4:	0a 94       	dec	r0
    1cb6:	e2 f7       	brpl	.-8      	; 0x1cb0 <DIO_u8SetPinValue+0x104>
    1cb8:	80 95       	com	r24
    1cba:	84 23       	and	r24, r20
    1cbc:	8c 93       	st	X, r24
    1cbe:	7e c0       	rjmp	.+252    	; 0x1dbc <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState =1; break;
    1cc0:	81 e0       	ldi	r24, 0x01	; 1
    1cc2:	89 83       	std	Y+1, r24	; 0x01
    1cc4:	7b c0       	rjmp	.+246    	; 0x1dbc <DIO_u8SetPinValue+0x210>

			}
		}
		else if(Copy_u8Value == DIO_u8PIN_HIGH)
    1cc6:	8c 81       	ldd	r24, Y+4	; 0x04
    1cc8:	81 30       	cpi	r24, 0x01	; 1
    1cca:	09 f0       	breq	.+2      	; 0x1cce <DIO_u8SetPinValue+0x122>
    1ccc:	72 c0       	rjmp	.+228    	; 0x1db2 <DIO_u8SetPinValue+0x206>
		{

			switch(Copy_u8port)
    1cce:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd0:	28 2f       	mov	r18, r24
    1cd2:	30 e0       	ldi	r19, 0x00	; 0
    1cd4:	3e 83       	std	Y+6, r19	; 0x06
    1cd6:	2d 83       	std	Y+5, r18	; 0x05
    1cd8:	8d 81       	ldd	r24, Y+5	; 0x05
    1cda:	9e 81       	ldd	r25, Y+6	; 0x06
    1cdc:	81 30       	cpi	r24, 0x01	; 1
    1cde:	91 05       	cpc	r25, r1
    1ce0:	49 f1       	breq	.+82     	; 0x1d34 <DIO_u8SetPinValue+0x188>
    1ce2:	2d 81       	ldd	r18, Y+5	; 0x05
    1ce4:	3e 81       	ldd	r19, Y+6	; 0x06
    1ce6:	22 30       	cpi	r18, 0x02	; 2
    1ce8:	31 05       	cpc	r19, r1
    1cea:	2c f4       	brge	.+10     	; 0x1cf6 <DIO_u8SetPinValue+0x14a>
    1cec:	8d 81       	ldd	r24, Y+5	; 0x05
    1cee:	9e 81       	ldd	r25, Y+6	; 0x06
    1cf0:	00 97       	sbiw	r24, 0x00	; 0
    1cf2:	61 f0       	breq	.+24     	; 0x1d0c <DIO_u8SetPinValue+0x160>
    1cf4:	5b c0       	rjmp	.+182    	; 0x1dac <DIO_u8SetPinValue+0x200>
    1cf6:	2d 81       	ldd	r18, Y+5	; 0x05
    1cf8:	3e 81       	ldd	r19, Y+6	; 0x06
    1cfa:	22 30       	cpi	r18, 0x02	; 2
    1cfc:	31 05       	cpc	r19, r1
    1cfe:	71 f1       	breq	.+92     	; 0x1d5c <DIO_u8SetPinValue+0x1b0>
    1d00:	8d 81       	ldd	r24, Y+5	; 0x05
    1d02:	9e 81       	ldd	r25, Y+6	; 0x06
    1d04:	83 30       	cpi	r24, 0x03	; 3
    1d06:	91 05       	cpc	r25, r1
    1d08:	e9 f1       	breq	.+122    	; 0x1d84 <DIO_u8SetPinValue+0x1d8>
    1d0a:	50 c0       	rjmp	.+160    	; 0x1dac <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
    1d0c:	ab e3       	ldi	r26, 0x3B	; 59
    1d0e:	b0 e0       	ldi	r27, 0x00	; 0
    1d10:	eb e3       	ldi	r30, 0x3B	; 59
    1d12:	f0 e0       	ldi	r31, 0x00	; 0
    1d14:	80 81       	ld	r24, Z
    1d16:	48 2f       	mov	r20, r24
    1d18:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1a:	28 2f       	mov	r18, r24
    1d1c:	30 e0       	ldi	r19, 0x00	; 0
    1d1e:	81 e0       	ldi	r24, 0x01	; 1
    1d20:	90 e0       	ldi	r25, 0x00	; 0
    1d22:	02 2e       	mov	r0, r18
    1d24:	02 c0       	rjmp	.+4      	; 0x1d2a <DIO_u8SetPinValue+0x17e>
    1d26:	88 0f       	add	r24, r24
    1d28:	99 1f       	adc	r25, r25
    1d2a:	0a 94       	dec	r0
    1d2c:	e2 f7       	brpl	.-8      	; 0x1d26 <DIO_u8SetPinValue+0x17a>
    1d2e:	84 2b       	or	r24, r20
    1d30:	8c 93       	st	X, r24
    1d32:	44 c0       	rjmp	.+136    	; 0x1dbc <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
    1d34:	a8 e3       	ldi	r26, 0x38	; 56
    1d36:	b0 e0       	ldi	r27, 0x00	; 0
    1d38:	e8 e3       	ldi	r30, 0x38	; 56
    1d3a:	f0 e0       	ldi	r31, 0x00	; 0
    1d3c:	80 81       	ld	r24, Z
    1d3e:	48 2f       	mov	r20, r24
    1d40:	8b 81       	ldd	r24, Y+3	; 0x03
    1d42:	28 2f       	mov	r18, r24
    1d44:	30 e0       	ldi	r19, 0x00	; 0
    1d46:	81 e0       	ldi	r24, 0x01	; 1
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	02 2e       	mov	r0, r18
    1d4c:	02 c0       	rjmp	.+4      	; 0x1d52 <DIO_u8SetPinValue+0x1a6>
    1d4e:	88 0f       	add	r24, r24
    1d50:	99 1f       	adc	r25, r25
    1d52:	0a 94       	dec	r0
    1d54:	e2 f7       	brpl	.-8      	; 0x1d4e <DIO_u8SetPinValue+0x1a2>
    1d56:	84 2b       	or	r24, r20
    1d58:	8c 93       	st	X, r24
    1d5a:	30 c0       	rjmp	.+96     	; 0x1dbc <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin); break;
    1d5c:	a5 e3       	ldi	r26, 0x35	; 53
    1d5e:	b0 e0       	ldi	r27, 0x00	; 0
    1d60:	e5 e3       	ldi	r30, 0x35	; 53
    1d62:	f0 e0       	ldi	r31, 0x00	; 0
    1d64:	80 81       	ld	r24, Z
    1d66:	48 2f       	mov	r20, r24
    1d68:	8b 81       	ldd	r24, Y+3	; 0x03
    1d6a:	28 2f       	mov	r18, r24
    1d6c:	30 e0       	ldi	r19, 0x00	; 0
    1d6e:	81 e0       	ldi	r24, 0x01	; 1
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	02 2e       	mov	r0, r18
    1d74:	02 c0       	rjmp	.+4      	; 0x1d7a <DIO_u8SetPinValue+0x1ce>
    1d76:	88 0f       	add	r24, r24
    1d78:	99 1f       	adc	r25, r25
    1d7a:	0a 94       	dec	r0
    1d7c:	e2 f7       	brpl	.-8      	; 0x1d76 <DIO_u8SetPinValue+0x1ca>
    1d7e:	84 2b       	or	r24, r20
    1d80:	8c 93       	st	X, r24
    1d82:	1c c0       	rjmp	.+56     	; 0x1dbc <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin); break;
    1d84:	a2 e3       	ldi	r26, 0x32	; 50
    1d86:	b0 e0       	ldi	r27, 0x00	; 0
    1d88:	e2 e3       	ldi	r30, 0x32	; 50
    1d8a:	f0 e0       	ldi	r31, 0x00	; 0
    1d8c:	80 81       	ld	r24, Z
    1d8e:	48 2f       	mov	r20, r24
    1d90:	8b 81       	ldd	r24, Y+3	; 0x03
    1d92:	28 2f       	mov	r18, r24
    1d94:	30 e0       	ldi	r19, 0x00	; 0
    1d96:	81 e0       	ldi	r24, 0x01	; 1
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	02 2e       	mov	r0, r18
    1d9c:	02 c0       	rjmp	.+4      	; 0x1da2 <DIO_u8SetPinValue+0x1f6>
    1d9e:	88 0f       	add	r24, r24
    1da0:	99 1f       	adc	r25, r25
    1da2:	0a 94       	dec	r0
    1da4:	e2 f7       	brpl	.-8      	; 0x1d9e <DIO_u8SetPinValue+0x1f2>
    1da6:	84 2b       	or	r24, r20
    1da8:	8c 93       	st	X, r24
    1daa:	08 c0       	rjmp	.+16     	; 0x1dbc <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState =1; break;
    1dac:	81 e0       	ldi	r24, 0x01	; 1
    1dae:	89 83       	std	Y+1, r24	; 0x01
    1db0:	05 c0       	rjmp	.+10     	; 0x1dbc <DIO_u8SetPinValue+0x210>

			}
		}
		else
		{
			Local_u8ErrorState = 1;
    1db2:	81 e0       	ldi	r24, 0x01	; 1
    1db4:	89 83       	std	Y+1, r24	; 0x01
    1db6:	02 c0       	rjmp	.+4      	; 0x1dbc <DIO_u8SetPinValue+0x210>
		}

	}
	else
	{
		Local_u8ErrorState = 1;
    1db8:	81 e0       	ldi	r24, 0x01	; 1
    1dba:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1dbc:	89 81       	ldd	r24, Y+1	; 0x01
}
    1dbe:	28 96       	adiw	r28, 0x08	; 8
    1dc0:	0f b6       	in	r0, 0x3f	; 63
    1dc2:	f8 94       	cli
    1dc4:	de bf       	out	0x3e, r29	; 62
    1dc6:	0f be       	out	0x3f, r0	; 63
    1dc8:	cd bf       	out	0x3d, r28	; 61
    1dca:	cf 91       	pop	r28
    1dcc:	df 91       	pop	r29
    1dce:	08 95       	ret

00001dd0 <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8port, u8 Copy_u8Value)
{
    1dd0:	df 93       	push	r29
    1dd2:	cf 93       	push	r28
    1dd4:	00 d0       	rcall	.+0      	; 0x1dd6 <DIO_u8SetPortValue+0x6>
    1dd6:	00 d0       	rcall	.+0      	; 0x1dd8 <DIO_u8SetPortValue+0x8>
    1dd8:	0f 92       	push	r0
    1dda:	cd b7       	in	r28, 0x3d	; 61
    1ddc:	de b7       	in	r29, 0x3e	; 62
    1dde:	8a 83       	std	Y+2, r24	; 0x02
    1de0:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    1de2:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8port<=DIO_u8PORTD)
    1de4:	8a 81       	ldd	r24, Y+2	; 0x02
    1de6:	84 30       	cpi	r24, 0x04	; 4
    1de8:	b0 f5       	brcc	.+108    	; 0x1e56 <DIO_u8SetPortValue+0x86>
	{
		switch(Copy_u8port)
    1dea:	8a 81       	ldd	r24, Y+2	; 0x02
    1dec:	28 2f       	mov	r18, r24
    1dee:	30 e0       	ldi	r19, 0x00	; 0
    1df0:	3d 83       	std	Y+5, r19	; 0x05
    1df2:	2c 83       	std	Y+4, r18	; 0x04
    1df4:	8c 81       	ldd	r24, Y+4	; 0x04
    1df6:	9d 81       	ldd	r25, Y+5	; 0x05
    1df8:	81 30       	cpi	r24, 0x01	; 1
    1dfa:	91 05       	cpc	r25, r1
    1dfc:	d1 f0       	breq	.+52     	; 0x1e32 <DIO_u8SetPortValue+0x62>
    1dfe:	2c 81       	ldd	r18, Y+4	; 0x04
    1e00:	3d 81       	ldd	r19, Y+5	; 0x05
    1e02:	22 30       	cpi	r18, 0x02	; 2
    1e04:	31 05       	cpc	r19, r1
    1e06:	2c f4       	brge	.+10     	; 0x1e12 <DIO_u8SetPortValue+0x42>
    1e08:	8c 81       	ldd	r24, Y+4	; 0x04
    1e0a:	9d 81       	ldd	r25, Y+5	; 0x05
    1e0c:	00 97       	sbiw	r24, 0x00	; 0
    1e0e:	61 f0       	breq	.+24     	; 0x1e28 <DIO_u8SetPortValue+0x58>
    1e10:	1f c0       	rjmp	.+62     	; 0x1e50 <DIO_u8SetPortValue+0x80>
    1e12:	2c 81       	ldd	r18, Y+4	; 0x04
    1e14:	3d 81       	ldd	r19, Y+5	; 0x05
    1e16:	22 30       	cpi	r18, 0x02	; 2
    1e18:	31 05       	cpc	r19, r1
    1e1a:	81 f0       	breq	.+32     	; 0x1e3c <DIO_u8SetPortValue+0x6c>
    1e1c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e1e:	9d 81       	ldd	r25, Y+5	; 0x05
    1e20:	83 30       	cpi	r24, 0x03	; 3
    1e22:	91 05       	cpc	r25, r1
    1e24:	81 f0       	breq	.+32     	; 0x1e46 <DIO_u8SetPortValue+0x76>
    1e26:	14 c0       	rjmp	.+40     	; 0x1e50 <DIO_u8SetPortValue+0x80>
		{
		case DIO_u8PORTA: PORTA = Copy_u8Value; break;
    1e28:	eb e3       	ldi	r30, 0x3B	; 59
    1e2a:	f0 e0       	ldi	r31, 0x00	; 0
    1e2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e2e:	80 83       	st	Z, r24
    1e30:	14 c0       	rjmp	.+40     	; 0x1e5a <DIO_u8SetPortValue+0x8a>
		case DIO_u8PORTB: PORTB = Copy_u8Value; break;
    1e32:	e8 e3       	ldi	r30, 0x38	; 56
    1e34:	f0 e0       	ldi	r31, 0x00	; 0
    1e36:	8b 81       	ldd	r24, Y+3	; 0x03
    1e38:	80 83       	st	Z, r24
    1e3a:	0f c0       	rjmp	.+30     	; 0x1e5a <DIO_u8SetPortValue+0x8a>
		case DIO_u8PORTC: PORTC = Copy_u8Value; break;
    1e3c:	e5 e3       	ldi	r30, 0x35	; 53
    1e3e:	f0 e0       	ldi	r31, 0x00	; 0
    1e40:	8b 81       	ldd	r24, Y+3	; 0x03
    1e42:	80 83       	st	Z, r24
    1e44:	0a c0       	rjmp	.+20     	; 0x1e5a <DIO_u8SetPortValue+0x8a>
		case DIO_u8PORTD: PORTD = Copy_u8Value; break;
    1e46:	e2 e3       	ldi	r30, 0x32	; 50
    1e48:	f0 e0       	ldi	r31, 0x00	; 0
    1e4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e4c:	80 83       	st	Z, r24
    1e4e:	05 c0       	rjmp	.+10     	; 0x1e5a <DIO_u8SetPortValue+0x8a>
		default: Local_u8ErrorState =1; break;
    1e50:	81 e0       	ldi	r24, 0x01	; 1
    1e52:	89 83       	std	Y+1, r24	; 0x01
    1e54:	02 c0       	rjmp	.+4      	; 0x1e5a <DIO_u8SetPortValue+0x8a>

		}
	}
	else
	{
		Local_u8ErrorState = 1;
    1e56:	81 e0       	ldi	r24, 0x01	; 1
    1e58:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_u8ErrorState;
    1e5a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e5c:	0f 90       	pop	r0
    1e5e:	0f 90       	pop	r0
    1e60:	0f 90       	pop	r0
    1e62:	0f 90       	pop	r0
    1e64:	0f 90       	pop	r0
    1e66:	cf 91       	pop	r28
    1e68:	df 91       	pop	r29
    1e6a:	08 95       	ret

00001e6c <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8port, u8 Copy_u8Pin, u8* Copy_Pu8Value)
{
    1e6c:	df 93       	push	r29
    1e6e:	cf 93       	push	r28
    1e70:	cd b7       	in	r28, 0x3d	; 61
    1e72:	de b7       	in	r29, 0x3e	; 62
    1e74:	27 97       	sbiw	r28, 0x07	; 7
    1e76:	0f b6       	in	r0, 0x3f	; 63
    1e78:	f8 94       	cli
    1e7a:	de bf       	out	0x3e, r29	; 62
    1e7c:	0f be       	out	0x3f, r0	; 63
    1e7e:	cd bf       	out	0x3d, r28	; 61
    1e80:	8a 83       	std	Y+2, r24	; 0x02
    1e82:	6b 83       	std	Y+3, r22	; 0x03
    1e84:	5d 83       	std	Y+5, r21	; 0x05
    1e86:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    1e88:	19 82       	std	Y+1, r1	; 0x01

	if((Copy_Pu8Value != NULL )&&(Copy_u8Pin<=DIO_u8PIN7))
    1e8a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e8c:	9d 81       	ldd	r25, Y+5	; 0x05
    1e8e:	00 97       	sbiw	r24, 0x00	; 0
    1e90:	09 f4       	brne	.+2      	; 0x1e94 <DIO_u8GetPinValue+0x28>
    1e92:	78 c0       	rjmp	.+240    	; 0x1f84 <DIO_u8GetPinValue+0x118>
    1e94:	8b 81       	ldd	r24, Y+3	; 0x03
    1e96:	88 30       	cpi	r24, 0x08	; 8
    1e98:	08 f0       	brcs	.+2      	; 0x1e9c <DIO_u8GetPinValue+0x30>
    1e9a:	74 c0       	rjmp	.+232    	; 0x1f84 <DIO_u8GetPinValue+0x118>
	{


			switch(Copy_u8port)
    1e9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e9e:	28 2f       	mov	r18, r24
    1ea0:	30 e0       	ldi	r19, 0x00	; 0
    1ea2:	3f 83       	std	Y+7, r19	; 0x07
    1ea4:	2e 83       	std	Y+6, r18	; 0x06
    1ea6:	4e 81       	ldd	r20, Y+6	; 0x06
    1ea8:	5f 81       	ldd	r21, Y+7	; 0x07
    1eaa:	41 30       	cpi	r20, 0x01	; 1
    1eac:	51 05       	cpc	r21, r1
    1eae:	59 f1       	breq	.+86     	; 0x1f06 <DIO_u8GetPinValue+0x9a>
    1eb0:	8e 81       	ldd	r24, Y+6	; 0x06
    1eb2:	9f 81       	ldd	r25, Y+7	; 0x07
    1eb4:	82 30       	cpi	r24, 0x02	; 2
    1eb6:	91 05       	cpc	r25, r1
    1eb8:	34 f4       	brge	.+12     	; 0x1ec6 <DIO_u8GetPinValue+0x5a>
    1eba:	2e 81       	ldd	r18, Y+6	; 0x06
    1ebc:	3f 81       	ldd	r19, Y+7	; 0x07
    1ebe:	21 15       	cp	r18, r1
    1ec0:	31 05       	cpc	r19, r1
    1ec2:	69 f0       	breq	.+26     	; 0x1ede <DIO_u8GetPinValue+0x72>
    1ec4:	5c c0       	rjmp	.+184    	; 0x1f7e <DIO_u8GetPinValue+0x112>
    1ec6:	4e 81       	ldd	r20, Y+6	; 0x06
    1ec8:	5f 81       	ldd	r21, Y+7	; 0x07
    1eca:	42 30       	cpi	r20, 0x02	; 2
    1ecc:	51 05       	cpc	r21, r1
    1ece:	79 f1       	breq	.+94     	; 0x1f2e <DIO_u8GetPinValue+0xc2>
    1ed0:	8e 81       	ldd	r24, Y+6	; 0x06
    1ed2:	9f 81       	ldd	r25, Y+7	; 0x07
    1ed4:	83 30       	cpi	r24, 0x03	; 3
    1ed6:	91 05       	cpc	r25, r1
    1ed8:	09 f4       	brne	.+2      	; 0x1edc <DIO_u8GetPinValue+0x70>
    1eda:	3d c0       	rjmp	.+122    	; 0x1f56 <DIO_u8GetPinValue+0xea>
    1edc:	50 c0       	rjmp	.+160    	; 0x1f7e <DIO_u8GetPinValue+0x112>
			{
			case DIO_u8PORTA: * Copy_Pu8Value = GET_BIT(PINA,Copy_u8Pin); break;
    1ede:	e9 e3       	ldi	r30, 0x39	; 57
    1ee0:	f0 e0       	ldi	r31, 0x00	; 0
    1ee2:	80 81       	ld	r24, Z
    1ee4:	28 2f       	mov	r18, r24
    1ee6:	30 e0       	ldi	r19, 0x00	; 0
    1ee8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eea:	88 2f       	mov	r24, r24
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	a9 01       	movw	r20, r18
    1ef0:	02 c0       	rjmp	.+4      	; 0x1ef6 <DIO_u8GetPinValue+0x8a>
    1ef2:	55 95       	asr	r21
    1ef4:	47 95       	ror	r20
    1ef6:	8a 95       	dec	r24
    1ef8:	e2 f7       	brpl	.-8      	; 0x1ef2 <DIO_u8GetPinValue+0x86>
    1efa:	ca 01       	movw	r24, r20
    1efc:	81 70       	andi	r24, 0x01	; 1
    1efe:	ec 81       	ldd	r30, Y+4	; 0x04
    1f00:	fd 81       	ldd	r31, Y+5	; 0x05
    1f02:	80 83       	st	Z, r24
    1f04:	41 c0       	rjmp	.+130    	; 0x1f88 <DIO_u8GetPinValue+0x11c>
			case DIO_u8PORTB: * Copy_Pu8Value = GET_BIT(PINB,Copy_u8Pin); break;
    1f06:	e6 e3       	ldi	r30, 0x36	; 54
    1f08:	f0 e0       	ldi	r31, 0x00	; 0
    1f0a:	80 81       	ld	r24, Z
    1f0c:	28 2f       	mov	r18, r24
    1f0e:	30 e0       	ldi	r19, 0x00	; 0
    1f10:	8b 81       	ldd	r24, Y+3	; 0x03
    1f12:	88 2f       	mov	r24, r24
    1f14:	90 e0       	ldi	r25, 0x00	; 0
    1f16:	a9 01       	movw	r20, r18
    1f18:	02 c0       	rjmp	.+4      	; 0x1f1e <DIO_u8GetPinValue+0xb2>
    1f1a:	55 95       	asr	r21
    1f1c:	47 95       	ror	r20
    1f1e:	8a 95       	dec	r24
    1f20:	e2 f7       	brpl	.-8      	; 0x1f1a <DIO_u8GetPinValue+0xae>
    1f22:	ca 01       	movw	r24, r20
    1f24:	81 70       	andi	r24, 0x01	; 1
    1f26:	ec 81       	ldd	r30, Y+4	; 0x04
    1f28:	fd 81       	ldd	r31, Y+5	; 0x05
    1f2a:	80 83       	st	Z, r24
    1f2c:	2d c0       	rjmp	.+90     	; 0x1f88 <DIO_u8GetPinValue+0x11c>
			case DIO_u8PORTC: * Copy_Pu8Value = GET_BIT(PINC,Copy_u8Pin); break;
    1f2e:	e3 e3       	ldi	r30, 0x33	; 51
    1f30:	f0 e0       	ldi	r31, 0x00	; 0
    1f32:	80 81       	ld	r24, Z
    1f34:	28 2f       	mov	r18, r24
    1f36:	30 e0       	ldi	r19, 0x00	; 0
    1f38:	8b 81       	ldd	r24, Y+3	; 0x03
    1f3a:	88 2f       	mov	r24, r24
    1f3c:	90 e0       	ldi	r25, 0x00	; 0
    1f3e:	a9 01       	movw	r20, r18
    1f40:	02 c0       	rjmp	.+4      	; 0x1f46 <DIO_u8GetPinValue+0xda>
    1f42:	55 95       	asr	r21
    1f44:	47 95       	ror	r20
    1f46:	8a 95       	dec	r24
    1f48:	e2 f7       	brpl	.-8      	; 0x1f42 <DIO_u8GetPinValue+0xd6>
    1f4a:	ca 01       	movw	r24, r20
    1f4c:	81 70       	andi	r24, 0x01	; 1
    1f4e:	ec 81       	ldd	r30, Y+4	; 0x04
    1f50:	fd 81       	ldd	r31, Y+5	; 0x05
    1f52:	80 83       	st	Z, r24
    1f54:	19 c0       	rjmp	.+50     	; 0x1f88 <DIO_u8GetPinValue+0x11c>
			case DIO_u8PORTD: * Copy_Pu8Value = GET_BIT(PIND,Copy_u8Pin); break;
    1f56:	e0 e3       	ldi	r30, 0x30	; 48
    1f58:	f0 e0       	ldi	r31, 0x00	; 0
    1f5a:	80 81       	ld	r24, Z
    1f5c:	28 2f       	mov	r18, r24
    1f5e:	30 e0       	ldi	r19, 0x00	; 0
    1f60:	8b 81       	ldd	r24, Y+3	; 0x03
    1f62:	88 2f       	mov	r24, r24
    1f64:	90 e0       	ldi	r25, 0x00	; 0
    1f66:	a9 01       	movw	r20, r18
    1f68:	02 c0       	rjmp	.+4      	; 0x1f6e <DIO_u8GetPinValue+0x102>
    1f6a:	55 95       	asr	r21
    1f6c:	47 95       	ror	r20
    1f6e:	8a 95       	dec	r24
    1f70:	e2 f7       	brpl	.-8      	; 0x1f6a <DIO_u8GetPinValue+0xfe>
    1f72:	ca 01       	movw	r24, r20
    1f74:	81 70       	andi	r24, 0x01	; 1
    1f76:	ec 81       	ldd	r30, Y+4	; 0x04
    1f78:	fd 81       	ldd	r31, Y+5	; 0x05
    1f7a:	80 83       	st	Z, r24
    1f7c:	05 c0       	rjmp	.+10     	; 0x1f88 <DIO_u8GetPinValue+0x11c>
			default: Local_u8ErrorState =1; break;
    1f7e:	81 e0       	ldi	r24, 0x01	; 1
    1f80:	89 83       	std	Y+1, r24	; 0x01
    1f82:	02 c0       	rjmp	.+4      	; 0x1f88 <DIO_u8GetPinValue+0x11c>

			}
	}
	else
	{
		Local_u8ErrorState = 1;
    1f84:	81 e0       	ldi	r24, 0x01	; 1
    1f86:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1f88:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f8a:	27 96       	adiw	r28, 0x07	; 7
    1f8c:	0f b6       	in	r0, 0x3f	; 63
    1f8e:	f8 94       	cli
    1f90:	de bf       	out	0x3e, r29	; 62
    1f92:	0f be       	out	0x3f, r0	; 63
    1f94:	cd bf       	out	0x3d, r28	; 61
    1f96:	cf 91       	pop	r28
    1f98:	df 91       	pop	r29
    1f9a:	08 95       	ret

00001f9c <DIO_u8AndWithPort>:

u8 DIO_u8AndWithPort(u8 Copy_u8port, u8 Copy_u8Value)
{
    1f9c:	df 93       	push	r29
    1f9e:	cf 93       	push	r28
    1fa0:	00 d0       	rcall	.+0      	; 0x1fa2 <DIO_u8AndWithPort+0x6>
    1fa2:	00 d0       	rcall	.+0      	; 0x1fa4 <DIO_u8AndWithPort+0x8>
    1fa4:	0f 92       	push	r0
    1fa6:	cd b7       	in	r28, 0x3d	; 61
    1fa8:	de b7       	in	r29, 0x3e	; 62
    1faa:	8a 83       	std	Y+2, r24	; 0x02
    1fac:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Result = 0;
    1fae:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8port)
    1fb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb2:	28 2f       	mov	r18, r24
    1fb4:	30 e0       	ldi	r19, 0x00	; 0
    1fb6:	3d 83       	std	Y+5, r19	; 0x05
    1fb8:	2c 83       	std	Y+4, r18	; 0x04
    1fba:	8c 81       	ldd	r24, Y+4	; 0x04
    1fbc:	9d 81       	ldd	r25, Y+5	; 0x05
    1fbe:	81 30       	cpi	r24, 0x01	; 1
    1fc0:	91 05       	cpc	r25, r1
    1fc2:	e1 f0       	breq	.+56     	; 0x1ffc <DIO_u8AndWithPort+0x60>
    1fc4:	2c 81       	ldd	r18, Y+4	; 0x04
    1fc6:	3d 81       	ldd	r19, Y+5	; 0x05
    1fc8:	22 30       	cpi	r18, 0x02	; 2
    1fca:	31 05       	cpc	r19, r1
    1fcc:	2c f4       	brge	.+10     	; 0x1fd8 <DIO_u8AndWithPort+0x3c>
    1fce:	8c 81       	ldd	r24, Y+4	; 0x04
    1fd0:	9d 81       	ldd	r25, Y+5	; 0x05
    1fd2:	00 97       	sbiw	r24, 0x00	; 0
    1fd4:	61 f0       	breq	.+24     	; 0x1fee <DIO_u8AndWithPort+0x52>
    1fd6:	26 c0       	rjmp	.+76     	; 0x2024 <DIO_u8AndWithPort+0x88>
    1fd8:	2c 81       	ldd	r18, Y+4	; 0x04
    1fda:	3d 81       	ldd	r19, Y+5	; 0x05
    1fdc:	22 30       	cpi	r18, 0x02	; 2
    1fde:	31 05       	cpc	r19, r1
    1fe0:	a1 f0       	breq	.+40     	; 0x200a <DIO_u8AndWithPort+0x6e>
    1fe2:	8c 81       	ldd	r24, Y+4	; 0x04
    1fe4:	9d 81       	ldd	r25, Y+5	; 0x05
    1fe6:	83 30       	cpi	r24, 0x03	; 3
    1fe8:	91 05       	cpc	r25, r1
    1fea:	b1 f0       	breq	.+44     	; 0x2018 <DIO_u8AndWithPort+0x7c>
    1fec:	1b c0       	rjmp	.+54     	; 0x2024 <DIO_u8AndWithPort+0x88>
			{
			case DIO_u8PORTA: Local_u8Result= PORTA & Copy_u8Value; break;
    1fee:	eb e3       	ldi	r30, 0x3B	; 59
    1ff0:	f0 e0       	ldi	r31, 0x00	; 0
    1ff2:	90 81       	ld	r25, Z
    1ff4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff6:	89 23       	and	r24, r25
    1ff8:	89 83       	std	Y+1, r24	; 0x01
    1ffa:	14 c0       	rjmp	.+40     	; 0x2024 <DIO_u8AndWithPort+0x88>
			case DIO_u8PORTB: Local_u8Result= PORTB & Copy_u8Value; break;
    1ffc:	e8 e3       	ldi	r30, 0x38	; 56
    1ffe:	f0 e0       	ldi	r31, 0x00	; 0
    2000:	90 81       	ld	r25, Z
    2002:	8b 81       	ldd	r24, Y+3	; 0x03
    2004:	89 23       	and	r24, r25
    2006:	89 83       	std	Y+1, r24	; 0x01
    2008:	0d c0       	rjmp	.+26     	; 0x2024 <DIO_u8AndWithPort+0x88>
			case DIO_u8PORTC: Local_u8Result= PORTC & Copy_u8Value; break;
    200a:	e5 e3       	ldi	r30, 0x35	; 53
    200c:	f0 e0       	ldi	r31, 0x00	; 0
    200e:	90 81       	ld	r25, Z
    2010:	8b 81       	ldd	r24, Y+3	; 0x03
    2012:	89 23       	and	r24, r25
    2014:	89 83       	std	Y+1, r24	; 0x01
    2016:	06 c0       	rjmp	.+12     	; 0x2024 <DIO_u8AndWithPort+0x88>
			case DIO_u8PORTD: Local_u8Result = PORTD & Copy_u8Value; break;
    2018:	e2 e3       	ldi	r30, 0x32	; 50
    201a:	f0 e0       	ldi	r31, 0x00	; 0
    201c:	90 81       	ld	r25, Z
    201e:	8b 81       	ldd	r24, Y+3	; 0x03
    2020:	89 23       	and	r24, r25
    2022:	89 83       	std	Y+1, r24	; 0x01
			default:  break;


			}
	return Local_u8Result;
    2024:	89 81       	ldd	r24, Y+1	; 0x01
}
    2026:	0f 90       	pop	r0
    2028:	0f 90       	pop	r0
    202a:	0f 90       	pop	r0
    202c:	0f 90       	pop	r0
    202e:	0f 90       	pop	r0
    2030:	cf 91       	pop	r28
    2032:	df 91       	pop	r29
    2034:	08 95       	ret

00002036 <EXTI_VoidInt0Init>:
/****************************************************************************************************/

/*****************************************     INT0Init    ******************************************/

void EXTI_VoidInt0Init(void)
{
    2036:	df 93       	push	r29
    2038:	cf 93       	push	r28
    203a:	cd b7       	in	r28, 0x3d	; 61
    203c:	de b7       	in	r29, 0x3e	; 62

	}
#elif INT0_SENSE == RISING_EDGE
	{
		/* Set Sense Control for INT0 for RISING_EDGE*/
		SET_BIT(MCUCR,MCUCR_ISC01);
    203e:	a5 e5       	ldi	r26, 0x55	; 85
    2040:	b0 e0       	ldi	r27, 0x00	; 0
    2042:	e5 e5       	ldi	r30, 0x55	; 85
    2044:	f0 e0       	ldi	r31, 0x00	; 0
    2046:	80 81       	ld	r24, Z
    2048:	82 60       	ori	r24, 0x02	; 2
    204a:	8c 93       	st	X, r24
		SET_BIT(MCUCR,MCUCR_ISC00);
    204c:	a5 e5       	ldi	r26, 0x55	; 85
    204e:	b0 e0       	ldi	r27, 0x00	; 0
    2050:	e5 e5       	ldi	r30, 0x55	; 85
    2052:	f0 e0       	ldi	r31, 0x00	; 0
    2054:	80 81       	ld	r24, Z
    2056:	81 60       	ori	r24, 0x01	; 1
    2058:	8c 93       	st	X, r24

	/*Check Peripheral interrupt enable for INT0_INTIAL_STATE */

#if  INT0_INTIAL_STATE == ENABLED
	{
		SET_BIT(GICR,GICR_INT0);
    205a:	ab e5       	ldi	r26, 0x5B	; 91
    205c:	b0 e0       	ldi	r27, 0x00	; 0
    205e:	eb e5       	ldi	r30, 0x5B	; 91
    2060:	f0 e0       	ldi	r31, 0x00	; 0
    2062:	80 81       	ld	r24, Z
    2064:	80 64       	ori	r24, 0x40	; 64
    2066:	8c 93       	st	X, r24
#else
	{
#error "Wrong INT0_INTIAL_STATE Configuration option"
	}
#endif
}
    2068:	cf 91       	pop	r28
    206a:	df 91       	pop	r29
    206c:	08 95       	ret

0000206e <EXTI_VoidInt1Init>:

/*****************************************     INT1Init    ******************************************/

void EXTI_VoidInt1Init(void)
{
    206e:	df 93       	push	r29
    2070:	cf 93       	push	r28
    2072:	cd b7       	in	r28, 0x3d	; 61
    2074:	de b7       	in	r29, 0x3e	; 62

	}
#elif INT1_SENSE == FALLING_EDGE
	{
		/* Set Sense Control for INT1 for falling edge*/
		SET_BIT(MCUCR,MCUCR_ISC11);
    2076:	a5 e5       	ldi	r26, 0x55	; 85
    2078:	b0 e0       	ldi	r27, 0x00	; 0
    207a:	e5 e5       	ldi	r30, 0x55	; 85
    207c:	f0 e0       	ldi	r31, 0x00	; 0
    207e:	80 81       	ld	r24, Z
    2080:	88 60       	ori	r24, 0x08	; 8
    2082:	8c 93       	st	X, r24
		CLR_BIT(MCUCR,MCUCR_ISC10);
    2084:	a5 e5       	ldi	r26, 0x55	; 85
    2086:	b0 e0       	ldi	r27, 0x00	; 0
    2088:	e5 e5       	ldi	r30, 0x55	; 85
    208a:	f0 e0       	ldi	r31, 0x00	; 0
    208c:	80 81       	ld	r24, Z
    208e:	8b 7f       	andi	r24, 0xFB	; 251
    2090:	8c 93       	st	X, r24

	/*Check Peripheral interrupt enable for INT1_INTIAL_STATE */

#if  INT1_INTIAL_STATE == ENABLED
	{
		SET_BIT(GICR,GICR_INT1);
    2092:	ab e5       	ldi	r26, 0x5B	; 91
    2094:	b0 e0       	ldi	r27, 0x00	; 0
    2096:	eb e5       	ldi	r30, 0x5B	; 91
    2098:	f0 e0       	ldi	r31, 0x00	; 0
    209a:	80 81       	ld	r24, Z
    209c:	80 68       	ori	r24, 0x80	; 128
    209e:	8c 93       	st	X, r24
#else
	{
#error "Wrong INT1_INTIAL_STATE Configuration option"
	}
#endif
}
    20a0:	cf 91       	pop	r28
    20a2:	df 91       	pop	r29
    20a4:	08 95       	ret

000020a6 <EXTI_VoidInt2Init>:

/*****************************************     INT2Init    ******************************************/

void EXTI_VoidInt2Init(void)
{
    20a6:	df 93       	push	r29
    20a8:	cf 93       	push	r28
    20aa:	cd b7       	in	r28, 0x3d	; 61
    20ac:	de b7       	in	r29, 0x3e	; 62

	}
#elif INT2_SENSE == RISING_EDGE
	{
		/* Set Sense Control for INT2 for RISING_EDGE*/
		SET_BIT(MCUCSR,MCUCSR_ISC2);
    20ae:	a4 e5       	ldi	r26, 0x54	; 84
    20b0:	b0 e0       	ldi	r27, 0x00	; 0
    20b2:	e4 e5       	ldi	r30, 0x54	; 84
    20b4:	f0 e0       	ldi	r31, 0x00	; 0
    20b6:	80 81       	ld	r24, Z
    20b8:	80 64       	ori	r24, 0x40	; 64
    20ba:	8c 93       	st	X, r24

	/*Check Peripheral interrupt enable for INT2_INTIAL_STATE */

#if  INT2_INTIAL_STATE == ENABLED
	{
		SET_BIT(GICR,GICR_INT2);
    20bc:	ab e5       	ldi	r26, 0x5B	; 91
    20be:	b0 e0       	ldi	r27, 0x00	; 0
    20c0:	eb e5       	ldi	r30, 0x5B	; 91
    20c2:	f0 e0       	ldi	r31, 0x00	; 0
    20c4:	80 81       	ld	r24, Z
    20c6:	80 62       	ori	r24, 0x20	; 32
    20c8:	8c 93       	st	X, r24
#else
	{
#error "Wrong INT2_INTIAL_STATE Configuration option"
	}
#endif
}
    20ca:	cf 91       	pop	r28
    20cc:	df 91       	pop	r29
    20ce:	08 95       	ret

000020d0 <EXTI_u8IntSetSenseControl>:
/****************************************************************************************************/
/********************************     Init Function By Post Build Method   **************************/
/****************************************************************************************************/

u8 EXTI_u8IntSetSenseControl(u8 Copy_u8Int,u8 Copy_u8Sense)
{
    20d0:	df 93       	push	r29
    20d2:	cf 93       	push	r28
    20d4:	cd b7       	in	r28, 0x3d	; 61
    20d6:	de b7       	in	r29, 0x3e	; 62
    20d8:	29 97       	sbiw	r28, 0x09	; 9
    20da:	0f b6       	in	r0, 0x3f	; 63
    20dc:	f8 94       	cli
    20de:	de bf       	out	0x3e, r29	; 62
    20e0:	0f be       	out	0x3f, r0	; 63
    20e2:	cd bf       	out	0x3d, r28	; 61
    20e4:	8a 83       	std	Y+2, r24	; 0x02
    20e6:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = OK;
    20e8:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Int == INT0)
    20ea:	8a 81       	ldd	r24, Y+2	; 0x02
    20ec:	86 30       	cpi	r24, 0x06	; 6
    20ee:	09 f0       	breq	.+2      	; 0x20f2 <EXTI_u8IntSetSenseControl+0x22>
    20f0:	5f c0       	rjmp	.+190    	; 0x21b0 <EXTI_u8IntSetSenseControl+0xe0>
	{
		switch(Copy_u8Sense)
    20f2:	8b 81       	ldd	r24, Y+3	; 0x03
    20f4:	28 2f       	mov	r18, r24
    20f6:	30 e0       	ldi	r19, 0x00	; 0
    20f8:	39 87       	std	Y+9, r19	; 0x09
    20fa:	28 87       	std	Y+8, r18	; 0x08
    20fc:	88 85       	ldd	r24, Y+8	; 0x08
    20fe:	99 85       	ldd	r25, Y+9	; 0x09
    2100:	82 30       	cpi	r24, 0x02	; 2
    2102:	91 05       	cpc	r25, r1
    2104:	29 f1       	breq	.+74     	; 0x2150 <EXTI_u8IntSetSenseControl+0x80>
    2106:	28 85       	ldd	r18, Y+8	; 0x08
    2108:	39 85       	ldd	r19, Y+9	; 0x09
    210a:	23 30       	cpi	r18, 0x03	; 3
    210c:	31 05       	cpc	r19, r1
    210e:	34 f4       	brge	.+12     	; 0x211c <EXTI_u8IntSetSenseControl+0x4c>
    2110:	88 85       	ldd	r24, Y+8	; 0x08
    2112:	99 85       	ldd	r25, Y+9	; 0x09
    2114:	81 30       	cpi	r24, 0x01	; 1
    2116:	91 05       	cpc	r25, r1
    2118:	61 f0       	breq	.+24     	; 0x2132 <EXTI_u8IntSetSenseControl+0x62>
    211a:	47 c0       	rjmp	.+142    	; 0x21aa <EXTI_u8IntSetSenseControl+0xda>
    211c:	28 85       	ldd	r18, Y+8	; 0x08
    211e:	39 85       	ldd	r19, Y+9	; 0x09
    2120:	23 30       	cpi	r18, 0x03	; 3
    2122:	31 05       	cpc	r19, r1
    2124:	21 f1       	breq	.+72     	; 0x216e <EXTI_u8IntSetSenseControl+0x9e>
    2126:	88 85       	ldd	r24, Y+8	; 0x08
    2128:	99 85       	ldd	r25, Y+9	; 0x09
    212a:	84 30       	cpi	r24, 0x04	; 4
    212c:	91 05       	cpc	r25, r1
    212e:	71 f1       	breq	.+92     	; 0x218c <EXTI_u8IntSetSenseControl+0xbc>
    2130:	3c c0       	rjmp	.+120    	; 0x21aa <EXTI_u8IntSetSenseControl+0xda>
		{
		case LOW_LEVEL:    CLR_BIT(MCUCR,MCUCR_ISC00);    CLR_BIT(MCUCR,MCUCR_ISC01);    break;
    2132:	a5 e5       	ldi	r26, 0x55	; 85
    2134:	b0 e0       	ldi	r27, 0x00	; 0
    2136:	e5 e5       	ldi	r30, 0x55	; 85
    2138:	f0 e0       	ldi	r31, 0x00	; 0
    213a:	80 81       	ld	r24, Z
    213c:	8e 7f       	andi	r24, 0xFE	; 254
    213e:	8c 93       	st	X, r24
    2140:	a5 e5       	ldi	r26, 0x55	; 85
    2142:	b0 e0       	ldi	r27, 0x00	; 0
    2144:	e5 e5       	ldi	r30, 0x55	; 85
    2146:	f0 e0       	ldi	r31, 0x00	; 0
    2148:	80 81       	ld	r24, Z
    214a:	8d 7f       	andi	r24, 0xFD	; 253
    214c:	8c 93       	st	X, r24
    214e:	bb c0       	rjmp	.+374    	; 0x22c6 <EXTI_u8IntSetSenseControl+0x1f6>
		case ON_CHANGE:    SET_BIT(MCUCR,MCUCR_ISC00);    CLR_BIT(MCUCR,MCUCR_ISC01);    break;
    2150:	a5 e5       	ldi	r26, 0x55	; 85
    2152:	b0 e0       	ldi	r27, 0x00	; 0
    2154:	e5 e5       	ldi	r30, 0x55	; 85
    2156:	f0 e0       	ldi	r31, 0x00	; 0
    2158:	80 81       	ld	r24, Z
    215a:	81 60       	ori	r24, 0x01	; 1
    215c:	8c 93       	st	X, r24
    215e:	a5 e5       	ldi	r26, 0x55	; 85
    2160:	b0 e0       	ldi	r27, 0x00	; 0
    2162:	e5 e5       	ldi	r30, 0x55	; 85
    2164:	f0 e0       	ldi	r31, 0x00	; 0
    2166:	80 81       	ld	r24, Z
    2168:	8d 7f       	andi	r24, 0xFD	; 253
    216a:	8c 93       	st	X, r24
    216c:	ac c0       	rjmp	.+344    	; 0x22c6 <EXTI_u8IntSetSenseControl+0x1f6>
		case FALLING_EDGE: SET_BIT(MCUCR,MCUCR_ISC01);    CLR_BIT(MCUCR,MCUCR_ISC00);    break;
    216e:	a5 e5       	ldi	r26, 0x55	; 85
    2170:	b0 e0       	ldi	r27, 0x00	; 0
    2172:	e5 e5       	ldi	r30, 0x55	; 85
    2174:	f0 e0       	ldi	r31, 0x00	; 0
    2176:	80 81       	ld	r24, Z
    2178:	82 60       	ori	r24, 0x02	; 2
    217a:	8c 93       	st	X, r24
    217c:	a5 e5       	ldi	r26, 0x55	; 85
    217e:	b0 e0       	ldi	r27, 0x00	; 0
    2180:	e5 e5       	ldi	r30, 0x55	; 85
    2182:	f0 e0       	ldi	r31, 0x00	; 0
    2184:	80 81       	ld	r24, Z
    2186:	8e 7f       	andi	r24, 0xFE	; 254
    2188:	8c 93       	st	X, r24
    218a:	9d c0       	rjmp	.+314    	; 0x22c6 <EXTI_u8IntSetSenseControl+0x1f6>
		case RISING_EDGE:  SET_BIT(MCUCR,MCUCR_ISC01);    SET_BIT(MCUCR,MCUCR_ISC00);    break;
    218c:	a5 e5       	ldi	r26, 0x55	; 85
    218e:	b0 e0       	ldi	r27, 0x00	; 0
    2190:	e5 e5       	ldi	r30, 0x55	; 85
    2192:	f0 e0       	ldi	r31, 0x00	; 0
    2194:	80 81       	ld	r24, Z
    2196:	82 60       	ori	r24, 0x02	; 2
    2198:	8c 93       	st	X, r24
    219a:	a5 e5       	ldi	r26, 0x55	; 85
    219c:	b0 e0       	ldi	r27, 0x00	; 0
    219e:	e5 e5       	ldi	r30, 0x55	; 85
    21a0:	f0 e0       	ldi	r31, 0x00	; 0
    21a2:	80 81       	ld	r24, Z
    21a4:	81 60       	ori	r24, 0x01	; 1
    21a6:	8c 93       	st	X, r24
    21a8:	8e c0       	rjmp	.+284    	; 0x22c6 <EXTI_u8IntSetSenseControl+0x1f6>
		default:           Local_u8ErrorState = NOK;                                     break;
    21aa:	81 e0       	ldi	r24, 0x01	; 1
    21ac:	89 83       	std	Y+1, r24	; 0x01
    21ae:	8b c0       	rjmp	.+278    	; 0x22c6 <EXTI_u8IntSetSenseControl+0x1f6>
		}
	}
	else if(Copy_u8Int == INT1)
    21b0:	8a 81       	ldd	r24, Y+2	; 0x02
    21b2:	87 30       	cpi	r24, 0x07	; 7
    21b4:	09 f0       	breq	.+2      	; 0x21b8 <EXTI_u8IntSetSenseControl+0xe8>
    21b6:	5f c0       	rjmp	.+190    	; 0x2276 <EXTI_u8IntSetSenseControl+0x1a6>
	{
		switch(Copy_u8Sense)
    21b8:	8b 81       	ldd	r24, Y+3	; 0x03
    21ba:	28 2f       	mov	r18, r24
    21bc:	30 e0       	ldi	r19, 0x00	; 0
    21be:	3f 83       	std	Y+7, r19	; 0x07
    21c0:	2e 83       	std	Y+6, r18	; 0x06
    21c2:	8e 81       	ldd	r24, Y+6	; 0x06
    21c4:	9f 81       	ldd	r25, Y+7	; 0x07
    21c6:	82 30       	cpi	r24, 0x02	; 2
    21c8:	91 05       	cpc	r25, r1
    21ca:	29 f1       	breq	.+74     	; 0x2216 <EXTI_u8IntSetSenseControl+0x146>
    21cc:	2e 81       	ldd	r18, Y+6	; 0x06
    21ce:	3f 81       	ldd	r19, Y+7	; 0x07
    21d0:	23 30       	cpi	r18, 0x03	; 3
    21d2:	31 05       	cpc	r19, r1
    21d4:	34 f4       	brge	.+12     	; 0x21e2 <EXTI_u8IntSetSenseControl+0x112>
    21d6:	8e 81       	ldd	r24, Y+6	; 0x06
    21d8:	9f 81       	ldd	r25, Y+7	; 0x07
    21da:	81 30       	cpi	r24, 0x01	; 1
    21dc:	91 05       	cpc	r25, r1
    21de:	61 f0       	breq	.+24     	; 0x21f8 <EXTI_u8IntSetSenseControl+0x128>
    21e0:	47 c0       	rjmp	.+142    	; 0x2270 <EXTI_u8IntSetSenseControl+0x1a0>
    21e2:	2e 81       	ldd	r18, Y+6	; 0x06
    21e4:	3f 81       	ldd	r19, Y+7	; 0x07
    21e6:	23 30       	cpi	r18, 0x03	; 3
    21e8:	31 05       	cpc	r19, r1
    21ea:	21 f1       	breq	.+72     	; 0x2234 <EXTI_u8IntSetSenseControl+0x164>
    21ec:	8e 81       	ldd	r24, Y+6	; 0x06
    21ee:	9f 81       	ldd	r25, Y+7	; 0x07
    21f0:	84 30       	cpi	r24, 0x04	; 4
    21f2:	91 05       	cpc	r25, r1
    21f4:	71 f1       	breq	.+92     	; 0x2252 <EXTI_u8IntSetSenseControl+0x182>
    21f6:	3c c0       	rjmp	.+120    	; 0x2270 <EXTI_u8IntSetSenseControl+0x1a0>
		{
		case LOW_LEVEL:    CLR_BIT(MCUCR,MCUCR_ISC10);    CLR_BIT(MCUCR,MCUCR_ISC11);    break;
    21f8:	a5 e5       	ldi	r26, 0x55	; 85
    21fa:	b0 e0       	ldi	r27, 0x00	; 0
    21fc:	e5 e5       	ldi	r30, 0x55	; 85
    21fe:	f0 e0       	ldi	r31, 0x00	; 0
    2200:	80 81       	ld	r24, Z
    2202:	8b 7f       	andi	r24, 0xFB	; 251
    2204:	8c 93       	st	X, r24
    2206:	a5 e5       	ldi	r26, 0x55	; 85
    2208:	b0 e0       	ldi	r27, 0x00	; 0
    220a:	e5 e5       	ldi	r30, 0x55	; 85
    220c:	f0 e0       	ldi	r31, 0x00	; 0
    220e:	80 81       	ld	r24, Z
    2210:	87 7f       	andi	r24, 0xF7	; 247
    2212:	8c 93       	st	X, r24
    2214:	58 c0       	rjmp	.+176    	; 0x22c6 <EXTI_u8IntSetSenseControl+0x1f6>
		case ON_CHANGE:    SET_BIT(MCUCR,MCUCR_ISC10);    CLR_BIT(MCUCR,MCUCR_ISC11);    break;
    2216:	a5 e5       	ldi	r26, 0x55	; 85
    2218:	b0 e0       	ldi	r27, 0x00	; 0
    221a:	e5 e5       	ldi	r30, 0x55	; 85
    221c:	f0 e0       	ldi	r31, 0x00	; 0
    221e:	80 81       	ld	r24, Z
    2220:	84 60       	ori	r24, 0x04	; 4
    2222:	8c 93       	st	X, r24
    2224:	a5 e5       	ldi	r26, 0x55	; 85
    2226:	b0 e0       	ldi	r27, 0x00	; 0
    2228:	e5 e5       	ldi	r30, 0x55	; 85
    222a:	f0 e0       	ldi	r31, 0x00	; 0
    222c:	80 81       	ld	r24, Z
    222e:	87 7f       	andi	r24, 0xF7	; 247
    2230:	8c 93       	st	X, r24
    2232:	49 c0       	rjmp	.+146    	; 0x22c6 <EXTI_u8IntSetSenseControl+0x1f6>
		case FALLING_EDGE: SET_BIT(MCUCR,MCUCR_ISC11);    CLR_BIT(MCUCR,MCUCR_ISC10);    break;
    2234:	a5 e5       	ldi	r26, 0x55	; 85
    2236:	b0 e0       	ldi	r27, 0x00	; 0
    2238:	e5 e5       	ldi	r30, 0x55	; 85
    223a:	f0 e0       	ldi	r31, 0x00	; 0
    223c:	80 81       	ld	r24, Z
    223e:	88 60       	ori	r24, 0x08	; 8
    2240:	8c 93       	st	X, r24
    2242:	a5 e5       	ldi	r26, 0x55	; 85
    2244:	b0 e0       	ldi	r27, 0x00	; 0
    2246:	e5 e5       	ldi	r30, 0x55	; 85
    2248:	f0 e0       	ldi	r31, 0x00	; 0
    224a:	80 81       	ld	r24, Z
    224c:	8b 7f       	andi	r24, 0xFB	; 251
    224e:	8c 93       	st	X, r24
    2250:	3a c0       	rjmp	.+116    	; 0x22c6 <EXTI_u8IntSetSenseControl+0x1f6>
		case RISING_EDGE:  SET_BIT(MCUCR,MCUCR_ISC11);    SET_BIT(MCUCR,MCUCR_ISC10);    break;
    2252:	a5 e5       	ldi	r26, 0x55	; 85
    2254:	b0 e0       	ldi	r27, 0x00	; 0
    2256:	e5 e5       	ldi	r30, 0x55	; 85
    2258:	f0 e0       	ldi	r31, 0x00	; 0
    225a:	80 81       	ld	r24, Z
    225c:	88 60       	ori	r24, 0x08	; 8
    225e:	8c 93       	st	X, r24
    2260:	a5 e5       	ldi	r26, 0x55	; 85
    2262:	b0 e0       	ldi	r27, 0x00	; 0
    2264:	e5 e5       	ldi	r30, 0x55	; 85
    2266:	f0 e0       	ldi	r31, 0x00	; 0
    2268:	80 81       	ld	r24, Z
    226a:	84 60       	ori	r24, 0x04	; 4
    226c:	8c 93       	st	X, r24
    226e:	2b c0       	rjmp	.+86     	; 0x22c6 <EXTI_u8IntSetSenseControl+0x1f6>
		default:           Local_u8ErrorState = NOK;                                     break;
    2270:	81 e0       	ldi	r24, 0x01	; 1
    2272:	89 83       	std	Y+1, r24	; 0x01
    2274:	28 c0       	rjmp	.+80     	; 0x22c6 <EXTI_u8IntSetSenseControl+0x1f6>
		}
	}
	else if(Copy_u8Int == INT2)
    2276:	8a 81       	ldd	r24, Y+2	; 0x02
    2278:	85 30       	cpi	r24, 0x05	; 5
    227a:	19 f5       	brne	.+70     	; 0x22c2 <EXTI_u8IntSetSenseControl+0x1f2>
	{
		switch(Copy_u8Sense)
    227c:	8b 81       	ldd	r24, Y+3	; 0x03
    227e:	28 2f       	mov	r18, r24
    2280:	30 e0       	ldi	r19, 0x00	; 0
    2282:	3d 83       	std	Y+5, r19	; 0x05
    2284:	2c 83       	std	Y+4, r18	; 0x04
    2286:	8c 81       	ldd	r24, Y+4	; 0x04
    2288:	9d 81       	ldd	r25, Y+5	; 0x05
    228a:	83 30       	cpi	r24, 0x03	; 3
    228c:	91 05       	cpc	r25, r1
    228e:	31 f0       	breq	.+12     	; 0x229c <EXTI_u8IntSetSenseControl+0x1cc>
    2290:	2c 81       	ldd	r18, Y+4	; 0x04
    2292:	3d 81       	ldd	r19, Y+5	; 0x05
    2294:	24 30       	cpi	r18, 0x04	; 4
    2296:	31 05       	cpc	r19, r1
    2298:	49 f0       	breq	.+18     	; 0x22ac <EXTI_u8IntSetSenseControl+0x1dc>
    229a:	10 c0       	rjmp	.+32     	; 0x22bc <EXTI_u8IntSetSenseControl+0x1ec>
		{
		case FALLING_EDGE: CLR_BIT(MCUCSR,MCUCSR_ISC2);    break;
    229c:	a4 e5       	ldi	r26, 0x54	; 84
    229e:	b0 e0       	ldi	r27, 0x00	; 0
    22a0:	e4 e5       	ldi	r30, 0x54	; 84
    22a2:	f0 e0       	ldi	r31, 0x00	; 0
    22a4:	80 81       	ld	r24, Z
    22a6:	8f 7b       	andi	r24, 0xBF	; 191
    22a8:	8c 93       	st	X, r24
    22aa:	0d c0       	rjmp	.+26     	; 0x22c6 <EXTI_u8IntSetSenseControl+0x1f6>
		case RISING_EDGE:  SET_BIT(MCUCSR,MCUCSR_ISC2);    break;
    22ac:	a4 e5       	ldi	r26, 0x54	; 84
    22ae:	b0 e0       	ldi	r27, 0x00	; 0
    22b0:	e4 e5       	ldi	r30, 0x54	; 84
    22b2:	f0 e0       	ldi	r31, 0x00	; 0
    22b4:	80 81       	ld	r24, Z
    22b6:	80 64       	ori	r24, 0x40	; 64
    22b8:	8c 93       	st	X, r24
    22ba:	05 c0       	rjmp	.+10     	; 0x22c6 <EXTI_u8IntSetSenseControl+0x1f6>
		default:           Local_u8ErrorState = NOK;                                     break;
    22bc:	81 e0       	ldi	r24, 0x01	; 1
    22be:	89 83       	std	Y+1, r24	; 0x01
    22c0:	02 c0       	rjmp	.+4      	; 0x22c6 <EXTI_u8IntSetSenseControl+0x1f6>
		}
	}
	else
	{
		Local_u8ErrorState = NOK;
    22c2:	81 e0       	ldi	r24, 0x01	; 1
    22c4:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    22c6:	89 81       	ldd	r24, Y+1	; 0x01
}
    22c8:	29 96       	adiw	r28, 0x09	; 9
    22ca:	0f b6       	in	r0, 0x3f	; 63
    22cc:	f8 94       	cli
    22ce:	de bf       	out	0x3e, r29	; 62
    22d0:	0f be       	out	0x3f, r0	; 63
    22d2:	cd bf       	out	0x3d, r28	; 61
    22d4:	cf 91       	pop	r28
    22d6:	df 91       	pop	r29
    22d8:	08 95       	ret

000022da <EXTI_u8IntEnable>:
/*******************************************  IntEnable   ******************************************/
u8 EXTI_u8IntEnable(u8 Copy_u8Int)
{
    22da:	df 93       	push	r29
    22dc:	cf 93       	push	r28
    22de:	00 d0       	rcall	.+0      	; 0x22e0 <EXTI_u8IntEnable+0x6>
    22e0:	00 d0       	rcall	.+0      	; 0x22e2 <EXTI_u8IntEnable+0x8>
    22e2:	cd b7       	in	r28, 0x3d	; 61
    22e4:	de b7       	in	r29, 0x3e	; 62
    22e6:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    22e8:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Int)
    22ea:	8a 81       	ldd	r24, Y+2	; 0x02
    22ec:	28 2f       	mov	r18, r24
    22ee:	30 e0       	ldi	r19, 0x00	; 0
    22f0:	3c 83       	std	Y+4, r19	; 0x04
    22f2:	2b 83       	std	Y+3, r18	; 0x03
    22f4:	8b 81       	ldd	r24, Y+3	; 0x03
    22f6:	9c 81       	ldd	r25, Y+4	; 0x04
    22f8:	86 30       	cpi	r24, 0x06	; 6
    22fa:	91 05       	cpc	r25, r1
    22fc:	59 f0       	breq	.+22     	; 0x2314 <EXTI_u8IntEnable+0x3a>
    22fe:	2b 81       	ldd	r18, Y+3	; 0x03
    2300:	3c 81       	ldd	r19, Y+4	; 0x04
    2302:	27 30       	cpi	r18, 0x07	; 7
    2304:	31 05       	cpc	r19, r1
    2306:	71 f0       	breq	.+28     	; 0x2324 <EXTI_u8IntEnable+0x4a>
    2308:	8b 81       	ldd	r24, Y+3	; 0x03
    230a:	9c 81       	ldd	r25, Y+4	; 0x04
    230c:	85 30       	cpi	r24, 0x05	; 5
    230e:	91 05       	cpc	r25, r1
    2310:	89 f0       	breq	.+34     	; 0x2334 <EXTI_u8IntEnable+0x5a>
    2312:	18 c0       	rjmp	.+48     	; 0x2344 <EXTI_u8IntEnable+0x6a>
	{
	case INT0:  SET_BIT(GICR,GICR_INT0);  break;
    2314:	ab e5       	ldi	r26, 0x5B	; 91
    2316:	b0 e0       	ldi	r27, 0x00	; 0
    2318:	eb e5       	ldi	r30, 0x5B	; 91
    231a:	f0 e0       	ldi	r31, 0x00	; 0
    231c:	80 81       	ld	r24, Z
    231e:	80 64       	ori	r24, 0x40	; 64
    2320:	8c 93       	st	X, r24
    2322:	12 c0       	rjmp	.+36     	; 0x2348 <EXTI_u8IntEnable+0x6e>
	case INT1:  SET_BIT(GICR,GICR_INT1);  break;
    2324:	ab e5       	ldi	r26, 0x5B	; 91
    2326:	b0 e0       	ldi	r27, 0x00	; 0
    2328:	eb e5       	ldi	r30, 0x5B	; 91
    232a:	f0 e0       	ldi	r31, 0x00	; 0
    232c:	80 81       	ld	r24, Z
    232e:	80 68       	ori	r24, 0x80	; 128
    2330:	8c 93       	st	X, r24
    2332:	0a c0       	rjmp	.+20     	; 0x2348 <EXTI_u8IntEnable+0x6e>
	case INT2:  SET_BIT(GICR,GICR_INT2);  break;
    2334:	ab e5       	ldi	r26, 0x5B	; 91
    2336:	b0 e0       	ldi	r27, 0x00	; 0
    2338:	eb e5       	ldi	r30, 0x5B	; 91
    233a:	f0 e0       	ldi	r31, 0x00	; 0
    233c:	80 81       	ld	r24, Z
    233e:	80 62       	ori	r24, 0x20	; 32
    2340:	8c 93       	st	X, r24
    2342:	02 c0       	rjmp	.+4      	; 0x2348 <EXTI_u8IntEnable+0x6e>
	default:    Local_u8ErrorState = NOK; break;
    2344:	81 e0       	ldi	r24, 0x01	; 1
    2346:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    2348:	89 81       	ldd	r24, Y+1	; 0x01
}
    234a:	0f 90       	pop	r0
    234c:	0f 90       	pop	r0
    234e:	0f 90       	pop	r0
    2350:	0f 90       	pop	r0
    2352:	cf 91       	pop	r28
    2354:	df 91       	pop	r29
    2356:	08 95       	ret

00002358 <EXTI_u8IntDisable>:

/*******************************************  IntDisable   ******************************************/
u8 EXTI_u8IntDisable(u8 Copy_u8Int)
{
    2358:	df 93       	push	r29
    235a:	cf 93       	push	r28
    235c:	00 d0       	rcall	.+0      	; 0x235e <EXTI_u8IntDisable+0x6>
    235e:	00 d0       	rcall	.+0      	; 0x2360 <EXTI_u8IntDisable+0x8>
    2360:	cd b7       	in	r28, 0x3d	; 61
    2362:	de b7       	in	r29, 0x3e	; 62
    2364:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    2366:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Int)
    2368:	8a 81       	ldd	r24, Y+2	; 0x02
    236a:	28 2f       	mov	r18, r24
    236c:	30 e0       	ldi	r19, 0x00	; 0
    236e:	3c 83       	std	Y+4, r19	; 0x04
    2370:	2b 83       	std	Y+3, r18	; 0x03
    2372:	8b 81       	ldd	r24, Y+3	; 0x03
    2374:	9c 81       	ldd	r25, Y+4	; 0x04
    2376:	86 30       	cpi	r24, 0x06	; 6
    2378:	91 05       	cpc	r25, r1
    237a:	59 f0       	breq	.+22     	; 0x2392 <EXTI_u8IntDisable+0x3a>
    237c:	2b 81       	ldd	r18, Y+3	; 0x03
    237e:	3c 81       	ldd	r19, Y+4	; 0x04
    2380:	27 30       	cpi	r18, 0x07	; 7
    2382:	31 05       	cpc	r19, r1
    2384:	71 f0       	breq	.+28     	; 0x23a2 <EXTI_u8IntDisable+0x4a>
    2386:	8b 81       	ldd	r24, Y+3	; 0x03
    2388:	9c 81       	ldd	r25, Y+4	; 0x04
    238a:	85 30       	cpi	r24, 0x05	; 5
    238c:	91 05       	cpc	r25, r1
    238e:	89 f0       	breq	.+34     	; 0x23b2 <EXTI_u8IntDisable+0x5a>
    2390:	18 c0       	rjmp	.+48     	; 0x23c2 <EXTI_u8IntDisable+0x6a>
	{
	case INT0:  CLR_BIT(GICR,GICR_INT0);  break;
    2392:	ab e5       	ldi	r26, 0x5B	; 91
    2394:	b0 e0       	ldi	r27, 0x00	; 0
    2396:	eb e5       	ldi	r30, 0x5B	; 91
    2398:	f0 e0       	ldi	r31, 0x00	; 0
    239a:	80 81       	ld	r24, Z
    239c:	8f 7b       	andi	r24, 0xBF	; 191
    239e:	8c 93       	st	X, r24
    23a0:	12 c0       	rjmp	.+36     	; 0x23c6 <EXTI_u8IntDisable+0x6e>
	case INT1:  CLR_BIT(GICR,GICR_INT1);  break;
    23a2:	ab e5       	ldi	r26, 0x5B	; 91
    23a4:	b0 e0       	ldi	r27, 0x00	; 0
    23a6:	eb e5       	ldi	r30, 0x5B	; 91
    23a8:	f0 e0       	ldi	r31, 0x00	; 0
    23aa:	80 81       	ld	r24, Z
    23ac:	8f 77       	andi	r24, 0x7F	; 127
    23ae:	8c 93       	st	X, r24
    23b0:	0a c0       	rjmp	.+20     	; 0x23c6 <EXTI_u8IntDisable+0x6e>
	case INT2:  CLR_BIT(GICR,GICR_INT2);  break;
    23b2:	ab e5       	ldi	r26, 0x5B	; 91
    23b4:	b0 e0       	ldi	r27, 0x00	; 0
    23b6:	eb e5       	ldi	r30, 0x5B	; 91
    23b8:	f0 e0       	ldi	r31, 0x00	; 0
    23ba:	80 81       	ld	r24, Z
    23bc:	8f 7d       	andi	r24, 0xDF	; 223
    23be:	8c 93       	st	X, r24
    23c0:	02 c0       	rjmp	.+4      	; 0x23c6 <EXTI_u8IntDisable+0x6e>
	default:    Local_u8ErrorState = NOK; break;
    23c2:	81 e0       	ldi	r24, 0x01	; 1
    23c4:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    23c6:	89 81       	ldd	r24, Y+1	; 0x01
}
    23c8:	0f 90       	pop	r0
    23ca:	0f 90       	pop	r0
    23cc:	0f 90       	pop	r0
    23ce:	0f 90       	pop	r0
    23d0:	cf 91       	pop	r28
    23d2:	df 91       	pop	r29
    23d4:	08 95       	ret

000023d6 <EXTI_u8Int0SetCallBack>:
/****************************************************************************************************/
/*******************************************Call Back Function **************************************/
/****************************************************************************************************/

u8 EXTI_u8Int0SetCallBack(void(*Copy_pvInt0Func)(void))
{
    23d6:	df 93       	push	r29
    23d8:	cf 93       	push	r28
    23da:	00 d0       	rcall	.+0      	; 0x23dc <EXTI_u8Int0SetCallBack+0x6>
    23dc:	0f 92       	push	r0
    23de:	cd b7       	in	r28, 0x3d	; 61
    23e0:	de b7       	in	r29, 0x3e	; 62
    23e2:	9b 83       	std	Y+3, r25	; 0x03
    23e4:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
    23e6:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_pvInt0Func != NULL)
    23e8:	8a 81       	ldd	r24, Y+2	; 0x02
    23ea:	9b 81       	ldd	r25, Y+3	; 0x03
    23ec:	00 97       	sbiw	r24, 0x00	; 0
    23ee:	39 f0       	breq	.+14     	; 0x23fe <EXTI_u8Int0SetCallBack+0x28>
	{
		EXTI_pvInt0Func = Copy_pvInt0Func;
    23f0:	8a 81       	ldd	r24, Y+2	; 0x02
    23f2:	9b 81       	ldd	r25, Y+3	; 0x03
    23f4:	90 93 89 01 	sts	0x0189, r25
    23f8:	80 93 88 01 	sts	0x0188, r24
    23fc:	02 c0       	rjmp	.+4      	; 0x2402 <EXTI_u8Int0SetCallBack+0x2c>

	}
	else {

		Local_u8ErrorState = NULL_POINTER;
    23fe:	82 e0       	ldi	r24, 0x02	; 2
    2400:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_u8ErrorState;
    2402:	89 81       	ldd	r24, Y+1	; 0x01
}
    2404:	0f 90       	pop	r0
    2406:	0f 90       	pop	r0
    2408:	0f 90       	pop	r0
    240a:	cf 91       	pop	r28
    240c:	df 91       	pop	r29
    240e:	08 95       	ret

00002410 <EXTI_u8Int1SetCallBack>:

u8 EXTI_u8Int1SetCallBack(void(*Copy_pvInt1Func)(void))
{
    2410:	df 93       	push	r29
    2412:	cf 93       	push	r28
    2414:	00 d0       	rcall	.+0      	; 0x2416 <EXTI_u8Int1SetCallBack+0x6>
    2416:	0f 92       	push	r0
    2418:	cd b7       	in	r28, 0x3d	; 61
    241a:	de b7       	in	r29, 0x3e	; 62
    241c:	9b 83       	std	Y+3, r25	; 0x03
    241e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
    2420:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_pvInt1Func != NULL)
    2422:	8a 81       	ldd	r24, Y+2	; 0x02
    2424:	9b 81       	ldd	r25, Y+3	; 0x03
    2426:	00 97       	sbiw	r24, 0x00	; 0
    2428:	39 f0       	breq	.+14     	; 0x2438 <EXTI_u8Int1SetCallBack+0x28>
	{
		EXTI_pvInt1Func = Copy_pvInt1Func;
    242a:	8a 81       	ldd	r24, Y+2	; 0x02
    242c:	9b 81       	ldd	r25, Y+3	; 0x03
    242e:	90 93 8b 01 	sts	0x018B, r25
    2432:	80 93 8a 01 	sts	0x018A, r24
    2436:	02 c0       	rjmp	.+4      	; 0x243c <EXTI_u8Int1SetCallBack+0x2c>

	}
	else {

		Local_u8ErrorState = NULL_POINTER;
    2438:	82 e0       	ldi	r24, 0x02	; 2
    243a:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_u8ErrorState;
    243c:	89 81       	ldd	r24, Y+1	; 0x01
}
    243e:	0f 90       	pop	r0
    2440:	0f 90       	pop	r0
    2442:	0f 90       	pop	r0
    2444:	cf 91       	pop	r28
    2446:	df 91       	pop	r29
    2448:	08 95       	ret

0000244a <EXTI_u8Int2SetCallBack>:

u8 EXTI_u8Int2SetCallBack(void(*Copy_pvInt2Func)(void))
{
    244a:	df 93       	push	r29
    244c:	cf 93       	push	r28
    244e:	00 d0       	rcall	.+0      	; 0x2450 <EXTI_u8Int2SetCallBack+0x6>
    2450:	0f 92       	push	r0
    2452:	cd b7       	in	r28, 0x3d	; 61
    2454:	de b7       	in	r29, 0x3e	; 62
    2456:	9b 83       	std	Y+3, r25	; 0x03
    2458:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState =OK;
    245a:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvInt2Func != NULL)
    245c:	8a 81       	ldd	r24, Y+2	; 0x02
    245e:	9b 81       	ldd	r25, Y+3	; 0x03
    2460:	00 97       	sbiw	r24, 0x00	; 0
    2462:	39 f0       	breq	.+14     	; 0x2472 <EXTI_u8Int2SetCallBack+0x28>
	{
		EXTI_pvInt2Func = Copy_pvInt2Func;
    2464:	8a 81       	ldd	r24, Y+2	; 0x02
    2466:	9b 81       	ldd	r25, Y+3	; 0x03
    2468:	90 93 8d 01 	sts	0x018D, r25
    246c:	80 93 8c 01 	sts	0x018C, r24
    2470:	02 c0       	rjmp	.+4      	; 0x2476 <EXTI_u8Int2SetCallBack+0x2c>
	}
	else {

		Local_u8ErrorState = NULL_POINTER;
    2472:	82 e0       	ldi	r24, 0x02	; 2
    2474:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    2476:	89 81       	ldd	r24, Y+1	; 0x01
}
    2478:	0f 90       	pop	r0
    247a:	0f 90       	pop	r0
    247c:	0f 90       	pop	r0
    247e:	cf 91       	pop	r28
    2480:	df 91       	pop	r29
    2482:	08 95       	ret

00002484 <__vector_1>:
/****************************************************************************************************/
/****************************************************************************************************/
/* ISR of INT0*/
void __vector_1(void)   __attribute__((signal));
void __vector_1(void)
{
    2484:	1f 92       	push	r1
    2486:	0f 92       	push	r0
    2488:	0f b6       	in	r0, 0x3f	; 63
    248a:	0f 92       	push	r0
    248c:	11 24       	eor	r1, r1
    248e:	2f 93       	push	r18
    2490:	3f 93       	push	r19
    2492:	4f 93       	push	r20
    2494:	5f 93       	push	r21
    2496:	6f 93       	push	r22
    2498:	7f 93       	push	r23
    249a:	8f 93       	push	r24
    249c:	9f 93       	push	r25
    249e:	af 93       	push	r26
    24a0:	bf 93       	push	r27
    24a2:	ef 93       	push	r30
    24a4:	ff 93       	push	r31
    24a6:	df 93       	push	r29
    24a8:	cf 93       	push	r28
    24aa:	cd b7       	in	r28, 0x3d	; 61
    24ac:	de b7       	in	r29, 0x3e	; 62
	if (EXTI_pvInt0Func != NULL)
    24ae:	80 91 88 01 	lds	r24, 0x0188
    24b2:	90 91 89 01 	lds	r25, 0x0189
    24b6:	00 97       	sbiw	r24, 0x00	; 0
    24b8:	29 f0       	breq	.+10     	; 0x24c4 <__vector_1+0x40>
	{
		EXTI_pvInt0Func();
    24ba:	e0 91 88 01 	lds	r30, 0x0188
    24be:	f0 91 89 01 	lds	r31, 0x0189
    24c2:	09 95       	icall
	else {
		/* Do nothing*/
	}


}
    24c4:	cf 91       	pop	r28
    24c6:	df 91       	pop	r29
    24c8:	ff 91       	pop	r31
    24ca:	ef 91       	pop	r30
    24cc:	bf 91       	pop	r27
    24ce:	af 91       	pop	r26
    24d0:	9f 91       	pop	r25
    24d2:	8f 91       	pop	r24
    24d4:	7f 91       	pop	r23
    24d6:	6f 91       	pop	r22
    24d8:	5f 91       	pop	r21
    24da:	4f 91       	pop	r20
    24dc:	3f 91       	pop	r19
    24de:	2f 91       	pop	r18
    24e0:	0f 90       	pop	r0
    24e2:	0f be       	out	0x3f, r0	; 63
    24e4:	0f 90       	pop	r0
    24e6:	1f 90       	pop	r1
    24e8:	18 95       	reti

000024ea <__vector_2>:

/* ISR of INT1*/
void __vector_2(void)   __attribute__((signal));
void __vector_2(void)
{
    24ea:	1f 92       	push	r1
    24ec:	0f 92       	push	r0
    24ee:	0f b6       	in	r0, 0x3f	; 63
    24f0:	0f 92       	push	r0
    24f2:	11 24       	eor	r1, r1
    24f4:	2f 93       	push	r18
    24f6:	3f 93       	push	r19
    24f8:	4f 93       	push	r20
    24fa:	5f 93       	push	r21
    24fc:	6f 93       	push	r22
    24fe:	7f 93       	push	r23
    2500:	8f 93       	push	r24
    2502:	9f 93       	push	r25
    2504:	af 93       	push	r26
    2506:	bf 93       	push	r27
    2508:	ef 93       	push	r30
    250a:	ff 93       	push	r31
    250c:	df 93       	push	r29
    250e:	cf 93       	push	r28
    2510:	cd b7       	in	r28, 0x3d	; 61
    2512:	de b7       	in	r29, 0x3e	; 62
	if (EXTI_pvInt1Func != NULL)
    2514:	80 91 8a 01 	lds	r24, 0x018A
    2518:	90 91 8b 01 	lds	r25, 0x018B
    251c:	00 97       	sbiw	r24, 0x00	; 0
    251e:	29 f0       	breq	.+10     	; 0x252a <__vector_2+0x40>
	{
		EXTI_pvInt1Func();
    2520:	e0 91 8a 01 	lds	r30, 0x018A
    2524:	f0 91 8b 01 	lds	r31, 0x018B
    2528:	09 95       	icall
	else {
		/* Do nothing*/
	}


}
    252a:	cf 91       	pop	r28
    252c:	df 91       	pop	r29
    252e:	ff 91       	pop	r31
    2530:	ef 91       	pop	r30
    2532:	bf 91       	pop	r27
    2534:	af 91       	pop	r26
    2536:	9f 91       	pop	r25
    2538:	8f 91       	pop	r24
    253a:	7f 91       	pop	r23
    253c:	6f 91       	pop	r22
    253e:	5f 91       	pop	r21
    2540:	4f 91       	pop	r20
    2542:	3f 91       	pop	r19
    2544:	2f 91       	pop	r18
    2546:	0f 90       	pop	r0
    2548:	0f be       	out	0x3f, r0	; 63
    254a:	0f 90       	pop	r0
    254c:	1f 90       	pop	r1
    254e:	18 95       	reti

00002550 <__vector_3>:

/* ISR of INT2*/
void __vector_3(void)   __attribute__((signal));
void __vector_3(void)
{
    2550:	1f 92       	push	r1
    2552:	0f 92       	push	r0
    2554:	0f b6       	in	r0, 0x3f	; 63
    2556:	0f 92       	push	r0
    2558:	11 24       	eor	r1, r1
    255a:	2f 93       	push	r18
    255c:	3f 93       	push	r19
    255e:	4f 93       	push	r20
    2560:	5f 93       	push	r21
    2562:	6f 93       	push	r22
    2564:	7f 93       	push	r23
    2566:	8f 93       	push	r24
    2568:	9f 93       	push	r25
    256a:	af 93       	push	r26
    256c:	bf 93       	push	r27
    256e:	ef 93       	push	r30
    2570:	ff 93       	push	r31
    2572:	df 93       	push	r29
    2574:	cf 93       	push	r28
    2576:	cd b7       	in	r28, 0x3d	; 61
    2578:	de b7       	in	r29, 0x3e	; 62
	if (EXTI_pvInt2Func != NULL)
    257a:	80 91 8c 01 	lds	r24, 0x018C
    257e:	90 91 8d 01 	lds	r25, 0x018D
    2582:	00 97       	sbiw	r24, 0x00	; 0
    2584:	29 f0       	breq	.+10     	; 0x2590 <__vector_3+0x40>
	{
		EXTI_pvInt2Func();
    2586:	e0 91 8c 01 	lds	r30, 0x018C
    258a:	f0 91 8d 01 	lds	r31, 0x018D
    258e:	09 95       	icall
	else {
		/* Do nothing*/
	}


}
    2590:	cf 91       	pop	r28
    2592:	df 91       	pop	r29
    2594:	ff 91       	pop	r31
    2596:	ef 91       	pop	r30
    2598:	bf 91       	pop	r27
    259a:	af 91       	pop	r26
    259c:	9f 91       	pop	r25
    259e:	8f 91       	pop	r24
    25a0:	7f 91       	pop	r23
    25a2:	6f 91       	pop	r22
    25a4:	5f 91       	pop	r21
    25a6:	4f 91       	pop	r20
    25a8:	3f 91       	pop	r19
    25aa:	2f 91       	pop	r18
    25ac:	0f 90       	pop	r0
    25ae:	0f be       	out	0x3f, r0	; 63
    25b0:	0f 90       	pop	r0
    25b2:	1f 90       	pop	r1
    25b4:	18 95       	reti

000025b6 <GIE_VoidEnable>:

#include "GIE_interface.h"
#include "GIE_register.h"

void GIE_VoidEnable(void)
{
    25b6:	df 93       	push	r29
    25b8:	cf 93       	push	r28
    25ba:	cd b7       	in	r28, 0x3d	; 61
    25bc:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
    25be:	af e5       	ldi	r26, 0x5F	; 95
    25c0:	b0 e0       	ldi	r27, 0x00	; 0
    25c2:	ef e5       	ldi	r30, 0x5F	; 95
    25c4:	f0 e0       	ldi	r31, 0x00	; 0
    25c6:	80 81       	ld	r24, Z
    25c8:	80 68       	ori	r24, 0x80	; 128
    25ca:	8c 93       	st	X, r24
}
    25cc:	cf 91       	pop	r28
    25ce:	df 91       	pop	r29
    25d0:	08 95       	ret

000025d2 <GIE_VoidDisable>:
void GIE_VoidDisable(void)
{
    25d2:	df 93       	push	r29
    25d4:	cf 93       	push	r28
    25d6:	cd b7       	in	r28, 0x3d	; 61
    25d8:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,SREG_I);
    25da:	af e5       	ldi	r26, 0x5F	; 95
    25dc:	b0 e0       	ldi	r27, 0x00	; 0
    25de:	ef e5       	ldi	r30, 0x5F	; 95
    25e0:	f0 e0       	ldi	r31, 0x00	; 0
    25e2:	80 81       	ld	r24, Z
    25e4:	8f 77       	andi	r24, 0x7F	; 127
    25e6:	8c 93       	st	X, r24
}
    25e8:	cf 91       	pop	r28
    25ea:	df 91       	pop	r29
    25ec:	08 95       	ret

000025ee <PORT_VoidInit>:
#include "PORT_interface.h"
#include "PORT_register.h"


void PORT_VoidInit(void)
{
    25ee:	df 93       	push	r29
    25f0:	cf 93       	push	r28
    25f2:	cd b7       	in	r28, 0x3d	; 61
    25f4:	de b7       	in	r29, 0x3e	; 62
	DDRA = PORTA_DIR;
    25f6:	ea e3       	ldi	r30, 0x3A	; 58
    25f8:	f0 e0       	ldi	r31, 0x00	; 0
    25fa:	10 82       	st	Z, r1
	DDRB = PORTB_DIR;
    25fc:	e7 e3       	ldi	r30, 0x37	; 55
    25fe:	f0 e0       	ldi	r31, 0x00	; 0
    2600:	88 e0       	ldi	r24, 0x08	; 8
    2602:	80 83       	st	Z, r24
	DDRC = PORTC_DIR;
    2604:	e4 e3       	ldi	r30, 0x34	; 52
    2606:	f0 e0       	ldi	r31, 0x00	; 0
    2608:	8f ef       	ldi	r24, 0xFF	; 255
    260a:	80 83       	st	Z, r24
	DDRD = PORTD_DIR;
    260c:	e1 e3       	ldi	r30, 0x31	; 49
    260e:	f0 e0       	ldi	r31, 0x00	; 0
    2610:	10 82       	st	Z, r1
	
	PORTA = PORTA_INITIAL_VALUE;
    2612:	eb e3       	ldi	r30, 0x3B	; 59
    2614:	f0 e0       	ldi	r31, 0x00	; 0
    2616:	10 82       	st	Z, r1
	PORTB = PORTB_INITIAL_VALUE;
    2618:	e8 e3       	ldi	r30, 0x38	; 56
    261a:	f0 e0       	ldi	r31, 0x00	; 0
    261c:	10 82       	st	Z, r1
	PORTC = PORTC_INITIAL_VALUE;
    261e:	e5 e3       	ldi	r30, 0x35	; 53
    2620:	f0 e0       	ldi	r31, 0x00	; 0
    2622:	10 82       	st	Z, r1
	PORTD = PORTD_INITIAL_VALUE;
    2624:	e2 e3       	ldi	r30, 0x32	; 50
    2626:	f0 e0       	ldi	r31, 0x00	; 0
    2628:	10 82       	st	Z, r1


}
    262a:	cf 91       	pop	r28
    262c:	df 91       	pop	r29
    262e:	08 95       	ret

00002630 <TIMER0_voidInit>:
#include "TIMER_register.h"

static void (*TIMER0_pvCallBackFunc)(void) = NULL;

void TIMER0_voidInit(void)
{
    2630:	df 93       	push	r29
    2632:	cf 93       	push	r28
    2634:	cd b7       	in	r28, 0x3d	; 61
    2636:	de b7       	in	r29, 0x3e	; 62
	/* Choose fast pwm mode*/
	SET_BIT(TCCR0,TCCR0_WGM00);
    2638:	a3 e5       	ldi	r26, 0x53	; 83
    263a:	b0 e0       	ldi	r27, 0x00	; 0
    263c:	e3 e5       	ldi	r30, 0x53	; 83
    263e:	f0 e0       	ldi	r31, 0x00	; 0
    2640:	80 81       	ld	r24, Z
    2642:	80 64       	ori	r24, 0x40	; 64
    2644:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_WGM01);
    2646:	a3 e5       	ldi	r26, 0x53	; 83
    2648:	b0 e0       	ldi	r27, 0x00	; 0
    264a:	e3 e5       	ldi	r30, 0x53	; 83
    264c:	f0 e0       	ldi	r31, 0x00	; 0
    264e:	80 81       	ld	r24, Z
    2650:	88 60       	ori	r24, 0x08	; 8
    2652:	8c 93       	st	X, r24

//	/* output compare match interrupt enable */
//	SET_BIT(TIMSK,TIMSK_OCIE0);
//
	/*Set compare match value to 250*/
	OCR0 = 63;
    2654:	ec e5       	ldi	r30, 0x5C	; 92
    2656:	f0 e0       	ldi	r31, 0x00	; 0
    2658:	8f e3       	ldi	r24, 0x3F	; 63
    265a:	80 83       	st	Z, r24

	CLR_BIT(TCCR0,4);
    265c:	a3 e5       	ldi	r26, 0x53	; 83
    265e:	b0 e0       	ldi	r27, 0x00	; 0
    2660:	e3 e5       	ldi	r30, 0x53	; 83
    2662:	f0 e0       	ldi	r31, 0x00	; 0
    2664:	80 81       	ld	r24, Z
    2666:	8f 7e       	andi	r24, 0xEF	; 239
    2668:	8c 93       	st	X, r24
	SET_BIT(TCCR0,5);
    266a:	a3 e5       	ldi	r26, 0x53	; 83
    266c:	b0 e0       	ldi	r27, 0x00	; 0
    266e:	e3 e5       	ldi	r30, 0x53	; 83
    2670:	f0 e0       	ldi	r31, 0x00	; 0
    2672:	80 81       	ld	r24, Z
    2674:	80 62       	ori	r24, 0x20	; 32
    2676:	8c 93       	st	X, r24
	/*prescaller : Division by 64*/
	CLR_BIT(TCCR0,TCCR0_CS00);
    2678:	a3 e5       	ldi	r26, 0x53	; 83
    267a:	b0 e0       	ldi	r27, 0x00	; 0
    267c:	e3 e5       	ldi	r30, 0x53	; 83
    267e:	f0 e0       	ldi	r31, 0x00	; 0
    2680:	80 81       	ld	r24, Z
    2682:	8e 7f       	andi	r24, 0xFE	; 254
    2684:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_CS01);
    2686:	a3 e5       	ldi	r26, 0x53	; 83
    2688:	b0 e0       	ldi	r27, 0x00	; 0
    268a:	e3 e5       	ldi	r30, 0x53	; 83
    268c:	f0 e0       	ldi	r31, 0x00	; 0
    268e:	80 81       	ld	r24, Z
    2690:	82 60       	ori	r24, 0x02	; 2
    2692:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_CS02);
    2694:	a3 e5       	ldi	r26, 0x53	; 83
    2696:	b0 e0       	ldi	r27, 0x00	; 0
    2698:	e3 e5       	ldi	r30, 0x53	; 83
    269a:	f0 e0       	ldi	r31, 0x00	; 0
    269c:	80 81       	ld	r24, Z
    269e:	8e 7f       	andi	r24, 0xFE	; 254
    26a0:	8c 93       	st	X, r24

}
    26a2:	cf 91       	pop	r28
    26a4:	df 91       	pop	r29
    26a6:	08 95       	ret

000026a8 <TIMER0_SetComMatchValue>:

void TIMER0_SetComMatchValue(u8 Copy_u8Value)
{
    26a8:	df 93       	push	r29
    26aa:	cf 93       	push	r28
    26ac:	0f 92       	push	r0
    26ae:	cd b7       	in	r28, 0x3d	; 61
    26b0:	de b7       	in	r29, 0x3e	; 62
    26b2:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Copy_u8Value;
    26b4:	ec e5       	ldi	r30, 0x5C	; 92
    26b6:	f0 e0       	ldi	r31, 0x00	; 0
    26b8:	89 81       	ldd	r24, Y+1	; 0x01
    26ba:	80 83       	st	Z, r24
}
    26bc:	0f 90       	pop	r0
    26be:	cf 91       	pop	r28
    26c0:	df 91       	pop	r29
    26c2:	08 95       	ret

000026c4 <TIMER0_u8SetCallBack>:

u8 TIMER0_u8SetCallBack(void(*Copy_pvCallBackFunc)(void))
{
    26c4:	df 93       	push	r29
    26c6:	cf 93       	push	r28
    26c8:	00 d0       	rcall	.+0      	; 0x26ca <TIMER0_u8SetCallBack+0x6>
    26ca:	0f 92       	push	r0
    26cc:	cd b7       	in	r28, 0x3d	; 61
    26ce:	de b7       	in	r29, 0x3e	; 62
    26d0:	9b 83       	std	Y+3, r25	; 0x03
    26d2:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStatus = OK;
    26d4:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvCallBackFunc != NULL)
    26d6:	8a 81       	ldd	r24, Y+2	; 0x02
    26d8:	9b 81       	ldd	r25, Y+3	; 0x03
    26da:	00 97       	sbiw	r24, 0x00	; 0
    26dc:	39 f0       	breq	.+14     	; 0x26ec <TIMER0_u8SetCallBack+0x28>
	{
		TIMER0_pvCallBackFunc = Copy_pvCallBackFunc;
    26de:	8a 81       	ldd	r24, Y+2	; 0x02
    26e0:	9b 81       	ldd	r25, Y+3	; 0x03
    26e2:	90 93 8f 01 	sts	0x018F, r25
    26e6:	80 93 8e 01 	sts	0x018E, r24
    26ea:	02 c0       	rjmp	.+4      	; 0x26f0 <TIMER0_u8SetCallBack+0x2c>
	}
	else
	{
		Local_u8ErrorStatus = NULL_POINTER;
    26ec:	82 e0       	ldi	r24, 0x02	; 2
    26ee:	89 83       	std	Y+1, r24	; 0x01

	}


	return Local_u8ErrorStatus;
    26f0:	89 81       	ldd	r24, Y+1	; 0x01

}
    26f2:	0f 90       	pop	r0
    26f4:	0f 90       	pop	r0
    26f6:	0f 90       	pop	r0
    26f8:	cf 91       	pop	r28
    26fa:	df 91       	pop	r29
    26fc:	08 95       	ret

000026fe <TIMER1_voidInit>:
/******************************************************************************/
void TIMER1_voidInit(void)
{
    26fe:	df 93       	push	r29
    2700:	cf 93       	push	r28
    2702:	cd b7       	in	r28, 0x3d	; 61
    2704:	de b7       	in	r29, 0x3e	; 62
//	CLR_BIT(TCCR1A,TCCR1A_WGM10);
//	SET_BIT(TCCR1A,TCCR1A_WGM11);
//	SET_BIT(TCCR1B,TCCR1B_WGM12);
//	SET_BIT(TCCR1B,TCCR1B_WGM13);
	/* Setting prescaller */
	TCCR1B &= PRESCALER_MASK;
    2706:	ae e4       	ldi	r26, 0x4E	; 78
    2708:	b0 e0       	ldi	r27, 0x00	; 0
    270a:	ee e4       	ldi	r30, 0x4E	; 78
    270c:	f0 e0       	ldi	r31, 0x00	; 0
    270e:	80 81       	ld	r24, Z
    2710:	88 7f       	andi	r24, 0xF8	; 248
    2712:	8c 93       	st	X, r24
	TCCR1B |= DIVIDE_BY_8;
    2714:	ae e4       	ldi	r26, 0x4E	; 78
    2716:	b0 e0       	ldi	r27, 0x00	; 0
    2718:	ee e4       	ldi	r30, 0x4E	; 78
    271a:	f0 e0       	ldi	r31, 0x00	; 0
    271c:	80 81       	ld	r24, Z
    271e:	82 60       	ori	r24, 0x02	; 2
    2720:	8c 93       	st	X, r24


}
    2722:	cf 91       	pop	r28
    2724:	df 91       	pop	r29
    2726:	08 95       	ret

00002728 <TIMER1_VoidSetTimerValue>:

void TIMER1_VoidSetTimerValue(u16 Copy_u16Value)
{
    2728:	df 93       	push	r29
    272a:	cf 93       	push	r28
    272c:	00 d0       	rcall	.+0      	; 0x272e <TIMER1_VoidSetTimerValue+0x6>
    272e:	cd b7       	in	r28, 0x3d	; 61
    2730:	de b7       	in	r29, 0x3e	; 62
    2732:	9a 83       	std	Y+2, r25	; 0x02
    2734:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = Copy_u16Value;
    2736:	ec e4       	ldi	r30, 0x4C	; 76
    2738:	f0 e0       	ldi	r31, 0x00	; 0
    273a:	89 81       	ldd	r24, Y+1	; 0x01
    273c:	9a 81       	ldd	r25, Y+2	; 0x02
    273e:	91 83       	std	Z+1, r25	; 0x01
    2740:	80 83       	st	Z, r24
}
    2742:	0f 90       	pop	r0
    2744:	0f 90       	pop	r0
    2746:	cf 91       	pop	r28
    2748:	df 91       	pop	r29
    274a:	08 95       	ret

0000274c <Timer1_u16ReadTimerValue>:

u16 Timer1_u16ReadTimerValue(void)
{
    274c:	df 93       	push	r29
    274e:	cf 93       	push	r28
    2750:	cd b7       	in	r28, 0x3d	; 61
    2752:	de b7       	in	r29, 0x3e	; 62
	return TCNT1;
    2754:	ec e4       	ldi	r30, 0x4C	; 76
    2756:	f0 e0       	ldi	r31, 0x00	; 0
    2758:	80 81       	ld	r24, Z
    275a:	91 81       	ldd	r25, Z+1	; 0x01
}
    275c:	cf 91       	pop	r28
    275e:	df 91       	pop	r29
    2760:	08 95       	ret

00002762 <TIMER1_voidSetICR>:
void TIMER1_voidSetICR(u16 Copt_u16TOP)
{
    2762:	df 93       	push	r29
    2764:	cf 93       	push	r28
    2766:	00 d0       	rcall	.+0      	; 0x2768 <TIMER1_voidSetICR+0x6>
    2768:	cd b7       	in	r28, 0x3d	; 61
    276a:	de b7       	in	r29, 0x3e	; 62
    276c:	9a 83       	std	Y+2, r25	; 0x02
    276e:	89 83       	std	Y+1, r24	; 0x01
	ICR1 = Copt_u16TOP;
    2770:	e6 e4       	ldi	r30, 0x46	; 70
    2772:	f0 e0       	ldi	r31, 0x00	; 0
    2774:	89 81       	ldd	r24, Y+1	; 0x01
    2776:	9a 81       	ldd	r25, Y+2	; 0x02
    2778:	91 83       	std	Z+1, r25	; 0x01
    277a:	80 83       	st	Z, r24

}
    277c:	0f 90       	pop	r0
    277e:	0f 90       	pop	r0
    2780:	cf 91       	pop	r28
    2782:	df 91       	pop	r29
    2784:	08 95       	ret

00002786 <TIMER1_SetChannelAComMatchValue>:

void TIMER1_SetChannelAComMatchValue(u16 Copy_u16CompareMatch)
{
    2786:	df 93       	push	r29
    2788:	cf 93       	push	r28
    278a:	00 d0       	rcall	.+0      	; 0x278c <TIMER1_SetChannelAComMatchValue+0x6>
    278c:	cd b7       	in	r28, 0x3d	; 61
    278e:	de b7       	in	r29, 0x3e	; 62
    2790:	9a 83       	std	Y+2, r25	; 0x02
    2792:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = Copy_u16CompareMatch;
    2794:	ea e4       	ldi	r30, 0x4A	; 74
    2796:	f0 e0       	ldi	r31, 0x00	; 0
    2798:	89 81       	ldd	r24, Y+1	; 0x01
    279a:	9a 81       	ldd	r25, Y+2	; 0x02
    279c:	91 83       	std	Z+1, r25	; 0x01
    279e:	80 83       	st	Z, r24

}
    27a0:	0f 90       	pop	r0
    27a2:	0f 90       	pop	r0
    27a4:	cf 91       	pop	r28
    27a6:	df 91       	pop	r29
    27a8:	08 95       	ret

000027aa <__vector_10>:

/*****************************************************************************/

void __vector_10 (void) __attribute__((signal));
void __vector_10 (void)
{
    27aa:	1f 92       	push	r1
    27ac:	0f 92       	push	r0
    27ae:	0f b6       	in	r0, 0x3f	; 63
    27b0:	0f 92       	push	r0
    27b2:	11 24       	eor	r1, r1
    27b4:	2f 93       	push	r18
    27b6:	3f 93       	push	r19
    27b8:	4f 93       	push	r20
    27ba:	5f 93       	push	r21
    27bc:	6f 93       	push	r22
    27be:	7f 93       	push	r23
    27c0:	8f 93       	push	r24
    27c2:	9f 93       	push	r25
    27c4:	af 93       	push	r26
    27c6:	bf 93       	push	r27
    27c8:	ef 93       	push	r30
    27ca:	ff 93       	push	r31
    27cc:	df 93       	push	r29
    27ce:	cf 93       	push	r28
    27d0:	cd b7       	in	r28, 0x3d	; 61
    27d2:	de b7       	in	r29, 0x3e	; 62
	if(TIMER0_pvCallBackFunc != NULL)
    27d4:	80 91 8e 01 	lds	r24, 0x018E
    27d8:	90 91 8f 01 	lds	r25, 0x018F
    27dc:	00 97       	sbiw	r24, 0x00	; 0
    27de:	29 f0       	breq	.+10     	; 0x27ea <__vector_10+0x40>
	{
		TIMER0_pvCallBackFunc();
    27e0:	e0 91 8e 01 	lds	r30, 0x018E
    27e4:	f0 91 8f 01 	lds	r31, 0x018F
    27e8:	09 95       	icall
	}
}
    27ea:	cf 91       	pop	r28
    27ec:	df 91       	pop	r29
    27ee:	ff 91       	pop	r31
    27f0:	ef 91       	pop	r30
    27f2:	bf 91       	pop	r27
    27f4:	af 91       	pop	r26
    27f6:	9f 91       	pop	r25
    27f8:	8f 91       	pop	r24
    27fa:	7f 91       	pop	r23
    27fc:	6f 91       	pop	r22
    27fe:	5f 91       	pop	r21
    2800:	4f 91       	pop	r20
    2802:	3f 91       	pop	r19
    2804:	2f 91       	pop	r18
    2806:	0f 90       	pop	r0
    2808:	0f be       	out	0x3f, r0	; 63
    280a:	0f 90       	pop	r0
    280c:	1f 90       	pop	r1
    280e:	18 95       	reti

00002810 <main>:
static u16 OnTicks = 0;
void ICU_SW (void);

/************************ Main Prog *******************************/
void main(void)
{
    2810:	df 93       	push	r29
    2812:	cf 93       	push	r28
    2814:	cd b7       	in	r28, 0x3d	; 61
    2816:	de b7       	in	r29, 0x3e	; 62
	/****************** Local Variables **************************/



	/******************** Driver Init ***************************/
	PORT_VoidInit();
    2818:	0e 94 f7 12 	call	0x25ee	; 0x25ee <PORT_VoidInit>
	CLCD_voidInit();
    281c:	0e 94 4b 0b 	call	0x1696	; 0x1696 <CLCD_voidInit>

	EXTI_u8Int0SetCallBack(&ICU_SW);
    2820:	83 e6       	ldi	r24, 0x63	; 99
    2822:	94 e1       	ldi	r25, 0x14	; 20
    2824:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <EXTI_u8Int0SetCallBack>
	EXTI_VoidInt0Init();
    2828:	0e 94 1b 10 	call	0x2036	; 0x2036 <EXTI_VoidInt0Init>

	TIMER1_voidInit();
    282c:	0e 94 7f 13 	call	0x26fe	; 0x26fe <TIMER1_voidInit>
	TIMER0_voidInit();
    2830:	0e 94 18 13 	call	0x2630	; 0x2630 <TIMER0_voidInit>

	GIE_VoidEnable();
    2834:	0e 94 db 12 	call	0x25b6	; 0x25b6 <GIE_VoidEnable>
	/********************            *****************************/

	while(1)
	{
		/* Wait until period ticks */
		while ((PeriodTicks == 0) && (OnTicks == 0));
    2838:	80 91 90 01 	lds	r24, 0x0190
    283c:	90 91 91 01 	lds	r25, 0x0191
    2840:	00 97       	sbiw	r24, 0x00	; 0
    2842:	31 f4       	brne	.+12     	; 0x2850 <main+0x40>
    2844:	80 91 92 01 	lds	r24, 0x0192
    2848:	90 91 93 01 	lds	r25, 0x0193
    284c:	00 97       	sbiw	r24, 0x00	; 0
    284e:	a1 f3       	breq	.-24     	; 0x2838 <main+0x28>
		CLCD_voidGoToXY(0,0);
    2850:	80 e0       	ldi	r24, 0x00	; 0
    2852:	60 e0       	ldi	r22, 0x00	; 0
    2854:	0e 94 0e 0c 	call	0x181c	; 0x181c <CLCD_voidGoToXY>

		CLCD_voidSendString("Hello Hassan");
    2858:	80 e6       	ldi	r24, 0x60	; 96
    285a:	90 e0       	ldi	r25, 0x00	; 0
    285c:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <CLCD_voidSendString>
		CLCD_voidGoToXY(2,0);
    2860:	82 e0       	ldi	r24, 0x02	; 2
    2862:	60 e0       	ldi	r22, 0x00	; 0
    2864:	0e 94 0e 0c 	call	0x181c	; 0x181c <CLCD_voidGoToXY>
		CLCD_voidSendString("Period = ");
    2868:	8d e6       	ldi	r24, 0x6D	; 109
    286a:	90 e0       	ldi	r25, 0x00	; 0
    286c:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <CLCD_voidSendString>
		CLCD_VoidWriteNumber(PeriodTicks);
    2870:	80 91 90 01 	lds	r24, 0x0190
    2874:	90 91 91 01 	lds	r25, 0x0191
    2878:	cc 01       	movw	r24, r24
    287a:	a0 e0       	ldi	r26, 0x00	; 0
    287c:	b0 e0       	ldi	r27, 0x00	; 0
    287e:	bc 01       	movw	r22, r24
    2880:	cd 01       	movw	r24, r26
    2882:	0e 94 8b 04 	call	0x916	; 0x916 <__floatunsisf>
    2886:	dc 01       	movw	r26, r24
    2888:	cb 01       	movw	r24, r22
    288a:	bc 01       	movw	r22, r24
    288c:	cd 01       	movw	r24, r26
    288e:	0e 94 82 0c 	call	0x1904	; 0x1904 <CLCD_VoidWriteNumber>
		CLCD_voidGoToXY(3,0);
    2892:	83 e0       	ldi	r24, 0x03	; 3
    2894:	60 e0       	ldi	r22, 0x00	; 0
    2896:	0e 94 0e 0c 	call	0x181c	; 0x181c <CLCD_voidGoToXY>
		CLCD_voidSendString("ON  = ");
    289a:	87 e7       	ldi	r24, 0x77	; 119
    289c:	90 e0       	ldi	r25, 0x00	; 0
    289e:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <CLCD_voidSendString>
		CLCD_VoidWriteNumber(OnTicks);
    28a2:	80 91 92 01 	lds	r24, 0x0192
    28a6:	90 91 93 01 	lds	r25, 0x0193
    28aa:	cc 01       	movw	r24, r24
    28ac:	a0 e0       	ldi	r26, 0x00	; 0
    28ae:	b0 e0       	ldi	r27, 0x00	; 0
    28b0:	bc 01       	movw	r22, r24
    28b2:	cd 01       	movw	r24, r26
    28b4:	0e 94 8b 04 	call	0x916	; 0x916 <__floatunsisf>
    28b8:	dc 01       	movw	r26, r24
    28ba:	cb 01       	movw	r24, r22
    28bc:	bc 01       	movw	r22, r24
    28be:	cd 01       	movw	r24, r26
    28c0:	0e 94 82 0c 	call	0x1904	; 0x1904 <CLCD_VoidWriteNumber>
    28c4:	b9 cf       	rjmp	.-142    	; 0x2838 <main+0x28>

000028c6 <ICU_SW>:

}

/******************************* ISR **********************************/
void ICU_SW (void)
{
    28c6:	df 93       	push	r29
    28c8:	cf 93       	push	r28
    28ca:	cd b7       	in	r28, 0x3d	; 61
    28cc:	de b7       	in	r29, 0x3e	; 62
	static u8 Local_u8Counter=0;
	Local_u8Counter++;
    28ce:	80 91 94 01 	lds	r24, 0x0194
    28d2:	8f 5f       	subi	r24, 0xFF	; 255
    28d4:	80 93 94 01 	sts	0x0194, r24

	if(Local_u8Counter == 1)
    28d8:	80 91 94 01 	lds	r24, 0x0194
    28dc:	81 30       	cpi	r24, 0x01	; 1
    28de:	29 f4       	brne	.+10     	; 0x28ea <ICU_SW+0x24>
	{
		/* First Rising Edge */
		TIMER1_VoidSetTimerValue(0);
    28e0:	80 e0       	ldi	r24, 0x00	; 0
    28e2:	90 e0       	ldi	r25, 0x00	; 0
    28e4:	0e 94 94 13 	call	0x2728	; 0x2728 <TIMER1_VoidSetTimerValue>
    28e8:	2c c0       	rjmp	.+88     	; 0x2942 <ICU_SW+0x7c>
	}
	else if (Local_u8Counter == 2)
    28ea:	80 91 94 01 	lds	r24, 0x0194
    28ee:	82 30       	cpi	r24, 0x02	; 2
    28f0:	59 f4       	brne	.+22     	; 0x2908 <ICU_SW+0x42>
	{
		/* Second rising edge */
		PeriodTicks = Timer1_u16ReadTimerValue();
    28f2:	0e 94 a6 13 	call	0x274c	; 0x274c <Timer1_u16ReadTimerValue>
    28f6:	90 93 91 01 	sts	0x0191, r25
    28fa:	80 93 90 01 	sts	0x0190, r24
		/* Change Trigger to failing edge */
		EXTI_u8IntSetSenseControl(INT0,FALLING_EDGE);
    28fe:	86 e0       	ldi	r24, 0x06	; 6
    2900:	63 e0       	ldi	r22, 0x03	; 3
    2902:	0e 94 68 10 	call	0x20d0	; 0x20d0 <EXTI_u8IntSetSenseControl>
    2906:	1d c0       	rjmp	.+58     	; 0x2942 <ICU_SW+0x7c>
	}
	else if(Local_u8Counter == 3)
    2908:	80 91 94 01 	lds	r24, 0x0194
    290c:	83 30       	cpi	r24, 0x03	; 3
    290e:	c9 f4       	brne	.+50     	; 0x2942 <ICU_SW+0x7c>
	{
		/* Timer reading now is period ticks + on ticks */
		OnTicks = Timer1_u16ReadTimerValue();
    2910:	0e 94 a6 13 	call	0x274c	; 0x274c <Timer1_u16ReadTimerValue>
    2914:	90 93 93 01 	sts	0x0193, r25
    2918:	80 93 92 01 	sts	0x0192, r24
		OnTicks -= PeriodTicks;
    291c:	20 91 92 01 	lds	r18, 0x0192
    2920:	30 91 93 01 	lds	r19, 0x0193
    2924:	80 91 90 01 	lds	r24, 0x0190
    2928:	90 91 91 01 	lds	r25, 0x0191
    292c:	a9 01       	movw	r20, r18
    292e:	48 1b       	sub	r20, r24
    2930:	59 0b       	sbc	r21, r25
    2932:	ca 01       	movw	r24, r20
    2934:	90 93 93 01 	sts	0x0193, r25
    2938:	80 93 92 01 	sts	0x0192, r24

		/* Disable INT0 interrupt*/
		EXTI_u8IntDisable(INT0);
    293c:	86 e0       	ldi	r24, 0x06	; 6
    293e:	0e 94 ac 11 	call	0x2358	; 0x2358 <EXTI_u8IntDisable>
	}
}
    2942:	cf 91       	pop	r28
    2944:	df 91       	pop	r29
    2946:	08 95       	ret

00002948 <__divmodsi4>:
    2948:	97 fb       	bst	r25, 7
    294a:	09 2e       	mov	r0, r25
    294c:	05 26       	eor	r0, r21
    294e:	0e d0       	rcall	.+28     	; 0x296c <__divmodsi4_neg1>
    2950:	57 fd       	sbrc	r21, 7
    2952:	04 d0       	rcall	.+8      	; 0x295c <__divmodsi4_neg2>
    2954:	14 d0       	rcall	.+40     	; 0x297e <__udivmodsi4>
    2956:	0a d0       	rcall	.+20     	; 0x296c <__divmodsi4_neg1>
    2958:	00 1c       	adc	r0, r0
    295a:	38 f4       	brcc	.+14     	; 0x296a <__divmodsi4_exit>

0000295c <__divmodsi4_neg2>:
    295c:	50 95       	com	r21
    295e:	40 95       	com	r20
    2960:	30 95       	com	r19
    2962:	21 95       	neg	r18
    2964:	3f 4f       	sbci	r19, 0xFF	; 255
    2966:	4f 4f       	sbci	r20, 0xFF	; 255
    2968:	5f 4f       	sbci	r21, 0xFF	; 255

0000296a <__divmodsi4_exit>:
    296a:	08 95       	ret

0000296c <__divmodsi4_neg1>:
    296c:	f6 f7       	brtc	.-4      	; 0x296a <__divmodsi4_exit>
    296e:	90 95       	com	r25
    2970:	80 95       	com	r24
    2972:	70 95       	com	r23
    2974:	61 95       	neg	r22
    2976:	7f 4f       	sbci	r23, 0xFF	; 255
    2978:	8f 4f       	sbci	r24, 0xFF	; 255
    297a:	9f 4f       	sbci	r25, 0xFF	; 255
    297c:	08 95       	ret

0000297e <__udivmodsi4>:
    297e:	a1 e2       	ldi	r26, 0x21	; 33
    2980:	1a 2e       	mov	r1, r26
    2982:	aa 1b       	sub	r26, r26
    2984:	bb 1b       	sub	r27, r27
    2986:	fd 01       	movw	r30, r26
    2988:	0d c0       	rjmp	.+26     	; 0x29a4 <__udivmodsi4_ep>

0000298a <__udivmodsi4_loop>:
    298a:	aa 1f       	adc	r26, r26
    298c:	bb 1f       	adc	r27, r27
    298e:	ee 1f       	adc	r30, r30
    2990:	ff 1f       	adc	r31, r31
    2992:	a2 17       	cp	r26, r18
    2994:	b3 07       	cpc	r27, r19
    2996:	e4 07       	cpc	r30, r20
    2998:	f5 07       	cpc	r31, r21
    299a:	20 f0       	brcs	.+8      	; 0x29a4 <__udivmodsi4_ep>
    299c:	a2 1b       	sub	r26, r18
    299e:	b3 0b       	sbc	r27, r19
    29a0:	e4 0b       	sbc	r30, r20
    29a2:	f5 0b       	sbc	r31, r21

000029a4 <__udivmodsi4_ep>:
    29a4:	66 1f       	adc	r22, r22
    29a6:	77 1f       	adc	r23, r23
    29a8:	88 1f       	adc	r24, r24
    29aa:	99 1f       	adc	r25, r25
    29ac:	1a 94       	dec	r1
    29ae:	69 f7       	brne	.-38     	; 0x298a <__udivmodsi4_loop>
    29b0:	60 95       	com	r22
    29b2:	70 95       	com	r23
    29b4:	80 95       	com	r24
    29b6:	90 95       	com	r25
    29b8:	9b 01       	movw	r18, r22
    29ba:	ac 01       	movw	r20, r24
    29bc:	bd 01       	movw	r22, r26
    29be:	cf 01       	movw	r24, r30
    29c0:	08 95       	ret

000029c2 <__prologue_saves__>:
    29c2:	2f 92       	push	r2
    29c4:	3f 92       	push	r3
    29c6:	4f 92       	push	r4
    29c8:	5f 92       	push	r5
    29ca:	6f 92       	push	r6
    29cc:	7f 92       	push	r7
    29ce:	8f 92       	push	r8
    29d0:	9f 92       	push	r9
    29d2:	af 92       	push	r10
    29d4:	bf 92       	push	r11
    29d6:	cf 92       	push	r12
    29d8:	df 92       	push	r13
    29da:	ef 92       	push	r14
    29dc:	ff 92       	push	r15
    29de:	0f 93       	push	r16
    29e0:	1f 93       	push	r17
    29e2:	cf 93       	push	r28
    29e4:	df 93       	push	r29
    29e6:	cd b7       	in	r28, 0x3d	; 61
    29e8:	de b7       	in	r29, 0x3e	; 62
    29ea:	ca 1b       	sub	r28, r26
    29ec:	db 0b       	sbc	r29, r27
    29ee:	0f b6       	in	r0, 0x3f	; 63
    29f0:	f8 94       	cli
    29f2:	de bf       	out	0x3e, r29	; 62
    29f4:	0f be       	out	0x3f, r0	; 63
    29f6:	cd bf       	out	0x3d, r28	; 61
    29f8:	09 94       	ijmp

000029fa <__epilogue_restores__>:
    29fa:	2a 88       	ldd	r2, Y+18	; 0x12
    29fc:	39 88       	ldd	r3, Y+17	; 0x11
    29fe:	48 88       	ldd	r4, Y+16	; 0x10
    2a00:	5f 84       	ldd	r5, Y+15	; 0x0f
    2a02:	6e 84       	ldd	r6, Y+14	; 0x0e
    2a04:	7d 84       	ldd	r7, Y+13	; 0x0d
    2a06:	8c 84       	ldd	r8, Y+12	; 0x0c
    2a08:	9b 84       	ldd	r9, Y+11	; 0x0b
    2a0a:	aa 84       	ldd	r10, Y+10	; 0x0a
    2a0c:	b9 84       	ldd	r11, Y+9	; 0x09
    2a0e:	c8 84       	ldd	r12, Y+8	; 0x08
    2a10:	df 80       	ldd	r13, Y+7	; 0x07
    2a12:	ee 80       	ldd	r14, Y+6	; 0x06
    2a14:	fd 80       	ldd	r15, Y+5	; 0x05
    2a16:	0c 81       	ldd	r16, Y+4	; 0x04
    2a18:	1b 81       	ldd	r17, Y+3	; 0x03
    2a1a:	aa 81       	ldd	r26, Y+2	; 0x02
    2a1c:	b9 81       	ldd	r27, Y+1	; 0x01
    2a1e:	ce 0f       	add	r28, r30
    2a20:	d1 1d       	adc	r29, r1
    2a22:	0f b6       	in	r0, 0x3f	; 63
    2a24:	f8 94       	cli
    2a26:	de bf       	out	0x3e, r29	; 62
    2a28:	0f be       	out	0x3f, r0	; 63
    2a2a:	cd bf       	out	0x3d, r28	; 61
    2a2c:	ed 01       	movw	r28, r26
    2a2e:	08 95       	ret

00002a30 <_exit>:
    2a30:	f8 94       	cli

00002a32 <__stop_program>:
    2a32:	ff cf       	rjmp	.-2      	; 0x2a32 <__stop_program>
