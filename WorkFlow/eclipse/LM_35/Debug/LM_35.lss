
LM_35.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002498  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000114  00800060  00002498  0000250c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001cb0  00000000  00000000  00002620  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000d76  00000000  00000000  000042d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001c0  00000000  00000000  00005046  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000213  00000000  00000000  00005206  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002495  00000000  00000000  00005419  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001412  00000000  00000000  000078ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001209  00000000  00000000  00008cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e0  00000000  00000000  00009ecc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002da  00000000  00000000  0000a0ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000996  00000000  00000000  0000a386  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000ad1c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e9       	ldi	r30, 0x98	; 152
      68:	f4 e2       	ldi	r31, 0x24	; 36
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 37       	cpi	r26, 0x74	; 116
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 d6 10 	call	0x21ac	; 0x21ac <main>
      7a:	0c 94 4a 12 	jmp	0x2494	; 0x2494 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 2f 04 	call	0x85e	; 0x85e <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 2f 04 	call	0x85e	; 0x85e <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 13 12 	jmp	0x2426	; 0x2426 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	ab e6       	ldi	r26, 0x6B	; 107
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 2f 12 	jmp	0x245e	; 0x245e <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 1f 12 	jmp	0x243e	; 0x243e <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 20 06 	call	0xc40	; 0xc40 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 20 06 	call	0xc40	; 0xc40 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 4b 05 	call	0xa96	; 0xa96 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 3b 12 	jmp	0x2476	; 0x2476 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 1f 12 	jmp	0x243e	; 0x243e <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 20 06 	call	0xc40	; 0xc40 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 20 06 	call	0xc40	; 0xc40 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 4b 05 	call	0xa96	; 0xa96 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 3b 12 	jmp	0x2476	; 0x2476 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 13 12 	jmp	0x2426	; 0x2426 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 20 06 	call	0xc40	; 0xc40 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 20 06 	call	0xc40	; 0xc40 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8b e6       	ldi	r24, 0x6B	; 107
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 4b 05 	call	0xa96	; 0xa96 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 2f 12 	jmp	0x245e	; 0x245e <__epilogue_restores__>

00000622 <__eqsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 1f 12 	jmp	0x243e	; 0x243e <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 20 06 	call	0xc40	; 0xc40 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 20 06 	call	0xc40	; 0xc40 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__eqsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__eqsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 98 06 	call	0xd30	; 0xd30 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__eqsf2+0x58>
     678:	81 e0       	ldi	r24, 0x01	; 1
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 3b 12 	jmp	0x2476	; 0x2476 <__epilogue_restores__+0x18>

00000682 <__gtsf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 1f 12 	jmp	0x243e	; 0x243e <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 20 06 	call	0xc40	; 0xc40 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 20 06 	call	0xc40	; 0xc40 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gtsf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gtsf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 98 06 	call	0xd30	; 0xd30 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gtsf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 3b 12 	jmp	0x2476	; 0x2476 <__epilogue_restores__+0x18>

000006e2 <__gesf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 1f 12 	jmp	0x243e	; 0x243e <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 20 06 	call	0xc40	; 0xc40 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 20 06 	call	0xc40	; 0xc40 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__gesf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__gesf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 98 06 	call	0xd30	; 0xd30 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__gesf2+0x58>
     738:	8f ef       	ldi	r24, 0xFF	; 255
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 3b 12 	jmp	0x2476	; 0x2476 <__epilogue_restores__+0x18>

00000742 <__ltsf2>:
     742:	a8 e1       	ldi	r26, 0x18	; 24
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 1f 12 	jmp	0x243e	; 0x243e <__prologue_saves__+0x18>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	2d 83       	std	Y+5, r18	; 0x05
     758:	3e 83       	std	Y+6, r19	; 0x06
     75a:	4f 83       	std	Y+7, r20	; 0x07
     75c:	58 87       	std	Y+8, r21	; 0x08
     75e:	89 e0       	ldi	r24, 0x09	; 9
     760:	e8 2e       	mov	r14, r24
     762:	f1 2c       	mov	r15, r1
     764:	ec 0e       	add	r14, r28
     766:	fd 1e       	adc	r15, r29
     768:	ce 01       	movw	r24, r28
     76a:	01 96       	adiw	r24, 0x01	; 1
     76c:	b7 01       	movw	r22, r14
     76e:	0e 94 20 06 	call	0xc40	; 0xc40 <__unpack_f>
     772:	8e 01       	movw	r16, r28
     774:	0f 5e       	subi	r16, 0xEF	; 239
     776:	1f 4f       	sbci	r17, 0xFF	; 255
     778:	ce 01       	movw	r24, r28
     77a:	05 96       	adiw	r24, 0x05	; 5
     77c:	b8 01       	movw	r22, r16
     77e:	0e 94 20 06 	call	0xc40	; 0xc40 <__unpack_f>
     782:	89 85       	ldd	r24, Y+9	; 0x09
     784:	82 30       	cpi	r24, 0x02	; 2
     786:	40 f0       	brcs	.+16     	; 0x798 <__ltsf2+0x56>
     788:	89 89       	ldd	r24, Y+17	; 0x11
     78a:	82 30       	cpi	r24, 0x02	; 2
     78c:	28 f0       	brcs	.+10     	; 0x798 <__ltsf2+0x56>
     78e:	c7 01       	movw	r24, r14
     790:	b8 01       	movw	r22, r16
     792:	0e 94 98 06 	call	0xd30	; 0xd30 <__fpcmp_parts_f>
     796:	01 c0       	rjmp	.+2      	; 0x79a <__ltsf2+0x58>
     798:	81 e0       	ldi	r24, 0x01	; 1
     79a:	68 96       	adiw	r28, 0x18	; 24
     79c:	e6 e0       	ldi	r30, 0x06	; 6
     79e:	0c 94 3b 12 	jmp	0x2476	; 0x2476 <__epilogue_restores__+0x18>

000007a2 <__floatsisf>:
     7a2:	a8 e0       	ldi	r26, 0x08	; 8
     7a4:	b0 e0       	ldi	r27, 0x00	; 0
     7a6:	e7 ed       	ldi	r30, 0xD7	; 215
     7a8:	f3 e0       	ldi	r31, 0x03	; 3
     7aa:	0c 94 1c 12 	jmp	0x2438	; 0x2438 <__prologue_saves__+0x12>
     7ae:	9b 01       	movw	r18, r22
     7b0:	ac 01       	movw	r20, r24
     7b2:	83 e0       	ldi	r24, 0x03	; 3
     7b4:	89 83       	std	Y+1, r24	; 0x01
     7b6:	da 01       	movw	r26, r20
     7b8:	c9 01       	movw	r24, r18
     7ba:	88 27       	eor	r24, r24
     7bc:	b7 fd       	sbrc	r27, 7
     7be:	83 95       	inc	r24
     7c0:	99 27       	eor	r25, r25
     7c2:	aa 27       	eor	r26, r26
     7c4:	bb 27       	eor	r27, r27
     7c6:	b8 2e       	mov	r11, r24
     7c8:	21 15       	cp	r18, r1
     7ca:	31 05       	cpc	r19, r1
     7cc:	41 05       	cpc	r20, r1
     7ce:	51 05       	cpc	r21, r1
     7d0:	19 f4       	brne	.+6      	; 0x7d8 <__floatsisf+0x36>
     7d2:	82 e0       	ldi	r24, 0x02	; 2
     7d4:	89 83       	std	Y+1, r24	; 0x01
     7d6:	3a c0       	rjmp	.+116    	; 0x84c <__floatsisf+0xaa>
     7d8:	88 23       	and	r24, r24
     7da:	a9 f0       	breq	.+42     	; 0x806 <__floatsisf+0x64>
     7dc:	20 30       	cpi	r18, 0x00	; 0
     7de:	80 e0       	ldi	r24, 0x00	; 0
     7e0:	38 07       	cpc	r19, r24
     7e2:	80 e0       	ldi	r24, 0x00	; 0
     7e4:	48 07       	cpc	r20, r24
     7e6:	80 e8       	ldi	r24, 0x80	; 128
     7e8:	58 07       	cpc	r21, r24
     7ea:	29 f4       	brne	.+10     	; 0x7f6 <__floatsisf+0x54>
     7ec:	60 e0       	ldi	r22, 0x00	; 0
     7ee:	70 e0       	ldi	r23, 0x00	; 0
     7f0:	80 e0       	ldi	r24, 0x00	; 0
     7f2:	9f ec       	ldi	r25, 0xCF	; 207
     7f4:	30 c0       	rjmp	.+96     	; 0x856 <__floatsisf+0xb4>
     7f6:	ee 24       	eor	r14, r14
     7f8:	ff 24       	eor	r15, r15
     7fa:	87 01       	movw	r16, r14
     7fc:	e2 1a       	sub	r14, r18
     7fe:	f3 0a       	sbc	r15, r19
     800:	04 0b       	sbc	r16, r20
     802:	15 0b       	sbc	r17, r21
     804:	02 c0       	rjmp	.+4      	; 0x80a <__floatsisf+0x68>
     806:	79 01       	movw	r14, r18
     808:	8a 01       	movw	r16, r20
     80a:	8e e1       	ldi	r24, 0x1E	; 30
     80c:	c8 2e       	mov	r12, r24
     80e:	d1 2c       	mov	r13, r1
     810:	dc 82       	std	Y+4, r13	; 0x04
     812:	cb 82       	std	Y+3, r12	; 0x03
     814:	ed 82       	std	Y+5, r14	; 0x05
     816:	fe 82       	std	Y+6, r15	; 0x06
     818:	0f 83       	std	Y+7, r16	; 0x07
     81a:	18 87       	std	Y+8, r17	; 0x08
     81c:	c8 01       	movw	r24, r16
     81e:	b7 01       	movw	r22, r14
     820:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <__clzsi2>
     824:	01 97       	sbiw	r24, 0x01	; 1
     826:	18 16       	cp	r1, r24
     828:	19 06       	cpc	r1, r25
     82a:	84 f4       	brge	.+32     	; 0x84c <__floatsisf+0xaa>
     82c:	08 2e       	mov	r0, r24
     82e:	04 c0       	rjmp	.+8      	; 0x838 <__floatsisf+0x96>
     830:	ee 0c       	add	r14, r14
     832:	ff 1c       	adc	r15, r15
     834:	00 1f       	adc	r16, r16
     836:	11 1f       	adc	r17, r17
     838:	0a 94       	dec	r0
     83a:	d2 f7       	brpl	.-12     	; 0x830 <__floatsisf+0x8e>
     83c:	ed 82       	std	Y+5, r14	; 0x05
     83e:	fe 82       	std	Y+6, r15	; 0x06
     840:	0f 83       	std	Y+7, r16	; 0x07
     842:	18 87       	std	Y+8, r17	; 0x08
     844:	c8 1a       	sub	r12, r24
     846:	d9 0a       	sbc	r13, r25
     848:	dc 82       	std	Y+4, r13	; 0x04
     84a:	cb 82       	std	Y+3, r12	; 0x03
     84c:	ba 82       	std	Y+2, r11	; 0x02
     84e:	ce 01       	movw	r24, r28
     850:	01 96       	adiw	r24, 0x01	; 1
     852:	0e 94 4b 05 	call	0xa96	; 0xa96 <__pack_f>
     856:	28 96       	adiw	r28, 0x08	; 8
     858:	e9 e0       	ldi	r30, 0x09	; 9
     85a:	0c 94 38 12 	jmp	0x2470	; 0x2470 <__epilogue_restores__+0x12>

0000085e <__fixsfsi>:
     85e:	ac e0       	ldi	r26, 0x0C	; 12
     860:	b0 e0       	ldi	r27, 0x00	; 0
     862:	e5 e3       	ldi	r30, 0x35	; 53
     864:	f4 e0       	ldi	r31, 0x04	; 4
     866:	0c 94 23 12 	jmp	0x2446	; 0x2446 <__prologue_saves__+0x20>
     86a:	69 83       	std	Y+1, r22	; 0x01
     86c:	7a 83       	std	Y+2, r23	; 0x02
     86e:	8b 83       	std	Y+3, r24	; 0x03
     870:	9c 83       	std	Y+4, r25	; 0x04
     872:	ce 01       	movw	r24, r28
     874:	01 96       	adiw	r24, 0x01	; 1
     876:	be 01       	movw	r22, r28
     878:	6b 5f       	subi	r22, 0xFB	; 251
     87a:	7f 4f       	sbci	r23, 0xFF	; 255
     87c:	0e 94 20 06 	call	0xc40	; 0xc40 <__unpack_f>
     880:	8d 81       	ldd	r24, Y+5	; 0x05
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	61 f1       	breq	.+88     	; 0x8de <__stack+0x7f>
     886:	82 30       	cpi	r24, 0x02	; 2
     888:	50 f1       	brcs	.+84     	; 0x8de <__stack+0x7f>
     88a:	84 30       	cpi	r24, 0x04	; 4
     88c:	21 f4       	brne	.+8      	; 0x896 <__stack+0x37>
     88e:	8e 81       	ldd	r24, Y+6	; 0x06
     890:	88 23       	and	r24, r24
     892:	51 f1       	breq	.+84     	; 0x8e8 <__stack+0x89>
     894:	2e c0       	rjmp	.+92     	; 0x8f2 <__stack+0x93>
     896:	2f 81       	ldd	r18, Y+7	; 0x07
     898:	38 85       	ldd	r19, Y+8	; 0x08
     89a:	37 fd       	sbrc	r19, 7
     89c:	20 c0       	rjmp	.+64     	; 0x8de <__stack+0x7f>
     89e:	6e 81       	ldd	r22, Y+6	; 0x06
     8a0:	2f 31       	cpi	r18, 0x1F	; 31
     8a2:	31 05       	cpc	r19, r1
     8a4:	1c f0       	brlt	.+6      	; 0x8ac <__stack+0x4d>
     8a6:	66 23       	and	r22, r22
     8a8:	f9 f0       	breq	.+62     	; 0x8e8 <__stack+0x89>
     8aa:	23 c0       	rjmp	.+70     	; 0x8f2 <__stack+0x93>
     8ac:	8e e1       	ldi	r24, 0x1E	; 30
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	82 1b       	sub	r24, r18
     8b2:	93 0b       	sbc	r25, r19
     8b4:	29 85       	ldd	r18, Y+9	; 0x09
     8b6:	3a 85       	ldd	r19, Y+10	; 0x0a
     8b8:	4b 85       	ldd	r20, Y+11	; 0x0b
     8ba:	5c 85       	ldd	r21, Y+12	; 0x0c
     8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <__stack+0x67>
     8be:	56 95       	lsr	r21
     8c0:	47 95       	ror	r20
     8c2:	37 95       	ror	r19
     8c4:	27 95       	ror	r18
     8c6:	8a 95       	dec	r24
     8c8:	d2 f7       	brpl	.-12     	; 0x8be <__stack+0x5f>
     8ca:	66 23       	and	r22, r22
     8cc:	b1 f0       	breq	.+44     	; 0x8fa <__stack+0x9b>
     8ce:	50 95       	com	r21
     8d0:	40 95       	com	r20
     8d2:	30 95       	com	r19
     8d4:	21 95       	neg	r18
     8d6:	3f 4f       	sbci	r19, 0xFF	; 255
     8d8:	4f 4f       	sbci	r20, 0xFF	; 255
     8da:	5f 4f       	sbci	r21, 0xFF	; 255
     8dc:	0e c0       	rjmp	.+28     	; 0x8fa <__stack+0x9b>
     8de:	20 e0       	ldi	r18, 0x00	; 0
     8e0:	30 e0       	ldi	r19, 0x00	; 0
     8e2:	40 e0       	ldi	r20, 0x00	; 0
     8e4:	50 e0       	ldi	r21, 0x00	; 0
     8e6:	09 c0       	rjmp	.+18     	; 0x8fa <__stack+0x9b>
     8e8:	2f ef       	ldi	r18, 0xFF	; 255
     8ea:	3f ef       	ldi	r19, 0xFF	; 255
     8ec:	4f ef       	ldi	r20, 0xFF	; 255
     8ee:	5f e7       	ldi	r21, 0x7F	; 127
     8f0:	04 c0       	rjmp	.+8      	; 0x8fa <__stack+0x9b>
     8f2:	20 e0       	ldi	r18, 0x00	; 0
     8f4:	30 e0       	ldi	r19, 0x00	; 0
     8f6:	40 e0       	ldi	r20, 0x00	; 0
     8f8:	50 e8       	ldi	r21, 0x80	; 128
     8fa:	b9 01       	movw	r22, r18
     8fc:	ca 01       	movw	r24, r20
     8fe:	2c 96       	adiw	r28, 0x0c	; 12
     900:	e2 e0       	ldi	r30, 0x02	; 2
     902:	0c 94 3f 12 	jmp	0x247e	; 0x247e <__epilogue_restores__+0x20>

00000906 <__floatunsisf>:
     906:	a8 e0       	ldi	r26, 0x08	; 8
     908:	b0 e0       	ldi	r27, 0x00	; 0
     90a:	e9 e8       	ldi	r30, 0x89	; 137
     90c:	f4 e0       	ldi	r31, 0x04	; 4
     90e:	0c 94 1b 12 	jmp	0x2436	; 0x2436 <__prologue_saves__+0x10>
     912:	7b 01       	movw	r14, r22
     914:	8c 01       	movw	r16, r24
     916:	61 15       	cp	r22, r1
     918:	71 05       	cpc	r23, r1
     91a:	81 05       	cpc	r24, r1
     91c:	91 05       	cpc	r25, r1
     91e:	19 f4       	brne	.+6      	; 0x926 <__floatunsisf+0x20>
     920:	82 e0       	ldi	r24, 0x02	; 2
     922:	89 83       	std	Y+1, r24	; 0x01
     924:	60 c0       	rjmp	.+192    	; 0x9e6 <__floatunsisf+0xe0>
     926:	83 e0       	ldi	r24, 0x03	; 3
     928:	89 83       	std	Y+1, r24	; 0x01
     92a:	8e e1       	ldi	r24, 0x1E	; 30
     92c:	c8 2e       	mov	r12, r24
     92e:	d1 2c       	mov	r13, r1
     930:	dc 82       	std	Y+4, r13	; 0x04
     932:	cb 82       	std	Y+3, r12	; 0x03
     934:	ed 82       	std	Y+5, r14	; 0x05
     936:	fe 82       	std	Y+6, r15	; 0x06
     938:	0f 83       	std	Y+7, r16	; 0x07
     93a:	18 87       	std	Y+8, r17	; 0x08
     93c:	c8 01       	movw	r24, r16
     93e:	b7 01       	movw	r22, r14
     940:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <__clzsi2>
     944:	fc 01       	movw	r30, r24
     946:	31 97       	sbiw	r30, 0x01	; 1
     948:	f7 ff       	sbrs	r31, 7
     94a:	3b c0       	rjmp	.+118    	; 0x9c2 <__floatunsisf+0xbc>
     94c:	22 27       	eor	r18, r18
     94e:	33 27       	eor	r19, r19
     950:	2e 1b       	sub	r18, r30
     952:	3f 0b       	sbc	r19, r31
     954:	57 01       	movw	r10, r14
     956:	68 01       	movw	r12, r16
     958:	02 2e       	mov	r0, r18
     95a:	04 c0       	rjmp	.+8      	; 0x964 <__floatunsisf+0x5e>
     95c:	d6 94       	lsr	r13
     95e:	c7 94       	ror	r12
     960:	b7 94       	ror	r11
     962:	a7 94       	ror	r10
     964:	0a 94       	dec	r0
     966:	d2 f7       	brpl	.-12     	; 0x95c <__floatunsisf+0x56>
     968:	40 e0       	ldi	r20, 0x00	; 0
     96a:	50 e0       	ldi	r21, 0x00	; 0
     96c:	60 e0       	ldi	r22, 0x00	; 0
     96e:	70 e0       	ldi	r23, 0x00	; 0
     970:	81 e0       	ldi	r24, 0x01	; 1
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	a0 e0       	ldi	r26, 0x00	; 0
     976:	b0 e0       	ldi	r27, 0x00	; 0
     978:	04 c0       	rjmp	.+8      	; 0x982 <__floatunsisf+0x7c>
     97a:	88 0f       	add	r24, r24
     97c:	99 1f       	adc	r25, r25
     97e:	aa 1f       	adc	r26, r26
     980:	bb 1f       	adc	r27, r27
     982:	2a 95       	dec	r18
     984:	d2 f7       	brpl	.-12     	; 0x97a <__floatunsisf+0x74>
     986:	01 97       	sbiw	r24, 0x01	; 1
     988:	a1 09       	sbc	r26, r1
     98a:	b1 09       	sbc	r27, r1
     98c:	8e 21       	and	r24, r14
     98e:	9f 21       	and	r25, r15
     990:	a0 23       	and	r26, r16
     992:	b1 23       	and	r27, r17
     994:	00 97       	sbiw	r24, 0x00	; 0
     996:	a1 05       	cpc	r26, r1
     998:	b1 05       	cpc	r27, r1
     99a:	21 f0       	breq	.+8      	; 0x9a4 <__floatunsisf+0x9e>
     99c:	41 e0       	ldi	r20, 0x01	; 1
     99e:	50 e0       	ldi	r21, 0x00	; 0
     9a0:	60 e0       	ldi	r22, 0x00	; 0
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	4a 29       	or	r20, r10
     9a6:	5b 29       	or	r21, r11
     9a8:	6c 29       	or	r22, r12
     9aa:	7d 29       	or	r23, r13
     9ac:	4d 83       	std	Y+5, r20	; 0x05
     9ae:	5e 83       	std	Y+6, r21	; 0x06
     9b0:	6f 83       	std	Y+7, r22	; 0x07
     9b2:	78 87       	std	Y+8, r23	; 0x08
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	8e 1b       	sub	r24, r30
     9ba:	9f 0b       	sbc	r25, r31
     9bc:	9c 83       	std	Y+4, r25	; 0x04
     9be:	8b 83       	std	Y+3, r24	; 0x03
     9c0:	12 c0       	rjmp	.+36     	; 0x9e6 <__floatunsisf+0xe0>
     9c2:	30 97       	sbiw	r30, 0x00	; 0
     9c4:	81 f0       	breq	.+32     	; 0x9e6 <__floatunsisf+0xe0>
     9c6:	0e 2e       	mov	r0, r30
     9c8:	04 c0       	rjmp	.+8      	; 0x9d2 <__floatunsisf+0xcc>
     9ca:	ee 0c       	add	r14, r14
     9cc:	ff 1c       	adc	r15, r15
     9ce:	00 1f       	adc	r16, r16
     9d0:	11 1f       	adc	r17, r17
     9d2:	0a 94       	dec	r0
     9d4:	d2 f7       	brpl	.-12     	; 0x9ca <__floatunsisf+0xc4>
     9d6:	ed 82       	std	Y+5, r14	; 0x05
     9d8:	fe 82       	std	Y+6, r15	; 0x06
     9da:	0f 83       	std	Y+7, r16	; 0x07
     9dc:	18 87       	std	Y+8, r17	; 0x08
     9de:	ce 1a       	sub	r12, r30
     9e0:	df 0a       	sbc	r13, r31
     9e2:	dc 82       	std	Y+4, r13	; 0x04
     9e4:	cb 82       	std	Y+3, r12	; 0x03
     9e6:	1a 82       	std	Y+2, r1	; 0x02
     9e8:	ce 01       	movw	r24, r28
     9ea:	01 96       	adiw	r24, 0x01	; 1
     9ec:	0e 94 4b 05 	call	0xa96	; 0xa96 <__pack_f>
     9f0:	28 96       	adiw	r28, 0x08	; 8
     9f2:	ea e0       	ldi	r30, 0x0A	; 10
     9f4:	0c 94 37 12 	jmp	0x246e	; 0x246e <__epilogue_restores__+0x10>

000009f8 <__clzsi2>:
     9f8:	ef 92       	push	r14
     9fa:	ff 92       	push	r15
     9fc:	0f 93       	push	r16
     9fe:	1f 93       	push	r17
     a00:	7b 01       	movw	r14, r22
     a02:	8c 01       	movw	r16, r24
     a04:	80 e0       	ldi	r24, 0x00	; 0
     a06:	e8 16       	cp	r14, r24
     a08:	80 e0       	ldi	r24, 0x00	; 0
     a0a:	f8 06       	cpc	r15, r24
     a0c:	81 e0       	ldi	r24, 0x01	; 1
     a0e:	08 07       	cpc	r16, r24
     a10:	80 e0       	ldi	r24, 0x00	; 0
     a12:	18 07       	cpc	r17, r24
     a14:	88 f4       	brcc	.+34     	; 0xa38 <__clzsi2+0x40>
     a16:	8f ef       	ldi	r24, 0xFF	; 255
     a18:	e8 16       	cp	r14, r24
     a1a:	f1 04       	cpc	r15, r1
     a1c:	01 05       	cpc	r16, r1
     a1e:	11 05       	cpc	r17, r1
     a20:	31 f0       	breq	.+12     	; 0xa2e <__clzsi2+0x36>
     a22:	28 f0       	brcs	.+10     	; 0xa2e <__clzsi2+0x36>
     a24:	88 e0       	ldi	r24, 0x08	; 8
     a26:	90 e0       	ldi	r25, 0x00	; 0
     a28:	a0 e0       	ldi	r26, 0x00	; 0
     a2a:	b0 e0       	ldi	r27, 0x00	; 0
     a2c:	17 c0       	rjmp	.+46     	; 0xa5c <__clzsi2+0x64>
     a2e:	80 e0       	ldi	r24, 0x00	; 0
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	a0 e0       	ldi	r26, 0x00	; 0
     a34:	b0 e0       	ldi	r27, 0x00	; 0
     a36:	12 c0       	rjmp	.+36     	; 0xa5c <__clzsi2+0x64>
     a38:	80 e0       	ldi	r24, 0x00	; 0
     a3a:	e8 16       	cp	r14, r24
     a3c:	80 e0       	ldi	r24, 0x00	; 0
     a3e:	f8 06       	cpc	r15, r24
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	08 07       	cpc	r16, r24
     a44:	81 e0       	ldi	r24, 0x01	; 1
     a46:	18 07       	cpc	r17, r24
     a48:	28 f0       	brcs	.+10     	; 0xa54 <__clzsi2+0x5c>
     a4a:	88 e1       	ldi	r24, 0x18	; 24
     a4c:	90 e0       	ldi	r25, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	b0 e0       	ldi	r27, 0x00	; 0
     a52:	04 c0       	rjmp	.+8      	; 0xa5c <__clzsi2+0x64>
     a54:	80 e1       	ldi	r24, 0x10	; 16
     a56:	90 e0       	ldi	r25, 0x00	; 0
     a58:	a0 e0       	ldi	r26, 0x00	; 0
     a5a:	b0 e0       	ldi	r27, 0x00	; 0
     a5c:	20 e2       	ldi	r18, 0x20	; 32
     a5e:	30 e0       	ldi	r19, 0x00	; 0
     a60:	40 e0       	ldi	r20, 0x00	; 0
     a62:	50 e0       	ldi	r21, 0x00	; 0
     a64:	28 1b       	sub	r18, r24
     a66:	39 0b       	sbc	r19, r25
     a68:	4a 0b       	sbc	r20, r26
     a6a:	5b 0b       	sbc	r21, r27
     a6c:	04 c0       	rjmp	.+8      	; 0xa76 <__clzsi2+0x7e>
     a6e:	16 95       	lsr	r17
     a70:	07 95       	ror	r16
     a72:	f7 94       	ror	r15
     a74:	e7 94       	ror	r14
     a76:	8a 95       	dec	r24
     a78:	d2 f7       	brpl	.-12     	; 0xa6e <__clzsi2+0x76>
     a7a:	f7 01       	movw	r30, r14
     a7c:	ed 58       	subi	r30, 0x8D	; 141
     a7e:	ff 4f       	sbci	r31, 0xFF	; 255
     a80:	80 81       	ld	r24, Z
     a82:	28 1b       	sub	r18, r24
     a84:	31 09       	sbc	r19, r1
     a86:	41 09       	sbc	r20, r1
     a88:	51 09       	sbc	r21, r1
     a8a:	c9 01       	movw	r24, r18
     a8c:	1f 91       	pop	r17
     a8e:	0f 91       	pop	r16
     a90:	ff 90       	pop	r15
     a92:	ef 90       	pop	r14
     a94:	08 95       	ret

00000a96 <__pack_f>:
     a96:	df 92       	push	r13
     a98:	ef 92       	push	r14
     a9a:	ff 92       	push	r15
     a9c:	0f 93       	push	r16
     a9e:	1f 93       	push	r17
     aa0:	fc 01       	movw	r30, r24
     aa2:	e4 80       	ldd	r14, Z+4	; 0x04
     aa4:	f5 80       	ldd	r15, Z+5	; 0x05
     aa6:	06 81       	ldd	r16, Z+6	; 0x06
     aa8:	17 81       	ldd	r17, Z+7	; 0x07
     aaa:	d1 80       	ldd	r13, Z+1	; 0x01
     aac:	80 81       	ld	r24, Z
     aae:	82 30       	cpi	r24, 0x02	; 2
     ab0:	48 f4       	brcc	.+18     	; 0xac4 <__pack_f+0x2e>
     ab2:	80 e0       	ldi	r24, 0x00	; 0
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	a0 e1       	ldi	r26, 0x10	; 16
     ab8:	b0 e0       	ldi	r27, 0x00	; 0
     aba:	e8 2a       	or	r14, r24
     abc:	f9 2a       	or	r15, r25
     abe:	0a 2b       	or	r16, r26
     ac0:	1b 2b       	or	r17, r27
     ac2:	a5 c0       	rjmp	.+330    	; 0xc0e <__pack_f+0x178>
     ac4:	84 30       	cpi	r24, 0x04	; 4
     ac6:	09 f4       	brne	.+2      	; 0xaca <__pack_f+0x34>
     ac8:	9f c0       	rjmp	.+318    	; 0xc08 <__pack_f+0x172>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	21 f4       	brne	.+8      	; 0xad6 <__pack_f+0x40>
     ace:	ee 24       	eor	r14, r14
     ad0:	ff 24       	eor	r15, r15
     ad2:	87 01       	movw	r16, r14
     ad4:	05 c0       	rjmp	.+10     	; 0xae0 <__pack_f+0x4a>
     ad6:	e1 14       	cp	r14, r1
     ad8:	f1 04       	cpc	r15, r1
     ada:	01 05       	cpc	r16, r1
     adc:	11 05       	cpc	r17, r1
     ade:	19 f4       	brne	.+6      	; 0xae6 <__pack_f+0x50>
     ae0:	e0 e0       	ldi	r30, 0x00	; 0
     ae2:	f0 e0       	ldi	r31, 0x00	; 0
     ae4:	96 c0       	rjmp	.+300    	; 0xc12 <__pack_f+0x17c>
     ae6:	62 81       	ldd	r22, Z+2	; 0x02
     ae8:	73 81       	ldd	r23, Z+3	; 0x03
     aea:	9f ef       	ldi	r25, 0xFF	; 255
     aec:	62 38       	cpi	r22, 0x82	; 130
     aee:	79 07       	cpc	r23, r25
     af0:	0c f0       	brlt	.+2      	; 0xaf4 <__pack_f+0x5e>
     af2:	5b c0       	rjmp	.+182    	; 0xbaa <__pack_f+0x114>
     af4:	22 e8       	ldi	r18, 0x82	; 130
     af6:	3f ef       	ldi	r19, 0xFF	; 255
     af8:	26 1b       	sub	r18, r22
     afa:	37 0b       	sbc	r19, r23
     afc:	2a 31       	cpi	r18, 0x1A	; 26
     afe:	31 05       	cpc	r19, r1
     b00:	2c f0       	brlt	.+10     	; 0xb0c <__pack_f+0x76>
     b02:	20 e0       	ldi	r18, 0x00	; 0
     b04:	30 e0       	ldi	r19, 0x00	; 0
     b06:	40 e0       	ldi	r20, 0x00	; 0
     b08:	50 e0       	ldi	r21, 0x00	; 0
     b0a:	2a c0       	rjmp	.+84     	; 0xb60 <__pack_f+0xca>
     b0c:	b8 01       	movw	r22, r16
     b0e:	a7 01       	movw	r20, r14
     b10:	02 2e       	mov	r0, r18
     b12:	04 c0       	rjmp	.+8      	; 0xb1c <__pack_f+0x86>
     b14:	76 95       	lsr	r23
     b16:	67 95       	ror	r22
     b18:	57 95       	ror	r21
     b1a:	47 95       	ror	r20
     b1c:	0a 94       	dec	r0
     b1e:	d2 f7       	brpl	.-12     	; 0xb14 <__pack_f+0x7e>
     b20:	81 e0       	ldi	r24, 0x01	; 1
     b22:	90 e0       	ldi	r25, 0x00	; 0
     b24:	a0 e0       	ldi	r26, 0x00	; 0
     b26:	b0 e0       	ldi	r27, 0x00	; 0
     b28:	04 c0       	rjmp	.+8      	; 0xb32 <__pack_f+0x9c>
     b2a:	88 0f       	add	r24, r24
     b2c:	99 1f       	adc	r25, r25
     b2e:	aa 1f       	adc	r26, r26
     b30:	bb 1f       	adc	r27, r27
     b32:	2a 95       	dec	r18
     b34:	d2 f7       	brpl	.-12     	; 0xb2a <__pack_f+0x94>
     b36:	01 97       	sbiw	r24, 0x01	; 1
     b38:	a1 09       	sbc	r26, r1
     b3a:	b1 09       	sbc	r27, r1
     b3c:	8e 21       	and	r24, r14
     b3e:	9f 21       	and	r25, r15
     b40:	a0 23       	and	r26, r16
     b42:	b1 23       	and	r27, r17
     b44:	00 97       	sbiw	r24, 0x00	; 0
     b46:	a1 05       	cpc	r26, r1
     b48:	b1 05       	cpc	r27, r1
     b4a:	21 f0       	breq	.+8      	; 0xb54 <__pack_f+0xbe>
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	a0 e0       	ldi	r26, 0x00	; 0
     b52:	b0 e0       	ldi	r27, 0x00	; 0
     b54:	9a 01       	movw	r18, r20
     b56:	ab 01       	movw	r20, r22
     b58:	28 2b       	or	r18, r24
     b5a:	39 2b       	or	r19, r25
     b5c:	4a 2b       	or	r20, r26
     b5e:	5b 2b       	or	r21, r27
     b60:	da 01       	movw	r26, r20
     b62:	c9 01       	movw	r24, r18
     b64:	8f 77       	andi	r24, 0x7F	; 127
     b66:	90 70       	andi	r25, 0x00	; 0
     b68:	a0 70       	andi	r26, 0x00	; 0
     b6a:	b0 70       	andi	r27, 0x00	; 0
     b6c:	80 34       	cpi	r24, 0x40	; 64
     b6e:	91 05       	cpc	r25, r1
     b70:	a1 05       	cpc	r26, r1
     b72:	b1 05       	cpc	r27, r1
     b74:	39 f4       	brne	.+14     	; 0xb84 <__pack_f+0xee>
     b76:	27 ff       	sbrs	r18, 7
     b78:	09 c0       	rjmp	.+18     	; 0xb8c <__pack_f+0xf6>
     b7a:	20 5c       	subi	r18, 0xC0	; 192
     b7c:	3f 4f       	sbci	r19, 0xFF	; 255
     b7e:	4f 4f       	sbci	r20, 0xFF	; 255
     b80:	5f 4f       	sbci	r21, 0xFF	; 255
     b82:	04 c0       	rjmp	.+8      	; 0xb8c <__pack_f+0xf6>
     b84:	21 5c       	subi	r18, 0xC1	; 193
     b86:	3f 4f       	sbci	r19, 0xFF	; 255
     b88:	4f 4f       	sbci	r20, 0xFF	; 255
     b8a:	5f 4f       	sbci	r21, 0xFF	; 255
     b8c:	e0 e0       	ldi	r30, 0x00	; 0
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	20 30       	cpi	r18, 0x00	; 0
     b92:	a0 e0       	ldi	r26, 0x00	; 0
     b94:	3a 07       	cpc	r19, r26
     b96:	a0 e0       	ldi	r26, 0x00	; 0
     b98:	4a 07       	cpc	r20, r26
     b9a:	a0 e4       	ldi	r26, 0x40	; 64
     b9c:	5a 07       	cpc	r21, r26
     b9e:	10 f0       	brcs	.+4      	; 0xba4 <__pack_f+0x10e>
     ba0:	e1 e0       	ldi	r30, 0x01	; 1
     ba2:	f0 e0       	ldi	r31, 0x00	; 0
     ba4:	79 01       	movw	r14, r18
     ba6:	8a 01       	movw	r16, r20
     ba8:	27 c0       	rjmp	.+78     	; 0xbf8 <__pack_f+0x162>
     baa:	60 38       	cpi	r22, 0x80	; 128
     bac:	71 05       	cpc	r23, r1
     bae:	64 f5       	brge	.+88     	; 0xc08 <__pack_f+0x172>
     bb0:	fb 01       	movw	r30, r22
     bb2:	e1 58       	subi	r30, 0x81	; 129
     bb4:	ff 4f       	sbci	r31, 0xFF	; 255
     bb6:	d8 01       	movw	r26, r16
     bb8:	c7 01       	movw	r24, r14
     bba:	8f 77       	andi	r24, 0x7F	; 127
     bbc:	90 70       	andi	r25, 0x00	; 0
     bbe:	a0 70       	andi	r26, 0x00	; 0
     bc0:	b0 70       	andi	r27, 0x00	; 0
     bc2:	80 34       	cpi	r24, 0x40	; 64
     bc4:	91 05       	cpc	r25, r1
     bc6:	a1 05       	cpc	r26, r1
     bc8:	b1 05       	cpc	r27, r1
     bca:	39 f4       	brne	.+14     	; 0xbda <__pack_f+0x144>
     bcc:	e7 fe       	sbrs	r14, 7
     bce:	0d c0       	rjmp	.+26     	; 0xbea <__pack_f+0x154>
     bd0:	80 e4       	ldi	r24, 0x40	; 64
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	a0 e0       	ldi	r26, 0x00	; 0
     bd6:	b0 e0       	ldi	r27, 0x00	; 0
     bd8:	04 c0       	rjmp	.+8      	; 0xbe2 <__pack_f+0x14c>
     bda:	8f e3       	ldi	r24, 0x3F	; 63
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	b0 e0       	ldi	r27, 0x00	; 0
     be2:	e8 0e       	add	r14, r24
     be4:	f9 1e       	adc	r15, r25
     be6:	0a 1f       	adc	r16, r26
     be8:	1b 1f       	adc	r17, r27
     bea:	17 ff       	sbrs	r17, 7
     bec:	05 c0       	rjmp	.+10     	; 0xbf8 <__pack_f+0x162>
     bee:	16 95       	lsr	r17
     bf0:	07 95       	ror	r16
     bf2:	f7 94       	ror	r15
     bf4:	e7 94       	ror	r14
     bf6:	31 96       	adiw	r30, 0x01	; 1
     bf8:	87 e0       	ldi	r24, 0x07	; 7
     bfa:	16 95       	lsr	r17
     bfc:	07 95       	ror	r16
     bfe:	f7 94       	ror	r15
     c00:	e7 94       	ror	r14
     c02:	8a 95       	dec	r24
     c04:	d1 f7       	brne	.-12     	; 0xbfa <__pack_f+0x164>
     c06:	05 c0       	rjmp	.+10     	; 0xc12 <__pack_f+0x17c>
     c08:	ee 24       	eor	r14, r14
     c0a:	ff 24       	eor	r15, r15
     c0c:	87 01       	movw	r16, r14
     c0e:	ef ef       	ldi	r30, 0xFF	; 255
     c10:	f0 e0       	ldi	r31, 0x00	; 0
     c12:	6e 2f       	mov	r22, r30
     c14:	67 95       	ror	r22
     c16:	66 27       	eor	r22, r22
     c18:	67 95       	ror	r22
     c1a:	90 2f       	mov	r25, r16
     c1c:	9f 77       	andi	r25, 0x7F	; 127
     c1e:	d7 94       	ror	r13
     c20:	dd 24       	eor	r13, r13
     c22:	d7 94       	ror	r13
     c24:	8e 2f       	mov	r24, r30
     c26:	86 95       	lsr	r24
     c28:	49 2f       	mov	r20, r25
     c2a:	46 2b       	or	r20, r22
     c2c:	58 2f       	mov	r21, r24
     c2e:	5d 29       	or	r21, r13
     c30:	b7 01       	movw	r22, r14
     c32:	ca 01       	movw	r24, r20
     c34:	1f 91       	pop	r17
     c36:	0f 91       	pop	r16
     c38:	ff 90       	pop	r15
     c3a:	ef 90       	pop	r14
     c3c:	df 90       	pop	r13
     c3e:	08 95       	ret

00000c40 <__unpack_f>:
     c40:	fc 01       	movw	r30, r24
     c42:	db 01       	movw	r26, r22
     c44:	40 81       	ld	r20, Z
     c46:	51 81       	ldd	r21, Z+1	; 0x01
     c48:	22 81       	ldd	r18, Z+2	; 0x02
     c4a:	62 2f       	mov	r22, r18
     c4c:	6f 77       	andi	r22, 0x7F	; 127
     c4e:	70 e0       	ldi	r23, 0x00	; 0
     c50:	22 1f       	adc	r18, r18
     c52:	22 27       	eor	r18, r18
     c54:	22 1f       	adc	r18, r18
     c56:	93 81       	ldd	r25, Z+3	; 0x03
     c58:	89 2f       	mov	r24, r25
     c5a:	88 0f       	add	r24, r24
     c5c:	82 2b       	or	r24, r18
     c5e:	28 2f       	mov	r18, r24
     c60:	30 e0       	ldi	r19, 0x00	; 0
     c62:	99 1f       	adc	r25, r25
     c64:	99 27       	eor	r25, r25
     c66:	99 1f       	adc	r25, r25
     c68:	11 96       	adiw	r26, 0x01	; 1
     c6a:	9c 93       	st	X, r25
     c6c:	11 97       	sbiw	r26, 0x01	; 1
     c6e:	21 15       	cp	r18, r1
     c70:	31 05       	cpc	r19, r1
     c72:	a9 f5       	brne	.+106    	; 0xcde <__unpack_f+0x9e>
     c74:	41 15       	cp	r20, r1
     c76:	51 05       	cpc	r21, r1
     c78:	61 05       	cpc	r22, r1
     c7a:	71 05       	cpc	r23, r1
     c7c:	11 f4       	brne	.+4      	; 0xc82 <__unpack_f+0x42>
     c7e:	82 e0       	ldi	r24, 0x02	; 2
     c80:	37 c0       	rjmp	.+110    	; 0xcf0 <__unpack_f+0xb0>
     c82:	82 e8       	ldi	r24, 0x82	; 130
     c84:	9f ef       	ldi	r25, 0xFF	; 255
     c86:	13 96       	adiw	r26, 0x03	; 3
     c88:	9c 93       	st	X, r25
     c8a:	8e 93       	st	-X, r24
     c8c:	12 97       	sbiw	r26, 0x02	; 2
     c8e:	9a 01       	movw	r18, r20
     c90:	ab 01       	movw	r20, r22
     c92:	67 e0       	ldi	r22, 0x07	; 7
     c94:	22 0f       	add	r18, r18
     c96:	33 1f       	adc	r19, r19
     c98:	44 1f       	adc	r20, r20
     c9a:	55 1f       	adc	r21, r21
     c9c:	6a 95       	dec	r22
     c9e:	d1 f7       	brne	.-12     	; 0xc94 <__unpack_f+0x54>
     ca0:	83 e0       	ldi	r24, 0x03	; 3
     ca2:	8c 93       	st	X, r24
     ca4:	0d c0       	rjmp	.+26     	; 0xcc0 <__unpack_f+0x80>
     ca6:	22 0f       	add	r18, r18
     ca8:	33 1f       	adc	r19, r19
     caa:	44 1f       	adc	r20, r20
     cac:	55 1f       	adc	r21, r21
     cae:	12 96       	adiw	r26, 0x02	; 2
     cb0:	8d 91       	ld	r24, X+
     cb2:	9c 91       	ld	r25, X
     cb4:	13 97       	sbiw	r26, 0x03	; 3
     cb6:	01 97       	sbiw	r24, 0x01	; 1
     cb8:	13 96       	adiw	r26, 0x03	; 3
     cba:	9c 93       	st	X, r25
     cbc:	8e 93       	st	-X, r24
     cbe:	12 97       	sbiw	r26, 0x02	; 2
     cc0:	20 30       	cpi	r18, 0x00	; 0
     cc2:	80 e0       	ldi	r24, 0x00	; 0
     cc4:	38 07       	cpc	r19, r24
     cc6:	80 e0       	ldi	r24, 0x00	; 0
     cc8:	48 07       	cpc	r20, r24
     cca:	80 e4       	ldi	r24, 0x40	; 64
     ccc:	58 07       	cpc	r21, r24
     cce:	58 f3       	brcs	.-42     	; 0xca6 <__unpack_f+0x66>
     cd0:	14 96       	adiw	r26, 0x04	; 4
     cd2:	2d 93       	st	X+, r18
     cd4:	3d 93       	st	X+, r19
     cd6:	4d 93       	st	X+, r20
     cd8:	5c 93       	st	X, r21
     cda:	17 97       	sbiw	r26, 0x07	; 7
     cdc:	08 95       	ret
     cde:	2f 3f       	cpi	r18, 0xFF	; 255
     ce0:	31 05       	cpc	r19, r1
     ce2:	79 f4       	brne	.+30     	; 0xd02 <__unpack_f+0xc2>
     ce4:	41 15       	cp	r20, r1
     ce6:	51 05       	cpc	r21, r1
     ce8:	61 05       	cpc	r22, r1
     cea:	71 05       	cpc	r23, r1
     cec:	19 f4       	brne	.+6      	; 0xcf4 <__unpack_f+0xb4>
     cee:	84 e0       	ldi	r24, 0x04	; 4
     cf0:	8c 93       	st	X, r24
     cf2:	08 95       	ret
     cf4:	64 ff       	sbrs	r22, 4
     cf6:	03 c0       	rjmp	.+6      	; 0xcfe <__unpack_f+0xbe>
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	8c 93       	st	X, r24
     cfc:	12 c0       	rjmp	.+36     	; 0xd22 <__unpack_f+0xe2>
     cfe:	1c 92       	st	X, r1
     d00:	10 c0       	rjmp	.+32     	; 0xd22 <__unpack_f+0xe2>
     d02:	2f 57       	subi	r18, 0x7F	; 127
     d04:	30 40       	sbci	r19, 0x00	; 0
     d06:	13 96       	adiw	r26, 0x03	; 3
     d08:	3c 93       	st	X, r19
     d0a:	2e 93       	st	-X, r18
     d0c:	12 97       	sbiw	r26, 0x02	; 2
     d0e:	83 e0       	ldi	r24, 0x03	; 3
     d10:	8c 93       	st	X, r24
     d12:	87 e0       	ldi	r24, 0x07	; 7
     d14:	44 0f       	add	r20, r20
     d16:	55 1f       	adc	r21, r21
     d18:	66 1f       	adc	r22, r22
     d1a:	77 1f       	adc	r23, r23
     d1c:	8a 95       	dec	r24
     d1e:	d1 f7       	brne	.-12     	; 0xd14 <__unpack_f+0xd4>
     d20:	70 64       	ori	r23, 0x40	; 64
     d22:	14 96       	adiw	r26, 0x04	; 4
     d24:	4d 93       	st	X+, r20
     d26:	5d 93       	st	X+, r21
     d28:	6d 93       	st	X+, r22
     d2a:	7c 93       	st	X, r23
     d2c:	17 97       	sbiw	r26, 0x07	; 7
     d2e:	08 95       	ret

00000d30 <__fpcmp_parts_f>:
     d30:	1f 93       	push	r17
     d32:	dc 01       	movw	r26, r24
     d34:	fb 01       	movw	r30, r22
     d36:	9c 91       	ld	r25, X
     d38:	92 30       	cpi	r25, 0x02	; 2
     d3a:	08 f4       	brcc	.+2      	; 0xd3e <__fpcmp_parts_f+0xe>
     d3c:	47 c0       	rjmp	.+142    	; 0xdcc <__fpcmp_parts_f+0x9c>
     d3e:	80 81       	ld	r24, Z
     d40:	82 30       	cpi	r24, 0x02	; 2
     d42:	08 f4       	brcc	.+2      	; 0xd46 <__fpcmp_parts_f+0x16>
     d44:	43 c0       	rjmp	.+134    	; 0xdcc <__fpcmp_parts_f+0x9c>
     d46:	94 30       	cpi	r25, 0x04	; 4
     d48:	51 f4       	brne	.+20     	; 0xd5e <__fpcmp_parts_f+0x2e>
     d4a:	11 96       	adiw	r26, 0x01	; 1
     d4c:	1c 91       	ld	r17, X
     d4e:	84 30       	cpi	r24, 0x04	; 4
     d50:	99 f5       	brne	.+102    	; 0xdb8 <__fpcmp_parts_f+0x88>
     d52:	81 81       	ldd	r24, Z+1	; 0x01
     d54:	68 2f       	mov	r22, r24
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	61 1b       	sub	r22, r17
     d5a:	71 09       	sbc	r23, r1
     d5c:	3f c0       	rjmp	.+126    	; 0xddc <__fpcmp_parts_f+0xac>
     d5e:	84 30       	cpi	r24, 0x04	; 4
     d60:	21 f0       	breq	.+8      	; 0xd6a <__fpcmp_parts_f+0x3a>
     d62:	92 30       	cpi	r25, 0x02	; 2
     d64:	31 f4       	brne	.+12     	; 0xd72 <__fpcmp_parts_f+0x42>
     d66:	82 30       	cpi	r24, 0x02	; 2
     d68:	b9 f1       	breq	.+110    	; 0xdd8 <__fpcmp_parts_f+0xa8>
     d6a:	81 81       	ldd	r24, Z+1	; 0x01
     d6c:	88 23       	and	r24, r24
     d6e:	89 f1       	breq	.+98     	; 0xdd2 <__fpcmp_parts_f+0xa2>
     d70:	2d c0       	rjmp	.+90     	; 0xdcc <__fpcmp_parts_f+0x9c>
     d72:	11 96       	adiw	r26, 0x01	; 1
     d74:	1c 91       	ld	r17, X
     d76:	11 97       	sbiw	r26, 0x01	; 1
     d78:	82 30       	cpi	r24, 0x02	; 2
     d7a:	f1 f0       	breq	.+60     	; 0xdb8 <__fpcmp_parts_f+0x88>
     d7c:	81 81       	ldd	r24, Z+1	; 0x01
     d7e:	18 17       	cp	r17, r24
     d80:	d9 f4       	brne	.+54     	; 0xdb8 <__fpcmp_parts_f+0x88>
     d82:	12 96       	adiw	r26, 0x02	; 2
     d84:	2d 91       	ld	r18, X+
     d86:	3c 91       	ld	r19, X
     d88:	13 97       	sbiw	r26, 0x03	; 3
     d8a:	82 81       	ldd	r24, Z+2	; 0x02
     d8c:	93 81       	ldd	r25, Z+3	; 0x03
     d8e:	82 17       	cp	r24, r18
     d90:	93 07       	cpc	r25, r19
     d92:	94 f0       	brlt	.+36     	; 0xdb8 <__fpcmp_parts_f+0x88>
     d94:	28 17       	cp	r18, r24
     d96:	39 07       	cpc	r19, r25
     d98:	bc f0       	brlt	.+46     	; 0xdc8 <__fpcmp_parts_f+0x98>
     d9a:	14 96       	adiw	r26, 0x04	; 4
     d9c:	8d 91       	ld	r24, X+
     d9e:	9d 91       	ld	r25, X+
     da0:	0d 90       	ld	r0, X+
     da2:	bc 91       	ld	r27, X
     da4:	a0 2d       	mov	r26, r0
     da6:	24 81       	ldd	r18, Z+4	; 0x04
     da8:	35 81       	ldd	r19, Z+5	; 0x05
     daa:	46 81       	ldd	r20, Z+6	; 0x06
     dac:	57 81       	ldd	r21, Z+7	; 0x07
     dae:	28 17       	cp	r18, r24
     db0:	39 07       	cpc	r19, r25
     db2:	4a 07       	cpc	r20, r26
     db4:	5b 07       	cpc	r21, r27
     db6:	18 f4       	brcc	.+6      	; 0xdbe <__fpcmp_parts_f+0x8e>
     db8:	11 23       	and	r17, r17
     dba:	41 f0       	breq	.+16     	; 0xdcc <__fpcmp_parts_f+0x9c>
     dbc:	0a c0       	rjmp	.+20     	; 0xdd2 <__fpcmp_parts_f+0xa2>
     dbe:	82 17       	cp	r24, r18
     dc0:	93 07       	cpc	r25, r19
     dc2:	a4 07       	cpc	r26, r20
     dc4:	b5 07       	cpc	r27, r21
     dc6:	40 f4       	brcc	.+16     	; 0xdd8 <__fpcmp_parts_f+0xa8>
     dc8:	11 23       	and	r17, r17
     dca:	19 f0       	breq	.+6      	; 0xdd2 <__fpcmp_parts_f+0xa2>
     dcc:	61 e0       	ldi	r22, 0x01	; 1
     dce:	70 e0       	ldi	r23, 0x00	; 0
     dd0:	05 c0       	rjmp	.+10     	; 0xddc <__fpcmp_parts_f+0xac>
     dd2:	6f ef       	ldi	r22, 0xFF	; 255
     dd4:	7f ef       	ldi	r23, 0xFF	; 255
     dd6:	02 c0       	rjmp	.+4      	; 0xddc <__fpcmp_parts_f+0xac>
     dd8:	60 e0       	ldi	r22, 0x00	; 0
     dda:	70 e0       	ldi	r23, 0x00	; 0
     ddc:	cb 01       	movw	r24, r22
     dde:	1f 91       	pop	r17
     de0:	08 95       	ret

00000de2 <ADC_voidInit>:




void ADC_voidInit(void)
{
     de2:	df 93       	push	r29
     de4:	cf 93       	push	r28
     de6:	cd b7       	in	r28, 0x3d	; 61
     de8:	de b7       	in	r29, 0x3e	; 62
	/* reference voltage */
	ADMUX &= ADC_VOLT_REF_SELEC_MASK;
     dea:	a7 e2       	ldi	r26, 0x27	; 39
     dec:	b0 e0       	ldi	r27, 0x00	; 0
     dee:	e7 e2       	ldi	r30, 0x27	; 39
     df0:	f0 e0       	ldi	r31, 0x00	; 0
     df2:	80 81       	ld	r24, Z
     df4:	8f 73       	andi	r24, 0x3F	; 63
     df6:	8c 93       	st	X, r24
	ADMUX |= ADC_VOLT_REF_SELEC;
     df8:	a7 e2       	ldi	r26, 0x27	; 39
     dfa:	b0 e0       	ldi	r27, 0x00	; 0
     dfc:	e7 e2       	ldi	r30, 0x27	; 39
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	80 81       	ld	r24, Z
     e02:	80 64       	ori	r24, 0x40	; 64
     e04:	8c 93       	st	X, r24

	/* Activate Data Register */
	ADMUX &= ADC_Data_Register_MASK;
     e06:	a7 e2       	ldi	r26, 0x27	; 39
     e08:	b0 e0       	ldi	r27, 0x00	; 0
     e0a:	e7 e2       	ldi	r30, 0x27	; 39
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	80 81       	ld	r24, Z
     e10:	8f 7d       	andi	r24, 0xDF	; 223
     e12:	8c 93       	st	X, r24
	ADMUX |= ADC_Data_Register;
     e14:	a7 e2       	ldi	r26, 0x27	; 39
     e16:	b0 e0       	ldi	r27, 0x00	; 0
     e18:	e7 e2       	ldi	r30, 0x27	; 39
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	80 81       	ld	r24, Z
     e1e:	8c 93       	st	X, r24
//CLR_BIT(ADMUX,ADMUX_ADLAR);

	/* Prescaler Selection */
	ADCSRA &= ADC_PRESC_MASK;
     e20:	a6 e2       	ldi	r26, 0x26	; 38
     e22:	b0 e0       	ldi	r27, 0x00	; 0
     e24:	e6 e2       	ldi	r30, 0x26	; 38
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	80 81       	ld	r24, Z
     e2a:	88 7f       	andi	r24, 0xF8	; 248
     e2c:	8c 93       	st	X, r24
	ADCSRA |= ADC_PRESC_SELEC;
     e2e:	a6 e2       	ldi	r26, 0x26	; 38
     e30:	b0 e0       	ldi	r27, 0x00	; 0
     e32:	e6 e2       	ldi	r30, 0x26	; 38
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	80 81       	ld	r24, Z
     e38:	87 60       	ori	r24, 0x07	; 7
     e3a:	8c 93       	st	X, r24

	/* Enable peripheral*/
	SET_BIT(ADCSRA,ADCSRA_ADEN);
     e3c:	a6 e2       	ldi	r26, 0x26	; 38
     e3e:	b0 e0       	ldi	r27, 0x00	; 0
     e40:	e6 e2       	ldi	r30, 0x26	; 38
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	80 81       	ld	r24, Z
     e46:	80 68       	ori	r24, 0x80	; 128
     e48:	8c 93       	st	X, r24
	/* Start First Conversion */
	SET_BIT(ADCSRA,ADCSRA_ADSC);
#endif


}
     e4a:	cf 91       	pop	r28
     e4c:	df 91       	pop	r29
     e4e:	08 95       	ret

00000e50 <ADC_u8GetChannelReading>:
u16 ADC_u8GetChannelReading(u8 Copy_u8Channel)
{
     e50:	df 93       	push	r29
     e52:	cf 93       	push	r28
     e54:	0f 92       	push	r0
     e56:	cd b7       	in	r28, 0x3d	; 61
     e58:	de b7       	in	r29, 0x3e	; 62
     e5a:	89 83       	std	Y+1, r24	; 0x01

	/* Clear the MUX bits in ADMUX register*/
	ADMUX &= ADC_SELEC_CHANNEL_MASK;
     e5c:	a7 e2       	ldi	r26, 0x27	; 39
     e5e:	b0 e0       	ldi	r27, 0x00	; 0
     e60:	e7 e2       	ldi	r30, 0x27	; 39
     e62:	f0 e0       	ldi	r31, 0x00	; 0
     e64:	80 81       	ld	r24, Z
     e66:	80 7e       	andi	r24, 0xE0	; 224
     e68:	8c 93       	st	X, r24

	/*Set the required channel into the MUX bits*/
	ADMUX |= Copy_u8Channel;
     e6a:	a7 e2       	ldi	r26, 0x27	; 39
     e6c:	b0 e0       	ldi	r27, 0x00	; 0
     e6e:	e7 e2       	ldi	r30, 0x27	; 39
     e70:	f0 e0       	ldi	r31, 0x00	; 0
     e72:	90 81       	ld	r25, Z
     e74:	89 81       	ldd	r24, Y+1	; 0x01
     e76:	89 2b       	or	r24, r25
     e78:	8c 93       	st	X, r24

#if ADC_Conversion_Mode == ADC_Single_Conv_Mode
	SET_BIT(ADCSRA,ADCSRA_ADSC);  /* Start Conversion */
     e7a:	a6 e2       	ldi	r26, 0x26	; 38
     e7c:	b0 e0       	ldi	r27, 0x00	; 0
     e7e:	e6 e2       	ldi	r30, 0x26	; 38
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	80 81       	ld	r24, Z
     e84:	80 64       	ori	r24, 0x40	; 64
     e86:	8c 93       	st	X, r24

	/* Polling (Busy Waiting) until the conversion complete flag is set */
	while((GET_BIT(ADCSRA,ADCSRA_ADIF))==0);
     e88:	e6 e2       	ldi	r30, 0x26	; 38
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	80 81       	ld	r24, Z
     e8e:	82 95       	swap	r24
     e90:	8f 70       	andi	r24, 0x0F	; 15
     e92:	88 2f       	mov	r24, r24
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	81 70       	andi	r24, 0x01	; 1
     e98:	90 70       	andi	r25, 0x00	; 0
     e9a:	00 97       	sbiw	r24, 0x00	; 0
     e9c:	a9 f3       	breq	.-22     	; 0xe88 <ADC_u8GetChannelReading+0x38>

	/* Clear the conversion complete flag*/
	SET_BIT(ADCSRA,ADCSRA_ADIF);
     e9e:	a6 e2       	ldi	r26, 0x26	; 38
     ea0:	b0 e0       	ldi	r27, 0x00	; 0
     ea2:	e6 e2       	ldi	r30, 0x26	; 38
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	80 81       	ld	r24, Z
     ea8:	80 61       	ori	r24, 0x10	; 16
     eaa:	8c 93       	st	X, r24

	/* Return the reading*/
#if   NO_OF_BITS == _8_BITS
	return ADCH;
#elif NO_OF_BITS == _10_BITS
	return ADC;
     eac:	e4 e2       	ldi	r30, 0x24	; 36
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	80 81       	ld	r24, Z
     eb2:	91 81       	ldd	r25, Z+1	; 0x01
#endif


}
     eb4:	0f 90       	pop	r0
     eb6:	cf 91       	pop	r28
     eb8:	df 91       	pop	r29
     eba:	08 95       	ret

00000ebc <C_LCD_voidSendCommand>:

#include "CLCD_private.h"


void C_LCD_voidSendCommand(u8 Copy_u8Command)
{
     ebc:	1f 93       	push	r17
     ebe:	df 93       	push	r29
     ec0:	cf 93       	push	r28
     ec2:	cd b7       	in	r28, 0x3d	; 61
     ec4:	de b7       	in	r29, 0x3e	; 62
     ec6:	ea 97       	sbiw	r28, 0x3a	; 58
     ec8:	0f b6       	in	r0, 0x3f	; 63
     eca:	f8 94       	cli
     ecc:	de bf       	out	0x3e, r29	; 62
     ece:	0f be       	out	0x3f, r0	; 63
     ed0:	cd bf       	out	0x3d, r28	; 61
     ed2:	8a af       	std	Y+58, r24	; 0x3a
	/*Set RS Pin to low to send command */
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_LOW);
     ed4:	80 e0       	ldi	r24, 0x00	; 0
     ed6:	61 e0       	ldi	r22, 0x01	; 1
     ed8:	40 e0       	ldi	r20, 0x00	; 0
     eda:	0e 94 55 0e 	call	0x1caa	; 0x1caa <DIO_u8SetPinValue>
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);

#elif   MODE_SELECT ==_4_BIT_MODE

	u8 Local_u8Command = (((Copy_u8Command >> 1) & 0b01111000) | DIO_u8AndWithPort(CLCD_DATA_PORT, 0b10000111));
     ede:	8a ad       	ldd	r24, Y+58	; 0x3a
     ee0:	86 95       	lsr	r24
     ee2:	18 2f       	mov	r17, r24
     ee4:	18 77       	andi	r17, 0x78	; 120
     ee6:	80 e0       	ldi	r24, 0x00	; 0
     ee8:	67 e8       	ldi	r22, 0x87	; 135
     eea:	0e 94 4d 10 	call	0x209a	; 0x209a <DIO_u8AndWithPort>
     eee:	81 2b       	or	r24, r17
     ef0:	89 af       	std	Y+57, r24	; 0x39
	/* Set Command to data pins */
	DIO_u8SetPortValue(CLCD_DATA_PORT,Local_u8Command);
     ef2:	80 e0       	ldi	r24, 0x00	; 0
     ef4:	69 ad       	ldd	r22, Y+57	; 0x39
     ef6:	0e 94 67 0f 	call	0x1ece	; 0x1ece <DIO_u8SetPortValue>

	/*Send Enable pulse */
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
     efa:	80 e0       	ldi	r24, 0x00	; 0
     efc:	62 e0       	ldi	r22, 0x02	; 2
     efe:	41 e0       	ldi	r20, 0x01	; 1
     f00:	0e 94 55 0e 	call	0x1caa	; 0x1caa <DIO_u8SetPinValue>
     f04:	80 e0       	ldi	r24, 0x00	; 0
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	a0 e0       	ldi	r26, 0x00	; 0
     f0a:	b0 e4       	ldi	r27, 0x40	; 64
     f0c:	8d ab       	std	Y+53, r24	; 0x35
     f0e:	9e ab       	std	Y+54, r25	; 0x36
     f10:	af ab       	std	Y+55, r26	; 0x37
     f12:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f14:	6d a9       	ldd	r22, Y+53	; 0x35
     f16:	7e a9       	ldd	r23, Y+54	; 0x36
     f18:	8f a9       	ldd	r24, Y+55	; 0x37
     f1a:	98 ad       	ldd	r25, Y+56	; 0x38
     f1c:	20 e0       	ldi	r18, 0x00	; 0
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	4a ef       	ldi	r20, 0xFA	; 250
     f22:	54 e4       	ldi	r21, 0x44	; 68
     f24:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f28:	dc 01       	movw	r26, r24
     f2a:	cb 01       	movw	r24, r22
     f2c:	89 ab       	std	Y+49, r24	; 0x31
     f2e:	9a ab       	std	Y+50, r25	; 0x32
     f30:	ab ab       	std	Y+51, r26	; 0x33
     f32:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     f34:	69 a9       	ldd	r22, Y+49	; 0x31
     f36:	7a a9       	ldd	r23, Y+50	; 0x32
     f38:	8b a9       	ldd	r24, Y+51	; 0x33
     f3a:	9c a9       	ldd	r25, Y+52	; 0x34
     f3c:	20 e0       	ldi	r18, 0x00	; 0
     f3e:	30 e0       	ldi	r19, 0x00	; 0
     f40:	40 e8       	ldi	r20, 0x80	; 128
     f42:	5f e3       	ldi	r21, 0x3F	; 63
     f44:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
     f48:	88 23       	and	r24, r24
     f4a:	2c f4       	brge	.+10     	; 0xf56 <C_LCD_voidSendCommand+0x9a>
		__ticks = 1;
     f4c:	81 e0       	ldi	r24, 0x01	; 1
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	98 ab       	std	Y+48, r25	; 0x30
     f52:	8f a7       	std	Y+47, r24	; 0x2f
     f54:	3f c0       	rjmp	.+126    	; 0xfd4 <C_LCD_voidSendCommand+0x118>
	else if (__tmp > 65535)
     f56:	69 a9       	ldd	r22, Y+49	; 0x31
     f58:	7a a9       	ldd	r23, Y+50	; 0x32
     f5a:	8b a9       	ldd	r24, Y+51	; 0x33
     f5c:	9c a9       	ldd	r25, Y+52	; 0x34
     f5e:	20 e0       	ldi	r18, 0x00	; 0
     f60:	3f ef       	ldi	r19, 0xFF	; 255
     f62:	4f e7       	ldi	r20, 0x7F	; 127
     f64:	57 e4       	ldi	r21, 0x47	; 71
     f66:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
     f6a:	18 16       	cp	r1, r24
     f6c:	4c f5       	brge	.+82     	; 0xfc0 <C_LCD_voidSendCommand+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f6e:	6d a9       	ldd	r22, Y+53	; 0x35
     f70:	7e a9       	ldd	r23, Y+54	; 0x36
     f72:	8f a9       	ldd	r24, Y+55	; 0x37
     f74:	98 ad       	ldd	r25, Y+56	; 0x38
     f76:	20 e0       	ldi	r18, 0x00	; 0
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	40 e2       	ldi	r20, 0x20	; 32
     f7c:	51 e4       	ldi	r21, 0x41	; 65
     f7e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f82:	dc 01       	movw	r26, r24
     f84:	cb 01       	movw	r24, r22
     f86:	bc 01       	movw	r22, r24
     f88:	cd 01       	movw	r24, r26
     f8a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f8e:	dc 01       	movw	r26, r24
     f90:	cb 01       	movw	r24, r22
     f92:	98 ab       	std	Y+48, r25	; 0x30
     f94:	8f a7       	std	Y+47, r24	; 0x2f
     f96:	0f c0       	rjmp	.+30     	; 0xfb6 <C_LCD_voidSendCommand+0xfa>
     f98:	88 ec       	ldi	r24, 0xC8	; 200
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	9e a7       	std	Y+46, r25	; 0x2e
     f9e:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     fa0:	8d a5       	ldd	r24, Y+45	; 0x2d
     fa2:	9e a5       	ldd	r25, Y+46	; 0x2e
     fa4:	01 97       	sbiw	r24, 0x01	; 1
     fa6:	f1 f7       	brne	.-4      	; 0xfa4 <C_LCD_voidSendCommand+0xe8>
     fa8:	9e a7       	std	Y+46, r25	; 0x2e
     faa:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fac:	8f a5       	ldd	r24, Y+47	; 0x2f
     fae:	98 a9       	ldd	r25, Y+48	; 0x30
     fb0:	01 97       	sbiw	r24, 0x01	; 1
     fb2:	98 ab       	std	Y+48, r25	; 0x30
     fb4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fb6:	8f a5       	ldd	r24, Y+47	; 0x2f
     fb8:	98 a9       	ldd	r25, Y+48	; 0x30
     fba:	00 97       	sbiw	r24, 0x00	; 0
     fbc:	69 f7       	brne	.-38     	; 0xf98 <C_LCD_voidSendCommand+0xdc>
     fbe:	14 c0       	rjmp	.+40     	; 0xfe8 <C_LCD_voidSendCommand+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fc0:	69 a9       	ldd	r22, Y+49	; 0x31
     fc2:	7a a9       	ldd	r23, Y+50	; 0x32
     fc4:	8b a9       	ldd	r24, Y+51	; 0x33
     fc6:	9c a9       	ldd	r25, Y+52	; 0x34
     fc8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     fcc:	dc 01       	movw	r26, r24
     fce:	cb 01       	movw	r24, r22
     fd0:	98 ab       	std	Y+48, r25	; 0x30
     fd2:	8f a7       	std	Y+47, r24	; 0x2f
     fd4:	8f a5       	ldd	r24, Y+47	; 0x2f
     fd6:	98 a9       	ldd	r25, Y+48	; 0x30
     fd8:	9c a7       	std	Y+44, r25	; 0x2c
     fda:	8b a7       	std	Y+43, r24	; 0x2b
     fdc:	8b a5       	ldd	r24, Y+43	; 0x2b
     fde:	9c a5       	ldd	r25, Y+44	; 0x2c
     fe0:	01 97       	sbiw	r24, 0x01	; 1
     fe2:	f1 f7       	brne	.-4      	; 0xfe0 <C_LCD_voidSendCommand+0x124>
     fe4:	9c a7       	std	Y+44, r25	; 0x2c
     fe6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
     fe8:	80 e0       	ldi	r24, 0x00	; 0
     fea:	62 e0       	ldi	r22, 0x02	; 2
     fec:	40 e0       	ldi	r20, 0x00	; 0
     fee:	0e 94 55 0e 	call	0x1caa	; 0x1caa <DIO_u8SetPinValue>
     ff2:	80 e0       	ldi	r24, 0x00	; 0
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	a0 ea       	ldi	r26, 0xA0	; 160
     ff8:	b0 e4       	ldi	r27, 0x40	; 64
     ffa:	8f a3       	std	Y+39, r24	; 0x27
     ffc:	98 a7       	std	Y+40, r25	; 0x28
     ffe:	a9 a7       	std	Y+41, r26	; 0x29
    1000:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1002:	6f a1       	ldd	r22, Y+39	; 0x27
    1004:	78 a5       	ldd	r23, Y+40	; 0x28
    1006:	89 a5       	ldd	r24, Y+41	; 0x29
    1008:	9a a5       	ldd	r25, Y+42	; 0x2a
    100a:	20 e0       	ldi	r18, 0x00	; 0
    100c:	30 e0       	ldi	r19, 0x00	; 0
    100e:	4a ef       	ldi	r20, 0xFA	; 250
    1010:	54 e4       	ldi	r21, 0x44	; 68
    1012:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1016:	dc 01       	movw	r26, r24
    1018:	cb 01       	movw	r24, r22
    101a:	8b a3       	std	Y+35, r24	; 0x23
    101c:	9c a3       	std	Y+36, r25	; 0x24
    101e:	ad a3       	std	Y+37, r26	; 0x25
    1020:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1022:	6b a1       	ldd	r22, Y+35	; 0x23
    1024:	7c a1       	ldd	r23, Y+36	; 0x24
    1026:	8d a1       	ldd	r24, Y+37	; 0x25
    1028:	9e a1       	ldd	r25, Y+38	; 0x26
    102a:	20 e0       	ldi	r18, 0x00	; 0
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	40 e8       	ldi	r20, 0x80	; 128
    1030:	5f e3       	ldi	r21, 0x3F	; 63
    1032:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    1036:	88 23       	and	r24, r24
    1038:	2c f4       	brge	.+10     	; 0x1044 <C_LCD_voidSendCommand+0x188>
		__ticks = 1;
    103a:	81 e0       	ldi	r24, 0x01	; 1
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	9a a3       	std	Y+34, r25	; 0x22
    1040:	89 a3       	std	Y+33, r24	; 0x21
    1042:	3f c0       	rjmp	.+126    	; 0x10c2 <C_LCD_voidSendCommand+0x206>
	else if (__tmp > 65535)
    1044:	6b a1       	ldd	r22, Y+35	; 0x23
    1046:	7c a1       	ldd	r23, Y+36	; 0x24
    1048:	8d a1       	ldd	r24, Y+37	; 0x25
    104a:	9e a1       	ldd	r25, Y+38	; 0x26
    104c:	20 e0       	ldi	r18, 0x00	; 0
    104e:	3f ef       	ldi	r19, 0xFF	; 255
    1050:	4f e7       	ldi	r20, 0x7F	; 127
    1052:	57 e4       	ldi	r21, 0x47	; 71
    1054:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    1058:	18 16       	cp	r1, r24
    105a:	4c f5       	brge	.+82     	; 0x10ae <C_LCD_voidSendCommand+0x1f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    105c:	6f a1       	ldd	r22, Y+39	; 0x27
    105e:	78 a5       	ldd	r23, Y+40	; 0x28
    1060:	89 a5       	ldd	r24, Y+41	; 0x29
    1062:	9a a5       	ldd	r25, Y+42	; 0x2a
    1064:	20 e0       	ldi	r18, 0x00	; 0
    1066:	30 e0       	ldi	r19, 0x00	; 0
    1068:	40 e2       	ldi	r20, 0x20	; 32
    106a:	51 e4       	ldi	r21, 0x41	; 65
    106c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1070:	dc 01       	movw	r26, r24
    1072:	cb 01       	movw	r24, r22
    1074:	bc 01       	movw	r22, r24
    1076:	cd 01       	movw	r24, r26
    1078:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    107c:	dc 01       	movw	r26, r24
    107e:	cb 01       	movw	r24, r22
    1080:	9a a3       	std	Y+34, r25	; 0x22
    1082:	89 a3       	std	Y+33, r24	; 0x21
    1084:	0f c0       	rjmp	.+30     	; 0x10a4 <C_LCD_voidSendCommand+0x1e8>
    1086:	88 ec       	ldi	r24, 0xC8	; 200
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	98 a3       	std	Y+32, r25	; 0x20
    108c:	8f 8f       	std	Y+31, r24	; 0x1f
    108e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1090:	98 a1       	ldd	r25, Y+32	; 0x20
    1092:	01 97       	sbiw	r24, 0x01	; 1
    1094:	f1 f7       	brne	.-4      	; 0x1092 <C_LCD_voidSendCommand+0x1d6>
    1096:	98 a3       	std	Y+32, r25	; 0x20
    1098:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    109a:	89 a1       	ldd	r24, Y+33	; 0x21
    109c:	9a a1       	ldd	r25, Y+34	; 0x22
    109e:	01 97       	sbiw	r24, 0x01	; 1
    10a0:	9a a3       	std	Y+34, r25	; 0x22
    10a2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10a4:	89 a1       	ldd	r24, Y+33	; 0x21
    10a6:	9a a1       	ldd	r25, Y+34	; 0x22
    10a8:	00 97       	sbiw	r24, 0x00	; 0
    10aa:	69 f7       	brne	.-38     	; 0x1086 <C_LCD_voidSendCommand+0x1ca>
    10ac:	14 c0       	rjmp	.+40     	; 0x10d6 <C_LCD_voidSendCommand+0x21a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10ae:	6b a1       	ldd	r22, Y+35	; 0x23
    10b0:	7c a1       	ldd	r23, Y+36	; 0x24
    10b2:	8d a1       	ldd	r24, Y+37	; 0x25
    10b4:	9e a1       	ldd	r25, Y+38	; 0x26
    10b6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    10ba:	dc 01       	movw	r26, r24
    10bc:	cb 01       	movw	r24, r22
    10be:	9a a3       	std	Y+34, r25	; 0x22
    10c0:	89 a3       	std	Y+33, r24	; 0x21
    10c2:	89 a1       	ldd	r24, Y+33	; 0x21
    10c4:	9a a1       	ldd	r25, Y+34	; 0x22
    10c6:	9e 8f       	std	Y+30, r25	; 0x1e
    10c8:	8d 8f       	std	Y+29, r24	; 0x1d
    10ca:	8d 8d       	ldd	r24, Y+29	; 0x1d
    10cc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    10ce:	01 97       	sbiw	r24, 0x01	; 1
    10d0:	f1 f7       	brne	.-4      	; 0x10ce <C_LCD_voidSendCommand+0x212>
    10d2:	9e 8f       	std	Y+30, r25	; 0x1e
    10d4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);

	Local_u8Command = ((Copy_u8Command <<3) |DIO_u8AndWithPort(CLCD_DATA_PORT, 0b10000111));
    10d6:	8a ad       	ldd	r24, Y+58	; 0x3a
    10d8:	88 2f       	mov	r24, r24
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	88 0f       	add	r24, r24
    10de:	99 1f       	adc	r25, r25
    10e0:	88 0f       	add	r24, r24
    10e2:	99 1f       	adc	r25, r25
    10e4:	88 0f       	add	r24, r24
    10e6:	99 1f       	adc	r25, r25
    10e8:	18 2f       	mov	r17, r24
    10ea:	80 e0       	ldi	r24, 0x00	; 0
    10ec:	67 e8       	ldi	r22, 0x87	; 135
    10ee:	0e 94 4d 10 	call	0x209a	; 0x209a <DIO_u8AndWithPort>
    10f2:	81 2b       	or	r24, r17
    10f4:	89 af       	std	Y+57, r24	; 0x39
	DIO_u8SetPortValue(CLCD_DATA_PORT,Local_u8Command);
    10f6:	80 e0       	ldi	r24, 0x00	; 0
    10f8:	69 ad       	ldd	r22, Y+57	; 0x39
    10fa:	0e 94 67 0f 	call	0x1ece	; 0x1ece <DIO_u8SetPortValue>

	/*Send Enable pulse */
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    10fe:	80 e0       	ldi	r24, 0x00	; 0
    1100:	62 e0       	ldi	r22, 0x02	; 2
    1102:	41 e0       	ldi	r20, 0x01	; 1
    1104:	0e 94 55 0e 	call	0x1caa	; 0x1caa <DIO_u8SetPinValue>
    1108:	80 e0       	ldi	r24, 0x00	; 0
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	a0 e0       	ldi	r26, 0x00	; 0
    110e:	b0 e4       	ldi	r27, 0x40	; 64
    1110:	89 8f       	std	Y+25, r24	; 0x19
    1112:	9a 8f       	std	Y+26, r25	; 0x1a
    1114:	ab 8f       	std	Y+27, r26	; 0x1b
    1116:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1118:	69 8d       	ldd	r22, Y+25	; 0x19
    111a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    111c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    111e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1120:	20 e0       	ldi	r18, 0x00	; 0
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	4a ef       	ldi	r20, 0xFA	; 250
    1126:	54 e4       	ldi	r21, 0x44	; 68
    1128:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    112c:	dc 01       	movw	r26, r24
    112e:	cb 01       	movw	r24, r22
    1130:	8d 8b       	std	Y+21, r24	; 0x15
    1132:	9e 8b       	std	Y+22, r25	; 0x16
    1134:	af 8b       	std	Y+23, r26	; 0x17
    1136:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1138:	6d 89       	ldd	r22, Y+21	; 0x15
    113a:	7e 89       	ldd	r23, Y+22	; 0x16
    113c:	8f 89       	ldd	r24, Y+23	; 0x17
    113e:	98 8d       	ldd	r25, Y+24	; 0x18
    1140:	20 e0       	ldi	r18, 0x00	; 0
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	40 e8       	ldi	r20, 0x80	; 128
    1146:	5f e3       	ldi	r21, 0x3F	; 63
    1148:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    114c:	88 23       	and	r24, r24
    114e:	2c f4       	brge	.+10     	; 0x115a <C_LCD_voidSendCommand+0x29e>
		__ticks = 1;
    1150:	81 e0       	ldi	r24, 0x01	; 1
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	9c 8b       	std	Y+20, r25	; 0x14
    1156:	8b 8b       	std	Y+19, r24	; 0x13
    1158:	3f c0       	rjmp	.+126    	; 0x11d8 <C_LCD_voidSendCommand+0x31c>
	else if (__tmp > 65535)
    115a:	6d 89       	ldd	r22, Y+21	; 0x15
    115c:	7e 89       	ldd	r23, Y+22	; 0x16
    115e:	8f 89       	ldd	r24, Y+23	; 0x17
    1160:	98 8d       	ldd	r25, Y+24	; 0x18
    1162:	20 e0       	ldi	r18, 0x00	; 0
    1164:	3f ef       	ldi	r19, 0xFF	; 255
    1166:	4f e7       	ldi	r20, 0x7F	; 127
    1168:	57 e4       	ldi	r21, 0x47	; 71
    116a:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    116e:	18 16       	cp	r1, r24
    1170:	4c f5       	brge	.+82     	; 0x11c4 <C_LCD_voidSendCommand+0x308>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1172:	69 8d       	ldd	r22, Y+25	; 0x19
    1174:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1176:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1178:	9c 8d       	ldd	r25, Y+28	; 0x1c
    117a:	20 e0       	ldi	r18, 0x00	; 0
    117c:	30 e0       	ldi	r19, 0x00	; 0
    117e:	40 e2       	ldi	r20, 0x20	; 32
    1180:	51 e4       	ldi	r21, 0x41	; 65
    1182:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1186:	dc 01       	movw	r26, r24
    1188:	cb 01       	movw	r24, r22
    118a:	bc 01       	movw	r22, r24
    118c:	cd 01       	movw	r24, r26
    118e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1192:	dc 01       	movw	r26, r24
    1194:	cb 01       	movw	r24, r22
    1196:	9c 8b       	std	Y+20, r25	; 0x14
    1198:	8b 8b       	std	Y+19, r24	; 0x13
    119a:	0f c0       	rjmp	.+30     	; 0x11ba <C_LCD_voidSendCommand+0x2fe>
    119c:	88 ec       	ldi	r24, 0xC8	; 200
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	9a 8b       	std	Y+18, r25	; 0x12
    11a2:	89 8b       	std	Y+17, r24	; 0x11
    11a4:	89 89       	ldd	r24, Y+17	; 0x11
    11a6:	9a 89       	ldd	r25, Y+18	; 0x12
    11a8:	01 97       	sbiw	r24, 0x01	; 1
    11aa:	f1 f7       	brne	.-4      	; 0x11a8 <C_LCD_voidSendCommand+0x2ec>
    11ac:	9a 8b       	std	Y+18, r25	; 0x12
    11ae:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11b0:	8b 89       	ldd	r24, Y+19	; 0x13
    11b2:	9c 89       	ldd	r25, Y+20	; 0x14
    11b4:	01 97       	sbiw	r24, 0x01	; 1
    11b6:	9c 8b       	std	Y+20, r25	; 0x14
    11b8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11ba:	8b 89       	ldd	r24, Y+19	; 0x13
    11bc:	9c 89       	ldd	r25, Y+20	; 0x14
    11be:	00 97       	sbiw	r24, 0x00	; 0
    11c0:	69 f7       	brne	.-38     	; 0x119c <C_LCD_voidSendCommand+0x2e0>
    11c2:	14 c0       	rjmp	.+40     	; 0x11ec <C_LCD_voidSendCommand+0x330>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11c4:	6d 89       	ldd	r22, Y+21	; 0x15
    11c6:	7e 89       	ldd	r23, Y+22	; 0x16
    11c8:	8f 89       	ldd	r24, Y+23	; 0x17
    11ca:	98 8d       	ldd	r25, Y+24	; 0x18
    11cc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11d0:	dc 01       	movw	r26, r24
    11d2:	cb 01       	movw	r24, r22
    11d4:	9c 8b       	std	Y+20, r25	; 0x14
    11d6:	8b 8b       	std	Y+19, r24	; 0x13
    11d8:	8b 89       	ldd	r24, Y+19	; 0x13
    11da:	9c 89       	ldd	r25, Y+20	; 0x14
    11dc:	98 8b       	std	Y+16, r25	; 0x10
    11de:	8f 87       	std	Y+15, r24	; 0x0f
    11e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    11e2:	98 89       	ldd	r25, Y+16	; 0x10
    11e4:	01 97       	sbiw	r24, 0x01	; 1
    11e6:	f1 f7       	brne	.-4      	; 0x11e4 <C_LCD_voidSendCommand+0x328>
    11e8:	98 8b       	std	Y+16, r25	; 0x10
    11ea:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    11ec:	80 e0       	ldi	r24, 0x00	; 0
    11ee:	62 e0       	ldi	r22, 0x02	; 2
    11f0:	40 e0       	ldi	r20, 0x00	; 0
    11f2:	0e 94 55 0e 	call	0x1caa	; 0x1caa <DIO_u8SetPinValue>
    11f6:	80 e0       	ldi	r24, 0x00	; 0
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	a0 ea       	ldi	r26, 0xA0	; 160
    11fc:	b0 e4       	ldi	r27, 0x40	; 64
    11fe:	8b 87       	std	Y+11, r24	; 0x0b
    1200:	9c 87       	std	Y+12, r25	; 0x0c
    1202:	ad 87       	std	Y+13, r26	; 0x0d
    1204:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1206:	6b 85       	ldd	r22, Y+11	; 0x0b
    1208:	7c 85       	ldd	r23, Y+12	; 0x0c
    120a:	8d 85       	ldd	r24, Y+13	; 0x0d
    120c:	9e 85       	ldd	r25, Y+14	; 0x0e
    120e:	20 e0       	ldi	r18, 0x00	; 0
    1210:	30 e0       	ldi	r19, 0x00	; 0
    1212:	4a ef       	ldi	r20, 0xFA	; 250
    1214:	54 e4       	ldi	r21, 0x44	; 68
    1216:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    121a:	dc 01       	movw	r26, r24
    121c:	cb 01       	movw	r24, r22
    121e:	8f 83       	std	Y+7, r24	; 0x07
    1220:	98 87       	std	Y+8, r25	; 0x08
    1222:	a9 87       	std	Y+9, r26	; 0x09
    1224:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1226:	6f 81       	ldd	r22, Y+7	; 0x07
    1228:	78 85       	ldd	r23, Y+8	; 0x08
    122a:	89 85       	ldd	r24, Y+9	; 0x09
    122c:	9a 85       	ldd	r25, Y+10	; 0x0a
    122e:	20 e0       	ldi	r18, 0x00	; 0
    1230:	30 e0       	ldi	r19, 0x00	; 0
    1232:	40 e8       	ldi	r20, 0x80	; 128
    1234:	5f e3       	ldi	r21, 0x3F	; 63
    1236:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    123a:	88 23       	and	r24, r24
    123c:	2c f4       	brge	.+10     	; 0x1248 <C_LCD_voidSendCommand+0x38c>
		__ticks = 1;
    123e:	81 e0       	ldi	r24, 0x01	; 1
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	9e 83       	std	Y+6, r25	; 0x06
    1244:	8d 83       	std	Y+5, r24	; 0x05
    1246:	3f c0       	rjmp	.+126    	; 0x12c6 <C_LCD_voidSendCommand+0x40a>
	else if (__tmp > 65535)
    1248:	6f 81       	ldd	r22, Y+7	; 0x07
    124a:	78 85       	ldd	r23, Y+8	; 0x08
    124c:	89 85       	ldd	r24, Y+9	; 0x09
    124e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1250:	20 e0       	ldi	r18, 0x00	; 0
    1252:	3f ef       	ldi	r19, 0xFF	; 255
    1254:	4f e7       	ldi	r20, 0x7F	; 127
    1256:	57 e4       	ldi	r21, 0x47	; 71
    1258:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    125c:	18 16       	cp	r1, r24
    125e:	4c f5       	brge	.+82     	; 0x12b2 <C_LCD_voidSendCommand+0x3f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1260:	6b 85       	ldd	r22, Y+11	; 0x0b
    1262:	7c 85       	ldd	r23, Y+12	; 0x0c
    1264:	8d 85       	ldd	r24, Y+13	; 0x0d
    1266:	9e 85       	ldd	r25, Y+14	; 0x0e
    1268:	20 e0       	ldi	r18, 0x00	; 0
    126a:	30 e0       	ldi	r19, 0x00	; 0
    126c:	40 e2       	ldi	r20, 0x20	; 32
    126e:	51 e4       	ldi	r21, 0x41	; 65
    1270:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1274:	dc 01       	movw	r26, r24
    1276:	cb 01       	movw	r24, r22
    1278:	bc 01       	movw	r22, r24
    127a:	cd 01       	movw	r24, r26
    127c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1280:	dc 01       	movw	r26, r24
    1282:	cb 01       	movw	r24, r22
    1284:	9e 83       	std	Y+6, r25	; 0x06
    1286:	8d 83       	std	Y+5, r24	; 0x05
    1288:	0f c0       	rjmp	.+30     	; 0x12a8 <C_LCD_voidSendCommand+0x3ec>
    128a:	88 ec       	ldi	r24, 0xC8	; 200
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	9c 83       	std	Y+4, r25	; 0x04
    1290:	8b 83       	std	Y+3, r24	; 0x03
    1292:	8b 81       	ldd	r24, Y+3	; 0x03
    1294:	9c 81       	ldd	r25, Y+4	; 0x04
    1296:	01 97       	sbiw	r24, 0x01	; 1
    1298:	f1 f7       	brne	.-4      	; 0x1296 <C_LCD_voidSendCommand+0x3da>
    129a:	9c 83       	std	Y+4, r25	; 0x04
    129c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    129e:	8d 81       	ldd	r24, Y+5	; 0x05
    12a0:	9e 81       	ldd	r25, Y+6	; 0x06
    12a2:	01 97       	sbiw	r24, 0x01	; 1
    12a4:	9e 83       	std	Y+6, r25	; 0x06
    12a6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12a8:	8d 81       	ldd	r24, Y+5	; 0x05
    12aa:	9e 81       	ldd	r25, Y+6	; 0x06
    12ac:	00 97       	sbiw	r24, 0x00	; 0
    12ae:	69 f7       	brne	.-38     	; 0x128a <C_LCD_voidSendCommand+0x3ce>
    12b0:	14 c0       	rjmp	.+40     	; 0x12da <C_LCD_voidSendCommand+0x41e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12b2:	6f 81       	ldd	r22, Y+7	; 0x07
    12b4:	78 85       	ldd	r23, Y+8	; 0x08
    12b6:	89 85       	ldd	r24, Y+9	; 0x09
    12b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    12ba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    12be:	dc 01       	movw	r26, r24
    12c0:	cb 01       	movw	r24, r22
    12c2:	9e 83       	std	Y+6, r25	; 0x06
    12c4:	8d 83       	std	Y+5, r24	; 0x05
    12c6:	8d 81       	ldd	r24, Y+5	; 0x05
    12c8:	9e 81       	ldd	r25, Y+6	; 0x06
    12ca:	9a 83       	std	Y+2, r25	; 0x02
    12cc:	89 83       	std	Y+1, r24	; 0x01
    12ce:	89 81       	ldd	r24, Y+1	; 0x01
    12d0:	9a 81       	ldd	r25, Y+2	; 0x02
    12d2:	01 97       	sbiw	r24, 0x01	; 1
    12d4:	f1 f7       	brne	.-4      	; 0x12d2 <C_LCD_voidSendCommand+0x416>
    12d6:	9a 83       	std	Y+2, r25	; 0x02
    12d8:	89 83       	std	Y+1, r24	; 0x01

#endif



}
    12da:	ea 96       	adiw	r28, 0x3a	; 58
    12dc:	0f b6       	in	r0, 0x3f	; 63
    12de:	f8 94       	cli
    12e0:	de bf       	out	0x3e, r29	; 62
    12e2:	0f be       	out	0x3f, r0	; 63
    12e4:	cd bf       	out	0x3d, r28	; 61
    12e6:	cf 91       	pop	r28
    12e8:	df 91       	pop	r29
    12ea:	1f 91       	pop	r17
    12ec:	08 95       	ret

000012ee <CLCD_voidSendData>:

void CLCD_voidSendData(u8 Copy_u8Data)
{
    12ee:	1f 93       	push	r17
    12f0:	df 93       	push	r29
    12f2:	cf 93       	push	r28
    12f4:	cd b7       	in	r28, 0x3d	; 61
    12f6:	de b7       	in	r29, 0x3e	; 62
    12f8:	ea 97       	sbiw	r28, 0x3a	; 58
    12fa:	0f b6       	in	r0, 0x3f	; 63
    12fc:	f8 94       	cli
    12fe:	de bf       	out	0x3e, r29	; 62
    1300:	0f be       	out	0x3f, r0	; 63
    1302:	cd bf       	out	0x3d, r28	; 61
    1304:	8a af       	std	Y+58, r24	; 0x3a
	/*Set RS Pin to low to send data */
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_HIGH);
    1306:	80 e0       	ldi	r24, 0x00	; 0
    1308:	61 e0       	ldi	r22, 0x01	; 1
    130a:	41 e0       	ldi	r20, 0x01	; 1
    130c:	0e 94 55 0e 	call	0x1caa	; 0x1caa <DIO_u8SetPinValue>
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);

#elif   MODE_SELECT ==_4_BIT_MODE

	u8 Local_u8Data = (((Copy_u8Data >> 1) & 0b01111000) | DIO_u8AndWithPort(CLCD_DATA_PORT, 0b10000111));
    1310:	8a ad       	ldd	r24, Y+58	; 0x3a
    1312:	86 95       	lsr	r24
    1314:	18 2f       	mov	r17, r24
    1316:	18 77       	andi	r17, 0x78	; 120
    1318:	80 e0       	ldi	r24, 0x00	; 0
    131a:	67 e8       	ldi	r22, 0x87	; 135
    131c:	0e 94 4d 10 	call	0x209a	; 0x209a <DIO_u8AndWithPort>
    1320:	81 2b       	or	r24, r17
    1322:	89 af       	std	Y+57, r24	; 0x39
	/* Set Command to data pins */
	DIO_u8SetPortValue(CLCD_DATA_PORT,Local_u8Data);
    1324:	80 e0       	ldi	r24, 0x00	; 0
    1326:	69 ad       	ldd	r22, Y+57	; 0x39
    1328:	0e 94 67 0f 	call	0x1ece	; 0x1ece <DIO_u8SetPortValue>

	/*Send Enable pulse */
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    132c:	80 e0       	ldi	r24, 0x00	; 0
    132e:	62 e0       	ldi	r22, 0x02	; 2
    1330:	41 e0       	ldi	r20, 0x01	; 1
    1332:	0e 94 55 0e 	call	0x1caa	; 0x1caa <DIO_u8SetPinValue>
    1336:	80 e0       	ldi	r24, 0x00	; 0
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	a0 e0       	ldi	r26, 0x00	; 0
    133c:	b0 e4       	ldi	r27, 0x40	; 64
    133e:	8d ab       	std	Y+53, r24	; 0x35
    1340:	9e ab       	std	Y+54, r25	; 0x36
    1342:	af ab       	std	Y+55, r26	; 0x37
    1344:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1346:	6d a9       	ldd	r22, Y+53	; 0x35
    1348:	7e a9       	ldd	r23, Y+54	; 0x36
    134a:	8f a9       	ldd	r24, Y+55	; 0x37
    134c:	98 ad       	ldd	r25, Y+56	; 0x38
    134e:	20 e0       	ldi	r18, 0x00	; 0
    1350:	30 e0       	ldi	r19, 0x00	; 0
    1352:	4a ef       	ldi	r20, 0xFA	; 250
    1354:	54 e4       	ldi	r21, 0x44	; 68
    1356:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    135a:	dc 01       	movw	r26, r24
    135c:	cb 01       	movw	r24, r22
    135e:	89 ab       	std	Y+49, r24	; 0x31
    1360:	9a ab       	std	Y+50, r25	; 0x32
    1362:	ab ab       	std	Y+51, r26	; 0x33
    1364:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1366:	69 a9       	ldd	r22, Y+49	; 0x31
    1368:	7a a9       	ldd	r23, Y+50	; 0x32
    136a:	8b a9       	ldd	r24, Y+51	; 0x33
    136c:	9c a9       	ldd	r25, Y+52	; 0x34
    136e:	20 e0       	ldi	r18, 0x00	; 0
    1370:	30 e0       	ldi	r19, 0x00	; 0
    1372:	40 e8       	ldi	r20, 0x80	; 128
    1374:	5f e3       	ldi	r21, 0x3F	; 63
    1376:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    137a:	88 23       	and	r24, r24
    137c:	2c f4       	brge	.+10     	; 0x1388 <CLCD_voidSendData+0x9a>
		__ticks = 1;
    137e:	81 e0       	ldi	r24, 0x01	; 1
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	98 ab       	std	Y+48, r25	; 0x30
    1384:	8f a7       	std	Y+47, r24	; 0x2f
    1386:	3f c0       	rjmp	.+126    	; 0x1406 <CLCD_voidSendData+0x118>
	else if (__tmp > 65535)
    1388:	69 a9       	ldd	r22, Y+49	; 0x31
    138a:	7a a9       	ldd	r23, Y+50	; 0x32
    138c:	8b a9       	ldd	r24, Y+51	; 0x33
    138e:	9c a9       	ldd	r25, Y+52	; 0x34
    1390:	20 e0       	ldi	r18, 0x00	; 0
    1392:	3f ef       	ldi	r19, 0xFF	; 255
    1394:	4f e7       	ldi	r20, 0x7F	; 127
    1396:	57 e4       	ldi	r21, 0x47	; 71
    1398:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    139c:	18 16       	cp	r1, r24
    139e:	4c f5       	brge	.+82     	; 0x13f2 <CLCD_voidSendData+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13a0:	6d a9       	ldd	r22, Y+53	; 0x35
    13a2:	7e a9       	ldd	r23, Y+54	; 0x36
    13a4:	8f a9       	ldd	r24, Y+55	; 0x37
    13a6:	98 ad       	ldd	r25, Y+56	; 0x38
    13a8:	20 e0       	ldi	r18, 0x00	; 0
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	40 e2       	ldi	r20, 0x20	; 32
    13ae:	51 e4       	ldi	r21, 0x41	; 65
    13b0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13b4:	dc 01       	movw	r26, r24
    13b6:	cb 01       	movw	r24, r22
    13b8:	bc 01       	movw	r22, r24
    13ba:	cd 01       	movw	r24, r26
    13bc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13c0:	dc 01       	movw	r26, r24
    13c2:	cb 01       	movw	r24, r22
    13c4:	98 ab       	std	Y+48, r25	; 0x30
    13c6:	8f a7       	std	Y+47, r24	; 0x2f
    13c8:	0f c0       	rjmp	.+30     	; 0x13e8 <CLCD_voidSendData+0xfa>
    13ca:	88 ec       	ldi	r24, 0xC8	; 200
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	9e a7       	std	Y+46, r25	; 0x2e
    13d0:	8d a7       	std	Y+45, r24	; 0x2d
    13d2:	8d a5       	ldd	r24, Y+45	; 0x2d
    13d4:	9e a5       	ldd	r25, Y+46	; 0x2e
    13d6:	01 97       	sbiw	r24, 0x01	; 1
    13d8:	f1 f7       	brne	.-4      	; 0x13d6 <CLCD_voidSendData+0xe8>
    13da:	9e a7       	std	Y+46, r25	; 0x2e
    13dc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13de:	8f a5       	ldd	r24, Y+47	; 0x2f
    13e0:	98 a9       	ldd	r25, Y+48	; 0x30
    13e2:	01 97       	sbiw	r24, 0x01	; 1
    13e4:	98 ab       	std	Y+48, r25	; 0x30
    13e6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13e8:	8f a5       	ldd	r24, Y+47	; 0x2f
    13ea:	98 a9       	ldd	r25, Y+48	; 0x30
    13ec:	00 97       	sbiw	r24, 0x00	; 0
    13ee:	69 f7       	brne	.-38     	; 0x13ca <CLCD_voidSendData+0xdc>
    13f0:	14 c0       	rjmp	.+40     	; 0x141a <CLCD_voidSendData+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13f2:	69 a9       	ldd	r22, Y+49	; 0x31
    13f4:	7a a9       	ldd	r23, Y+50	; 0x32
    13f6:	8b a9       	ldd	r24, Y+51	; 0x33
    13f8:	9c a9       	ldd	r25, Y+52	; 0x34
    13fa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13fe:	dc 01       	movw	r26, r24
    1400:	cb 01       	movw	r24, r22
    1402:	98 ab       	std	Y+48, r25	; 0x30
    1404:	8f a7       	std	Y+47, r24	; 0x2f
    1406:	8f a5       	ldd	r24, Y+47	; 0x2f
    1408:	98 a9       	ldd	r25, Y+48	; 0x30
    140a:	9c a7       	std	Y+44, r25	; 0x2c
    140c:	8b a7       	std	Y+43, r24	; 0x2b
    140e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1410:	9c a5       	ldd	r25, Y+44	; 0x2c
    1412:	01 97       	sbiw	r24, 0x01	; 1
    1414:	f1 f7       	brne	.-4      	; 0x1412 <CLCD_voidSendData+0x124>
    1416:	9c a7       	std	Y+44, r25	; 0x2c
    1418:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    141a:	80 e0       	ldi	r24, 0x00	; 0
    141c:	62 e0       	ldi	r22, 0x02	; 2
    141e:	40 e0       	ldi	r20, 0x00	; 0
    1420:	0e 94 55 0e 	call	0x1caa	; 0x1caa <DIO_u8SetPinValue>
    1424:	80 e0       	ldi	r24, 0x00	; 0
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	a0 ea       	ldi	r26, 0xA0	; 160
    142a:	b0 e4       	ldi	r27, 0x40	; 64
    142c:	8f a3       	std	Y+39, r24	; 0x27
    142e:	98 a7       	std	Y+40, r25	; 0x28
    1430:	a9 a7       	std	Y+41, r26	; 0x29
    1432:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1434:	6f a1       	ldd	r22, Y+39	; 0x27
    1436:	78 a5       	ldd	r23, Y+40	; 0x28
    1438:	89 a5       	ldd	r24, Y+41	; 0x29
    143a:	9a a5       	ldd	r25, Y+42	; 0x2a
    143c:	20 e0       	ldi	r18, 0x00	; 0
    143e:	30 e0       	ldi	r19, 0x00	; 0
    1440:	4a ef       	ldi	r20, 0xFA	; 250
    1442:	54 e4       	ldi	r21, 0x44	; 68
    1444:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1448:	dc 01       	movw	r26, r24
    144a:	cb 01       	movw	r24, r22
    144c:	8b a3       	std	Y+35, r24	; 0x23
    144e:	9c a3       	std	Y+36, r25	; 0x24
    1450:	ad a3       	std	Y+37, r26	; 0x25
    1452:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1454:	6b a1       	ldd	r22, Y+35	; 0x23
    1456:	7c a1       	ldd	r23, Y+36	; 0x24
    1458:	8d a1       	ldd	r24, Y+37	; 0x25
    145a:	9e a1       	ldd	r25, Y+38	; 0x26
    145c:	20 e0       	ldi	r18, 0x00	; 0
    145e:	30 e0       	ldi	r19, 0x00	; 0
    1460:	40 e8       	ldi	r20, 0x80	; 128
    1462:	5f e3       	ldi	r21, 0x3F	; 63
    1464:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    1468:	88 23       	and	r24, r24
    146a:	2c f4       	brge	.+10     	; 0x1476 <CLCD_voidSendData+0x188>
		__ticks = 1;
    146c:	81 e0       	ldi	r24, 0x01	; 1
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	9a a3       	std	Y+34, r25	; 0x22
    1472:	89 a3       	std	Y+33, r24	; 0x21
    1474:	3f c0       	rjmp	.+126    	; 0x14f4 <CLCD_voidSendData+0x206>
	else if (__tmp > 65535)
    1476:	6b a1       	ldd	r22, Y+35	; 0x23
    1478:	7c a1       	ldd	r23, Y+36	; 0x24
    147a:	8d a1       	ldd	r24, Y+37	; 0x25
    147c:	9e a1       	ldd	r25, Y+38	; 0x26
    147e:	20 e0       	ldi	r18, 0x00	; 0
    1480:	3f ef       	ldi	r19, 0xFF	; 255
    1482:	4f e7       	ldi	r20, 0x7F	; 127
    1484:	57 e4       	ldi	r21, 0x47	; 71
    1486:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    148a:	18 16       	cp	r1, r24
    148c:	4c f5       	brge	.+82     	; 0x14e0 <CLCD_voidSendData+0x1f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    148e:	6f a1       	ldd	r22, Y+39	; 0x27
    1490:	78 a5       	ldd	r23, Y+40	; 0x28
    1492:	89 a5       	ldd	r24, Y+41	; 0x29
    1494:	9a a5       	ldd	r25, Y+42	; 0x2a
    1496:	20 e0       	ldi	r18, 0x00	; 0
    1498:	30 e0       	ldi	r19, 0x00	; 0
    149a:	40 e2       	ldi	r20, 0x20	; 32
    149c:	51 e4       	ldi	r21, 0x41	; 65
    149e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14a2:	dc 01       	movw	r26, r24
    14a4:	cb 01       	movw	r24, r22
    14a6:	bc 01       	movw	r22, r24
    14a8:	cd 01       	movw	r24, r26
    14aa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14ae:	dc 01       	movw	r26, r24
    14b0:	cb 01       	movw	r24, r22
    14b2:	9a a3       	std	Y+34, r25	; 0x22
    14b4:	89 a3       	std	Y+33, r24	; 0x21
    14b6:	0f c0       	rjmp	.+30     	; 0x14d6 <CLCD_voidSendData+0x1e8>
    14b8:	88 ec       	ldi	r24, 0xC8	; 200
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	98 a3       	std	Y+32, r25	; 0x20
    14be:	8f 8f       	std	Y+31, r24	; 0x1f
    14c0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    14c2:	98 a1       	ldd	r25, Y+32	; 0x20
    14c4:	01 97       	sbiw	r24, 0x01	; 1
    14c6:	f1 f7       	brne	.-4      	; 0x14c4 <CLCD_voidSendData+0x1d6>
    14c8:	98 a3       	std	Y+32, r25	; 0x20
    14ca:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14cc:	89 a1       	ldd	r24, Y+33	; 0x21
    14ce:	9a a1       	ldd	r25, Y+34	; 0x22
    14d0:	01 97       	sbiw	r24, 0x01	; 1
    14d2:	9a a3       	std	Y+34, r25	; 0x22
    14d4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14d6:	89 a1       	ldd	r24, Y+33	; 0x21
    14d8:	9a a1       	ldd	r25, Y+34	; 0x22
    14da:	00 97       	sbiw	r24, 0x00	; 0
    14dc:	69 f7       	brne	.-38     	; 0x14b8 <CLCD_voidSendData+0x1ca>
    14de:	14 c0       	rjmp	.+40     	; 0x1508 <CLCD_voidSendData+0x21a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14e0:	6b a1       	ldd	r22, Y+35	; 0x23
    14e2:	7c a1       	ldd	r23, Y+36	; 0x24
    14e4:	8d a1       	ldd	r24, Y+37	; 0x25
    14e6:	9e a1       	ldd	r25, Y+38	; 0x26
    14e8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14ec:	dc 01       	movw	r26, r24
    14ee:	cb 01       	movw	r24, r22
    14f0:	9a a3       	std	Y+34, r25	; 0x22
    14f2:	89 a3       	std	Y+33, r24	; 0x21
    14f4:	89 a1       	ldd	r24, Y+33	; 0x21
    14f6:	9a a1       	ldd	r25, Y+34	; 0x22
    14f8:	9e 8f       	std	Y+30, r25	; 0x1e
    14fa:	8d 8f       	std	Y+29, r24	; 0x1d
    14fc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    14fe:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1500:	01 97       	sbiw	r24, 0x01	; 1
    1502:	f1 f7       	brne	.-4      	; 0x1500 <CLCD_voidSendData+0x212>
    1504:	9e 8f       	std	Y+30, r25	; 0x1e
    1506:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);

	Local_u8Data = ((Copy_u8Data <<3) |DIO_u8AndWithPort(CLCD_DATA_PORT, 0b10000111));
    1508:	8a ad       	ldd	r24, Y+58	; 0x3a
    150a:	88 2f       	mov	r24, r24
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	88 0f       	add	r24, r24
    1510:	99 1f       	adc	r25, r25
    1512:	88 0f       	add	r24, r24
    1514:	99 1f       	adc	r25, r25
    1516:	88 0f       	add	r24, r24
    1518:	99 1f       	adc	r25, r25
    151a:	18 2f       	mov	r17, r24
    151c:	80 e0       	ldi	r24, 0x00	; 0
    151e:	67 e8       	ldi	r22, 0x87	; 135
    1520:	0e 94 4d 10 	call	0x209a	; 0x209a <DIO_u8AndWithPort>
    1524:	81 2b       	or	r24, r17
    1526:	89 af       	std	Y+57, r24	; 0x39

	DIO_u8SetPortValue(CLCD_DATA_PORT,Local_u8Data);
    1528:	80 e0       	ldi	r24, 0x00	; 0
    152a:	69 ad       	ldd	r22, Y+57	; 0x39
    152c:	0e 94 67 0f 	call	0x1ece	; 0x1ece <DIO_u8SetPortValue>

	/*Send Enable pulse */
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    1530:	80 e0       	ldi	r24, 0x00	; 0
    1532:	62 e0       	ldi	r22, 0x02	; 2
    1534:	41 e0       	ldi	r20, 0x01	; 1
    1536:	0e 94 55 0e 	call	0x1caa	; 0x1caa <DIO_u8SetPinValue>
    153a:	80 e0       	ldi	r24, 0x00	; 0
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	a0 e0       	ldi	r26, 0x00	; 0
    1540:	b0 e4       	ldi	r27, 0x40	; 64
    1542:	89 8f       	std	Y+25, r24	; 0x19
    1544:	9a 8f       	std	Y+26, r25	; 0x1a
    1546:	ab 8f       	std	Y+27, r26	; 0x1b
    1548:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    154a:	69 8d       	ldd	r22, Y+25	; 0x19
    154c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    154e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1550:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1552:	20 e0       	ldi	r18, 0x00	; 0
    1554:	30 e0       	ldi	r19, 0x00	; 0
    1556:	4a ef       	ldi	r20, 0xFA	; 250
    1558:	54 e4       	ldi	r21, 0x44	; 68
    155a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    155e:	dc 01       	movw	r26, r24
    1560:	cb 01       	movw	r24, r22
    1562:	8d 8b       	std	Y+21, r24	; 0x15
    1564:	9e 8b       	std	Y+22, r25	; 0x16
    1566:	af 8b       	std	Y+23, r26	; 0x17
    1568:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    156a:	6d 89       	ldd	r22, Y+21	; 0x15
    156c:	7e 89       	ldd	r23, Y+22	; 0x16
    156e:	8f 89       	ldd	r24, Y+23	; 0x17
    1570:	98 8d       	ldd	r25, Y+24	; 0x18
    1572:	20 e0       	ldi	r18, 0x00	; 0
    1574:	30 e0       	ldi	r19, 0x00	; 0
    1576:	40 e8       	ldi	r20, 0x80	; 128
    1578:	5f e3       	ldi	r21, 0x3F	; 63
    157a:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    157e:	88 23       	and	r24, r24
    1580:	2c f4       	brge	.+10     	; 0x158c <CLCD_voidSendData+0x29e>
		__ticks = 1;
    1582:	81 e0       	ldi	r24, 0x01	; 1
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	9c 8b       	std	Y+20, r25	; 0x14
    1588:	8b 8b       	std	Y+19, r24	; 0x13
    158a:	3f c0       	rjmp	.+126    	; 0x160a <CLCD_voidSendData+0x31c>
	else if (__tmp > 65535)
    158c:	6d 89       	ldd	r22, Y+21	; 0x15
    158e:	7e 89       	ldd	r23, Y+22	; 0x16
    1590:	8f 89       	ldd	r24, Y+23	; 0x17
    1592:	98 8d       	ldd	r25, Y+24	; 0x18
    1594:	20 e0       	ldi	r18, 0x00	; 0
    1596:	3f ef       	ldi	r19, 0xFF	; 255
    1598:	4f e7       	ldi	r20, 0x7F	; 127
    159a:	57 e4       	ldi	r21, 0x47	; 71
    159c:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    15a0:	18 16       	cp	r1, r24
    15a2:	4c f5       	brge	.+82     	; 0x15f6 <CLCD_voidSendData+0x308>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15a4:	69 8d       	ldd	r22, Y+25	; 0x19
    15a6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15aa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15ac:	20 e0       	ldi	r18, 0x00	; 0
    15ae:	30 e0       	ldi	r19, 0x00	; 0
    15b0:	40 e2       	ldi	r20, 0x20	; 32
    15b2:	51 e4       	ldi	r21, 0x41	; 65
    15b4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15b8:	dc 01       	movw	r26, r24
    15ba:	cb 01       	movw	r24, r22
    15bc:	bc 01       	movw	r22, r24
    15be:	cd 01       	movw	r24, r26
    15c0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15c4:	dc 01       	movw	r26, r24
    15c6:	cb 01       	movw	r24, r22
    15c8:	9c 8b       	std	Y+20, r25	; 0x14
    15ca:	8b 8b       	std	Y+19, r24	; 0x13
    15cc:	0f c0       	rjmp	.+30     	; 0x15ec <CLCD_voidSendData+0x2fe>
    15ce:	88 ec       	ldi	r24, 0xC8	; 200
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	9a 8b       	std	Y+18, r25	; 0x12
    15d4:	89 8b       	std	Y+17, r24	; 0x11
    15d6:	89 89       	ldd	r24, Y+17	; 0x11
    15d8:	9a 89       	ldd	r25, Y+18	; 0x12
    15da:	01 97       	sbiw	r24, 0x01	; 1
    15dc:	f1 f7       	brne	.-4      	; 0x15da <CLCD_voidSendData+0x2ec>
    15de:	9a 8b       	std	Y+18, r25	; 0x12
    15e0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15e2:	8b 89       	ldd	r24, Y+19	; 0x13
    15e4:	9c 89       	ldd	r25, Y+20	; 0x14
    15e6:	01 97       	sbiw	r24, 0x01	; 1
    15e8:	9c 8b       	std	Y+20, r25	; 0x14
    15ea:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15ec:	8b 89       	ldd	r24, Y+19	; 0x13
    15ee:	9c 89       	ldd	r25, Y+20	; 0x14
    15f0:	00 97       	sbiw	r24, 0x00	; 0
    15f2:	69 f7       	brne	.-38     	; 0x15ce <CLCD_voidSendData+0x2e0>
    15f4:	14 c0       	rjmp	.+40     	; 0x161e <CLCD_voidSendData+0x330>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15f6:	6d 89       	ldd	r22, Y+21	; 0x15
    15f8:	7e 89       	ldd	r23, Y+22	; 0x16
    15fa:	8f 89       	ldd	r24, Y+23	; 0x17
    15fc:	98 8d       	ldd	r25, Y+24	; 0x18
    15fe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1602:	dc 01       	movw	r26, r24
    1604:	cb 01       	movw	r24, r22
    1606:	9c 8b       	std	Y+20, r25	; 0x14
    1608:	8b 8b       	std	Y+19, r24	; 0x13
    160a:	8b 89       	ldd	r24, Y+19	; 0x13
    160c:	9c 89       	ldd	r25, Y+20	; 0x14
    160e:	98 8b       	std	Y+16, r25	; 0x10
    1610:	8f 87       	std	Y+15, r24	; 0x0f
    1612:	8f 85       	ldd	r24, Y+15	; 0x0f
    1614:	98 89       	ldd	r25, Y+16	; 0x10
    1616:	01 97       	sbiw	r24, 0x01	; 1
    1618:	f1 f7       	brne	.-4      	; 0x1616 <CLCD_voidSendData+0x328>
    161a:	98 8b       	std	Y+16, r25	; 0x10
    161c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    161e:	80 e0       	ldi	r24, 0x00	; 0
    1620:	62 e0       	ldi	r22, 0x02	; 2
    1622:	40 e0       	ldi	r20, 0x00	; 0
    1624:	0e 94 55 0e 	call	0x1caa	; 0x1caa <DIO_u8SetPinValue>
    1628:	80 e0       	ldi	r24, 0x00	; 0
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	a0 ea       	ldi	r26, 0xA0	; 160
    162e:	b0 e4       	ldi	r27, 0x40	; 64
    1630:	8b 87       	std	Y+11, r24	; 0x0b
    1632:	9c 87       	std	Y+12, r25	; 0x0c
    1634:	ad 87       	std	Y+13, r26	; 0x0d
    1636:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1638:	6b 85       	ldd	r22, Y+11	; 0x0b
    163a:	7c 85       	ldd	r23, Y+12	; 0x0c
    163c:	8d 85       	ldd	r24, Y+13	; 0x0d
    163e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1640:	20 e0       	ldi	r18, 0x00	; 0
    1642:	30 e0       	ldi	r19, 0x00	; 0
    1644:	4a ef       	ldi	r20, 0xFA	; 250
    1646:	54 e4       	ldi	r21, 0x44	; 68
    1648:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    164c:	dc 01       	movw	r26, r24
    164e:	cb 01       	movw	r24, r22
    1650:	8f 83       	std	Y+7, r24	; 0x07
    1652:	98 87       	std	Y+8, r25	; 0x08
    1654:	a9 87       	std	Y+9, r26	; 0x09
    1656:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1658:	6f 81       	ldd	r22, Y+7	; 0x07
    165a:	78 85       	ldd	r23, Y+8	; 0x08
    165c:	89 85       	ldd	r24, Y+9	; 0x09
    165e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1660:	20 e0       	ldi	r18, 0x00	; 0
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	40 e8       	ldi	r20, 0x80	; 128
    1666:	5f e3       	ldi	r21, 0x3F	; 63
    1668:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    166c:	88 23       	and	r24, r24
    166e:	2c f4       	brge	.+10     	; 0x167a <CLCD_voidSendData+0x38c>
		__ticks = 1;
    1670:	81 e0       	ldi	r24, 0x01	; 1
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	9e 83       	std	Y+6, r25	; 0x06
    1676:	8d 83       	std	Y+5, r24	; 0x05
    1678:	3f c0       	rjmp	.+126    	; 0x16f8 <CLCD_voidSendData+0x40a>
	else if (__tmp > 65535)
    167a:	6f 81       	ldd	r22, Y+7	; 0x07
    167c:	78 85       	ldd	r23, Y+8	; 0x08
    167e:	89 85       	ldd	r24, Y+9	; 0x09
    1680:	9a 85       	ldd	r25, Y+10	; 0x0a
    1682:	20 e0       	ldi	r18, 0x00	; 0
    1684:	3f ef       	ldi	r19, 0xFF	; 255
    1686:	4f e7       	ldi	r20, 0x7F	; 127
    1688:	57 e4       	ldi	r21, 0x47	; 71
    168a:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    168e:	18 16       	cp	r1, r24
    1690:	4c f5       	brge	.+82     	; 0x16e4 <CLCD_voidSendData+0x3f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1692:	6b 85       	ldd	r22, Y+11	; 0x0b
    1694:	7c 85       	ldd	r23, Y+12	; 0x0c
    1696:	8d 85       	ldd	r24, Y+13	; 0x0d
    1698:	9e 85       	ldd	r25, Y+14	; 0x0e
    169a:	20 e0       	ldi	r18, 0x00	; 0
    169c:	30 e0       	ldi	r19, 0x00	; 0
    169e:	40 e2       	ldi	r20, 0x20	; 32
    16a0:	51 e4       	ldi	r21, 0x41	; 65
    16a2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16a6:	dc 01       	movw	r26, r24
    16a8:	cb 01       	movw	r24, r22
    16aa:	bc 01       	movw	r22, r24
    16ac:	cd 01       	movw	r24, r26
    16ae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16b2:	dc 01       	movw	r26, r24
    16b4:	cb 01       	movw	r24, r22
    16b6:	9e 83       	std	Y+6, r25	; 0x06
    16b8:	8d 83       	std	Y+5, r24	; 0x05
    16ba:	0f c0       	rjmp	.+30     	; 0x16da <CLCD_voidSendData+0x3ec>
    16bc:	88 ec       	ldi	r24, 0xC8	; 200
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	9c 83       	std	Y+4, r25	; 0x04
    16c2:	8b 83       	std	Y+3, r24	; 0x03
    16c4:	8b 81       	ldd	r24, Y+3	; 0x03
    16c6:	9c 81       	ldd	r25, Y+4	; 0x04
    16c8:	01 97       	sbiw	r24, 0x01	; 1
    16ca:	f1 f7       	brne	.-4      	; 0x16c8 <CLCD_voidSendData+0x3da>
    16cc:	9c 83       	std	Y+4, r25	; 0x04
    16ce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16d0:	8d 81       	ldd	r24, Y+5	; 0x05
    16d2:	9e 81       	ldd	r25, Y+6	; 0x06
    16d4:	01 97       	sbiw	r24, 0x01	; 1
    16d6:	9e 83       	std	Y+6, r25	; 0x06
    16d8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16da:	8d 81       	ldd	r24, Y+5	; 0x05
    16dc:	9e 81       	ldd	r25, Y+6	; 0x06
    16de:	00 97       	sbiw	r24, 0x00	; 0
    16e0:	69 f7       	brne	.-38     	; 0x16bc <CLCD_voidSendData+0x3ce>
    16e2:	14 c0       	rjmp	.+40     	; 0x170c <CLCD_voidSendData+0x41e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16e4:	6f 81       	ldd	r22, Y+7	; 0x07
    16e6:	78 85       	ldd	r23, Y+8	; 0x08
    16e8:	89 85       	ldd	r24, Y+9	; 0x09
    16ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    16ec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16f0:	dc 01       	movw	r26, r24
    16f2:	cb 01       	movw	r24, r22
    16f4:	9e 83       	std	Y+6, r25	; 0x06
    16f6:	8d 83       	std	Y+5, r24	; 0x05
    16f8:	8d 81       	ldd	r24, Y+5	; 0x05
    16fa:	9e 81       	ldd	r25, Y+6	; 0x06
    16fc:	9a 83       	std	Y+2, r25	; 0x02
    16fe:	89 83       	std	Y+1, r24	; 0x01
    1700:	89 81       	ldd	r24, Y+1	; 0x01
    1702:	9a 81       	ldd	r25, Y+2	; 0x02
    1704:	01 97       	sbiw	r24, 0x01	; 1
    1706:	f1 f7       	brne	.-4      	; 0x1704 <CLCD_voidSendData+0x416>
    1708:	9a 83       	std	Y+2, r25	; 0x02
    170a:	89 83       	std	Y+1, r24	; 0x01



#endif

}
    170c:	ea 96       	adiw	r28, 0x3a	; 58
    170e:	0f b6       	in	r0, 0x3f	; 63
    1710:	f8 94       	cli
    1712:	de bf       	out	0x3e, r29	; 62
    1714:	0f be       	out	0x3f, r0	; 63
    1716:	cd bf       	out	0x3d, r28	; 61
    1718:	cf 91       	pop	r28
    171a:	df 91       	pop	r29
    171c:	1f 91       	pop	r17
    171e:	08 95       	ret

00001720 <CLCD_voidInit>:

void CLCD_voidInit(void)
{
    1720:	df 93       	push	r29
    1722:	cf 93       	push	r28
    1724:	cd b7       	in	r28, 0x3d	; 61
    1726:	de b7       	in	r29, 0x3e	; 62
    1728:	2e 97       	sbiw	r28, 0x0e	; 14
    172a:	0f b6       	in	r0, 0x3f	; 63
    172c:	f8 94       	cli
    172e:	de bf       	out	0x3e, r29	; 62
    1730:	0f be       	out	0x3f, r0	; 63
    1732:	cd bf       	out	0x3d, r28	; 61
    1734:	80 e0       	ldi	r24, 0x00	; 0
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	a0 e2       	ldi	r26, 0x20	; 32
    173a:	b2 e4       	ldi	r27, 0x42	; 66
    173c:	8b 87       	std	Y+11, r24	; 0x0b
    173e:	9c 87       	std	Y+12, r25	; 0x0c
    1740:	ad 87       	std	Y+13, r26	; 0x0d
    1742:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1744:	6b 85       	ldd	r22, Y+11	; 0x0b
    1746:	7c 85       	ldd	r23, Y+12	; 0x0c
    1748:	8d 85       	ldd	r24, Y+13	; 0x0d
    174a:	9e 85       	ldd	r25, Y+14	; 0x0e
    174c:	20 e0       	ldi	r18, 0x00	; 0
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	4a ef       	ldi	r20, 0xFA	; 250
    1752:	54 e4       	ldi	r21, 0x44	; 68
    1754:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1758:	dc 01       	movw	r26, r24
    175a:	cb 01       	movw	r24, r22
    175c:	8f 83       	std	Y+7, r24	; 0x07
    175e:	98 87       	std	Y+8, r25	; 0x08
    1760:	a9 87       	std	Y+9, r26	; 0x09
    1762:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1764:	6f 81       	ldd	r22, Y+7	; 0x07
    1766:	78 85       	ldd	r23, Y+8	; 0x08
    1768:	89 85       	ldd	r24, Y+9	; 0x09
    176a:	9a 85       	ldd	r25, Y+10	; 0x0a
    176c:	20 e0       	ldi	r18, 0x00	; 0
    176e:	30 e0       	ldi	r19, 0x00	; 0
    1770:	40 e8       	ldi	r20, 0x80	; 128
    1772:	5f e3       	ldi	r21, 0x3F	; 63
    1774:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    1778:	88 23       	and	r24, r24
    177a:	2c f4       	brge	.+10     	; 0x1786 <CLCD_voidInit+0x66>
		__ticks = 1;
    177c:	81 e0       	ldi	r24, 0x01	; 1
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	9e 83       	std	Y+6, r25	; 0x06
    1782:	8d 83       	std	Y+5, r24	; 0x05
    1784:	3f c0       	rjmp	.+126    	; 0x1804 <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
    1786:	6f 81       	ldd	r22, Y+7	; 0x07
    1788:	78 85       	ldd	r23, Y+8	; 0x08
    178a:	89 85       	ldd	r24, Y+9	; 0x09
    178c:	9a 85       	ldd	r25, Y+10	; 0x0a
    178e:	20 e0       	ldi	r18, 0x00	; 0
    1790:	3f ef       	ldi	r19, 0xFF	; 255
    1792:	4f e7       	ldi	r20, 0x7F	; 127
    1794:	57 e4       	ldi	r21, 0x47	; 71
    1796:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    179a:	18 16       	cp	r1, r24
    179c:	4c f5       	brge	.+82     	; 0x17f0 <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    179e:	6b 85       	ldd	r22, Y+11	; 0x0b
    17a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    17a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    17a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    17a6:	20 e0       	ldi	r18, 0x00	; 0
    17a8:	30 e0       	ldi	r19, 0x00	; 0
    17aa:	40 e2       	ldi	r20, 0x20	; 32
    17ac:	51 e4       	ldi	r21, 0x41	; 65
    17ae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17b2:	dc 01       	movw	r26, r24
    17b4:	cb 01       	movw	r24, r22
    17b6:	bc 01       	movw	r22, r24
    17b8:	cd 01       	movw	r24, r26
    17ba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17be:	dc 01       	movw	r26, r24
    17c0:	cb 01       	movw	r24, r22
    17c2:	9e 83       	std	Y+6, r25	; 0x06
    17c4:	8d 83       	std	Y+5, r24	; 0x05
    17c6:	0f c0       	rjmp	.+30     	; 0x17e6 <CLCD_voidInit+0xc6>
    17c8:	88 ec       	ldi	r24, 0xC8	; 200
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	9c 83       	std	Y+4, r25	; 0x04
    17ce:	8b 83       	std	Y+3, r24	; 0x03
    17d0:	8b 81       	ldd	r24, Y+3	; 0x03
    17d2:	9c 81       	ldd	r25, Y+4	; 0x04
    17d4:	01 97       	sbiw	r24, 0x01	; 1
    17d6:	f1 f7       	brne	.-4      	; 0x17d4 <CLCD_voidInit+0xb4>
    17d8:	9c 83       	std	Y+4, r25	; 0x04
    17da:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17dc:	8d 81       	ldd	r24, Y+5	; 0x05
    17de:	9e 81       	ldd	r25, Y+6	; 0x06
    17e0:	01 97       	sbiw	r24, 0x01	; 1
    17e2:	9e 83       	std	Y+6, r25	; 0x06
    17e4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17e6:	8d 81       	ldd	r24, Y+5	; 0x05
    17e8:	9e 81       	ldd	r25, Y+6	; 0x06
    17ea:	00 97       	sbiw	r24, 0x00	; 0
    17ec:	69 f7       	brne	.-38     	; 0x17c8 <CLCD_voidInit+0xa8>
    17ee:	14 c0       	rjmp	.+40     	; 0x1818 <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17f0:	6f 81       	ldd	r22, Y+7	; 0x07
    17f2:	78 85       	ldd	r23, Y+8	; 0x08
    17f4:	89 85       	ldd	r24, Y+9	; 0x09
    17f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    17f8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17fc:	dc 01       	movw	r26, r24
    17fe:	cb 01       	movw	r24, r22
    1800:	9e 83       	std	Y+6, r25	; 0x06
    1802:	8d 83       	std	Y+5, r24	; 0x05
    1804:	8d 81       	ldd	r24, Y+5	; 0x05
    1806:	9e 81       	ldd	r25, Y+6	; 0x06
    1808:	9a 83       	std	Y+2, r25	; 0x02
    180a:	89 83       	std	Y+1, r24	; 0x01
    180c:	89 81       	ldd	r24, Y+1	; 0x01
    180e:	9a 81       	ldd	r25, Y+2	; 0x02
    1810:	01 97       	sbiw	r24, 0x01	; 1
    1812:	f1 f7       	brne	.-4      	; 0x1810 <CLCD_voidInit+0xf0>
    1814:	9a 83       	std	Y+2, r25	; 0x02
    1816:	89 83       	std	Y+1, r24	; 0x01
	C_LCD_voidSendCommand(0x01); /* 1 or 0x01 or 0b00000001*/

#elif   MODE_SELECT ==_4_BIT_MODE

	/* Function set command : 2 lines , 5*8 font size */
	C_LCD_voidSendCommand(0x33);
    1818:	83 e3       	ldi	r24, 0x33	; 51
    181a:	0e 94 5e 07 	call	0xebc	; 0xebc <C_LCD_voidSendCommand>
	C_LCD_voidSendCommand(0x32);
    181e:	82 e3       	ldi	r24, 0x32	; 50
    1820:	0e 94 5e 07 	call	0xebc	; 0xebc <C_LCD_voidSendCommand>
	C_LCD_voidSendCommand(0x28);   /* 0bNFXXXXXX  --> N: no of lines F: font size*/
    1824:	88 e2       	ldi	r24, 0x28	; 40
    1826:	0e 94 5e 07 	call	0xebc	; 0xebc <C_LCD_voidSendCommand>


	/*Display on off control : disable enable , disable cursor , no blink cursor*/
	C_LCD_voidSendCommand(0x0C);
    182a:	8c e0       	ldi	r24, 0x0C	; 12
    182c:	0e 94 5e 07 	call	0xebc	; 0xebc <C_LCD_voidSendCommand>
	C_LCD_voidSendCommand(0x02);
    1830:	82 e0       	ldi	r24, 0x02	; 2
    1832:	0e 94 5e 07 	call	0xebc	; 0xebc <C_LCD_voidSendCommand>

	C_LCD_voidSendCommand(0x06);
    1836:	86 e0       	ldi	r24, 0x06	; 6
    1838:	0e 94 5e 07 	call	0xebc	; 0xebc <C_LCD_voidSendCommand>

	/* Clear display */
	C_LCD_voidSendCommand(0x01);
    183c:	81 e0       	ldi	r24, 0x01	; 1
    183e:	0e 94 5e 07 	call	0xebc	; 0xebc <C_LCD_voidSendCommand>


#endif


}
    1842:	2e 96       	adiw	r28, 0x0e	; 14
    1844:	0f b6       	in	r0, 0x3f	; 63
    1846:	f8 94       	cli
    1848:	de bf       	out	0x3e, r29	; 62
    184a:	0f be       	out	0x3f, r0	; 63
    184c:	cd bf       	out	0x3d, r28	; 61
    184e:	cf 91       	pop	r28
    1850:	df 91       	pop	r29
    1852:	08 95       	ret

00001854 <CLCD_voidSendString>:

void CLCD_voidSendString(const char* Copy_pcString )
{
    1854:	df 93       	push	r29
    1856:	cf 93       	push	r28
    1858:	00 d0       	rcall	.+0      	; 0x185a <CLCD_voidSendString+0x6>
    185a:	0f 92       	push	r0
    185c:	cd b7       	in	r28, 0x3d	; 61
    185e:	de b7       	in	r29, 0x3e	; 62
    1860:	9b 83       	std	Y+3, r25	; 0x03
    1862:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Counter = 0;
    1864:	19 82       	std	Y+1, r1	; 0x01
    1866:	0e c0       	rjmp	.+28     	; 0x1884 <CLCD_voidSendString+0x30>
	while (Copy_pcString[Local_u8Counter] != NULL)
	{
		CLCD_voidSendData(Copy_pcString[Local_u8Counter]);
    1868:	89 81       	ldd	r24, Y+1	; 0x01
    186a:	28 2f       	mov	r18, r24
    186c:	30 e0       	ldi	r19, 0x00	; 0
    186e:	8a 81       	ldd	r24, Y+2	; 0x02
    1870:	9b 81       	ldd	r25, Y+3	; 0x03
    1872:	fc 01       	movw	r30, r24
    1874:	e2 0f       	add	r30, r18
    1876:	f3 1f       	adc	r31, r19
    1878:	80 81       	ld	r24, Z
    187a:	0e 94 77 09 	call	0x12ee	; 0x12ee <CLCD_voidSendData>
		Local_u8Counter++;
    187e:	89 81       	ldd	r24, Y+1	; 0x01
    1880:	8f 5f       	subi	r24, 0xFF	; 255
    1882:	89 83       	std	Y+1, r24	; 0x01
}

void CLCD_voidSendString(const char* Copy_pcString )
{
	u8 Local_u8Counter = 0;
	while (Copy_pcString[Local_u8Counter] != NULL)
    1884:	89 81       	ldd	r24, Y+1	; 0x01
    1886:	28 2f       	mov	r18, r24
    1888:	30 e0       	ldi	r19, 0x00	; 0
    188a:	8a 81       	ldd	r24, Y+2	; 0x02
    188c:	9b 81       	ldd	r25, Y+3	; 0x03
    188e:	fc 01       	movw	r30, r24
    1890:	e2 0f       	add	r30, r18
    1892:	f3 1f       	adc	r31, r19
    1894:	80 81       	ld	r24, Z
    1896:	88 23       	and	r24, r24
    1898:	39 f7       	brne	.-50     	; 0x1868 <CLCD_voidSendString+0x14>
	{
		CLCD_voidSendData(Copy_pcString[Local_u8Counter]);
		Local_u8Counter++;
	}
}
    189a:	0f 90       	pop	r0
    189c:	0f 90       	pop	r0
    189e:	0f 90       	pop	r0
    18a0:	cf 91       	pop	r28
    18a2:	df 91       	pop	r29
    18a4:	08 95       	ret

000018a6 <CLCD_voidGoToXY>:

void CLCD_voidGoToXY(u8 Copy_u8Xpos, u8 Copy_u8Ypos)
{
    18a6:	df 93       	push	r29
    18a8:	cf 93       	push	r28
    18aa:	00 d0       	rcall	.+0      	; 0x18ac <CLCD_voidGoToXY+0x6>
    18ac:	0f 92       	push	r0
    18ae:	cd b7       	in	r28, 0x3d	; 61
    18b0:	de b7       	in	r29, 0x3e	; 62
    18b2:	8a 83       	std	Y+2, r24	; 0x02
    18b4:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Adress=0;
    18b6:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8Xpos == 0)
    18b8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ba:	88 23       	and	r24, r24
    18bc:	19 f4       	brne	.+6      	; 0x18c4 <CLCD_voidGoToXY+0x1e>
	{
		Local_u8Adress = Copy_u8Ypos;
    18be:	8b 81       	ldd	r24, Y+3	; 0x03
    18c0:	89 83       	std	Y+1, r24	; 0x01
    18c2:	06 c0       	rjmp	.+12     	; 0x18d0 <CLCD_voidGoToXY+0x2a>
	}
	else if (Copy_u8Xpos == 1)
    18c4:	8a 81       	ldd	r24, Y+2	; 0x02
    18c6:	81 30       	cpi	r24, 0x01	; 1
    18c8:	19 f4       	brne	.+6      	; 0x18d0 <CLCD_voidGoToXY+0x2a>
	{
		Local_u8Adress = Copy_u8Ypos+0x40;
    18ca:	8b 81       	ldd	r24, Y+3	; 0x03
    18cc:	80 5c       	subi	r24, 0xC0	; 192
    18ce:	89 83       	std	Y+1, r24	; 0x01
	}

	C_LCD_voidSendCommand(Local_u8Adress+128);
    18d0:	89 81       	ldd	r24, Y+1	; 0x01
    18d2:	80 58       	subi	r24, 0x80	; 128
    18d4:	0e 94 5e 07 	call	0xebc	; 0xebc <C_LCD_voidSendCommand>



}
    18d8:	0f 90       	pop	r0
    18da:	0f 90       	pop	r0
    18dc:	0f 90       	pop	r0
    18de:	cf 91       	pop	r28
    18e0:	df 91       	pop	r29
    18e2:	08 95       	ret

000018e4 <CLCD_voidWriteSpecialCharacter>:

void CLCD_voidWriteSpecialCharacter(u8* Copy_pu8Pattern, u8 Copy_u8PatternNumber, u8 Copy_u8XPos, u8 Copy_u8YPos)
{
    18e4:	df 93       	push	r29
    18e6:	cf 93       	push	r28
    18e8:	cd b7       	in	r28, 0x3d	; 61
    18ea:	de b7       	in	r29, 0x3e	; 62
    18ec:	27 97       	sbiw	r28, 0x07	; 7
    18ee:	0f b6       	in	r0, 0x3f	; 63
    18f0:	f8 94       	cli
    18f2:	de bf       	out	0x3e, r29	; 62
    18f4:	0f be       	out	0x3f, r0	; 63
    18f6:	cd bf       	out	0x3d, r28	; 61
    18f8:	9c 83       	std	Y+4, r25	; 0x04
    18fa:	8b 83       	std	Y+3, r24	; 0x03
    18fc:	6d 83       	std	Y+5, r22	; 0x05
    18fe:	4e 83       	std	Y+6, r20	; 0x06
    1900:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8CGRAMAddress= 0, Local_u8Iterator;
    1902:	1a 82       	std	Y+2, r1	; 0x02
	/* Calculate the CGRAM address whose each block is 8 bytes */
	Local_u8CGRAMAddress =Copy_u8PatternNumber*8;
    1904:	8d 81       	ldd	r24, Y+5	; 0x05
    1906:	88 2f       	mov	r24, r24
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	88 0f       	add	r24, r24
    190c:	99 1f       	adc	r25, r25
    190e:	88 0f       	add	r24, r24
    1910:	99 1f       	adc	r25, r25
    1912:	88 0f       	add	r24, r24
    1914:	99 1f       	adc	r25, r25
    1916:	8a 83       	std	Y+2, r24	; 0x02

	/* Send CGRAM Address command to LCD, with setting bit 6, clearing bit 7*/
	C_LCD_voidSendCommand(Local_u8CGRAMAddress+64);
    1918:	8a 81       	ldd	r24, Y+2	; 0x02
    191a:	80 5c       	subi	r24, 0xC0	; 192
    191c:	0e 94 5e 07 	call	0xebc	; 0xebc <C_LCD_voidSendCommand>

	/* Write the pattern into CGRAM */

	for (Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++)
    1920:	19 82       	std	Y+1, r1	; 0x01
    1922:	0e c0       	rjmp	.+28     	; 0x1940 <CLCD_voidWriteSpecialCharacter+0x5c>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Iterator]);
    1924:	89 81       	ldd	r24, Y+1	; 0x01
    1926:	28 2f       	mov	r18, r24
    1928:	30 e0       	ldi	r19, 0x00	; 0
    192a:	8b 81       	ldd	r24, Y+3	; 0x03
    192c:	9c 81       	ldd	r25, Y+4	; 0x04
    192e:	fc 01       	movw	r30, r24
    1930:	e2 0f       	add	r30, r18
    1932:	f3 1f       	adc	r31, r19
    1934:	80 81       	ld	r24, Z
    1936:	0e 94 77 09 	call	0x12ee	; 0x12ee <CLCD_voidSendData>
	/* Send CGRAM Address command to LCD, with setting bit 6, clearing bit 7*/
	C_LCD_voidSendCommand(Local_u8CGRAMAddress+64);

	/* Write the pattern into CGRAM */

	for (Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++)
    193a:	89 81       	ldd	r24, Y+1	; 0x01
    193c:	8f 5f       	subi	r24, 0xFF	; 255
    193e:	89 83       	std	Y+1, r24	; 0x01
    1940:	89 81       	ldd	r24, Y+1	; 0x01
    1942:	88 30       	cpi	r24, 0x08	; 8
    1944:	78 f3       	brcs	.-34     	; 0x1924 <CLCD_voidWriteSpecialCharacter+0x40>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Iterator]);
	}

	/* go back to the DDRAM to display the Pattern*/
	CLCD_voidGoToXY(Copy_u8XPos,Copy_u8YPos);
    1946:	8e 81       	ldd	r24, Y+6	; 0x06
    1948:	6f 81       	ldd	r22, Y+7	; 0x07
    194a:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <CLCD_voidGoToXY>
	/* Display the pattern written in the CGRAM*/
	CLCD_voidSendData(Copy_u8PatternNumber);
    194e:	8d 81       	ldd	r24, Y+5	; 0x05
    1950:	0e 94 77 09 	call	0x12ee	; 0x12ee <CLCD_voidSendData>
}
    1954:	27 96       	adiw	r28, 0x07	; 7
    1956:	0f b6       	in	r0, 0x3f	; 63
    1958:	f8 94       	cli
    195a:	de bf       	out	0x3e, r29	; 62
    195c:	0f be       	out	0x3f, r0	; 63
    195e:	cd bf       	out	0x3d, r28	; 61
    1960:	cf 91       	pop	r28
    1962:	df 91       	pop	r29
    1964:	08 95       	ret

00001966 <CLCD_VoidWriteNumber>:

void CLCD_VoidWriteNumber(f32 Copy_u32Number)
{
    1966:	0f 93       	push	r16
    1968:	1f 93       	push	r17
    196a:	df 93       	push	r29
    196c:	cf 93       	push	r28
    196e:	cd b7       	in	r28, 0x3d	; 61
    1970:	de b7       	in	r29, 0x3e	; 62
    1972:	6d 97       	sbiw	r28, 0x1d	; 29
    1974:	0f b6       	in	r0, 0x3f	; 63
    1976:	f8 94       	cli
    1978:	de bf       	out	0x3e, r29	; 62
    197a:	0f be       	out	0x3f, r0	; 63
    197c:	cd bf       	out	0x3d, r28	; 61
    197e:	6a 8f       	std	Y+26, r22	; 0x1a
    1980:	7b 8f       	std	Y+27, r23	; 0x1b
    1982:	8c 8f       	std	Y+28, r24	; 0x1c
    1984:	9d 8f       	std	Y+29, r25	; 0x1d
	s32 Local_s32Number = Copy_u32Number;
    1986:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1988:	7b 8d       	ldd	r23, Y+27	; 0x1b
    198a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    198c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    198e:	0e 94 2f 04 	call	0x85e	; 0x85e <__fixsfsi>
    1992:	dc 01       	movw	r26, r24
    1994:	cb 01       	movw	r24, r22
    1996:	8a 83       	std	Y+2, r24	; 0x02
    1998:	9b 83       	std	Y+3, r25	; 0x03
    199a:	ac 83       	std	Y+4, r26	; 0x04
    199c:	bd 83       	std	Y+5, r27	; 0x05

	if(Local_s32Number == 0)
    199e:	8a 81       	ldd	r24, Y+2	; 0x02
    19a0:	9b 81       	ldd	r25, Y+3	; 0x03
    19a2:	ac 81       	ldd	r26, Y+4	; 0x04
    19a4:	bd 81       	ldd	r27, Y+5	; 0x05
    19a6:	00 97       	sbiw	r24, 0x00	; 0
    19a8:	a1 05       	cpc	r26, r1
    19aa:	b1 05       	cpc	r27, r1
    19ac:	21 f4       	brne	.+8      	; 0x19b6 <CLCD_VoidWriteNumber+0x50>
	{
		CLCD_voidSendData('0');
    19ae:	80 e3       	ldi	r24, 0x30	; 48
    19b0:	0e 94 77 09 	call	0x12ee	; 0x12ee <CLCD_voidSendData>
    19b4:	18 c0       	rjmp	.+48     	; 0x19e6 <CLCD_VoidWriteNumber+0x80>
	}
	else if (Local_s32Number <0)
    19b6:	8a 81       	ldd	r24, Y+2	; 0x02
    19b8:	9b 81       	ldd	r25, Y+3	; 0x03
    19ba:	ac 81       	ldd	r26, Y+4	; 0x04
    19bc:	bd 81       	ldd	r27, Y+5	; 0x05
    19be:	bb 23       	and	r27, r27
    19c0:	94 f4       	brge	.+36     	; 0x19e6 <CLCD_VoidWriteNumber+0x80>
	{
		CLCD_voidSendData('-');
    19c2:	8d e2       	ldi	r24, 0x2D	; 45
    19c4:	0e 94 77 09 	call	0x12ee	; 0x12ee <CLCD_voidSendData>
		Local_s32Number = Local_s32Number *(-1);
    19c8:	8a 81       	ldd	r24, Y+2	; 0x02
    19ca:	9b 81       	ldd	r25, Y+3	; 0x03
    19cc:	ac 81       	ldd	r26, Y+4	; 0x04
    19ce:	bd 81       	ldd	r27, Y+5	; 0x05
    19d0:	b0 95       	com	r27
    19d2:	a0 95       	com	r26
    19d4:	90 95       	com	r25
    19d6:	81 95       	neg	r24
    19d8:	9f 4f       	sbci	r25, 0xFF	; 255
    19da:	af 4f       	sbci	r26, 0xFF	; 255
    19dc:	bf 4f       	sbci	r27, 0xFF	; 255
    19de:	8a 83       	std	Y+2, r24	; 0x02
    19e0:	9b 83       	std	Y+3, r25	; 0x03
    19e2:	ac 83       	std	Y+4, r26	; 0x04
    19e4:	bd 83       	std	Y+5, r27	; 0x05

	}
	u8 Local_u8Array[20]={0};
    19e6:	84 e1       	ldi	r24, 0x14	; 20
    19e8:	fe 01       	movw	r30, r28
    19ea:	36 96       	adiw	r30, 0x06	; 6
    19ec:	df 01       	movw	r26, r30
    19ee:	98 2f       	mov	r25, r24
    19f0:	1d 92       	st	X+, r1
    19f2:	9a 95       	dec	r25
    19f4:	e9 f7       	brne	.-6      	; 0x19f0 <CLCD_VoidWriteNumber+0x8a>
	s8 local_s8Counter =0;
    19f6:	19 82       	std	Y+1, r1	; 0x01
    19f8:	2f c0       	rjmp	.+94     	; 0x1a58 <CLCD_VoidWriteNumber+0xf2>
	while (Local_s32Number != 0)
	{
		Local_u8Array[local_s8Counter]= Local_s32Number%10;
    19fa:	89 81       	ldd	r24, Y+1	; 0x01
    19fc:	08 2f       	mov	r16, r24
    19fe:	11 27       	eor	r17, r17
    1a00:	07 fd       	sbrc	r16, 7
    1a02:	10 95       	com	r17
    1a04:	8a 81       	ldd	r24, Y+2	; 0x02
    1a06:	9b 81       	ldd	r25, Y+3	; 0x03
    1a08:	ac 81       	ldd	r26, Y+4	; 0x04
    1a0a:	bd 81       	ldd	r27, Y+5	; 0x05
    1a0c:	2a e0       	ldi	r18, 0x0A	; 10
    1a0e:	30 e0       	ldi	r19, 0x00	; 0
    1a10:	40 e0       	ldi	r20, 0x00	; 0
    1a12:	50 e0       	ldi	r21, 0x00	; 0
    1a14:	bc 01       	movw	r22, r24
    1a16:	cd 01       	movw	r24, r26
    1a18:	0e 94 d6 11 	call	0x23ac	; 0x23ac <__divmodsi4>
    1a1c:	dc 01       	movw	r26, r24
    1a1e:	cb 01       	movw	r24, r22
    1a20:	28 2f       	mov	r18, r24
    1a22:	ce 01       	movw	r24, r28
    1a24:	06 96       	adiw	r24, 0x06	; 6
    1a26:	fc 01       	movw	r30, r24
    1a28:	e0 0f       	add	r30, r16
    1a2a:	f1 1f       	adc	r31, r17
    1a2c:	20 83       	st	Z, r18
		Local_s32Number/=10;
    1a2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a30:	9b 81       	ldd	r25, Y+3	; 0x03
    1a32:	ac 81       	ldd	r26, Y+4	; 0x04
    1a34:	bd 81       	ldd	r27, Y+5	; 0x05
    1a36:	2a e0       	ldi	r18, 0x0A	; 10
    1a38:	30 e0       	ldi	r19, 0x00	; 0
    1a3a:	40 e0       	ldi	r20, 0x00	; 0
    1a3c:	50 e0       	ldi	r21, 0x00	; 0
    1a3e:	bc 01       	movw	r22, r24
    1a40:	cd 01       	movw	r24, r26
    1a42:	0e 94 d6 11 	call	0x23ac	; 0x23ac <__divmodsi4>
    1a46:	da 01       	movw	r26, r20
    1a48:	c9 01       	movw	r24, r18
    1a4a:	8a 83       	std	Y+2, r24	; 0x02
    1a4c:	9b 83       	std	Y+3, r25	; 0x03
    1a4e:	ac 83       	std	Y+4, r26	; 0x04
    1a50:	bd 83       	std	Y+5, r27	; 0x05
		local_s8Counter++;
    1a52:	89 81       	ldd	r24, Y+1	; 0x01
    1a54:	8f 5f       	subi	r24, 0xFF	; 255
    1a56:	89 83       	std	Y+1, r24	; 0x01
		Local_s32Number = Local_s32Number *(-1);

	}
	u8 Local_u8Array[20]={0};
	s8 local_s8Counter =0;
	while (Local_s32Number != 0)
    1a58:	8a 81       	ldd	r24, Y+2	; 0x02
    1a5a:	9b 81       	ldd	r25, Y+3	; 0x03
    1a5c:	ac 81       	ldd	r26, Y+4	; 0x04
    1a5e:	bd 81       	ldd	r27, Y+5	; 0x05
    1a60:	00 97       	sbiw	r24, 0x00	; 0
    1a62:	a1 05       	cpc	r26, r1
    1a64:	b1 05       	cpc	r27, r1
    1a66:	49 f6       	brne	.-110    	; 0x19fa <CLCD_VoidWriteNumber+0x94>
	{
		Local_u8Array[local_s8Counter]= Local_s32Number%10;
		Local_s32Number/=10;
		local_s8Counter++;
	}
	local_s8Counter--;
    1a68:	89 81       	ldd	r24, Y+1	; 0x01
    1a6a:	81 50       	subi	r24, 0x01	; 1
    1a6c:	89 83       	std	Y+1, r24	; 0x01
    1a6e:	11 c0       	rjmp	.+34     	; 0x1a92 <CLCD_VoidWriteNumber+0x12c>
	while (local_s8Counter>=0)
	{
		CLCD_voidSendData(Local_u8Array[local_s8Counter]+'0');
    1a70:	89 81       	ldd	r24, Y+1	; 0x01
    1a72:	28 2f       	mov	r18, r24
    1a74:	33 27       	eor	r19, r19
    1a76:	27 fd       	sbrc	r18, 7
    1a78:	30 95       	com	r19
    1a7a:	ce 01       	movw	r24, r28
    1a7c:	06 96       	adiw	r24, 0x06	; 6
    1a7e:	fc 01       	movw	r30, r24
    1a80:	e2 0f       	add	r30, r18
    1a82:	f3 1f       	adc	r31, r19
    1a84:	80 81       	ld	r24, Z
    1a86:	80 5d       	subi	r24, 0xD0	; 208
    1a88:	0e 94 77 09 	call	0x12ee	; 0x12ee <CLCD_voidSendData>
		local_s8Counter--;
    1a8c:	89 81       	ldd	r24, Y+1	; 0x01
    1a8e:	81 50       	subi	r24, 0x01	; 1
    1a90:	89 83       	std	Y+1, r24	; 0x01
		Local_u8Array[local_s8Counter]= Local_s32Number%10;
		Local_s32Number/=10;
		local_s8Counter++;
	}
	local_s8Counter--;
	while (local_s8Counter>=0)
    1a92:	89 81       	ldd	r24, Y+1	; 0x01
    1a94:	88 23       	and	r24, r24
    1a96:	64 f7       	brge	.-40     	; 0x1a70 <CLCD_VoidWriteNumber+0x10a>
	{
		CLCD_voidSendData(Local_u8Array[local_s8Counter]+'0');
		local_s8Counter--;
	}
}
    1a98:	6d 96       	adiw	r28, 0x1d	; 29
    1a9a:	0f b6       	in	r0, 0x3f	; 63
    1a9c:	f8 94       	cli
    1a9e:	de bf       	out	0x3e, r29	; 62
    1aa0:	0f be       	out	0x3f, r0	; 63
    1aa2:	cd bf       	out	0x3d, r28	; 61
    1aa4:	cf 91       	pop	r28
    1aa6:	df 91       	pop	r29
    1aa8:	1f 91       	pop	r17
    1aaa:	0f 91       	pop	r16
    1aac:	08 95       	ret

00001aae <CLCD_voidWriteFloatNumber>:

void CLCD_voidWriteFloatNumber(f32 Copy_f32FloatNumber )
{
    1aae:	df 93       	push	r29
    1ab0:	cf 93       	push	r28
    1ab2:	cd b7       	in	r28, 0x3d	; 61
    1ab4:	de b7       	in	r29, 0x3e	; 62
    1ab6:	28 97       	sbiw	r28, 0x08	; 8
    1ab8:	0f b6       	in	r0, 0x3f	; 63
    1aba:	f8 94       	cli
    1abc:	de bf       	out	0x3e, r29	; 62
    1abe:	0f be       	out	0x3f, r0	; 63
    1ac0:	cd bf       	out	0x3d, r28	; 61
    1ac2:	6d 83       	std	Y+5, r22	; 0x05
    1ac4:	7e 83       	std	Y+6, r23	; 0x06
    1ac6:	8f 83       	std	Y+7, r24	; 0x07
    1ac8:	98 87       	std	Y+8, r25	; 0x08

	if(Copy_f32FloatNumber == 0)
    1aca:	6d 81       	ldd	r22, Y+5	; 0x05
    1acc:	7e 81       	ldd	r23, Y+6	; 0x06
    1ace:	8f 81       	ldd	r24, Y+7	; 0x07
    1ad0:	98 85       	ldd	r25, Y+8	; 0x08
    1ad2:	20 e0       	ldi	r18, 0x00	; 0
    1ad4:	30 e0       	ldi	r19, 0x00	; 0
    1ad6:	40 e0       	ldi	r20, 0x00	; 0
    1ad8:	50 e0       	ldi	r21, 0x00	; 0
    1ada:	0e 94 11 03 	call	0x622	; 0x622 <__eqsf2>
    1ade:	88 23       	and	r24, r24
    1ae0:	39 f4       	brne	.+14     	; 0x1af0 <CLCD_voidWriteFloatNumber+0x42>
	{
		CLCD_VoidWriteNumber(0);
    1ae2:	60 e0       	ldi	r22, 0x00	; 0
    1ae4:	70 e0       	ldi	r23, 0x00	; 0
    1ae6:	80 e0       	ldi	r24, 0x00	; 0
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	0e 94 b3 0c 	call	0x1966	; 0x1966 <CLCD_VoidWriteNumber>
    1aee:	7c c0       	rjmp	.+248    	; 0x1be8 <CLCD_voidWriteFloatNumber+0x13a>
	}

	else
	{
		s32 Local_s32DecemalNum=Copy_f32FloatNumber;
    1af0:	6d 81       	ldd	r22, Y+5	; 0x05
    1af2:	7e 81       	ldd	r23, Y+6	; 0x06
    1af4:	8f 81       	ldd	r24, Y+7	; 0x07
    1af6:	98 85       	ldd	r25, Y+8	; 0x08
    1af8:	0e 94 2f 04 	call	0x85e	; 0x85e <__fixsfsi>
    1afc:	dc 01       	movw	r26, r24
    1afe:	cb 01       	movw	r24, r22
    1b00:	89 83       	std	Y+1, r24	; 0x01
    1b02:	9a 83       	std	Y+2, r25	; 0x02
    1b04:	ab 83       	std	Y+3, r26	; 0x03
    1b06:	bc 83       	std	Y+4, r27	; 0x04
		CLCD_VoidWriteNumber(Local_s32DecemalNum);
    1b08:	69 81       	ldd	r22, Y+1	; 0x01
    1b0a:	7a 81       	ldd	r23, Y+2	; 0x02
    1b0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b10:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <__floatsisf>
    1b14:	dc 01       	movw	r26, r24
    1b16:	cb 01       	movw	r24, r22
    1b18:	bc 01       	movw	r22, r24
    1b1a:	cd 01       	movw	r24, r26
    1b1c:	0e 94 b3 0c 	call	0x1966	; 0x1966 <CLCD_VoidWriteNumber>
		CLCD_voidSendData('.');
    1b20:	8e e2       	ldi	r24, 0x2E	; 46
    1b22:	0e 94 77 09 	call	0x12ee	; 0x12ee <CLCD_voidSendData>
		Copy_f32FloatNumber = Copy_f32FloatNumber -Local_s32DecemalNum;
    1b26:	69 81       	ldd	r22, Y+1	; 0x01
    1b28:	7a 81       	ldd	r23, Y+2	; 0x02
    1b2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b2c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b2e:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <__floatsisf>
    1b32:	9b 01       	movw	r18, r22
    1b34:	ac 01       	movw	r20, r24
    1b36:	6d 81       	ldd	r22, Y+5	; 0x05
    1b38:	7e 81       	ldd	r23, Y+6	; 0x06
    1b3a:	8f 81       	ldd	r24, Y+7	; 0x07
    1b3c:	98 85       	ldd	r25, Y+8	; 0x08
    1b3e:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
    1b42:	dc 01       	movw	r26, r24
    1b44:	cb 01       	movw	r24, r22
    1b46:	8d 83       	std	Y+5, r24	; 0x05
    1b48:	9e 83       	std	Y+6, r25	; 0x06
    1b4a:	af 83       	std	Y+7, r26	; 0x07
    1b4c:	b8 87       	std	Y+8, r27	; 0x08

		Copy_f32FloatNumber*=100000;
    1b4e:	6d 81       	ldd	r22, Y+5	; 0x05
    1b50:	7e 81       	ldd	r23, Y+6	; 0x06
    1b52:	8f 81       	ldd	r24, Y+7	; 0x07
    1b54:	98 85       	ldd	r25, Y+8	; 0x08
    1b56:	20 e0       	ldi	r18, 0x00	; 0
    1b58:	30 e5       	ldi	r19, 0x50	; 80
    1b5a:	43 ec       	ldi	r20, 0xC3	; 195
    1b5c:	57 e4       	ldi	r21, 0x47	; 71
    1b5e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b62:	dc 01       	movw	r26, r24
    1b64:	cb 01       	movw	r24, r22
    1b66:	8d 83       	std	Y+5, r24	; 0x05
    1b68:	9e 83       	std	Y+6, r25	; 0x06
    1b6a:	af 83       	std	Y+7, r26	; 0x07
    1b6c:	b8 87       	std	Y+8, r27	; 0x08
		Local_s32DecemalNum = Copy_f32FloatNumber;
    1b6e:	6d 81       	ldd	r22, Y+5	; 0x05
    1b70:	7e 81       	ldd	r23, Y+6	; 0x06
    1b72:	8f 81       	ldd	r24, Y+7	; 0x07
    1b74:	98 85       	ldd	r25, Y+8	; 0x08
    1b76:	0e 94 2f 04 	call	0x85e	; 0x85e <__fixsfsi>
    1b7a:	dc 01       	movw	r26, r24
    1b7c:	cb 01       	movw	r24, r22
    1b7e:	89 83       	std	Y+1, r24	; 0x01
    1b80:	9a 83       	std	Y+2, r25	; 0x02
    1b82:	ab 83       	std	Y+3, r26	; 0x03
    1b84:	bc 83       	std	Y+4, r27	; 0x04
    1b86:	12 c0       	rjmp	.+36     	; 0x1bac <CLCD_voidWriteFloatNumber+0xfe>

		while (Local_s32DecemalNum%10 == 0)
		{
			Local_s32DecemalNum/=10;
    1b88:	89 81       	ldd	r24, Y+1	; 0x01
    1b8a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b8c:	ab 81       	ldd	r26, Y+3	; 0x03
    1b8e:	bc 81       	ldd	r27, Y+4	; 0x04
    1b90:	2a e0       	ldi	r18, 0x0A	; 10
    1b92:	30 e0       	ldi	r19, 0x00	; 0
    1b94:	40 e0       	ldi	r20, 0x00	; 0
    1b96:	50 e0       	ldi	r21, 0x00	; 0
    1b98:	bc 01       	movw	r22, r24
    1b9a:	cd 01       	movw	r24, r26
    1b9c:	0e 94 d6 11 	call	0x23ac	; 0x23ac <__divmodsi4>
    1ba0:	da 01       	movw	r26, r20
    1ba2:	c9 01       	movw	r24, r18
    1ba4:	89 83       	std	Y+1, r24	; 0x01
    1ba6:	9a 83       	std	Y+2, r25	; 0x02
    1ba8:	ab 83       	std	Y+3, r26	; 0x03
    1baa:	bc 83       	std	Y+4, r27	; 0x04
		Copy_f32FloatNumber = Copy_f32FloatNumber -Local_s32DecemalNum;

		Copy_f32FloatNumber*=100000;
		Local_s32DecemalNum = Copy_f32FloatNumber;

		while (Local_s32DecemalNum%10 == 0)
    1bac:	89 81       	ldd	r24, Y+1	; 0x01
    1bae:	9a 81       	ldd	r25, Y+2	; 0x02
    1bb0:	ab 81       	ldd	r26, Y+3	; 0x03
    1bb2:	bc 81       	ldd	r27, Y+4	; 0x04
    1bb4:	2a e0       	ldi	r18, 0x0A	; 10
    1bb6:	30 e0       	ldi	r19, 0x00	; 0
    1bb8:	40 e0       	ldi	r20, 0x00	; 0
    1bba:	50 e0       	ldi	r21, 0x00	; 0
    1bbc:	bc 01       	movw	r22, r24
    1bbe:	cd 01       	movw	r24, r26
    1bc0:	0e 94 d6 11 	call	0x23ac	; 0x23ac <__divmodsi4>
    1bc4:	dc 01       	movw	r26, r24
    1bc6:	cb 01       	movw	r24, r22
    1bc8:	00 97       	sbiw	r24, 0x00	; 0
    1bca:	a1 05       	cpc	r26, r1
    1bcc:	b1 05       	cpc	r27, r1
    1bce:	e1 f2       	breq	.-72     	; 0x1b88 <CLCD_voidWriteFloatNumber+0xda>
		{
			Local_s32DecemalNum/=10;
		}
		CLCD_VoidWriteNumber(Local_s32DecemalNum);
    1bd0:	69 81       	ldd	r22, Y+1	; 0x01
    1bd2:	7a 81       	ldd	r23, Y+2	; 0x02
    1bd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd6:	9c 81       	ldd	r25, Y+4	; 0x04
    1bd8:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <__floatsisf>
    1bdc:	dc 01       	movw	r26, r24
    1bde:	cb 01       	movw	r24, r22
    1be0:	bc 01       	movw	r22, r24
    1be2:	cd 01       	movw	r24, r26
    1be4:	0e 94 b3 0c 	call	0x1966	; 0x1966 <CLCD_VoidWriteNumber>
	}
}
    1be8:	28 96       	adiw	r28, 0x08	; 8
    1bea:	0f b6       	in	r0, 0x3f	; 63
    1bec:	f8 94       	cli
    1bee:	de bf       	out	0x3e, r29	; 62
    1bf0:	0f be       	out	0x3f, r0	; 63
    1bf2:	cd bf       	out	0x3d, r28	; 61
    1bf4:	cf 91       	pop	r28
    1bf6:	df 91       	pop	r29
    1bf8:	08 95       	ret

00001bfa <CLCD_voidClear>:
//}



void CLCD_voidClear()
{
    1bfa:	df 93       	push	r29
    1bfc:	cf 93       	push	r28
    1bfe:	cd b7       	in	r28, 0x3d	; 61
    1c00:	de b7       	in	r29, 0x3e	; 62
	C_LCD_voidSendCommand(0x01);
    1c02:	81 e0       	ldi	r24, 0x01	; 1
    1c04:	0e 94 5e 07 	call	0xebc	; 0xebc <C_LCD_voidSendCommand>

}
    1c08:	cf 91       	pop	r28
    1c0a:	df 91       	pop	r29
    1c0c:	08 95       	ret

00001c0e <DIO_u8SetPortDirection>:
//}
//
//
//
u8 DIO_u8SetPortDirection(u8 Copy_u8port, u8 Copy_u8Direction)
{
    1c0e:	df 93       	push	r29
    1c10:	cf 93       	push	r28
    1c12:	00 d0       	rcall	.+0      	; 0x1c14 <DIO_u8SetPortDirection+0x6>
    1c14:	00 d0       	rcall	.+0      	; 0x1c16 <DIO_u8SetPortDirection+0x8>
    1c16:	0f 92       	push	r0
    1c18:	cd b7       	in	r28, 0x3d	; 61
    1c1a:	de b7       	in	r29, 0x3e	; 62
    1c1c:	8a 83       	std	Y+2, r24	; 0x02
    1c1e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    1c20:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8port<=DIO_u8PORTD)
    1c22:	8a 81       	ldd	r24, Y+2	; 0x02
    1c24:	84 30       	cpi	r24, 0x04	; 4
    1c26:	b0 f5       	brcc	.+108    	; 0x1c94 <DIO_u8SetPortDirection+0x86>
	{
		switch(Copy_u8port)
    1c28:	8a 81       	ldd	r24, Y+2	; 0x02
    1c2a:	28 2f       	mov	r18, r24
    1c2c:	30 e0       	ldi	r19, 0x00	; 0
    1c2e:	3d 83       	std	Y+5, r19	; 0x05
    1c30:	2c 83       	std	Y+4, r18	; 0x04
    1c32:	8c 81       	ldd	r24, Y+4	; 0x04
    1c34:	9d 81       	ldd	r25, Y+5	; 0x05
    1c36:	81 30       	cpi	r24, 0x01	; 1
    1c38:	91 05       	cpc	r25, r1
    1c3a:	d1 f0       	breq	.+52     	; 0x1c70 <DIO_u8SetPortDirection+0x62>
    1c3c:	2c 81       	ldd	r18, Y+4	; 0x04
    1c3e:	3d 81       	ldd	r19, Y+5	; 0x05
    1c40:	22 30       	cpi	r18, 0x02	; 2
    1c42:	31 05       	cpc	r19, r1
    1c44:	2c f4       	brge	.+10     	; 0x1c50 <DIO_u8SetPortDirection+0x42>
    1c46:	8c 81       	ldd	r24, Y+4	; 0x04
    1c48:	9d 81       	ldd	r25, Y+5	; 0x05
    1c4a:	00 97       	sbiw	r24, 0x00	; 0
    1c4c:	61 f0       	breq	.+24     	; 0x1c66 <DIO_u8SetPortDirection+0x58>
    1c4e:	1f c0       	rjmp	.+62     	; 0x1c8e <DIO_u8SetPortDirection+0x80>
    1c50:	2c 81       	ldd	r18, Y+4	; 0x04
    1c52:	3d 81       	ldd	r19, Y+5	; 0x05
    1c54:	22 30       	cpi	r18, 0x02	; 2
    1c56:	31 05       	cpc	r19, r1
    1c58:	81 f0       	breq	.+32     	; 0x1c7a <DIO_u8SetPortDirection+0x6c>
    1c5a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c5c:	9d 81       	ldd	r25, Y+5	; 0x05
    1c5e:	83 30       	cpi	r24, 0x03	; 3
    1c60:	91 05       	cpc	r25, r1
    1c62:	81 f0       	breq	.+32     	; 0x1c84 <DIO_u8SetPortDirection+0x76>
    1c64:	14 c0       	rjmp	.+40     	; 0x1c8e <DIO_u8SetPortDirection+0x80>
		{
		case DIO_u8PORTA: DDRA = Copy_u8Direction; break;
    1c66:	ea e3       	ldi	r30, 0x3A	; 58
    1c68:	f0 e0       	ldi	r31, 0x00	; 0
    1c6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c6c:	80 83       	st	Z, r24
    1c6e:	14 c0       	rjmp	.+40     	; 0x1c98 <DIO_u8SetPortDirection+0x8a>
		case DIO_u8PORTB: DDRB = Copy_u8Direction; break;
    1c70:	e7 e3       	ldi	r30, 0x37	; 55
    1c72:	f0 e0       	ldi	r31, 0x00	; 0
    1c74:	8b 81       	ldd	r24, Y+3	; 0x03
    1c76:	80 83       	st	Z, r24
    1c78:	0f c0       	rjmp	.+30     	; 0x1c98 <DIO_u8SetPortDirection+0x8a>
		case DIO_u8PORTC: DDRC = Copy_u8Direction; break;
    1c7a:	e4 e3       	ldi	r30, 0x34	; 52
    1c7c:	f0 e0       	ldi	r31, 0x00	; 0
    1c7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c80:	80 83       	st	Z, r24
    1c82:	0a c0       	rjmp	.+20     	; 0x1c98 <DIO_u8SetPortDirection+0x8a>
		case DIO_u8PORTD: DDRD = Copy_u8Direction; break;
    1c84:	e1 e3       	ldi	r30, 0x31	; 49
    1c86:	f0 e0       	ldi	r31, 0x00	; 0
    1c88:	8b 81       	ldd	r24, Y+3	; 0x03
    1c8a:	80 83       	st	Z, r24
    1c8c:	05 c0       	rjmp	.+10     	; 0x1c98 <DIO_u8SetPortDirection+0x8a>
		default: Local_u8ErrorState =1; break;
    1c8e:	81 e0       	ldi	r24, 0x01	; 1
    1c90:	89 83       	std	Y+1, r24	; 0x01
    1c92:	02 c0       	rjmp	.+4      	; 0x1c98 <DIO_u8SetPortDirection+0x8a>

		}
	}
	else
	{
		Local_u8ErrorState = 1;
    1c94:	81 e0       	ldi	r24, 0x01	; 1
    1c96:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_u8ErrorState;
    1c98:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c9a:	0f 90       	pop	r0
    1c9c:	0f 90       	pop	r0
    1c9e:	0f 90       	pop	r0
    1ca0:	0f 90       	pop	r0
    1ca2:	0f 90       	pop	r0
    1ca4:	cf 91       	pop	r28
    1ca6:	df 91       	pop	r29
    1ca8:	08 95       	ret

00001caa <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
    1caa:	df 93       	push	r29
    1cac:	cf 93       	push	r28
    1cae:	cd b7       	in	r28, 0x3d	; 61
    1cb0:	de b7       	in	r29, 0x3e	; 62
    1cb2:	28 97       	sbiw	r28, 0x08	; 8
    1cb4:	0f b6       	in	r0, 0x3f	; 63
    1cb6:	f8 94       	cli
    1cb8:	de bf       	out	0x3e, r29	; 62
    1cba:	0f be       	out	0x3f, r0	; 63
    1cbc:	cd bf       	out	0x3d, r28	; 61
    1cbe:	8a 83       	std	Y+2, r24	; 0x02
    1cc0:	6b 83       	std	Y+3, r22	; 0x03
    1cc2:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    1cc4:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin<=DIO_u8PIN7)
    1cc6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc8:	88 30       	cpi	r24, 0x08	; 8
    1cca:	08 f0       	brcs	.+2      	; 0x1cce <DIO_u8SetPinValue+0x24>
    1ccc:	f4 c0       	rjmp	.+488    	; 0x1eb6 <DIO_u8SetPinValue+0x20c>
	{
		if(Copy_u8Value == DIO_u8PIN_LOW)
    1cce:	8c 81       	ldd	r24, Y+4	; 0x04
    1cd0:	88 23       	and	r24, r24
    1cd2:	09 f0       	breq	.+2      	; 0x1cd6 <DIO_u8SetPinValue+0x2c>
    1cd4:	77 c0       	rjmp	.+238    	; 0x1dc4 <DIO_u8SetPinValue+0x11a>
		{

			switch(Copy_u8port)
    1cd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd8:	28 2f       	mov	r18, r24
    1cda:	30 e0       	ldi	r19, 0x00	; 0
    1cdc:	38 87       	std	Y+8, r19	; 0x08
    1cde:	2f 83       	std	Y+7, r18	; 0x07
    1ce0:	8f 81       	ldd	r24, Y+7	; 0x07
    1ce2:	98 85       	ldd	r25, Y+8	; 0x08
    1ce4:	81 30       	cpi	r24, 0x01	; 1
    1ce6:	91 05       	cpc	r25, r1
    1ce8:	59 f1       	breq	.+86     	; 0x1d40 <DIO_u8SetPinValue+0x96>
    1cea:	2f 81       	ldd	r18, Y+7	; 0x07
    1cec:	38 85       	ldd	r19, Y+8	; 0x08
    1cee:	22 30       	cpi	r18, 0x02	; 2
    1cf0:	31 05       	cpc	r19, r1
    1cf2:	2c f4       	brge	.+10     	; 0x1cfe <DIO_u8SetPinValue+0x54>
    1cf4:	8f 81       	ldd	r24, Y+7	; 0x07
    1cf6:	98 85       	ldd	r25, Y+8	; 0x08
    1cf8:	00 97       	sbiw	r24, 0x00	; 0
    1cfa:	69 f0       	breq	.+26     	; 0x1d16 <DIO_u8SetPinValue+0x6c>
    1cfc:	60 c0       	rjmp	.+192    	; 0x1dbe <DIO_u8SetPinValue+0x114>
    1cfe:	2f 81       	ldd	r18, Y+7	; 0x07
    1d00:	38 85       	ldd	r19, Y+8	; 0x08
    1d02:	22 30       	cpi	r18, 0x02	; 2
    1d04:	31 05       	cpc	r19, r1
    1d06:	89 f1       	breq	.+98     	; 0x1d6a <DIO_u8SetPinValue+0xc0>
    1d08:	8f 81       	ldd	r24, Y+7	; 0x07
    1d0a:	98 85       	ldd	r25, Y+8	; 0x08
    1d0c:	83 30       	cpi	r24, 0x03	; 3
    1d0e:	91 05       	cpc	r25, r1
    1d10:	09 f4       	brne	.+2      	; 0x1d14 <DIO_u8SetPinValue+0x6a>
    1d12:	40 c0       	rjmp	.+128    	; 0x1d94 <DIO_u8SetPinValue+0xea>
    1d14:	54 c0       	rjmp	.+168    	; 0x1dbe <DIO_u8SetPinValue+0x114>
			{
			case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
    1d16:	ab e3       	ldi	r26, 0x3B	; 59
    1d18:	b0 e0       	ldi	r27, 0x00	; 0
    1d1a:	eb e3       	ldi	r30, 0x3B	; 59
    1d1c:	f0 e0       	ldi	r31, 0x00	; 0
    1d1e:	80 81       	ld	r24, Z
    1d20:	48 2f       	mov	r20, r24
    1d22:	8b 81       	ldd	r24, Y+3	; 0x03
    1d24:	28 2f       	mov	r18, r24
    1d26:	30 e0       	ldi	r19, 0x00	; 0
    1d28:	81 e0       	ldi	r24, 0x01	; 1
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	02 2e       	mov	r0, r18
    1d2e:	02 c0       	rjmp	.+4      	; 0x1d34 <DIO_u8SetPinValue+0x8a>
    1d30:	88 0f       	add	r24, r24
    1d32:	99 1f       	adc	r25, r25
    1d34:	0a 94       	dec	r0
    1d36:	e2 f7       	brpl	.-8      	; 0x1d30 <DIO_u8SetPinValue+0x86>
    1d38:	80 95       	com	r24
    1d3a:	84 23       	and	r24, r20
    1d3c:	8c 93       	st	X, r24
    1d3e:	bd c0       	rjmp	.+378    	; 0x1eba <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
    1d40:	a8 e3       	ldi	r26, 0x38	; 56
    1d42:	b0 e0       	ldi	r27, 0x00	; 0
    1d44:	e8 e3       	ldi	r30, 0x38	; 56
    1d46:	f0 e0       	ldi	r31, 0x00	; 0
    1d48:	80 81       	ld	r24, Z
    1d4a:	48 2f       	mov	r20, r24
    1d4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d4e:	28 2f       	mov	r18, r24
    1d50:	30 e0       	ldi	r19, 0x00	; 0
    1d52:	81 e0       	ldi	r24, 0x01	; 1
    1d54:	90 e0       	ldi	r25, 0x00	; 0
    1d56:	02 2e       	mov	r0, r18
    1d58:	02 c0       	rjmp	.+4      	; 0x1d5e <DIO_u8SetPinValue+0xb4>
    1d5a:	88 0f       	add	r24, r24
    1d5c:	99 1f       	adc	r25, r25
    1d5e:	0a 94       	dec	r0
    1d60:	e2 f7       	brpl	.-8      	; 0x1d5a <DIO_u8SetPinValue+0xb0>
    1d62:	80 95       	com	r24
    1d64:	84 23       	and	r24, r20
    1d66:	8c 93       	st	X, r24
    1d68:	a8 c0       	rjmp	.+336    	; 0x1eba <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin); break;
    1d6a:	a5 e3       	ldi	r26, 0x35	; 53
    1d6c:	b0 e0       	ldi	r27, 0x00	; 0
    1d6e:	e5 e3       	ldi	r30, 0x35	; 53
    1d70:	f0 e0       	ldi	r31, 0x00	; 0
    1d72:	80 81       	ld	r24, Z
    1d74:	48 2f       	mov	r20, r24
    1d76:	8b 81       	ldd	r24, Y+3	; 0x03
    1d78:	28 2f       	mov	r18, r24
    1d7a:	30 e0       	ldi	r19, 0x00	; 0
    1d7c:	81 e0       	ldi	r24, 0x01	; 1
    1d7e:	90 e0       	ldi	r25, 0x00	; 0
    1d80:	02 2e       	mov	r0, r18
    1d82:	02 c0       	rjmp	.+4      	; 0x1d88 <DIO_u8SetPinValue+0xde>
    1d84:	88 0f       	add	r24, r24
    1d86:	99 1f       	adc	r25, r25
    1d88:	0a 94       	dec	r0
    1d8a:	e2 f7       	brpl	.-8      	; 0x1d84 <DIO_u8SetPinValue+0xda>
    1d8c:	80 95       	com	r24
    1d8e:	84 23       	and	r24, r20
    1d90:	8c 93       	st	X, r24
    1d92:	93 c0       	rjmp	.+294    	; 0x1eba <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin); break;
    1d94:	a2 e3       	ldi	r26, 0x32	; 50
    1d96:	b0 e0       	ldi	r27, 0x00	; 0
    1d98:	e2 e3       	ldi	r30, 0x32	; 50
    1d9a:	f0 e0       	ldi	r31, 0x00	; 0
    1d9c:	80 81       	ld	r24, Z
    1d9e:	48 2f       	mov	r20, r24
    1da0:	8b 81       	ldd	r24, Y+3	; 0x03
    1da2:	28 2f       	mov	r18, r24
    1da4:	30 e0       	ldi	r19, 0x00	; 0
    1da6:	81 e0       	ldi	r24, 0x01	; 1
    1da8:	90 e0       	ldi	r25, 0x00	; 0
    1daa:	02 2e       	mov	r0, r18
    1dac:	02 c0       	rjmp	.+4      	; 0x1db2 <DIO_u8SetPinValue+0x108>
    1dae:	88 0f       	add	r24, r24
    1db0:	99 1f       	adc	r25, r25
    1db2:	0a 94       	dec	r0
    1db4:	e2 f7       	brpl	.-8      	; 0x1dae <DIO_u8SetPinValue+0x104>
    1db6:	80 95       	com	r24
    1db8:	84 23       	and	r24, r20
    1dba:	8c 93       	st	X, r24
    1dbc:	7e c0       	rjmp	.+252    	; 0x1eba <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState =1; break;
    1dbe:	81 e0       	ldi	r24, 0x01	; 1
    1dc0:	89 83       	std	Y+1, r24	; 0x01
    1dc2:	7b c0       	rjmp	.+246    	; 0x1eba <DIO_u8SetPinValue+0x210>

			}
		}
		else if(Copy_u8Value == DIO_u8PIN_HIGH)
    1dc4:	8c 81       	ldd	r24, Y+4	; 0x04
    1dc6:	81 30       	cpi	r24, 0x01	; 1
    1dc8:	09 f0       	breq	.+2      	; 0x1dcc <DIO_u8SetPinValue+0x122>
    1dca:	72 c0       	rjmp	.+228    	; 0x1eb0 <DIO_u8SetPinValue+0x206>
		{

			switch(Copy_u8port)
    1dcc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dce:	28 2f       	mov	r18, r24
    1dd0:	30 e0       	ldi	r19, 0x00	; 0
    1dd2:	3e 83       	std	Y+6, r19	; 0x06
    1dd4:	2d 83       	std	Y+5, r18	; 0x05
    1dd6:	8d 81       	ldd	r24, Y+5	; 0x05
    1dd8:	9e 81       	ldd	r25, Y+6	; 0x06
    1dda:	81 30       	cpi	r24, 0x01	; 1
    1ddc:	91 05       	cpc	r25, r1
    1dde:	49 f1       	breq	.+82     	; 0x1e32 <DIO_u8SetPinValue+0x188>
    1de0:	2d 81       	ldd	r18, Y+5	; 0x05
    1de2:	3e 81       	ldd	r19, Y+6	; 0x06
    1de4:	22 30       	cpi	r18, 0x02	; 2
    1de6:	31 05       	cpc	r19, r1
    1de8:	2c f4       	brge	.+10     	; 0x1df4 <DIO_u8SetPinValue+0x14a>
    1dea:	8d 81       	ldd	r24, Y+5	; 0x05
    1dec:	9e 81       	ldd	r25, Y+6	; 0x06
    1dee:	00 97       	sbiw	r24, 0x00	; 0
    1df0:	61 f0       	breq	.+24     	; 0x1e0a <DIO_u8SetPinValue+0x160>
    1df2:	5b c0       	rjmp	.+182    	; 0x1eaa <DIO_u8SetPinValue+0x200>
    1df4:	2d 81       	ldd	r18, Y+5	; 0x05
    1df6:	3e 81       	ldd	r19, Y+6	; 0x06
    1df8:	22 30       	cpi	r18, 0x02	; 2
    1dfa:	31 05       	cpc	r19, r1
    1dfc:	71 f1       	breq	.+92     	; 0x1e5a <DIO_u8SetPinValue+0x1b0>
    1dfe:	8d 81       	ldd	r24, Y+5	; 0x05
    1e00:	9e 81       	ldd	r25, Y+6	; 0x06
    1e02:	83 30       	cpi	r24, 0x03	; 3
    1e04:	91 05       	cpc	r25, r1
    1e06:	e9 f1       	breq	.+122    	; 0x1e82 <DIO_u8SetPinValue+0x1d8>
    1e08:	50 c0       	rjmp	.+160    	; 0x1eaa <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
    1e0a:	ab e3       	ldi	r26, 0x3B	; 59
    1e0c:	b0 e0       	ldi	r27, 0x00	; 0
    1e0e:	eb e3       	ldi	r30, 0x3B	; 59
    1e10:	f0 e0       	ldi	r31, 0x00	; 0
    1e12:	80 81       	ld	r24, Z
    1e14:	48 2f       	mov	r20, r24
    1e16:	8b 81       	ldd	r24, Y+3	; 0x03
    1e18:	28 2f       	mov	r18, r24
    1e1a:	30 e0       	ldi	r19, 0x00	; 0
    1e1c:	81 e0       	ldi	r24, 0x01	; 1
    1e1e:	90 e0       	ldi	r25, 0x00	; 0
    1e20:	02 2e       	mov	r0, r18
    1e22:	02 c0       	rjmp	.+4      	; 0x1e28 <DIO_u8SetPinValue+0x17e>
    1e24:	88 0f       	add	r24, r24
    1e26:	99 1f       	adc	r25, r25
    1e28:	0a 94       	dec	r0
    1e2a:	e2 f7       	brpl	.-8      	; 0x1e24 <DIO_u8SetPinValue+0x17a>
    1e2c:	84 2b       	or	r24, r20
    1e2e:	8c 93       	st	X, r24
    1e30:	44 c0       	rjmp	.+136    	; 0x1eba <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
    1e32:	a8 e3       	ldi	r26, 0x38	; 56
    1e34:	b0 e0       	ldi	r27, 0x00	; 0
    1e36:	e8 e3       	ldi	r30, 0x38	; 56
    1e38:	f0 e0       	ldi	r31, 0x00	; 0
    1e3a:	80 81       	ld	r24, Z
    1e3c:	48 2f       	mov	r20, r24
    1e3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e40:	28 2f       	mov	r18, r24
    1e42:	30 e0       	ldi	r19, 0x00	; 0
    1e44:	81 e0       	ldi	r24, 0x01	; 1
    1e46:	90 e0       	ldi	r25, 0x00	; 0
    1e48:	02 2e       	mov	r0, r18
    1e4a:	02 c0       	rjmp	.+4      	; 0x1e50 <DIO_u8SetPinValue+0x1a6>
    1e4c:	88 0f       	add	r24, r24
    1e4e:	99 1f       	adc	r25, r25
    1e50:	0a 94       	dec	r0
    1e52:	e2 f7       	brpl	.-8      	; 0x1e4c <DIO_u8SetPinValue+0x1a2>
    1e54:	84 2b       	or	r24, r20
    1e56:	8c 93       	st	X, r24
    1e58:	30 c0       	rjmp	.+96     	; 0x1eba <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin); break;
    1e5a:	a5 e3       	ldi	r26, 0x35	; 53
    1e5c:	b0 e0       	ldi	r27, 0x00	; 0
    1e5e:	e5 e3       	ldi	r30, 0x35	; 53
    1e60:	f0 e0       	ldi	r31, 0x00	; 0
    1e62:	80 81       	ld	r24, Z
    1e64:	48 2f       	mov	r20, r24
    1e66:	8b 81       	ldd	r24, Y+3	; 0x03
    1e68:	28 2f       	mov	r18, r24
    1e6a:	30 e0       	ldi	r19, 0x00	; 0
    1e6c:	81 e0       	ldi	r24, 0x01	; 1
    1e6e:	90 e0       	ldi	r25, 0x00	; 0
    1e70:	02 2e       	mov	r0, r18
    1e72:	02 c0       	rjmp	.+4      	; 0x1e78 <DIO_u8SetPinValue+0x1ce>
    1e74:	88 0f       	add	r24, r24
    1e76:	99 1f       	adc	r25, r25
    1e78:	0a 94       	dec	r0
    1e7a:	e2 f7       	brpl	.-8      	; 0x1e74 <DIO_u8SetPinValue+0x1ca>
    1e7c:	84 2b       	or	r24, r20
    1e7e:	8c 93       	st	X, r24
    1e80:	1c c0       	rjmp	.+56     	; 0x1eba <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin); break;
    1e82:	a2 e3       	ldi	r26, 0x32	; 50
    1e84:	b0 e0       	ldi	r27, 0x00	; 0
    1e86:	e2 e3       	ldi	r30, 0x32	; 50
    1e88:	f0 e0       	ldi	r31, 0x00	; 0
    1e8a:	80 81       	ld	r24, Z
    1e8c:	48 2f       	mov	r20, r24
    1e8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e90:	28 2f       	mov	r18, r24
    1e92:	30 e0       	ldi	r19, 0x00	; 0
    1e94:	81 e0       	ldi	r24, 0x01	; 1
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	02 2e       	mov	r0, r18
    1e9a:	02 c0       	rjmp	.+4      	; 0x1ea0 <DIO_u8SetPinValue+0x1f6>
    1e9c:	88 0f       	add	r24, r24
    1e9e:	99 1f       	adc	r25, r25
    1ea0:	0a 94       	dec	r0
    1ea2:	e2 f7       	brpl	.-8      	; 0x1e9c <DIO_u8SetPinValue+0x1f2>
    1ea4:	84 2b       	or	r24, r20
    1ea6:	8c 93       	st	X, r24
    1ea8:	08 c0       	rjmp	.+16     	; 0x1eba <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState =1; break;
    1eaa:	81 e0       	ldi	r24, 0x01	; 1
    1eac:	89 83       	std	Y+1, r24	; 0x01
    1eae:	05 c0       	rjmp	.+10     	; 0x1eba <DIO_u8SetPinValue+0x210>

			}
		}
		else
		{
			Local_u8ErrorState = 1;
    1eb0:	81 e0       	ldi	r24, 0x01	; 1
    1eb2:	89 83       	std	Y+1, r24	; 0x01
    1eb4:	02 c0       	rjmp	.+4      	; 0x1eba <DIO_u8SetPinValue+0x210>
		}

	}
	else
	{
		Local_u8ErrorState = 1;
    1eb6:	81 e0       	ldi	r24, 0x01	; 1
    1eb8:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1eba:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ebc:	28 96       	adiw	r28, 0x08	; 8
    1ebe:	0f b6       	in	r0, 0x3f	; 63
    1ec0:	f8 94       	cli
    1ec2:	de bf       	out	0x3e, r29	; 62
    1ec4:	0f be       	out	0x3f, r0	; 63
    1ec6:	cd bf       	out	0x3d, r28	; 61
    1ec8:	cf 91       	pop	r28
    1eca:	df 91       	pop	r29
    1ecc:	08 95       	ret

00001ece <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8port, u8 Copy_u8Value)
{
    1ece:	df 93       	push	r29
    1ed0:	cf 93       	push	r28
    1ed2:	00 d0       	rcall	.+0      	; 0x1ed4 <DIO_u8SetPortValue+0x6>
    1ed4:	00 d0       	rcall	.+0      	; 0x1ed6 <DIO_u8SetPortValue+0x8>
    1ed6:	0f 92       	push	r0
    1ed8:	cd b7       	in	r28, 0x3d	; 61
    1eda:	de b7       	in	r29, 0x3e	; 62
    1edc:	8a 83       	std	Y+2, r24	; 0x02
    1ede:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    1ee0:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8port<=DIO_u8PORTD)
    1ee2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee4:	84 30       	cpi	r24, 0x04	; 4
    1ee6:	b0 f5       	brcc	.+108    	; 0x1f54 <DIO_u8SetPortValue+0x86>
	{
		switch(Copy_u8port)
    1ee8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eea:	28 2f       	mov	r18, r24
    1eec:	30 e0       	ldi	r19, 0x00	; 0
    1eee:	3d 83       	std	Y+5, r19	; 0x05
    1ef0:	2c 83       	std	Y+4, r18	; 0x04
    1ef2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ef4:	9d 81       	ldd	r25, Y+5	; 0x05
    1ef6:	81 30       	cpi	r24, 0x01	; 1
    1ef8:	91 05       	cpc	r25, r1
    1efa:	d1 f0       	breq	.+52     	; 0x1f30 <DIO_u8SetPortValue+0x62>
    1efc:	2c 81       	ldd	r18, Y+4	; 0x04
    1efe:	3d 81       	ldd	r19, Y+5	; 0x05
    1f00:	22 30       	cpi	r18, 0x02	; 2
    1f02:	31 05       	cpc	r19, r1
    1f04:	2c f4       	brge	.+10     	; 0x1f10 <DIO_u8SetPortValue+0x42>
    1f06:	8c 81       	ldd	r24, Y+4	; 0x04
    1f08:	9d 81       	ldd	r25, Y+5	; 0x05
    1f0a:	00 97       	sbiw	r24, 0x00	; 0
    1f0c:	61 f0       	breq	.+24     	; 0x1f26 <DIO_u8SetPortValue+0x58>
    1f0e:	1f c0       	rjmp	.+62     	; 0x1f4e <DIO_u8SetPortValue+0x80>
    1f10:	2c 81       	ldd	r18, Y+4	; 0x04
    1f12:	3d 81       	ldd	r19, Y+5	; 0x05
    1f14:	22 30       	cpi	r18, 0x02	; 2
    1f16:	31 05       	cpc	r19, r1
    1f18:	81 f0       	breq	.+32     	; 0x1f3a <DIO_u8SetPortValue+0x6c>
    1f1a:	8c 81       	ldd	r24, Y+4	; 0x04
    1f1c:	9d 81       	ldd	r25, Y+5	; 0x05
    1f1e:	83 30       	cpi	r24, 0x03	; 3
    1f20:	91 05       	cpc	r25, r1
    1f22:	81 f0       	breq	.+32     	; 0x1f44 <DIO_u8SetPortValue+0x76>
    1f24:	14 c0       	rjmp	.+40     	; 0x1f4e <DIO_u8SetPortValue+0x80>
		{
		case DIO_u8PORTA: PORTA = Copy_u8Value; break;
    1f26:	eb e3       	ldi	r30, 0x3B	; 59
    1f28:	f0 e0       	ldi	r31, 0x00	; 0
    1f2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f2c:	80 83       	st	Z, r24
    1f2e:	14 c0       	rjmp	.+40     	; 0x1f58 <DIO_u8SetPortValue+0x8a>
		case DIO_u8PORTB: PORTB = Copy_u8Value; break;
    1f30:	e8 e3       	ldi	r30, 0x38	; 56
    1f32:	f0 e0       	ldi	r31, 0x00	; 0
    1f34:	8b 81       	ldd	r24, Y+3	; 0x03
    1f36:	80 83       	st	Z, r24
    1f38:	0f c0       	rjmp	.+30     	; 0x1f58 <DIO_u8SetPortValue+0x8a>
		case DIO_u8PORTC: PORTC = Copy_u8Value; break;
    1f3a:	e5 e3       	ldi	r30, 0x35	; 53
    1f3c:	f0 e0       	ldi	r31, 0x00	; 0
    1f3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f40:	80 83       	st	Z, r24
    1f42:	0a c0       	rjmp	.+20     	; 0x1f58 <DIO_u8SetPortValue+0x8a>
		case DIO_u8PORTD: PORTD = Copy_u8Value; break;
    1f44:	e2 e3       	ldi	r30, 0x32	; 50
    1f46:	f0 e0       	ldi	r31, 0x00	; 0
    1f48:	8b 81       	ldd	r24, Y+3	; 0x03
    1f4a:	80 83       	st	Z, r24
    1f4c:	05 c0       	rjmp	.+10     	; 0x1f58 <DIO_u8SetPortValue+0x8a>
		default: Local_u8ErrorState =1; break;
    1f4e:	81 e0       	ldi	r24, 0x01	; 1
    1f50:	89 83       	std	Y+1, r24	; 0x01
    1f52:	02 c0       	rjmp	.+4      	; 0x1f58 <DIO_u8SetPortValue+0x8a>

		}
	}
	else
	{
		Local_u8ErrorState = 1;
    1f54:	81 e0       	ldi	r24, 0x01	; 1
    1f56:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_u8ErrorState;
    1f58:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f5a:	0f 90       	pop	r0
    1f5c:	0f 90       	pop	r0
    1f5e:	0f 90       	pop	r0
    1f60:	0f 90       	pop	r0
    1f62:	0f 90       	pop	r0
    1f64:	cf 91       	pop	r28
    1f66:	df 91       	pop	r29
    1f68:	08 95       	ret

00001f6a <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8port, u8 Copy_u8Pin, u8* Copy_Pu8Value)
{
    1f6a:	df 93       	push	r29
    1f6c:	cf 93       	push	r28
    1f6e:	cd b7       	in	r28, 0x3d	; 61
    1f70:	de b7       	in	r29, 0x3e	; 62
    1f72:	27 97       	sbiw	r28, 0x07	; 7
    1f74:	0f b6       	in	r0, 0x3f	; 63
    1f76:	f8 94       	cli
    1f78:	de bf       	out	0x3e, r29	; 62
    1f7a:	0f be       	out	0x3f, r0	; 63
    1f7c:	cd bf       	out	0x3d, r28	; 61
    1f7e:	8a 83       	std	Y+2, r24	; 0x02
    1f80:	6b 83       	std	Y+3, r22	; 0x03
    1f82:	5d 83       	std	Y+5, r21	; 0x05
    1f84:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    1f86:	19 82       	std	Y+1, r1	; 0x01

	if((Copy_Pu8Value != NULL )&&(Copy_u8Pin<=DIO_u8PIN7))
    1f88:	8c 81       	ldd	r24, Y+4	; 0x04
    1f8a:	9d 81       	ldd	r25, Y+5	; 0x05
    1f8c:	00 97       	sbiw	r24, 0x00	; 0
    1f8e:	09 f4       	brne	.+2      	; 0x1f92 <DIO_u8GetPinValue+0x28>
    1f90:	78 c0       	rjmp	.+240    	; 0x2082 <DIO_u8GetPinValue+0x118>
    1f92:	8b 81       	ldd	r24, Y+3	; 0x03
    1f94:	88 30       	cpi	r24, 0x08	; 8
    1f96:	08 f0       	brcs	.+2      	; 0x1f9a <DIO_u8GetPinValue+0x30>
    1f98:	74 c0       	rjmp	.+232    	; 0x2082 <DIO_u8GetPinValue+0x118>
	{


			switch(Copy_u8port)
    1f9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f9c:	28 2f       	mov	r18, r24
    1f9e:	30 e0       	ldi	r19, 0x00	; 0
    1fa0:	3f 83       	std	Y+7, r19	; 0x07
    1fa2:	2e 83       	std	Y+6, r18	; 0x06
    1fa4:	4e 81       	ldd	r20, Y+6	; 0x06
    1fa6:	5f 81       	ldd	r21, Y+7	; 0x07
    1fa8:	41 30       	cpi	r20, 0x01	; 1
    1faa:	51 05       	cpc	r21, r1
    1fac:	59 f1       	breq	.+86     	; 0x2004 <DIO_u8GetPinValue+0x9a>
    1fae:	8e 81       	ldd	r24, Y+6	; 0x06
    1fb0:	9f 81       	ldd	r25, Y+7	; 0x07
    1fb2:	82 30       	cpi	r24, 0x02	; 2
    1fb4:	91 05       	cpc	r25, r1
    1fb6:	34 f4       	brge	.+12     	; 0x1fc4 <DIO_u8GetPinValue+0x5a>
    1fb8:	2e 81       	ldd	r18, Y+6	; 0x06
    1fba:	3f 81       	ldd	r19, Y+7	; 0x07
    1fbc:	21 15       	cp	r18, r1
    1fbe:	31 05       	cpc	r19, r1
    1fc0:	69 f0       	breq	.+26     	; 0x1fdc <DIO_u8GetPinValue+0x72>
    1fc2:	5c c0       	rjmp	.+184    	; 0x207c <DIO_u8GetPinValue+0x112>
    1fc4:	4e 81       	ldd	r20, Y+6	; 0x06
    1fc6:	5f 81       	ldd	r21, Y+7	; 0x07
    1fc8:	42 30       	cpi	r20, 0x02	; 2
    1fca:	51 05       	cpc	r21, r1
    1fcc:	79 f1       	breq	.+94     	; 0x202c <DIO_u8GetPinValue+0xc2>
    1fce:	8e 81       	ldd	r24, Y+6	; 0x06
    1fd0:	9f 81       	ldd	r25, Y+7	; 0x07
    1fd2:	83 30       	cpi	r24, 0x03	; 3
    1fd4:	91 05       	cpc	r25, r1
    1fd6:	09 f4       	brne	.+2      	; 0x1fda <DIO_u8GetPinValue+0x70>
    1fd8:	3d c0       	rjmp	.+122    	; 0x2054 <DIO_u8GetPinValue+0xea>
    1fda:	50 c0       	rjmp	.+160    	; 0x207c <DIO_u8GetPinValue+0x112>
			{
			case DIO_u8PORTA: * Copy_Pu8Value = GET_BIT(PINA,Copy_u8Pin); break;
    1fdc:	e9 e3       	ldi	r30, 0x39	; 57
    1fde:	f0 e0       	ldi	r31, 0x00	; 0
    1fe0:	80 81       	ld	r24, Z
    1fe2:	28 2f       	mov	r18, r24
    1fe4:	30 e0       	ldi	r19, 0x00	; 0
    1fe6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe8:	88 2f       	mov	r24, r24
    1fea:	90 e0       	ldi	r25, 0x00	; 0
    1fec:	a9 01       	movw	r20, r18
    1fee:	02 c0       	rjmp	.+4      	; 0x1ff4 <DIO_u8GetPinValue+0x8a>
    1ff0:	55 95       	asr	r21
    1ff2:	47 95       	ror	r20
    1ff4:	8a 95       	dec	r24
    1ff6:	e2 f7       	brpl	.-8      	; 0x1ff0 <DIO_u8GetPinValue+0x86>
    1ff8:	ca 01       	movw	r24, r20
    1ffa:	81 70       	andi	r24, 0x01	; 1
    1ffc:	ec 81       	ldd	r30, Y+4	; 0x04
    1ffe:	fd 81       	ldd	r31, Y+5	; 0x05
    2000:	80 83       	st	Z, r24
    2002:	41 c0       	rjmp	.+130    	; 0x2086 <DIO_u8GetPinValue+0x11c>
			case DIO_u8PORTB: * Copy_Pu8Value = GET_BIT(PINB,Copy_u8Pin); break;
    2004:	e6 e3       	ldi	r30, 0x36	; 54
    2006:	f0 e0       	ldi	r31, 0x00	; 0
    2008:	80 81       	ld	r24, Z
    200a:	28 2f       	mov	r18, r24
    200c:	30 e0       	ldi	r19, 0x00	; 0
    200e:	8b 81       	ldd	r24, Y+3	; 0x03
    2010:	88 2f       	mov	r24, r24
    2012:	90 e0       	ldi	r25, 0x00	; 0
    2014:	a9 01       	movw	r20, r18
    2016:	02 c0       	rjmp	.+4      	; 0x201c <DIO_u8GetPinValue+0xb2>
    2018:	55 95       	asr	r21
    201a:	47 95       	ror	r20
    201c:	8a 95       	dec	r24
    201e:	e2 f7       	brpl	.-8      	; 0x2018 <DIO_u8GetPinValue+0xae>
    2020:	ca 01       	movw	r24, r20
    2022:	81 70       	andi	r24, 0x01	; 1
    2024:	ec 81       	ldd	r30, Y+4	; 0x04
    2026:	fd 81       	ldd	r31, Y+5	; 0x05
    2028:	80 83       	st	Z, r24
    202a:	2d c0       	rjmp	.+90     	; 0x2086 <DIO_u8GetPinValue+0x11c>
			case DIO_u8PORTC: * Copy_Pu8Value = GET_BIT(PINC,Copy_u8Pin); break;
    202c:	e3 e3       	ldi	r30, 0x33	; 51
    202e:	f0 e0       	ldi	r31, 0x00	; 0
    2030:	80 81       	ld	r24, Z
    2032:	28 2f       	mov	r18, r24
    2034:	30 e0       	ldi	r19, 0x00	; 0
    2036:	8b 81       	ldd	r24, Y+3	; 0x03
    2038:	88 2f       	mov	r24, r24
    203a:	90 e0       	ldi	r25, 0x00	; 0
    203c:	a9 01       	movw	r20, r18
    203e:	02 c0       	rjmp	.+4      	; 0x2044 <DIO_u8GetPinValue+0xda>
    2040:	55 95       	asr	r21
    2042:	47 95       	ror	r20
    2044:	8a 95       	dec	r24
    2046:	e2 f7       	brpl	.-8      	; 0x2040 <DIO_u8GetPinValue+0xd6>
    2048:	ca 01       	movw	r24, r20
    204a:	81 70       	andi	r24, 0x01	; 1
    204c:	ec 81       	ldd	r30, Y+4	; 0x04
    204e:	fd 81       	ldd	r31, Y+5	; 0x05
    2050:	80 83       	st	Z, r24
    2052:	19 c0       	rjmp	.+50     	; 0x2086 <DIO_u8GetPinValue+0x11c>
			case DIO_u8PORTD: * Copy_Pu8Value = GET_BIT(PIND,Copy_u8Pin); break;
    2054:	e0 e3       	ldi	r30, 0x30	; 48
    2056:	f0 e0       	ldi	r31, 0x00	; 0
    2058:	80 81       	ld	r24, Z
    205a:	28 2f       	mov	r18, r24
    205c:	30 e0       	ldi	r19, 0x00	; 0
    205e:	8b 81       	ldd	r24, Y+3	; 0x03
    2060:	88 2f       	mov	r24, r24
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	a9 01       	movw	r20, r18
    2066:	02 c0       	rjmp	.+4      	; 0x206c <DIO_u8GetPinValue+0x102>
    2068:	55 95       	asr	r21
    206a:	47 95       	ror	r20
    206c:	8a 95       	dec	r24
    206e:	e2 f7       	brpl	.-8      	; 0x2068 <DIO_u8GetPinValue+0xfe>
    2070:	ca 01       	movw	r24, r20
    2072:	81 70       	andi	r24, 0x01	; 1
    2074:	ec 81       	ldd	r30, Y+4	; 0x04
    2076:	fd 81       	ldd	r31, Y+5	; 0x05
    2078:	80 83       	st	Z, r24
    207a:	05 c0       	rjmp	.+10     	; 0x2086 <DIO_u8GetPinValue+0x11c>
			default: Local_u8ErrorState =1; break;
    207c:	81 e0       	ldi	r24, 0x01	; 1
    207e:	89 83       	std	Y+1, r24	; 0x01
    2080:	02 c0       	rjmp	.+4      	; 0x2086 <DIO_u8GetPinValue+0x11c>

			}
	}
	else
	{
		Local_u8ErrorState = 1;
    2082:	81 e0       	ldi	r24, 0x01	; 1
    2084:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    2086:	89 81       	ldd	r24, Y+1	; 0x01
}
    2088:	27 96       	adiw	r28, 0x07	; 7
    208a:	0f b6       	in	r0, 0x3f	; 63
    208c:	f8 94       	cli
    208e:	de bf       	out	0x3e, r29	; 62
    2090:	0f be       	out	0x3f, r0	; 63
    2092:	cd bf       	out	0x3d, r28	; 61
    2094:	cf 91       	pop	r28
    2096:	df 91       	pop	r29
    2098:	08 95       	ret

0000209a <DIO_u8AndWithPort>:

u8 DIO_u8AndWithPort(u8 Copy_u8port, u8 Copy_u8Value)
{
    209a:	df 93       	push	r29
    209c:	cf 93       	push	r28
    209e:	00 d0       	rcall	.+0      	; 0x20a0 <DIO_u8AndWithPort+0x6>
    20a0:	00 d0       	rcall	.+0      	; 0x20a2 <DIO_u8AndWithPort+0x8>
    20a2:	0f 92       	push	r0
    20a4:	cd b7       	in	r28, 0x3d	; 61
    20a6:	de b7       	in	r29, 0x3e	; 62
    20a8:	8a 83       	std	Y+2, r24	; 0x02
    20aa:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Result = 0;
    20ac:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8port)
    20ae:	8a 81       	ldd	r24, Y+2	; 0x02
    20b0:	28 2f       	mov	r18, r24
    20b2:	30 e0       	ldi	r19, 0x00	; 0
    20b4:	3d 83       	std	Y+5, r19	; 0x05
    20b6:	2c 83       	std	Y+4, r18	; 0x04
    20b8:	8c 81       	ldd	r24, Y+4	; 0x04
    20ba:	9d 81       	ldd	r25, Y+5	; 0x05
    20bc:	81 30       	cpi	r24, 0x01	; 1
    20be:	91 05       	cpc	r25, r1
    20c0:	e1 f0       	breq	.+56     	; 0x20fa <DIO_u8AndWithPort+0x60>
    20c2:	2c 81       	ldd	r18, Y+4	; 0x04
    20c4:	3d 81       	ldd	r19, Y+5	; 0x05
    20c6:	22 30       	cpi	r18, 0x02	; 2
    20c8:	31 05       	cpc	r19, r1
    20ca:	2c f4       	brge	.+10     	; 0x20d6 <DIO_u8AndWithPort+0x3c>
    20cc:	8c 81       	ldd	r24, Y+4	; 0x04
    20ce:	9d 81       	ldd	r25, Y+5	; 0x05
    20d0:	00 97       	sbiw	r24, 0x00	; 0
    20d2:	61 f0       	breq	.+24     	; 0x20ec <DIO_u8AndWithPort+0x52>
    20d4:	26 c0       	rjmp	.+76     	; 0x2122 <DIO_u8AndWithPort+0x88>
    20d6:	2c 81       	ldd	r18, Y+4	; 0x04
    20d8:	3d 81       	ldd	r19, Y+5	; 0x05
    20da:	22 30       	cpi	r18, 0x02	; 2
    20dc:	31 05       	cpc	r19, r1
    20de:	a1 f0       	breq	.+40     	; 0x2108 <DIO_u8AndWithPort+0x6e>
    20e0:	8c 81       	ldd	r24, Y+4	; 0x04
    20e2:	9d 81       	ldd	r25, Y+5	; 0x05
    20e4:	83 30       	cpi	r24, 0x03	; 3
    20e6:	91 05       	cpc	r25, r1
    20e8:	b1 f0       	breq	.+44     	; 0x2116 <DIO_u8AndWithPort+0x7c>
    20ea:	1b c0       	rjmp	.+54     	; 0x2122 <DIO_u8AndWithPort+0x88>
			{
			case DIO_u8PORTA: Local_u8Result= PORTA & Copy_u8Value; break;
    20ec:	eb e3       	ldi	r30, 0x3B	; 59
    20ee:	f0 e0       	ldi	r31, 0x00	; 0
    20f0:	90 81       	ld	r25, Z
    20f2:	8b 81       	ldd	r24, Y+3	; 0x03
    20f4:	89 23       	and	r24, r25
    20f6:	89 83       	std	Y+1, r24	; 0x01
    20f8:	14 c0       	rjmp	.+40     	; 0x2122 <DIO_u8AndWithPort+0x88>
			case DIO_u8PORTB: Local_u8Result= PORTB & Copy_u8Value; break;
    20fa:	e8 e3       	ldi	r30, 0x38	; 56
    20fc:	f0 e0       	ldi	r31, 0x00	; 0
    20fe:	90 81       	ld	r25, Z
    2100:	8b 81       	ldd	r24, Y+3	; 0x03
    2102:	89 23       	and	r24, r25
    2104:	89 83       	std	Y+1, r24	; 0x01
    2106:	0d c0       	rjmp	.+26     	; 0x2122 <DIO_u8AndWithPort+0x88>
			case DIO_u8PORTC: Local_u8Result= PORTC & Copy_u8Value; break;
    2108:	e5 e3       	ldi	r30, 0x35	; 53
    210a:	f0 e0       	ldi	r31, 0x00	; 0
    210c:	90 81       	ld	r25, Z
    210e:	8b 81       	ldd	r24, Y+3	; 0x03
    2110:	89 23       	and	r24, r25
    2112:	89 83       	std	Y+1, r24	; 0x01
    2114:	06 c0       	rjmp	.+12     	; 0x2122 <DIO_u8AndWithPort+0x88>
			case DIO_u8PORTD: Local_u8Result = PORTD & Copy_u8Value; break;
    2116:	e2 e3       	ldi	r30, 0x32	; 50
    2118:	f0 e0       	ldi	r31, 0x00	; 0
    211a:	90 81       	ld	r25, Z
    211c:	8b 81       	ldd	r24, Y+3	; 0x03
    211e:	89 23       	and	r24, r25
    2120:	89 83       	std	Y+1, r24	; 0x01
			default:  break;


			}
	return Local_u8Result;
    2122:	89 81       	ldd	r24, Y+1	; 0x01
}
    2124:	0f 90       	pop	r0
    2126:	0f 90       	pop	r0
    2128:	0f 90       	pop	r0
    212a:	0f 90       	pop	r0
    212c:	0f 90       	pop	r0
    212e:	cf 91       	pop	r28
    2130:	df 91       	pop	r29
    2132:	08 95       	ret

00002134 <GIE_VoidEnable>:

#include "GIE_interface.h"
#include "GIE_register.h"

void GIE_VoidEnable(void)
{
    2134:	df 93       	push	r29
    2136:	cf 93       	push	r28
    2138:	cd b7       	in	r28, 0x3d	; 61
    213a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
    213c:	af e5       	ldi	r26, 0x5F	; 95
    213e:	b0 e0       	ldi	r27, 0x00	; 0
    2140:	ef e5       	ldi	r30, 0x5F	; 95
    2142:	f0 e0       	ldi	r31, 0x00	; 0
    2144:	80 81       	ld	r24, Z
    2146:	80 68       	ori	r24, 0x80	; 128
    2148:	8c 93       	st	X, r24
}
    214a:	cf 91       	pop	r28
    214c:	df 91       	pop	r29
    214e:	08 95       	ret

00002150 <GIE_VoidDisable>:
void GIE_VoidDisable(void)
{
    2150:	df 93       	push	r29
    2152:	cf 93       	push	r28
    2154:	cd b7       	in	r28, 0x3d	; 61
    2156:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,SREG_I);
    2158:	af e5       	ldi	r26, 0x5F	; 95
    215a:	b0 e0       	ldi	r27, 0x00	; 0
    215c:	ef e5       	ldi	r30, 0x5F	; 95
    215e:	f0 e0       	ldi	r31, 0x00	; 0
    2160:	80 81       	ld	r24, Z
    2162:	8f 77       	andi	r24, 0x7F	; 127
    2164:	8c 93       	st	X, r24
}
    2166:	cf 91       	pop	r28
    2168:	df 91       	pop	r29
    216a:	08 95       	ret

0000216c <PORT_VoidInit>:
#include "PORT_interface.h"
#include "PORT_register.h"


void PORT_VoidInit(void)
{
    216c:	df 93       	push	r29
    216e:	cf 93       	push	r28
    2170:	cd b7       	in	r28, 0x3d	; 61
    2172:	de b7       	in	r29, 0x3e	; 62
	DDRA = PORTA_DIR;
    2174:	ea e3       	ldi	r30, 0x3A	; 58
    2176:	f0 e0       	ldi	r31, 0x00	; 0
    2178:	8e e7       	ldi	r24, 0x7E	; 126
    217a:	80 83       	st	Z, r24
	DDRB = PORTB_DIR;
    217c:	e7 e3       	ldi	r30, 0x37	; 55
    217e:	f0 e0       	ldi	r31, 0x00	; 0
    2180:	10 82       	st	Z, r1
	DDRC = PORTC_DIR;
    2182:	e4 e3       	ldi	r30, 0x34	; 52
    2184:	f0 e0       	ldi	r31, 0x00	; 0
    2186:	10 82       	st	Z, r1
	DDRD = PORTD_DIR;
    2188:	e1 e3       	ldi	r30, 0x31	; 49
    218a:	f0 e0       	ldi	r31, 0x00	; 0
    218c:	10 82       	st	Z, r1
	
	PORTA = PORTA_INITIAL_VALUE;
    218e:	eb e3       	ldi	r30, 0x3B	; 59
    2190:	f0 e0       	ldi	r31, 0x00	; 0
    2192:	10 82       	st	Z, r1
	PORTB = PORTB_INITIAL_VALUE;
    2194:	e8 e3       	ldi	r30, 0x38	; 56
    2196:	f0 e0       	ldi	r31, 0x00	; 0
    2198:	10 82       	st	Z, r1
	PORTC = PORTC_INITIAL_VALUE;
    219a:	e5 e3       	ldi	r30, 0x35	; 53
    219c:	f0 e0       	ldi	r31, 0x00	; 0
    219e:	10 82       	st	Z, r1
	PORTD = PORTD_INITIAL_VALUE;
    21a0:	e2 e3       	ldi	r30, 0x32	; 50
    21a2:	f0 e0       	ldi	r31, 0x00	; 0
    21a4:	10 82       	st	Z, r1


}
    21a6:	cf 91       	pop	r28
    21a8:	df 91       	pop	r29
    21aa:	08 95       	ret

000021ac <main>:
#include <util/delay.h>
#include "ADC_interface.h"
#include "CLCD_interface.h"

void main(void)
{
    21ac:	df 93       	push	r29
    21ae:	cf 93       	push	r28
    21b0:	cd b7       	in	r28, 0x3d	; 61
    21b2:	de b7       	in	r29, 0x3e	; 62
    21b4:	64 97       	sbiw	r28, 0x14	; 20
    21b6:	0f b6       	in	r0, 0x3f	; 63
    21b8:	f8 94       	cli
    21ba:	de bf       	out	0x3e, r29	; 62
    21bc:	0f be       	out	0x3f, r0	; 63
    21be:	cd bf       	out	0x3d, r28	; 61
	PORT_VoidInit();
    21c0:	0e 94 b6 10 	call	0x216c	; 0x216c <PORT_VoidInit>
	CLCD_voidInit();
    21c4:	0e 94 90 0b 	call	0x1720	; 0x1720 <CLCD_voidInit>
	ADC_voidInit();
    21c8:	0e 94 f1 06 	call	0xde2	; 0xde2 <ADC_voidInit>
	u16 Local_Adc_Reading;
	u16 Local_Temp,x;

	while(1)
	{
		Local_Adc_Reading = ADC_u8GetChannelReading(ADC0);
    21cc:	80 e0       	ldi	r24, 0x00	; 0
    21ce:	0e 94 28 07 	call	0xe50	; 0xe50 <ADC_u8GetChannelReading>
    21d2:	9c 8b       	std	Y+20, r25	; 0x14
    21d4:	8b 8b       	std	Y+19, r24	; 0x13

		Local_Temp = (u16)(((u32)Local_Adc_Reading * 500UL)/1024UL);
    21d6:	8b 89       	ldd	r24, Y+19	; 0x13
    21d8:	9c 89       	ldd	r25, Y+20	; 0x14
    21da:	cc 01       	movw	r24, r24
    21dc:	a0 e0       	ldi	r26, 0x00	; 0
    21de:	b0 e0       	ldi	r27, 0x00	; 0
    21e0:	24 ef       	ldi	r18, 0xF4	; 244
    21e2:	31 e0       	ldi	r19, 0x01	; 1
    21e4:	40 e0       	ldi	r20, 0x00	; 0
    21e6:	50 e0       	ldi	r21, 0x00	; 0
    21e8:	bc 01       	movw	r22, r24
    21ea:	cd 01       	movw	r24, r26
    21ec:	0e 94 b7 11 	call	0x236e	; 0x236e <__mulsi3>
    21f0:	dc 01       	movw	r26, r24
    21f2:	cb 01       	movw	r24, r22
    21f4:	07 2e       	mov	r0, r23
    21f6:	7a e0       	ldi	r23, 0x0A	; 10
    21f8:	b6 95       	lsr	r27
    21fa:	a7 95       	ror	r26
    21fc:	97 95       	ror	r25
    21fe:	87 95       	ror	r24
    2200:	7a 95       	dec	r23
    2202:	d1 f7       	brne	.-12     	; 0x21f8 <main+0x4c>
    2204:	70 2d       	mov	r23, r0
    2206:	9a 8b       	std	Y+18, r25	; 0x12
    2208:	89 8b       	std	Y+17, r24	; 0x11

		if(x!=Local_Temp)
    220a:	2f 85       	ldd	r18, Y+15	; 0x0f
    220c:	38 89       	ldd	r19, Y+16	; 0x10
    220e:	89 89       	ldd	r24, Y+17	; 0x11
    2210:	9a 89       	ldd	r25, Y+18	; 0x12
    2212:	28 17       	cp	r18, r24
    2214:	39 07       	cpc	r19, r25
    2216:	11 f0       	breq	.+4      	; 0x221c <main+0x70>
		CLCD_voidClear();
    2218:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <CLCD_voidClear>

		CLCD_voidGoToXY(0,0);
    221c:	80 e0       	ldi	r24, 0x00	; 0
    221e:	60 e0       	ldi	r22, 0x00	; 0
    2220:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <CLCD_voidGoToXY>
		CLCD_voidSendString("Temp = ");
    2224:	80 e6       	ldi	r24, 0x60	; 96
    2226:	90 e0       	ldi	r25, 0x00	; 0
    2228:	0e 94 2a 0c 	call	0x1854	; 0x1854 <CLCD_voidSendString>
		CLCD_VoidWriteNumber(Local_Temp);
    222c:	89 89       	ldd	r24, Y+17	; 0x11
    222e:	9a 89       	ldd	r25, Y+18	; 0x12
    2230:	cc 01       	movw	r24, r24
    2232:	a0 e0       	ldi	r26, 0x00	; 0
    2234:	b0 e0       	ldi	r27, 0x00	; 0
    2236:	bc 01       	movw	r22, r24
    2238:	cd 01       	movw	r24, r26
    223a:	0e 94 83 04 	call	0x906	; 0x906 <__floatunsisf>
    223e:	dc 01       	movw	r26, r24
    2240:	cb 01       	movw	r24, r22
    2242:	bc 01       	movw	r22, r24
    2244:	cd 01       	movw	r24, r26
    2246:	0e 94 b3 0c 	call	0x1966	; 0x1966 <CLCD_VoidWriteNumber>
		CLCD_voidSendString(" c");
    224a:	88 e6       	ldi	r24, 0x68	; 104
    224c:	90 e0       	ldi	r25, 0x00	; 0
    224e:	0e 94 2a 0c 	call	0x1854	; 0x1854 <CLCD_voidSendString>
		x= Local_Temp;
    2252:	89 89       	ldd	r24, Y+17	; 0x11
    2254:	9a 89       	ldd	r25, Y+18	; 0x12
    2256:	98 8b       	std	Y+16, r25	; 0x10
    2258:	8f 87       	std	Y+15, r24	; 0x0f

		CLCD_voidGoToXY(1,0);
    225a:	81 e0       	ldi	r24, 0x01	; 1
    225c:	60 e0       	ldi	r22, 0x00	; 0
    225e:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <CLCD_voidGoToXY>
		CLCD_voidSendString("Temp = ");
    2262:	80 e6       	ldi	r24, 0x60	; 96
    2264:	90 e0       	ldi	r25, 0x00	; 0
    2266:	0e 94 2a 0c 	call	0x1854	; 0x1854 <CLCD_voidSendString>
		CLCD_VoidWriteNumber(Local_Adc_Reading);
    226a:	8b 89       	ldd	r24, Y+19	; 0x13
    226c:	9c 89       	ldd	r25, Y+20	; 0x14
    226e:	cc 01       	movw	r24, r24
    2270:	a0 e0       	ldi	r26, 0x00	; 0
    2272:	b0 e0       	ldi	r27, 0x00	; 0
    2274:	bc 01       	movw	r22, r24
    2276:	cd 01       	movw	r24, r26
    2278:	0e 94 83 04 	call	0x906	; 0x906 <__floatunsisf>
    227c:	dc 01       	movw	r26, r24
    227e:	cb 01       	movw	r24, r22
    2280:	bc 01       	movw	r22, r24
    2282:	cd 01       	movw	r24, r26
    2284:	0e 94 b3 0c 	call	0x1966	; 0x1966 <CLCD_VoidWriteNumber>
    2288:	80 e0       	ldi	r24, 0x00	; 0
    228a:	90 e0       	ldi	r25, 0x00	; 0
    228c:	a8 e4       	ldi	r26, 0x48	; 72
    228e:	b3 e4       	ldi	r27, 0x43	; 67
    2290:	8b 87       	std	Y+11, r24	; 0x0b
    2292:	9c 87       	std	Y+12, r25	; 0x0c
    2294:	ad 87       	std	Y+13, r26	; 0x0d
    2296:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2298:	6b 85       	ldd	r22, Y+11	; 0x0b
    229a:	7c 85       	ldd	r23, Y+12	; 0x0c
    229c:	8d 85       	ldd	r24, Y+13	; 0x0d
    229e:	9e 85       	ldd	r25, Y+14	; 0x0e
    22a0:	20 e0       	ldi	r18, 0x00	; 0
    22a2:	30 e0       	ldi	r19, 0x00	; 0
    22a4:	4a ef       	ldi	r20, 0xFA	; 250
    22a6:	54 e4       	ldi	r21, 0x44	; 68
    22a8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22ac:	dc 01       	movw	r26, r24
    22ae:	cb 01       	movw	r24, r22
    22b0:	8f 83       	std	Y+7, r24	; 0x07
    22b2:	98 87       	std	Y+8, r25	; 0x08
    22b4:	a9 87       	std	Y+9, r26	; 0x09
    22b6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22b8:	6f 81       	ldd	r22, Y+7	; 0x07
    22ba:	78 85       	ldd	r23, Y+8	; 0x08
    22bc:	89 85       	ldd	r24, Y+9	; 0x09
    22be:	9a 85       	ldd	r25, Y+10	; 0x0a
    22c0:	20 e0       	ldi	r18, 0x00	; 0
    22c2:	30 e0       	ldi	r19, 0x00	; 0
    22c4:	40 e8       	ldi	r20, 0x80	; 128
    22c6:	5f e3       	ldi	r21, 0x3F	; 63
    22c8:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    22cc:	88 23       	and	r24, r24
    22ce:	2c f4       	brge	.+10     	; 0x22da <main+0x12e>
		__ticks = 1;
    22d0:	81 e0       	ldi	r24, 0x01	; 1
    22d2:	90 e0       	ldi	r25, 0x00	; 0
    22d4:	9e 83       	std	Y+6, r25	; 0x06
    22d6:	8d 83       	std	Y+5, r24	; 0x05
    22d8:	3f c0       	rjmp	.+126    	; 0x2358 <main+0x1ac>
	else if (__tmp > 65535)
    22da:	6f 81       	ldd	r22, Y+7	; 0x07
    22dc:	78 85       	ldd	r23, Y+8	; 0x08
    22de:	89 85       	ldd	r24, Y+9	; 0x09
    22e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    22e2:	20 e0       	ldi	r18, 0x00	; 0
    22e4:	3f ef       	ldi	r19, 0xFF	; 255
    22e6:	4f e7       	ldi	r20, 0x7F	; 127
    22e8:	57 e4       	ldi	r21, 0x47	; 71
    22ea:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    22ee:	18 16       	cp	r1, r24
    22f0:	4c f5       	brge	.+82     	; 0x2344 <main+0x198>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    22f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    22f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    22f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    22fa:	20 e0       	ldi	r18, 0x00	; 0
    22fc:	30 e0       	ldi	r19, 0x00	; 0
    22fe:	40 e2       	ldi	r20, 0x20	; 32
    2300:	51 e4       	ldi	r21, 0x41	; 65
    2302:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2306:	dc 01       	movw	r26, r24
    2308:	cb 01       	movw	r24, r22
    230a:	bc 01       	movw	r22, r24
    230c:	cd 01       	movw	r24, r26
    230e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2312:	dc 01       	movw	r26, r24
    2314:	cb 01       	movw	r24, r22
    2316:	9e 83       	std	Y+6, r25	; 0x06
    2318:	8d 83       	std	Y+5, r24	; 0x05
    231a:	0f c0       	rjmp	.+30     	; 0x233a <main+0x18e>
    231c:	88 ec       	ldi	r24, 0xC8	; 200
    231e:	90 e0       	ldi	r25, 0x00	; 0
    2320:	9c 83       	std	Y+4, r25	; 0x04
    2322:	8b 83       	std	Y+3, r24	; 0x03
    2324:	8b 81       	ldd	r24, Y+3	; 0x03
    2326:	9c 81       	ldd	r25, Y+4	; 0x04
    2328:	01 97       	sbiw	r24, 0x01	; 1
    232a:	f1 f7       	brne	.-4      	; 0x2328 <main+0x17c>
    232c:	9c 83       	std	Y+4, r25	; 0x04
    232e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2330:	8d 81       	ldd	r24, Y+5	; 0x05
    2332:	9e 81       	ldd	r25, Y+6	; 0x06
    2334:	01 97       	sbiw	r24, 0x01	; 1
    2336:	9e 83       	std	Y+6, r25	; 0x06
    2338:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    233a:	8d 81       	ldd	r24, Y+5	; 0x05
    233c:	9e 81       	ldd	r25, Y+6	; 0x06
    233e:	00 97       	sbiw	r24, 0x00	; 0
    2340:	69 f7       	brne	.-38     	; 0x231c <main+0x170>
    2342:	44 cf       	rjmp	.-376    	; 0x21cc <main+0x20>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2344:	6f 81       	ldd	r22, Y+7	; 0x07
    2346:	78 85       	ldd	r23, Y+8	; 0x08
    2348:	89 85       	ldd	r24, Y+9	; 0x09
    234a:	9a 85       	ldd	r25, Y+10	; 0x0a
    234c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2350:	dc 01       	movw	r26, r24
    2352:	cb 01       	movw	r24, r22
    2354:	9e 83       	std	Y+6, r25	; 0x06
    2356:	8d 83       	std	Y+5, r24	; 0x05
    2358:	8d 81       	ldd	r24, Y+5	; 0x05
    235a:	9e 81       	ldd	r25, Y+6	; 0x06
    235c:	9a 83       	std	Y+2, r25	; 0x02
    235e:	89 83       	std	Y+1, r24	; 0x01
    2360:	89 81       	ldd	r24, Y+1	; 0x01
    2362:	9a 81       	ldd	r25, Y+2	; 0x02
    2364:	01 97       	sbiw	r24, 0x01	; 1
    2366:	f1 f7       	brne	.-4      	; 0x2364 <main+0x1b8>
    2368:	9a 83       	std	Y+2, r25	; 0x02
    236a:	89 83       	std	Y+1, r24	; 0x01
    236c:	2f cf       	rjmp	.-418    	; 0x21cc <main+0x20>

0000236e <__mulsi3>:
    236e:	62 9f       	mul	r22, r18
    2370:	d0 01       	movw	r26, r0
    2372:	73 9f       	mul	r23, r19
    2374:	f0 01       	movw	r30, r0
    2376:	82 9f       	mul	r24, r18
    2378:	e0 0d       	add	r30, r0
    237a:	f1 1d       	adc	r31, r1
    237c:	64 9f       	mul	r22, r20
    237e:	e0 0d       	add	r30, r0
    2380:	f1 1d       	adc	r31, r1
    2382:	92 9f       	mul	r25, r18
    2384:	f0 0d       	add	r31, r0
    2386:	83 9f       	mul	r24, r19
    2388:	f0 0d       	add	r31, r0
    238a:	74 9f       	mul	r23, r20
    238c:	f0 0d       	add	r31, r0
    238e:	65 9f       	mul	r22, r21
    2390:	f0 0d       	add	r31, r0
    2392:	99 27       	eor	r25, r25
    2394:	72 9f       	mul	r23, r18
    2396:	b0 0d       	add	r27, r0
    2398:	e1 1d       	adc	r30, r1
    239a:	f9 1f       	adc	r31, r25
    239c:	63 9f       	mul	r22, r19
    239e:	b0 0d       	add	r27, r0
    23a0:	e1 1d       	adc	r30, r1
    23a2:	f9 1f       	adc	r31, r25
    23a4:	bd 01       	movw	r22, r26
    23a6:	cf 01       	movw	r24, r30
    23a8:	11 24       	eor	r1, r1
    23aa:	08 95       	ret

000023ac <__divmodsi4>:
    23ac:	97 fb       	bst	r25, 7
    23ae:	09 2e       	mov	r0, r25
    23b0:	05 26       	eor	r0, r21
    23b2:	0e d0       	rcall	.+28     	; 0x23d0 <__divmodsi4_neg1>
    23b4:	57 fd       	sbrc	r21, 7
    23b6:	04 d0       	rcall	.+8      	; 0x23c0 <__divmodsi4_neg2>
    23b8:	14 d0       	rcall	.+40     	; 0x23e2 <__udivmodsi4>
    23ba:	0a d0       	rcall	.+20     	; 0x23d0 <__divmodsi4_neg1>
    23bc:	00 1c       	adc	r0, r0
    23be:	38 f4       	brcc	.+14     	; 0x23ce <__divmodsi4_exit>

000023c0 <__divmodsi4_neg2>:
    23c0:	50 95       	com	r21
    23c2:	40 95       	com	r20
    23c4:	30 95       	com	r19
    23c6:	21 95       	neg	r18
    23c8:	3f 4f       	sbci	r19, 0xFF	; 255
    23ca:	4f 4f       	sbci	r20, 0xFF	; 255
    23cc:	5f 4f       	sbci	r21, 0xFF	; 255

000023ce <__divmodsi4_exit>:
    23ce:	08 95       	ret

000023d0 <__divmodsi4_neg1>:
    23d0:	f6 f7       	brtc	.-4      	; 0x23ce <__divmodsi4_exit>
    23d2:	90 95       	com	r25
    23d4:	80 95       	com	r24
    23d6:	70 95       	com	r23
    23d8:	61 95       	neg	r22
    23da:	7f 4f       	sbci	r23, 0xFF	; 255
    23dc:	8f 4f       	sbci	r24, 0xFF	; 255
    23de:	9f 4f       	sbci	r25, 0xFF	; 255
    23e0:	08 95       	ret

000023e2 <__udivmodsi4>:
    23e2:	a1 e2       	ldi	r26, 0x21	; 33
    23e4:	1a 2e       	mov	r1, r26
    23e6:	aa 1b       	sub	r26, r26
    23e8:	bb 1b       	sub	r27, r27
    23ea:	fd 01       	movw	r30, r26
    23ec:	0d c0       	rjmp	.+26     	; 0x2408 <__udivmodsi4_ep>

000023ee <__udivmodsi4_loop>:
    23ee:	aa 1f       	adc	r26, r26
    23f0:	bb 1f       	adc	r27, r27
    23f2:	ee 1f       	adc	r30, r30
    23f4:	ff 1f       	adc	r31, r31
    23f6:	a2 17       	cp	r26, r18
    23f8:	b3 07       	cpc	r27, r19
    23fa:	e4 07       	cpc	r30, r20
    23fc:	f5 07       	cpc	r31, r21
    23fe:	20 f0       	brcs	.+8      	; 0x2408 <__udivmodsi4_ep>
    2400:	a2 1b       	sub	r26, r18
    2402:	b3 0b       	sbc	r27, r19
    2404:	e4 0b       	sbc	r30, r20
    2406:	f5 0b       	sbc	r31, r21

00002408 <__udivmodsi4_ep>:
    2408:	66 1f       	adc	r22, r22
    240a:	77 1f       	adc	r23, r23
    240c:	88 1f       	adc	r24, r24
    240e:	99 1f       	adc	r25, r25
    2410:	1a 94       	dec	r1
    2412:	69 f7       	brne	.-38     	; 0x23ee <__udivmodsi4_loop>
    2414:	60 95       	com	r22
    2416:	70 95       	com	r23
    2418:	80 95       	com	r24
    241a:	90 95       	com	r25
    241c:	9b 01       	movw	r18, r22
    241e:	ac 01       	movw	r20, r24
    2420:	bd 01       	movw	r22, r26
    2422:	cf 01       	movw	r24, r30
    2424:	08 95       	ret

00002426 <__prologue_saves__>:
    2426:	2f 92       	push	r2
    2428:	3f 92       	push	r3
    242a:	4f 92       	push	r4
    242c:	5f 92       	push	r5
    242e:	6f 92       	push	r6
    2430:	7f 92       	push	r7
    2432:	8f 92       	push	r8
    2434:	9f 92       	push	r9
    2436:	af 92       	push	r10
    2438:	bf 92       	push	r11
    243a:	cf 92       	push	r12
    243c:	df 92       	push	r13
    243e:	ef 92       	push	r14
    2440:	ff 92       	push	r15
    2442:	0f 93       	push	r16
    2444:	1f 93       	push	r17
    2446:	cf 93       	push	r28
    2448:	df 93       	push	r29
    244a:	cd b7       	in	r28, 0x3d	; 61
    244c:	de b7       	in	r29, 0x3e	; 62
    244e:	ca 1b       	sub	r28, r26
    2450:	db 0b       	sbc	r29, r27
    2452:	0f b6       	in	r0, 0x3f	; 63
    2454:	f8 94       	cli
    2456:	de bf       	out	0x3e, r29	; 62
    2458:	0f be       	out	0x3f, r0	; 63
    245a:	cd bf       	out	0x3d, r28	; 61
    245c:	09 94       	ijmp

0000245e <__epilogue_restores__>:
    245e:	2a 88       	ldd	r2, Y+18	; 0x12
    2460:	39 88       	ldd	r3, Y+17	; 0x11
    2462:	48 88       	ldd	r4, Y+16	; 0x10
    2464:	5f 84       	ldd	r5, Y+15	; 0x0f
    2466:	6e 84       	ldd	r6, Y+14	; 0x0e
    2468:	7d 84       	ldd	r7, Y+13	; 0x0d
    246a:	8c 84       	ldd	r8, Y+12	; 0x0c
    246c:	9b 84       	ldd	r9, Y+11	; 0x0b
    246e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2470:	b9 84       	ldd	r11, Y+9	; 0x09
    2472:	c8 84       	ldd	r12, Y+8	; 0x08
    2474:	df 80       	ldd	r13, Y+7	; 0x07
    2476:	ee 80       	ldd	r14, Y+6	; 0x06
    2478:	fd 80       	ldd	r15, Y+5	; 0x05
    247a:	0c 81       	ldd	r16, Y+4	; 0x04
    247c:	1b 81       	ldd	r17, Y+3	; 0x03
    247e:	aa 81       	ldd	r26, Y+2	; 0x02
    2480:	b9 81       	ldd	r27, Y+1	; 0x01
    2482:	ce 0f       	add	r28, r30
    2484:	d1 1d       	adc	r29, r1
    2486:	0f b6       	in	r0, 0x3f	; 63
    2488:	f8 94       	cli
    248a:	de bf       	out	0x3e, r29	; 62
    248c:	0f be       	out	0x3f, r0	; 63
    248e:	cd bf       	out	0x3d, r28	; 61
    2490:	ed 01       	movw	r28, r26
    2492:	08 95       	ret

00002494 <_exit>:
    2494:	f8 94       	cli

00002496 <__stop_program>:
    2496:	ff cf       	rjmp	.-2      	; 0x2496 <__stop_program>
