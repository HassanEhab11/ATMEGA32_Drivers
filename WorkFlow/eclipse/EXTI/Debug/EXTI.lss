
EXTI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b6e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000006  00800060  00800060  00000be2  2**0
                  ALLOC
  2 .stab         00001080  00000000  00000000  00000be4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000665  00000000  00000000  00001c64  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 a8 04 	jmp	0x950	; 0x950 <__vector_1>
   8:	0c 94 db 04 	jmp	0x9b6	; 0x9b6 <__vector_2>
   c:	0c 94 0e 05 	jmp	0xa1c	; 0xa1c <__vector_3>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a6 36       	cpi	r26, 0x66	; 102
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 7e 05 	call	0xafc	; 0xafc <main>
  74:	0c 94 b5 05 	jmp	0xb6a	; 0xb6a <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DIO_u8SetPinValue>:
//
//	return Local_u8ErrorState;
//}

u8 DIO_u8SetPinValue(u8 Copy_u8port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
  84:	28 97       	sbiw	r28, 0x08	; 8
  86:	0f b6       	in	r0, 0x3f	; 63
  88:	f8 94       	cli
  8a:	de bf       	out	0x3e, r29	; 62
  8c:	0f be       	out	0x3f, r0	; 63
  8e:	cd bf       	out	0x3d, r28	; 61
  90:	8a 83       	std	Y+2, r24	; 0x02
  92:	6b 83       	std	Y+3, r22	; 0x03
  94:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
  96:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin<=DIO_u8PIN7)
  98:	8b 81       	ldd	r24, Y+3	; 0x03
  9a:	88 30       	cpi	r24, 0x08	; 8
  9c:	08 f0       	brcs	.+2      	; 0xa0 <DIO_u8SetPinValue+0x24>
  9e:	f4 c0       	rjmp	.+488    	; 0x288 <DIO_u8SetPinValue+0x20c>
	{
		if(Copy_u8Value == DIO_u8PIN_LOW)
  a0:	8c 81       	ldd	r24, Y+4	; 0x04
  a2:	88 23       	and	r24, r24
  a4:	09 f0       	breq	.+2      	; 0xa8 <DIO_u8SetPinValue+0x2c>
  a6:	77 c0       	rjmp	.+238    	; 0x196 <DIO_u8SetPinValue+0x11a>
		{

			switch(Copy_u8port)
  a8:	8a 81       	ldd	r24, Y+2	; 0x02
  aa:	28 2f       	mov	r18, r24
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	38 87       	std	Y+8, r19	; 0x08
  b0:	2f 83       	std	Y+7, r18	; 0x07
  b2:	8f 81       	ldd	r24, Y+7	; 0x07
  b4:	98 85       	ldd	r25, Y+8	; 0x08
  b6:	81 30       	cpi	r24, 0x01	; 1
  b8:	91 05       	cpc	r25, r1
  ba:	59 f1       	breq	.+86     	; 0x112 <DIO_u8SetPinValue+0x96>
  bc:	2f 81       	ldd	r18, Y+7	; 0x07
  be:	38 85       	ldd	r19, Y+8	; 0x08
  c0:	22 30       	cpi	r18, 0x02	; 2
  c2:	31 05       	cpc	r19, r1
  c4:	2c f4       	brge	.+10     	; 0xd0 <DIO_u8SetPinValue+0x54>
  c6:	8f 81       	ldd	r24, Y+7	; 0x07
  c8:	98 85       	ldd	r25, Y+8	; 0x08
  ca:	00 97       	sbiw	r24, 0x00	; 0
  cc:	69 f0       	breq	.+26     	; 0xe8 <DIO_u8SetPinValue+0x6c>
  ce:	60 c0       	rjmp	.+192    	; 0x190 <DIO_u8SetPinValue+0x114>
  d0:	2f 81       	ldd	r18, Y+7	; 0x07
  d2:	38 85       	ldd	r19, Y+8	; 0x08
  d4:	22 30       	cpi	r18, 0x02	; 2
  d6:	31 05       	cpc	r19, r1
  d8:	89 f1       	breq	.+98     	; 0x13c <DIO_u8SetPinValue+0xc0>
  da:	8f 81       	ldd	r24, Y+7	; 0x07
  dc:	98 85       	ldd	r25, Y+8	; 0x08
  de:	83 30       	cpi	r24, 0x03	; 3
  e0:	91 05       	cpc	r25, r1
  e2:	09 f4       	brne	.+2      	; 0xe6 <DIO_u8SetPinValue+0x6a>
  e4:	40 c0       	rjmp	.+128    	; 0x166 <DIO_u8SetPinValue+0xea>
  e6:	54 c0       	rjmp	.+168    	; 0x190 <DIO_u8SetPinValue+0x114>
			{
			case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
  e8:	ab e3       	ldi	r26, 0x3B	; 59
  ea:	b0 e0       	ldi	r27, 0x00	; 0
  ec:	eb e3       	ldi	r30, 0x3B	; 59
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	48 2f       	mov	r20, r24
  f4:	8b 81       	ldd	r24, Y+3	; 0x03
  f6:	28 2f       	mov	r18, r24
  f8:	30 e0       	ldi	r19, 0x00	; 0
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	02 2e       	mov	r0, r18
 100:	02 c0       	rjmp	.+4      	; 0x106 <DIO_u8SetPinValue+0x8a>
 102:	88 0f       	add	r24, r24
 104:	99 1f       	adc	r25, r25
 106:	0a 94       	dec	r0
 108:	e2 f7       	brpl	.-8      	; 0x102 <DIO_u8SetPinValue+0x86>
 10a:	80 95       	com	r24
 10c:	84 23       	and	r24, r20
 10e:	8c 93       	st	X, r24
 110:	bd c0       	rjmp	.+378    	; 0x28c <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
 112:	a8 e3       	ldi	r26, 0x38	; 56
 114:	b0 e0       	ldi	r27, 0x00	; 0
 116:	e8 e3       	ldi	r30, 0x38	; 56
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	80 81       	ld	r24, Z
 11c:	48 2f       	mov	r20, r24
 11e:	8b 81       	ldd	r24, Y+3	; 0x03
 120:	28 2f       	mov	r18, r24
 122:	30 e0       	ldi	r19, 0x00	; 0
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	02 2e       	mov	r0, r18
 12a:	02 c0       	rjmp	.+4      	; 0x130 <DIO_u8SetPinValue+0xb4>
 12c:	88 0f       	add	r24, r24
 12e:	99 1f       	adc	r25, r25
 130:	0a 94       	dec	r0
 132:	e2 f7       	brpl	.-8      	; 0x12c <DIO_u8SetPinValue+0xb0>
 134:	80 95       	com	r24
 136:	84 23       	and	r24, r20
 138:	8c 93       	st	X, r24
 13a:	a8 c0       	rjmp	.+336    	; 0x28c <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin); break;
 13c:	a5 e3       	ldi	r26, 0x35	; 53
 13e:	b0 e0       	ldi	r27, 0x00	; 0
 140:	e5 e3       	ldi	r30, 0x35	; 53
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	80 81       	ld	r24, Z
 146:	48 2f       	mov	r20, r24
 148:	8b 81       	ldd	r24, Y+3	; 0x03
 14a:	28 2f       	mov	r18, r24
 14c:	30 e0       	ldi	r19, 0x00	; 0
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	02 2e       	mov	r0, r18
 154:	02 c0       	rjmp	.+4      	; 0x15a <DIO_u8SetPinValue+0xde>
 156:	88 0f       	add	r24, r24
 158:	99 1f       	adc	r25, r25
 15a:	0a 94       	dec	r0
 15c:	e2 f7       	brpl	.-8      	; 0x156 <DIO_u8SetPinValue+0xda>
 15e:	80 95       	com	r24
 160:	84 23       	and	r24, r20
 162:	8c 93       	st	X, r24
 164:	93 c0       	rjmp	.+294    	; 0x28c <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin); break;
 166:	a2 e3       	ldi	r26, 0x32	; 50
 168:	b0 e0       	ldi	r27, 0x00	; 0
 16a:	e2 e3       	ldi	r30, 0x32	; 50
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	80 81       	ld	r24, Z
 170:	48 2f       	mov	r20, r24
 172:	8b 81       	ldd	r24, Y+3	; 0x03
 174:	28 2f       	mov	r18, r24
 176:	30 e0       	ldi	r19, 0x00	; 0
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	02 2e       	mov	r0, r18
 17e:	02 c0       	rjmp	.+4      	; 0x184 <DIO_u8SetPinValue+0x108>
 180:	88 0f       	add	r24, r24
 182:	99 1f       	adc	r25, r25
 184:	0a 94       	dec	r0
 186:	e2 f7       	brpl	.-8      	; 0x180 <DIO_u8SetPinValue+0x104>
 188:	80 95       	com	r24
 18a:	84 23       	and	r24, r20
 18c:	8c 93       	st	X, r24
 18e:	7e c0       	rjmp	.+252    	; 0x28c <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState =1; break;
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	89 83       	std	Y+1, r24	; 0x01
 194:	7b c0       	rjmp	.+246    	; 0x28c <DIO_u8SetPinValue+0x210>

			}
		}
		else if(Copy_u8Value == DIO_u8PIN_HIGH)
 196:	8c 81       	ldd	r24, Y+4	; 0x04
 198:	81 30       	cpi	r24, 0x01	; 1
 19a:	09 f0       	breq	.+2      	; 0x19e <DIO_u8SetPinValue+0x122>
 19c:	72 c0       	rjmp	.+228    	; 0x282 <DIO_u8SetPinValue+0x206>
		{

			switch(Copy_u8port)
 19e:	8a 81       	ldd	r24, Y+2	; 0x02
 1a0:	28 2f       	mov	r18, r24
 1a2:	30 e0       	ldi	r19, 0x00	; 0
 1a4:	3e 83       	std	Y+6, r19	; 0x06
 1a6:	2d 83       	std	Y+5, r18	; 0x05
 1a8:	8d 81       	ldd	r24, Y+5	; 0x05
 1aa:	9e 81       	ldd	r25, Y+6	; 0x06
 1ac:	81 30       	cpi	r24, 0x01	; 1
 1ae:	91 05       	cpc	r25, r1
 1b0:	49 f1       	breq	.+82     	; 0x204 <DIO_u8SetPinValue+0x188>
 1b2:	2d 81       	ldd	r18, Y+5	; 0x05
 1b4:	3e 81       	ldd	r19, Y+6	; 0x06
 1b6:	22 30       	cpi	r18, 0x02	; 2
 1b8:	31 05       	cpc	r19, r1
 1ba:	2c f4       	brge	.+10     	; 0x1c6 <DIO_u8SetPinValue+0x14a>
 1bc:	8d 81       	ldd	r24, Y+5	; 0x05
 1be:	9e 81       	ldd	r25, Y+6	; 0x06
 1c0:	00 97       	sbiw	r24, 0x00	; 0
 1c2:	61 f0       	breq	.+24     	; 0x1dc <DIO_u8SetPinValue+0x160>
 1c4:	5b c0       	rjmp	.+182    	; 0x27c <DIO_u8SetPinValue+0x200>
 1c6:	2d 81       	ldd	r18, Y+5	; 0x05
 1c8:	3e 81       	ldd	r19, Y+6	; 0x06
 1ca:	22 30       	cpi	r18, 0x02	; 2
 1cc:	31 05       	cpc	r19, r1
 1ce:	71 f1       	breq	.+92     	; 0x22c <DIO_u8SetPinValue+0x1b0>
 1d0:	8d 81       	ldd	r24, Y+5	; 0x05
 1d2:	9e 81       	ldd	r25, Y+6	; 0x06
 1d4:	83 30       	cpi	r24, 0x03	; 3
 1d6:	91 05       	cpc	r25, r1
 1d8:	e9 f1       	breq	.+122    	; 0x254 <DIO_u8SetPinValue+0x1d8>
 1da:	50 c0       	rjmp	.+160    	; 0x27c <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
 1dc:	ab e3       	ldi	r26, 0x3B	; 59
 1de:	b0 e0       	ldi	r27, 0x00	; 0
 1e0:	eb e3       	ldi	r30, 0x3B	; 59
 1e2:	f0 e0       	ldi	r31, 0x00	; 0
 1e4:	80 81       	ld	r24, Z
 1e6:	48 2f       	mov	r20, r24
 1e8:	8b 81       	ldd	r24, Y+3	; 0x03
 1ea:	28 2f       	mov	r18, r24
 1ec:	30 e0       	ldi	r19, 0x00	; 0
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	02 2e       	mov	r0, r18
 1f4:	02 c0       	rjmp	.+4      	; 0x1fa <DIO_u8SetPinValue+0x17e>
 1f6:	88 0f       	add	r24, r24
 1f8:	99 1f       	adc	r25, r25
 1fa:	0a 94       	dec	r0
 1fc:	e2 f7       	brpl	.-8      	; 0x1f6 <DIO_u8SetPinValue+0x17a>
 1fe:	84 2b       	or	r24, r20
 200:	8c 93       	st	X, r24
 202:	44 c0       	rjmp	.+136    	; 0x28c <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
 204:	a8 e3       	ldi	r26, 0x38	; 56
 206:	b0 e0       	ldi	r27, 0x00	; 0
 208:	e8 e3       	ldi	r30, 0x38	; 56
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	80 81       	ld	r24, Z
 20e:	48 2f       	mov	r20, r24
 210:	8b 81       	ldd	r24, Y+3	; 0x03
 212:	28 2f       	mov	r18, r24
 214:	30 e0       	ldi	r19, 0x00	; 0
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	02 2e       	mov	r0, r18
 21c:	02 c0       	rjmp	.+4      	; 0x222 <DIO_u8SetPinValue+0x1a6>
 21e:	88 0f       	add	r24, r24
 220:	99 1f       	adc	r25, r25
 222:	0a 94       	dec	r0
 224:	e2 f7       	brpl	.-8      	; 0x21e <DIO_u8SetPinValue+0x1a2>
 226:	84 2b       	or	r24, r20
 228:	8c 93       	st	X, r24
 22a:	30 c0       	rjmp	.+96     	; 0x28c <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin); break;
 22c:	a5 e3       	ldi	r26, 0x35	; 53
 22e:	b0 e0       	ldi	r27, 0x00	; 0
 230:	e5 e3       	ldi	r30, 0x35	; 53
 232:	f0 e0       	ldi	r31, 0x00	; 0
 234:	80 81       	ld	r24, Z
 236:	48 2f       	mov	r20, r24
 238:	8b 81       	ldd	r24, Y+3	; 0x03
 23a:	28 2f       	mov	r18, r24
 23c:	30 e0       	ldi	r19, 0x00	; 0
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	02 2e       	mov	r0, r18
 244:	02 c0       	rjmp	.+4      	; 0x24a <DIO_u8SetPinValue+0x1ce>
 246:	88 0f       	add	r24, r24
 248:	99 1f       	adc	r25, r25
 24a:	0a 94       	dec	r0
 24c:	e2 f7       	brpl	.-8      	; 0x246 <DIO_u8SetPinValue+0x1ca>
 24e:	84 2b       	or	r24, r20
 250:	8c 93       	st	X, r24
 252:	1c c0       	rjmp	.+56     	; 0x28c <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin); break;
 254:	a2 e3       	ldi	r26, 0x32	; 50
 256:	b0 e0       	ldi	r27, 0x00	; 0
 258:	e2 e3       	ldi	r30, 0x32	; 50
 25a:	f0 e0       	ldi	r31, 0x00	; 0
 25c:	80 81       	ld	r24, Z
 25e:	48 2f       	mov	r20, r24
 260:	8b 81       	ldd	r24, Y+3	; 0x03
 262:	28 2f       	mov	r18, r24
 264:	30 e0       	ldi	r19, 0x00	; 0
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	02 2e       	mov	r0, r18
 26c:	02 c0       	rjmp	.+4      	; 0x272 <DIO_u8SetPinValue+0x1f6>
 26e:	88 0f       	add	r24, r24
 270:	99 1f       	adc	r25, r25
 272:	0a 94       	dec	r0
 274:	e2 f7       	brpl	.-8      	; 0x26e <DIO_u8SetPinValue+0x1f2>
 276:	84 2b       	or	r24, r20
 278:	8c 93       	st	X, r24
 27a:	08 c0       	rjmp	.+16     	; 0x28c <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState =1; break;
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	89 83       	std	Y+1, r24	; 0x01
 280:	05 c0       	rjmp	.+10     	; 0x28c <DIO_u8SetPinValue+0x210>

			}
		}
		else
		{
			Local_u8ErrorState = 1;
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	89 83       	std	Y+1, r24	; 0x01
 286:	02 c0       	rjmp	.+4      	; 0x28c <DIO_u8SetPinValue+0x210>
		}

	}
	else
	{
		Local_u8ErrorState = 1;
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
 28c:	89 81       	ldd	r24, Y+1	; 0x01
}
 28e:	28 96       	adiw	r28, 0x08	; 8
 290:	0f b6       	in	r0, 0x3f	; 63
 292:	f8 94       	cli
 294:	de bf       	out	0x3e, r29	; 62
 296:	0f be       	out	0x3f, r0	; 63
 298:	cd bf       	out	0x3d, r28	; 61
 29a:	cf 91       	pop	r28
 29c:	df 91       	pop	r29
 29e:	08 95       	ret

000002a0 <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8port, u8 Copy_u8Value)
{
 2a0:	df 93       	push	r29
 2a2:	cf 93       	push	r28
 2a4:	00 d0       	rcall	.+0      	; 0x2a6 <DIO_u8SetPortValue+0x6>
 2a6:	00 d0       	rcall	.+0      	; 0x2a8 <DIO_u8SetPortValue+0x8>
 2a8:	0f 92       	push	r0
 2aa:	cd b7       	in	r28, 0x3d	; 61
 2ac:	de b7       	in	r29, 0x3e	; 62
 2ae:	8a 83       	std	Y+2, r24	; 0x02
 2b0:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
 2b2:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8port<=DIO_u8PORTD)
 2b4:	8a 81       	ldd	r24, Y+2	; 0x02
 2b6:	84 30       	cpi	r24, 0x04	; 4
 2b8:	b0 f5       	brcc	.+108    	; 0x326 <DIO_u8SetPortValue+0x86>
	{
		switch(Copy_u8port)
 2ba:	8a 81       	ldd	r24, Y+2	; 0x02
 2bc:	28 2f       	mov	r18, r24
 2be:	30 e0       	ldi	r19, 0x00	; 0
 2c0:	3d 83       	std	Y+5, r19	; 0x05
 2c2:	2c 83       	std	Y+4, r18	; 0x04
 2c4:	8c 81       	ldd	r24, Y+4	; 0x04
 2c6:	9d 81       	ldd	r25, Y+5	; 0x05
 2c8:	81 30       	cpi	r24, 0x01	; 1
 2ca:	91 05       	cpc	r25, r1
 2cc:	d1 f0       	breq	.+52     	; 0x302 <DIO_u8SetPortValue+0x62>
 2ce:	2c 81       	ldd	r18, Y+4	; 0x04
 2d0:	3d 81       	ldd	r19, Y+5	; 0x05
 2d2:	22 30       	cpi	r18, 0x02	; 2
 2d4:	31 05       	cpc	r19, r1
 2d6:	2c f4       	brge	.+10     	; 0x2e2 <DIO_u8SetPortValue+0x42>
 2d8:	8c 81       	ldd	r24, Y+4	; 0x04
 2da:	9d 81       	ldd	r25, Y+5	; 0x05
 2dc:	00 97       	sbiw	r24, 0x00	; 0
 2de:	61 f0       	breq	.+24     	; 0x2f8 <DIO_u8SetPortValue+0x58>
 2e0:	1f c0       	rjmp	.+62     	; 0x320 <DIO_u8SetPortValue+0x80>
 2e2:	2c 81       	ldd	r18, Y+4	; 0x04
 2e4:	3d 81       	ldd	r19, Y+5	; 0x05
 2e6:	22 30       	cpi	r18, 0x02	; 2
 2e8:	31 05       	cpc	r19, r1
 2ea:	81 f0       	breq	.+32     	; 0x30c <DIO_u8SetPortValue+0x6c>
 2ec:	8c 81       	ldd	r24, Y+4	; 0x04
 2ee:	9d 81       	ldd	r25, Y+5	; 0x05
 2f0:	83 30       	cpi	r24, 0x03	; 3
 2f2:	91 05       	cpc	r25, r1
 2f4:	81 f0       	breq	.+32     	; 0x316 <DIO_u8SetPortValue+0x76>
 2f6:	14 c0       	rjmp	.+40     	; 0x320 <DIO_u8SetPortValue+0x80>
		{
		case DIO_u8PORTA: PORTA = Copy_u8Value; break;
 2f8:	eb e3       	ldi	r30, 0x3B	; 59
 2fa:	f0 e0       	ldi	r31, 0x00	; 0
 2fc:	8b 81       	ldd	r24, Y+3	; 0x03
 2fe:	80 83       	st	Z, r24
 300:	14 c0       	rjmp	.+40     	; 0x32a <DIO_u8SetPortValue+0x8a>
		case DIO_u8PORTB: PORTB = Copy_u8Value; break;
 302:	e8 e3       	ldi	r30, 0x38	; 56
 304:	f0 e0       	ldi	r31, 0x00	; 0
 306:	8b 81       	ldd	r24, Y+3	; 0x03
 308:	80 83       	st	Z, r24
 30a:	0f c0       	rjmp	.+30     	; 0x32a <DIO_u8SetPortValue+0x8a>
		case DIO_u8PORTC: PORTC = Copy_u8Value; break;
 30c:	e5 e3       	ldi	r30, 0x35	; 53
 30e:	f0 e0       	ldi	r31, 0x00	; 0
 310:	8b 81       	ldd	r24, Y+3	; 0x03
 312:	80 83       	st	Z, r24
 314:	0a c0       	rjmp	.+20     	; 0x32a <DIO_u8SetPortValue+0x8a>
		case DIO_u8PORTD: PORTD = Copy_u8Value; break;
 316:	e2 e3       	ldi	r30, 0x32	; 50
 318:	f0 e0       	ldi	r31, 0x00	; 0
 31a:	8b 81       	ldd	r24, Y+3	; 0x03
 31c:	80 83       	st	Z, r24
 31e:	05 c0       	rjmp	.+10     	; 0x32a <DIO_u8SetPortValue+0x8a>
		default: Local_u8ErrorState =1; break;
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	89 83       	std	Y+1, r24	; 0x01
 324:	02 c0       	rjmp	.+4      	; 0x32a <DIO_u8SetPortValue+0x8a>

		}
	}
	else
	{
		Local_u8ErrorState = 1;
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_u8ErrorState;
 32a:	89 81       	ldd	r24, Y+1	; 0x01
}
 32c:	0f 90       	pop	r0
 32e:	0f 90       	pop	r0
 330:	0f 90       	pop	r0
 332:	0f 90       	pop	r0
 334:	0f 90       	pop	r0
 336:	cf 91       	pop	r28
 338:	df 91       	pop	r29
 33a:	08 95       	ret

0000033c <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8port, u8 Copy_u8Pin, u8* Copy_Pu8Value)
{
 33c:	df 93       	push	r29
 33e:	cf 93       	push	r28
 340:	cd b7       	in	r28, 0x3d	; 61
 342:	de b7       	in	r29, 0x3e	; 62
 344:	27 97       	sbiw	r28, 0x07	; 7
 346:	0f b6       	in	r0, 0x3f	; 63
 348:	f8 94       	cli
 34a:	de bf       	out	0x3e, r29	; 62
 34c:	0f be       	out	0x3f, r0	; 63
 34e:	cd bf       	out	0x3d, r28	; 61
 350:	8a 83       	std	Y+2, r24	; 0x02
 352:	6b 83       	std	Y+3, r22	; 0x03
 354:	5d 83       	std	Y+5, r21	; 0x05
 356:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
 358:	19 82       	std	Y+1, r1	; 0x01

	if((Copy_Pu8Value != NULL )&&(Copy_u8Pin<=DIO_u8PIN7))
 35a:	8c 81       	ldd	r24, Y+4	; 0x04
 35c:	9d 81       	ldd	r25, Y+5	; 0x05
 35e:	00 97       	sbiw	r24, 0x00	; 0
 360:	09 f4       	brne	.+2      	; 0x364 <DIO_u8GetPinValue+0x28>
 362:	78 c0       	rjmp	.+240    	; 0x454 <DIO_u8GetPinValue+0x118>
 364:	8b 81       	ldd	r24, Y+3	; 0x03
 366:	88 30       	cpi	r24, 0x08	; 8
 368:	08 f0       	brcs	.+2      	; 0x36c <DIO_u8GetPinValue+0x30>
 36a:	74 c0       	rjmp	.+232    	; 0x454 <DIO_u8GetPinValue+0x118>
	{


			switch(Copy_u8port)
 36c:	8a 81       	ldd	r24, Y+2	; 0x02
 36e:	28 2f       	mov	r18, r24
 370:	30 e0       	ldi	r19, 0x00	; 0
 372:	3f 83       	std	Y+7, r19	; 0x07
 374:	2e 83       	std	Y+6, r18	; 0x06
 376:	4e 81       	ldd	r20, Y+6	; 0x06
 378:	5f 81       	ldd	r21, Y+7	; 0x07
 37a:	41 30       	cpi	r20, 0x01	; 1
 37c:	51 05       	cpc	r21, r1
 37e:	59 f1       	breq	.+86     	; 0x3d6 <DIO_u8GetPinValue+0x9a>
 380:	8e 81       	ldd	r24, Y+6	; 0x06
 382:	9f 81       	ldd	r25, Y+7	; 0x07
 384:	82 30       	cpi	r24, 0x02	; 2
 386:	91 05       	cpc	r25, r1
 388:	34 f4       	brge	.+12     	; 0x396 <DIO_u8GetPinValue+0x5a>
 38a:	2e 81       	ldd	r18, Y+6	; 0x06
 38c:	3f 81       	ldd	r19, Y+7	; 0x07
 38e:	21 15       	cp	r18, r1
 390:	31 05       	cpc	r19, r1
 392:	69 f0       	breq	.+26     	; 0x3ae <DIO_u8GetPinValue+0x72>
 394:	5c c0       	rjmp	.+184    	; 0x44e <DIO_u8GetPinValue+0x112>
 396:	4e 81       	ldd	r20, Y+6	; 0x06
 398:	5f 81       	ldd	r21, Y+7	; 0x07
 39a:	42 30       	cpi	r20, 0x02	; 2
 39c:	51 05       	cpc	r21, r1
 39e:	79 f1       	breq	.+94     	; 0x3fe <DIO_u8GetPinValue+0xc2>
 3a0:	8e 81       	ldd	r24, Y+6	; 0x06
 3a2:	9f 81       	ldd	r25, Y+7	; 0x07
 3a4:	83 30       	cpi	r24, 0x03	; 3
 3a6:	91 05       	cpc	r25, r1
 3a8:	09 f4       	brne	.+2      	; 0x3ac <DIO_u8GetPinValue+0x70>
 3aa:	3d c0       	rjmp	.+122    	; 0x426 <DIO_u8GetPinValue+0xea>
 3ac:	50 c0       	rjmp	.+160    	; 0x44e <DIO_u8GetPinValue+0x112>
			{
			case DIO_u8PORTA: * Copy_Pu8Value = GET_BIT(PINA,Copy_u8Pin); break;
 3ae:	e9 e3       	ldi	r30, 0x39	; 57
 3b0:	f0 e0       	ldi	r31, 0x00	; 0
 3b2:	80 81       	ld	r24, Z
 3b4:	28 2f       	mov	r18, r24
 3b6:	30 e0       	ldi	r19, 0x00	; 0
 3b8:	8b 81       	ldd	r24, Y+3	; 0x03
 3ba:	88 2f       	mov	r24, r24
 3bc:	90 e0       	ldi	r25, 0x00	; 0
 3be:	a9 01       	movw	r20, r18
 3c0:	02 c0       	rjmp	.+4      	; 0x3c6 <DIO_u8GetPinValue+0x8a>
 3c2:	55 95       	asr	r21
 3c4:	47 95       	ror	r20
 3c6:	8a 95       	dec	r24
 3c8:	e2 f7       	brpl	.-8      	; 0x3c2 <DIO_u8GetPinValue+0x86>
 3ca:	ca 01       	movw	r24, r20
 3cc:	81 70       	andi	r24, 0x01	; 1
 3ce:	ec 81       	ldd	r30, Y+4	; 0x04
 3d0:	fd 81       	ldd	r31, Y+5	; 0x05
 3d2:	80 83       	st	Z, r24
 3d4:	41 c0       	rjmp	.+130    	; 0x458 <DIO_u8GetPinValue+0x11c>
			case DIO_u8PORTB: * Copy_Pu8Value = GET_BIT(PINB,Copy_u8Pin); break;
 3d6:	e6 e3       	ldi	r30, 0x36	; 54
 3d8:	f0 e0       	ldi	r31, 0x00	; 0
 3da:	80 81       	ld	r24, Z
 3dc:	28 2f       	mov	r18, r24
 3de:	30 e0       	ldi	r19, 0x00	; 0
 3e0:	8b 81       	ldd	r24, Y+3	; 0x03
 3e2:	88 2f       	mov	r24, r24
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	a9 01       	movw	r20, r18
 3e8:	02 c0       	rjmp	.+4      	; 0x3ee <DIO_u8GetPinValue+0xb2>
 3ea:	55 95       	asr	r21
 3ec:	47 95       	ror	r20
 3ee:	8a 95       	dec	r24
 3f0:	e2 f7       	brpl	.-8      	; 0x3ea <DIO_u8GetPinValue+0xae>
 3f2:	ca 01       	movw	r24, r20
 3f4:	81 70       	andi	r24, 0x01	; 1
 3f6:	ec 81       	ldd	r30, Y+4	; 0x04
 3f8:	fd 81       	ldd	r31, Y+5	; 0x05
 3fa:	80 83       	st	Z, r24
 3fc:	2d c0       	rjmp	.+90     	; 0x458 <DIO_u8GetPinValue+0x11c>
			case DIO_u8PORTC: * Copy_Pu8Value = GET_BIT(PINC,Copy_u8Pin); break;
 3fe:	e3 e3       	ldi	r30, 0x33	; 51
 400:	f0 e0       	ldi	r31, 0x00	; 0
 402:	80 81       	ld	r24, Z
 404:	28 2f       	mov	r18, r24
 406:	30 e0       	ldi	r19, 0x00	; 0
 408:	8b 81       	ldd	r24, Y+3	; 0x03
 40a:	88 2f       	mov	r24, r24
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	a9 01       	movw	r20, r18
 410:	02 c0       	rjmp	.+4      	; 0x416 <DIO_u8GetPinValue+0xda>
 412:	55 95       	asr	r21
 414:	47 95       	ror	r20
 416:	8a 95       	dec	r24
 418:	e2 f7       	brpl	.-8      	; 0x412 <DIO_u8GetPinValue+0xd6>
 41a:	ca 01       	movw	r24, r20
 41c:	81 70       	andi	r24, 0x01	; 1
 41e:	ec 81       	ldd	r30, Y+4	; 0x04
 420:	fd 81       	ldd	r31, Y+5	; 0x05
 422:	80 83       	st	Z, r24
 424:	19 c0       	rjmp	.+50     	; 0x458 <DIO_u8GetPinValue+0x11c>
			case DIO_u8PORTD: * Copy_Pu8Value = GET_BIT(PIND,Copy_u8Pin); break;
 426:	e0 e3       	ldi	r30, 0x30	; 48
 428:	f0 e0       	ldi	r31, 0x00	; 0
 42a:	80 81       	ld	r24, Z
 42c:	28 2f       	mov	r18, r24
 42e:	30 e0       	ldi	r19, 0x00	; 0
 430:	8b 81       	ldd	r24, Y+3	; 0x03
 432:	88 2f       	mov	r24, r24
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	a9 01       	movw	r20, r18
 438:	02 c0       	rjmp	.+4      	; 0x43e <DIO_u8GetPinValue+0x102>
 43a:	55 95       	asr	r21
 43c:	47 95       	ror	r20
 43e:	8a 95       	dec	r24
 440:	e2 f7       	brpl	.-8      	; 0x43a <DIO_u8GetPinValue+0xfe>
 442:	ca 01       	movw	r24, r20
 444:	81 70       	andi	r24, 0x01	; 1
 446:	ec 81       	ldd	r30, Y+4	; 0x04
 448:	fd 81       	ldd	r31, Y+5	; 0x05
 44a:	80 83       	st	Z, r24
 44c:	05 c0       	rjmp	.+10     	; 0x458 <DIO_u8GetPinValue+0x11c>
			default: Local_u8ErrorState =1; break;
 44e:	81 e0       	ldi	r24, 0x01	; 1
 450:	89 83       	std	Y+1, r24	; 0x01
 452:	02 c0       	rjmp	.+4      	; 0x458 <DIO_u8GetPinValue+0x11c>

			}
	}
	else
	{
		Local_u8ErrorState = 1;
 454:	81 e0       	ldi	r24, 0x01	; 1
 456:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
 458:	89 81       	ldd	r24, Y+1	; 0x01
}
 45a:	27 96       	adiw	r28, 0x07	; 7
 45c:	0f b6       	in	r0, 0x3f	; 63
 45e:	f8 94       	cli
 460:	de bf       	out	0x3e, r29	; 62
 462:	0f be       	out	0x3f, r0	; 63
 464:	cd bf       	out	0x3d, r28	; 61
 466:	cf 91       	pop	r28
 468:	df 91       	pop	r29
 46a:	08 95       	ret

0000046c <DIO_u8AndWithPort>:

u8 DIO_u8AndWithPort(u8 Copy_u8port, u8 Copy_u8Value)
{
 46c:	df 93       	push	r29
 46e:	cf 93       	push	r28
 470:	00 d0       	rcall	.+0      	; 0x472 <DIO_u8AndWithPort+0x6>
 472:	00 d0       	rcall	.+0      	; 0x474 <DIO_u8AndWithPort+0x8>
 474:	0f 92       	push	r0
 476:	cd b7       	in	r28, 0x3d	; 61
 478:	de b7       	in	r29, 0x3e	; 62
 47a:	8a 83       	std	Y+2, r24	; 0x02
 47c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Result = 0;
 47e:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8port)
 480:	8a 81       	ldd	r24, Y+2	; 0x02
 482:	28 2f       	mov	r18, r24
 484:	30 e0       	ldi	r19, 0x00	; 0
 486:	3d 83       	std	Y+5, r19	; 0x05
 488:	2c 83       	std	Y+4, r18	; 0x04
 48a:	8c 81       	ldd	r24, Y+4	; 0x04
 48c:	9d 81       	ldd	r25, Y+5	; 0x05
 48e:	81 30       	cpi	r24, 0x01	; 1
 490:	91 05       	cpc	r25, r1
 492:	e1 f0       	breq	.+56     	; 0x4cc <DIO_u8AndWithPort+0x60>
 494:	2c 81       	ldd	r18, Y+4	; 0x04
 496:	3d 81       	ldd	r19, Y+5	; 0x05
 498:	22 30       	cpi	r18, 0x02	; 2
 49a:	31 05       	cpc	r19, r1
 49c:	2c f4       	brge	.+10     	; 0x4a8 <DIO_u8AndWithPort+0x3c>
 49e:	8c 81       	ldd	r24, Y+4	; 0x04
 4a0:	9d 81       	ldd	r25, Y+5	; 0x05
 4a2:	00 97       	sbiw	r24, 0x00	; 0
 4a4:	61 f0       	breq	.+24     	; 0x4be <DIO_u8AndWithPort+0x52>
 4a6:	26 c0       	rjmp	.+76     	; 0x4f4 <DIO_u8AndWithPort+0x88>
 4a8:	2c 81       	ldd	r18, Y+4	; 0x04
 4aa:	3d 81       	ldd	r19, Y+5	; 0x05
 4ac:	22 30       	cpi	r18, 0x02	; 2
 4ae:	31 05       	cpc	r19, r1
 4b0:	a1 f0       	breq	.+40     	; 0x4da <DIO_u8AndWithPort+0x6e>
 4b2:	8c 81       	ldd	r24, Y+4	; 0x04
 4b4:	9d 81       	ldd	r25, Y+5	; 0x05
 4b6:	83 30       	cpi	r24, 0x03	; 3
 4b8:	91 05       	cpc	r25, r1
 4ba:	b1 f0       	breq	.+44     	; 0x4e8 <DIO_u8AndWithPort+0x7c>
 4bc:	1b c0       	rjmp	.+54     	; 0x4f4 <DIO_u8AndWithPort+0x88>
			{
			case DIO_u8PORTA: Local_u8Result= PORTA & Copy_u8Value; break;
 4be:	eb e3       	ldi	r30, 0x3B	; 59
 4c0:	f0 e0       	ldi	r31, 0x00	; 0
 4c2:	90 81       	ld	r25, Z
 4c4:	8b 81       	ldd	r24, Y+3	; 0x03
 4c6:	89 23       	and	r24, r25
 4c8:	89 83       	std	Y+1, r24	; 0x01
 4ca:	14 c0       	rjmp	.+40     	; 0x4f4 <DIO_u8AndWithPort+0x88>
			case DIO_u8PORTB: Local_u8Result= PORTB & Copy_u8Value; break;
 4cc:	e8 e3       	ldi	r30, 0x38	; 56
 4ce:	f0 e0       	ldi	r31, 0x00	; 0
 4d0:	90 81       	ld	r25, Z
 4d2:	8b 81       	ldd	r24, Y+3	; 0x03
 4d4:	89 23       	and	r24, r25
 4d6:	89 83       	std	Y+1, r24	; 0x01
 4d8:	0d c0       	rjmp	.+26     	; 0x4f4 <DIO_u8AndWithPort+0x88>
			case DIO_u8PORTC: Local_u8Result= PORTC & Copy_u8Value; break;
 4da:	e5 e3       	ldi	r30, 0x35	; 53
 4dc:	f0 e0       	ldi	r31, 0x00	; 0
 4de:	90 81       	ld	r25, Z
 4e0:	8b 81       	ldd	r24, Y+3	; 0x03
 4e2:	89 23       	and	r24, r25
 4e4:	89 83       	std	Y+1, r24	; 0x01
 4e6:	06 c0       	rjmp	.+12     	; 0x4f4 <DIO_u8AndWithPort+0x88>
			case DIO_u8PORTD: Local_u8Result = PORTD & Copy_u8Value; break;
 4e8:	e2 e3       	ldi	r30, 0x32	; 50
 4ea:	f0 e0       	ldi	r31, 0x00	; 0
 4ec:	90 81       	ld	r25, Z
 4ee:	8b 81       	ldd	r24, Y+3	; 0x03
 4f0:	89 23       	and	r24, r25
 4f2:	89 83       	std	Y+1, r24	; 0x01
			default:  break;


			}
	return Local_u8Result;
 4f4:	89 81       	ldd	r24, Y+1	; 0x01
}
 4f6:	0f 90       	pop	r0
 4f8:	0f 90       	pop	r0
 4fa:	0f 90       	pop	r0
 4fc:	0f 90       	pop	r0
 4fe:	0f 90       	pop	r0
 500:	cf 91       	pop	r28
 502:	df 91       	pop	r29
 504:	08 95       	ret

00000506 <EXTI_VoidInt0Init>:
/****************************************************************************************************/

/*****************************************     INT0Init    ******************************************/

void EXTI_VoidInt0Init(void)
{
 506:	df 93       	push	r29
 508:	cf 93       	push	r28
 50a:	cd b7       	in	r28, 0x3d	; 61
 50c:	de b7       	in	r29, 0x3e	; 62

	}
#elif INT0_SENSE == FALLING_EDGE
	{
		/* Set Sense Control for INT0 for falling edge*/
		SET_BIT(MCUCR,MCUCR_ISC01);
 50e:	a5 e5       	ldi	r26, 0x55	; 85
 510:	b0 e0       	ldi	r27, 0x00	; 0
 512:	e5 e5       	ldi	r30, 0x55	; 85
 514:	f0 e0       	ldi	r31, 0x00	; 0
 516:	80 81       	ld	r24, Z
 518:	82 60       	ori	r24, 0x02	; 2
 51a:	8c 93       	st	X, r24
		CLR_BIT(MCUCR,MCUCR_ISC00);
 51c:	a5 e5       	ldi	r26, 0x55	; 85
 51e:	b0 e0       	ldi	r27, 0x00	; 0
 520:	e5 e5       	ldi	r30, 0x55	; 85
 522:	f0 e0       	ldi	r31, 0x00	; 0
 524:	80 81       	ld	r24, Z
 526:	8e 7f       	andi	r24, 0xFE	; 254
 528:	8c 93       	st	X, r24

	/*Check Peripheral interrupt enable for INT0_INTIAL_STATE */

#if  INT0_INTIAL_STATE == ENABLED
	{
		SET_BIT(GICR,GICR_INT0);
 52a:	ab e5       	ldi	r26, 0x5B	; 91
 52c:	b0 e0       	ldi	r27, 0x00	; 0
 52e:	eb e5       	ldi	r30, 0x5B	; 91
 530:	f0 e0       	ldi	r31, 0x00	; 0
 532:	80 81       	ld	r24, Z
 534:	80 64       	ori	r24, 0x40	; 64
 536:	8c 93       	st	X, r24
#else
	{
#error "Wrong INT0_INTIAL_STATE Configuration option"
	}
#endif
}
 538:	cf 91       	pop	r28
 53a:	df 91       	pop	r29
 53c:	08 95       	ret

0000053e <EXTI_VoidInt1Init>:

/*****************************************     INT1Init    ******************************************/

void EXTI_VoidInt1Init(void)
{
 53e:	df 93       	push	r29
 540:	cf 93       	push	r28
 542:	cd b7       	in	r28, 0x3d	; 61
 544:	de b7       	in	r29, 0x3e	; 62

	}
#elif INT1_SENSE == FALLING_EDGE
	{
		/* Set Sense Control for INT1 for falling edge*/
		SET_BIT(MCUCR,MCUCR_ISC11);
 546:	a5 e5       	ldi	r26, 0x55	; 85
 548:	b0 e0       	ldi	r27, 0x00	; 0
 54a:	e5 e5       	ldi	r30, 0x55	; 85
 54c:	f0 e0       	ldi	r31, 0x00	; 0
 54e:	80 81       	ld	r24, Z
 550:	88 60       	ori	r24, 0x08	; 8
 552:	8c 93       	st	X, r24
		CLR_BIT(MCUCR,MCUCR_ISC10);
 554:	a5 e5       	ldi	r26, 0x55	; 85
 556:	b0 e0       	ldi	r27, 0x00	; 0
 558:	e5 e5       	ldi	r30, 0x55	; 85
 55a:	f0 e0       	ldi	r31, 0x00	; 0
 55c:	80 81       	ld	r24, Z
 55e:	8b 7f       	andi	r24, 0xFB	; 251
 560:	8c 93       	st	X, r24

	/*Check Peripheral interrupt enable for INT1_INTIAL_STATE */

#if  INT1_INTIAL_STATE == ENABLED
	{
		SET_BIT(GICR,GICR_INT1);
 562:	ab e5       	ldi	r26, 0x5B	; 91
 564:	b0 e0       	ldi	r27, 0x00	; 0
 566:	eb e5       	ldi	r30, 0x5B	; 91
 568:	f0 e0       	ldi	r31, 0x00	; 0
 56a:	80 81       	ld	r24, Z
 56c:	80 68       	ori	r24, 0x80	; 128
 56e:	8c 93       	st	X, r24
#else
	{
#error "Wrong INT1_INTIAL_STATE Configuration option"
	}
#endif
}
 570:	cf 91       	pop	r28
 572:	df 91       	pop	r29
 574:	08 95       	ret

00000576 <EXTI_VoidInt2Init>:

/*****************************************     INT2Init    ******************************************/

void EXTI_VoidInt2Init(void)
{
 576:	df 93       	push	r29
 578:	cf 93       	push	r28
 57a:	cd b7       	in	r28, 0x3d	; 61
 57c:	de b7       	in	r29, 0x3e	; 62

	}
#elif INT2_SENSE == RISING_EDGE
	{
		/* Set Sense Control for INT2 for RISING_EDGE*/
		SET_BIT(MCUCSR,MCUCSR_ISC2);
 57e:	a4 e5       	ldi	r26, 0x54	; 84
 580:	b0 e0       	ldi	r27, 0x00	; 0
 582:	e4 e5       	ldi	r30, 0x54	; 84
 584:	f0 e0       	ldi	r31, 0x00	; 0
 586:	80 81       	ld	r24, Z
 588:	80 64       	ori	r24, 0x40	; 64
 58a:	8c 93       	st	X, r24

	/*Check Peripheral interrupt enable for INT2_INTIAL_STATE */

#if  INT2_INTIAL_STATE == ENABLED
	{
		SET_BIT(GICR,GICR_INT2);
 58c:	ab e5       	ldi	r26, 0x5B	; 91
 58e:	b0 e0       	ldi	r27, 0x00	; 0
 590:	eb e5       	ldi	r30, 0x5B	; 91
 592:	f0 e0       	ldi	r31, 0x00	; 0
 594:	80 81       	ld	r24, Z
 596:	80 62       	ori	r24, 0x20	; 32
 598:	8c 93       	st	X, r24
#else
	{
#error "Wrong INT2_INTIAL_STATE Configuration option"
	}
#endif
}
 59a:	cf 91       	pop	r28
 59c:	df 91       	pop	r29
 59e:	08 95       	ret

000005a0 <EXTI_u8IntSetSenseControl>:
/****************************************************************************************************/
/********************************     Init Function By Post Build Method   **************************/
/****************************************************************************************************/

u8 EXTI_u8IntSetSenseControl(u8 Copy_u8Int,u8 Copy_u8Sense)
{
 5a0:	df 93       	push	r29
 5a2:	cf 93       	push	r28
 5a4:	cd b7       	in	r28, 0x3d	; 61
 5a6:	de b7       	in	r29, 0x3e	; 62
 5a8:	29 97       	sbiw	r28, 0x09	; 9
 5aa:	0f b6       	in	r0, 0x3f	; 63
 5ac:	f8 94       	cli
 5ae:	de bf       	out	0x3e, r29	; 62
 5b0:	0f be       	out	0x3f, r0	; 63
 5b2:	cd bf       	out	0x3d, r28	; 61
 5b4:	8a 83       	std	Y+2, r24	; 0x02
 5b6:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = OK;
 5b8:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Int == INT0)
 5ba:	8a 81       	ldd	r24, Y+2	; 0x02
 5bc:	81 30       	cpi	r24, 0x01	; 1
 5be:	09 f0       	breq	.+2      	; 0x5c2 <EXTI_u8IntSetSenseControl+0x22>
 5c0:	5f c0       	rjmp	.+190    	; 0x680 <EXTI_u8IntSetSenseControl+0xe0>
	{
		switch(Copy_u8Sense)
 5c2:	8b 81       	ldd	r24, Y+3	; 0x03
 5c4:	28 2f       	mov	r18, r24
 5c6:	30 e0       	ldi	r19, 0x00	; 0
 5c8:	39 87       	std	Y+9, r19	; 0x09
 5ca:	28 87       	std	Y+8, r18	; 0x08
 5cc:	88 85       	ldd	r24, Y+8	; 0x08
 5ce:	99 85       	ldd	r25, Y+9	; 0x09
 5d0:	82 30       	cpi	r24, 0x02	; 2
 5d2:	91 05       	cpc	r25, r1
 5d4:	29 f1       	breq	.+74     	; 0x620 <EXTI_u8IntSetSenseControl+0x80>
 5d6:	28 85       	ldd	r18, Y+8	; 0x08
 5d8:	39 85       	ldd	r19, Y+9	; 0x09
 5da:	23 30       	cpi	r18, 0x03	; 3
 5dc:	31 05       	cpc	r19, r1
 5de:	34 f4       	brge	.+12     	; 0x5ec <EXTI_u8IntSetSenseControl+0x4c>
 5e0:	88 85       	ldd	r24, Y+8	; 0x08
 5e2:	99 85       	ldd	r25, Y+9	; 0x09
 5e4:	81 30       	cpi	r24, 0x01	; 1
 5e6:	91 05       	cpc	r25, r1
 5e8:	61 f0       	breq	.+24     	; 0x602 <EXTI_u8IntSetSenseControl+0x62>
 5ea:	47 c0       	rjmp	.+142    	; 0x67a <EXTI_u8IntSetSenseControl+0xda>
 5ec:	28 85       	ldd	r18, Y+8	; 0x08
 5ee:	39 85       	ldd	r19, Y+9	; 0x09
 5f0:	23 30       	cpi	r18, 0x03	; 3
 5f2:	31 05       	cpc	r19, r1
 5f4:	21 f1       	breq	.+72     	; 0x63e <EXTI_u8IntSetSenseControl+0x9e>
 5f6:	88 85       	ldd	r24, Y+8	; 0x08
 5f8:	99 85       	ldd	r25, Y+9	; 0x09
 5fa:	84 30       	cpi	r24, 0x04	; 4
 5fc:	91 05       	cpc	r25, r1
 5fe:	71 f1       	breq	.+92     	; 0x65c <EXTI_u8IntSetSenseControl+0xbc>
 600:	3c c0       	rjmp	.+120    	; 0x67a <EXTI_u8IntSetSenseControl+0xda>
		{
		case LOW_LEVEL:    CLR_BIT(MCUCR,MCUCR_ISC00);    CLR_BIT(MCUCR,MCUCR_ISC01);    break;
 602:	a5 e5       	ldi	r26, 0x55	; 85
 604:	b0 e0       	ldi	r27, 0x00	; 0
 606:	e5 e5       	ldi	r30, 0x55	; 85
 608:	f0 e0       	ldi	r31, 0x00	; 0
 60a:	80 81       	ld	r24, Z
 60c:	8e 7f       	andi	r24, 0xFE	; 254
 60e:	8c 93       	st	X, r24
 610:	a5 e5       	ldi	r26, 0x55	; 85
 612:	b0 e0       	ldi	r27, 0x00	; 0
 614:	e5 e5       	ldi	r30, 0x55	; 85
 616:	f0 e0       	ldi	r31, 0x00	; 0
 618:	80 81       	ld	r24, Z
 61a:	8d 7f       	andi	r24, 0xFD	; 253
 61c:	8c 93       	st	X, r24
 61e:	bb c0       	rjmp	.+374    	; 0x796 <EXTI_u8IntSetSenseControl+0x1f6>
		case ON_CHANGE:    SET_BIT(MCUCR,MCUCR_ISC00);    CLR_BIT(MCUCR,MCUCR_ISC01);    break;
 620:	a5 e5       	ldi	r26, 0x55	; 85
 622:	b0 e0       	ldi	r27, 0x00	; 0
 624:	e5 e5       	ldi	r30, 0x55	; 85
 626:	f0 e0       	ldi	r31, 0x00	; 0
 628:	80 81       	ld	r24, Z
 62a:	81 60       	ori	r24, 0x01	; 1
 62c:	8c 93       	st	X, r24
 62e:	a5 e5       	ldi	r26, 0x55	; 85
 630:	b0 e0       	ldi	r27, 0x00	; 0
 632:	e5 e5       	ldi	r30, 0x55	; 85
 634:	f0 e0       	ldi	r31, 0x00	; 0
 636:	80 81       	ld	r24, Z
 638:	8d 7f       	andi	r24, 0xFD	; 253
 63a:	8c 93       	st	X, r24
 63c:	ac c0       	rjmp	.+344    	; 0x796 <EXTI_u8IntSetSenseControl+0x1f6>
		case FALLING_EDGE: SET_BIT(MCUCR,MCUCR_ISC01);    CLR_BIT(MCUCR,MCUCR_ISC00);    break;
 63e:	a5 e5       	ldi	r26, 0x55	; 85
 640:	b0 e0       	ldi	r27, 0x00	; 0
 642:	e5 e5       	ldi	r30, 0x55	; 85
 644:	f0 e0       	ldi	r31, 0x00	; 0
 646:	80 81       	ld	r24, Z
 648:	82 60       	ori	r24, 0x02	; 2
 64a:	8c 93       	st	X, r24
 64c:	a5 e5       	ldi	r26, 0x55	; 85
 64e:	b0 e0       	ldi	r27, 0x00	; 0
 650:	e5 e5       	ldi	r30, 0x55	; 85
 652:	f0 e0       	ldi	r31, 0x00	; 0
 654:	80 81       	ld	r24, Z
 656:	8e 7f       	andi	r24, 0xFE	; 254
 658:	8c 93       	st	X, r24
 65a:	9d c0       	rjmp	.+314    	; 0x796 <EXTI_u8IntSetSenseControl+0x1f6>
		case RISING_EDGE:  SET_BIT(MCUCR,MCUCR_ISC01);    SET_BIT(MCUCR,MCUCR_ISC00);    break;
 65c:	a5 e5       	ldi	r26, 0x55	; 85
 65e:	b0 e0       	ldi	r27, 0x00	; 0
 660:	e5 e5       	ldi	r30, 0x55	; 85
 662:	f0 e0       	ldi	r31, 0x00	; 0
 664:	80 81       	ld	r24, Z
 666:	82 60       	ori	r24, 0x02	; 2
 668:	8c 93       	st	X, r24
 66a:	a5 e5       	ldi	r26, 0x55	; 85
 66c:	b0 e0       	ldi	r27, 0x00	; 0
 66e:	e5 e5       	ldi	r30, 0x55	; 85
 670:	f0 e0       	ldi	r31, 0x00	; 0
 672:	80 81       	ld	r24, Z
 674:	81 60       	ori	r24, 0x01	; 1
 676:	8c 93       	st	X, r24
 678:	8e c0       	rjmp	.+284    	; 0x796 <EXTI_u8IntSetSenseControl+0x1f6>
		default:           Local_u8ErrorState = NOK;                                     break;
 67a:	81 e0       	ldi	r24, 0x01	; 1
 67c:	89 83       	std	Y+1, r24	; 0x01
 67e:	8b c0       	rjmp	.+278    	; 0x796 <EXTI_u8IntSetSenseControl+0x1f6>
		}
	}
	else if(Copy_u8Int == INT1)
 680:	8a 81       	ldd	r24, Y+2	; 0x02
 682:	82 30       	cpi	r24, 0x02	; 2
 684:	09 f0       	breq	.+2      	; 0x688 <EXTI_u8IntSetSenseControl+0xe8>
 686:	5f c0       	rjmp	.+190    	; 0x746 <EXTI_u8IntSetSenseControl+0x1a6>
	{
		switch(Copy_u8Sense)
 688:	8b 81       	ldd	r24, Y+3	; 0x03
 68a:	28 2f       	mov	r18, r24
 68c:	30 e0       	ldi	r19, 0x00	; 0
 68e:	3f 83       	std	Y+7, r19	; 0x07
 690:	2e 83       	std	Y+6, r18	; 0x06
 692:	8e 81       	ldd	r24, Y+6	; 0x06
 694:	9f 81       	ldd	r25, Y+7	; 0x07
 696:	82 30       	cpi	r24, 0x02	; 2
 698:	91 05       	cpc	r25, r1
 69a:	29 f1       	breq	.+74     	; 0x6e6 <EXTI_u8IntSetSenseControl+0x146>
 69c:	2e 81       	ldd	r18, Y+6	; 0x06
 69e:	3f 81       	ldd	r19, Y+7	; 0x07
 6a0:	23 30       	cpi	r18, 0x03	; 3
 6a2:	31 05       	cpc	r19, r1
 6a4:	34 f4       	brge	.+12     	; 0x6b2 <EXTI_u8IntSetSenseControl+0x112>
 6a6:	8e 81       	ldd	r24, Y+6	; 0x06
 6a8:	9f 81       	ldd	r25, Y+7	; 0x07
 6aa:	81 30       	cpi	r24, 0x01	; 1
 6ac:	91 05       	cpc	r25, r1
 6ae:	61 f0       	breq	.+24     	; 0x6c8 <EXTI_u8IntSetSenseControl+0x128>
 6b0:	47 c0       	rjmp	.+142    	; 0x740 <EXTI_u8IntSetSenseControl+0x1a0>
 6b2:	2e 81       	ldd	r18, Y+6	; 0x06
 6b4:	3f 81       	ldd	r19, Y+7	; 0x07
 6b6:	23 30       	cpi	r18, 0x03	; 3
 6b8:	31 05       	cpc	r19, r1
 6ba:	21 f1       	breq	.+72     	; 0x704 <EXTI_u8IntSetSenseControl+0x164>
 6bc:	8e 81       	ldd	r24, Y+6	; 0x06
 6be:	9f 81       	ldd	r25, Y+7	; 0x07
 6c0:	84 30       	cpi	r24, 0x04	; 4
 6c2:	91 05       	cpc	r25, r1
 6c4:	71 f1       	breq	.+92     	; 0x722 <EXTI_u8IntSetSenseControl+0x182>
 6c6:	3c c0       	rjmp	.+120    	; 0x740 <EXTI_u8IntSetSenseControl+0x1a0>
		{
		case LOW_LEVEL:    CLR_BIT(MCUCR,MCUCR_ISC10);    CLR_BIT(MCUCR,MCUCR_ISC11);    break;
 6c8:	a5 e5       	ldi	r26, 0x55	; 85
 6ca:	b0 e0       	ldi	r27, 0x00	; 0
 6cc:	e5 e5       	ldi	r30, 0x55	; 85
 6ce:	f0 e0       	ldi	r31, 0x00	; 0
 6d0:	80 81       	ld	r24, Z
 6d2:	8b 7f       	andi	r24, 0xFB	; 251
 6d4:	8c 93       	st	X, r24
 6d6:	a5 e5       	ldi	r26, 0x55	; 85
 6d8:	b0 e0       	ldi	r27, 0x00	; 0
 6da:	e5 e5       	ldi	r30, 0x55	; 85
 6dc:	f0 e0       	ldi	r31, 0x00	; 0
 6de:	80 81       	ld	r24, Z
 6e0:	87 7f       	andi	r24, 0xF7	; 247
 6e2:	8c 93       	st	X, r24
 6e4:	58 c0       	rjmp	.+176    	; 0x796 <EXTI_u8IntSetSenseControl+0x1f6>
		case ON_CHANGE:    SET_BIT(MCUCR,MCUCR_ISC10);    CLR_BIT(MCUCR,MCUCR_ISC11);    break;
 6e6:	a5 e5       	ldi	r26, 0x55	; 85
 6e8:	b0 e0       	ldi	r27, 0x00	; 0
 6ea:	e5 e5       	ldi	r30, 0x55	; 85
 6ec:	f0 e0       	ldi	r31, 0x00	; 0
 6ee:	80 81       	ld	r24, Z
 6f0:	84 60       	ori	r24, 0x04	; 4
 6f2:	8c 93       	st	X, r24
 6f4:	a5 e5       	ldi	r26, 0x55	; 85
 6f6:	b0 e0       	ldi	r27, 0x00	; 0
 6f8:	e5 e5       	ldi	r30, 0x55	; 85
 6fa:	f0 e0       	ldi	r31, 0x00	; 0
 6fc:	80 81       	ld	r24, Z
 6fe:	87 7f       	andi	r24, 0xF7	; 247
 700:	8c 93       	st	X, r24
 702:	49 c0       	rjmp	.+146    	; 0x796 <EXTI_u8IntSetSenseControl+0x1f6>
		case FALLING_EDGE: SET_BIT(MCUCR,MCUCR_ISC11);    CLR_BIT(MCUCR,MCUCR_ISC10);    break;
 704:	a5 e5       	ldi	r26, 0x55	; 85
 706:	b0 e0       	ldi	r27, 0x00	; 0
 708:	e5 e5       	ldi	r30, 0x55	; 85
 70a:	f0 e0       	ldi	r31, 0x00	; 0
 70c:	80 81       	ld	r24, Z
 70e:	88 60       	ori	r24, 0x08	; 8
 710:	8c 93       	st	X, r24
 712:	a5 e5       	ldi	r26, 0x55	; 85
 714:	b0 e0       	ldi	r27, 0x00	; 0
 716:	e5 e5       	ldi	r30, 0x55	; 85
 718:	f0 e0       	ldi	r31, 0x00	; 0
 71a:	80 81       	ld	r24, Z
 71c:	8b 7f       	andi	r24, 0xFB	; 251
 71e:	8c 93       	st	X, r24
 720:	3a c0       	rjmp	.+116    	; 0x796 <EXTI_u8IntSetSenseControl+0x1f6>
		case RISING_EDGE:  SET_BIT(MCUCR,MCUCR_ISC11);    SET_BIT(MCUCR,MCUCR_ISC10);    break;
 722:	a5 e5       	ldi	r26, 0x55	; 85
 724:	b0 e0       	ldi	r27, 0x00	; 0
 726:	e5 e5       	ldi	r30, 0x55	; 85
 728:	f0 e0       	ldi	r31, 0x00	; 0
 72a:	80 81       	ld	r24, Z
 72c:	88 60       	ori	r24, 0x08	; 8
 72e:	8c 93       	st	X, r24
 730:	a5 e5       	ldi	r26, 0x55	; 85
 732:	b0 e0       	ldi	r27, 0x00	; 0
 734:	e5 e5       	ldi	r30, 0x55	; 85
 736:	f0 e0       	ldi	r31, 0x00	; 0
 738:	80 81       	ld	r24, Z
 73a:	84 60       	ori	r24, 0x04	; 4
 73c:	8c 93       	st	X, r24
 73e:	2b c0       	rjmp	.+86     	; 0x796 <EXTI_u8IntSetSenseControl+0x1f6>
		default:           Local_u8ErrorState = NOK;                                     break;
 740:	81 e0       	ldi	r24, 0x01	; 1
 742:	89 83       	std	Y+1, r24	; 0x01
 744:	28 c0       	rjmp	.+80     	; 0x796 <EXTI_u8IntSetSenseControl+0x1f6>
		}
	}
	else if(Copy_u8Int == INT2)
 746:	8a 81       	ldd	r24, Y+2	; 0x02
 748:	83 30       	cpi	r24, 0x03	; 3
 74a:	19 f5       	brne	.+70     	; 0x792 <EXTI_u8IntSetSenseControl+0x1f2>
	{
		switch(Copy_u8Sense)
 74c:	8b 81       	ldd	r24, Y+3	; 0x03
 74e:	28 2f       	mov	r18, r24
 750:	30 e0       	ldi	r19, 0x00	; 0
 752:	3d 83       	std	Y+5, r19	; 0x05
 754:	2c 83       	std	Y+4, r18	; 0x04
 756:	8c 81       	ldd	r24, Y+4	; 0x04
 758:	9d 81       	ldd	r25, Y+5	; 0x05
 75a:	83 30       	cpi	r24, 0x03	; 3
 75c:	91 05       	cpc	r25, r1
 75e:	31 f0       	breq	.+12     	; 0x76c <EXTI_u8IntSetSenseControl+0x1cc>
 760:	2c 81       	ldd	r18, Y+4	; 0x04
 762:	3d 81       	ldd	r19, Y+5	; 0x05
 764:	24 30       	cpi	r18, 0x04	; 4
 766:	31 05       	cpc	r19, r1
 768:	49 f0       	breq	.+18     	; 0x77c <EXTI_u8IntSetSenseControl+0x1dc>
 76a:	10 c0       	rjmp	.+32     	; 0x78c <EXTI_u8IntSetSenseControl+0x1ec>
		{
		case FALLING_EDGE: CLR_BIT(MCUCSR,MCUCSR_ISC2);    break;
 76c:	a4 e5       	ldi	r26, 0x54	; 84
 76e:	b0 e0       	ldi	r27, 0x00	; 0
 770:	e4 e5       	ldi	r30, 0x54	; 84
 772:	f0 e0       	ldi	r31, 0x00	; 0
 774:	80 81       	ld	r24, Z
 776:	8f 7b       	andi	r24, 0xBF	; 191
 778:	8c 93       	st	X, r24
 77a:	0d c0       	rjmp	.+26     	; 0x796 <EXTI_u8IntSetSenseControl+0x1f6>
		case RISING_EDGE:  SET_BIT(MCUCSR,MCUCSR_ISC2);    break;
 77c:	a4 e5       	ldi	r26, 0x54	; 84
 77e:	b0 e0       	ldi	r27, 0x00	; 0
 780:	e4 e5       	ldi	r30, 0x54	; 84
 782:	f0 e0       	ldi	r31, 0x00	; 0
 784:	80 81       	ld	r24, Z
 786:	80 64       	ori	r24, 0x40	; 64
 788:	8c 93       	st	X, r24
 78a:	05 c0       	rjmp	.+10     	; 0x796 <EXTI_u8IntSetSenseControl+0x1f6>
		default:           Local_u8ErrorState = NOK;                                     break;
 78c:	81 e0       	ldi	r24, 0x01	; 1
 78e:	89 83       	std	Y+1, r24	; 0x01
 790:	02 c0       	rjmp	.+4      	; 0x796 <EXTI_u8IntSetSenseControl+0x1f6>
		}
	}
	else
	{
		Local_u8ErrorState = NOK;
 792:	81 e0       	ldi	r24, 0x01	; 1
 794:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
 796:	89 81       	ldd	r24, Y+1	; 0x01
}
 798:	29 96       	adiw	r28, 0x09	; 9
 79a:	0f b6       	in	r0, 0x3f	; 63
 79c:	f8 94       	cli
 79e:	de bf       	out	0x3e, r29	; 62
 7a0:	0f be       	out	0x3f, r0	; 63
 7a2:	cd bf       	out	0x3d, r28	; 61
 7a4:	cf 91       	pop	r28
 7a6:	df 91       	pop	r29
 7a8:	08 95       	ret

000007aa <EXTI_u8IntEnable>:
/*******************************************  IntEnable   ******************************************/
u8 EXTI_u8IntEnable(u8 Copy_u8Int)
{
 7aa:	df 93       	push	r29
 7ac:	cf 93       	push	r28
 7ae:	00 d0       	rcall	.+0      	; 0x7b0 <EXTI_u8IntEnable+0x6>
 7b0:	00 d0       	rcall	.+0      	; 0x7b2 <EXTI_u8IntEnable+0x8>
 7b2:	cd b7       	in	r28, 0x3d	; 61
 7b4:	de b7       	in	r29, 0x3e	; 62
 7b6:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
 7b8:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Int)
 7ba:	8a 81       	ldd	r24, Y+2	; 0x02
 7bc:	28 2f       	mov	r18, r24
 7be:	30 e0       	ldi	r19, 0x00	; 0
 7c0:	3c 83       	std	Y+4, r19	; 0x04
 7c2:	2b 83       	std	Y+3, r18	; 0x03
 7c4:	8b 81       	ldd	r24, Y+3	; 0x03
 7c6:	9c 81       	ldd	r25, Y+4	; 0x04
 7c8:	82 30       	cpi	r24, 0x02	; 2
 7ca:	91 05       	cpc	r25, r1
 7cc:	91 f0       	breq	.+36     	; 0x7f2 <EXTI_u8IntEnable+0x48>
 7ce:	2b 81       	ldd	r18, Y+3	; 0x03
 7d0:	3c 81       	ldd	r19, Y+4	; 0x04
 7d2:	23 30       	cpi	r18, 0x03	; 3
 7d4:	31 05       	cpc	r19, r1
 7d6:	a9 f0       	breq	.+42     	; 0x802 <EXTI_u8IntEnable+0x58>
 7d8:	8b 81       	ldd	r24, Y+3	; 0x03
 7da:	9c 81       	ldd	r25, Y+4	; 0x04
 7dc:	81 30       	cpi	r24, 0x01	; 1
 7de:	91 05       	cpc	r25, r1
 7e0:	c1 f4       	brne	.+48     	; 0x812 <EXTI_u8IntEnable+0x68>
	{
	case INT0:  SET_BIT(GICR,GICR_INT0);  break;
 7e2:	ab e5       	ldi	r26, 0x5B	; 91
 7e4:	b0 e0       	ldi	r27, 0x00	; 0
 7e6:	eb e5       	ldi	r30, 0x5B	; 91
 7e8:	f0 e0       	ldi	r31, 0x00	; 0
 7ea:	80 81       	ld	r24, Z
 7ec:	80 64       	ori	r24, 0x40	; 64
 7ee:	8c 93       	st	X, r24
 7f0:	12 c0       	rjmp	.+36     	; 0x816 <EXTI_u8IntEnable+0x6c>
	case INT1:  SET_BIT(GICR,GICR_INT1);  break;
 7f2:	ab e5       	ldi	r26, 0x5B	; 91
 7f4:	b0 e0       	ldi	r27, 0x00	; 0
 7f6:	eb e5       	ldi	r30, 0x5B	; 91
 7f8:	f0 e0       	ldi	r31, 0x00	; 0
 7fa:	80 81       	ld	r24, Z
 7fc:	80 68       	ori	r24, 0x80	; 128
 7fe:	8c 93       	st	X, r24
 800:	0a c0       	rjmp	.+20     	; 0x816 <EXTI_u8IntEnable+0x6c>
	case INT2:  SET_BIT(GICR,GICR_INT2);  break;
 802:	ab e5       	ldi	r26, 0x5B	; 91
 804:	b0 e0       	ldi	r27, 0x00	; 0
 806:	eb e5       	ldi	r30, 0x5B	; 91
 808:	f0 e0       	ldi	r31, 0x00	; 0
 80a:	80 81       	ld	r24, Z
 80c:	80 62       	ori	r24, 0x20	; 32
 80e:	8c 93       	st	X, r24
 810:	02 c0       	rjmp	.+4      	; 0x816 <EXTI_u8IntEnable+0x6c>
	default:    Local_u8ErrorState = NOK; break;
 812:	81 e0       	ldi	r24, 0x01	; 1
 814:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
 816:	89 81       	ldd	r24, Y+1	; 0x01
}
 818:	0f 90       	pop	r0
 81a:	0f 90       	pop	r0
 81c:	0f 90       	pop	r0
 81e:	0f 90       	pop	r0
 820:	cf 91       	pop	r28
 822:	df 91       	pop	r29
 824:	08 95       	ret

00000826 <EXTI_u8IntDisable>:

/*******************************************  IntDisable   ******************************************/
u8 EXTI_u8IntDisable(u8 Copy_u8Int)
{
 826:	df 93       	push	r29
 828:	cf 93       	push	r28
 82a:	00 d0       	rcall	.+0      	; 0x82c <EXTI_u8IntDisable+0x6>
 82c:	00 d0       	rcall	.+0      	; 0x82e <EXTI_u8IntDisable+0x8>
 82e:	cd b7       	in	r28, 0x3d	; 61
 830:	de b7       	in	r29, 0x3e	; 62
 832:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
 834:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Int)
 836:	8a 81       	ldd	r24, Y+2	; 0x02
 838:	28 2f       	mov	r18, r24
 83a:	30 e0       	ldi	r19, 0x00	; 0
 83c:	3c 83       	std	Y+4, r19	; 0x04
 83e:	2b 83       	std	Y+3, r18	; 0x03
 840:	8b 81       	ldd	r24, Y+3	; 0x03
 842:	9c 81       	ldd	r25, Y+4	; 0x04
 844:	82 30       	cpi	r24, 0x02	; 2
 846:	91 05       	cpc	r25, r1
 848:	91 f0       	breq	.+36     	; 0x86e <__stack+0xf>
 84a:	2b 81       	ldd	r18, Y+3	; 0x03
 84c:	3c 81       	ldd	r19, Y+4	; 0x04
 84e:	23 30       	cpi	r18, 0x03	; 3
 850:	31 05       	cpc	r19, r1
 852:	a9 f0       	breq	.+42     	; 0x87e <__stack+0x1f>
 854:	8b 81       	ldd	r24, Y+3	; 0x03
 856:	9c 81       	ldd	r25, Y+4	; 0x04
 858:	81 30       	cpi	r24, 0x01	; 1
 85a:	91 05       	cpc	r25, r1
 85c:	c1 f4       	brne	.+48     	; 0x88e <__stack+0x2f>
	{
	case INT0:  CLR_BIT(GICR,GICR_INT0);  break;
 85e:	ab e5       	ldi	r26, 0x5B	; 91
 860:	b0 e0       	ldi	r27, 0x00	; 0
 862:	eb e5       	ldi	r30, 0x5B	; 91
 864:	f0 e0       	ldi	r31, 0x00	; 0
 866:	80 81       	ld	r24, Z
 868:	8f 7b       	andi	r24, 0xBF	; 191
 86a:	8c 93       	st	X, r24
 86c:	12 c0       	rjmp	.+36     	; 0x892 <__stack+0x33>
	case INT1:  CLR_BIT(GICR,GICR_INT1);  break;
 86e:	ab e5       	ldi	r26, 0x5B	; 91
 870:	b0 e0       	ldi	r27, 0x00	; 0
 872:	eb e5       	ldi	r30, 0x5B	; 91
 874:	f0 e0       	ldi	r31, 0x00	; 0
 876:	80 81       	ld	r24, Z
 878:	8f 77       	andi	r24, 0x7F	; 127
 87a:	8c 93       	st	X, r24
 87c:	0a c0       	rjmp	.+20     	; 0x892 <__stack+0x33>
	case INT2:  CLR_BIT(GICR,GICR_INT2);  break;
 87e:	ab e5       	ldi	r26, 0x5B	; 91
 880:	b0 e0       	ldi	r27, 0x00	; 0
 882:	eb e5       	ldi	r30, 0x5B	; 91
 884:	f0 e0       	ldi	r31, 0x00	; 0
 886:	80 81       	ld	r24, Z
 888:	8f 7d       	andi	r24, 0xDF	; 223
 88a:	8c 93       	st	X, r24
 88c:	02 c0       	rjmp	.+4      	; 0x892 <__stack+0x33>
	default:    Local_u8ErrorState = NOK; break;
 88e:	81 e0       	ldi	r24, 0x01	; 1
 890:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
 892:	89 81       	ldd	r24, Y+1	; 0x01
}
 894:	0f 90       	pop	r0
 896:	0f 90       	pop	r0
 898:	0f 90       	pop	r0
 89a:	0f 90       	pop	r0
 89c:	cf 91       	pop	r28
 89e:	df 91       	pop	r29
 8a0:	08 95       	ret

000008a2 <EXTI_u8Int0SetCallBack>:
/****************************************************************************************************/
/*******************************************Call Back Function **************************************/
/****************************************************************************************************/

u8 EXTI_u8Int0SetCallBack(void(*Copy_pvInt0Func)(void))
{
 8a2:	df 93       	push	r29
 8a4:	cf 93       	push	r28
 8a6:	00 d0       	rcall	.+0      	; 0x8a8 <EXTI_u8Int0SetCallBack+0x6>
 8a8:	0f 92       	push	r0
 8aa:	cd b7       	in	r28, 0x3d	; 61
 8ac:	de b7       	in	r29, 0x3e	; 62
 8ae:	9b 83       	std	Y+3, r25	; 0x03
 8b0:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
 8b2:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_pvInt0Func != NULL)
 8b4:	8a 81       	ldd	r24, Y+2	; 0x02
 8b6:	9b 81       	ldd	r25, Y+3	; 0x03
 8b8:	00 97       	sbiw	r24, 0x00	; 0
 8ba:	39 f0       	breq	.+14     	; 0x8ca <EXTI_u8Int0SetCallBack+0x28>
	{
		EXTI_pvInt0Func = Copy_pvInt0Func;
 8bc:	8a 81       	ldd	r24, Y+2	; 0x02
 8be:	9b 81       	ldd	r25, Y+3	; 0x03
 8c0:	90 93 61 00 	sts	0x0061, r25
 8c4:	80 93 60 00 	sts	0x0060, r24
 8c8:	02 c0       	rjmp	.+4      	; 0x8ce <EXTI_u8Int0SetCallBack+0x2c>

	}
	else {

		Local_u8ErrorState = NULL_POINTER;
 8ca:	82 e0       	ldi	r24, 0x02	; 2
 8cc:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_u8ErrorState;
 8ce:	89 81       	ldd	r24, Y+1	; 0x01
}
 8d0:	0f 90       	pop	r0
 8d2:	0f 90       	pop	r0
 8d4:	0f 90       	pop	r0
 8d6:	cf 91       	pop	r28
 8d8:	df 91       	pop	r29
 8da:	08 95       	ret

000008dc <EXTI_u8Int1SetCallBack>:

u8 EXTI_u8Int1SetCallBack(void(*Copy_pvInt1Func)(void))
{
 8dc:	df 93       	push	r29
 8de:	cf 93       	push	r28
 8e0:	00 d0       	rcall	.+0      	; 0x8e2 <EXTI_u8Int1SetCallBack+0x6>
 8e2:	0f 92       	push	r0
 8e4:	cd b7       	in	r28, 0x3d	; 61
 8e6:	de b7       	in	r29, 0x3e	; 62
 8e8:	9b 83       	std	Y+3, r25	; 0x03
 8ea:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
 8ec:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_pvInt1Func != NULL)
 8ee:	8a 81       	ldd	r24, Y+2	; 0x02
 8f0:	9b 81       	ldd	r25, Y+3	; 0x03
 8f2:	00 97       	sbiw	r24, 0x00	; 0
 8f4:	39 f0       	breq	.+14     	; 0x904 <EXTI_u8Int1SetCallBack+0x28>
	{
		EXTI_pvInt1Func = Copy_pvInt1Func;
 8f6:	8a 81       	ldd	r24, Y+2	; 0x02
 8f8:	9b 81       	ldd	r25, Y+3	; 0x03
 8fa:	90 93 63 00 	sts	0x0063, r25
 8fe:	80 93 62 00 	sts	0x0062, r24
 902:	02 c0       	rjmp	.+4      	; 0x908 <EXTI_u8Int1SetCallBack+0x2c>

	}
	else {

		Local_u8ErrorState = NULL_POINTER;
 904:	82 e0       	ldi	r24, 0x02	; 2
 906:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_u8ErrorState;
 908:	89 81       	ldd	r24, Y+1	; 0x01
}
 90a:	0f 90       	pop	r0
 90c:	0f 90       	pop	r0
 90e:	0f 90       	pop	r0
 910:	cf 91       	pop	r28
 912:	df 91       	pop	r29
 914:	08 95       	ret

00000916 <EXTI_u8Int2SetCallBack>:

u8 EXTI_u8Int2SetCallBack(void(*Copy_pvInt2Func)(void))
{
 916:	df 93       	push	r29
 918:	cf 93       	push	r28
 91a:	00 d0       	rcall	.+0      	; 0x91c <EXTI_u8Int2SetCallBack+0x6>
 91c:	0f 92       	push	r0
 91e:	cd b7       	in	r28, 0x3d	; 61
 920:	de b7       	in	r29, 0x3e	; 62
 922:	9b 83       	std	Y+3, r25	; 0x03
 924:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState =OK;
 926:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvInt2Func != NULL)
 928:	8a 81       	ldd	r24, Y+2	; 0x02
 92a:	9b 81       	ldd	r25, Y+3	; 0x03
 92c:	00 97       	sbiw	r24, 0x00	; 0
 92e:	39 f0       	breq	.+14     	; 0x93e <EXTI_u8Int2SetCallBack+0x28>
	{
		EXTI_pvInt2Func = Copy_pvInt2Func;
 930:	8a 81       	ldd	r24, Y+2	; 0x02
 932:	9b 81       	ldd	r25, Y+3	; 0x03
 934:	90 93 65 00 	sts	0x0065, r25
 938:	80 93 64 00 	sts	0x0064, r24
 93c:	02 c0       	rjmp	.+4      	; 0x942 <EXTI_u8Int2SetCallBack+0x2c>
	}
	else {

		Local_u8ErrorState = NULL_POINTER;
 93e:	82 e0       	ldi	r24, 0x02	; 2
 940:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
 942:	89 81       	ldd	r24, Y+1	; 0x01
}
 944:	0f 90       	pop	r0
 946:	0f 90       	pop	r0
 948:	0f 90       	pop	r0
 94a:	cf 91       	pop	r28
 94c:	df 91       	pop	r29
 94e:	08 95       	ret

00000950 <__vector_1>:
/****************************************************************************************************/
/****************************************************************************************************/
/* ISR of INT0*/
void __vector_1(void)   __attribute__((signal));
void __vector_1(void)
{
 950:	1f 92       	push	r1
 952:	0f 92       	push	r0
 954:	0f b6       	in	r0, 0x3f	; 63
 956:	0f 92       	push	r0
 958:	11 24       	eor	r1, r1
 95a:	2f 93       	push	r18
 95c:	3f 93       	push	r19
 95e:	4f 93       	push	r20
 960:	5f 93       	push	r21
 962:	6f 93       	push	r22
 964:	7f 93       	push	r23
 966:	8f 93       	push	r24
 968:	9f 93       	push	r25
 96a:	af 93       	push	r26
 96c:	bf 93       	push	r27
 96e:	ef 93       	push	r30
 970:	ff 93       	push	r31
 972:	df 93       	push	r29
 974:	cf 93       	push	r28
 976:	cd b7       	in	r28, 0x3d	; 61
 978:	de b7       	in	r29, 0x3e	; 62
	if (EXTI_pvInt0Func != NULL)
 97a:	80 91 60 00 	lds	r24, 0x0060
 97e:	90 91 61 00 	lds	r25, 0x0061
 982:	00 97       	sbiw	r24, 0x00	; 0
 984:	29 f0       	breq	.+10     	; 0x990 <__vector_1+0x40>
	{
		EXTI_pvInt0Func();
 986:	e0 91 60 00 	lds	r30, 0x0060
 98a:	f0 91 61 00 	lds	r31, 0x0061
 98e:	09 95       	icall
	else {
		/* Do nothing*/
	}


}
 990:	cf 91       	pop	r28
 992:	df 91       	pop	r29
 994:	ff 91       	pop	r31
 996:	ef 91       	pop	r30
 998:	bf 91       	pop	r27
 99a:	af 91       	pop	r26
 99c:	9f 91       	pop	r25
 99e:	8f 91       	pop	r24
 9a0:	7f 91       	pop	r23
 9a2:	6f 91       	pop	r22
 9a4:	5f 91       	pop	r21
 9a6:	4f 91       	pop	r20
 9a8:	3f 91       	pop	r19
 9aa:	2f 91       	pop	r18
 9ac:	0f 90       	pop	r0
 9ae:	0f be       	out	0x3f, r0	; 63
 9b0:	0f 90       	pop	r0
 9b2:	1f 90       	pop	r1
 9b4:	18 95       	reti

000009b6 <__vector_2>:

/* ISR of INT1*/
void __vector_2(void)   __attribute__((signal));
void __vector_2(void)
{
 9b6:	1f 92       	push	r1
 9b8:	0f 92       	push	r0
 9ba:	0f b6       	in	r0, 0x3f	; 63
 9bc:	0f 92       	push	r0
 9be:	11 24       	eor	r1, r1
 9c0:	2f 93       	push	r18
 9c2:	3f 93       	push	r19
 9c4:	4f 93       	push	r20
 9c6:	5f 93       	push	r21
 9c8:	6f 93       	push	r22
 9ca:	7f 93       	push	r23
 9cc:	8f 93       	push	r24
 9ce:	9f 93       	push	r25
 9d0:	af 93       	push	r26
 9d2:	bf 93       	push	r27
 9d4:	ef 93       	push	r30
 9d6:	ff 93       	push	r31
 9d8:	df 93       	push	r29
 9da:	cf 93       	push	r28
 9dc:	cd b7       	in	r28, 0x3d	; 61
 9de:	de b7       	in	r29, 0x3e	; 62
	if (EXTI_pvInt1Func != NULL)
 9e0:	80 91 62 00 	lds	r24, 0x0062
 9e4:	90 91 63 00 	lds	r25, 0x0063
 9e8:	00 97       	sbiw	r24, 0x00	; 0
 9ea:	29 f0       	breq	.+10     	; 0x9f6 <__vector_2+0x40>
	{
		EXTI_pvInt1Func();
 9ec:	e0 91 62 00 	lds	r30, 0x0062
 9f0:	f0 91 63 00 	lds	r31, 0x0063
 9f4:	09 95       	icall
	else {
		/* Do nothing*/
	}


}
 9f6:	cf 91       	pop	r28
 9f8:	df 91       	pop	r29
 9fa:	ff 91       	pop	r31
 9fc:	ef 91       	pop	r30
 9fe:	bf 91       	pop	r27
 a00:	af 91       	pop	r26
 a02:	9f 91       	pop	r25
 a04:	8f 91       	pop	r24
 a06:	7f 91       	pop	r23
 a08:	6f 91       	pop	r22
 a0a:	5f 91       	pop	r21
 a0c:	4f 91       	pop	r20
 a0e:	3f 91       	pop	r19
 a10:	2f 91       	pop	r18
 a12:	0f 90       	pop	r0
 a14:	0f be       	out	0x3f, r0	; 63
 a16:	0f 90       	pop	r0
 a18:	1f 90       	pop	r1
 a1a:	18 95       	reti

00000a1c <__vector_3>:

/* ISR of INT2*/
void __vector_3(void)   __attribute__((signal));
void __vector_3(void)
{
 a1c:	1f 92       	push	r1
 a1e:	0f 92       	push	r0
 a20:	0f b6       	in	r0, 0x3f	; 63
 a22:	0f 92       	push	r0
 a24:	11 24       	eor	r1, r1
 a26:	2f 93       	push	r18
 a28:	3f 93       	push	r19
 a2a:	4f 93       	push	r20
 a2c:	5f 93       	push	r21
 a2e:	6f 93       	push	r22
 a30:	7f 93       	push	r23
 a32:	8f 93       	push	r24
 a34:	9f 93       	push	r25
 a36:	af 93       	push	r26
 a38:	bf 93       	push	r27
 a3a:	ef 93       	push	r30
 a3c:	ff 93       	push	r31
 a3e:	df 93       	push	r29
 a40:	cf 93       	push	r28
 a42:	cd b7       	in	r28, 0x3d	; 61
 a44:	de b7       	in	r29, 0x3e	; 62
	if (EXTI_pvInt2Func != NULL)
 a46:	80 91 64 00 	lds	r24, 0x0064
 a4a:	90 91 65 00 	lds	r25, 0x0065
 a4e:	00 97       	sbiw	r24, 0x00	; 0
 a50:	29 f0       	breq	.+10     	; 0xa5c <__vector_3+0x40>
	{
		EXTI_pvInt2Func();
 a52:	e0 91 64 00 	lds	r30, 0x0064
 a56:	f0 91 65 00 	lds	r31, 0x0065
 a5a:	09 95       	icall
	else {
		/* Do nothing*/
	}


}
 a5c:	cf 91       	pop	r28
 a5e:	df 91       	pop	r29
 a60:	ff 91       	pop	r31
 a62:	ef 91       	pop	r30
 a64:	bf 91       	pop	r27
 a66:	af 91       	pop	r26
 a68:	9f 91       	pop	r25
 a6a:	8f 91       	pop	r24
 a6c:	7f 91       	pop	r23
 a6e:	6f 91       	pop	r22
 a70:	5f 91       	pop	r21
 a72:	4f 91       	pop	r20
 a74:	3f 91       	pop	r19
 a76:	2f 91       	pop	r18
 a78:	0f 90       	pop	r0
 a7a:	0f be       	out	0x3f, r0	; 63
 a7c:	0f 90       	pop	r0
 a7e:	1f 90       	pop	r1
 a80:	18 95       	reti

00000a82 <GIE_VoidEnable>:

#include "GIE_interface.h"
#include "GIE_register.h"

void GIE_VoidEnable(void)
{
 a82:	df 93       	push	r29
 a84:	cf 93       	push	r28
 a86:	cd b7       	in	r28, 0x3d	; 61
 a88:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
 a8a:	af e5       	ldi	r26, 0x5F	; 95
 a8c:	b0 e0       	ldi	r27, 0x00	; 0
 a8e:	ef e5       	ldi	r30, 0x5F	; 95
 a90:	f0 e0       	ldi	r31, 0x00	; 0
 a92:	80 81       	ld	r24, Z
 a94:	80 68       	ori	r24, 0x80	; 128
 a96:	8c 93       	st	X, r24
}
 a98:	cf 91       	pop	r28
 a9a:	df 91       	pop	r29
 a9c:	08 95       	ret

00000a9e <GIE_VoidDisable>:
void GIE_VoidDisable(void)
{
 a9e:	df 93       	push	r29
 aa0:	cf 93       	push	r28
 aa2:	cd b7       	in	r28, 0x3d	; 61
 aa4:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,SREG_I);
 aa6:	af e5       	ldi	r26, 0x5F	; 95
 aa8:	b0 e0       	ldi	r27, 0x00	; 0
 aaa:	ef e5       	ldi	r30, 0x5F	; 95
 aac:	f0 e0       	ldi	r31, 0x00	; 0
 aae:	80 81       	ld	r24, Z
 ab0:	8f 77       	andi	r24, 0x7F	; 127
 ab2:	8c 93       	st	X, r24
}
 ab4:	cf 91       	pop	r28
 ab6:	df 91       	pop	r29
 ab8:	08 95       	ret

00000aba <PORT_VoidInit>:
#include "PORT_interface.h"
#include "PORT_register.h"


void PORT_VoidInit(void)
{
 aba:	df 93       	push	r29
 abc:	cf 93       	push	r28
 abe:	cd b7       	in	r28, 0x3d	; 61
 ac0:	de b7       	in	r29, 0x3e	; 62
	DDRA = PORTA_DIR;
 ac2:	ea e3       	ldi	r30, 0x3A	; 58
 ac4:	f0 e0       	ldi	r31, 0x00	; 0
 ac6:	10 82       	st	Z, r1
	DDRB = PORTB_DIR;
 ac8:	e7 e3       	ldi	r30, 0x37	; 55
 aca:	f0 e0       	ldi	r31, 0x00	; 0
 acc:	10 82       	st	Z, r1
	DDRC = PORTC_DIR;
 ace:	e4 e3       	ldi	r30, 0x34	; 52
 ad0:	f0 e0       	ldi	r31, 0x00	; 0
 ad2:	83 e0       	ldi	r24, 0x03	; 3
 ad4:	80 83       	st	Z, r24
	DDRD = PORTD_DIR;
 ad6:	e1 e3       	ldi	r30, 0x31	; 49
 ad8:	f0 e0       	ldi	r31, 0x00	; 0
 ada:	10 82       	st	Z, r1
	
	PORTA = PORTA_INITIAL_VALUE;
 adc:	eb e3       	ldi	r30, 0x3B	; 59
 ade:	f0 e0       	ldi	r31, 0x00	; 0
 ae0:	10 82       	st	Z, r1
	PORTB = PORTB_INITIAL_VALUE;
 ae2:	e8 e3       	ldi	r30, 0x38	; 56
 ae4:	f0 e0       	ldi	r31, 0x00	; 0
 ae6:	10 82       	st	Z, r1
	PORTC = PORTC_INITIAL_VALUE;
 ae8:	e5 e3       	ldi	r30, 0x35	; 53
 aea:	f0 e0       	ldi	r31, 0x00	; 0
 aec:	10 82       	st	Z, r1
	PORTD = PORTD_INITIAL_VALUE;
 aee:	e2 e3       	ldi	r30, 0x32	; 50
 af0:	f0 e0       	ldi	r31, 0x00	; 0
 af2:	84 e0       	ldi	r24, 0x04	; 4
 af4:	80 83       	st	Z, r24


}
 af6:	cf 91       	pop	r28
 af8:	df 91       	pop	r29
 afa:	08 95       	ret

00000afc <main>:
void INT0_ISR(void);
void INT1_ISR(void);


void main(void)
{
 afc:	df 93       	push	r29
 afe:	cf 93       	push	r28
 b00:	cd b7       	in	r28, 0x3d	; 61
 b02:	de b7       	in	r29, 0x3e	; 62
	PORT_VoidInit();
 b04:	0e 94 5d 05 	call	0xaba	; 0xaba <PORT_VoidInit>
	EXTI_VoidInt0Init();
 b08:	0e 94 83 02 	call	0x506	; 0x506 <EXTI_VoidInt0Init>
	EXTI_u8Int0SetCallBack(&INT0_ISR);
 b0c:	83 e9       	ldi	r24, 0x93	; 147
 b0e:	95 e0       	ldi	r25, 0x05	; 5
 b10:	0e 94 51 04 	call	0x8a2	; 0x8a2 <EXTI_u8Int0SetCallBack>

	EXTI_VoidInt1Init();
 b14:	0e 94 9f 02 	call	0x53e	; 0x53e <EXTI_VoidInt1Init>
	EXTI_u8Int1SetCallBack(&INT1_ISR);
 b18:	84 ea       	ldi	r24, 0xA4	; 164
 b1a:	95 e0       	ldi	r25, 0x05	; 5
 b1c:	0e 94 6e 04 	call	0x8dc	; 0x8dc <EXTI_u8Int1SetCallBack>

	GIE_VoidEnable();
 b20:	0e 94 41 05 	call	0xa82	; 0xa82 <GIE_VoidEnable>
 b24:	ff cf       	rjmp	.-2      	; 0xb24 <main+0x28>

00000b26 <INT0_ISR>:
	{

	}
}
void INT0_ISR(void)
{
 b26:	df 93       	push	r29
 b28:	cf 93       	push	r28
 b2a:	cd b7       	in	r28, 0x3d	; 61
 b2c:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN0,DIO_u8PIN_LOW);
 b2e:	82 e0       	ldi	r24, 0x02	; 2
 b30:	60 e0       	ldi	r22, 0x00	; 0
 b32:	40 e0       	ldi	r20, 0x00	; 0
 b34:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN1,DIO_u8PIN_HIGH);
 b38:	82 e0       	ldi	r24, 0x02	; 2
 b3a:	61 e0       	ldi	r22, 0x01	; 1
 b3c:	41 e0       	ldi	r20, 0x01	; 1
 b3e:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_u8SetPinValue>
}
 b42:	cf 91       	pop	r28
 b44:	df 91       	pop	r29
 b46:	08 95       	ret

00000b48 <INT1_ISR>:
void INT1_ISR(void)
{
 b48:	df 93       	push	r29
 b4a:	cf 93       	push	r28
 b4c:	cd b7       	in	r28, 0x3d	; 61
 b4e:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN1,DIO_u8PIN_LOW);
 b50:	82 e0       	ldi	r24, 0x02	; 2
 b52:	61 e0       	ldi	r22, 0x01	; 1
 b54:	40 e0       	ldi	r20, 0x00	; 0
 b56:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN0,DIO_u8PIN_HIGH);
 b5a:	82 e0       	ldi	r24, 0x02	; 2
 b5c:	60 e0       	ldi	r22, 0x00	; 0
 b5e:	41 e0       	ldi	r20, 0x01	; 1
 b60:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_u8SetPinValue>

}
 b64:	cf 91       	pop	r28
 b66:	df 91       	pop	r29
 b68:	08 95       	ret

00000b6a <_exit>:
 b6a:	f8 94       	cli

00000b6c <__stop_program>:
 b6c:	ff cf       	rjmp	.-2      	; 0xb6c <__stop_program>
