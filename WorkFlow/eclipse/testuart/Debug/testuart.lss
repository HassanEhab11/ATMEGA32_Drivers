
testuart.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002be  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000024  00800060  000002be  00000332  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000005b8  00000000  00000000  00000358  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000a83  00000000  00000000  00000910  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee eb       	ldi	r30, 0xBE	; 190
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a4 38       	cpi	r26, 0x84	; 132
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
void UART_init(long USART_BAUDRATE);
unsigned char UART_RxChar();
void UART_TxChar(char ch);
void UART_SendString(char *str);
void main(void)
{
  82:	df 93       	push	r29
  84:	cf 93       	push	r28
  86:	0f 92       	push	r0
  88:	cd b7       	in	r28, 0x3d	; 61
  8a:	de b7       	in	r29, 0x3e	; 62
	char Data_in;
	DDRB = 0xff;		/* make PORT as output port */
  8c:	e7 e3       	ldi	r30, 0x37	; 55
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	8f ef       	ldi	r24, 0xFF	; 255
  92:	80 83       	st	Z, r24
	UART_init(9600);	/* initialize USART with 9600 baud rate */
  94:	60 e8       	ldi	r22, 0x80	; 128
  96:	75 e2       	ldi	r23, 0x25	; 37
  98:	80 e0       	ldi	r24, 0x00	; 0
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	0e 94 79 00 	call	0xf2	; 0xf2 <UART_init>
	LED = 0;
  a0:	e5 e3       	ldi	r30, 0x35	; 53
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	10 82       	st	Z, r1

	while(1)
	{
		Data_in = UART_RxChar();	/* receive data from Bluetooth device*/
  a6:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <UART_RxChar>
  aa:	89 83       	std	Y+1, r24	; 0x01
		if(Data_in =='1')
  ac:	89 81       	ldd	r24, Y+1	; 0x01
  ae:	81 33       	cpi	r24, 0x31	; 49
  b0:	61 f4       	brne	.+24     	; 0xca <main+0x48>
		{
			LED |= (1<<PC0);	/* Turn ON LED */
  b2:	a5 e3       	ldi	r26, 0x35	; 53
  b4:	b0 e0       	ldi	r27, 0x00	; 0
  b6:	e5 e3       	ldi	r30, 0x35	; 53
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	81 60       	ori	r24, 0x01	; 1
  be:	8c 93       	st	X, r24
			UART_SendString("LED_ON");/* send status of LED i.e. LED ON */
  c0:	80 e6       	ldi	r24, 0x60	; 96
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	0e 94 12 01 	call	0x224	; 0x224 <UART_SendString>
  c8:	ee cf       	rjmp	.-36     	; 0xa6 <main+0x24>

		}
		else if(Data_in =='2')
  ca:	89 81       	ldd	r24, Y+1	; 0x01
  cc:	82 33       	cpi	r24, 0x32	; 50
  ce:	61 f4       	brne	.+24     	; 0xe8 <main+0x66>
		{
			LED &= ~(1<<PC0);	/* Turn OFF LED */
  d0:	a5 e3       	ldi	r26, 0x35	; 53
  d2:	b0 e0       	ldi	r27, 0x00	; 0
  d4:	e5 e3       	ldi	r30, 0x35	; 53
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 81       	ld	r24, Z
  da:	8e 7f       	andi	r24, 0xFE	; 254
  dc:	8c 93       	st	X, r24
			UART_SendString("LED_OFF"); /* send status of LED i.e. LED OFF */
  de:	87 e6       	ldi	r24, 0x67	; 103
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	0e 94 12 01 	call	0x224	; 0x224 <UART_SendString>
  e6:	df cf       	rjmp	.-66     	; 0xa6 <main+0x24>
		}
		else
			UART_SendString("Select proper option"); /* send message for selecting proper option */
  e8:	8f e6       	ldi	r24, 0x6F	; 111
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	0e 94 12 01 	call	0x224	; 0x224 <UART_SendString>
  f0:	da cf       	rjmp	.-76     	; 0xa6 <main+0x24>

000000f2 <UART_init>:
	}
}
void UART_init(long USART_BAUDRATE)
{
  f2:	0f 93       	push	r16
  f4:	1f 93       	push	r17
  f6:	df 93       	push	r29
  f8:	cf 93       	push	r28
  fa:	00 d0       	rcall	.+0      	; 0xfc <UART_init+0xa>
  fc:	00 d0       	rcall	.+0      	; 0xfe <UART_init+0xc>
  fe:	cd b7       	in	r28, 0x3d	; 61
 100:	de b7       	in	r29, 0x3e	; 62
 102:	69 83       	std	Y+1, r22	; 0x01
 104:	7a 83       	std	Y+2, r23	; 0x02
 106:	8b 83       	std	Y+3, r24	; 0x03
 108:	9c 83       	std	Y+4, r25	; 0x04
	UCSRB |= (1 << RXEN) | (1 << TXEN);/* Turn on transmission and reception */
 10a:	aa e2       	ldi	r26, 0x2A	; 42
 10c:	b0 e0       	ldi	r27, 0x00	; 0
 10e:	ea e2       	ldi	r30, 0x2A	; 42
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	88 61       	ori	r24, 0x18	; 24
 116:	8c 93       	st	X, r24
	UCSRC |= (1 << URSEL) | (1 << UCSZ0) | (1 << UCSZ1);/* Use 8-bit character sizes */
 118:	a0 e4       	ldi	r26, 0x40	; 64
 11a:	b0 e0       	ldi	r27, 0x00	; 0
 11c:	e0 e4       	ldi	r30, 0x40	; 64
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	80 81       	ld	r24, Z
 122:	86 68       	ori	r24, 0x86	; 134
 124:	8c 93       	st	X, r24
	UBRRL = BAUD_PRESCALE;		/* Load lower 8-bits of the baud rate value */
 126:	09 e2       	ldi	r16, 0x29	; 41
 128:	10 e0       	ldi	r17, 0x00	; 0
 12a:	89 81       	ldd	r24, Y+1	; 0x01
 12c:	9a 81       	ldd	r25, Y+2	; 0x02
 12e:	ab 81       	ldd	r26, Y+3	; 0x03
 130:	bc 81       	ldd	r27, Y+4	; 0x04
 132:	88 0f       	add	r24, r24
 134:	99 1f       	adc	r25, r25
 136:	aa 1f       	adc	r26, r26
 138:	bb 1f       	adc	r27, r27
 13a:	88 0f       	add	r24, r24
 13c:	99 1f       	adc	r25, r25
 13e:	aa 1f       	adc	r26, r26
 140:	bb 1f       	adc	r27, r27
 142:	88 0f       	add	r24, r24
 144:	99 1f       	adc	r25, r25
 146:	aa 1f       	adc	r26, r26
 148:	bb 1f       	adc	r27, r27
 14a:	88 0f       	add	r24, r24
 14c:	99 1f       	adc	r25, r25
 14e:	aa 1f       	adc	r26, r26
 150:	bb 1f       	adc	r27, r27
 152:	9c 01       	movw	r18, r24
 154:	ad 01       	movw	r20, r26
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	92 e1       	ldi	r25, 0x12	; 18
 15a:	aa e7       	ldi	r26, 0x7A	; 122
 15c:	b0 e0       	ldi	r27, 0x00	; 0
 15e:	bc 01       	movw	r22, r24
 160:	cd 01       	movw	r24, r26
 162:	0e 94 3b 01 	call	0x276	; 0x276 <__udivmodsi4>
 166:	da 01       	movw	r26, r20
 168:	c9 01       	movw	r24, r18
 16a:	81 50       	subi	r24, 0x01	; 1
 16c:	f8 01       	movw	r30, r16
 16e:	80 83       	st	Z, r24
	UBRRH = (BAUD_PRESCALE >> 8);	/* Load upper 8-bits*/
 170:	00 e4       	ldi	r16, 0x40	; 64
 172:	10 e0       	ldi	r17, 0x00	; 0
 174:	89 81       	ldd	r24, Y+1	; 0x01
 176:	9a 81       	ldd	r25, Y+2	; 0x02
 178:	ab 81       	ldd	r26, Y+3	; 0x03
 17a:	bc 81       	ldd	r27, Y+4	; 0x04
 17c:	88 0f       	add	r24, r24
 17e:	99 1f       	adc	r25, r25
 180:	aa 1f       	adc	r26, r26
 182:	bb 1f       	adc	r27, r27
 184:	88 0f       	add	r24, r24
 186:	99 1f       	adc	r25, r25
 188:	aa 1f       	adc	r26, r26
 18a:	bb 1f       	adc	r27, r27
 18c:	88 0f       	add	r24, r24
 18e:	99 1f       	adc	r25, r25
 190:	aa 1f       	adc	r26, r26
 192:	bb 1f       	adc	r27, r27
 194:	88 0f       	add	r24, r24
 196:	99 1f       	adc	r25, r25
 198:	aa 1f       	adc	r26, r26
 19a:	bb 1f       	adc	r27, r27
 19c:	9c 01       	movw	r18, r24
 19e:	ad 01       	movw	r20, r26
 1a0:	80 e0       	ldi	r24, 0x00	; 0
 1a2:	92 e1       	ldi	r25, 0x12	; 18
 1a4:	aa e7       	ldi	r26, 0x7A	; 122
 1a6:	b0 e0       	ldi	r27, 0x00	; 0
 1a8:	bc 01       	movw	r22, r24
 1aa:	cd 01       	movw	r24, r26
 1ac:	0e 94 3b 01 	call	0x276	; 0x276 <__udivmodsi4>
 1b0:	da 01       	movw	r26, r20
 1b2:	c9 01       	movw	r24, r18
 1b4:	01 97       	sbiw	r24, 0x01	; 1
 1b6:	a1 09       	sbc	r26, r1
 1b8:	b1 09       	sbc	r27, r1
 1ba:	89 2f       	mov	r24, r25
 1bc:	9a 2f       	mov	r25, r26
 1be:	ab 2f       	mov	r26, r27
 1c0:	bb 27       	eor	r27, r27
 1c2:	f8 01       	movw	r30, r16
 1c4:	80 83       	st	Z, r24
}
 1c6:	0f 90       	pop	r0
 1c8:	0f 90       	pop	r0
 1ca:	0f 90       	pop	r0
 1cc:	0f 90       	pop	r0
 1ce:	cf 91       	pop	r28
 1d0:	df 91       	pop	r29
 1d2:	1f 91       	pop	r17
 1d4:	0f 91       	pop	r16
 1d6:	08 95       	ret

000001d8 <UART_RxChar>:

unsigned char UART_RxChar()
{
 1d8:	df 93       	push	r29
 1da:	cf 93       	push	r28
 1dc:	cd b7       	in	r28, 0x3d	; 61
 1de:	de b7       	in	r29, 0x3e	; 62
	while ((UCSRA & (1 << RXC)) == 0);/* Wait till data is received */
 1e0:	eb e2       	ldi	r30, 0x2B	; 43
 1e2:	f0 e0       	ldi	r31, 0x00	; 0
 1e4:	80 81       	ld	r24, Z
 1e6:	88 23       	and	r24, r24
 1e8:	dc f7       	brge	.-10     	; 0x1e0 <UART_RxChar+0x8>
	return(UDR);			/* Return the byte*/
 1ea:	ec e2       	ldi	r30, 0x2C	; 44
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	80 81       	ld	r24, Z
}
 1f0:	cf 91       	pop	r28
 1f2:	df 91       	pop	r29
 1f4:	08 95       	ret

000001f6 <UART_TxChar>:

void UART_TxChar(char ch)
{
 1f6:	df 93       	push	r29
 1f8:	cf 93       	push	r28
 1fa:	0f 92       	push	r0
 1fc:	cd b7       	in	r28, 0x3d	; 61
 1fe:	de b7       	in	r29, 0x3e	; 62
 200:	89 83       	std	Y+1, r24	; 0x01
	while (! (UCSRA & (1<<UDRE)));	/* Wait for empty transmit buffer*/
 202:	eb e2       	ldi	r30, 0x2B	; 43
 204:	f0 e0       	ldi	r31, 0x00	; 0
 206:	80 81       	ld	r24, Z
 208:	88 2f       	mov	r24, r24
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	80 72       	andi	r24, 0x20	; 32
 20e:	90 70       	andi	r25, 0x00	; 0
 210:	00 97       	sbiw	r24, 0x00	; 0
 212:	b9 f3       	breq	.-18     	; 0x202 <UART_TxChar+0xc>
	UDR = ch ;
 214:	ec e2       	ldi	r30, 0x2C	; 44
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	89 81       	ldd	r24, Y+1	; 0x01
 21a:	80 83       	st	Z, r24
}
 21c:	0f 90       	pop	r0
 21e:	cf 91       	pop	r28
 220:	df 91       	pop	r29
 222:	08 95       	ret

00000224 <UART_SendString>:

void UART_SendString(char *str)
{
 224:	df 93       	push	r29
 226:	cf 93       	push	r28
 228:	00 d0       	rcall	.+0      	; 0x22a <UART_SendString+0x6>
 22a:	0f 92       	push	r0
 22c:	cd b7       	in	r28, 0x3d	; 61
 22e:	de b7       	in	r29, 0x3e	; 62
 230:	9b 83       	std	Y+3, r25	; 0x03
 232:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char j=0;
 234:	19 82       	std	Y+1, r1	; 0x01
 236:	0e c0       	rjmp	.+28     	; 0x254 <UART_SendString+0x30>

	while (str[j]!=0)		/* Send string till null */
	{
		UART_TxChar(str[j]);
 238:	89 81       	ldd	r24, Y+1	; 0x01
 23a:	28 2f       	mov	r18, r24
 23c:	30 e0       	ldi	r19, 0x00	; 0
 23e:	8a 81       	ldd	r24, Y+2	; 0x02
 240:	9b 81       	ldd	r25, Y+3	; 0x03
 242:	fc 01       	movw	r30, r24
 244:	e2 0f       	add	r30, r18
 246:	f3 1f       	adc	r31, r19
 248:	80 81       	ld	r24, Z
 24a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <UART_TxChar>
		j++;
 24e:	89 81       	ldd	r24, Y+1	; 0x01
 250:	8f 5f       	subi	r24, 0xFF	; 255
 252:	89 83       	std	Y+1, r24	; 0x01

void UART_SendString(char *str)
{
	unsigned char j=0;

	while (str[j]!=0)		/* Send string till null */
 254:	89 81       	ldd	r24, Y+1	; 0x01
 256:	28 2f       	mov	r18, r24
 258:	30 e0       	ldi	r19, 0x00	; 0
 25a:	8a 81       	ldd	r24, Y+2	; 0x02
 25c:	9b 81       	ldd	r25, Y+3	; 0x03
 25e:	fc 01       	movw	r30, r24
 260:	e2 0f       	add	r30, r18
 262:	f3 1f       	adc	r31, r19
 264:	80 81       	ld	r24, Z
 266:	88 23       	and	r24, r24
 268:	39 f7       	brne	.-50     	; 0x238 <UART_SendString+0x14>
	{
		UART_TxChar(str[j]);
		j++;
	}
}
 26a:	0f 90       	pop	r0
 26c:	0f 90       	pop	r0
 26e:	0f 90       	pop	r0
 270:	cf 91       	pop	r28
 272:	df 91       	pop	r29
 274:	08 95       	ret

00000276 <__udivmodsi4>:
 276:	a1 e2       	ldi	r26, 0x21	; 33
 278:	1a 2e       	mov	r1, r26
 27a:	aa 1b       	sub	r26, r26
 27c:	bb 1b       	sub	r27, r27
 27e:	fd 01       	movw	r30, r26
 280:	0d c0       	rjmp	.+26     	; 0x29c <__udivmodsi4_ep>

00000282 <__udivmodsi4_loop>:
 282:	aa 1f       	adc	r26, r26
 284:	bb 1f       	adc	r27, r27
 286:	ee 1f       	adc	r30, r30
 288:	ff 1f       	adc	r31, r31
 28a:	a2 17       	cp	r26, r18
 28c:	b3 07       	cpc	r27, r19
 28e:	e4 07       	cpc	r30, r20
 290:	f5 07       	cpc	r31, r21
 292:	20 f0       	brcs	.+8      	; 0x29c <__udivmodsi4_ep>
 294:	a2 1b       	sub	r26, r18
 296:	b3 0b       	sbc	r27, r19
 298:	e4 0b       	sbc	r30, r20
 29a:	f5 0b       	sbc	r31, r21

0000029c <__udivmodsi4_ep>:
 29c:	66 1f       	adc	r22, r22
 29e:	77 1f       	adc	r23, r23
 2a0:	88 1f       	adc	r24, r24
 2a2:	99 1f       	adc	r25, r25
 2a4:	1a 94       	dec	r1
 2a6:	69 f7       	brne	.-38     	; 0x282 <__udivmodsi4_loop>
 2a8:	60 95       	com	r22
 2aa:	70 95       	com	r23
 2ac:	80 95       	com	r24
 2ae:	90 95       	com	r25
 2b0:	9b 01       	movw	r18, r22
 2b2:	ac 01       	movw	r20, r24
 2b4:	bd 01       	movw	r22, r26
 2b6:	cf 01       	movw	r24, r30
 2b8:	08 95       	ret

000002ba <_exit>:
 2ba:	f8 94       	cli

000002bc <__stop_program>:
 2bc:	ff cf       	rjmp	.-2      	; 0x2bc <__stop_program>
