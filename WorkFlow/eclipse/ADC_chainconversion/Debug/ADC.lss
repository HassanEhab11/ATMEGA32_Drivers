
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000232a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  0000232a  000023be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800168  00800168  000024c6  2**0
                  ALLOC
  3 .stab         00001cec  00000000  00000000  000024c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e4f  00000000  00000000  000041b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00005003  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001ef  00000000  00000000  000051a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000228f  00000000  00000000  00005392  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000012bb  00000000  00000000  00007621  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000010d6  00000000  00000000  000088dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  000099b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c6  00000000  00000000  00009b74  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000094a  00000000  00000000  00009e3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a784  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 8e 07 	jmp	0xf1c	; 0xf1c <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b1 e0       	ldi	r27, 0x01	; 1
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	af 36       	cpi	r26, 0x6F	; 111
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	ea e2       	ldi	r30, 0x2A	; 42
      78:	f3 e2       	ldi	r31, 0x23	; 35
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <main>
      8a:	0c 94 93 11 	jmp	0x2326	; 0x2326 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 37 04 	call	0x86e	; 0x86e <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 37 04 	call	0x86e	; 0x86e <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 5c 11 	jmp	0x22b8	; 0x22b8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 78 11 	jmp	0x22f0	; 0x22f0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 68 11 	jmp	0x22d0	; 0x22d0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 af 05 	call	0xb5e	; 0xb5e <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 af 05 	call	0xb5e	; 0xb5e <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 da 04 	call	0x9b4	; 0x9b4 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 84 11 	jmp	0x2308	; 0x2308 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 68 11 	jmp	0x22d0	; 0x22d0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 af 05 	call	0xb5e	; 0xb5e <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 af 05 	call	0xb5e	; 0xb5e <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 da 04 	call	0x9b4	; 0x9b4 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 84 11 	jmp	0x2308	; 0x2308 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 5c 11 	jmp	0x22b8	; 0x22b8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 af 05 	call	0xb5e	; 0xb5e <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 af 05 	call	0xb5e	; 0xb5e <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 da 04 	call	0x9b4	; 0x9b4 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 78 11 	jmp	0x22f0	; 0x22f0 <__epilogue_restores__>

00000632 <__eqsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 68 11 	jmp	0x22d0	; 0x22d0 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 af 05 	call	0xb5e	; 0xb5e <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 af 05 	call	0xb5e	; 0xb5e <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__eqsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__eqsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 27 06 	call	0xc4e	; 0xc4e <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__eqsf2+0x58>
     688:	81 e0       	ldi	r24, 0x01	; 1
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 84 11 	jmp	0x2308	; 0x2308 <__epilogue_restores__+0x18>

00000692 <__gtsf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 68 11 	jmp	0x22d0	; 0x22d0 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 af 05 	call	0xb5e	; 0xb5e <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 af 05 	call	0xb5e	; 0xb5e <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gtsf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gtsf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 27 06 	call	0xc4e	; 0xc4e <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gtsf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 84 11 	jmp	0x2308	; 0x2308 <__epilogue_restores__+0x18>

000006f2 <__gesf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 68 11 	jmp	0x22d0	; 0x22d0 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 af 05 	call	0xb5e	; 0xb5e <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 af 05 	call	0xb5e	; 0xb5e <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__gesf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__gesf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 27 06 	call	0xc4e	; 0xc4e <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__gesf2+0x58>
     748:	8f ef       	ldi	r24, 0xFF	; 255
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 84 11 	jmp	0x2308	; 0x2308 <__epilogue_restores__+0x18>

00000752 <__ltsf2>:
     752:	a8 e1       	ldi	r26, 0x18	; 24
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 68 11 	jmp	0x22d0	; 0x22d0 <__prologue_saves__+0x18>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	2d 83       	std	Y+5, r18	; 0x05
     768:	3e 83       	std	Y+6, r19	; 0x06
     76a:	4f 83       	std	Y+7, r20	; 0x07
     76c:	58 87       	std	Y+8, r21	; 0x08
     76e:	89 e0       	ldi	r24, 0x09	; 9
     770:	e8 2e       	mov	r14, r24
     772:	f1 2c       	mov	r15, r1
     774:	ec 0e       	add	r14, r28
     776:	fd 1e       	adc	r15, r29
     778:	ce 01       	movw	r24, r28
     77a:	01 96       	adiw	r24, 0x01	; 1
     77c:	b7 01       	movw	r22, r14
     77e:	0e 94 af 05 	call	0xb5e	; 0xb5e <__unpack_f>
     782:	8e 01       	movw	r16, r28
     784:	0f 5e       	subi	r16, 0xEF	; 239
     786:	1f 4f       	sbci	r17, 0xFF	; 255
     788:	ce 01       	movw	r24, r28
     78a:	05 96       	adiw	r24, 0x05	; 5
     78c:	b8 01       	movw	r22, r16
     78e:	0e 94 af 05 	call	0xb5e	; 0xb5e <__unpack_f>
     792:	89 85       	ldd	r24, Y+9	; 0x09
     794:	82 30       	cpi	r24, 0x02	; 2
     796:	40 f0       	brcs	.+16     	; 0x7a8 <__ltsf2+0x56>
     798:	89 89       	ldd	r24, Y+17	; 0x11
     79a:	82 30       	cpi	r24, 0x02	; 2
     79c:	28 f0       	brcs	.+10     	; 0x7a8 <__ltsf2+0x56>
     79e:	c7 01       	movw	r24, r14
     7a0:	b8 01       	movw	r22, r16
     7a2:	0e 94 27 06 	call	0xc4e	; 0xc4e <__fpcmp_parts_f>
     7a6:	01 c0       	rjmp	.+2      	; 0x7aa <__ltsf2+0x58>
     7a8:	81 e0       	ldi	r24, 0x01	; 1
     7aa:	68 96       	adiw	r28, 0x18	; 24
     7ac:	e6 e0       	ldi	r30, 0x06	; 6
     7ae:	0c 94 84 11 	jmp	0x2308	; 0x2308 <__epilogue_restores__+0x18>

000007b2 <__floatsisf>:
     7b2:	a8 e0       	ldi	r26, 0x08	; 8
     7b4:	b0 e0       	ldi	r27, 0x00	; 0
     7b6:	ef ed       	ldi	r30, 0xDF	; 223
     7b8:	f3 e0       	ldi	r31, 0x03	; 3
     7ba:	0c 94 65 11 	jmp	0x22ca	; 0x22ca <__prologue_saves__+0x12>
     7be:	9b 01       	movw	r18, r22
     7c0:	ac 01       	movw	r20, r24
     7c2:	83 e0       	ldi	r24, 0x03	; 3
     7c4:	89 83       	std	Y+1, r24	; 0x01
     7c6:	da 01       	movw	r26, r20
     7c8:	c9 01       	movw	r24, r18
     7ca:	88 27       	eor	r24, r24
     7cc:	b7 fd       	sbrc	r27, 7
     7ce:	83 95       	inc	r24
     7d0:	99 27       	eor	r25, r25
     7d2:	aa 27       	eor	r26, r26
     7d4:	bb 27       	eor	r27, r27
     7d6:	b8 2e       	mov	r11, r24
     7d8:	21 15       	cp	r18, r1
     7da:	31 05       	cpc	r19, r1
     7dc:	41 05       	cpc	r20, r1
     7de:	51 05       	cpc	r21, r1
     7e0:	19 f4       	brne	.+6      	; 0x7e8 <__floatsisf+0x36>
     7e2:	82 e0       	ldi	r24, 0x02	; 2
     7e4:	89 83       	std	Y+1, r24	; 0x01
     7e6:	3a c0       	rjmp	.+116    	; 0x85c <__floatsisf+0xaa>
     7e8:	88 23       	and	r24, r24
     7ea:	a9 f0       	breq	.+42     	; 0x816 <__floatsisf+0x64>
     7ec:	20 30       	cpi	r18, 0x00	; 0
     7ee:	80 e0       	ldi	r24, 0x00	; 0
     7f0:	38 07       	cpc	r19, r24
     7f2:	80 e0       	ldi	r24, 0x00	; 0
     7f4:	48 07       	cpc	r20, r24
     7f6:	80 e8       	ldi	r24, 0x80	; 128
     7f8:	58 07       	cpc	r21, r24
     7fa:	29 f4       	brne	.+10     	; 0x806 <__floatsisf+0x54>
     7fc:	60 e0       	ldi	r22, 0x00	; 0
     7fe:	70 e0       	ldi	r23, 0x00	; 0
     800:	80 e0       	ldi	r24, 0x00	; 0
     802:	9f ec       	ldi	r25, 0xCF	; 207
     804:	30 c0       	rjmp	.+96     	; 0x866 <__stack+0x7>
     806:	ee 24       	eor	r14, r14
     808:	ff 24       	eor	r15, r15
     80a:	87 01       	movw	r16, r14
     80c:	e2 1a       	sub	r14, r18
     80e:	f3 0a       	sbc	r15, r19
     810:	04 0b       	sbc	r16, r20
     812:	15 0b       	sbc	r17, r21
     814:	02 c0       	rjmp	.+4      	; 0x81a <__floatsisf+0x68>
     816:	79 01       	movw	r14, r18
     818:	8a 01       	movw	r16, r20
     81a:	8e e1       	ldi	r24, 0x1E	; 30
     81c:	c8 2e       	mov	r12, r24
     81e:	d1 2c       	mov	r13, r1
     820:	dc 82       	std	Y+4, r13	; 0x04
     822:	cb 82       	std	Y+3, r12	; 0x03
     824:	ed 82       	std	Y+5, r14	; 0x05
     826:	fe 82       	std	Y+6, r15	; 0x06
     828:	0f 83       	std	Y+7, r16	; 0x07
     82a:	18 87       	std	Y+8, r17	; 0x08
     82c:	c8 01       	movw	r24, r16
     82e:	b7 01       	movw	r22, r14
     830:	0e 94 8b 04 	call	0x916	; 0x916 <__clzsi2>
     834:	01 97       	sbiw	r24, 0x01	; 1
     836:	18 16       	cp	r1, r24
     838:	19 06       	cpc	r1, r25
     83a:	84 f4       	brge	.+32     	; 0x85c <__floatsisf+0xaa>
     83c:	08 2e       	mov	r0, r24
     83e:	04 c0       	rjmp	.+8      	; 0x848 <__floatsisf+0x96>
     840:	ee 0c       	add	r14, r14
     842:	ff 1c       	adc	r15, r15
     844:	00 1f       	adc	r16, r16
     846:	11 1f       	adc	r17, r17
     848:	0a 94       	dec	r0
     84a:	d2 f7       	brpl	.-12     	; 0x840 <__floatsisf+0x8e>
     84c:	ed 82       	std	Y+5, r14	; 0x05
     84e:	fe 82       	std	Y+6, r15	; 0x06
     850:	0f 83       	std	Y+7, r16	; 0x07
     852:	18 87       	std	Y+8, r17	; 0x08
     854:	c8 1a       	sub	r12, r24
     856:	d9 0a       	sbc	r13, r25
     858:	dc 82       	std	Y+4, r13	; 0x04
     85a:	cb 82       	std	Y+3, r12	; 0x03
     85c:	ba 82       	std	Y+2, r11	; 0x02
     85e:	ce 01       	movw	r24, r28
     860:	01 96       	adiw	r24, 0x01	; 1
     862:	0e 94 da 04 	call	0x9b4	; 0x9b4 <__pack_f>
     866:	28 96       	adiw	r28, 0x08	; 8
     868:	e9 e0       	ldi	r30, 0x09	; 9
     86a:	0c 94 81 11 	jmp	0x2302	; 0x2302 <__epilogue_restores__+0x12>

0000086e <__fixsfsi>:
     86e:	ac e0       	ldi	r26, 0x0C	; 12
     870:	b0 e0       	ldi	r27, 0x00	; 0
     872:	ed e3       	ldi	r30, 0x3D	; 61
     874:	f4 e0       	ldi	r31, 0x04	; 4
     876:	0c 94 6c 11 	jmp	0x22d8	; 0x22d8 <__prologue_saves__+0x20>
     87a:	69 83       	std	Y+1, r22	; 0x01
     87c:	7a 83       	std	Y+2, r23	; 0x02
     87e:	8b 83       	std	Y+3, r24	; 0x03
     880:	9c 83       	std	Y+4, r25	; 0x04
     882:	ce 01       	movw	r24, r28
     884:	01 96       	adiw	r24, 0x01	; 1
     886:	be 01       	movw	r22, r28
     888:	6b 5f       	subi	r22, 0xFB	; 251
     88a:	7f 4f       	sbci	r23, 0xFF	; 255
     88c:	0e 94 af 05 	call	0xb5e	; 0xb5e <__unpack_f>
     890:	8d 81       	ldd	r24, Y+5	; 0x05
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	61 f1       	breq	.+88     	; 0x8ee <__fixsfsi+0x80>
     896:	82 30       	cpi	r24, 0x02	; 2
     898:	50 f1       	brcs	.+84     	; 0x8ee <__fixsfsi+0x80>
     89a:	84 30       	cpi	r24, 0x04	; 4
     89c:	21 f4       	brne	.+8      	; 0x8a6 <__fixsfsi+0x38>
     89e:	8e 81       	ldd	r24, Y+6	; 0x06
     8a0:	88 23       	and	r24, r24
     8a2:	51 f1       	breq	.+84     	; 0x8f8 <__fixsfsi+0x8a>
     8a4:	2e c0       	rjmp	.+92     	; 0x902 <__fixsfsi+0x94>
     8a6:	2f 81       	ldd	r18, Y+7	; 0x07
     8a8:	38 85       	ldd	r19, Y+8	; 0x08
     8aa:	37 fd       	sbrc	r19, 7
     8ac:	20 c0       	rjmp	.+64     	; 0x8ee <__fixsfsi+0x80>
     8ae:	6e 81       	ldd	r22, Y+6	; 0x06
     8b0:	2f 31       	cpi	r18, 0x1F	; 31
     8b2:	31 05       	cpc	r19, r1
     8b4:	1c f0       	brlt	.+6      	; 0x8bc <__fixsfsi+0x4e>
     8b6:	66 23       	and	r22, r22
     8b8:	f9 f0       	breq	.+62     	; 0x8f8 <__fixsfsi+0x8a>
     8ba:	23 c0       	rjmp	.+70     	; 0x902 <__fixsfsi+0x94>
     8bc:	8e e1       	ldi	r24, 0x1E	; 30
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	82 1b       	sub	r24, r18
     8c2:	93 0b       	sbc	r25, r19
     8c4:	29 85       	ldd	r18, Y+9	; 0x09
     8c6:	3a 85       	ldd	r19, Y+10	; 0x0a
     8c8:	4b 85       	ldd	r20, Y+11	; 0x0b
     8ca:	5c 85       	ldd	r21, Y+12	; 0x0c
     8cc:	04 c0       	rjmp	.+8      	; 0x8d6 <__fixsfsi+0x68>
     8ce:	56 95       	lsr	r21
     8d0:	47 95       	ror	r20
     8d2:	37 95       	ror	r19
     8d4:	27 95       	ror	r18
     8d6:	8a 95       	dec	r24
     8d8:	d2 f7       	brpl	.-12     	; 0x8ce <__fixsfsi+0x60>
     8da:	66 23       	and	r22, r22
     8dc:	b1 f0       	breq	.+44     	; 0x90a <__fixsfsi+0x9c>
     8de:	50 95       	com	r21
     8e0:	40 95       	com	r20
     8e2:	30 95       	com	r19
     8e4:	21 95       	neg	r18
     8e6:	3f 4f       	sbci	r19, 0xFF	; 255
     8e8:	4f 4f       	sbci	r20, 0xFF	; 255
     8ea:	5f 4f       	sbci	r21, 0xFF	; 255
     8ec:	0e c0       	rjmp	.+28     	; 0x90a <__fixsfsi+0x9c>
     8ee:	20 e0       	ldi	r18, 0x00	; 0
     8f0:	30 e0       	ldi	r19, 0x00	; 0
     8f2:	40 e0       	ldi	r20, 0x00	; 0
     8f4:	50 e0       	ldi	r21, 0x00	; 0
     8f6:	09 c0       	rjmp	.+18     	; 0x90a <__fixsfsi+0x9c>
     8f8:	2f ef       	ldi	r18, 0xFF	; 255
     8fa:	3f ef       	ldi	r19, 0xFF	; 255
     8fc:	4f ef       	ldi	r20, 0xFF	; 255
     8fe:	5f e7       	ldi	r21, 0x7F	; 127
     900:	04 c0       	rjmp	.+8      	; 0x90a <__fixsfsi+0x9c>
     902:	20 e0       	ldi	r18, 0x00	; 0
     904:	30 e0       	ldi	r19, 0x00	; 0
     906:	40 e0       	ldi	r20, 0x00	; 0
     908:	50 e8       	ldi	r21, 0x80	; 128
     90a:	b9 01       	movw	r22, r18
     90c:	ca 01       	movw	r24, r20
     90e:	2c 96       	adiw	r28, 0x0c	; 12
     910:	e2 e0       	ldi	r30, 0x02	; 2
     912:	0c 94 88 11 	jmp	0x2310	; 0x2310 <__epilogue_restores__+0x20>

00000916 <__clzsi2>:
     916:	ef 92       	push	r14
     918:	ff 92       	push	r15
     91a:	0f 93       	push	r16
     91c:	1f 93       	push	r17
     91e:	7b 01       	movw	r14, r22
     920:	8c 01       	movw	r16, r24
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	e8 16       	cp	r14, r24
     926:	80 e0       	ldi	r24, 0x00	; 0
     928:	f8 06       	cpc	r15, r24
     92a:	81 e0       	ldi	r24, 0x01	; 1
     92c:	08 07       	cpc	r16, r24
     92e:	80 e0       	ldi	r24, 0x00	; 0
     930:	18 07       	cpc	r17, r24
     932:	88 f4       	brcc	.+34     	; 0x956 <__clzsi2+0x40>
     934:	8f ef       	ldi	r24, 0xFF	; 255
     936:	e8 16       	cp	r14, r24
     938:	f1 04       	cpc	r15, r1
     93a:	01 05       	cpc	r16, r1
     93c:	11 05       	cpc	r17, r1
     93e:	31 f0       	breq	.+12     	; 0x94c <__clzsi2+0x36>
     940:	28 f0       	brcs	.+10     	; 0x94c <__clzsi2+0x36>
     942:	88 e0       	ldi	r24, 0x08	; 8
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	a0 e0       	ldi	r26, 0x00	; 0
     948:	b0 e0       	ldi	r27, 0x00	; 0
     94a:	17 c0       	rjmp	.+46     	; 0x97a <__clzsi2+0x64>
     94c:	80 e0       	ldi	r24, 0x00	; 0
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	a0 e0       	ldi	r26, 0x00	; 0
     952:	b0 e0       	ldi	r27, 0x00	; 0
     954:	12 c0       	rjmp	.+36     	; 0x97a <__clzsi2+0x64>
     956:	80 e0       	ldi	r24, 0x00	; 0
     958:	e8 16       	cp	r14, r24
     95a:	80 e0       	ldi	r24, 0x00	; 0
     95c:	f8 06       	cpc	r15, r24
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	08 07       	cpc	r16, r24
     962:	81 e0       	ldi	r24, 0x01	; 1
     964:	18 07       	cpc	r17, r24
     966:	28 f0       	brcs	.+10     	; 0x972 <__clzsi2+0x5c>
     968:	88 e1       	ldi	r24, 0x18	; 24
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	a0 e0       	ldi	r26, 0x00	; 0
     96e:	b0 e0       	ldi	r27, 0x00	; 0
     970:	04 c0       	rjmp	.+8      	; 0x97a <__clzsi2+0x64>
     972:	80 e1       	ldi	r24, 0x10	; 16
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	a0 e0       	ldi	r26, 0x00	; 0
     978:	b0 e0       	ldi	r27, 0x00	; 0
     97a:	20 e2       	ldi	r18, 0x20	; 32
     97c:	30 e0       	ldi	r19, 0x00	; 0
     97e:	40 e0       	ldi	r20, 0x00	; 0
     980:	50 e0       	ldi	r21, 0x00	; 0
     982:	28 1b       	sub	r18, r24
     984:	39 0b       	sbc	r19, r25
     986:	4a 0b       	sbc	r20, r26
     988:	5b 0b       	sbc	r21, r27
     98a:	04 c0       	rjmp	.+8      	; 0x994 <__clzsi2+0x7e>
     98c:	16 95       	lsr	r17
     98e:	07 95       	ror	r16
     990:	f7 94       	ror	r15
     992:	e7 94       	ror	r14
     994:	8a 95       	dec	r24
     996:	d2 f7       	brpl	.-12     	; 0x98c <__clzsi2+0x76>
     998:	f7 01       	movw	r30, r14
     99a:	e8 59       	subi	r30, 0x98	; 152
     99c:	ff 4f       	sbci	r31, 0xFF	; 255
     99e:	80 81       	ld	r24, Z
     9a0:	28 1b       	sub	r18, r24
     9a2:	31 09       	sbc	r19, r1
     9a4:	41 09       	sbc	r20, r1
     9a6:	51 09       	sbc	r21, r1
     9a8:	c9 01       	movw	r24, r18
     9aa:	1f 91       	pop	r17
     9ac:	0f 91       	pop	r16
     9ae:	ff 90       	pop	r15
     9b0:	ef 90       	pop	r14
     9b2:	08 95       	ret

000009b4 <__pack_f>:
     9b4:	df 92       	push	r13
     9b6:	ef 92       	push	r14
     9b8:	ff 92       	push	r15
     9ba:	0f 93       	push	r16
     9bc:	1f 93       	push	r17
     9be:	fc 01       	movw	r30, r24
     9c0:	e4 80       	ldd	r14, Z+4	; 0x04
     9c2:	f5 80       	ldd	r15, Z+5	; 0x05
     9c4:	06 81       	ldd	r16, Z+6	; 0x06
     9c6:	17 81       	ldd	r17, Z+7	; 0x07
     9c8:	d1 80       	ldd	r13, Z+1	; 0x01
     9ca:	80 81       	ld	r24, Z
     9cc:	82 30       	cpi	r24, 0x02	; 2
     9ce:	48 f4       	brcc	.+18     	; 0x9e2 <__pack_f+0x2e>
     9d0:	80 e0       	ldi	r24, 0x00	; 0
     9d2:	90 e0       	ldi	r25, 0x00	; 0
     9d4:	a0 e1       	ldi	r26, 0x10	; 16
     9d6:	b0 e0       	ldi	r27, 0x00	; 0
     9d8:	e8 2a       	or	r14, r24
     9da:	f9 2a       	or	r15, r25
     9dc:	0a 2b       	or	r16, r26
     9de:	1b 2b       	or	r17, r27
     9e0:	a5 c0       	rjmp	.+330    	; 0xb2c <__pack_f+0x178>
     9e2:	84 30       	cpi	r24, 0x04	; 4
     9e4:	09 f4       	brne	.+2      	; 0x9e8 <__pack_f+0x34>
     9e6:	9f c0       	rjmp	.+318    	; 0xb26 <__pack_f+0x172>
     9e8:	82 30       	cpi	r24, 0x02	; 2
     9ea:	21 f4       	brne	.+8      	; 0x9f4 <__pack_f+0x40>
     9ec:	ee 24       	eor	r14, r14
     9ee:	ff 24       	eor	r15, r15
     9f0:	87 01       	movw	r16, r14
     9f2:	05 c0       	rjmp	.+10     	; 0x9fe <__pack_f+0x4a>
     9f4:	e1 14       	cp	r14, r1
     9f6:	f1 04       	cpc	r15, r1
     9f8:	01 05       	cpc	r16, r1
     9fa:	11 05       	cpc	r17, r1
     9fc:	19 f4       	brne	.+6      	; 0xa04 <__pack_f+0x50>
     9fe:	e0 e0       	ldi	r30, 0x00	; 0
     a00:	f0 e0       	ldi	r31, 0x00	; 0
     a02:	96 c0       	rjmp	.+300    	; 0xb30 <__pack_f+0x17c>
     a04:	62 81       	ldd	r22, Z+2	; 0x02
     a06:	73 81       	ldd	r23, Z+3	; 0x03
     a08:	9f ef       	ldi	r25, 0xFF	; 255
     a0a:	62 38       	cpi	r22, 0x82	; 130
     a0c:	79 07       	cpc	r23, r25
     a0e:	0c f0       	brlt	.+2      	; 0xa12 <__pack_f+0x5e>
     a10:	5b c0       	rjmp	.+182    	; 0xac8 <__pack_f+0x114>
     a12:	22 e8       	ldi	r18, 0x82	; 130
     a14:	3f ef       	ldi	r19, 0xFF	; 255
     a16:	26 1b       	sub	r18, r22
     a18:	37 0b       	sbc	r19, r23
     a1a:	2a 31       	cpi	r18, 0x1A	; 26
     a1c:	31 05       	cpc	r19, r1
     a1e:	2c f0       	brlt	.+10     	; 0xa2a <__pack_f+0x76>
     a20:	20 e0       	ldi	r18, 0x00	; 0
     a22:	30 e0       	ldi	r19, 0x00	; 0
     a24:	40 e0       	ldi	r20, 0x00	; 0
     a26:	50 e0       	ldi	r21, 0x00	; 0
     a28:	2a c0       	rjmp	.+84     	; 0xa7e <__pack_f+0xca>
     a2a:	b8 01       	movw	r22, r16
     a2c:	a7 01       	movw	r20, r14
     a2e:	02 2e       	mov	r0, r18
     a30:	04 c0       	rjmp	.+8      	; 0xa3a <__pack_f+0x86>
     a32:	76 95       	lsr	r23
     a34:	67 95       	ror	r22
     a36:	57 95       	ror	r21
     a38:	47 95       	ror	r20
     a3a:	0a 94       	dec	r0
     a3c:	d2 f7       	brpl	.-12     	; 0xa32 <__pack_f+0x7e>
     a3e:	81 e0       	ldi	r24, 0x01	; 1
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	b0 e0       	ldi	r27, 0x00	; 0
     a46:	04 c0       	rjmp	.+8      	; 0xa50 <__pack_f+0x9c>
     a48:	88 0f       	add	r24, r24
     a4a:	99 1f       	adc	r25, r25
     a4c:	aa 1f       	adc	r26, r26
     a4e:	bb 1f       	adc	r27, r27
     a50:	2a 95       	dec	r18
     a52:	d2 f7       	brpl	.-12     	; 0xa48 <__pack_f+0x94>
     a54:	01 97       	sbiw	r24, 0x01	; 1
     a56:	a1 09       	sbc	r26, r1
     a58:	b1 09       	sbc	r27, r1
     a5a:	8e 21       	and	r24, r14
     a5c:	9f 21       	and	r25, r15
     a5e:	a0 23       	and	r26, r16
     a60:	b1 23       	and	r27, r17
     a62:	00 97       	sbiw	r24, 0x00	; 0
     a64:	a1 05       	cpc	r26, r1
     a66:	b1 05       	cpc	r27, r1
     a68:	21 f0       	breq	.+8      	; 0xa72 <__pack_f+0xbe>
     a6a:	81 e0       	ldi	r24, 0x01	; 1
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	9a 01       	movw	r18, r20
     a74:	ab 01       	movw	r20, r22
     a76:	28 2b       	or	r18, r24
     a78:	39 2b       	or	r19, r25
     a7a:	4a 2b       	or	r20, r26
     a7c:	5b 2b       	or	r21, r27
     a7e:	da 01       	movw	r26, r20
     a80:	c9 01       	movw	r24, r18
     a82:	8f 77       	andi	r24, 0x7F	; 127
     a84:	90 70       	andi	r25, 0x00	; 0
     a86:	a0 70       	andi	r26, 0x00	; 0
     a88:	b0 70       	andi	r27, 0x00	; 0
     a8a:	80 34       	cpi	r24, 0x40	; 64
     a8c:	91 05       	cpc	r25, r1
     a8e:	a1 05       	cpc	r26, r1
     a90:	b1 05       	cpc	r27, r1
     a92:	39 f4       	brne	.+14     	; 0xaa2 <__pack_f+0xee>
     a94:	27 ff       	sbrs	r18, 7
     a96:	09 c0       	rjmp	.+18     	; 0xaaa <__pack_f+0xf6>
     a98:	20 5c       	subi	r18, 0xC0	; 192
     a9a:	3f 4f       	sbci	r19, 0xFF	; 255
     a9c:	4f 4f       	sbci	r20, 0xFF	; 255
     a9e:	5f 4f       	sbci	r21, 0xFF	; 255
     aa0:	04 c0       	rjmp	.+8      	; 0xaaa <__pack_f+0xf6>
     aa2:	21 5c       	subi	r18, 0xC1	; 193
     aa4:	3f 4f       	sbci	r19, 0xFF	; 255
     aa6:	4f 4f       	sbci	r20, 0xFF	; 255
     aa8:	5f 4f       	sbci	r21, 0xFF	; 255
     aaa:	e0 e0       	ldi	r30, 0x00	; 0
     aac:	f0 e0       	ldi	r31, 0x00	; 0
     aae:	20 30       	cpi	r18, 0x00	; 0
     ab0:	a0 e0       	ldi	r26, 0x00	; 0
     ab2:	3a 07       	cpc	r19, r26
     ab4:	a0 e0       	ldi	r26, 0x00	; 0
     ab6:	4a 07       	cpc	r20, r26
     ab8:	a0 e4       	ldi	r26, 0x40	; 64
     aba:	5a 07       	cpc	r21, r26
     abc:	10 f0       	brcs	.+4      	; 0xac2 <__pack_f+0x10e>
     abe:	e1 e0       	ldi	r30, 0x01	; 1
     ac0:	f0 e0       	ldi	r31, 0x00	; 0
     ac2:	79 01       	movw	r14, r18
     ac4:	8a 01       	movw	r16, r20
     ac6:	27 c0       	rjmp	.+78     	; 0xb16 <__pack_f+0x162>
     ac8:	60 38       	cpi	r22, 0x80	; 128
     aca:	71 05       	cpc	r23, r1
     acc:	64 f5       	brge	.+88     	; 0xb26 <__pack_f+0x172>
     ace:	fb 01       	movw	r30, r22
     ad0:	e1 58       	subi	r30, 0x81	; 129
     ad2:	ff 4f       	sbci	r31, 0xFF	; 255
     ad4:	d8 01       	movw	r26, r16
     ad6:	c7 01       	movw	r24, r14
     ad8:	8f 77       	andi	r24, 0x7F	; 127
     ada:	90 70       	andi	r25, 0x00	; 0
     adc:	a0 70       	andi	r26, 0x00	; 0
     ade:	b0 70       	andi	r27, 0x00	; 0
     ae0:	80 34       	cpi	r24, 0x40	; 64
     ae2:	91 05       	cpc	r25, r1
     ae4:	a1 05       	cpc	r26, r1
     ae6:	b1 05       	cpc	r27, r1
     ae8:	39 f4       	brne	.+14     	; 0xaf8 <__pack_f+0x144>
     aea:	e7 fe       	sbrs	r14, 7
     aec:	0d c0       	rjmp	.+26     	; 0xb08 <__pack_f+0x154>
     aee:	80 e4       	ldi	r24, 0x40	; 64
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	a0 e0       	ldi	r26, 0x00	; 0
     af4:	b0 e0       	ldi	r27, 0x00	; 0
     af6:	04 c0       	rjmp	.+8      	; 0xb00 <__pack_f+0x14c>
     af8:	8f e3       	ldi	r24, 0x3F	; 63
     afa:	90 e0       	ldi	r25, 0x00	; 0
     afc:	a0 e0       	ldi	r26, 0x00	; 0
     afe:	b0 e0       	ldi	r27, 0x00	; 0
     b00:	e8 0e       	add	r14, r24
     b02:	f9 1e       	adc	r15, r25
     b04:	0a 1f       	adc	r16, r26
     b06:	1b 1f       	adc	r17, r27
     b08:	17 ff       	sbrs	r17, 7
     b0a:	05 c0       	rjmp	.+10     	; 0xb16 <__pack_f+0x162>
     b0c:	16 95       	lsr	r17
     b0e:	07 95       	ror	r16
     b10:	f7 94       	ror	r15
     b12:	e7 94       	ror	r14
     b14:	31 96       	adiw	r30, 0x01	; 1
     b16:	87 e0       	ldi	r24, 0x07	; 7
     b18:	16 95       	lsr	r17
     b1a:	07 95       	ror	r16
     b1c:	f7 94       	ror	r15
     b1e:	e7 94       	ror	r14
     b20:	8a 95       	dec	r24
     b22:	d1 f7       	brne	.-12     	; 0xb18 <__pack_f+0x164>
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__pack_f+0x17c>
     b26:	ee 24       	eor	r14, r14
     b28:	ff 24       	eor	r15, r15
     b2a:	87 01       	movw	r16, r14
     b2c:	ef ef       	ldi	r30, 0xFF	; 255
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	6e 2f       	mov	r22, r30
     b32:	67 95       	ror	r22
     b34:	66 27       	eor	r22, r22
     b36:	67 95       	ror	r22
     b38:	90 2f       	mov	r25, r16
     b3a:	9f 77       	andi	r25, 0x7F	; 127
     b3c:	d7 94       	ror	r13
     b3e:	dd 24       	eor	r13, r13
     b40:	d7 94       	ror	r13
     b42:	8e 2f       	mov	r24, r30
     b44:	86 95       	lsr	r24
     b46:	49 2f       	mov	r20, r25
     b48:	46 2b       	or	r20, r22
     b4a:	58 2f       	mov	r21, r24
     b4c:	5d 29       	or	r21, r13
     b4e:	b7 01       	movw	r22, r14
     b50:	ca 01       	movw	r24, r20
     b52:	1f 91       	pop	r17
     b54:	0f 91       	pop	r16
     b56:	ff 90       	pop	r15
     b58:	ef 90       	pop	r14
     b5a:	df 90       	pop	r13
     b5c:	08 95       	ret

00000b5e <__unpack_f>:
     b5e:	fc 01       	movw	r30, r24
     b60:	db 01       	movw	r26, r22
     b62:	40 81       	ld	r20, Z
     b64:	51 81       	ldd	r21, Z+1	; 0x01
     b66:	22 81       	ldd	r18, Z+2	; 0x02
     b68:	62 2f       	mov	r22, r18
     b6a:	6f 77       	andi	r22, 0x7F	; 127
     b6c:	70 e0       	ldi	r23, 0x00	; 0
     b6e:	22 1f       	adc	r18, r18
     b70:	22 27       	eor	r18, r18
     b72:	22 1f       	adc	r18, r18
     b74:	93 81       	ldd	r25, Z+3	; 0x03
     b76:	89 2f       	mov	r24, r25
     b78:	88 0f       	add	r24, r24
     b7a:	82 2b       	or	r24, r18
     b7c:	28 2f       	mov	r18, r24
     b7e:	30 e0       	ldi	r19, 0x00	; 0
     b80:	99 1f       	adc	r25, r25
     b82:	99 27       	eor	r25, r25
     b84:	99 1f       	adc	r25, r25
     b86:	11 96       	adiw	r26, 0x01	; 1
     b88:	9c 93       	st	X, r25
     b8a:	11 97       	sbiw	r26, 0x01	; 1
     b8c:	21 15       	cp	r18, r1
     b8e:	31 05       	cpc	r19, r1
     b90:	a9 f5       	brne	.+106    	; 0xbfc <__unpack_f+0x9e>
     b92:	41 15       	cp	r20, r1
     b94:	51 05       	cpc	r21, r1
     b96:	61 05       	cpc	r22, r1
     b98:	71 05       	cpc	r23, r1
     b9a:	11 f4       	brne	.+4      	; 0xba0 <__unpack_f+0x42>
     b9c:	82 e0       	ldi	r24, 0x02	; 2
     b9e:	37 c0       	rjmp	.+110    	; 0xc0e <__unpack_f+0xb0>
     ba0:	82 e8       	ldi	r24, 0x82	; 130
     ba2:	9f ef       	ldi	r25, 0xFF	; 255
     ba4:	13 96       	adiw	r26, 0x03	; 3
     ba6:	9c 93       	st	X, r25
     ba8:	8e 93       	st	-X, r24
     baa:	12 97       	sbiw	r26, 0x02	; 2
     bac:	9a 01       	movw	r18, r20
     bae:	ab 01       	movw	r20, r22
     bb0:	67 e0       	ldi	r22, 0x07	; 7
     bb2:	22 0f       	add	r18, r18
     bb4:	33 1f       	adc	r19, r19
     bb6:	44 1f       	adc	r20, r20
     bb8:	55 1f       	adc	r21, r21
     bba:	6a 95       	dec	r22
     bbc:	d1 f7       	brne	.-12     	; 0xbb2 <__unpack_f+0x54>
     bbe:	83 e0       	ldi	r24, 0x03	; 3
     bc0:	8c 93       	st	X, r24
     bc2:	0d c0       	rjmp	.+26     	; 0xbde <__unpack_f+0x80>
     bc4:	22 0f       	add	r18, r18
     bc6:	33 1f       	adc	r19, r19
     bc8:	44 1f       	adc	r20, r20
     bca:	55 1f       	adc	r21, r21
     bcc:	12 96       	adiw	r26, 0x02	; 2
     bce:	8d 91       	ld	r24, X+
     bd0:	9c 91       	ld	r25, X
     bd2:	13 97       	sbiw	r26, 0x03	; 3
     bd4:	01 97       	sbiw	r24, 0x01	; 1
     bd6:	13 96       	adiw	r26, 0x03	; 3
     bd8:	9c 93       	st	X, r25
     bda:	8e 93       	st	-X, r24
     bdc:	12 97       	sbiw	r26, 0x02	; 2
     bde:	20 30       	cpi	r18, 0x00	; 0
     be0:	80 e0       	ldi	r24, 0x00	; 0
     be2:	38 07       	cpc	r19, r24
     be4:	80 e0       	ldi	r24, 0x00	; 0
     be6:	48 07       	cpc	r20, r24
     be8:	80 e4       	ldi	r24, 0x40	; 64
     bea:	58 07       	cpc	r21, r24
     bec:	58 f3       	brcs	.-42     	; 0xbc4 <__unpack_f+0x66>
     bee:	14 96       	adiw	r26, 0x04	; 4
     bf0:	2d 93       	st	X+, r18
     bf2:	3d 93       	st	X+, r19
     bf4:	4d 93       	st	X+, r20
     bf6:	5c 93       	st	X, r21
     bf8:	17 97       	sbiw	r26, 0x07	; 7
     bfa:	08 95       	ret
     bfc:	2f 3f       	cpi	r18, 0xFF	; 255
     bfe:	31 05       	cpc	r19, r1
     c00:	79 f4       	brne	.+30     	; 0xc20 <__unpack_f+0xc2>
     c02:	41 15       	cp	r20, r1
     c04:	51 05       	cpc	r21, r1
     c06:	61 05       	cpc	r22, r1
     c08:	71 05       	cpc	r23, r1
     c0a:	19 f4       	brne	.+6      	; 0xc12 <__unpack_f+0xb4>
     c0c:	84 e0       	ldi	r24, 0x04	; 4
     c0e:	8c 93       	st	X, r24
     c10:	08 95       	ret
     c12:	64 ff       	sbrs	r22, 4
     c14:	03 c0       	rjmp	.+6      	; 0xc1c <__unpack_f+0xbe>
     c16:	81 e0       	ldi	r24, 0x01	; 1
     c18:	8c 93       	st	X, r24
     c1a:	12 c0       	rjmp	.+36     	; 0xc40 <__unpack_f+0xe2>
     c1c:	1c 92       	st	X, r1
     c1e:	10 c0       	rjmp	.+32     	; 0xc40 <__unpack_f+0xe2>
     c20:	2f 57       	subi	r18, 0x7F	; 127
     c22:	30 40       	sbci	r19, 0x00	; 0
     c24:	13 96       	adiw	r26, 0x03	; 3
     c26:	3c 93       	st	X, r19
     c28:	2e 93       	st	-X, r18
     c2a:	12 97       	sbiw	r26, 0x02	; 2
     c2c:	83 e0       	ldi	r24, 0x03	; 3
     c2e:	8c 93       	st	X, r24
     c30:	87 e0       	ldi	r24, 0x07	; 7
     c32:	44 0f       	add	r20, r20
     c34:	55 1f       	adc	r21, r21
     c36:	66 1f       	adc	r22, r22
     c38:	77 1f       	adc	r23, r23
     c3a:	8a 95       	dec	r24
     c3c:	d1 f7       	brne	.-12     	; 0xc32 <__unpack_f+0xd4>
     c3e:	70 64       	ori	r23, 0x40	; 64
     c40:	14 96       	adiw	r26, 0x04	; 4
     c42:	4d 93       	st	X+, r20
     c44:	5d 93       	st	X+, r21
     c46:	6d 93       	st	X+, r22
     c48:	7c 93       	st	X, r23
     c4a:	17 97       	sbiw	r26, 0x07	; 7
     c4c:	08 95       	ret

00000c4e <__fpcmp_parts_f>:
     c4e:	1f 93       	push	r17
     c50:	dc 01       	movw	r26, r24
     c52:	fb 01       	movw	r30, r22
     c54:	9c 91       	ld	r25, X
     c56:	92 30       	cpi	r25, 0x02	; 2
     c58:	08 f4       	brcc	.+2      	; 0xc5c <__fpcmp_parts_f+0xe>
     c5a:	47 c0       	rjmp	.+142    	; 0xcea <__fpcmp_parts_f+0x9c>
     c5c:	80 81       	ld	r24, Z
     c5e:	82 30       	cpi	r24, 0x02	; 2
     c60:	08 f4       	brcc	.+2      	; 0xc64 <__fpcmp_parts_f+0x16>
     c62:	43 c0       	rjmp	.+134    	; 0xcea <__fpcmp_parts_f+0x9c>
     c64:	94 30       	cpi	r25, 0x04	; 4
     c66:	51 f4       	brne	.+20     	; 0xc7c <__fpcmp_parts_f+0x2e>
     c68:	11 96       	adiw	r26, 0x01	; 1
     c6a:	1c 91       	ld	r17, X
     c6c:	84 30       	cpi	r24, 0x04	; 4
     c6e:	99 f5       	brne	.+102    	; 0xcd6 <__fpcmp_parts_f+0x88>
     c70:	81 81       	ldd	r24, Z+1	; 0x01
     c72:	68 2f       	mov	r22, r24
     c74:	70 e0       	ldi	r23, 0x00	; 0
     c76:	61 1b       	sub	r22, r17
     c78:	71 09       	sbc	r23, r1
     c7a:	3f c0       	rjmp	.+126    	; 0xcfa <__fpcmp_parts_f+0xac>
     c7c:	84 30       	cpi	r24, 0x04	; 4
     c7e:	21 f0       	breq	.+8      	; 0xc88 <__fpcmp_parts_f+0x3a>
     c80:	92 30       	cpi	r25, 0x02	; 2
     c82:	31 f4       	brne	.+12     	; 0xc90 <__fpcmp_parts_f+0x42>
     c84:	82 30       	cpi	r24, 0x02	; 2
     c86:	b9 f1       	breq	.+110    	; 0xcf6 <__fpcmp_parts_f+0xa8>
     c88:	81 81       	ldd	r24, Z+1	; 0x01
     c8a:	88 23       	and	r24, r24
     c8c:	89 f1       	breq	.+98     	; 0xcf0 <__fpcmp_parts_f+0xa2>
     c8e:	2d c0       	rjmp	.+90     	; 0xcea <__fpcmp_parts_f+0x9c>
     c90:	11 96       	adiw	r26, 0x01	; 1
     c92:	1c 91       	ld	r17, X
     c94:	11 97       	sbiw	r26, 0x01	; 1
     c96:	82 30       	cpi	r24, 0x02	; 2
     c98:	f1 f0       	breq	.+60     	; 0xcd6 <__fpcmp_parts_f+0x88>
     c9a:	81 81       	ldd	r24, Z+1	; 0x01
     c9c:	18 17       	cp	r17, r24
     c9e:	d9 f4       	brne	.+54     	; 0xcd6 <__fpcmp_parts_f+0x88>
     ca0:	12 96       	adiw	r26, 0x02	; 2
     ca2:	2d 91       	ld	r18, X+
     ca4:	3c 91       	ld	r19, X
     ca6:	13 97       	sbiw	r26, 0x03	; 3
     ca8:	82 81       	ldd	r24, Z+2	; 0x02
     caa:	93 81       	ldd	r25, Z+3	; 0x03
     cac:	82 17       	cp	r24, r18
     cae:	93 07       	cpc	r25, r19
     cb0:	94 f0       	brlt	.+36     	; 0xcd6 <__fpcmp_parts_f+0x88>
     cb2:	28 17       	cp	r18, r24
     cb4:	39 07       	cpc	r19, r25
     cb6:	bc f0       	brlt	.+46     	; 0xce6 <__fpcmp_parts_f+0x98>
     cb8:	14 96       	adiw	r26, 0x04	; 4
     cba:	8d 91       	ld	r24, X+
     cbc:	9d 91       	ld	r25, X+
     cbe:	0d 90       	ld	r0, X+
     cc0:	bc 91       	ld	r27, X
     cc2:	a0 2d       	mov	r26, r0
     cc4:	24 81       	ldd	r18, Z+4	; 0x04
     cc6:	35 81       	ldd	r19, Z+5	; 0x05
     cc8:	46 81       	ldd	r20, Z+6	; 0x06
     cca:	57 81       	ldd	r21, Z+7	; 0x07
     ccc:	28 17       	cp	r18, r24
     cce:	39 07       	cpc	r19, r25
     cd0:	4a 07       	cpc	r20, r26
     cd2:	5b 07       	cpc	r21, r27
     cd4:	18 f4       	brcc	.+6      	; 0xcdc <__fpcmp_parts_f+0x8e>
     cd6:	11 23       	and	r17, r17
     cd8:	41 f0       	breq	.+16     	; 0xcea <__fpcmp_parts_f+0x9c>
     cda:	0a c0       	rjmp	.+20     	; 0xcf0 <__fpcmp_parts_f+0xa2>
     cdc:	82 17       	cp	r24, r18
     cde:	93 07       	cpc	r25, r19
     ce0:	a4 07       	cpc	r26, r20
     ce2:	b5 07       	cpc	r27, r21
     ce4:	40 f4       	brcc	.+16     	; 0xcf6 <__fpcmp_parts_f+0xa8>
     ce6:	11 23       	and	r17, r17
     ce8:	19 f0       	breq	.+6      	; 0xcf0 <__fpcmp_parts_f+0xa2>
     cea:	61 e0       	ldi	r22, 0x01	; 1
     cec:	70 e0       	ldi	r23, 0x00	; 0
     cee:	05 c0       	rjmp	.+10     	; 0xcfa <__fpcmp_parts_f+0xac>
     cf0:	6f ef       	ldi	r22, 0xFF	; 255
     cf2:	7f ef       	ldi	r23, 0xFF	; 255
     cf4:	02 c0       	rjmp	.+4      	; 0xcfa <__fpcmp_parts_f+0xac>
     cf6:	60 e0       	ldi	r22, 0x00	; 0
     cf8:	70 e0       	ldi	r23, 0x00	; 0
     cfa:	cb 01       	movw	r24, r22
     cfc:	1f 91       	pop	r17
     cfe:	08 95       	ret

00000d00 <ADC_voidInit>:
static u16* ADC_pu16Reading = NULL;
static void (*ADC_pvCallBackNotificationFunc)(void) = NULL;
u8 ADC_u8BusyState = IDLE;

void ADC_voidInit(void)
{
     d00:	df 93       	push	r29
     d02:	cf 93       	push	r28
     d04:	cd b7       	in	r28, 0x3d	; 61
     d06:	de b7       	in	r29, 0x3e	; 62
	/* reference voltage */
	ADMUX &= ADC_VOLT_REF_SELEC_MASK;
     d08:	a7 e2       	ldi	r26, 0x27	; 39
     d0a:	b0 e0       	ldi	r27, 0x00	; 0
     d0c:	e7 e2       	ldi	r30, 0x27	; 39
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	80 81       	ld	r24, Z
     d12:	8f 73       	andi	r24, 0x3F	; 63
     d14:	8c 93       	st	X, r24
	ADMUX |= ADC_VOLT_REF_SELEC;
     d16:	a7 e2       	ldi	r26, 0x27	; 39
     d18:	b0 e0       	ldi	r27, 0x00	; 0
     d1a:	e7 e2       	ldi	r30, 0x27	; 39
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	80 81       	ld	r24, Z
     d20:	80 64       	ori	r24, 0x40	; 64
     d22:	8c 93       	st	X, r24

	/* Activate Data Register */
	ADMUX &= ADC_Data_Register_MASK;
     d24:	a7 e2       	ldi	r26, 0x27	; 39
     d26:	b0 e0       	ldi	r27, 0x00	; 0
     d28:	e7 e2       	ldi	r30, 0x27	; 39
     d2a:	f0 e0       	ldi	r31, 0x00	; 0
     d2c:	80 81       	ld	r24, Z
     d2e:	8f 7d       	andi	r24, 0xDF	; 223
     d30:	8c 93       	st	X, r24
	ADMUX |= ADC_Data_Register;
     d32:	a7 e2       	ldi	r26, 0x27	; 39
     d34:	b0 e0       	ldi	r27, 0x00	; 0
     d36:	e7 e2       	ldi	r30, 0x27	; 39
     d38:	f0 e0       	ldi	r31, 0x00	; 0
     d3a:	80 81       	ld	r24, Z
     d3c:	80 62       	ori	r24, 0x20	; 32
     d3e:	8c 93       	st	X, r24
	//SET_BIT(ADMUX,ADMUX_ADLAR);

	/* Prescaler Selection */
	ADCSRA &= ADC_PRESC_MASK;
     d40:	a6 e2       	ldi	r26, 0x26	; 38
     d42:	b0 e0       	ldi	r27, 0x00	; 0
     d44:	e6 e2       	ldi	r30, 0x26	; 38
     d46:	f0 e0       	ldi	r31, 0x00	; 0
     d48:	80 81       	ld	r24, Z
     d4a:	88 7f       	andi	r24, 0xF8	; 248
     d4c:	8c 93       	st	X, r24
	ADCSRA |= ADC_PRESC_SELEC;
     d4e:	a6 e2       	ldi	r26, 0x26	; 38
     d50:	b0 e0       	ldi	r27, 0x00	; 0
     d52:	e6 e2       	ldi	r30, 0x26	; 38
     d54:	f0 e0       	ldi	r31, 0x00	; 0
     d56:	80 81       	ld	r24, Z
     d58:	87 60       	ori	r24, 0x07	; 7
     d5a:	8c 93       	st	X, r24

	/* Enable peripheral*/
	SET_BIT(ADCSRA,ADCSRA_ADEN);
     d5c:	a6 e2       	ldi	r26, 0x26	; 38
     d5e:	b0 e0       	ldi	r27, 0x00	; 0
     d60:	e6 e2       	ldi	r30, 0x26	; 38
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	80 81       	ld	r24, Z
     d66:	80 68       	ori	r24, 0x80	; 128
     d68:	8c 93       	st	X, r24
	SFIOR |= ADC_Auto_Trigger_Source;

#endif


}
     d6a:	cf 91       	pop	r28
     d6c:	df 91       	pop	r29
     d6e:	08 95       	ret

00000d70 <ADC_u8StartConversionSynch>:
u8 ADC_u8StartConversionSynch(u8 Copy_u8Channel, u16* Copy_pu16Reading)
{
     d70:	df 93       	push	r29
     d72:	cf 93       	push	r28
     d74:	cd b7       	in	r28, 0x3d	; 61
     d76:	de b7       	in	r29, 0x3e	; 62
     d78:	28 97       	sbiw	r28, 0x08	; 8
     d7a:	0f b6       	in	r0, 0x3f	; 63
     d7c:	f8 94       	cli
     d7e:	de bf       	out	0x3e, r29	; 62
     d80:	0f be       	out	0x3f, r0	; 63
     d82:	cd bf       	out	0x3d, r28	; 61
     d84:	8e 83       	std	Y+6, r24	; 0x06
     d86:	78 87       	std	Y+8, r23	; 0x08
     d88:	6f 83       	std	Y+7, r22	; 0x07
	u32 Local_u32Counter = 0;
     d8a:	1a 82       	std	Y+2, r1	; 0x02
     d8c:	1b 82       	std	Y+3, r1	; 0x03
     d8e:	1c 82       	std	Y+4, r1	; 0x04
     d90:	1d 82       	std	Y+5, r1	; 0x05
	u8 Local_u8ErrorState = OK;
     d92:	19 82       	std	Y+1, r1	; 0x01
	if(ADC_u8BusyState == IDLE)
     d94:	80 91 6c 01 	lds	r24, 0x016C
     d98:	88 23       	and	r24, r24
     d9a:	09 f0       	breq	.+2      	; 0xd9e <ADC_u8StartConversionSynch+0x2e>
     d9c:	5e c0       	rjmp	.+188    	; 0xe5a <ADC_u8StartConversionSynch+0xea>
	{
		/* ADC is now busy*/
		ADC_u8BusyState = BUSY;
     d9e:	81 e0       	ldi	r24, 0x01	; 1
     da0:	80 93 6c 01 	sts	0x016C, r24

		ADMUX &= ADC_SELEC_CHANNEL_MASK; 	/* Clear the MUX bits in ADMUX register*/
     da4:	a7 e2       	ldi	r26, 0x27	; 39
     da6:	b0 e0       	ldi	r27, 0x00	; 0
     da8:	e7 e2       	ldi	r30, 0x27	; 39
     daa:	f0 e0       	ldi	r31, 0x00	; 0
     dac:	80 81       	ld	r24, Z
     dae:	80 7e       	andi	r24, 0xE0	; 224
     db0:	8c 93       	st	X, r24
		ADMUX |= Copy_u8Channel;           /*Set the required channel into the MUX bits*/
     db2:	a7 e2       	ldi	r26, 0x27	; 39
     db4:	b0 e0       	ldi	r27, 0x00	; 0
     db6:	e7 e2       	ldi	r30, 0x27	; 39
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	90 81       	ld	r25, Z
     dbc:	8e 81       	ldd	r24, Y+6	; 0x06
     dbe:	89 2b       	or	r24, r25
     dc0:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADCSRA_ADSC);      /* Start Conversion */
     dc2:	a6 e2       	ldi	r26, 0x26	; 38
     dc4:	b0 e0       	ldi	r27, 0x00	; 0
     dc6:	e6 e2       	ldi	r30, 0x26	; 38
     dc8:	f0 e0       	ldi	r31, 0x00	; 0
     dca:	80 81       	ld	r24, Z
     dcc:	80 64       	ori	r24, 0x40	; 64
     dce:	8c 93       	st	X, r24
     dd0:	0b c0       	rjmp	.+22     	; 0xde8 <ADC_u8StartConversionSynch+0x78>
#if ADC_Conversion_Mode == ADC_Single_Conv_Mode

		/* Polling (Busy Waiting) until the conversion complete flag is set or counter reaching timeout value */
		while(((GET_BIT(ADCSRA,ADCSRA_ADIF))==0) && (Local_u32Counter != ADC_u32TIMEOUT))
		{
			Local_u32Counter++;
     dd2:	8a 81       	ldd	r24, Y+2	; 0x02
     dd4:	9b 81       	ldd	r25, Y+3	; 0x03
     dd6:	ac 81       	ldd	r26, Y+4	; 0x04
     dd8:	bd 81       	ldd	r27, Y+5	; 0x05
     dda:	01 96       	adiw	r24, 0x01	; 1
     ddc:	a1 1d       	adc	r26, r1
     dde:	b1 1d       	adc	r27, r1
     de0:	8a 83       	std	Y+2, r24	; 0x02
     de2:	9b 83       	std	Y+3, r25	; 0x03
     de4:	ac 83       	std	Y+4, r26	; 0x04
     de6:	bd 83       	std	Y+5, r27	; 0x05


#if ADC_Conversion_Mode == ADC_Single_Conv_Mode

		/* Polling (Busy Waiting) until the conversion complete flag is set or counter reaching timeout value */
		while(((GET_BIT(ADCSRA,ADCSRA_ADIF))==0) && (Local_u32Counter != ADC_u32TIMEOUT))
     de8:	e6 e2       	ldi	r30, 0x26	; 38
     dea:	f0 e0       	ldi	r31, 0x00	; 0
     dec:	80 81       	ld	r24, Z
     dee:	82 95       	swap	r24
     df0:	8f 70       	andi	r24, 0x0F	; 15
     df2:	88 2f       	mov	r24, r24
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	81 70       	andi	r24, 0x01	; 1
     df8:	90 70       	andi	r25, 0x00	; 0
     dfa:	00 97       	sbiw	r24, 0x00	; 0
     dfc:	61 f4       	brne	.+24     	; 0xe16 <ADC_u8StartConversionSynch+0xa6>
     dfe:	8a 81       	ldd	r24, Y+2	; 0x02
     e00:	9b 81       	ldd	r25, Y+3	; 0x03
     e02:	ac 81       	ldd	r26, Y+4	; 0x04
     e04:	bd 81       	ldd	r27, Y+5	; 0x05
     e06:	80 35       	cpi	r24, 0x50	; 80
     e08:	23 ec       	ldi	r18, 0xC3	; 195
     e0a:	92 07       	cpc	r25, r18
     e0c:	20 e0       	ldi	r18, 0x00	; 0
     e0e:	a2 07       	cpc	r26, r18
     e10:	20 e0       	ldi	r18, 0x00	; 0
     e12:	b2 07       	cpc	r27, r18
     e14:	f1 f6       	brne	.-68     	; 0xdd2 <ADC_u8StartConversionSynch+0x62>
		{
			Local_u32Counter++;
		}

		if (Local_u32Counter == ADC_u32TIMEOUT)
     e16:	8a 81       	ldd	r24, Y+2	; 0x02
     e18:	9b 81       	ldd	r25, Y+3	; 0x03
     e1a:	ac 81       	ldd	r26, Y+4	; 0x04
     e1c:	bd 81       	ldd	r27, Y+5	; 0x05
     e1e:	80 35       	cpi	r24, 0x50	; 80
     e20:	23 ec       	ldi	r18, 0xC3	; 195
     e22:	92 07       	cpc	r25, r18
     e24:	20 e0       	ldi	r18, 0x00	; 0
     e26:	a2 07       	cpc	r26, r18
     e28:	20 e0       	ldi	r18, 0x00	; 0
     e2a:	b2 07       	cpc	r27, r18
     e2c:	19 f4       	brne	.+6      	; 0xe34 <ADC_u8StartConversionSynch+0xc4>
		{
			/* Loop is broken because the time out is reached */
			Local_u8ErrorState = NOK;
     e2e:	81 e0       	ldi	r24, 0x01	; 1
     e30:	89 83       	std	Y+1, r24	; 0x01
     e32:	07 c0       	rjmp	.+14     	; 0xe42 <ADC_u8StartConversionSynch+0xd2>
		}
		else
		{
			/* Loop is broken because flag is raised */
			/* Clear the conversion complete flag*/
			SET_BIT(ADCSRA,ADCSRA_ADIF);
     e34:	a6 e2       	ldi	r26, 0x26	; 38
     e36:	b0 e0       	ldi	r27, 0x00	; 0
     e38:	e6 e2       	ldi	r30, 0x26	; 38
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	80 81       	ld	r24, Z
     e3e:	80 61       	ori	r24, 0x10	; 16
     e40:	8c 93       	st	X, r24


#endif
		/* Return the reading*/
#if   NO_OF_BITS == _8_BITS
		*Copy_pu16Reading = ADCH;
     e42:	e5 e2       	ldi	r30, 0x25	; 37
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	80 81       	ld	r24, Z
     e48:	88 2f       	mov	r24, r24
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	ef 81       	ldd	r30, Y+7	; 0x07
     e4e:	f8 85       	ldd	r31, Y+8	; 0x08
     e50:	91 83       	std	Z+1, r25	; 0x01
     e52:	80 83       	st	Z, r24
#elif NO_OF_BITS == _10_BITS
		*Copy_pu16Reading =  ADC;
#endif

		/* ADC is finished return it to IDLE */
		ADC_u8BusyState = IDLE;
     e54:	10 92 6c 01 	sts	0x016C, r1
     e58:	02 c0       	rjmp	.+4      	; 0xe5e <ADC_u8StartConversionSynch+0xee>
	}
	else
	{
		Local_u8ErrorState = BUSY_FUNC;
     e5a:	83 e0       	ldi	r24, 0x03	; 3
     e5c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
     e5e:	89 81       	ldd	r24, Y+1	; 0x01


}
     e60:	28 96       	adiw	r28, 0x08	; 8
     e62:	0f b6       	in	r0, 0x3f	; 63
     e64:	f8 94       	cli
     e66:	de bf       	out	0x3e, r29	; 62
     e68:	0f be       	out	0x3f, r0	; 63
     e6a:	cd bf       	out	0x3d, r28	; 61
     e6c:	cf 91       	pop	r28
     e6e:	df 91       	pop	r29
     e70:	08 95       	ret

00000e72 <ADC_u8StartConversionAsynch>:

u8 ADC_u8StartConversionAsynch(u8 Copy_u8Channel, u16* Copy_pu16Reading, void (*Copy_pvNotificationFun)(void))
{
     e72:	df 93       	push	r29
     e74:	cf 93       	push	r28
     e76:	00 d0       	rcall	.+0      	; 0xe78 <ADC_u8StartConversionAsynch+0x6>
     e78:	00 d0       	rcall	.+0      	; 0xe7a <ADC_u8StartConversionAsynch+0x8>
     e7a:	00 d0       	rcall	.+0      	; 0xe7c <ADC_u8StartConversionAsynch+0xa>
     e7c:	cd b7       	in	r28, 0x3d	; 61
     e7e:	de b7       	in	r29, 0x3e	; 62
     e80:	8a 83       	std	Y+2, r24	; 0x02
     e82:	7c 83       	std	Y+4, r23	; 0x04
     e84:	6b 83       	std	Y+3, r22	; 0x03
     e86:	5e 83       	std	Y+6, r21	; 0x06
     e88:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = OK;
     e8a:	19 82       	std	Y+1, r1	; 0x01

	if(ADC_u8BusyState == IDLE )
     e8c:	80 91 6c 01 	lds	r24, 0x016C
     e90:	88 23       	and	r24, r24
     e92:	c1 f5       	brne	.+112    	; 0xf04 <ADC_u8StartConversionAsynch+0x92>
	{


		if((Copy_pu16Reading == NULL) || (Copy_pvNotificationFun == NULL))
     e94:	8b 81       	ldd	r24, Y+3	; 0x03
     e96:	9c 81       	ldd	r25, Y+4	; 0x04
     e98:	00 97       	sbiw	r24, 0x00	; 0
     e9a:	21 f0       	breq	.+8      	; 0xea4 <ADC_u8StartConversionAsynch+0x32>
     e9c:	8d 81       	ldd	r24, Y+5	; 0x05
     e9e:	9e 81       	ldd	r25, Y+6	; 0x06
     ea0:	00 97       	sbiw	r24, 0x00	; 0
     ea2:	19 f4       	brne	.+6      	; 0xeaa <ADC_u8StartConversionAsynch+0x38>
		{
			Local_u8ErrorState = NULL_POINTER;
     ea4:	82 e0       	ldi	r24, 0x02	; 2
     ea6:	89 83       	std	Y+1, r24	; 0x01
     ea8:	2f c0       	rjmp	.+94     	; 0xf08 <ADC_u8StartConversionAsynch+0x96>
		}
		else
		{
			ADC_u8BusyState = BUSY;  /* make ADC BUSY in order not  work until being idle  */
     eaa:	81 e0       	ldi	r24, 0x01	; 1
     eac:	80 93 6c 01 	sts	0x016C, r24
			ADC_pu16Reading = Copy_pu16Reading;  /* Initialize the reading variable globally */
     eb0:	8b 81       	ldd	r24, Y+3	; 0x03
     eb2:	9c 81       	ldd	r25, Y+4	; 0x04
     eb4:	90 93 69 01 	sts	0x0169, r25
     eb8:	80 93 68 01 	sts	0x0168, r24
			ADC_pvCallBackNotificationFunc = Copy_pvNotificationFun; /* Initialize the callback notification function globally */
     ebc:	8d 81       	ldd	r24, Y+5	; 0x05
     ebe:	9e 81       	ldd	r25, Y+6	; 0x06
     ec0:	90 93 6b 01 	sts	0x016B, r25
     ec4:	80 93 6a 01 	sts	0x016A, r24

			ADMUX &= ADC_SELEC_CHANNEL_MASK; 	/* Clear the MUX bits in ADMUX register*/
     ec8:	a7 e2       	ldi	r26, 0x27	; 39
     eca:	b0 e0       	ldi	r27, 0x00	; 0
     ecc:	e7 e2       	ldi	r30, 0x27	; 39
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	80 81       	ld	r24, Z
     ed2:	80 7e       	andi	r24, 0xE0	; 224
     ed4:	8c 93       	st	X, r24
			ADMUX |= Copy_u8Channel;           /*Set the required channel into the MUX bits*/
     ed6:	a7 e2       	ldi	r26, 0x27	; 39
     ed8:	b0 e0       	ldi	r27, 0x00	; 0
     eda:	e7 e2       	ldi	r30, 0x27	; 39
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	90 81       	ld	r25, Z
     ee0:	8a 81       	ldd	r24, Y+2	; 0x02
     ee2:	89 2b       	or	r24, r25
     ee4:	8c 93       	st	X, r24
			SET_BIT(ADCSRA,ADCSRA_ADSC);      /* Start Conversion */
     ee6:	a6 e2       	ldi	r26, 0x26	; 38
     ee8:	b0 e0       	ldi	r27, 0x00	; 0
     eea:	e6 e2       	ldi	r30, 0x26	; 38
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	80 81       	ld	r24, Z
     ef0:	80 64       	ori	r24, 0x40	; 64
     ef2:	8c 93       	st	X, r24
			SET_BIT(ADCSRA,ADCSRA_ADIE);     /* Enable INT for ADC  */
     ef4:	a6 e2       	ldi	r26, 0x26	; 38
     ef6:	b0 e0       	ldi	r27, 0x00	; 0
     ef8:	e6 e2       	ldi	r30, 0x26	; 38
     efa:	f0 e0       	ldi	r31, 0x00	; 0
     efc:	80 81       	ld	r24, Z
     efe:	88 60       	ori	r24, 0x08	; 8
     f00:	8c 93       	st	X, r24
     f02:	02 c0       	rjmp	.+4      	; 0xf08 <ADC_u8StartConversionAsynch+0x96>

		}
	}
	else
	{
		Local_u8ErrorState = BUSY_FUNC;
     f04:	83 e0       	ldi	r24, 0x03	; 3
     f06:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
     f08:	89 81       	ldd	r24, Y+1	; 0x01
}
     f0a:	26 96       	adiw	r28, 0x06	; 6
     f0c:	0f b6       	in	r0, 0x3f	; 63
     f0e:	f8 94       	cli
     f10:	de bf       	out	0x3e, r29	; 62
     f12:	0f be       	out	0x3f, r0	; 63
     f14:	cd bf       	out	0x3d, r28	; 61
     f16:	cf 91       	pop	r28
     f18:	df 91       	pop	r29
     f1a:	08 95       	ret

00000f1c <__vector_16>:

void __vector_16 (void) __attribute__((signal));
void __vector_16 (void)
{
     f1c:	1f 92       	push	r1
     f1e:	0f 92       	push	r0
     f20:	0f b6       	in	r0, 0x3f	; 63
     f22:	0f 92       	push	r0
     f24:	11 24       	eor	r1, r1
     f26:	2f 93       	push	r18
     f28:	3f 93       	push	r19
     f2a:	4f 93       	push	r20
     f2c:	5f 93       	push	r21
     f2e:	6f 93       	push	r22
     f30:	7f 93       	push	r23
     f32:	8f 93       	push	r24
     f34:	9f 93       	push	r25
     f36:	af 93       	push	r26
     f38:	bf 93       	push	r27
     f3a:	ef 93       	push	r30
     f3c:	ff 93       	push	r31
     f3e:	df 93       	push	r29
     f40:	cf 93       	push	r28
     f42:	cd b7       	in	r28, 0x3d	; 61
     f44:	de b7       	in	r29, 0x3e	; 62
	/* Read ADC Result */
#if   NO_OF_BITS == _8_BITS
	*ADC_pu16Reading = ADCH;
     f46:	a0 91 68 01 	lds	r26, 0x0168
     f4a:	b0 91 69 01 	lds	r27, 0x0169
     f4e:	e5 e2       	ldi	r30, 0x25	; 37
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	80 81       	ld	r24, Z
     f54:	88 2f       	mov	r24, r24
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	8d 93       	st	X+, r24
     f5a:	9c 93       	st	X, r25
#elif NO_OF_BITS == _10_BITS
	*ADC_pu16Reading =  ADC;
#endif
	/* Make ADC state be IDLE because it finished*/
	ADC_u8BusyState = IDLE;
     f5c:	10 92 6c 01 	sts	0x016C, r1

	/* Invoke the callback notification function */
	ADC_pvCallBackNotificationFunc();
     f60:	e0 91 6a 01 	lds	r30, 0x016A
     f64:	f0 91 6b 01 	lds	r31, 0x016B
     f68:	09 95       	icall

	/* Disable ADC Conversion complete interrupt */
	CLR_BIT(ADCSRA,ADCSRA_ADIE);
     f6a:	a6 e2       	ldi	r26, 0x26	; 38
     f6c:	b0 e0       	ldi	r27, 0x00	; 0
     f6e:	e6 e2       	ldi	r30, 0x26	; 38
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	80 81       	ld	r24, Z
     f74:	87 7f       	andi	r24, 0xF7	; 247
     f76:	8c 93       	st	X, r24

}
     f78:	cf 91       	pop	r28
     f7a:	df 91       	pop	r29
     f7c:	ff 91       	pop	r31
     f7e:	ef 91       	pop	r30
     f80:	bf 91       	pop	r27
     f82:	af 91       	pop	r26
     f84:	9f 91       	pop	r25
     f86:	8f 91       	pop	r24
     f88:	7f 91       	pop	r23
     f8a:	6f 91       	pop	r22
     f8c:	5f 91       	pop	r21
     f8e:	4f 91       	pop	r20
     f90:	3f 91       	pop	r19
     f92:	2f 91       	pop	r18
     f94:	0f 90       	pop	r0
     f96:	0f be       	out	0x3f, r0	; 63
     f98:	0f 90       	pop	r0
     f9a:	1f 90       	pop	r1
     f9c:	18 95       	reti

00000f9e <C_LCD_voidSendCommand>:

#include "CLCD_private.h"


void C_LCD_voidSendCommand(u8 Copy_u8Command)
{
     f9e:	1f 93       	push	r17
     fa0:	df 93       	push	r29
     fa2:	cf 93       	push	r28
     fa4:	cd b7       	in	r28, 0x3d	; 61
     fa6:	de b7       	in	r29, 0x3e	; 62
     fa8:	ea 97       	sbiw	r28, 0x3a	; 58
     faa:	0f b6       	in	r0, 0x3f	; 63
     fac:	f8 94       	cli
     fae:	de bf       	out	0x3e, r29	; 62
     fb0:	0f be       	out	0x3f, r0	; 63
     fb2:	cd bf       	out	0x3d, r28	; 61
     fb4:	8a af       	std	Y+58, r24	; 0x3a
	/*Set RS Pin to low to send command */
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_LOW);
     fb6:	80 e0       	ldi	r24, 0x00	; 0
     fb8:	61 e0       	ldi	r22, 0x01	; 1
     fba:	40 e0       	ldi	r20, 0x00	; 0
     fbc:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <DIO_u8SetPinValue>
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);

#elif   MODE_SELECT ==_4_BIT_MODE

	u8 Local_u8Command = (((Copy_u8Command >> 1) & 0b01111000) | DIO_u8AndWithPort(CLCD_DATA_PORT, 0b10000111));
     fc0:	8a ad       	ldd	r24, Y+58	; 0x3a
     fc2:	86 95       	lsr	r24
     fc4:	18 2f       	mov	r17, r24
     fc6:	18 77       	andi	r17, 0x78	; 120
     fc8:	80 e0       	ldi	r24, 0x00	; 0
     fca:	67 e8       	ldi	r22, 0x87	; 135
     fcc:	0e 94 70 10 	call	0x20e0	; 0x20e0 <DIO_u8AndWithPort>
     fd0:	81 2b       	or	r24, r17
     fd2:	89 af       	std	Y+57, r24	; 0x39
	/* Set Command to data pins */
	DIO_u8SetPortValue(CLCD_DATA_PORT,Local_u8Command);
     fd4:	80 e0       	ldi	r24, 0x00	; 0
     fd6:	69 ad       	ldd	r22, Y+57	; 0x39
     fd8:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <DIO_u8SetPortValue>

	/*Send Enable pulse */
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
     fdc:	80 e0       	ldi	r24, 0x00	; 0
     fde:	62 e0       	ldi	r22, 0x02	; 2
     fe0:	41 e0       	ldi	r20, 0x01	; 1
     fe2:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <DIO_u8SetPinValue>
     fe6:	80 e0       	ldi	r24, 0x00	; 0
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	a0 e0       	ldi	r26, 0x00	; 0
     fec:	b0 e4       	ldi	r27, 0x40	; 64
     fee:	8d ab       	std	Y+53, r24	; 0x35
     ff0:	9e ab       	std	Y+54, r25	; 0x36
     ff2:	af ab       	std	Y+55, r26	; 0x37
     ff4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ff6:	6d a9       	ldd	r22, Y+53	; 0x35
     ff8:	7e a9       	ldd	r23, Y+54	; 0x36
     ffa:	8f a9       	ldd	r24, Y+55	; 0x37
     ffc:	98 ad       	ldd	r25, Y+56	; 0x38
     ffe:	20 e0       	ldi	r18, 0x00	; 0
    1000:	30 e0       	ldi	r19, 0x00	; 0
    1002:	4a ef       	ldi	r20, 0xFA	; 250
    1004:	54 e4       	ldi	r21, 0x44	; 68
    1006:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    100a:	dc 01       	movw	r26, r24
    100c:	cb 01       	movw	r24, r22
    100e:	89 ab       	std	Y+49, r24	; 0x31
    1010:	9a ab       	std	Y+50, r25	; 0x32
    1012:	ab ab       	std	Y+51, r26	; 0x33
    1014:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1016:	69 a9       	ldd	r22, Y+49	; 0x31
    1018:	7a a9       	ldd	r23, Y+50	; 0x32
    101a:	8b a9       	ldd	r24, Y+51	; 0x33
    101c:	9c a9       	ldd	r25, Y+52	; 0x34
    101e:	20 e0       	ldi	r18, 0x00	; 0
    1020:	30 e0       	ldi	r19, 0x00	; 0
    1022:	40 e8       	ldi	r20, 0x80	; 128
    1024:	5f e3       	ldi	r21, 0x3F	; 63
    1026:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    102a:	88 23       	and	r24, r24
    102c:	2c f4       	brge	.+10     	; 0x1038 <C_LCD_voidSendCommand+0x9a>
		__ticks = 1;
    102e:	81 e0       	ldi	r24, 0x01	; 1
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	98 ab       	std	Y+48, r25	; 0x30
    1034:	8f a7       	std	Y+47, r24	; 0x2f
    1036:	3f c0       	rjmp	.+126    	; 0x10b6 <C_LCD_voidSendCommand+0x118>
	else if (__tmp > 65535)
    1038:	69 a9       	ldd	r22, Y+49	; 0x31
    103a:	7a a9       	ldd	r23, Y+50	; 0x32
    103c:	8b a9       	ldd	r24, Y+51	; 0x33
    103e:	9c a9       	ldd	r25, Y+52	; 0x34
    1040:	20 e0       	ldi	r18, 0x00	; 0
    1042:	3f ef       	ldi	r19, 0xFF	; 255
    1044:	4f e7       	ldi	r20, 0x7F	; 127
    1046:	57 e4       	ldi	r21, 0x47	; 71
    1048:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    104c:	18 16       	cp	r1, r24
    104e:	4c f5       	brge	.+82     	; 0x10a2 <C_LCD_voidSendCommand+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1050:	6d a9       	ldd	r22, Y+53	; 0x35
    1052:	7e a9       	ldd	r23, Y+54	; 0x36
    1054:	8f a9       	ldd	r24, Y+55	; 0x37
    1056:	98 ad       	ldd	r25, Y+56	; 0x38
    1058:	20 e0       	ldi	r18, 0x00	; 0
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	40 e2       	ldi	r20, 0x20	; 32
    105e:	51 e4       	ldi	r21, 0x41	; 65
    1060:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1064:	dc 01       	movw	r26, r24
    1066:	cb 01       	movw	r24, r22
    1068:	bc 01       	movw	r22, r24
    106a:	cd 01       	movw	r24, r26
    106c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1070:	dc 01       	movw	r26, r24
    1072:	cb 01       	movw	r24, r22
    1074:	98 ab       	std	Y+48, r25	; 0x30
    1076:	8f a7       	std	Y+47, r24	; 0x2f
    1078:	0f c0       	rjmp	.+30     	; 0x1098 <C_LCD_voidSendCommand+0xfa>
    107a:	88 ec       	ldi	r24, 0xC8	; 200
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	9e a7       	std	Y+46, r25	; 0x2e
    1080:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1082:	8d a5       	ldd	r24, Y+45	; 0x2d
    1084:	9e a5       	ldd	r25, Y+46	; 0x2e
    1086:	01 97       	sbiw	r24, 0x01	; 1
    1088:	f1 f7       	brne	.-4      	; 0x1086 <C_LCD_voidSendCommand+0xe8>
    108a:	9e a7       	std	Y+46, r25	; 0x2e
    108c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    108e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1090:	98 a9       	ldd	r25, Y+48	; 0x30
    1092:	01 97       	sbiw	r24, 0x01	; 1
    1094:	98 ab       	std	Y+48, r25	; 0x30
    1096:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1098:	8f a5       	ldd	r24, Y+47	; 0x2f
    109a:	98 a9       	ldd	r25, Y+48	; 0x30
    109c:	00 97       	sbiw	r24, 0x00	; 0
    109e:	69 f7       	brne	.-38     	; 0x107a <C_LCD_voidSendCommand+0xdc>
    10a0:	14 c0       	rjmp	.+40     	; 0x10ca <C_LCD_voidSendCommand+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10a2:	69 a9       	ldd	r22, Y+49	; 0x31
    10a4:	7a a9       	ldd	r23, Y+50	; 0x32
    10a6:	8b a9       	ldd	r24, Y+51	; 0x33
    10a8:	9c a9       	ldd	r25, Y+52	; 0x34
    10aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10ae:	dc 01       	movw	r26, r24
    10b0:	cb 01       	movw	r24, r22
    10b2:	98 ab       	std	Y+48, r25	; 0x30
    10b4:	8f a7       	std	Y+47, r24	; 0x2f
    10b6:	8f a5       	ldd	r24, Y+47	; 0x2f
    10b8:	98 a9       	ldd	r25, Y+48	; 0x30
    10ba:	9c a7       	std	Y+44, r25	; 0x2c
    10bc:	8b a7       	std	Y+43, r24	; 0x2b
    10be:	8b a5       	ldd	r24, Y+43	; 0x2b
    10c0:	9c a5       	ldd	r25, Y+44	; 0x2c
    10c2:	01 97       	sbiw	r24, 0x01	; 1
    10c4:	f1 f7       	brne	.-4      	; 0x10c2 <C_LCD_voidSendCommand+0x124>
    10c6:	9c a7       	std	Y+44, r25	; 0x2c
    10c8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    10ca:	80 e0       	ldi	r24, 0x00	; 0
    10cc:	62 e0       	ldi	r22, 0x02	; 2
    10ce:	40 e0       	ldi	r20, 0x00	; 0
    10d0:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <DIO_u8SetPinValue>
    10d4:	80 e0       	ldi	r24, 0x00	; 0
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	a0 ea       	ldi	r26, 0xA0	; 160
    10da:	b0 e4       	ldi	r27, 0x40	; 64
    10dc:	8f a3       	std	Y+39, r24	; 0x27
    10de:	98 a7       	std	Y+40, r25	; 0x28
    10e0:	a9 a7       	std	Y+41, r26	; 0x29
    10e2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10e4:	6f a1       	ldd	r22, Y+39	; 0x27
    10e6:	78 a5       	ldd	r23, Y+40	; 0x28
    10e8:	89 a5       	ldd	r24, Y+41	; 0x29
    10ea:	9a a5       	ldd	r25, Y+42	; 0x2a
    10ec:	20 e0       	ldi	r18, 0x00	; 0
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	4a ef       	ldi	r20, 0xFA	; 250
    10f2:	54 e4       	ldi	r21, 0x44	; 68
    10f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10f8:	dc 01       	movw	r26, r24
    10fa:	cb 01       	movw	r24, r22
    10fc:	8b a3       	std	Y+35, r24	; 0x23
    10fe:	9c a3       	std	Y+36, r25	; 0x24
    1100:	ad a3       	std	Y+37, r26	; 0x25
    1102:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1104:	6b a1       	ldd	r22, Y+35	; 0x23
    1106:	7c a1       	ldd	r23, Y+36	; 0x24
    1108:	8d a1       	ldd	r24, Y+37	; 0x25
    110a:	9e a1       	ldd	r25, Y+38	; 0x26
    110c:	20 e0       	ldi	r18, 0x00	; 0
    110e:	30 e0       	ldi	r19, 0x00	; 0
    1110:	40 e8       	ldi	r20, 0x80	; 128
    1112:	5f e3       	ldi	r21, 0x3F	; 63
    1114:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    1118:	88 23       	and	r24, r24
    111a:	2c f4       	brge	.+10     	; 0x1126 <C_LCD_voidSendCommand+0x188>
		__ticks = 1;
    111c:	81 e0       	ldi	r24, 0x01	; 1
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	9a a3       	std	Y+34, r25	; 0x22
    1122:	89 a3       	std	Y+33, r24	; 0x21
    1124:	3f c0       	rjmp	.+126    	; 0x11a4 <C_LCD_voidSendCommand+0x206>
	else if (__tmp > 65535)
    1126:	6b a1       	ldd	r22, Y+35	; 0x23
    1128:	7c a1       	ldd	r23, Y+36	; 0x24
    112a:	8d a1       	ldd	r24, Y+37	; 0x25
    112c:	9e a1       	ldd	r25, Y+38	; 0x26
    112e:	20 e0       	ldi	r18, 0x00	; 0
    1130:	3f ef       	ldi	r19, 0xFF	; 255
    1132:	4f e7       	ldi	r20, 0x7F	; 127
    1134:	57 e4       	ldi	r21, 0x47	; 71
    1136:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    113a:	18 16       	cp	r1, r24
    113c:	4c f5       	brge	.+82     	; 0x1190 <C_LCD_voidSendCommand+0x1f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    113e:	6f a1       	ldd	r22, Y+39	; 0x27
    1140:	78 a5       	ldd	r23, Y+40	; 0x28
    1142:	89 a5       	ldd	r24, Y+41	; 0x29
    1144:	9a a5       	ldd	r25, Y+42	; 0x2a
    1146:	20 e0       	ldi	r18, 0x00	; 0
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	40 e2       	ldi	r20, 0x20	; 32
    114c:	51 e4       	ldi	r21, 0x41	; 65
    114e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1152:	dc 01       	movw	r26, r24
    1154:	cb 01       	movw	r24, r22
    1156:	bc 01       	movw	r22, r24
    1158:	cd 01       	movw	r24, r26
    115a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    115e:	dc 01       	movw	r26, r24
    1160:	cb 01       	movw	r24, r22
    1162:	9a a3       	std	Y+34, r25	; 0x22
    1164:	89 a3       	std	Y+33, r24	; 0x21
    1166:	0f c0       	rjmp	.+30     	; 0x1186 <C_LCD_voidSendCommand+0x1e8>
    1168:	88 ec       	ldi	r24, 0xC8	; 200
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	98 a3       	std	Y+32, r25	; 0x20
    116e:	8f 8f       	std	Y+31, r24	; 0x1f
    1170:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1172:	98 a1       	ldd	r25, Y+32	; 0x20
    1174:	01 97       	sbiw	r24, 0x01	; 1
    1176:	f1 f7       	brne	.-4      	; 0x1174 <C_LCD_voidSendCommand+0x1d6>
    1178:	98 a3       	std	Y+32, r25	; 0x20
    117a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    117c:	89 a1       	ldd	r24, Y+33	; 0x21
    117e:	9a a1       	ldd	r25, Y+34	; 0x22
    1180:	01 97       	sbiw	r24, 0x01	; 1
    1182:	9a a3       	std	Y+34, r25	; 0x22
    1184:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1186:	89 a1       	ldd	r24, Y+33	; 0x21
    1188:	9a a1       	ldd	r25, Y+34	; 0x22
    118a:	00 97       	sbiw	r24, 0x00	; 0
    118c:	69 f7       	brne	.-38     	; 0x1168 <C_LCD_voidSendCommand+0x1ca>
    118e:	14 c0       	rjmp	.+40     	; 0x11b8 <C_LCD_voidSendCommand+0x21a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1190:	6b a1       	ldd	r22, Y+35	; 0x23
    1192:	7c a1       	ldd	r23, Y+36	; 0x24
    1194:	8d a1       	ldd	r24, Y+37	; 0x25
    1196:	9e a1       	ldd	r25, Y+38	; 0x26
    1198:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    119c:	dc 01       	movw	r26, r24
    119e:	cb 01       	movw	r24, r22
    11a0:	9a a3       	std	Y+34, r25	; 0x22
    11a2:	89 a3       	std	Y+33, r24	; 0x21
    11a4:	89 a1       	ldd	r24, Y+33	; 0x21
    11a6:	9a a1       	ldd	r25, Y+34	; 0x22
    11a8:	9e 8f       	std	Y+30, r25	; 0x1e
    11aa:	8d 8f       	std	Y+29, r24	; 0x1d
    11ac:	8d 8d       	ldd	r24, Y+29	; 0x1d
    11ae:	9e 8d       	ldd	r25, Y+30	; 0x1e
    11b0:	01 97       	sbiw	r24, 0x01	; 1
    11b2:	f1 f7       	brne	.-4      	; 0x11b0 <C_LCD_voidSendCommand+0x212>
    11b4:	9e 8f       	std	Y+30, r25	; 0x1e
    11b6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);

	Local_u8Command = ((Copy_u8Command <<3) |DIO_u8AndWithPort(CLCD_DATA_PORT, 0b10000111));
    11b8:	8a ad       	ldd	r24, Y+58	; 0x3a
    11ba:	88 2f       	mov	r24, r24
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	88 0f       	add	r24, r24
    11c0:	99 1f       	adc	r25, r25
    11c2:	88 0f       	add	r24, r24
    11c4:	99 1f       	adc	r25, r25
    11c6:	88 0f       	add	r24, r24
    11c8:	99 1f       	adc	r25, r25
    11ca:	18 2f       	mov	r17, r24
    11cc:	80 e0       	ldi	r24, 0x00	; 0
    11ce:	67 e8       	ldi	r22, 0x87	; 135
    11d0:	0e 94 70 10 	call	0x20e0	; 0x20e0 <DIO_u8AndWithPort>
    11d4:	81 2b       	or	r24, r17
    11d6:	89 af       	std	Y+57, r24	; 0x39
	DIO_u8SetPortValue(CLCD_DATA_PORT,Local_u8Command);
    11d8:	80 e0       	ldi	r24, 0x00	; 0
    11da:	69 ad       	ldd	r22, Y+57	; 0x39
    11dc:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <DIO_u8SetPortValue>

	/*Send Enable pulse */
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    11e0:	80 e0       	ldi	r24, 0x00	; 0
    11e2:	62 e0       	ldi	r22, 0x02	; 2
    11e4:	41 e0       	ldi	r20, 0x01	; 1
    11e6:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <DIO_u8SetPinValue>
    11ea:	80 e0       	ldi	r24, 0x00	; 0
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	a0 e0       	ldi	r26, 0x00	; 0
    11f0:	b0 e4       	ldi	r27, 0x40	; 64
    11f2:	89 8f       	std	Y+25, r24	; 0x19
    11f4:	9a 8f       	std	Y+26, r25	; 0x1a
    11f6:	ab 8f       	std	Y+27, r26	; 0x1b
    11f8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11fa:	69 8d       	ldd	r22, Y+25	; 0x19
    11fc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    11fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1200:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1202:	20 e0       	ldi	r18, 0x00	; 0
    1204:	30 e0       	ldi	r19, 0x00	; 0
    1206:	4a ef       	ldi	r20, 0xFA	; 250
    1208:	54 e4       	ldi	r21, 0x44	; 68
    120a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    120e:	dc 01       	movw	r26, r24
    1210:	cb 01       	movw	r24, r22
    1212:	8d 8b       	std	Y+21, r24	; 0x15
    1214:	9e 8b       	std	Y+22, r25	; 0x16
    1216:	af 8b       	std	Y+23, r26	; 0x17
    1218:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    121a:	6d 89       	ldd	r22, Y+21	; 0x15
    121c:	7e 89       	ldd	r23, Y+22	; 0x16
    121e:	8f 89       	ldd	r24, Y+23	; 0x17
    1220:	98 8d       	ldd	r25, Y+24	; 0x18
    1222:	20 e0       	ldi	r18, 0x00	; 0
    1224:	30 e0       	ldi	r19, 0x00	; 0
    1226:	40 e8       	ldi	r20, 0x80	; 128
    1228:	5f e3       	ldi	r21, 0x3F	; 63
    122a:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    122e:	88 23       	and	r24, r24
    1230:	2c f4       	brge	.+10     	; 0x123c <C_LCD_voidSendCommand+0x29e>
		__ticks = 1;
    1232:	81 e0       	ldi	r24, 0x01	; 1
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	9c 8b       	std	Y+20, r25	; 0x14
    1238:	8b 8b       	std	Y+19, r24	; 0x13
    123a:	3f c0       	rjmp	.+126    	; 0x12ba <C_LCD_voidSendCommand+0x31c>
	else if (__tmp > 65535)
    123c:	6d 89       	ldd	r22, Y+21	; 0x15
    123e:	7e 89       	ldd	r23, Y+22	; 0x16
    1240:	8f 89       	ldd	r24, Y+23	; 0x17
    1242:	98 8d       	ldd	r25, Y+24	; 0x18
    1244:	20 e0       	ldi	r18, 0x00	; 0
    1246:	3f ef       	ldi	r19, 0xFF	; 255
    1248:	4f e7       	ldi	r20, 0x7F	; 127
    124a:	57 e4       	ldi	r21, 0x47	; 71
    124c:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    1250:	18 16       	cp	r1, r24
    1252:	4c f5       	brge	.+82     	; 0x12a6 <C_LCD_voidSendCommand+0x308>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1254:	69 8d       	ldd	r22, Y+25	; 0x19
    1256:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1258:	8b 8d       	ldd	r24, Y+27	; 0x1b
    125a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    125c:	20 e0       	ldi	r18, 0x00	; 0
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	40 e2       	ldi	r20, 0x20	; 32
    1262:	51 e4       	ldi	r21, 0x41	; 65
    1264:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1268:	dc 01       	movw	r26, r24
    126a:	cb 01       	movw	r24, r22
    126c:	bc 01       	movw	r22, r24
    126e:	cd 01       	movw	r24, r26
    1270:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1274:	dc 01       	movw	r26, r24
    1276:	cb 01       	movw	r24, r22
    1278:	9c 8b       	std	Y+20, r25	; 0x14
    127a:	8b 8b       	std	Y+19, r24	; 0x13
    127c:	0f c0       	rjmp	.+30     	; 0x129c <C_LCD_voidSendCommand+0x2fe>
    127e:	88 ec       	ldi	r24, 0xC8	; 200
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	9a 8b       	std	Y+18, r25	; 0x12
    1284:	89 8b       	std	Y+17, r24	; 0x11
    1286:	89 89       	ldd	r24, Y+17	; 0x11
    1288:	9a 89       	ldd	r25, Y+18	; 0x12
    128a:	01 97       	sbiw	r24, 0x01	; 1
    128c:	f1 f7       	brne	.-4      	; 0x128a <C_LCD_voidSendCommand+0x2ec>
    128e:	9a 8b       	std	Y+18, r25	; 0x12
    1290:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1292:	8b 89       	ldd	r24, Y+19	; 0x13
    1294:	9c 89       	ldd	r25, Y+20	; 0x14
    1296:	01 97       	sbiw	r24, 0x01	; 1
    1298:	9c 8b       	std	Y+20, r25	; 0x14
    129a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    129c:	8b 89       	ldd	r24, Y+19	; 0x13
    129e:	9c 89       	ldd	r25, Y+20	; 0x14
    12a0:	00 97       	sbiw	r24, 0x00	; 0
    12a2:	69 f7       	brne	.-38     	; 0x127e <C_LCD_voidSendCommand+0x2e0>
    12a4:	14 c0       	rjmp	.+40     	; 0x12ce <C_LCD_voidSendCommand+0x330>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12a6:	6d 89       	ldd	r22, Y+21	; 0x15
    12a8:	7e 89       	ldd	r23, Y+22	; 0x16
    12aa:	8f 89       	ldd	r24, Y+23	; 0x17
    12ac:	98 8d       	ldd	r25, Y+24	; 0x18
    12ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12b2:	dc 01       	movw	r26, r24
    12b4:	cb 01       	movw	r24, r22
    12b6:	9c 8b       	std	Y+20, r25	; 0x14
    12b8:	8b 8b       	std	Y+19, r24	; 0x13
    12ba:	8b 89       	ldd	r24, Y+19	; 0x13
    12bc:	9c 89       	ldd	r25, Y+20	; 0x14
    12be:	98 8b       	std	Y+16, r25	; 0x10
    12c0:	8f 87       	std	Y+15, r24	; 0x0f
    12c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    12c4:	98 89       	ldd	r25, Y+16	; 0x10
    12c6:	01 97       	sbiw	r24, 0x01	; 1
    12c8:	f1 f7       	brne	.-4      	; 0x12c6 <C_LCD_voidSendCommand+0x328>
    12ca:	98 8b       	std	Y+16, r25	; 0x10
    12cc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    12ce:	80 e0       	ldi	r24, 0x00	; 0
    12d0:	62 e0       	ldi	r22, 0x02	; 2
    12d2:	40 e0       	ldi	r20, 0x00	; 0
    12d4:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <DIO_u8SetPinValue>
    12d8:	80 e0       	ldi	r24, 0x00	; 0
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	a0 ea       	ldi	r26, 0xA0	; 160
    12de:	b0 e4       	ldi	r27, 0x40	; 64
    12e0:	8b 87       	std	Y+11, r24	; 0x0b
    12e2:	9c 87       	std	Y+12, r25	; 0x0c
    12e4:	ad 87       	std	Y+13, r26	; 0x0d
    12e6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    12ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    12ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    12ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    12f0:	20 e0       	ldi	r18, 0x00	; 0
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	4a ef       	ldi	r20, 0xFA	; 250
    12f6:	54 e4       	ldi	r21, 0x44	; 68
    12f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12fc:	dc 01       	movw	r26, r24
    12fe:	cb 01       	movw	r24, r22
    1300:	8f 83       	std	Y+7, r24	; 0x07
    1302:	98 87       	std	Y+8, r25	; 0x08
    1304:	a9 87       	std	Y+9, r26	; 0x09
    1306:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1308:	6f 81       	ldd	r22, Y+7	; 0x07
    130a:	78 85       	ldd	r23, Y+8	; 0x08
    130c:	89 85       	ldd	r24, Y+9	; 0x09
    130e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1310:	20 e0       	ldi	r18, 0x00	; 0
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	40 e8       	ldi	r20, 0x80	; 128
    1316:	5f e3       	ldi	r21, 0x3F	; 63
    1318:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    131c:	88 23       	and	r24, r24
    131e:	2c f4       	brge	.+10     	; 0x132a <C_LCD_voidSendCommand+0x38c>
		__ticks = 1;
    1320:	81 e0       	ldi	r24, 0x01	; 1
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	9e 83       	std	Y+6, r25	; 0x06
    1326:	8d 83       	std	Y+5, r24	; 0x05
    1328:	3f c0       	rjmp	.+126    	; 0x13a8 <C_LCD_voidSendCommand+0x40a>
	else if (__tmp > 65535)
    132a:	6f 81       	ldd	r22, Y+7	; 0x07
    132c:	78 85       	ldd	r23, Y+8	; 0x08
    132e:	89 85       	ldd	r24, Y+9	; 0x09
    1330:	9a 85       	ldd	r25, Y+10	; 0x0a
    1332:	20 e0       	ldi	r18, 0x00	; 0
    1334:	3f ef       	ldi	r19, 0xFF	; 255
    1336:	4f e7       	ldi	r20, 0x7F	; 127
    1338:	57 e4       	ldi	r21, 0x47	; 71
    133a:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    133e:	18 16       	cp	r1, r24
    1340:	4c f5       	brge	.+82     	; 0x1394 <C_LCD_voidSendCommand+0x3f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1342:	6b 85       	ldd	r22, Y+11	; 0x0b
    1344:	7c 85       	ldd	r23, Y+12	; 0x0c
    1346:	8d 85       	ldd	r24, Y+13	; 0x0d
    1348:	9e 85       	ldd	r25, Y+14	; 0x0e
    134a:	20 e0       	ldi	r18, 0x00	; 0
    134c:	30 e0       	ldi	r19, 0x00	; 0
    134e:	40 e2       	ldi	r20, 0x20	; 32
    1350:	51 e4       	ldi	r21, 0x41	; 65
    1352:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1356:	dc 01       	movw	r26, r24
    1358:	cb 01       	movw	r24, r22
    135a:	bc 01       	movw	r22, r24
    135c:	cd 01       	movw	r24, r26
    135e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1362:	dc 01       	movw	r26, r24
    1364:	cb 01       	movw	r24, r22
    1366:	9e 83       	std	Y+6, r25	; 0x06
    1368:	8d 83       	std	Y+5, r24	; 0x05
    136a:	0f c0       	rjmp	.+30     	; 0x138a <C_LCD_voidSendCommand+0x3ec>
    136c:	88 ec       	ldi	r24, 0xC8	; 200
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	9c 83       	std	Y+4, r25	; 0x04
    1372:	8b 83       	std	Y+3, r24	; 0x03
    1374:	8b 81       	ldd	r24, Y+3	; 0x03
    1376:	9c 81       	ldd	r25, Y+4	; 0x04
    1378:	01 97       	sbiw	r24, 0x01	; 1
    137a:	f1 f7       	brne	.-4      	; 0x1378 <C_LCD_voidSendCommand+0x3da>
    137c:	9c 83       	std	Y+4, r25	; 0x04
    137e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1380:	8d 81       	ldd	r24, Y+5	; 0x05
    1382:	9e 81       	ldd	r25, Y+6	; 0x06
    1384:	01 97       	sbiw	r24, 0x01	; 1
    1386:	9e 83       	std	Y+6, r25	; 0x06
    1388:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    138a:	8d 81       	ldd	r24, Y+5	; 0x05
    138c:	9e 81       	ldd	r25, Y+6	; 0x06
    138e:	00 97       	sbiw	r24, 0x00	; 0
    1390:	69 f7       	brne	.-38     	; 0x136c <C_LCD_voidSendCommand+0x3ce>
    1392:	14 c0       	rjmp	.+40     	; 0x13bc <C_LCD_voidSendCommand+0x41e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1394:	6f 81       	ldd	r22, Y+7	; 0x07
    1396:	78 85       	ldd	r23, Y+8	; 0x08
    1398:	89 85       	ldd	r24, Y+9	; 0x09
    139a:	9a 85       	ldd	r25, Y+10	; 0x0a
    139c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13a0:	dc 01       	movw	r26, r24
    13a2:	cb 01       	movw	r24, r22
    13a4:	9e 83       	std	Y+6, r25	; 0x06
    13a6:	8d 83       	std	Y+5, r24	; 0x05
    13a8:	8d 81       	ldd	r24, Y+5	; 0x05
    13aa:	9e 81       	ldd	r25, Y+6	; 0x06
    13ac:	9a 83       	std	Y+2, r25	; 0x02
    13ae:	89 83       	std	Y+1, r24	; 0x01
    13b0:	89 81       	ldd	r24, Y+1	; 0x01
    13b2:	9a 81       	ldd	r25, Y+2	; 0x02
    13b4:	01 97       	sbiw	r24, 0x01	; 1
    13b6:	f1 f7       	brne	.-4      	; 0x13b4 <C_LCD_voidSendCommand+0x416>
    13b8:	9a 83       	std	Y+2, r25	; 0x02
    13ba:	89 83       	std	Y+1, r24	; 0x01

#endif



}
    13bc:	ea 96       	adiw	r28, 0x3a	; 58
    13be:	0f b6       	in	r0, 0x3f	; 63
    13c0:	f8 94       	cli
    13c2:	de bf       	out	0x3e, r29	; 62
    13c4:	0f be       	out	0x3f, r0	; 63
    13c6:	cd bf       	out	0x3d, r28	; 61
    13c8:	cf 91       	pop	r28
    13ca:	df 91       	pop	r29
    13cc:	1f 91       	pop	r17
    13ce:	08 95       	ret

000013d0 <CLCD_voidSendData>:

void CLCD_voidSendData(u8 Copy_u8Data)
{
    13d0:	1f 93       	push	r17
    13d2:	df 93       	push	r29
    13d4:	cf 93       	push	r28
    13d6:	cd b7       	in	r28, 0x3d	; 61
    13d8:	de b7       	in	r29, 0x3e	; 62
    13da:	ea 97       	sbiw	r28, 0x3a	; 58
    13dc:	0f b6       	in	r0, 0x3f	; 63
    13de:	f8 94       	cli
    13e0:	de bf       	out	0x3e, r29	; 62
    13e2:	0f be       	out	0x3f, r0	; 63
    13e4:	cd bf       	out	0x3d, r28	; 61
    13e6:	8a af       	std	Y+58, r24	; 0x3a
	/*Set RS Pin to low to send data */
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_HIGH);
    13e8:	80 e0       	ldi	r24, 0x00	; 0
    13ea:	61 e0       	ldi	r22, 0x01	; 1
    13ec:	41 e0       	ldi	r20, 0x01	; 1
    13ee:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <DIO_u8SetPinValue>
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);

#elif   MODE_SELECT ==_4_BIT_MODE

	u8 Local_u8Data = (((Copy_u8Data >> 1) & 0b01111000) | DIO_u8AndWithPort(CLCD_DATA_PORT, 0b10000111));
    13f2:	8a ad       	ldd	r24, Y+58	; 0x3a
    13f4:	86 95       	lsr	r24
    13f6:	18 2f       	mov	r17, r24
    13f8:	18 77       	andi	r17, 0x78	; 120
    13fa:	80 e0       	ldi	r24, 0x00	; 0
    13fc:	67 e8       	ldi	r22, 0x87	; 135
    13fe:	0e 94 70 10 	call	0x20e0	; 0x20e0 <DIO_u8AndWithPort>
    1402:	81 2b       	or	r24, r17
    1404:	89 af       	std	Y+57, r24	; 0x39
	/* Set Command to data pins */
	DIO_u8SetPortValue(CLCD_DATA_PORT,Local_u8Data);
    1406:	80 e0       	ldi	r24, 0x00	; 0
    1408:	69 ad       	ldd	r22, Y+57	; 0x39
    140a:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <DIO_u8SetPortValue>

	/*Send Enable pulse */
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    140e:	80 e0       	ldi	r24, 0x00	; 0
    1410:	62 e0       	ldi	r22, 0x02	; 2
    1412:	41 e0       	ldi	r20, 0x01	; 1
    1414:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <DIO_u8SetPinValue>
    1418:	80 e0       	ldi	r24, 0x00	; 0
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	a0 e0       	ldi	r26, 0x00	; 0
    141e:	b0 e4       	ldi	r27, 0x40	; 64
    1420:	8d ab       	std	Y+53, r24	; 0x35
    1422:	9e ab       	std	Y+54, r25	; 0x36
    1424:	af ab       	std	Y+55, r26	; 0x37
    1426:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1428:	6d a9       	ldd	r22, Y+53	; 0x35
    142a:	7e a9       	ldd	r23, Y+54	; 0x36
    142c:	8f a9       	ldd	r24, Y+55	; 0x37
    142e:	98 ad       	ldd	r25, Y+56	; 0x38
    1430:	20 e0       	ldi	r18, 0x00	; 0
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	4a ef       	ldi	r20, 0xFA	; 250
    1436:	54 e4       	ldi	r21, 0x44	; 68
    1438:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    143c:	dc 01       	movw	r26, r24
    143e:	cb 01       	movw	r24, r22
    1440:	89 ab       	std	Y+49, r24	; 0x31
    1442:	9a ab       	std	Y+50, r25	; 0x32
    1444:	ab ab       	std	Y+51, r26	; 0x33
    1446:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1448:	69 a9       	ldd	r22, Y+49	; 0x31
    144a:	7a a9       	ldd	r23, Y+50	; 0x32
    144c:	8b a9       	ldd	r24, Y+51	; 0x33
    144e:	9c a9       	ldd	r25, Y+52	; 0x34
    1450:	20 e0       	ldi	r18, 0x00	; 0
    1452:	30 e0       	ldi	r19, 0x00	; 0
    1454:	40 e8       	ldi	r20, 0x80	; 128
    1456:	5f e3       	ldi	r21, 0x3F	; 63
    1458:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    145c:	88 23       	and	r24, r24
    145e:	2c f4       	brge	.+10     	; 0x146a <CLCD_voidSendData+0x9a>
		__ticks = 1;
    1460:	81 e0       	ldi	r24, 0x01	; 1
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	98 ab       	std	Y+48, r25	; 0x30
    1466:	8f a7       	std	Y+47, r24	; 0x2f
    1468:	3f c0       	rjmp	.+126    	; 0x14e8 <CLCD_voidSendData+0x118>
	else if (__tmp > 65535)
    146a:	69 a9       	ldd	r22, Y+49	; 0x31
    146c:	7a a9       	ldd	r23, Y+50	; 0x32
    146e:	8b a9       	ldd	r24, Y+51	; 0x33
    1470:	9c a9       	ldd	r25, Y+52	; 0x34
    1472:	20 e0       	ldi	r18, 0x00	; 0
    1474:	3f ef       	ldi	r19, 0xFF	; 255
    1476:	4f e7       	ldi	r20, 0x7F	; 127
    1478:	57 e4       	ldi	r21, 0x47	; 71
    147a:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    147e:	18 16       	cp	r1, r24
    1480:	4c f5       	brge	.+82     	; 0x14d4 <CLCD_voidSendData+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1482:	6d a9       	ldd	r22, Y+53	; 0x35
    1484:	7e a9       	ldd	r23, Y+54	; 0x36
    1486:	8f a9       	ldd	r24, Y+55	; 0x37
    1488:	98 ad       	ldd	r25, Y+56	; 0x38
    148a:	20 e0       	ldi	r18, 0x00	; 0
    148c:	30 e0       	ldi	r19, 0x00	; 0
    148e:	40 e2       	ldi	r20, 0x20	; 32
    1490:	51 e4       	ldi	r21, 0x41	; 65
    1492:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1496:	dc 01       	movw	r26, r24
    1498:	cb 01       	movw	r24, r22
    149a:	bc 01       	movw	r22, r24
    149c:	cd 01       	movw	r24, r26
    149e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14a2:	dc 01       	movw	r26, r24
    14a4:	cb 01       	movw	r24, r22
    14a6:	98 ab       	std	Y+48, r25	; 0x30
    14a8:	8f a7       	std	Y+47, r24	; 0x2f
    14aa:	0f c0       	rjmp	.+30     	; 0x14ca <CLCD_voidSendData+0xfa>
    14ac:	88 ec       	ldi	r24, 0xC8	; 200
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	9e a7       	std	Y+46, r25	; 0x2e
    14b2:	8d a7       	std	Y+45, r24	; 0x2d
    14b4:	8d a5       	ldd	r24, Y+45	; 0x2d
    14b6:	9e a5       	ldd	r25, Y+46	; 0x2e
    14b8:	01 97       	sbiw	r24, 0x01	; 1
    14ba:	f1 f7       	brne	.-4      	; 0x14b8 <CLCD_voidSendData+0xe8>
    14bc:	9e a7       	std	Y+46, r25	; 0x2e
    14be:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14c0:	8f a5       	ldd	r24, Y+47	; 0x2f
    14c2:	98 a9       	ldd	r25, Y+48	; 0x30
    14c4:	01 97       	sbiw	r24, 0x01	; 1
    14c6:	98 ab       	std	Y+48, r25	; 0x30
    14c8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14ca:	8f a5       	ldd	r24, Y+47	; 0x2f
    14cc:	98 a9       	ldd	r25, Y+48	; 0x30
    14ce:	00 97       	sbiw	r24, 0x00	; 0
    14d0:	69 f7       	brne	.-38     	; 0x14ac <CLCD_voidSendData+0xdc>
    14d2:	14 c0       	rjmp	.+40     	; 0x14fc <CLCD_voidSendData+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14d4:	69 a9       	ldd	r22, Y+49	; 0x31
    14d6:	7a a9       	ldd	r23, Y+50	; 0x32
    14d8:	8b a9       	ldd	r24, Y+51	; 0x33
    14da:	9c a9       	ldd	r25, Y+52	; 0x34
    14dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14e0:	dc 01       	movw	r26, r24
    14e2:	cb 01       	movw	r24, r22
    14e4:	98 ab       	std	Y+48, r25	; 0x30
    14e6:	8f a7       	std	Y+47, r24	; 0x2f
    14e8:	8f a5       	ldd	r24, Y+47	; 0x2f
    14ea:	98 a9       	ldd	r25, Y+48	; 0x30
    14ec:	9c a7       	std	Y+44, r25	; 0x2c
    14ee:	8b a7       	std	Y+43, r24	; 0x2b
    14f0:	8b a5       	ldd	r24, Y+43	; 0x2b
    14f2:	9c a5       	ldd	r25, Y+44	; 0x2c
    14f4:	01 97       	sbiw	r24, 0x01	; 1
    14f6:	f1 f7       	brne	.-4      	; 0x14f4 <CLCD_voidSendData+0x124>
    14f8:	9c a7       	std	Y+44, r25	; 0x2c
    14fa:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    14fc:	80 e0       	ldi	r24, 0x00	; 0
    14fe:	62 e0       	ldi	r22, 0x02	; 2
    1500:	40 e0       	ldi	r20, 0x00	; 0
    1502:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <DIO_u8SetPinValue>
    1506:	80 e0       	ldi	r24, 0x00	; 0
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	a0 ea       	ldi	r26, 0xA0	; 160
    150c:	b0 e4       	ldi	r27, 0x40	; 64
    150e:	8f a3       	std	Y+39, r24	; 0x27
    1510:	98 a7       	std	Y+40, r25	; 0x28
    1512:	a9 a7       	std	Y+41, r26	; 0x29
    1514:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1516:	6f a1       	ldd	r22, Y+39	; 0x27
    1518:	78 a5       	ldd	r23, Y+40	; 0x28
    151a:	89 a5       	ldd	r24, Y+41	; 0x29
    151c:	9a a5       	ldd	r25, Y+42	; 0x2a
    151e:	20 e0       	ldi	r18, 0x00	; 0
    1520:	30 e0       	ldi	r19, 0x00	; 0
    1522:	4a ef       	ldi	r20, 0xFA	; 250
    1524:	54 e4       	ldi	r21, 0x44	; 68
    1526:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    152a:	dc 01       	movw	r26, r24
    152c:	cb 01       	movw	r24, r22
    152e:	8b a3       	std	Y+35, r24	; 0x23
    1530:	9c a3       	std	Y+36, r25	; 0x24
    1532:	ad a3       	std	Y+37, r26	; 0x25
    1534:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1536:	6b a1       	ldd	r22, Y+35	; 0x23
    1538:	7c a1       	ldd	r23, Y+36	; 0x24
    153a:	8d a1       	ldd	r24, Y+37	; 0x25
    153c:	9e a1       	ldd	r25, Y+38	; 0x26
    153e:	20 e0       	ldi	r18, 0x00	; 0
    1540:	30 e0       	ldi	r19, 0x00	; 0
    1542:	40 e8       	ldi	r20, 0x80	; 128
    1544:	5f e3       	ldi	r21, 0x3F	; 63
    1546:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    154a:	88 23       	and	r24, r24
    154c:	2c f4       	brge	.+10     	; 0x1558 <CLCD_voidSendData+0x188>
		__ticks = 1;
    154e:	81 e0       	ldi	r24, 0x01	; 1
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	9a a3       	std	Y+34, r25	; 0x22
    1554:	89 a3       	std	Y+33, r24	; 0x21
    1556:	3f c0       	rjmp	.+126    	; 0x15d6 <CLCD_voidSendData+0x206>
	else if (__tmp > 65535)
    1558:	6b a1       	ldd	r22, Y+35	; 0x23
    155a:	7c a1       	ldd	r23, Y+36	; 0x24
    155c:	8d a1       	ldd	r24, Y+37	; 0x25
    155e:	9e a1       	ldd	r25, Y+38	; 0x26
    1560:	20 e0       	ldi	r18, 0x00	; 0
    1562:	3f ef       	ldi	r19, 0xFF	; 255
    1564:	4f e7       	ldi	r20, 0x7F	; 127
    1566:	57 e4       	ldi	r21, 0x47	; 71
    1568:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    156c:	18 16       	cp	r1, r24
    156e:	4c f5       	brge	.+82     	; 0x15c2 <CLCD_voidSendData+0x1f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1570:	6f a1       	ldd	r22, Y+39	; 0x27
    1572:	78 a5       	ldd	r23, Y+40	; 0x28
    1574:	89 a5       	ldd	r24, Y+41	; 0x29
    1576:	9a a5       	ldd	r25, Y+42	; 0x2a
    1578:	20 e0       	ldi	r18, 0x00	; 0
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	40 e2       	ldi	r20, 0x20	; 32
    157e:	51 e4       	ldi	r21, 0x41	; 65
    1580:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1584:	dc 01       	movw	r26, r24
    1586:	cb 01       	movw	r24, r22
    1588:	bc 01       	movw	r22, r24
    158a:	cd 01       	movw	r24, r26
    158c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1590:	dc 01       	movw	r26, r24
    1592:	cb 01       	movw	r24, r22
    1594:	9a a3       	std	Y+34, r25	; 0x22
    1596:	89 a3       	std	Y+33, r24	; 0x21
    1598:	0f c0       	rjmp	.+30     	; 0x15b8 <CLCD_voidSendData+0x1e8>
    159a:	88 ec       	ldi	r24, 0xC8	; 200
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	98 a3       	std	Y+32, r25	; 0x20
    15a0:	8f 8f       	std	Y+31, r24	; 0x1f
    15a2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    15a4:	98 a1       	ldd	r25, Y+32	; 0x20
    15a6:	01 97       	sbiw	r24, 0x01	; 1
    15a8:	f1 f7       	brne	.-4      	; 0x15a6 <CLCD_voidSendData+0x1d6>
    15aa:	98 a3       	std	Y+32, r25	; 0x20
    15ac:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15ae:	89 a1       	ldd	r24, Y+33	; 0x21
    15b0:	9a a1       	ldd	r25, Y+34	; 0x22
    15b2:	01 97       	sbiw	r24, 0x01	; 1
    15b4:	9a a3       	std	Y+34, r25	; 0x22
    15b6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15b8:	89 a1       	ldd	r24, Y+33	; 0x21
    15ba:	9a a1       	ldd	r25, Y+34	; 0x22
    15bc:	00 97       	sbiw	r24, 0x00	; 0
    15be:	69 f7       	brne	.-38     	; 0x159a <CLCD_voidSendData+0x1ca>
    15c0:	14 c0       	rjmp	.+40     	; 0x15ea <CLCD_voidSendData+0x21a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15c2:	6b a1       	ldd	r22, Y+35	; 0x23
    15c4:	7c a1       	ldd	r23, Y+36	; 0x24
    15c6:	8d a1       	ldd	r24, Y+37	; 0x25
    15c8:	9e a1       	ldd	r25, Y+38	; 0x26
    15ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15ce:	dc 01       	movw	r26, r24
    15d0:	cb 01       	movw	r24, r22
    15d2:	9a a3       	std	Y+34, r25	; 0x22
    15d4:	89 a3       	std	Y+33, r24	; 0x21
    15d6:	89 a1       	ldd	r24, Y+33	; 0x21
    15d8:	9a a1       	ldd	r25, Y+34	; 0x22
    15da:	9e 8f       	std	Y+30, r25	; 0x1e
    15dc:	8d 8f       	std	Y+29, r24	; 0x1d
    15de:	8d 8d       	ldd	r24, Y+29	; 0x1d
    15e0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    15e2:	01 97       	sbiw	r24, 0x01	; 1
    15e4:	f1 f7       	brne	.-4      	; 0x15e2 <CLCD_voidSendData+0x212>
    15e6:	9e 8f       	std	Y+30, r25	; 0x1e
    15e8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);

	Local_u8Data = ((Copy_u8Data <<3) |DIO_u8AndWithPort(CLCD_DATA_PORT, 0b10000111));
    15ea:	8a ad       	ldd	r24, Y+58	; 0x3a
    15ec:	88 2f       	mov	r24, r24
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	88 0f       	add	r24, r24
    15f2:	99 1f       	adc	r25, r25
    15f4:	88 0f       	add	r24, r24
    15f6:	99 1f       	adc	r25, r25
    15f8:	88 0f       	add	r24, r24
    15fa:	99 1f       	adc	r25, r25
    15fc:	18 2f       	mov	r17, r24
    15fe:	80 e0       	ldi	r24, 0x00	; 0
    1600:	67 e8       	ldi	r22, 0x87	; 135
    1602:	0e 94 70 10 	call	0x20e0	; 0x20e0 <DIO_u8AndWithPort>
    1606:	81 2b       	or	r24, r17
    1608:	89 af       	std	Y+57, r24	; 0x39

	DIO_u8SetPortValue(CLCD_DATA_PORT,Local_u8Data);
    160a:	80 e0       	ldi	r24, 0x00	; 0
    160c:	69 ad       	ldd	r22, Y+57	; 0x39
    160e:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <DIO_u8SetPortValue>

	/*Send Enable pulse */
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    1612:	80 e0       	ldi	r24, 0x00	; 0
    1614:	62 e0       	ldi	r22, 0x02	; 2
    1616:	41 e0       	ldi	r20, 0x01	; 1
    1618:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <DIO_u8SetPinValue>
    161c:	80 e0       	ldi	r24, 0x00	; 0
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	a0 e0       	ldi	r26, 0x00	; 0
    1622:	b0 e4       	ldi	r27, 0x40	; 64
    1624:	89 8f       	std	Y+25, r24	; 0x19
    1626:	9a 8f       	std	Y+26, r25	; 0x1a
    1628:	ab 8f       	std	Y+27, r26	; 0x1b
    162a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    162c:	69 8d       	ldd	r22, Y+25	; 0x19
    162e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1630:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1632:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1634:	20 e0       	ldi	r18, 0x00	; 0
    1636:	30 e0       	ldi	r19, 0x00	; 0
    1638:	4a ef       	ldi	r20, 0xFA	; 250
    163a:	54 e4       	ldi	r21, 0x44	; 68
    163c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1640:	dc 01       	movw	r26, r24
    1642:	cb 01       	movw	r24, r22
    1644:	8d 8b       	std	Y+21, r24	; 0x15
    1646:	9e 8b       	std	Y+22, r25	; 0x16
    1648:	af 8b       	std	Y+23, r26	; 0x17
    164a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    164c:	6d 89       	ldd	r22, Y+21	; 0x15
    164e:	7e 89       	ldd	r23, Y+22	; 0x16
    1650:	8f 89       	ldd	r24, Y+23	; 0x17
    1652:	98 8d       	ldd	r25, Y+24	; 0x18
    1654:	20 e0       	ldi	r18, 0x00	; 0
    1656:	30 e0       	ldi	r19, 0x00	; 0
    1658:	40 e8       	ldi	r20, 0x80	; 128
    165a:	5f e3       	ldi	r21, 0x3F	; 63
    165c:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    1660:	88 23       	and	r24, r24
    1662:	2c f4       	brge	.+10     	; 0x166e <CLCD_voidSendData+0x29e>
		__ticks = 1;
    1664:	81 e0       	ldi	r24, 0x01	; 1
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	9c 8b       	std	Y+20, r25	; 0x14
    166a:	8b 8b       	std	Y+19, r24	; 0x13
    166c:	3f c0       	rjmp	.+126    	; 0x16ec <CLCD_voidSendData+0x31c>
	else if (__tmp > 65535)
    166e:	6d 89       	ldd	r22, Y+21	; 0x15
    1670:	7e 89       	ldd	r23, Y+22	; 0x16
    1672:	8f 89       	ldd	r24, Y+23	; 0x17
    1674:	98 8d       	ldd	r25, Y+24	; 0x18
    1676:	20 e0       	ldi	r18, 0x00	; 0
    1678:	3f ef       	ldi	r19, 0xFF	; 255
    167a:	4f e7       	ldi	r20, 0x7F	; 127
    167c:	57 e4       	ldi	r21, 0x47	; 71
    167e:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    1682:	18 16       	cp	r1, r24
    1684:	4c f5       	brge	.+82     	; 0x16d8 <CLCD_voidSendData+0x308>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1686:	69 8d       	ldd	r22, Y+25	; 0x19
    1688:	7a 8d       	ldd	r23, Y+26	; 0x1a
    168a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    168c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    168e:	20 e0       	ldi	r18, 0x00	; 0
    1690:	30 e0       	ldi	r19, 0x00	; 0
    1692:	40 e2       	ldi	r20, 0x20	; 32
    1694:	51 e4       	ldi	r21, 0x41	; 65
    1696:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    169a:	dc 01       	movw	r26, r24
    169c:	cb 01       	movw	r24, r22
    169e:	bc 01       	movw	r22, r24
    16a0:	cd 01       	movw	r24, r26
    16a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16a6:	dc 01       	movw	r26, r24
    16a8:	cb 01       	movw	r24, r22
    16aa:	9c 8b       	std	Y+20, r25	; 0x14
    16ac:	8b 8b       	std	Y+19, r24	; 0x13
    16ae:	0f c0       	rjmp	.+30     	; 0x16ce <CLCD_voidSendData+0x2fe>
    16b0:	88 ec       	ldi	r24, 0xC8	; 200
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	9a 8b       	std	Y+18, r25	; 0x12
    16b6:	89 8b       	std	Y+17, r24	; 0x11
    16b8:	89 89       	ldd	r24, Y+17	; 0x11
    16ba:	9a 89       	ldd	r25, Y+18	; 0x12
    16bc:	01 97       	sbiw	r24, 0x01	; 1
    16be:	f1 f7       	brne	.-4      	; 0x16bc <CLCD_voidSendData+0x2ec>
    16c0:	9a 8b       	std	Y+18, r25	; 0x12
    16c2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16c4:	8b 89       	ldd	r24, Y+19	; 0x13
    16c6:	9c 89       	ldd	r25, Y+20	; 0x14
    16c8:	01 97       	sbiw	r24, 0x01	; 1
    16ca:	9c 8b       	std	Y+20, r25	; 0x14
    16cc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16ce:	8b 89       	ldd	r24, Y+19	; 0x13
    16d0:	9c 89       	ldd	r25, Y+20	; 0x14
    16d2:	00 97       	sbiw	r24, 0x00	; 0
    16d4:	69 f7       	brne	.-38     	; 0x16b0 <CLCD_voidSendData+0x2e0>
    16d6:	14 c0       	rjmp	.+40     	; 0x1700 <CLCD_voidSendData+0x330>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16d8:	6d 89       	ldd	r22, Y+21	; 0x15
    16da:	7e 89       	ldd	r23, Y+22	; 0x16
    16dc:	8f 89       	ldd	r24, Y+23	; 0x17
    16de:	98 8d       	ldd	r25, Y+24	; 0x18
    16e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16e4:	dc 01       	movw	r26, r24
    16e6:	cb 01       	movw	r24, r22
    16e8:	9c 8b       	std	Y+20, r25	; 0x14
    16ea:	8b 8b       	std	Y+19, r24	; 0x13
    16ec:	8b 89       	ldd	r24, Y+19	; 0x13
    16ee:	9c 89       	ldd	r25, Y+20	; 0x14
    16f0:	98 8b       	std	Y+16, r25	; 0x10
    16f2:	8f 87       	std	Y+15, r24	; 0x0f
    16f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    16f6:	98 89       	ldd	r25, Y+16	; 0x10
    16f8:	01 97       	sbiw	r24, 0x01	; 1
    16fa:	f1 f7       	brne	.-4      	; 0x16f8 <CLCD_voidSendData+0x328>
    16fc:	98 8b       	std	Y+16, r25	; 0x10
    16fe:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    1700:	80 e0       	ldi	r24, 0x00	; 0
    1702:	62 e0       	ldi	r22, 0x02	; 2
    1704:	40 e0       	ldi	r20, 0x00	; 0
    1706:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <DIO_u8SetPinValue>
    170a:	80 e0       	ldi	r24, 0x00	; 0
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	a0 ea       	ldi	r26, 0xA0	; 160
    1710:	b0 e4       	ldi	r27, 0x40	; 64
    1712:	8b 87       	std	Y+11, r24	; 0x0b
    1714:	9c 87       	std	Y+12, r25	; 0x0c
    1716:	ad 87       	std	Y+13, r26	; 0x0d
    1718:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    171a:	6b 85       	ldd	r22, Y+11	; 0x0b
    171c:	7c 85       	ldd	r23, Y+12	; 0x0c
    171e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1720:	9e 85       	ldd	r25, Y+14	; 0x0e
    1722:	20 e0       	ldi	r18, 0x00	; 0
    1724:	30 e0       	ldi	r19, 0x00	; 0
    1726:	4a ef       	ldi	r20, 0xFA	; 250
    1728:	54 e4       	ldi	r21, 0x44	; 68
    172a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    172e:	dc 01       	movw	r26, r24
    1730:	cb 01       	movw	r24, r22
    1732:	8f 83       	std	Y+7, r24	; 0x07
    1734:	98 87       	std	Y+8, r25	; 0x08
    1736:	a9 87       	std	Y+9, r26	; 0x09
    1738:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    173a:	6f 81       	ldd	r22, Y+7	; 0x07
    173c:	78 85       	ldd	r23, Y+8	; 0x08
    173e:	89 85       	ldd	r24, Y+9	; 0x09
    1740:	9a 85       	ldd	r25, Y+10	; 0x0a
    1742:	20 e0       	ldi	r18, 0x00	; 0
    1744:	30 e0       	ldi	r19, 0x00	; 0
    1746:	40 e8       	ldi	r20, 0x80	; 128
    1748:	5f e3       	ldi	r21, 0x3F	; 63
    174a:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    174e:	88 23       	and	r24, r24
    1750:	2c f4       	brge	.+10     	; 0x175c <CLCD_voidSendData+0x38c>
		__ticks = 1;
    1752:	81 e0       	ldi	r24, 0x01	; 1
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	9e 83       	std	Y+6, r25	; 0x06
    1758:	8d 83       	std	Y+5, r24	; 0x05
    175a:	3f c0       	rjmp	.+126    	; 0x17da <CLCD_voidSendData+0x40a>
	else if (__tmp > 65535)
    175c:	6f 81       	ldd	r22, Y+7	; 0x07
    175e:	78 85       	ldd	r23, Y+8	; 0x08
    1760:	89 85       	ldd	r24, Y+9	; 0x09
    1762:	9a 85       	ldd	r25, Y+10	; 0x0a
    1764:	20 e0       	ldi	r18, 0x00	; 0
    1766:	3f ef       	ldi	r19, 0xFF	; 255
    1768:	4f e7       	ldi	r20, 0x7F	; 127
    176a:	57 e4       	ldi	r21, 0x47	; 71
    176c:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    1770:	18 16       	cp	r1, r24
    1772:	4c f5       	brge	.+82     	; 0x17c6 <CLCD_voidSendData+0x3f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1774:	6b 85       	ldd	r22, Y+11	; 0x0b
    1776:	7c 85       	ldd	r23, Y+12	; 0x0c
    1778:	8d 85       	ldd	r24, Y+13	; 0x0d
    177a:	9e 85       	ldd	r25, Y+14	; 0x0e
    177c:	20 e0       	ldi	r18, 0x00	; 0
    177e:	30 e0       	ldi	r19, 0x00	; 0
    1780:	40 e2       	ldi	r20, 0x20	; 32
    1782:	51 e4       	ldi	r21, 0x41	; 65
    1784:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1788:	dc 01       	movw	r26, r24
    178a:	cb 01       	movw	r24, r22
    178c:	bc 01       	movw	r22, r24
    178e:	cd 01       	movw	r24, r26
    1790:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1794:	dc 01       	movw	r26, r24
    1796:	cb 01       	movw	r24, r22
    1798:	9e 83       	std	Y+6, r25	; 0x06
    179a:	8d 83       	std	Y+5, r24	; 0x05
    179c:	0f c0       	rjmp	.+30     	; 0x17bc <CLCD_voidSendData+0x3ec>
    179e:	88 ec       	ldi	r24, 0xC8	; 200
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	9c 83       	std	Y+4, r25	; 0x04
    17a4:	8b 83       	std	Y+3, r24	; 0x03
    17a6:	8b 81       	ldd	r24, Y+3	; 0x03
    17a8:	9c 81       	ldd	r25, Y+4	; 0x04
    17aa:	01 97       	sbiw	r24, 0x01	; 1
    17ac:	f1 f7       	brne	.-4      	; 0x17aa <CLCD_voidSendData+0x3da>
    17ae:	9c 83       	std	Y+4, r25	; 0x04
    17b0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17b2:	8d 81       	ldd	r24, Y+5	; 0x05
    17b4:	9e 81       	ldd	r25, Y+6	; 0x06
    17b6:	01 97       	sbiw	r24, 0x01	; 1
    17b8:	9e 83       	std	Y+6, r25	; 0x06
    17ba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17bc:	8d 81       	ldd	r24, Y+5	; 0x05
    17be:	9e 81       	ldd	r25, Y+6	; 0x06
    17c0:	00 97       	sbiw	r24, 0x00	; 0
    17c2:	69 f7       	brne	.-38     	; 0x179e <CLCD_voidSendData+0x3ce>
    17c4:	14 c0       	rjmp	.+40     	; 0x17ee <CLCD_voidSendData+0x41e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17c6:	6f 81       	ldd	r22, Y+7	; 0x07
    17c8:	78 85       	ldd	r23, Y+8	; 0x08
    17ca:	89 85       	ldd	r24, Y+9	; 0x09
    17cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    17ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17d2:	dc 01       	movw	r26, r24
    17d4:	cb 01       	movw	r24, r22
    17d6:	9e 83       	std	Y+6, r25	; 0x06
    17d8:	8d 83       	std	Y+5, r24	; 0x05
    17da:	8d 81       	ldd	r24, Y+5	; 0x05
    17dc:	9e 81       	ldd	r25, Y+6	; 0x06
    17de:	9a 83       	std	Y+2, r25	; 0x02
    17e0:	89 83       	std	Y+1, r24	; 0x01
    17e2:	89 81       	ldd	r24, Y+1	; 0x01
    17e4:	9a 81       	ldd	r25, Y+2	; 0x02
    17e6:	01 97       	sbiw	r24, 0x01	; 1
    17e8:	f1 f7       	brne	.-4      	; 0x17e6 <CLCD_voidSendData+0x416>
    17ea:	9a 83       	std	Y+2, r25	; 0x02
    17ec:	89 83       	std	Y+1, r24	; 0x01



#endif

}
    17ee:	ea 96       	adiw	r28, 0x3a	; 58
    17f0:	0f b6       	in	r0, 0x3f	; 63
    17f2:	f8 94       	cli
    17f4:	de bf       	out	0x3e, r29	; 62
    17f6:	0f be       	out	0x3f, r0	; 63
    17f8:	cd bf       	out	0x3d, r28	; 61
    17fa:	cf 91       	pop	r28
    17fc:	df 91       	pop	r29
    17fe:	1f 91       	pop	r17
    1800:	08 95       	ret

00001802 <CLCD_voidInit>:

void CLCD_voidInit(void)
{
    1802:	df 93       	push	r29
    1804:	cf 93       	push	r28
    1806:	cd b7       	in	r28, 0x3d	; 61
    1808:	de b7       	in	r29, 0x3e	; 62
    180a:	2e 97       	sbiw	r28, 0x0e	; 14
    180c:	0f b6       	in	r0, 0x3f	; 63
    180e:	f8 94       	cli
    1810:	de bf       	out	0x3e, r29	; 62
    1812:	0f be       	out	0x3f, r0	; 63
    1814:	cd bf       	out	0x3d, r28	; 61
    1816:	80 e0       	ldi	r24, 0x00	; 0
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	a0 e2       	ldi	r26, 0x20	; 32
    181c:	b2 e4       	ldi	r27, 0x42	; 66
    181e:	8b 87       	std	Y+11, r24	; 0x0b
    1820:	9c 87       	std	Y+12, r25	; 0x0c
    1822:	ad 87       	std	Y+13, r26	; 0x0d
    1824:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1826:	6b 85       	ldd	r22, Y+11	; 0x0b
    1828:	7c 85       	ldd	r23, Y+12	; 0x0c
    182a:	8d 85       	ldd	r24, Y+13	; 0x0d
    182c:	9e 85       	ldd	r25, Y+14	; 0x0e
    182e:	20 e0       	ldi	r18, 0x00	; 0
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	4a ef       	ldi	r20, 0xFA	; 250
    1834:	54 e4       	ldi	r21, 0x44	; 68
    1836:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    183a:	dc 01       	movw	r26, r24
    183c:	cb 01       	movw	r24, r22
    183e:	8f 83       	std	Y+7, r24	; 0x07
    1840:	98 87       	std	Y+8, r25	; 0x08
    1842:	a9 87       	std	Y+9, r26	; 0x09
    1844:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1846:	6f 81       	ldd	r22, Y+7	; 0x07
    1848:	78 85       	ldd	r23, Y+8	; 0x08
    184a:	89 85       	ldd	r24, Y+9	; 0x09
    184c:	9a 85       	ldd	r25, Y+10	; 0x0a
    184e:	20 e0       	ldi	r18, 0x00	; 0
    1850:	30 e0       	ldi	r19, 0x00	; 0
    1852:	40 e8       	ldi	r20, 0x80	; 128
    1854:	5f e3       	ldi	r21, 0x3F	; 63
    1856:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    185a:	88 23       	and	r24, r24
    185c:	2c f4       	brge	.+10     	; 0x1868 <CLCD_voidInit+0x66>
		__ticks = 1;
    185e:	81 e0       	ldi	r24, 0x01	; 1
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	9e 83       	std	Y+6, r25	; 0x06
    1864:	8d 83       	std	Y+5, r24	; 0x05
    1866:	3f c0       	rjmp	.+126    	; 0x18e6 <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
    1868:	6f 81       	ldd	r22, Y+7	; 0x07
    186a:	78 85       	ldd	r23, Y+8	; 0x08
    186c:	89 85       	ldd	r24, Y+9	; 0x09
    186e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1870:	20 e0       	ldi	r18, 0x00	; 0
    1872:	3f ef       	ldi	r19, 0xFF	; 255
    1874:	4f e7       	ldi	r20, 0x7F	; 127
    1876:	57 e4       	ldi	r21, 0x47	; 71
    1878:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    187c:	18 16       	cp	r1, r24
    187e:	4c f5       	brge	.+82     	; 0x18d2 <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1880:	6b 85       	ldd	r22, Y+11	; 0x0b
    1882:	7c 85       	ldd	r23, Y+12	; 0x0c
    1884:	8d 85       	ldd	r24, Y+13	; 0x0d
    1886:	9e 85       	ldd	r25, Y+14	; 0x0e
    1888:	20 e0       	ldi	r18, 0x00	; 0
    188a:	30 e0       	ldi	r19, 0x00	; 0
    188c:	40 e2       	ldi	r20, 0x20	; 32
    188e:	51 e4       	ldi	r21, 0x41	; 65
    1890:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1894:	dc 01       	movw	r26, r24
    1896:	cb 01       	movw	r24, r22
    1898:	bc 01       	movw	r22, r24
    189a:	cd 01       	movw	r24, r26
    189c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18a0:	dc 01       	movw	r26, r24
    18a2:	cb 01       	movw	r24, r22
    18a4:	9e 83       	std	Y+6, r25	; 0x06
    18a6:	8d 83       	std	Y+5, r24	; 0x05
    18a8:	0f c0       	rjmp	.+30     	; 0x18c8 <CLCD_voidInit+0xc6>
    18aa:	88 ec       	ldi	r24, 0xC8	; 200
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	9c 83       	std	Y+4, r25	; 0x04
    18b0:	8b 83       	std	Y+3, r24	; 0x03
    18b2:	8b 81       	ldd	r24, Y+3	; 0x03
    18b4:	9c 81       	ldd	r25, Y+4	; 0x04
    18b6:	01 97       	sbiw	r24, 0x01	; 1
    18b8:	f1 f7       	brne	.-4      	; 0x18b6 <CLCD_voidInit+0xb4>
    18ba:	9c 83       	std	Y+4, r25	; 0x04
    18bc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18be:	8d 81       	ldd	r24, Y+5	; 0x05
    18c0:	9e 81       	ldd	r25, Y+6	; 0x06
    18c2:	01 97       	sbiw	r24, 0x01	; 1
    18c4:	9e 83       	std	Y+6, r25	; 0x06
    18c6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18c8:	8d 81       	ldd	r24, Y+5	; 0x05
    18ca:	9e 81       	ldd	r25, Y+6	; 0x06
    18cc:	00 97       	sbiw	r24, 0x00	; 0
    18ce:	69 f7       	brne	.-38     	; 0x18aa <CLCD_voidInit+0xa8>
    18d0:	14 c0       	rjmp	.+40     	; 0x18fa <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18d2:	6f 81       	ldd	r22, Y+7	; 0x07
    18d4:	78 85       	ldd	r23, Y+8	; 0x08
    18d6:	89 85       	ldd	r24, Y+9	; 0x09
    18d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    18da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18de:	dc 01       	movw	r26, r24
    18e0:	cb 01       	movw	r24, r22
    18e2:	9e 83       	std	Y+6, r25	; 0x06
    18e4:	8d 83       	std	Y+5, r24	; 0x05
    18e6:	8d 81       	ldd	r24, Y+5	; 0x05
    18e8:	9e 81       	ldd	r25, Y+6	; 0x06
    18ea:	9a 83       	std	Y+2, r25	; 0x02
    18ec:	89 83       	std	Y+1, r24	; 0x01
    18ee:	89 81       	ldd	r24, Y+1	; 0x01
    18f0:	9a 81       	ldd	r25, Y+2	; 0x02
    18f2:	01 97       	sbiw	r24, 0x01	; 1
    18f4:	f1 f7       	brne	.-4      	; 0x18f2 <CLCD_voidInit+0xf0>
    18f6:	9a 83       	std	Y+2, r25	; 0x02
    18f8:	89 83       	std	Y+1, r24	; 0x01
	C_LCD_voidSendCommand(0x01); /* 1 or 0x01 or 0b00000001*/

#elif   MODE_SELECT ==_4_BIT_MODE

	/* Function set command : 2 lines , 5*8 font size */
	C_LCD_voidSendCommand(0x33);
    18fa:	83 e3       	ldi	r24, 0x33	; 51
    18fc:	0e 94 cf 07 	call	0xf9e	; 0xf9e <C_LCD_voidSendCommand>
	C_LCD_voidSendCommand(0x32);
    1900:	82 e3       	ldi	r24, 0x32	; 50
    1902:	0e 94 cf 07 	call	0xf9e	; 0xf9e <C_LCD_voidSendCommand>
	C_LCD_voidSendCommand(0x28);   /* 0bNFXXXXXX  --> N: no of lines F: font size*/
    1906:	88 e2       	ldi	r24, 0x28	; 40
    1908:	0e 94 cf 07 	call	0xf9e	; 0xf9e <C_LCD_voidSendCommand>


	/*Display on off control : disable enable , disable cursor , no blink cursor*/
	C_LCD_voidSendCommand(0x0C);
    190c:	8c e0       	ldi	r24, 0x0C	; 12
    190e:	0e 94 cf 07 	call	0xf9e	; 0xf9e <C_LCD_voidSendCommand>
	C_LCD_voidSendCommand(0x02);
    1912:	82 e0       	ldi	r24, 0x02	; 2
    1914:	0e 94 cf 07 	call	0xf9e	; 0xf9e <C_LCD_voidSendCommand>

	C_LCD_voidSendCommand(0x06);
    1918:	86 e0       	ldi	r24, 0x06	; 6
    191a:	0e 94 cf 07 	call	0xf9e	; 0xf9e <C_LCD_voidSendCommand>

	/* Clear display */
	C_LCD_voidSendCommand(0x01);
    191e:	81 e0       	ldi	r24, 0x01	; 1
    1920:	0e 94 cf 07 	call	0xf9e	; 0xf9e <C_LCD_voidSendCommand>


#endif


}
    1924:	2e 96       	adiw	r28, 0x0e	; 14
    1926:	0f b6       	in	r0, 0x3f	; 63
    1928:	f8 94       	cli
    192a:	de bf       	out	0x3e, r29	; 62
    192c:	0f be       	out	0x3f, r0	; 63
    192e:	cd bf       	out	0x3d, r28	; 61
    1930:	cf 91       	pop	r28
    1932:	df 91       	pop	r29
    1934:	08 95       	ret

00001936 <CLCD_voidSendString>:

void CLCD_voidSendString(const char* Copy_pcString )
{
    1936:	df 93       	push	r29
    1938:	cf 93       	push	r28
    193a:	00 d0       	rcall	.+0      	; 0x193c <CLCD_voidSendString+0x6>
    193c:	0f 92       	push	r0
    193e:	cd b7       	in	r28, 0x3d	; 61
    1940:	de b7       	in	r29, 0x3e	; 62
    1942:	9b 83       	std	Y+3, r25	; 0x03
    1944:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Counter = 0;
    1946:	19 82       	std	Y+1, r1	; 0x01
    1948:	0e c0       	rjmp	.+28     	; 0x1966 <CLCD_voidSendString+0x30>
	while (Copy_pcString[Local_u8Counter] != NULL)
	{
		CLCD_voidSendData(Copy_pcString[Local_u8Counter]);
    194a:	89 81       	ldd	r24, Y+1	; 0x01
    194c:	28 2f       	mov	r18, r24
    194e:	30 e0       	ldi	r19, 0x00	; 0
    1950:	8a 81       	ldd	r24, Y+2	; 0x02
    1952:	9b 81       	ldd	r25, Y+3	; 0x03
    1954:	fc 01       	movw	r30, r24
    1956:	e2 0f       	add	r30, r18
    1958:	f3 1f       	adc	r31, r19
    195a:	80 81       	ld	r24, Z
    195c:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <CLCD_voidSendData>
		Local_u8Counter++;
    1960:	89 81       	ldd	r24, Y+1	; 0x01
    1962:	8f 5f       	subi	r24, 0xFF	; 255
    1964:	89 83       	std	Y+1, r24	; 0x01
}

void CLCD_voidSendString(const char* Copy_pcString )
{
	u8 Local_u8Counter = 0;
	while (Copy_pcString[Local_u8Counter] != NULL)
    1966:	89 81       	ldd	r24, Y+1	; 0x01
    1968:	28 2f       	mov	r18, r24
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	8a 81       	ldd	r24, Y+2	; 0x02
    196e:	9b 81       	ldd	r25, Y+3	; 0x03
    1970:	fc 01       	movw	r30, r24
    1972:	e2 0f       	add	r30, r18
    1974:	f3 1f       	adc	r31, r19
    1976:	80 81       	ld	r24, Z
    1978:	88 23       	and	r24, r24
    197a:	39 f7       	brne	.-50     	; 0x194a <CLCD_voidSendString+0x14>
	{
		CLCD_voidSendData(Copy_pcString[Local_u8Counter]);
		Local_u8Counter++;
	}
}
    197c:	0f 90       	pop	r0
    197e:	0f 90       	pop	r0
    1980:	0f 90       	pop	r0
    1982:	cf 91       	pop	r28
    1984:	df 91       	pop	r29
    1986:	08 95       	ret

00001988 <CLCD_voidGoToXY>:

void CLCD_voidGoToXY(u8 Copy_u8Xpos, u8 Copy_u8Ypos)
{
    1988:	df 93       	push	r29
    198a:	cf 93       	push	r28
    198c:	00 d0       	rcall	.+0      	; 0x198e <CLCD_voidGoToXY+0x6>
    198e:	0f 92       	push	r0
    1990:	cd b7       	in	r28, 0x3d	; 61
    1992:	de b7       	in	r29, 0x3e	; 62
    1994:	8a 83       	std	Y+2, r24	; 0x02
    1996:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Adress=0;
    1998:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8Xpos == 0)
    199a:	8a 81       	ldd	r24, Y+2	; 0x02
    199c:	88 23       	and	r24, r24
    199e:	19 f4       	brne	.+6      	; 0x19a6 <CLCD_voidGoToXY+0x1e>
	{
		Local_u8Adress = Copy_u8Ypos;
    19a0:	8b 81       	ldd	r24, Y+3	; 0x03
    19a2:	89 83       	std	Y+1, r24	; 0x01
    19a4:	06 c0       	rjmp	.+12     	; 0x19b2 <CLCD_voidGoToXY+0x2a>
	}
	else if (Copy_u8Xpos == 1)
    19a6:	8a 81       	ldd	r24, Y+2	; 0x02
    19a8:	81 30       	cpi	r24, 0x01	; 1
    19aa:	19 f4       	brne	.+6      	; 0x19b2 <CLCD_voidGoToXY+0x2a>
	{
		Local_u8Adress = Copy_u8Ypos+0x40;
    19ac:	8b 81       	ldd	r24, Y+3	; 0x03
    19ae:	80 5c       	subi	r24, 0xC0	; 192
    19b0:	89 83       	std	Y+1, r24	; 0x01
	}

	C_LCD_voidSendCommand(Local_u8Adress+128);
    19b2:	89 81       	ldd	r24, Y+1	; 0x01
    19b4:	80 58       	subi	r24, 0x80	; 128
    19b6:	0e 94 cf 07 	call	0xf9e	; 0xf9e <C_LCD_voidSendCommand>



}
    19ba:	0f 90       	pop	r0
    19bc:	0f 90       	pop	r0
    19be:	0f 90       	pop	r0
    19c0:	cf 91       	pop	r28
    19c2:	df 91       	pop	r29
    19c4:	08 95       	ret

000019c6 <CLCD_voidWriteSpecialCharacter>:

void CLCD_voidWriteSpecialCharacter(u8* Copy_pu8Pattern, u8 Copy_u8PatternNumber, u8 Copy_u8XPos, u8 Copy_u8YPos)
{
    19c6:	df 93       	push	r29
    19c8:	cf 93       	push	r28
    19ca:	cd b7       	in	r28, 0x3d	; 61
    19cc:	de b7       	in	r29, 0x3e	; 62
    19ce:	27 97       	sbiw	r28, 0x07	; 7
    19d0:	0f b6       	in	r0, 0x3f	; 63
    19d2:	f8 94       	cli
    19d4:	de bf       	out	0x3e, r29	; 62
    19d6:	0f be       	out	0x3f, r0	; 63
    19d8:	cd bf       	out	0x3d, r28	; 61
    19da:	9c 83       	std	Y+4, r25	; 0x04
    19dc:	8b 83       	std	Y+3, r24	; 0x03
    19de:	6d 83       	std	Y+5, r22	; 0x05
    19e0:	4e 83       	std	Y+6, r20	; 0x06
    19e2:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8CGRAMAddress= 0, Local_u8Iterator;
    19e4:	1a 82       	std	Y+2, r1	; 0x02
	/* Calculate the CGRAM address whose each block is 8 bytes */
	Local_u8CGRAMAddress =Copy_u8PatternNumber*8;
    19e6:	8d 81       	ldd	r24, Y+5	; 0x05
    19e8:	88 2f       	mov	r24, r24
    19ea:	90 e0       	ldi	r25, 0x00	; 0
    19ec:	88 0f       	add	r24, r24
    19ee:	99 1f       	adc	r25, r25
    19f0:	88 0f       	add	r24, r24
    19f2:	99 1f       	adc	r25, r25
    19f4:	88 0f       	add	r24, r24
    19f6:	99 1f       	adc	r25, r25
    19f8:	8a 83       	std	Y+2, r24	; 0x02

	/* Send CGRAM Address command to LCD, with setting bit 6, clearing bit 7*/
	C_LCD_voidSendCommand(Local_u8CGRAMAddress+64);
    19fa:	8a 81       	ldd	r24, Y+2	; 0x02
    19fc:	80 5c       	subi	r24, 0xC0	; 192
    19fe:	0e 94 cf 07 	call	0xf9e	; 0xf9e <C_LCD_voidSendCommand>

	/* Write the pattern into CGRAM */

	for (Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++)
    1a02:	19 82       	std	Y+1, r1	; 0x01
    1a04:	0e c0       	rjmp	.+28     	; 0x1a22 <CLCD_voidWriteSpecialCharacter+0x5c>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Iterator]);
    1a06:	89 81       	ldd	r24, Y+1	; 0x01
    1a08:	28 2f       	mov	r18, r24
    1a0a:	30 e0       	ldi	r19, 0x00	; 0
    1a0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a0e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a10:	fc 01       	movw	r30, r24
    1a12:	e2 0f       	add	r30, r18
    1a14:	f3 1f       	adc	r31, r19
    1a16:	80 81       	ld	r24, Z
    1a18:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <CLCD_voidSendData>
	/* Send CGRAM Address command to LCD, with setting bit 6, clearing bit 7*/
	C_LCD_voidSendCommand(Local_u8CGRAMAddress+64);

	/* Write the pattern into CGRAM */

	for (Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++)
    1a1c:	89 81       	ldd	r24, Y+1	; 0x01
    1a1e:	8f 5f       	subi	r24, 0xFF	; 255
    1a20:	89 83       	std	Y+1, r24	; 0x01
    1a22:	89 81       	ldd	r24, Y+1	; 0x01
    1a24:	88 30       	cpi	r24, 0x08	; 8
    1a26:	78 f3       	brcs	.-34     	; 0x1a06 <CLCD_voidWriteSpecialCharacter+0x40>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Iterator]);
	}

	/* go back to the DDRAM to display the Pattern*/
	CLCD_voidGoToXY(Copy_u8XPos,Copy_u8YPos);
    1a28:	8e 81       	ldd	r24, Y+6	; 0x06
    1a2a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a2c:	0e 94 c4 0c 	call	0x1988	; 0x1988 <CLCD_voidGoToXY>
	/* Display the pattern written in the CGRAM*/
	CLCD_voidSendData(Copy_u8PatternNumber);
    1a30:	8d 81       	ldd	r24, Y+5	; 0x05
    1a32:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <CLCD_voidSendData>
}
    1a36:	27 96       	adiw	r28, 0x07	; 7
    1a38:	0f b6       	in	r0, 0x3f	; 63
    1a3a:	f8 94       	cli
    1a3c:	de bf       	out	0x3e, r29	; 62
    1a3e:	0f be       	out	0x3f, r0	; 63
    1a40:	cd bf       	out	0x3d, r28	; 61
    1a42:	cf 91       	pop	r28
    1a44:	df 91       	pop	r29
    1a46:	08 95       	ret

00001a48 <CLCD_VoidWriteNumber>:

void CLCD_VoidWriteNumber(f32 Copy_u32Number)
{
    1a48:	0f 93       	push	r16
    1a4a:	1f 93       	push	r17
    1a4c:	df 93       	push	r29
    1a4e:	cf 93       	push	r28
    1a50:	cd b7       	in	r28, 0x3d	; 61
    1a52:	de b7       	in	r29, 0x3e	; 62
    1a54:	6d 97       	sbiw	r28, 0x1d	; 29
    1a56:	0f b6       	in	r0, 0x3f	; 63
    1a58:	f8 94       	cli
    1a5a:	de bf       	out	0x3e, r29	; 62
    1a5c:	0f be       	out	0x3f, r0	; 63
    1a5e:	cd bf       	out	0x3d, r28	; 61
    1a60:	6a 8f       	std	Y+26, r22	; 0x1a
    1a62:	7b 8f       	std	Y+27, r23	; 0x1b
    1a64:	8c 8f       	std	Y+28, r24	; 0x1c
    1a66:	9d 8f       	std	Y+29, r25	; 0x1d
	s32 Local_s32Number = Copy_u32Number;
    1a68:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1a6a:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1a6c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1a6e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1a70:	0e 94 37 04 	call	0x86e	; 0x86e <__fixsfsi>
    1a74:	dc 01       	movw	r26, r24
    1a76:	cb 01       	movw	r24, r22
    1a78:	8a 83       	std	Y+2, r24	; 0x02
    1a7a:	9b 83       	std	Y+3, r25	; 0x03
    1a7c:	ac 83       	std	Y+4, r26	; 0x04
    1a7e:	bd 83       	std	Y+5, r27	; 0x05

	if(Local_s32Number == 0)
    1a80:	8a 81       	ldd	r24, Y+2	; 0x02
    1a82:	9b 81       	ldd	r25, Y+3	; 0x03
    1a84:	ac 81       	ldd	r26, Y+4	; 0x04
    1a86:	bd 81       	ldd	r27, Y+5	; 0x05
    1a88:	00 97       	sbiw	r24, 0x00	; 0
    1a8a:	a1 05       	cpc	r26, r1
    1a8c:	b1 05       	cpc	r27, r1
    1a8e:	21 f4       	brne	.+8      	; 0x1a98 <CLCD_VoidWriteNumber+0x50>
	{
		CLCD_voidSendData('0');
    1a90:	80 e3       	ldi	r24, 0x30	; 48
    1a92:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <CLCD_voidSendData>
    1a96:	18 c0       	rjmp	.+48     	; 0x1ac8 <CLCD_VoidWriteNumber+0x80>
	}
	else if (Local_s32Number <0)
    1a98:	8a 81       	ldd	r24, Y+2	; 0x02
    1a9a:	9b 81       	ldd	r25, Y+3	; 0x03
    1a9c:	ac 81       	ldd	r26, Y+4	; 0x04
    1a9e:	bd 81       	ldd	r27, Y+5	; 0x05
    1aa0:	bb 23       	and	r27, r27
    1aa2:	94 f4       	brge	.+36     	; 0x1ac8 <CLCD_VoidWriteNumber+0x80>
	{
		CLCD_voidSendData('-');
    1aa4:	8d e2       	ldi	r24, 0x2D	; 45
    1aa6:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <CLCD_voidSendData>
		Local_s32Number = Local_s32Number *(-1);
    1aaa:	8a 81       	ldd	r24, Y+2	; 0x02
    1aac:	9b 81       	ldd	r25, Y+3	; 0x03
    1aae:	ac 81       	ldd	r26, Y+4	; 0x04
    1ab0:	bd 81       	ldd	r27, Y+5	; 0x05
    1ab2:	b0 95       	com	r27
    1ab4:	a0 95       	com	r26
    1ab6:	90 95       	com	r25
    1ab8:	81 95       	neg	r24
    1aba:	9f 4f       	sbci	r25, 0xFF	; 255
    1abc:	af 4f       	sbci	r26, 0xFF	; 255
    1abe:	bf 4f       	sbci	r27, 0xFF	; 255
    1ac0:	8a 83       	std	Y+2, r24	; 0x02
    1ac2:	9b 83       	std	Y+3, r25	; 0x03
    1ac4:	ac 83       	std	Y+4, r26	; 0x04
    1ac6:	bd 83       	std	Y+5, r27	; 0x05

	}
	u8 Local_u8Array[20]={0};
    1ac8:	84 e1       	ldi	r24, 0x14	; 20
    1aca:	fe 01       	movw	r30, r28
    1acc:	36 96       	adiw	r30, 0x06	; 6
    1ace:	df 01       	movw	r26, r30
    1ad0:	98 2f       	mov	r25, r24
    1ad2:	1d 92       	st	X+, r1
    1ad4:	9a 95       	dec	r25
    1ad6:	e9 f7       	brne	.-6      	; 0x1ad2 <CLCD_VoidWriteNumber+0x8a>
	s8 local_s8Counter =0;
    1ad8:	19 82       	std	Y+1, r1	; 0x01
    1ada:	2f c0       	rjmp	.+94     	; 0x1b3a <CLCD_VoidWriteNumber+0xf2>
	while (Local_s32Number != 0)
	{
		Local_u8Array[local_s8Counter]= Local_s32Number%10;
    1adc:	89 81       	ldd	r24, Y+1	; 0x01
    1ade:	08 2f       	mov	r16, r24
    1ae0:	11 27       	eor	r17, r17
    1ae2:	07 fd       	sbrc	r16, 7
    1ae4:	10 95       	com	r17
    1ae6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae8:	9b 81       	ldd	r25, Y+3	; 0x03
    1aea:	ac 81       	ldd	r26, Y+4	; 0x04
    1aec:	bd 81       	ldd	r27, Y+5	; 0x05
    1aee:	2a e0       	ldi	r18, 0x0A	; 10
    1af0:	30 e0       	ldi	r19, 0x00	; 0
    1af2:	40 e0       	ldi	r20, 0x00	; 0
    1af4:	50 e0       	ldi	r21, 0x00	; 0
    1af6:	bc 01       	movw	r22, r24
    1af8:	cd 01       	movw	r24, r26
    1afa:	0e 94 1f 11 	call	0x223e	; 0x223e <__divmodsi4>
    1afe:	dc 01       	movw	r26, r24
    1b00:	cb 01       	movw	r24, r22
    1b02:	28 2f       	mov	r18, r24
    1b04:	ce 01       	movw	r24, r28
    1b06:	06 96       	adiw	r24, 0x06	; 6
    1b08:	fc 01       	movw	r30, r24
    1b0a:	e0 0f       	add	r30, r16
    1b0c:	f1 1f       	adc	r31, r17
    1b0e:	20 83       	st	Z, r18
		Local_s32Number/=10;
    1b10:	8a 81       	ldd	r24, Y+2	; 0x02
    1b12:	9b 81       	ldd	r25, Y+3	; 0x03
    1b14:	ac 81       	ldd	r26, Y+4	; 0x04
    1b16:	bd 81       	ldd	r27, Y+5	; 0x05
    1b18:	2a e0       	ldi	r18, 0x0A	; 10
    1b1a:	30 e0       	ldi	r19, 0x00	; 0
    1b1c:	40 e0       	ldi	r20, 0x00	; 0
    1b1e:	50 e0       	ldi	r21, 0x00	; 0
    1b20:	bc 01       	movw	r22, r24
    1b22:	cd 01       	movw	r24, r26
    1b24:	0e 94 1f 11 	call	0x223e	; 0x223e <__divmodsi4>
    1b28:	da 01       	movw	r26, r20
    1b2a:	c9 01       	movw	r24, r18
    1b2c:	8a 83       	std	Y+2, r24	; 0x02
    1b2e:	9b 83       	std	Y+3, r25	; 0x03
    1b30:	ac 83       	std	Y+4, r26	; 0x04
    1b32:	bd 83       	std	Y+5, r27	; 0x05
		local_s8Counter++;
    1b34:	89 81       	ldd	r24, Y+1	; 0x01
    1b36:	8f 5f       	subi	r24, 0xFF	; 255
    1b38:	89 83       	std	Y+1, r24	; 0x01
		Local_s32Number = Local_s32Number *(-1);

	}
	u8 Local_u8Array[20]={0};
	s8 local_s8Counter =0;
	while (Local_s32Number != 0)
    1b3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3c:	9b 81       	ldd	r25, Y+3	; 0x03
    1b3e:	ac 81       	ldd	r26, Y+4	; 0x04
    1b40:	bd 81       	ldd	r27, Y+5	; 0x05
    1b42:	00 97       	sbiw	r24, 0x00	; 0
    1b44:	a1 05       	cpc	r26, r1
    1b46:	b1 05       	cpc	r27, r1
    1b48:	49 f6       	brne	.-110    	; 0x1adc <CLCD_VoidWriteNumber+0x94>
	{
		Local_u8Array[local_s8Counter]= Local_s32Number%10;
		Local_s32Number/=10;
		local_s8Counter++;
	}
	local_s8Counter--;
    1b4a:	89 81       	ldd	r24, Y+1	; 0x01
    1b4c:	81 50       	subi	r24, 0x01	; 1
    1b4e:	89 83       	std	Y+1, r24	; 0x01
    1b50:	11 c0       	rjmp	.+34     	; 0x1b74 <CLCD_VoidWriteNumber+0x12c>
	while (local_s8Counter>=0)
	{
		CLCD_voidSendData(Local_u8Array[local_s8Counter]+'0');
    1b52:	89 81       	ldd	r24, Y+1	; 0x01
    1b54:	28 2f       	mov	r18, r24
    1b56:	33 27       	eor	r19, r19
    1b58:	27 fd       	sbrc	r18, 7
    1b5a:	30 95       	com	r19
    1b5c:	ce 01       	movw	r24, r28
    1b5e:	06 96       	adiw	r24, 0x06	; 6
    1b60:	fc 01       	movw	r30, r24
    1b62:	e2 0f       	add	r30, r18
    1b64:	f3 1f       	adc	r31, r19
    1b66:	80 81       	ld	r24, Z
    1b68:	80 5d       	subi	r24, 0xD0	; 208
    1b6a:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <CLCD_voidSendData>
		local_s8Counter--;
    1b6e:	89 81       	ldd	r24, Y+1	; 0x01
    1b70:	81 50       	subi	r24, 0x01	; 1
    1b72:	89 83       	std	Y+1, r24	; 0x01
		Local_u8Array[local_s8Counter]= Local_s32Number%10;
		Local_s32Number/=10;
		local_s8Counter++;
	}
	local_s8Counter--;
	while (local_s8Counter>=0)
    1b74:	89 81       	ldd	r24, Y+1	; 0x01
    1b76:	88 23       	and	r24, r24
    1b78:	64 f7       	brge	.-40     	; 0x1b52 <CLCD_VoidWriteNumber+0x10a>
	{
		CLCD_voidSendData(Local_u8Array[local_s8Counter]+'0');
		local_s8Counter--;
	}
}
    1b7a:	6d 96       	adiw	r28, 0x1d	; 29
    1b7c:	0f b6       	in	r0, 0x3f	; 63
    1b7e:	f8 94       	cli
    1b80:	de bf       	out	0x3e, r29	; 62
    1b82:	0f be       	out	0x3f, r0	; 63
    1b84:	cd bf       	out	0x3d, r28	; 61
    1b86:	cf 91       	pop	r28
    1b88:	df 91       	pop	r29
    1b8a:	1f 91       	pop	r17
    1b8c:	0f 91       	pop	r16
    1b8e:	08 95       	ret

00001b90 <CLCD_voidWriteFloatNumber>:

void CLCD_voidWriteFloatNumber(f32 Copy_f32FloatNumber )
{
    1b90:	df 93       	push	r29
    1b92:	cf 93       	push	r28
    1b94:	cd b7       	in	r28, 0x3d	; 61
    1b96:	de b7       	in	r29, 0x3e	; 62
    1b98:	28 97       	sbiw	r28, 0x08	; 8
    1b9a:	0f b6       	in	r0, 0x3f	; 63
    1b9c:	f8 94       	cli
    1b9e:	de bf       	out	0x3e, r29	; 62
    1ba0:	0f be       	out	0x3f, r0	; 63
    1ba2:	cd bf       	out	0x3d, r28	; 61
    1ba4:	6d 83       	std	Y+5, r22	; 0x05
    1ba6:	7e 83       	std	Y+6, r23	; 0x06
    1ba8:	8f 83       	std	Y+7, r24	; 0x07
    1baa:	98 87       	std	Y+8, r25	; 0x08

	if(Copy_f32FloatNumber == 0)
    1bac:	6d 81       	ldd	r22, Y+5	; 0x05
    1bae:	7e 81       	ldd	r23, Y+6	; 0x06
    1bb0:	8f 81       	ldd	r24, Y+7	; 0x07
    1bb2:	98 85       	ldd	r25, Y+8	; 0x08
    1bb4:	20 e0       	ldi	r18, 0x00	; 0
    1bb6:	30 e0       	ldi	r19, 0x00	; 0
    1bb8:	40 e0       	ldi	r20, 0x00	; 0
    1bba:	50 e0       	ldi	r21, 0x00	; 0
    1bbc:	0e 94 19 03 	call	0x632	; 0x632 <__eqsf2>
    1bc0:	88 23       	and	r24, r24
    1bc2:	39 f4       	brne	.+14     	; 0x1bd2 <CLCD_voidWriteFloatNumber+0x42>
	{
		CLCD_VoidWriteNumber(0);
    1bc4:	60 e0       	ldi	r22, 0x00	; 0
    1bc6:	70 e0       	ldi	r23, 0x00	; 0
    1bc8:	80 e0       	ldi	r24, 0x00	; 0
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    1bcc:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <CLCD_VoidWriteNumber>
    1bd0:	7c c0       	rjmp	.+248    	; 0x1cca <CLCD_voidWriteFloatNumber+0x13a>
	}

	else
	{
		s32 Local_s32DecemalNum=Copy_f32FloatNumber;
    1bd2:	6d 81       	ldd	r22, Y+5	; 0x05
    1bd4:	7e 81       	ldd	r23, Y+6	; 0x06
    1bd6:	8f 81       	ldd	r24, Y+7	; 0x07
    1bd8:	98 85       	ldd	r25, Y+8	; 0x08
    1bda:	0e 94 37 04 	call	0x86e	; 0x86e <__fixsfsi>
    1bde:	dc 01       	movw	r26, r24
    1be0:	cb 01       	movw	r24, r22
    1be2:	89 83       	std	Y+1, r24	; 0x01
    1be4:	9a 83       	std	Y+2, r25	; 0x02
    1be6:	ab 83       	std	Y+3, r26	; 0x03
    1be8:	bc 83       	std	Y+4, r27	; 0x04
		CLCD_VoidWriteNumber(Local_s32DecemalNum);
    1bea:	69 81       	ldd	r22, Y+1	; 0x01
    1bec:	7a 81       	ldd	r23, Y+2	; 0x02
    1bee:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf0:	9c 81       	ldd	r25, Y+4	; 0x04
    1bf2:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <__floatsisf>
    1bf6:	dc 01       	movw	r26, r24
    1bf8:	cb 01       	movw	r24, r22
    1bfa:	bc 01       	movw	r22, r24
    1bfc:	cd 01       	movw	r24, r26
    1bfe:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <CLCD_VoidWriteNumber>
		CLCD_voidSendData('.');
    1c02:	8e e2       	ldi	r24, 0x2E	; 46
    1c04:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <CLCD_voidSendData>
		Copy_f32FloatNumber = Copy_f32FloatNumber -Local_s32DecemalNum;
    1c08:	69 81       	ldd	r22, Y+1	; 0x01
    1c0a:	7a 81       	ldd	r23, Y+2	; 0x02
    1c0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c0e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c10:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <__floatsisf>
    1c14:	9b 01       	movw	r18, r22
    1c16:	ac 01       	movw	r20, r24
    1c18:	6d 81       	ldd	r22, Y+5	; 0x05
    1c1a:	7e 81       	ldd	r23, Y+6	; 0x06
    1c1c:	8f 81       	ldd	r24, Y+7	; 0x07
    1c1e:	98 85       	ldd	r25, Y+8	; 0x08
    1c20:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1c24:	dc 01       	movw	r26, r24
    1c26:	cb 01       	movw	r24, r22
    1c28:	8d 83       	std	Y+5, r24	; 0x05
    1c2a:	9e 83       	std	Y+6, r25	; 0x06
    1c2c:	af 83       	std	Y+7, r26	; 0x07
    1c2e:	b8 87       	std	Y+8, r27	; 0x08

		Copy_f32FloatNumber*=100000;
    1c30:	6d 81       	ldd	r22, Y+5	; 0x05
    1c32:	7e 81       	ldd	r23, Y+6	; 0x06
    1c34:	8f 81       	ldd	r24, Y+7	; 0x07
    1c36:	98 85       	ldd	r25, Y+8	; 0x08
    1c38:	20 e0       	ldi	r18, 0x00	; 0
    1c3a:	30 e5       	ldi	r19, 0x50	; 80
    1c3c:	43 ec       	ldi	r20, 0xC3	; 195
    1c3e:	57 e4       	ldi	r21, 0x47	; 71
    1c40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c44:	dc 01       	movw	r26, r24
    1c46:	cb 01       	movw	r24, r22
    1c48:	8d 83       	std	Y+5, r24	; 0x05
    1c4a:	9e 83       	std	Y+6, r25	; 0x06
    1c4c:	af 83       	std	Y+7, r26	; 0x07
    1c4e:	b8 87       	std	Y+8, r27	; 0x08
		Local_s32DecemalNum = Copy_f32FloatNumber;
    1c50:	6d 81       	ldd	r22, Y+5	; 0x05
    1c52:	7e 81       	ldd	r23, Y+6	; 0x06
    1c54:	8f 81       	ldd	r24, Y+7	; 0x07
    1c56:	98 85       	ldd	r25, Y+8	; 0x08
    1c58:	0e 94 37 04 	call	0x86e	; 0x86e <__fixsfsi>
    1c5c:	dc 01       	movw	r26, r24
    1c5e:	cb 01       	movw	r24, r22
    1c60:	89 83       	std	Y+1, r24	; 0x01
    1c62:	9a 83       	std	Y+2, r25	; 0x02
    1c64:	ab 83       	std	Y+3, r26	; 0x03
    1c66:	bc 83       	std	Y+4, r27	; 0x04
    1c68:	12 c0       	rjmp	.+36     	; 0x1c8e <CLCD_voidWriteFloatNumber+0xfe>

		while (Local_s32DecemalNum%10 == 0)
		{
			Local_s32DecemalNum/=10;
    1c6a:	89 81       	ldd	r24, Y+1	; 0x01
    1c6c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c6e:	ab 81       	ldd	r26, Y+3	; 0x03
    1c70:	bc 81       	ldd	r27, Y+4	; 0x04
    1c72:	2a e0       	ldi	r18, 0x0A	; 10
    1c74:	30 e0       	ldi	r19, 0x00	; 0
    1c76:	40 e0       	ldi	r20, 0x00	; 0
    1c78:	50 e0       	ldi	r21, 0x00	; 0
    1c7a:	bc 01       	movw	r22, r24
    1c7c:	cd 01       	movw	r24, r26
    1c7e:	0e 94 1f 11 	call	0x223e	; 0x223e <__divmodsi4>
    1c82:	da 01       	movw	r26, r20
    1c84:	c9 01       	movw	r24, r18
    1c86:	89 83       	std	Y+1, r24	; 0x01
    1c88:	9a 83       	std	Y+2, r25	; 0x02
    1c8a:	ab 83       	std	Y+3, r26	; 0x03
    1c8c:	bc 83       	std	Y+4, r27	; 0x04
		Copy_f32FloatNumber = Copy_f32FloatNumber -Local_s32DecemalNum;

		Copy_f32FloatNumber*=100000;
		Local_s32DecemalNum = Copy_f32FloatNumber;

		while (Local_s32DecemalNum%10 == 0)
    1c8e:	89 81       	ldd	r24, Y+1	; 0x01
    1c90:	9a 81       	ldd	r25, Y+2	; 0x02
    1c92:	ab 81       	ldd	r26, Y+3	; 0x03
    1c94:	bc 81       	ldd	r27, Y+4	; 0x04
    1c96:	2a e0       	ldi	r18, 0x0A	; 10
    1c98:	30 e0       	ldi	r19, 0x00	; 0
    1c9a:	40 e0       	ldi	r20, 0x00	; 0
    1c9c:	50 e0       	ldi	r21, 0x00	; 0
    1c9e:	bc 01       	movw	r22, r24
    1ca0:	cd 01       	movw	r24, r26
    1ca2:	0e 94 1f 11 	call	0x223e	; 0x223e <__divmodsi4>
    1ca6:	dc 01       	movw	r26, r24
    1ca8:	cb 01       	movw	r24, r22
    1caa:	00 97       	sbiw	r24, 0x00	; 0
    1cac:	a1 05       	cpc	r26, r1
    1cae:	b1 05       	cpc	r27, r1
    1cb0:	e1 f2       	breq	.-72     	; 0x1c6a <CLCD_voidWriteFloatNumber+0xda>
		{
			Local_s32DecemalNum/=10;
		}
		CLCD_VoidWriteNumber(Local_s32DecemalNum);
    1cb2:	69 81       	ldd	r22, Y+1	; 0x01
    1cb4:	7a 81       	ldd	r23, Y+2	; 0x02
    1cb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb8:	9c 81       	ldd	r25, Y+4	; 0x04
    1cba:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <__floatsisf>
    1cbe:	dc 01       	movw	r26, r24
    1cc0:	cb 01       	movw	r24, r22
    1cc2:	bc 01       	movw	r22, r24
    1cc4:	cd 01       	movw	r24, r26
    1cc6:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <CLCD_VoidWriteNumber>
	}
}
    1cca:	28 96       	adiw	r28, 0x08	; 8
    1ccc:	0f b6       	in	r0, 0x3f	; 63
    1cce:	f8 94       	cli
    1cd0:	de bf       	out	0x3e, r29	; 62
    1cd2:	0f be       	out	0x3f, r0	; 63
    1cd4:	cd bf       	out	0x3d, r28	; 61
    1cd6:	cf 91       	pop	r28
    1cd8:	df 91       	pop	r29
    1cda:	08 95       	ret

00001cdc <CLCD_voidClear>:
//}



void CLCD_voidClear()
{
    1cdc:	df 93       	push	r29
    1cde:	cf 93       	push	r28
    1ce0:	cd b7       	in	r28, 0x3d	; 61
    1ce2:	de b7       	in	r29, 0x3e	; 62
	C_LCD_voidSendCommand(0x01);
    1ce4:	81 e0       	ldi	r24, 0x01	; 1
    1ce6:	0e 94 cf 07 	call	0xf9e	; 0xf9e <C_LCD_voidSendCommand>

}
    1cea:	cf 91       	pop	r28
    1cec:	df 91       	pop	r29
    1cee:	08 95       	ret

00001cf0 <DIO_u8SetPinValue>:
//
//	return Local_u8ErrorState;
//}

u8 DIO_u8SetPinValue(u8 Copy_u8port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
    1cf0:	df 93       	push	r29
    1cf2:	cf 93       	push	r28
    1cf4:	cd b7       	in	r28, 0x3d	; 61
    1cf6:	de b7       	in	r29, 0x3e	; 62
    1cf8:	28 97       	sbiw	r28, 0x08	; 8
    1cfa:	0f b6       	in	r0, 0x3f	; 63
    1cfc:	f8 94       	cli
    1cfe:	de bf       	out	0x3e, r29	; 62
    1d00:	0f be       	out	0x3f, r0	; 63
    1d02:	cd bf       	out	0x3d, r28	; 61
    1d04:	8a 83       	std	Y+2, r24	; 0x02
    1d06:	6b 83       	std	Y+3, r22	; 0x03
    1d08:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    1d0a:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin<=DIO_u8PIN7)
    1d0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d0e:	88 30       	cpi	r24, 0x08	; 8
    1d10:	08 f0       	brcs	.+2      	; 0x1d14 <DIO_u8SetPinValue+0x24>
    1d12:	f4 c0       	rjmp	.+488    	; 0x1efc <DIO_u8SetPinValue+0x20c>
	{
		if(Copy_u8Value == DIO_u8PIN_LOW)
    1d14:	8c 81       	ldd	r24, Y+4	; 0x04
    1d16:	88 23       	and	r24, r24
    1d18:	09 f0       	breq	.+2      	; 0x1d1c <DIO_u8SetPinValue+0x2c>
    1d1a:	77 c0       	rjmp	.+238    	; 0x1e0a <DIO_u8SetPinValue+0x11a>
		{

			switch(Copy_u8port)
    1d1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d1e:	28 2f       	mov	r18, r24
    1d20:	30 e0       	ldi	r19, 0x00	; 0
    1d22:	38 87       	std	Y+8, r19	; 0x08
    1d24:	2f 83       	std	Y+7, r18	; 0x07
    1d26:	8f 81       	ldd	r24, Y+7	; 0x07
    1d28:	98 85       	ldd	r25, Y+8	; 0x08
    1d2a:	81 30       	cpi	r24, 0x01	; 1
    1d2c:	91 05       	cpc	r25, r1
    1d2e:	59 f1       	breq	.+86     	; 0x1d86 <DIO_u8SetPinValue+0x96>
    1d30:	2f 81       	ldd	r18, Y+7	; 0x07
    1d32:	38 85       	ldd	r19, Y+8	; 0x08
    1d34:	22 30       	cpi	r18, 0x02	; 2
    1d36:	31 05       	cpc	r19, r1
    1d38:	2c f4       	brge	.+10     	; 0x1d44 <DIO_u8SetPinValue+0x54>
    1d3a:	8f 81       	ldd	r24, Y+7	; 0x07
    1d3c:	98 85       	ldd	r25, Y+8	; 0x08
    1d3e:	00 97       	sbiw	r24, 0x00	; 0
    1d40:	69 f0       	breq	.+26     	; 0x1d5c <DIO_u8SetPinValue+0x6c>
    1d42:	60 c0       	rjmp	.+192    	; 0x1e04 <DIO_u8SetPinValue+0x114>
    1d44:	2f 81       	ldd	r18, Y+7	; 0x07
    1d46:	38 85       	ldd	r19, Y+8	; 0x08
    1d48:	22 30       	cpi	r18, 0x02	; 2
    1d4a:	31 05       	cpc	r19, r1
    1d4c:	89 f1       	breq	.+98     	; 0x1db0 <DIO_u8SetPinValue+0xc0>
    1d4e:	8f 81       	ldd	r24, Y+7	; 0x07
    1d50:	98 85       	ldd	r25, Y+8	; 0x08
    1d52:	83 30       	cpi	r24, 0x03	; 3
    1d54:	91 05       	cpc	r25, r1
    1d56:	09 f4       	brne	.+2      	; 0x1d5a <DIO_u8SetPinValue+0x6a>
    1d58:	40 c0       	rjmp	.+128    	; 0x1dda <DIO_u8SetPinValue+0xea>
    1d5a:	54 c0       	rjmp	.+168    	; 0x1e04 <DIO_u8SetPinValue+0x114>
			{
			case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
    1d5c:	ab e3       	ldi	r26, 0x3B	; 59
    1d5e:	b0 e0       	ldi	r27, 0x00	; 0
    1d60:	eb e3       	ldi	r30, 0x3B	; 59
    1d62:	f0 e0       	ldi	r31, 0x00	; 0
    1d64:	80 81       	ld	r24, Z
    1d66:	48 2f       	mov	r20, r24
    1d68:	8b 81       	ldd	r24, Y+3	; 0x03
    1d6a:	28 2f       	mov	r18, r24
    1d6c:	30 e0       	ldi	r19, 0x00	; 0
    1d6e:	81 e0       	ldi	r24, 0x01	; 1
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	02 2e       	mov	r0, r18
    1d74:	02 c0       	rjmp	.+4      	; 0x1d7a <DIO_u8SetPinValue+0x8a>
    1d76:	88 0f       	add	r24, r24
    1d78:	99 1f       	adc	r25, r25
    1d7a:	0a 94       	dec	r0
    1d7c:	e2 f7       	brpl	.-8      	; 0x1d76 <DIO_u8SetPinValue+0x86>
    1d7e:	80 95       	com	r24
    1d80:	84 23       	and	r24, r20
    1d82:	8c 93       	st	X, r24
    1d84:	bd c0       	rjmp	.+378    	; 0x1f00 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
    1d86:	a8 e3       	ldi	r26, 0x38	; 56
    1d88:	b0 e0       	ldi	r27, 0x00	; 0
    1d8a:	e8 e3       	ldi	r30, 0x38	; 56
    1d8c:	f0 e0       	ldi	r31, 0x00	; 0
    1d8e:	80 81       	ld	r24, Z
    1d90:	48 2f       	mov	r20, r24
    1d92:	8b 81       	ldd	r24, Y+3	; 0x03
    1d94:	28 2f       	mov	r18, r24
    1d96:	30 e0       	ldi	r19, 0x00	; 0
    1d98:	81 e0       	ldi	r24, 0x01	; 1
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	02 2e       	mov	r0, r18
    1d9e:	02 c0       	rjmp	.+4      	; 0x1da4 <DIO_u8SetPinValue+0xb4>
    1da0:	88 0f       	add	r24, r24
    1da2:	99 1f       	adc	r25, r25
    1da4:	0a 94       	dec	r0
    1da6:	e2 f7       	brpl	.-8      	; 0x1da0 <DIO_u8SetPinValue+0xb0>
    1da8:	80 95       	com	r24
    1daa:	84 23       	and	r24, r20
    1dac:	8c 93       	st	X, r24
    1dae:	a8 c0       	rjmp	.+336    	; 0x1f00 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin); break;
    1db0:	a5 e3       	ldi	r26, 0x35	; 53
    1db2:	b0 e0       	ldi	r27, 0x00	; 0
    1db4:	e5 e3       	ldi	r30, 0x35	; 53
    1db6:	f0 e0       	ldi	r31, 0x00	; 0
    1db8:	80 81       	ld	r24, Z
    1dba:	48 2f       	mov	r20, r24
    1dbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dbe:	28 2f       	mov	r18, r24
    1dc0:	30 e0       	ldi	r19, 0x00	; 0
    1dc2:	81 e0       	ldi	r24, 0x01	; 1
    1dc4:	90 e0       	ldi	r25, 0x00	; 0
    1dc6:	02 2e       	mov	r0, r18
    1dc8:	02 c0       	rjmp	.+4      	; 0x1dce <DIO_u8SetPinValue+0xde>
    1dca:	88 0f       	add	r24, r24
    1dcc:	99 1f       	adc	r25, r25
    1dce:	0a 94       	dec	r0
    1dd0:	e2 f7       	brpl	.-8      	; 0x1dca <DIO_u8SetPinValue+0xda>
    1dd2:	80 95       	com	r24
    1dd4:	84 23       	and	r24, r20
    1dd6:	8c 93       	st	X, r24
    1dd8:	93 c0       	rjmp	.+294    	; 0x1f00 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin); break;
    1dda:	a2 e3       	ldi	r26, 0x32	; 50
    1ddc:	b0 e0       	ldi	r27, 0x00	; 0
    1dde:	e2 e3       	ldi	r30, 0x32	; 50
    1de0:	f0 e0       	ldi	r31, 0x00	; 0
    1de2:	80 81       	ld	r24, Z
    1de4:	48 2f       	mov	r20, r24
    1de6:	8b 81       	ldd	r24, Y+3	; 0x03
    1de8:	28 2f       	mov	r18, r24
    1dea:	30 e0       	ldi	r19, 0x00	; 0
    1dec:	81 e0       	ldi	r24, 0x01	; 1
    1dee:	90 e0       	ldi	r25, 0x00	; 0
    1df0:	02 2e       	mov	r0, r18
    1df2:	02 c0       	rjmp	.+4      	; 0x1df8 <DIO_u8SetPinValue+0x108>
    1df4:	88 0f       	add	r24, r24
    1df6:	99 1f       	adc	r25, r25
    1df8:	0a 94       	dec	r0
    1dfa:	e2 f7       	brpl	.-8      	; 0x1df4 <DIO_u8SetPinValue+0x104>
    1dfc:	80 95       	com	r24
    1dfe:	84 23       	and	r24, r20
    1e00:	8c 93       	st	X, r24
    1e02:	7e c0       	rjmp	.+252    	; 0x1f00 <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState =1; break;
    1e04:	81 e0       	ldi	r24, 0x01	; 1
    1e06:	89 83       	std	Y+1, r24	; 0x01
    1e08:	7b c0       	rjmp	.+246    	; 0x1f00 <DIO_u8SetPinValue+0x210>

			}
		}
		else if(Copy_u8Value == DIO_u8PIN_HIGH)
    1e0a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e0c:	81 30       	cpi	r24, 0x01	; 1
    1e0e:	09 f0       	breq	.+2      	; 0x1e12 <DIO_u8SetPinValue+0x122>
    1e10:	72 c0       	rjmp	.+228    	; 0x1ef6 <DIO_u8SetPinValue+0x206>
		{

			switch(Copy_u8port)
    1e12:	8a 81       	ldd	r24, Y+2	; 0x02
    1e14:	28 2f       	mov	r18, r24
    1e16:	30 e0       	ldi	r19, 0x00	; 0
    1e18:	3e 83       	std	Y+6, r19	; 0x06
    1e1a:	2d 83       	std	Y+5, r18	; 0x05
    1e1c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e1e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e20:	81 30       	cpi	r24, 0x01	; 1
    1e22:	91 05       	cpc	r25, r1
    1e24:	49 f1       	breq	.+82     	; 0x1e78 <DIO_u8SetPinValue+0x188>
    1e26:	2d 81       	ldd	r18, Y+5	; 0x05
    1e28:	3e 81       	ldd	r19, Y+6	; 0x06
    1e2a:	22 30       	cpi	r18, 0x02	; 2
    1e2c:	31 05       	cpc	r19, r1
    1e2e:	2c f4       	brge	.+10     	; 0x1e3a <DIO_u8SetPinValue+0x14a>
    1e30:	8d 81       	ldd	r24, Y+5	; 0x05
    1e32:	9e 81       	ldd	r25, Y+6	; 0x06
    1e34:	00 97       	sbiw	r24, 0x00	; 0
    1e36:	61 f0       	breq	.+24     	; 0x1e50 <DIO_u8SetPinValue+0x160>
    1e38:	5b c0       	rjmp	.+182    	; 0x1ef0 <DIO_u8SetPinValue+0x200>
    1e3a:	2d 81       	ldd	r18, Y+5	; 0x05
    1e3c:	3e 81       	ldd	r19, Y+6	; 0x06
    1e3e:	22 30       	cpi	r18, 0x02	; 2
    1e40:	31 05       	cpc	r19, r1
    1e42:	71 f1       	breq	.+92     	; 0x1ea0 <DIO_u8SetPinValue+0x1b0>
    1e44:	8d 81       	ldd	r24, Y+5	; 0x05
    1e46:	9e 81       	ldd	r25, Y+6	; 0x06
    1e48:	83 30       	cpi	r24, 0x03	; 3
    1e4a:	91 05       	cpc	r25, r1
    1e4c:	e9 f1       	breq	.+122    	; 0x1ec8 <DIO_u8SetPinValue+0x1d8>
    1e4e:	50 c0       	rjmp	.+160    	; 0x1ef0 <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
    1e50:	ab e3       	ldi	r26, 0x3B	; 59
    1e52:	b0 e0       	ldi	r27, 0x00	; 0
    1e54:	eb e3       	ldi	r30, 0x3B	; 59
    1e56:	f0 e0       	ldi	r31, 0x00	; 0
    1e58:	80 81       	ld	r24, Z
    1e5a:	48 2f       	mov	r20, r24
    1e5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e5e:	28 2f       	mov	r18, r24
    1e60:	30 e0       	ldi	r19, 0x00	; 0
    1e62:	81 e0       	ldi	r24, 0x01	; 1
    1e64:	90 e0       	ldi	r25, 0x00	; 0
    1e66:	02 2e       	mov	r0, r18
    1e68:	02 c0       	rjmp	.+4      	; 0x1e6e <DIO_u8SetPinValue+0x17e>
    1e6a:	88 0f       	add	r24, r24
    1e6c:	99 1f       	adc	r25, r25
    1e6e:	0a 94       	dec	r0
    1e70:	e2 f7       	brpl	.-8      	; 0x1e6a <DIO_u8SetPinValue+0x17a>
    1e72:	84 2b       	or	r24, r20
    1e74:	8c 93       	st	X, r24
    1e76:	44 c0       	rjmp	.+136    	; 0x1f00 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
    1e78:	a8 e3       	ldi	r26, 0x38	; 56
    1e7a:	b0 e0       	ldi	r27, 0x00	; 0
    1e7c:	e8 e3       	ldi	r30, 0x38	; 56
    1e7e:	f0 e0       	ldi	r31, 0x00	; 0
    1e80:	80 81       	ld	r24, Z
    1e82:	48 2f       	mov	r20, r24
    1e84:	8b 81       	ldd	r24, Y+3	; 0x03
    1e86:	28 2f       	mov	r18, r24
    1e88:	30 e0       	ldi	r19, 0x00	; 0
    1e8a:	81 e0       	ldi	r24, 0x01	; 1
    1e8c:	90 e0       	ldi	r25, 0x00	; 0
    1e8e:	02 2e       	mov	r0, r18
    1e90:	02 c0       	rjmp	.+4      	; 0x1e96 <DIO_u8SetPinValue+0x1a6>
    1e92:	88 0f       	add	r24, r24
    1e94:	99 1f       	adc	r25, r25
    1e96:	0a 94       	dec	r0
    1e98:	e2 f7       	brpl	.-8      	; 0x1e92 <DIO_u8SetPinValue+0x1a2>
    1e9a:	84 2b       	or	r24, r20
    1e9c:	8c 93       	st	X, r24
    1e9e:	30 c0       	rjmp	.+96     	; 0x1f00 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin); break;
    1ea0:	a5 e3       	ldi	r26, 0x35	; 53
    1ea2:	b0 e0       	ldi	r27, 0x00	; 0
    1ea4:	e5 e3       	ldi	r30, 0x35	; 53
    1ea6:	f0 e0       	ldi	r31, 0x00	; 0
    1ea8:	80 81       	ld	r24, Z
    1eaa:	48 2f       	mov	r20, r24
    1eac:	8b 81       	ldd	r24, Y+3	; 0x03
    1eae:	28 2f       	mov	r18, r24
    1eb0:	30 e0       	ldi	r19, 0x00	; 0
    1eb2:	81 e0       	ldi	r24, 0x01	; 1
    1eb4:	90 e0       	ldi	r25, 0x00	; 0
    1eb6:	02 2e       	mov	r0, r18
    1eb8:	02 c0       	rjmp	.+4      	; 0x1ebe <DIO_u8SetPinValue+0x1ce>
    1eba:	88 0f       	add	r24, r24
    1ebc:	99 1f       	adc	r25, r25
    1ebe:	0a 94       	dec	r0
    1ec0:	e2 f7       	brpl	.-8      	; 0x1eba <DIO_u8SetPinValue+0x1ca>
    1ec2:	84 2b       	or	r24, r20
    1ec4:	8c 93       	st	X, r24
    1ec6:	1c c0       	rjmp	.+56     	; 0x1f00 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin); break;
    1ec8:	a2 e3       	ldi	r26, 0x32	; 50
    1eca:	b0 e0       	ldi	r27, 0x00	; 0
    1ecc:	e2 e3       	ldi	r30, 0x32	; 50
    1ece:	f0 e0       	ldi	r31, 0x00	; 0
    1ed0:	80 81       	ld	r24, Z
    1ed2:	48 2f       	mov	r20, r24
    1ed4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed6:	28 2f       	mov	r18, r24
    1ed8:	30 e0       	ldi	r19, 0x00	; 0
    1eda:	81 e0       	ldi	r24, 0x01	; 1
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	02 2e       	mov	r0, r18
    1ee0:	02 c0       	rjmp	.+4      	; 0x1ee6 <DIO_u8SetPinValue+0x1f6>
    1ee2:	88 0f       	add	r24, r24
    1ee4:	99 1f       	adc	r25, r25
    1ee6:	0a 94       	dec	r0
    1ee8:	e2 f7       	brpl	.-8      	; 0x1ee2 <DIO_u8SetPinValue+0x1f2>
    1eea:	84 2b       	or	r24, r20
    1eec:	8c 93       	st	X, r24
    1eee:	08 c0       	rjmp	.+16     	; 0x1f00 <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState =1; break;
    1ef0:	81 e0       	ldi	r24, 0x01	; 1
    1ef2:	89 83       	std	Y+1, r24	; 0x01
    1ef4:	05 c0       	rjmp	.+10     	; 0x1f00 <DIO_u8SetPinValue+0x210>

			}
		}
		else
		{
			Local_u8ErrorState = 1;
    1ef6:	81 e0       	ldi	r24, 0x01	; 1
    1ef8:	89 83       	std	Y+1, r24	; 0x01
    1efa:	02 c0       	rjmp	.+4      	; 0x1f00 <DIO_u8SetPinValue+0x210>
		}

	}
	else
	{
		Local_u8ErrorState = 1;
    1efc:	81 e0       	ldi	r24, 0x01	; 1
    1efe:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1f00:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f02:	28 96       	adiw	r28, 0x08	; 8
    1f04:	0f b6       	in	r0, 0x3f	; 63
    1f06:	f8 94       	cli
    1f08:	de bf       	out	0x3e, r29	; 62
    1f0a:	0f be       	out	0x3f, r0	; 63
    1f0c:	cd bf       	out	0x3d, r28	; 61
    1f0e:	cf 91       	pop	r28
    1f10:	df 91       	pop	r29
    1f12:	08 95       	ret

00001f14 <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8port, u8 Copy_u8Value)
{
    1f14:	df 93       	push	r29
    1f16:	cf 93       	push	r28
    1f18:	00 d0       	rcall	.+0      	; 0x1f1a <DIO_u8SetPortValue+0x6>
    1f1a:	00 d0       	rcall	.+0      	; 0x1f1c <DIO_u8SetPortValue+0x8>
    1f1c:	0f 92       	push	r0
    1f1e:	cd b7       	in	r28, 0x3d	; 61
    1f20:	de b7       	in	r29, 0x3e	; 62
    1f22:	8a 83       	std	Y+2, r24	; 0x02
    1f24:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    1f26:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8port<=DIO_u8PORTD)
    1f28:	8a 81       	ldd	r24, Y+2	; 0x02
    1f2a:	84 30       	cpi	r24, 0x04	; 4
    1f2c:	b0 f5       	brcc	.+108    	; 0x1f9a <DIO_u8SetPortValue+0x86>
	{
		switch(Copy_u8port)
    1f2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f30:	28 2f       	mov	r18, r24
    1f32:	30 e0       	ldi	r19, 0x00	; 0
    1f34:	3d 83       	std	Y+5, r19	; 0x05
    1f36:	2c 83       	std	Y+4, r18	; 0x04
    1f38:	8c 81       	ldd	r24, Y+4	; 0x04
    1f3a:	9d 81       	ldd	r25, Y+5	; 0x05
    1f3c:	81 30       	cpi	r24, 0x01	; 1
    1f3e:	91 05       	cpc	r25, r1
    1f40:	d1 f0       	breq	.+52     	; 0x1f76 <DIO_u8SetPortValue+0x62>
    1f42:	2c 81       	ldd	r18, Y+4	; 0x04
    1f44:	3d 81       	ldd	r19, Y+5	; 0x05
    1f46:	22 30       	cpi	r18, 0x02	; 2
    1f48:	31 05       	cpc	r19, r1
    1f4a:	2c f4       	brge	.+10     	; 0x1f56 <DIO_u8SetPortValue+0x42>
    1f4c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f4e:	9d 81       	ldd	r25, Y+5	; 0x05
    1f50:	00 97       	sbiw	r24, 0x00	; 0
    1f52:	61 f0       	breq	.+24     	; 0x1f6c <DIO_u8SetPortValue+0x58>
    1f54:	1f c0       	rjmp	.+62     	; 0x1f94 <DIO_u8SetPortValue+0x80>
    1f56:	2c 81       	ldd	r18, Y+4	; 0x04
    1f58:	3d 81       	ldd	r19, Y+5	; 0x05
    1f5a:	22 30       	cpi	r18, 0x02	; 2
    1f5c:	31 05       	cpc	r19, r1
    1f5e:	81 f0       	breq	.+32     	; 0x1f80 <DIO_u8SetPortValue+0x6c>
    1f60:	8c 81       	ldd	r24, Y+4	; 0x04
    1f62:	9d 81       	ldd	r25, Y+5	; 0x05
    1f64:	83 30       	cpi	r24, 0x03	; 3
    1f66:	91 05       	cpc	r25, r1
    1f68:	81 f0       	breq	.+32     	; 0x1f8a <DIO_u8SetPortValue+0x76>
    1f6a:	14 c0       	rjmp	.+40     	; 0x1f94 <DIO_u8SetPortValue+0x80>
		{
		case DIO_u8PORTA: PORTA = Copy_u8Value; break;
    1f6c:	eb e3       	ldi	r30, 0x3B	; 59
    1f6e:	f0 e0       	ldi	r31, 0x00	; 0
    1f70:	8b 81       	ldd	r24, Y+3	; 0x03
    1f72:	80 83       	st	Z, r24
    1f74:	14 c0       	rjmp	.+40     	; 0x1f9e <DIO_u8SetPortValue+0x8a>
		case DIO_u8PORTB: PORTB = Copy_u8Value; break;
    1f76:	e8 e3       	ldi	r30, 0x38	; 56
    1f78:	f0 e0       	ldi	r31, 0x00	; 0
    1f7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f7c:	80 83       	st	Z, r24
    1f7e:	0f c0       	rjmp	.+30     	; 0x1f9e <DIO_u8SetPortValue+0x8a>
		case DIO_u8PORTC: PORTC = Copy_u8Value; break;
    1f80:	e5 e3       	ldi	r30, 0x35	; 53
    1f82:	f0 e0       	ldi	r31, 0x00	; 0
    1f84:	8b 81       	ldd	r24, Y+3	; 0x03
    1f86:	80 83       	st	Z, r24
    1f88:	0a c0       	rjmp	.+20     	; 0x1f9e <DIO_u8SetPortValue+0x8a>
		case DIO_u8PORTD: PORTD = Copy_u8Value; break;
    1f8a:	e2 e3       	ldi	r30, 0x32	; 50
    1f8c:	f0 e0       	ldi	r31, 0x00	; 0
    1f8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f90:	80 83       	st	Z, r24
    1f92:	05 c0       	rjmp	.+10     	; 0x1f9e <DIO_u8SetPortValue+0x8a>
		default: Local_u8ErrorState =1; break;
    1f94:	81 e0       	ldi	r24, 0x01	; 1
    1f96:	89 83       	std	Y+1, r24	; 0x01
    1f98:	02 c0       	rjmp	.+4      	; 0x1f9e <DIO_u8SetPortValue+0x8a>

		}
	}
	else
	{
		Local_u8ErrorState = 1;
    1f9a:	81 e0       	ldi	r24, 0x01	; 1
    1f9c:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_u8ErrorState;
    1f9e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fa0:	0f 90       	pop	r0
    1fa2:	0f 90       	pop	r0
    1fa4:	0f 90       	pop	r0
    1fa6:	0f 90       	pop	r0
    1fa8:	0f 90       	pop	r0
    1faa:	cf 91       	pop	r28
    1fac:	df 91       	pop	r29
    1fae:	08 95       	ret

00001fb0 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8port, u8 Copy_u8Pin, u8* Copy_Pu8Value)
{
    1fb0:	df 93       	push	r29
    1fb2:	cf 93       	push	r28
    1fb4:	cd b7       	in	r28, 0x3d	; 61
    1fb6:	de b7       	in	r29, 0x3e	; 62
    1fb8:	27 97       	sbiw	r28, 0x07	; 7
    1fba:	0f b6       	in	r0, 0x3f	; 63
    1fbc:	f8 94       	cli
    1fbe:	de bf       	out	0x3e, r29	; 62
    1fc0:	0f be       	out	0x3f, r0	; 63
    1fc2:	cd bf       	out	0x3d, r28	; 61
    1fc4:	8a 83       	std	Y+2, r24	; 0x02
    1fc6:	6b 83       	std	Y+3, r22	; 0x03
    1fc8:	5d 83       	std	Y+5, r21	; 0x05
    1fca:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    1fcc:	19 82       	std	Y+1, r1	; 0x01

	if((Copy_Pu8Value != NULL )&&(Copy_u8Pin<=DIO_u8PIN7))
    1fce:	8c 81       	ldd	r24, Y+4	; 0x04
    1fd0:	9d 81       	ldd	r25, Y+5	; 0x05
    1fd2:	00 97       	sbiw	r24, 0x00	; 0
    1fd4:	09 f4       	brne	.+2      	; 0x1fd8 <DIO_u8GetPinValue+0x28>
    1fd6:	78 c0       	rjmp	.+240    	; 0x20c8 <DIO_u8GetPinValue+0x118>
    1fd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fda:	88 30       	cpi	r24, 0x08	; 8
    1fdc:	08 f0       	brcs	.+2      	; 0x1fe0 <DIO_u8GetPinValue+0x30>
    1fde:	74 c0       	rjmp	.+232    	; 0x20c8 <DIO_u8GetPinValue+0x118>
	{


			switch(Copy_u8port)
    1fe0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe2:	28 2f       	mov	r18, r24
    1fe4:	30 e0       	ldi	r19, 0x00	; 0
    1fe6:	3f 83       	std	Y+7, r19	; 0x07
    1fe8:	2e 83       	std	Y+6, r18	; 0x06
    1fea:	4e 81       	ldd	r20, Y+6	; 0x06
    1fec:	5f 81       	ldd	r21, Y+7	; 0x07
    1fee:	41 30       	cpi	r20, 0x01	; 1
    1ff0:	51 05       	cpc	r21, r1
    1ff2:	59 f1       	breq	.+86     	; 0x204a <DIO_u8GetPinValue+0x9a>
    1ff4:	8e 81       	ldd	r24, Y+6	; 0x06
    1ff6:	9f 81       	ldd	r25, Y+7	; 0x07
    1ff8:	82 30       	cpi	r24, 0x02	; 2
    1ffa:	91 05       	cpc	r25, r1
    1ffc:	34 f4       	brge	.+12     	; 0x200a <DIO_u8GetPinValue+0x5a>
    1ffe:	2e 81       	ldd	r18, Y+6	; 0x06
    2000:	3f 81       	ldd	r19, Y+7	; 0x07
    2002:	21 15       	cp	r18, r1
    2004:	31 05       	cpc	r19, r1
    2006:	69 f0       	breq	.+26     	; 0x2022 <DIO_u8GetPinValue+0x72>
    2008:	5c c0       	rjmp	.+184    	; 0x20c2 <DIO_u8GetPinValue+0x112>
    200a:	4e 81       	ldd	r20, Y+6	; 0x06
    200c:	5f 81       	ldd	r21, Y+7	; 0x07
    200e:	42 30       	cpi	r20, 0x02	; 2
    2010:	51 05       	cpc	r21, r1
    2012:	79 f1       	breq	.+94     	; 0x2072 <DIO_u8GetPinValue+0xc2>
    2014:	8e 81       	ldd	r24, Y+6	; 0x06
    2016:	9f 81       	ldd	r25, Y+7	; 0x07
    2018:	83 30       	cpi	r24, 0x03	; 3
    201a:	91 05       	cpc	r25, r1
    201c:	09 f4       	brne	.+2      	; 0x2020 <DIO_u8GetPinValue+0x70>
    201e:	3d c0       	rjmp	.+122    	; 0x209a <DIO_u8GetPinValue+0xea>
    2020:	50 c0       	rjmp	.+160    	; 0x20c2 <DIO_u8GetPinValue+0x112>
			{
			case DIO_u8PORTA: * Copy_Pu8Value = GET_BIT(PINA,Copy_u8Pin); break;
    2022:	e9 e3       	ldi	r30, 0x39	; 57
    2024:	f0 e0       	ldi	r31, 0x00	; 0
    2026:	80 81       	ld	r24, Z
    2028:	28 2f       	mov	r18, r24
    202a:	30 e0       	ldi	r19, 0x00	; 0
    202c:	8b 81       	ldd	r24, Y+3	; 0x03
    202e:	88 2f       	mov	r24, r24
    2030:	90 e0       	ldi	r25, 0x00	; 0
    2032:	a9 01       	movw	r20, r18
    2034:	02 c0       	rjmp	.+4      	; 0x203a <DIO_u8GetPinValue+0x8a>
    2036:	55 95       	asr	r21
    2038:	47 95       	ror	r20
    203a:	8a 95       	dec	r24
    203c:	e2 f7       	brpl	.-8      	; 0x2036 <DIO_u8GetPinValue+0x86>
    203e:	ca 01       	movw	r24, r20
    2040:	81 70       	andi	r24, 0x01	; 1
    2042:	ec 81       	ldd	r30, Y+4	; 0x04
    2044:	fd 81       	ldd	r31, Y+5	; 0x05
    2046:	80 83       	st	Z, r24
    2048:	41 c0       	rjmp	.+130    	; 0x20cc <DIO_u8GetPinValue+0x11c>
			case DIO_u8PORTB: * Copy_Pu8Value = GET_BIT(PINB,Copy_u8Pin); break;
    204a:	e6 e3       	ldi	r30, 0x36	; 54
    204c:	f0 e0       	ldi	r31, 0x00	; 0
    204e:	80 81       	ld	r24, Z
    2050:	28 2f       	mov	r18, r24
    2052:	30 e0       	ldi	r19, 0x00	; 0
    2054:	8b 81       	ldd	r24, Y+3	; 0x03
    2056:	88 2f       	mov	r24, r24
    2058:	90 e0       	ldi	r25, 0x00	; 0
    205a:	a9 01       	movw	r20, r18
    205c:	02 c0       	rjmp	.+4      	; 0x2062 <DIO_u8GetPinValue+0xb2>
    205e:	55 95       	asr	r21
    2060:	47 95       	ror	r20
    2062:	8a 95       	dec	r24
    2064:	e2 f7       	brpl	.-8      	; 0x205e <DIO_u8GetPinValue+0xae>
    2066:	ca 01       	movw	r24, r20
    2068:	81 70       	andi	r24, 0x01	; 1
    206a:	ec 81       	ldd	r30, Y+4	; 0x04
    206c:	fd 81       	ldd	r31, Y+5	; 0x05
    206e:	80 83       	st	Z, r24
    2070:	2d c0       	rjmp	.+90     	; 0x20cc <DIO_u8GetPinValue+0x11c>
			case DIO_u8PORTC: * Copy_Pu8Value = GET_BIT(PINC,Copy_u8Pin); break;
    2072:	e3 e3       	ldi	r30, 0x33	; 51
    2074:	f0 e0       	ldi	r31, 0x00	; 0
    2076:	80 81       	ld	r24, Z
    2078:	28 2f       	mov	r18, r24
    207a:	30 e0       	ldi	r19, 0x00	; 0
    207c:	8b 81       	ldd	r24, Y+3	; 0x03
    207e:	88 2f       	mov	r24, r24
    2080:	90 e0       	ldi	r25, 0x00	; 0
    2082:	a9 01       	movw	r20, r18
    2084:	02 c0       	rjmp	.+4      	; 0x208a <DIO_u8GetPinValue+0xda>
    2086:	55 95       	asr	r21
    2088:	47 95       	ror	r20
    208a:	8a 95       	dec	r24
    208c:	e2 f7       	brpl	.-8      	; 0x2086 <DIO_u8GetPinValue+0xd6>
    208e:	ca 01       	movw	r24, r20
    2090:	81 70       	andi	r24, 0x01	; 1
    2092:	ec 81       	ldd	r30, Y+4	; 0x04
    2094:	fd 81       	ldd	r31, Y+5	; 0x05
    2096:	80 83       	st	Z, r24
    2098:	19 c0       	rjmp	.+50     	; 0x20cc <DIO_u8GetPinValue+0x11c>
			case DIO_u8PORTD: * Copy_Pu8Value = GET_BIT(PIND,Copy_u8Pin); break;
    209a:	e0 e3       	ldi	r30, 0x30	; 48
    209c:	f0 e0       	ldi	r31, 0x00	; 0
    209e:	80 81       	ld	r24, Z
    20a0:	28 2f       	mov	r18, r24
    20a2:	30 e0       	ldi	r19, 0x00	; 0
    20a4:	8b 81       	ldd	r24, Y+3	; 0x03
    20a6:	88 2f       	mov	r24, r24
    20a8:	90 e0       	ldi	r25, 0x00	; 0
    20aa:	a9 01       	movw	r20, r18
    20ac:	02 c0       	rjmp	.+4      	; 0x20b2 <DIO_u8GetPinValue+0x102>
    20ae:	55 95       	asr	r21
    20b0:	47 95       	ror	r20
    20b2:	8a 95       	dec	r24
    20b4:	e2 f7       	brpl	.-8      	; 0x20ae <DIO_u8GetPinValue+0xfe>
    20b6:	ca 01       	movw	r24, r20
    20b8:	81 70       	andi	r24, 0x01	; 1
    20ba:	ec 81       	ldd	r30, Y+4	; 0x04
    20bc:	fd 81       	ldd	r31, Y+5	; 0x05
    20be:	80 83       	st	Z, r24
    20c0:	05 c0       	rjmp	.+10     	; 0x20cc <DIO_u8GetPinValue+0x11c>
			default: Local_u8ErrorState =1; break;
    20c2:	81 e0       	ldi	r24, 0x01	; 1
    20c4:	89 83       	std	Y+1, r24	; 0x01
    20c6:	02 c0       	rjmp	.+4      	; 0x20cc <DIO_u8GetPinValue+0x11c>

			}
	}
	else
	{
		Local_u8ErrorState = 1;
    20c8:	81 e0       	ldi	r24, 0x01	; 1
    20ca:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    20cc:	89 81       	ldd	r24, Y+1	; 0x01
}
    20ce:	27 96       	adiw	r28, 0x07	; 7
    20d0:	0f b6       	in	r0, 0x3f	; 63
    20d2:	f8 94       	cli
    20d4:	de bf       	out	0x3e, r29	; 62
    20d6:	0f be       	out	0x3f, r0	; 63
    20d8:	cd bf       	out	0x3d, r28	; 61
    20da:	cf 91       	pop	r28
    20dc:	df 91       	pop	r29
    20de:	08 95       	ret

000020e0 <DIO_u8AndWithPort>:

u8 DIO_u8AndWithPort(u8 Copy_u8port, u8 Copy_u8Value)
{
    20e0:	df 93       	push	r29
    20e2:	cf 93       	push	r28
    20e4:	00 d0       	rcall	.+0      	; 0x20e6 <DIO_u8AndWithPort+0x6>
    20e6:	00 d0       	rcall	.+0      	; 0x20e8 <DIO_u8AndWithPort+0x8>
    20e8:	0f 92       	push	r0
    20ea:	cd b7       	in	r28, 0x3d	; 61
    20ec:	de b7       	in	r29, 0x3e	; 62
    20ee:	8a 83       	std	Y+2, r24	; 0x02
    20f0:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Result = 0;
    20f2:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8port)
    20f4:	8a 81       	ldd	r24, Y+2	; 0x02
    20f6:	28 2f       	mov	r18, r24
    20f8:	30 e0       	ldi	r19, 0x00	; 0
    20fa:	3d 83       	std	Y+5, r19	; 0x05
    20fc:	2c 83       	std	Y+4, r18	; 0x04
    20fe:	8c 81       	ldd	r24, Y+4	; 0x04
    2100:	9d 81       	ldd	r25, Y+5	; 0x05
    2102:	81 30       	cpi	r24, 0x01	; 1
    2104:	91 05       	cpc	r25, r1
    2106:	e1 f0       	breq	.+56     	; 0x2140 <DIO_u8AndWithPort+0x60>
    2108:	2c 81       	ldd	r18, Y+4	; 0x04
    210a:	3d 81       	ldd	r19, Y+5	; 0x05
    210c:	22 30       	cpi	r18, 0x02	; 2
    210e:	31 05       	cpc	r19, r1
    2110:	2c f4       	brge	.+10     	; 0x211c <DIO_u8AndWithPort+0x3c>
    2112:	8c 81       	ldd	r24, Y+4	; 0x04
    2114:	9d 81       	ldd	r25, Y+5	; 0x05
    2116:	00 97       	sbiw	r24, 0x00	; 0
    2118:	61 f0       	breq	.+24     	; 0x2132 <DIO_u8AndWithPort+0x52>
    211a:	26 c0       	rjmp	.+76     	; 0x2168 <DIO_u8AndWithPort+0x88>
    211c:	2c 81       	ldd	r18, Y+4	; 0x04
    211e:	3d 81       	ldd	r19, Y+5	; 0x05
    2120:	22 30       	cpi	r18, 0x02	; 2
    2122:	31 05       	cpc	r19, r1
    2124:	a1 f0       	breq	.+40     	; 0x214e <DIO_u8AndWithPort+0x6e>
    2126:	8c 81       	ldd	r24, Y+4	; 0x04
    2128:	9d 81       	ldd	r25, Y+5	; 0x05
    212a:	83 30       	cpi	r24, 0x03	; 3
    212c:	91 05       	cpc	r25, r1
    212e:	b1 f0       	breq	.+44     	; 0x215c <DIO_u8AndWithPort+0x7c>
    2130:	1b c0       	rjmp	.+54     	; 0x2168 <DIO_u8AndWithPort+0x88>
			{
			case DIO_u8PORTA: Local_u8Result= PORTA & Copy_u8Value; break;
    2132:	eb e3       	ldi	r30, 0x3B	; 59
    2134:	f0 e0       	ldi	r31, 0x00	; 0
    2136:	90 81       	ld	r25, Z
    2138:	8b 81       	ldd	r24, Y+3	; 0x03
    213a:	89 23       	and	r24, r25
    213c:	89 83       	std	Y+1, r24	; 0x01
    213e:	14 c0       	rjmp	.+40     	; 0x2168 <DIO_u8AndWithPort+0x88>
			case DIO_u8PORTB: Local_u8Result= PORTB & Copy_u8Value; break;
    2140:	e8 e3       	ldi	r30, 0x38	; 56
    2142:	f0 e0       	ldi	r31, 0x00	; 0
    2144:	90 81       	ld	r25, Z
    2146:	8b 81       	ldd	r24, Y+3	; 0x03
    2148:	89 23       	and	r24, r25
    214a:	89 83       	std	Y+1, r24	; 0x01
    214c:	0d c0       	rjmp	.+26     	; 0x2168 <DIO_u8AndWithPort+0x88>
			case DIO_u8PORTC: Local_u8Result= PORTC & Copy_u8Value; break;
    214e:	e5 e3       	ldi	r30, 0x35	; 53
    2150:	f0 e0       	ldi	r31, 0x00	; 0
    2152:	90 81       	ld	r25, Z
    2154:	8b 81       	ldd	r24, Y+3	; 0x03
    2156:	89 23       	and	r24, r25
    2158:	89 83       	std	Y+1, r24	; 0x01
    215a:	06 c0       	rjmp	.+12     	; 0x2168 <DIO_u8AndWithPort+0x88>
			case DIO_u8PORTD: Local_u8Result = PORTD & Copy_u8Value; break;
    215c:	e2 e3       	ldi	r30, 0x32	; 50
    215e:	f0 e0       	ldi	r31, 0x00	; 0
    2160:	90 81       	ld	r25, Z
    2162:	8b 81       	ldd	r24, Y+3	; 0x03
    2164:	89 23       	and	r24, r25
    2166:	89 83       	std	Y+1, r24	; 0x01
			default:  break;


			}
	return Local_u8Result;
    2168:	89 81       	ldd	r24, Y+1	; 0x01
}
    216a:	0f 90       	pop	r0
    216c:	0f 90       	pop	r0
    216e:	0f 90       	pop	r0
    2170:	0f 90       	pop	r0
    2172:	0f 90       	pop	r0
    2174:	cf 91       	pop	r28
    2176:	df 91       	pop	r29
    2178:	08 95       	ret

0000217a <GIE_VoidEnable>:

#include "GIE_interface.h"
#include "GIE_register.h"

void GIE_VoidEnable(void)
{
    217a:	df 93       	push	r29
    217c:	cf 93       	push	r28
    217e:	cd b7       	in	r28, 0x3d	; 61
    2180:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
    2182:	af e5       	ldi	r26, 0x5F	; 95
    2184:	b0 e0       	ldi	r27, 0x00	; 0
    2186:	ef e5       	ldi	r30, 0x5F	; 95
    2188:	f0 e0       	ldi	r31, 0x00	; 0
    218a:	80 81       	ld	r24, Z
    218c:	80 68       	ori	r24, 0x80	; 128
    218e:	8c 93       	st	X, r24
}
    2190:	cf 91       	pop	r28
    2192:	df 91       	pop	r29
    2194:	08 95       	ret

00002196 <GIE_VoidDisable>:
void GIE_VoidDisable(void)
{
    2196:	df 93       	push	r29
    2198:	cf 93       	push	r28
    219a:	cd b7       	in	r28, 0x3d	; 61
    219c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,SREG_I);
    219e:	af e5       	ldi	r26, 0x5F	; 95
    21a0:	b0 e0       	ldi	r27, 0x00	; 0
    21a2:	ef e5       	ldi	r30, 0x5F	; 95
    21a4:	f0 e0       	ldi	r31, 0x00	; 0
    21a6:	80 81       	ld	r24, Z
    21a8:	8f 77       	andi	r24, 0x7F	; 127
    21aa:	8c 93       	st	X, r24
}
    21ac:	cf 91       	pop	r28
    21ae:	df 91       	pop	r29
    21b0:	08 95       	ret

000021b2 <PORT_VoidInit>:
#include "PORT_interface.h"
#include "PORT_register.h"


void PORT_VoidInit(void)
{
    21b2:	df 93       	push	r29
    21b4:	cf 93       	push	r28
    21b6:	cd b7       	in	r28, 0x3d	; 61
    21b8:	de b7       	in	r29, 0x3e	; 62
	DDRA = PORTA_DIR;
    21ba:	ea e3       	ldi	r30, 0x3A	; 58
    21bc:	f0 e0       	ldi	r31, 0x00	; 0
    21be:	8e ef       	ldi	r24, 0xFE	; 254
    21c0:	80 83       	st	Z, r24
	DDRB = PORTB_DIR;
    21c2:	e7 e3       	ldi	r30, 0x37	; 55
    21c4:	f0 e0       	ldi	r31, 0x00	; 0
    21c6:	10 82       	st	Z, r1
	DDRC = PORTC_DIR;
    21c8:	e4 e3       	ldi	r30, 0x34	; 52
    21ca:	f0 e0       	ldi	r31, 0x00	; 0
    21cc:	8f ef       	ldi	r24, 0xFF	; 255
    21ce:	80 83       	st	Z, r24
	DDRD = PORTD_DIR;
    21d0:	e1 e3       	ldi	r30, 0x31	; 49
    21d2:	f0 e0       	ldi	r31, 0x00	; 0
    21d4:	10 82       	st	Z, r1
	
	PORTA = PORTA_INITIAL_VALUE;
    21d6:	eb e3       	ldi	r30, 0x3B	; 59
    21d8:	f0 e0       	ldi	r31, 0x00	; 0
    21da:	10 82       	st	Z, r1
	PORTB = PORTB_INITIAL_VALUE;
    21dc:	e8 e3       	ldi	r30, 0x38	; 56
    21de:	f0 e0       	ldi	r31, 0x00	; 0
    21e0:	10 82       	st	Z, r1
	PORTC = PORTC_INITIAL_VALUE;
    21e2:	e5 e3       	ldi	r30, 0x35	; 53
    21e4:	f0 e0       	ldi	r31, 0x00	; 0
    21e6:	10 82       	st	Z, r1
	PORTD = PORTD_INITIAL_VALUE;
    21e8:	e2 e3       	ldi	r30, 0x32	; 50
    21ea:	f0 e0       	ldi	r31, 0x00	; 0
    21ec:	10 82       	st	Z, r1


}
    21ee:	cf 91       	pop	r28
    21f0:	df 91       	pop	r29
    21f2:	08 95       	ret

000021f4 <main>:
	u16 APP_u16ADCReading;
	void ADCNotification(void);


void main(void)
{
    21f4:	df 93       	push	r29
    21f6:	cf 93       	push	r28
    21f8:	cd b7       	in	r28, 0x3d	; 61
    21fa:	de b7       	in	r29, 0x3e	; 62
	//		CLCD_voidGoToXY(0,10);
	//		CLCD_voidSendString("V");
	//		_delay_ms(500);


	PORT_VoidInit();
    21fc:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <PORT_VoidInit>
	CLCD_voidInit();
    2200:	0e 94 01 0c 	call	0x1802	; 0x1802 <CLCD_voidInit>
	ADC_voidInit();
    2204:	0e 94 80 06 	call	0xd00	; 0xd00 <ADC_voidInit>
	GIE_VoidEnable();
    2208:	0e 94 bd 10 	call	0x217a	; 0x217a <GIE_VoidEnable>



	while(1)
	{
		ADC_u8StartConversionAsynch(ADC0,&APP_u16ADCReading,&ADCNotification);
    220c:	2d e6       	ldi	r18, 0x6D	; 109
    220e:	31 e0       	ldi	r19, 0x01	; 1
    2210:	4f e0       	ldi	r20, 0x0F	; 15
    2212:	51 e1       	ldi	r21, 0x11	; 17
    2214:	80 e0       	ldi	r24, 0x00	; 0
    2216:	b9 01       	movw	r22, r18
    2218:	0e 94 39 07 	call	0xe72	; 0xe72 <ADC_u8StartConversionAsynch>
    221c:	f7 cf       	rjmp	.-18     	; 0x220c <main+0x18>

0000221e <ADCNotification>:

	}
}

void ADCNotification(void)
{
    221e:	df 93       	push	r29
    2220:	cf 93       	push	r28
    2222:	cd b7       	in	r28, 0x3d	; 61
    2224:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPortValue(DIO_u8PORTC,APP_u16ADCReading);
    2226:	80 91 6d 01 	lds	r24, 0x016D
    222a:	90 91 6e 01 	lds	r25, 0x016E
    222e:	98 2f       	mov	r25, r24
    2230:	82 e0       	ldi	r24, 0x02	; 2
    2232:	69 2f       	mov	r22, r25
    2234:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <DIO_u8SetPortValue>
}
    2238:	cf 91       	pop	r28
    223a:	df 91       	pop	r29
    223c:	08 95       	ret

0000223e <__divmodsi4>:
    223e:	97 fb       	bst	r25, 7
    2240:	09 2e       	mov	r0, r25
    2242:	05 26       	eor	r0, r21
    2244:	0e d0       	rcall	.+28     	; 0x2262 <__divmodsi4_neg1>
    2246:	57 fd       	sbrc	r21, 7
    2248:	04 d0       	rcall	.+8      	; 0x2252 <__divmodsi4_neg2>
    224a:	14 d0       	rcall	.+40     	; 0x2274 <__udivmodsi4>
    224c:	0a d0       	rcall	.+20     	; 0x2262 <__divmodsi4_neg1>
    224e:	00 1c       	adc	r0, r0
    2250:	38 f4       	brcc	.+14     	; 0x2260 <__divmodsi4_exit>

00002252 <__divmodsi4_neg2>:
    2252:	50 95       	com	r21
    2254:	40 95       	com	r20
    2256:	30 95       	com	r19
    2258:	21 95       	neg	r18
    225a:	3f 4f       	sbci	r19, 0xFF	; 255
    225c:	4f 4f       	sbci	r20, 0xFF	; 255
    225e:	5f 4f       	sbci	r21, 0xFF	; 255

00002260 <__divmodsi4_exit>:
    2260:	08 95       	ret

00002262 <__divmodsi4_neg1>:
    2262:	f6 f7       	brtc	.-4      	; 0x2260 <__divmodsi4_exit>
    2264:	90 95       	com	r25
    2266:	80 95       	com	r24
    2268:	70 95       	com	r23
    226a:	61 95       	neg	r22
    226c:	7f 4f       	sbci	r23, 0xFF	; 255
    226e:	8f 4f       	sbci	r24, 0xFF	; 255
    2270:	9f 4f       	sbci	r25, 0xFF	; 255
    2272:	08 95       	ret

00002274 <__udivmodsi4>:
    2274:	a1 e2       	ldi	r26, 0x21	; 33
    2276:	1a 2e       	mov	r1, r26
    2278:	aa 1b       	sub	r26, r26
    227a:	bb 1b       	sub	r27, r27
    227c:	fd 01       	movw	r30, r26
    227e:	0d c0       	rjmp	.+26     	; 0x229a <__udivmodsi4_ep>

00002280 <__udivmodsi4_loop>:
    2280:	aa 1f       	adc	r26, r26
    2282:	bb 1f       	adc	r27, r27
    2284:	ee 1f       	adc	r30, r30
    2286:	ff 1f       	adc	r31, r31
    2288:	a2 17       	cp	r26, r18
    228a:	b3 07       	cpc	r27, r19
    228c:	e4 07       	cpc	r30, r20
    228e:	f5 07       	cpc	r31, r21
    2290:	20 f0       	brcs	.+8      	; 0x229a <__udivmodsi4_ep>
    2292:	a2 1b       	sub	r26, r18
    2294:	b3 0b       	sbc	r27, r19
    2296:	e4 0b       	sbc	r30, r20
    2298:	f5 0b       	sbc	r31, r21

0000229a <__udivmodsi4_ep>:
    229a:	66 1f       	adc	r22, r22
    229c:	77 1f       	adc	r23, r23
    229e:	88 1f       	adc	r24, r24
    22a0:	99 1f       	adc	r25, r25
    22a2:	1a 94       	dec	r1
    22a4:	69 f7       	brne	.-38     	; 0x2280 <__udivmodsi4_loop>
    22a6:	60 95       	com	r22
    22a8:	70 95       	com	r23
    22aa:	80 95       	com	r24
    22ac:	90 95       	com	r25
    22ae:	9b 01       	movw	r18, r22
    22b0:	ac 01       	movw	r20, r24
    22b2:	bd 01       	movw	r22, r26
    22b4:	cf 01       	movw	r24, r30
    22b6:	08 95       	ret

000022b8 <__prologue_saves__>:
    22b8:	2f 92       	push	r2
    22ba:	3f 92       	push	r3
    22bc:	4f 92       	push	r4
    22be:	5f 92       	push	r5
    22c0:	6f 92       	push	r6
    22c2:	7f 92       	push	r7
    22c4:	8f 92       	push	r8
    22c6:	9f 92       	push	r9
    22c8:	af 92       	push	r10
    22ca:	bf 92       	push	r11
    22cc:	cf 92       	push	r12
    22ce:	df 92       	push	r13
    22d0:	ef 92       	push	r14
    22d2:	ff 92       	push	r15
    22d4:	0f 93       	push	r16
    22d6:	1f 93       	push	r17
    22d8:	cf 93       	push	r28
    22da:	df 93       	push	r29
    22dc:	cd b7       	in	r28, 0x3d	; 61
    22de:	de b7       	in	r29, 0x3e	; 62
    22e0:	ca 1b       	sub	r28, r26
    22e2:	db 0b       	sbc	r29, r27
    22e4:	0f b6       	in	r0, 0x3f	; 63
    22e6:	f8 94       	cli
    22e8:	de bf       	out	0x3e, r29	; 62
    22ea:	0f be       	out	0x3f, r0	; 63
    22ec:	cd bf       	out	0x3d, r28	; 61
    22ee:	09 94       	ijmp

000022f0 <__epilogue_restores__>:
    22f0:	2a 88       	ldd	r2, Y+18	; 0x12
    22f2:	39 88       	ldd	r3, Y+17	; 0x11
    22f4:	48 88       	ldd	r4, Y+16	; 0x10
    22f6:	5f 84       	ldd	r5, Y+15	; 0x0f
    22f8:	6e 84       	ldd	r6, Y+14	; 0x0e
    22fa:	7d 84       	ldd	r7, Y+13	; 0x0d
    22fc:	8c 84       	ldd	r8, Y+12	; 0x0c
    22fe:	9b 84       	ldd	r9, Y+11	; 0x0b
    2300:	aa 84       	ldd	r10, Y+10	; 0x0a
    2302:	b9 84       	ldd	r11, Y+9	; 0x09
    2304:	c8 84       	ldd	r12, Y+8	; 0x08
    2306:	df 80       	ldd	r13, Y+7	; 0x07
    2308:	ee 80       	ldd	r14, Y+6	; 0x06
    230a:	fd 80       	ldd	r15, Y+5	; 0x05
    230c:	0c 81       	ldd	r16, Y+4	; 0x04
    230e:	1b 81       	ldd	r17, Y+3	; 0x03
    2310:	aa 81       	ldd	r26, Y+2	; 0x02
    2312:	b9 81       	ldd	r27, Y+1	; 0x01
    2314:	ce 0f       	add	r28, r30
    2316:	d1 1d       	adc	r29, r1
    2318:	0f b6       	in	r0, 0x3f	; 63
    231a:	f8 94       	cli
    231c:	de bf       	out	0x3e, r29	; 62
    231e:	0f be       	out	0x3f, r0	; 63
    2320:	cd bf       	out	0x3d, r28	; 61
    2322:	ed 01       	movw	r28, r26
    2324:	08 95       	ret

00002326 <_exit>:
    2326:	f8 94       	cli

00002328 <__stop_program>:
    2328:	ff cf       	rjmp	.-2      	; 0x2328 <__stop_program>
