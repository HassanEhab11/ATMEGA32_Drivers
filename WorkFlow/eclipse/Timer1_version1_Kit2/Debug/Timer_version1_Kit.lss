
Timer_version1_Kit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002dd4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000012c  00800060  00002dd4  00002e68  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  0080018c  0080018c  00002f94  2**0
                  ALLOC
  3 .stab         00002a0c  00000000  00000000  00002f94  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001054  00000000  00000000  000059a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  000069f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001ef  00000000  00000000  00006b94  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000228f  00000000  00000000  00006d83  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000012bb  00000000  00000000  00009012  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000010d6  00000000  00000000  0000a2cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000b3a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c6  00000000  00000000  0000b564  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000094a  00000000  00000000  0000b82a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c174  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 27 15 	jmp	0x2a4e	; 0x2a4e <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ed       	ldi	r30, 0xD4	; 212
      68:	fd e2       	ldi	r31, 0x2D	; 45
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 38       	cpi	r26, 0x8C	; 140
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e8       	ldi	r26, 0x8C	; 140
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 38       	cpi	r26, 0x8F	; 143
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <main>
      8a:	0c 94 e8 16 	jmp	0x2dd0	; 0x2dd0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 37 04 	call	0x86e	; 0x86e <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 37 04 	call	0x86e	; 0x86e <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 b1 16 	jmp	0x2d62	; 0x2d62 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 cd 16 	jmp	0x2d9a	; 0x2d9a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 bd 16 	jmp	0x2d7a	; 0x2d7a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 af 05 	call	0xb5e	; 0xb5e <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 af 05 	call	0xb5e	; 0xb5e <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 da 04 	call	0x9b4	; 0x9b4 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 d9 16 	jmp	0x2db2	; 0x2db2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 bd 16 	jmp	0x2d7a	; 0x2d7a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 af 05 	call	0xb5e	; 0xb5e <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 af 05 	call	0xb5e	; 0xb5e <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 da 04 	call	0x9b4	; 0x9b4 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 d9 16 	jmp	0x2db2	; 0x2db2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 b1 16 	jmp	0x2d62	; 0x2d62 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 af 05 	call	0xb5e	; 0xb5e <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 af 05 	call	0xb5e	; 0xb5e <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 da 04 	call	0x9b4	; 0x9b4 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 cd 16 	jmp	0x2d9a	; 0x2d9a <__epilogue_restores__>

00000632 <__eqsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 bd 16 	jmp	0x2d7a	; 0x2d7a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 af 05 	call	0xb5e	; 0xb5e <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 af 05 	call	0xb5e	; 0xb5e <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__eqsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__eqsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 27 06 	call	0xc4e	; 0xc4e <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__eqsf2+0x58>
     688:	81 e0       	ldi	r24, 0x01	; 1
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 d9 16 	jmp	0x2db2	; 0x2db2 <__epilogue_restores__+0x18>

00000692 <__gtsf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 bd 16 	jmp	0x2d7a	; 0x2d7a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 af 05 	call	0xb5e	; 0xb5e <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 af 05 	call	0xb5e	; 0xb5e <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gtsf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gtsf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 27 06 	call	0xc4e	; 0xc4e <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gtsf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 d9 16 	jmp	0x2db2	; 0x2db2 <__epilogue_restores__+0x18>

000006f2 <__gesf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 bd 16 	jmp	0x2d7a	; 0x2d7a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 af 05 	call	0xb5e	; 0xb5e <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 af 05 	call	0xb5e	; 0xb5e <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__gesf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__gesf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 27 06 	call	0xc4e	; 0xc4e <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__gesf2+0x58>
     748:	8f ef       	ldi	r24, 0xFF	; 255
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 d9 16 	jmp	0x2db2	; 0x2db2 <__epilogue_restores__+0x18>

00000752 <__ltsf2>:
     752:	a8 e1       	ldi	r26, 0x18	; 24
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 bd 16 	jmp	0x2d7a	; 0x2d7a <__prologue_saves__+0x18>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	2d 83       	std	Y+5, r18	; 0x05
     768:	3e 83       	std	Y+6, r19	; 0x06
     76a:	4f 83       	std	Y+7, r20	; 0x07
     76c:	58 87       	std	Y+8, r21	; 0x08
     76e:	89 e0       	ldi	r24, 0x09	; 9
     770:	e8 2e       	mov	r14, r24
     772:	f1 2c       	mov	r15, r1
     774:	ec 0e       	add	r14, r28
     776:	fd 1e       	adc	r15, r29
     778:	ce 01       	movw	r24, r28
     77a:	01 96       	adiw	r24, 0x01	; 1
     77c:	b7 01       	movw	r22, r14
     77e:	0e 94 af 05 	call	0xb5e	; 0xb5e <__unpack_f>
     782:	8e 01       	movw	r16, r28
     784:	0f 5e       	subi	r16, 0xEF	; 239
     786:	1f 4f       	sbci	r17, 0xFF	; 255
     788:	ce 01       	movw	r24, r28
     78a:	05 96       	adiw	r24, 0x05	; 5
     78c:	b8 01       	movw	r22, r16
     78e:	0e 94 af 05 	call	0xb5e	; 0xb5e <__unpack_f>
     792:	89 85       	ldd	r24, Y+9	; 0x09
     794:	82 30       	cpi	r24, 0x02	; 2
     796:	40 f0       	brcs	.+16     	; 0x7a8 <__ltsf2+0x56>
     798:	89 89       	ldd	r24, Y+17	; 0x11
     79a:	82 30       	cpi	r24, 0x02	; 2
     79c:	28 f0       	brcs	.+10     	; 0x7a8 <__ltsf2+0x56>
     79e:	c7 01       	movw	r24, r14
     7a0:	b8 01       	movw	r22, r16
     7a2:	0e 94 27 06 	call	0xc4e	; 0xc4e <__fpcmp_parts_f>
     7a6:	01 c0       	rjmp	.+2      	; 0x7aa <__ltsf2+0x58>
     7a8:	81 e0       	ldi	r24, 0x01	; 1
     7aa:	68 96       	adiw	r28, 0x18	; 24
     7ac:	e6 e0       	ldi	r30, 0x06	; 6
     7ae:	0c 94 d9 16 	jmp	0x2db2	; 0x2db2 <__epilogue_restores__+0x18>

000007b2 <__floatsisf>:
     7b2:	a8 e0       	ldi	r26, 0x08	; 8
     7b4:	b0 e0       	ldi	r27, 0x00	; 0
     7b6:	ef ed       	ldi	r30, 0xDF	; 223
     7b8:	f3 e0       	ldi	r31, 0x03	; 3
     7ba:	0c 94 ba 16 	jmp	0x2d74	; 0x2d74 <__prologue_saves__+0x12>
     7be:	9b 01       	movw	r18, r22
     7c0:	ac 01       	movw	r20, r24
     7c2:	83 e0       	ldi	r24, 0x03	; 3
     7c4:	89 83       	std	Y+1, r24	; 0x01
     7c6:	da 01       	movw	r26, r20
     7c8:	c9 01       	movw	r24, r18
     7ca:	88 27       	eor	r24, r24
     7cc:	b7 fd       	sbrc	r27, 7
     7ce:	83 95       	inc	r24
     7d0:	99 27       	eor	r25, r25
     7d2:	aa 27       	eor	r26, r26
     7d4:	bb 27       	eor	r27, r27
     7d6:	b8 2e       	mov	r11, r24
     7d8:	21 15       	cp	r18, r1
     7da:	31 05       	cpc	r19, r1
     7dc:	41 05       	cpc	r20, r1
     7de:	51 05       	cpc	r21, r1
     7e0:	19 f4       	brne	.+6      	; 0x7e8 <__floatsisf+0x36>
     7e2:	82 e0       	ldi	r24, 0x02	; 2
     7e4:	89 83       	std	Y+1, r24	; 0x01
     7e6:	3a c0       	rjmp	.+116    	; 0x85c <__floatsisf+0xaa>
     7e8:	88 23       	and	r24, r24
     7ea:	a9 f0       	breq	.+42     	; 0x816 <__floatsisf+0x64>
     7ec:	20 30       	cpi	r18, 0x00	; 0
     7ee:	80 e0       	ldi	r24, 0x00	; 0
     7f0:	38 07       	cpc	r19, r24
     7f2:	80 e0       	ldi	r24, 0x00	; 0
     7f4:	48 07       	cpc	r20, r24
     7f6:	80 e8       	ldi	r24, 0x80	; 128
     7f8:	58 07       	cpc	r21, r24
     7fa:	29 f4       	brne	.+10     	; 0x806 <__floatsisf+0x54>
     7fc:	60 e0       	ldi	r22, 0x00	; 0
     7fe:	70 e0       	ldi	r23, 0x00	; 0
     800:	80 e0       	ldi	r24, 0x00	; 0
     802:	9f ec       	ldi	r25, 0xCF	; 207
     804:	30 c0       	rjmp	.+96     	; 0x866 <__stack+0x7>
     806:	ee 24       	eor	r14, r14
     808:	ff 24       	eor	r15, r15
     80a:	87 01       	movw	r16, r14
     80c:	e2 1a       	sub	r14, r18
     80e:	f3 0a       	sbc	r15, r19
     810:	04 0b       	sbc	r16, r20
     812:	15 0b       	sbc	r17, r21
     814:	02 c0       	rjmp	.+4      	; 0x81a <__floatsisf+0x68>
     816:	79 01       	movw	r14, r18
     818:	8a 01       	movw	r16, r20
     81a:	8e e1       	ldi	r24, 0x1E	; 30
     81c:	c8 2e       	mov	r12, r24
     81e:	d1 2c       	mov	r13, r1
     820:	dc 82       	std	Y+4, r13	; 0x04
     822:	cb 82       	std	Y+3, r12	; 0x03
     824:	ed 82       	std	Y+5, r14	; 0x05
     826:	fe 82       	std	Y+6, r15	; 0x06
     828:	0f 83       	std	Y+7, r16	; 0x07
     82a:	18 87       	std	Y+8, r17	; 0x08
     82c:	c8 01       	movw	r24, r16
     82e:	b7 01       	movw	r22, r14
     830:	0e 94 8b 04 	call	0x916	; 0x916 <__clzsi2>
     834:	01 97       	sbiw	r24, 0x01	; 1
     836:	18 16       	cp	r1, r24
     838:	19 06       	cpc	r1, r25
     83a:	84 f4       	brge	.+32     	; 0x85c <__floatsisf+0xaa>
     83c:	08 2e       	mov	r0, r24
     83e:	04 c0       	rjmp	.+8      	; 0x848 <__floatsisf+0x96>
     840:	ee 0c       	add	r14, r14
     842:	ff 1c       	adc	r15, r15
     844:	00 1f       	adc	r16, r16
     846:	11 1f       	adc	r17, r17
     848:	0a 94       	dec	r0
     84a:	d2 f7       	brpl	.-12     	; 0x840 <__floatsisf+0x8e>
     84c:	ed 82       	std	Y+5, r14	; 0x05
     84e:	fe 82       	std	Y+6, r15	; 0x06
     850:	0f 83       	std	Y+7, r16	; 0x07
     852:	18 87       	std	Y+8, r17	; 0x08
     854:	c8 1a       	sub	r12, r24
     856:	d9 0a       	sbc	r13, r25
     858:	dc 82       	std	Y+4, r13	; 0x04
     85a:	cb 82       	std	Y+3, r12	; 0x03
     85c:	ba 82       	std	Y+2, r11	; 0x02
     85e:	ce 01       	movw	r24, r28
     860:	01 96       	adiw	r24, 0x01	; 1
     862:	0e 94 da 04 	call	0x9b4	; 0x9b4 <__pack_f>
     866:	28 96       	adiw	r28, 0x08	; 8
     868:	e9 e0       	ldi	r30, 0x09	; 9
     86a:	0c 94 d6 16 	jmp	0x2dac	; 0x2dac <__epilogue_restores__+0x12>

0000086e <__fixsfsi>:
     86e:	ac e0       	ldi	r26, 0x0C	; 12
     870:	b0 e0       	ldi	r27, 0x00	; 0
     872:	ed e3       	ldi	r30, 0x3D	; 61
     874:	f4 e0       	ldi	r31, 0x04	; 4
     876:	0c 94 c1 16 	jmp	0x2d82	; 0x2d82 <__prologue_saves__+0x20>
     87a:	69 83       	std	Y+1, r22	; 0x01
     87c:	7a 83       	std	Y+2, r23	; 0x02
     87e:	8b 83       	std	Y+3, r24	; 0x03
     880:	9c 83       	std	Y+4, r25	; 0x04
     882:	ce 01       	movw	r24, r28
     884:	01 96       	adiw	r24, 0x01	; 1
     886:	be 01       	movw	r22, r28
     888:	6b 5f       	subi	r22, 0xFB	; 251
     88a:	7f 4f       	sbci	r23, 0xFF	; 255
     88c:	0e 94 af 05 	call	0xb5e	; 0xb5e <__unpack_f>
     890:	8d 81       	ldd	r24, Y+5	; 0x05
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	61 f1       	breq	.+88     	; 0x8ee <__fixsfsi+0x80>
     896:	82 30       	cpi	r24, 0x02	; 2
     898:	50 f1       	brcs	.+84     	; 0x8ee <__fixsfsi+0x80>
     89a:	84 30       	cpi	r24, 0x04	; 4
     89c:	21 f4       	brne	.+8      	; 0x8a6 <__fixsfsi+0x38>
     89e:	8e 81       	ldd	r24, Y+6	; 0x06
     8a0:	88 23       	and	r24, r24
     8a2:	51 f1       	breq	.+84     	; 0x8f8 <__fixsfsi+0x8a>
     8a4:	2e c0       	rjmp	.+92     	; 0x902 <__fixsfsi+0x94>
     8a6:	2f 81       	ldd	r18, Y+7	; 0x07
     8a8:	38 85       	ldd	r19, Y+8	; 0x08
     8aa:	37 fd       	sbrc	r19, 7
     8ac:	20 c0       	rjmp	.+64     	; 0x8ee <__fixsfsi+0x80>
     8ae:	6e 81       	ldd	r22, Y+6	; 0x06
     8b0:	2f 31       	cpi	r18, 0x1F	; 31
     8b2:	31 05       	cpc	r19, r1
     8b4:	1c f0       	brlt	.+6      	; 0x8bc <__fixsfsi+0x4e>
     8b6:	66 23       	and	r22, r22
     8b8:	f9 f0       	breq	.+62     	; 0x8f8 <__fixsfsi+0x8a>
     8ba:	23 c0       	rjmp	.+70     	; 0x902 <__fixsfsi+0x94>
     8bc:	8e e1       	ldi	r24, 0x1E	; 30
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	82 1b       	sub	r24, r18
     8c2:	93 0b       	sbc	r25, r19
     8c4:	29 85       	ldd	r18, Y+9	; 0x09
     8c6:	3a 85       	ldd	r19, Y+10	; 0x0a
     8c8:	4b 85       	ldd	r20, Y+11	; 0x0b
     8ca:	5c 85       	ldd	r21, Y+12	; 0x0c
     8cc:	04 c0       	rjmp	.+8      	; 0x8d6 <__fixsfsi+0x68>
     8ce:	56 95       	lsr	r21
     8d0:	47 95       	ror	r20
     8d2:	37 95       	ror	r19
     8d4:	27 95       	ror	r18
     8d6:	8a 95       	dec	r24
     8d8:	d2 f7       	brpl	.-12     	; 0x8ce <__fixsfsi+0x60>
     8da:	66 23       	and	r22, r22
     8dc:	b1 f0       	breq	.+44     	; 0x90a <__fixsfsi+0x9c>
     8de:	50 95       	com	r21
     8e0:	40 95       	com	r20
     8e2:	30 95       	com	r19
     8e4:	21 95       	neg	r18
     8e6:	3f 4f       	sbci	r19, 0xFF	; 255
     8e8:	4f 4f       	sbci	r20, 0xFF	; 255
     8ea:	5f 4f       	sbci	r21, 0xFF	; 255
     8ec:	0e c0       	rjmp	.+28     	; 0x90a <__fixsfsi+0x9c>
     8ee:	20 e0       	ldi	r18, 0x00	; 0
     8f0:	30 e0       	ldi	r19, 0x00	; 0
     8f2:	40 e0       	ldi	r20, 0x00	; 0
     8f4:	50 e0       	ldi	r21, 0x00	; 0
     8f6:	09 c0       	rjmp	.+18     	; 0x90a <__fixsfsi+0x9c>
     8f8:	2f ef       	ldi	r18, 0xFF	; 255
     8fa:	3f ef       	ldi	r19, 0xFF	; 255
     8fc:	4f ef       	ldi	r20, 0xFF	; 255
     8fe:	5f e7       	ldi	r21, 0x7F	; 127
     900:	04 c0       	rjmp	.+8      	; 0x90a <__fixsfsi+0x9c>
     902:	20 e0       	ldi	r18, 0x00	; 0
     904:	30 e0       	ldi	r19, 0x00	; 0
     906:	40 e0       	ldi	r20, 0x00	; 0
     908:	50 e8       	ldi	r21, 0x80	; 128
     90a:	b9 01       	movw	r22, r18
     90c:	ca 01       	movw	r24, r20
     90e:	2c 96       	adiw	r28, 0x0c	; 12
     910:	e2 e0       	ldi	r30, 0x02	; 2
     912:	0c 94 dd 16 	jmp	0x2dba	; 0x2dba <__epilogue_restores__+0x20>

00000916 <__clzsi2>:
     916:	ef 92       	push	r14
     918:	ff 92       	push	r15
     91a:	0f 93       	push	r16
     91c:	1f 93       	push	r17
     91e:	7b 01       	movw	r14, r22
     920:	8c 01       	movw	r16, r24
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	e8 16       	cp	r14, r24
     926:	80 e0       	ldi	r24, 0x00	; 0
     928:	f8 06       	cpc	r15, r24
     92a:	81 e0       	ldi	r24, 0x01	; 1
     92c:	08 07       	cpc	r16, r24
     92e:	80 e0       	ldi	r24, 0x00	; 0
     930:	18 07       	cpc	r17, r24
     932:	88 f4       	brcc	.+34     	; 0x956 <__clzsi2+0x40>
     934:	8f ef       	ldi	r24, 0xFF	; 255
     936:	e8 16       	cp	r14, r24
     938:	f1 04       	cpc	r15, r1
     93a:	01 05       	cpc	r16, r1
     93c:	11 05       	cpc	r17, r1
     93e:	31 f0       	breq	.+12     	; 0x94c <__clzsi2+0x36>
     940:	28 f0       	brcs	.+10     	; 0x94c <__clzsi2+0x36>
     942:	88 e0       	ldi	r24, 0x08	; 8
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	a0 e0       	ldi	r26, 0x00	; 0
     948:	b0 e0       	ldi	r27, 0x00	; 0
     94a:	17 c0       	rjmp	.+46     	; 0x97a <__clzsi2+0x64>
     94c:	80 e0       	ldi	r24, 0x00	; 0
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	a0 e0       	ldi	r26, 0x00	; 0
     952:	b0 e0       	ldi	r27, 0x00	; 0
     954:	12 c0       	rjmp	.+36     	; 0x97a <__clzsi2+0x64>
     956:	80 e0       	ldi	r24, 0x00	; 0
     958:	e8 16       	cp	r14, r24
     95a:	80 e0       	ldi	r24, 0x00	; 0
     95c:	f8 06       	cpc	r15, r24
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	08 07       	cpc	r16, r24
     962:	81 e0       	ldi	r24, 0x01	; 1
     964:	18 07       	cpc	r17, r24
     966:	28 f0       	brcs	.+10     	; 0x972 <__clzsi2+0x5c>
     968:	88 e1       	ldi	r24, 0x18	; 24
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	a0 e0       	ldi	r26, 0x00	; 0
     96e:	b0 e0       	ldi	r27, 0x00	; 0
     970:	04 c0       	rjmp	.+8      	; 0x97a <__clzsi2+0x64>
     972:	80 e1       	ldi	r24, 0x10	; 16
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	a0 e0       	ldi	r26, 0x00	; 0
     978:	b0 e0       	ldi	r27, 0x00	; 0
     97a:	20 e2       	ldi	r18, 0x20	; 32
     97c:	30 e0       	ldi	r19, 0x00	; 0
     97e:	40 e0       	ldi	r20, 0x00	; 0
     980:	50 e0       	ldi	r21, 0x00	; 0
     982:	28 1b       	sub	r18, r24
     984:	39 0b       	sbc	r19, r25
     986:	4a 0b       	sbc	r20, r26
     988:	5b 0b       	sbc	r21, r27
     98a:	04 c0       	rjmp	.+8      	; 0x994 <__clzsi2+0x7e>
     98c:	16 95       	lsr	r17
     98e:	07 95       	ror	r16
     990:	f7 94       	ror	r15
     992:	e7 94       	ror	r14
     994:	8a 95       	dec	r24
     996:	d2 f7       	brpl	.-12     	; 0x98c <__clzsi2+0x76>
     998:	f7 01       	movw	r30, r14
     99a:	e8 59       	subi	r30, 0x98	; 152
     99c:	ff 4f       	sbci	r31, 0xFF	; 255
     99e:	80 81       	ld	r24, Z
     9a0:	28 1b       	sub	r18, r24
     9a2:	31 09       	sbc	r19, r1
     9a4:	41 09       	sbc	r20, r1
     9a6:	51 09       	sbc	r21, r1
     9a8:	c9 01       	movw	r24, r18
     9aa:	1f 91       	pop	r17
     9ac:	0f 91       	pop	r16
     9ae:	ff 90       	pop	r15
     9b0:	ef 90       	pop	r14
     9b2:	08 95       	ret

000009b4 <__pack_f>:
     9b4:	df 92       	push	r13
     9b6:	ef 92       	push	r14
     9b8:	ff 92       	push	r15
     9ba:	0f 93       	push	r16
     9bc:	1f 93       	push	r17
     9be:	fc 01       	movw	r30, r24
     9c0:	e4 80       	ldd	r14, Z+4	; 0x04
     9c2:	f5 80       	ldd	r15, Z+5	; 0x05
     9c4:	06 81       	ldd	r16, Z+6	; 0x06
     9c6:	17 81       	ldd	r17, Z+7	; 0x07
     9c8:	d1 80       	ldd	r13, Z+1	; 0x01
     9ca:	80 81       	ld	r24, Z
     9cc:	82 30       	cpi	r24, 0x02	; 2
     9ce:	48 f4       	brcc	.+18     	; 0x9e2 <__pack_f+0x2e>
     9d0:	80 e0       	ldi	r24, 0x00	; 0
     9d2:	90 e0       	ldi	r25, 0x00	; 0
     9d4:	a0 e1       	ldi	r26, 0x10	; 16
     9d6:	b0 e0       	ldi	r27, 0x00	; 0
     9d8:	e8 2a       	or	r14, r24
     9da:	f9 2a       	or	r15, r25
     9dc:	0a 2b       	or	r16, r26
     9de:	1b 2b       	or	r17, r27
     9e0:	a5 c0       	rjmp	.+330    	; 0xb2c <__pack_f+0x178>
     9e2:	84 30       	cpi	r24, 0x04	; 4
     9e4:	09 f4       	brne	.+2      	; 0x9e8 <__pack_f+0x34>
     9e6:	9f c0       	rjmp	.+318    	; 0xb26 <__pack_f+0x172>
     9e8:	82 30       	cpi	r24, 0x02	; 2
     9ea:	21 f4       	brne	.+8      	; 0x9f4 <__pack_f+0x40>
     9ec:	ee 24       	eor	r14, r14
     9ee:	ff 24       	eor	r15, r15
     9f0:	87 01       	movw	r16, r14
     9f2:	05 c0       	rjmp	.+10     	; 0x9fe <__pack_f+0x4a>
     9f4:	e1 14       	cp	r14, r1
     9f6:	f1 04       	cpc	r15, r1
     9f8:	01 05       	cpc	r16, r1
     9fa:	11 05       	cpc	r17, r1
     9fc:	19 f4       	brne	.+6      	; 0xa04 <__pack_f+0x50>
     9fe:	e0 e0       	ldi	r30, 0x00	; 0
     a00:	f0 e0       	ldi	r31, 0x00	; 0
     a02:	96 c0       	rjmp	.+300    	; 0xb30 <__pack_f+0x17c>
     a04:	62 81       	ldd	r22, Z+2	; 0x02
     a06:	73 81       	ldd	r23, Z+3	; 0x03
     a08:	9f ef       	ldi	r25, 0xFF	; 255
     a0a:	62 38       	cpi	r22, 0x82	; 130
     a0c:	79 07       	cpc	r23, r25
     a0e:	0c f0       	brlt	.+2      	; 0xa12 <__pack_f+0x5e>
     a10:	5b c0       	rjmp	.+182    	; 0xac8 <__pack_f+0x114>
     a12:	22 e8       	ldi	r18, 0x82	; 130
     a14:	3f ef       	ldi	r19, 0xFF	; 255
     a16:	26 1b       	sub	r18, r22
     a18:	37 0b       	sbc	r19, r23
     a1a:	2a 31       	cpi	r18, 0x1A	; 26
     a1c:	31 05       	cpc	r19, r1
     a1e:	2c f0       	brlt	.+10     	; 0xa2a <__pack_f+0x76>
     a20:	20 e0       	ldi	r18, 0x00	; 0
     a22:	30 e0       	ldi	r19, 0x00	; 0
     a24:	40 e0       	ldi	r20, 0x00	; 0
     a26:	50 e0       	ldi	r21, 0x00	; 0
     a28:	2a c0       	rjmp	.+84     	; 0xa7e <__pack_f+0xca>
     a2a:	b8 01       	movw	r22, r16
     a2c:	a7 01       	movw	r20, r14
     a2e:	02 2e       	mov	r0, r18
     a30:	04 c0       	rjmp	.+8      	; 0xa3a <__pack_f+0x86>
     a32:	76 95       	lsr	r23
     a34:	67 95       	ror	r22
     a36:	57 95       	ror	r21
     a38:	47 95       	ror	r20
     a3a:	0a 94       	dec	r0
     a3c:	d2 f7       	brpl	.-12     	; 0xa32 <__pack_f+0x7e>
     a3e:	81 e0       	ldi	r24, 0x01	; 1
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	b0 e0       	ldi	r27, 0x00	; 0
     a46:	04 c0       	rjmp	.+8      	; 0xa50 <__pack_f+0x9c>
     a48:	88 0f       	add	r24, r24
     a4a:	99 1f       	adc	r25, r25
     a4c:	aa 1f       	adc	r26, r26
     a4e:	bb 1f       	adc	r27, r27
     a50:	2a 95       	dec	r18
     a52:	d2 f7       	brpl	.-12     	; 0xa48 <__pack_f+0x94>
     a54:	01 97       	sbiw	r24, 0x01	; 1
     a56:	a1 09       	sbc	r26, r1
     a58:	b1 09       	sbc	r27, r1
     a5a:	8e 21       	and	r24, r14
     a5c:	9f 21       	and	r25, r15
     a5e:	a0 23       	and	r26, r16
     a60:	b1 23       	and	r27, r17
     a62:	00 97       	sbiw	r24, 0x00	; 0
     a64:	a1 05       	cpc	r26, r1
     a66:	b1 05       	cpc	r27, r1
     a68:	21 f0       	breq	.+8      	; 0xa72 <__pack_f+0xbe>
     a6a:	81 e0       	ldi	r24, 0x01	; 1
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	9a 01       	movw	r18, r20
     a74:	ab 01       	movw	r20, r22
     a76:	28 2b       	or	r18, r24
     a78:	39 2b       	or	r19, r25
     a7a:	4a 2b       	or	r20, r26
     a7c:	5b 2b       	or	r21, r27
     a7e:	da 01       	movw	r26, r20
     a80:	c9 01       	movw	r24, r18
     a82:	8f 77       	andi	r24, 0x7F	; 127
     a84:	90 70       	andi	r25, 0x00	; 0
     a86:	a0 70       	andi	r26, 0x00	; 0
     a88:	b0 70       	andi	r27, 0x00	; 0
     a8a:	80 34       	cpi	r24, 0x40	; 64
     a8c:	91 05       	cpc	r25, r1
     a8e:	a1 05       	cpc	r26, r1
     a90:	b1 05       	cpc	r27, r1
     a92:	39 f4       	brne	.+14     	; 0xaa2 <__pack_f+0xee>
     a94:	27 ff       	sbrs	r18, 7
     a96:	09 c0       	rjmp	.+18     	; 0xaaa <__pack_f+0xf6>
     a98:	20 5c       	subi	r18, 0xC0	; 192
     a9a:	3f 4f       	sbci	r19, 0xFF	; 255
     a9c:	4f 4f       	sbci	r20, 0xFF	; 255
     a9e:	5f 4f       	sbci	r21, 0xFF	; 255
     aa0:	04 c0       	rjmp	.+8      	; 0xaaa <__pack_f+0xf6>
     aa2:	21 5c       	subi	r18, 0xC1	; 193
     aa4:	3f 4f       	sbci	r19, 0xFF	; 255
     aa6:	4f 4f       	sbci	r20, 0xFF	; 255
     aa8:	5f 4f       	sbci	r21, 0xFF	; 255
     aaa:	e0 e0       	ldi	r30, 0x00	; 0
     aac:	f0 e0       	ldi	r31, 0x00	; 0
     aae:	20 30       	cpi	r18, 0x00	; 0
     ab0:	a0 e0       	ldi	r26, 0x00	; 0
     ab2:	3a 07       	cpc	r19, r26
     ab4:	a0 e0       	ldi	r26, 0x00	; 0
     ab6:	4a 07       	cpc	r20, r26
     ab8:	a0 e4       	ldi	r26, 0x40	; 64
     aba:	5a 07       	cpc	r21, r26
     abc:	10 f0       	brcs	.+4      	; 0xac2 <__pack_f+0x10e>
     abe:	e1 e0       	ldi	r30, 0x01	; 1
     ac0:	f0 e0       	ldi	r31, 0x00	; 0
     ac2:	79 01       	movw	r14, r18
     ac4:	8a 01       	movw	r16, r20
     ac6:	27 c0       	rjmp	.+78     	; 0xb16 <__pack_f+0x162>
     ac8:	60 38       	cpi	r22, 0x80	; 128
     aca:	71 05       	cpc	r23, r1
     acc:	64 f5       	brge	.+88     	; 0xb26 <__pack_f+0x172>
     ace:	fb 01       	movw	r30, r22
     ad0:	e1 58       	subi	r30, 0x81	; 129
     ad2:	ff 4f       	sbci	r31, 0xFF	; 255
     ad4:	d8 01       	movw	r26, r16
     ad6:	c7 01       	movw	r24, r14
     ad8:	8f 77       	andi	r24, 0x7F	; 127
     ada:	90 70       	andi	r25, 0x00	; 0
     adc:	a0 70       	andi	r26, 0x00	; 0
     ade:	b0 70       	andi	r27, 0x00	; 0
     ae0:	80 34       	cpi	r24, 0x40	; 64
     ae2:	91 05       	cpc	r25, r1
     ae4:	a1 05       	cpc	r26, r1
     ae6:	b1 05       	cpc	r27, r1
     ae8:	39 f4       	brne	.+14     	; 0xaf8 <__pack_f+0x144>
     aea:	e7 fe       	sbrs	r14, 7
     aec:	0d c0       	rjmp	.+26     	; 0xb08 <__pack_f+0x154>
     aee:	80 e4       	ldi	r24, 0x40	; 64
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	a0 e0       	ldi	r26, 0x00	; 0
     af4:	b0 e0       	ldi	r27, 0x00	; 0
     af6:	04 c0       	rjmp	.+8      	; 0xb00 <__pack_f+0x14c>
     af8:	8f e3       	ldi	r24, 0x3F	; 63
     afa:	90 e0       	ldi	r25, 0x00	; 0
     afc:	a0 e0       	ldi	r26, 0x00	; 0
     afe:	b0 e0       	ldi	r27, 0x00	; 0
     b00:	e8 0e       	add	r14, r24
     b02:	f9 1e       	adc	r15, r25
     b04:	0a 1f       	adc	r16, r26
     b06:	1b 1f       	adc	r17, r27
     b08:	17 ff       	sbrs	r17, 7
     b0a:	05 c0       	rjmp	.+10     	; 0xb16 <__pack_f+0x162>
     b0c:	16 95       	lsr	r17
     b0e:	07 95       	ror	r16
     b10:	f7 94       	ror	r15
     b12:	e7 94       	ror	r14
     b14:	31 96       	adiw	r30, 0x01	; 1
     b16:	87 e0       	ldi	r24, 0x07	; 7
     b18:	16 95       	lsr	r17
     b1a:	07 95       	ror	r16
     b1c:	f7 94       	ror	r15
     b1e:	e7 94       	ror	r14
     b20:	8a 95       	dec	r24
     b22:	d1 f7       	brne	.-12     	; 0xb18 <__pack_f+0x164>
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__pack_f+0x17c>
     b26:	ee 24       	eor	r14, r14
     b28:	ff 24       	eor	r15, r15
     b2a:	87 01       	movw	r16, r14
     b2c:	ef ef       	ldi	r30, 0xFF	; 255
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	6e 2f       	mov	r22, r30
     b32:	67 95       	ror	r22
     b34:	66 27       	eor	r22, r22
     b36:	67 95       	ror	r22
     b38:	90 2f       	mov	r25, r16
     b3a:	9f 77       	andi	r25, 0x7F	; 127
     b3c:	d7 94       	ror	r13
     b3e:	dd 24       	eor	r13, r13
     b40:	d7 94       	ror	r13
     b42:	8e 2f       	mov	r24, r30
     b44:	86 95       	lsr	r24
     b46:	49 2f       	mov	r20, r25
     b48:	46 2b       	or	r20, r22
     b4a:	58 2f       	mov	r21, r24
     b4c:	5d 29       	or	r21, r13
     b4e:	b7 01       	movw	r22, r14
     b50:	ca 01       	movw	r24, r20
     b52:	1f 91       	pop	r17
     b54:	0f 91       	pop	r16
     b56:	ff 90       	pop	r15
     b58:	ef 90       	pop	r14
     b5a:	df 90       	pop	r13
     b5c:	08 95       	ret

00000b5e <__unpack_f>:
     b5e:	fc 01       	movw	r30, r24
     b60:	db 01       	movw	r26, r22
     b62:	40 81       	ld	r20, Z
     b64:	51 81       	ldd	r21, Z+1	; 0x01
     b66:	22 81       	ldd	r18, Z+2	; 0x02
     b68:	62 2f       	mov	r22, r18
     b6a:	6f 77       	andi	r22, 0x7F	; 127
     b6c:	70 e0       	ldi	r23, 0x00	; 0
     b6e:	22 1f       	adc	r18, r18
     b70:	22 27       	eor	r18, r18
     b72:	22 1f       	adc	r18, r18
     b74:	93 81       	ldd	r25, Z+3	; 0x03
     b76:	89 2f       	mov	r24, r25
     b78:	88 0f       	add	r24, r24
     b7a:	82 2b       	or	r24, r18
     b7c:	28 2f       	mov	r18, r24
     b7e:	30 e0       	ldi	r19, 0x00	; 0
     b80:	99 1f       	adc	r25, r25
     b82:	99 27       	eor	r25, r25
     b84:	99 1f       	adc	r25, r25
     b86:	11 96       	adiw	r26, 0x01	; 1
     b88:	9c 93       	st	X, r25
     b8a:	11 97       	sbiw	r26, 0x01	; 1
     b8c:	21 15       	cp	r18, r1
     b8e:	31 05       	cpc	r19, r1
     b90:	a9 f5       	brne	.+106    	; 0xbfc <__unpack_f+0x9e>
     b92:	41 15       	cp	r20, r1
     b94:	51 05       	cpc	r21, r1
     b96:	61 05       	cpc	r22, r1
     b98:	71 05       	cpc	r23, r1
     b9a:	11 f4       	brne	.+4      	; 0xba0 <__unpack_f+0x42>
     b9c:	82 e0       	ldi	r24, 0x02	; 2
     b9e:	37 c0       	rjmp	.+110    	; 0xc0e <__unpack_f+0xb0>
     ba0:	82 e8       	ldi	r24, 0x82	; 130
     ba2:	9f ef       	ldi	r25, 0xFF	; 255
     ba4:	13 96       	adiw	r26, 0x03	; 3
     ba6:	9c 93       	st	X, r25
     ba8:	8e 93       	st	-X, r24
     baa:	12 97       	sbiw	r26, 0x02	; 2
     bac:	9a 01       	movw	r18, r20
     bae:	ab 01       	movw	r20, r22
     bb0:	67 e0       	ldi	r22, 0x07	; 7
     bb2:	22 0f       	add	r18, r18
     bb4:	33 1f       	adc	r19, r19
     bb6:	44 1f       	adc	r20, r20
     bb8:	55 1f       	adc	r21, r21
     bba:	6a 95       	dec	r22
     bbc:	d1 f7       	brne	.-12     	; 0xbb2 <__unpack_f+0x54>
     bbe:	83 e0       	ldi	r24, 0x03	; 3
     bc0:	8c 93       	st	X, r24
     bc2:	0d c0       	rjmp	.+26     	; 0xbde <__unpack_f+0x80>
     bc4:	22 0f       	add	r18, r18
     bc6:	33 1f       	adc	r19, r19
     bc8:	44 1f       	adc	r20, r20
     bca:	55 1f       	adc	r21, r21
     bcc:	12 96       	adiw	r26, 0x02	; 2
     bce:	8d 91       	ld	r24, X+
     bd0:	9c 91       	ld	r25, X
     bd2:	13 97       	sbiw	r26, 0x03	; 3
     bd4:	01 97       	sbiw	r24, 0x01	; 1
     bd6:	13 96       	adiw	r26, 0x03	; 3
     bd8:	9c 93       	st	X, r25
     bda:	8e 93       	st	-X, r24
     bdc:	12 97       	sbiw	r26, 0x02	; 2
     bde:	20 30       	cpi	r18, 0x00	; 0
     be0:	80 e0       	ldi	r24, 0x00	; 0
     be2:	38 07       	cpc	r19, r24
     be4:	80 e0       	ldi	r24, 0x00	; 0
     be6:	48 07       	cpc	r20, r24
     be8:	80 e4       	ldi	r24, 0x40	; 64
     bea:	58 07       	cpc	r21, r24
     bec:	58 f3       	brcs	.-42     	; 0xbc4 <__unpack_f+0x66>
     bee:	14 96       	adiw	r26, 0x04	; 4
     bf0:	2d 93       	st	X+, r18
     bf2:	3d 93       	st	X+, r19
     bf4:	4d 93       	st	X+, r20
     bf6:	5c 93       	st	X, r21
     bf8:	17 97       	sbiw	r26, 0x07	; 7
     bfa:	08 95       	ret
     bfc:	2f 3f       	cpi	r18, 0xFF	; 255
     bfe:	31 05       	cpc	r19, r1
     c00:	79 f4       	brne	.+30     	; 0xc20 <__unpack_f+0xc2>
     c02:	41 15       	cp	r20, r1
     c04:	51 05       	cpc	r21, r1
     c06:	61 05       	cpc	r22, r1
     c08:	71 05       	cpc	r23, r1
     c0a:	19 f4       	brne	.+6      	; 0xc12 <__unpack_f+0xb4>
     c0c:	84 e0       	ldi	r24, 0x04	; 4
     c0e:	8c 93       	st	X, r24
     c10:	08 95       	ret
     c12:	64 ff       	sbrs	r22, 4
     c14:	03 c0       	rjmp	.+6      	; 0xc1c <__unpack_f+0xbe>
     c16:	81 e0       	ldi	r24, 0x01	; 1
     c18:	8c 93       	st	X, r24
     c1a:	12 c0       	rjmp	.+36     	; 0xc40 <__unpack_f+0xe2>
     c1c:	1c 92       	st	X, r1
     c1e:	10 c0       	rjmp	.+32     	; 0xc40 <__unpack_f+0xe2>
     c20:	2f 57       	subi	r18, 0x7F	; 127
     c22:	30 40       	sbci	r19, 0x00	; 0
     c24:	13 96       	adiw	r26, 0x03	; 3
     c26:	3c 93       	st	X, r19
     c28:	2e 93       	st	-X, r18
     c2a:	12 97       	sbiw	r26, 0x02	; 2
     c2c:	83 e0       	ldi	r24, 0x03	; 3
     c2e:	8c 93       	st	X, r24
     c30:	87 e0       	ldi	r24, 0x07	; 7
     c32:	44 0f       	add	r20, r20
     c34:	55 1f       	adc	r21, r21
     c36:	66 1f       	adc	r22, r22
     c38:	77 1f       	adc	r23, r23
     c3a:	8a 95       	dec	r24
     c3c:	d1 f7       	brne	.-12     	; 0xc32 <__unpack_f+0xd4>
     c3e:	70 64       	ori	r23, 0x40	; 64
     c40:	14 96       	adiw	r26, 0x04	; 4
     c42:	4d 93       	st	X+, r20
     c44:	5d 93       	st	X+, r21
     c46:	6d 93       	st	X+, r22
     c48:	7c 93       	st	X, r23
     c4a:	17 97       	sbiw	r26, 0x07	; 7
     c4c:	08 95       	ret

00000c4e <__fpcmp_parts_f>:
     c4e:	1f 93       	push	r17
     c50:	dc 01       	movw	r26, r24
     c52:	fb 01       	movw	r30, r22
     c54:	9c 91       	ld	r25, X
     c56:	92 30       	cpi	r25, 0x02	; 2
     c58:	08 f4       	brcc	.+2      	; 0xc5c <__fpcmp_parts_f+0xe>
     c5a:	47 c0       	rjmp	.+142    	; 0xcea <__fpcmp_parts_f+0x9c>
     c5c:	80 81       	ld	r24, Z
     c5e:	82 30       	cpi	r24, 0x02	; 2
     c60:	08 f4       	brcc	.+2      	; 0xc64 <__fpcmp_parts_f+0x16>
     c62:	43 c0       	rjmp	.+134    	; 0xcea <__fpcmp_parts_f+0x9c>
     c64:	94 30       	cpi	r25, 0x04	; 4
     c66:	51 f4       	brne	.+20     	; 0xc7c <__fpcmp_parts_f+0x2e>
     c68:	11 96       	adiw	r26, 0x01	; 1
     c6a:	1c 91       	ld	r17, X
     c6c:	84 30       	cpi	r24, 0x04	; 4
     c6e:	99 f5       	brne	.+102    	; 0xcd6 <__fpcmp_parts_f+0x88>
     c70:	81 81       	ldd	r24, Z+1	; 0x01
     c72:	68 2f       	mov	r22, r24
     c74:	70 e0       	ldi	r23, 0x00	; 0
     c76:	61 1b       	sub	r22, r17
     c78:	71 09       	sbc	r23, r1
     c7a:	3f c0       	rjmp	.+126    	; 0xcfa <__fpcmp_parts_f+0xac>
     c7c:	84 30       	cpi	r24, 0x04	; 4
     c7e:	21 f0       	breq	.+8      	; 0xc88 <__fpcmp_parts_f+0x3a>
     c80:	92 30       	cpi	r25, 0x02	; 2
     c82:	31 f4       	brne	.+12     	; 0xc90 <__fpcmp_parts_f+0x42>
     c84:	82 30       	cpi	r24, 0x02	; 2
     c86:	b9 f1       	breq	.+110    	; 0xcf6 <__fpcmp_parts_f+0xa8>
     c88:	81 81       	ldd	r24, Z+1	; 0x01
     c8a:	88 23       	and	r24, r24
     c8c:	89 f1       	breq	.+98     	; 0xcf0 <__fpcmp_parts_f+0xa2>
     c8e:	2d c0       	rjmp	.+90     	; 0xcea <__fpcmp_parts_f+0x9c>
     c90:	11 96       	adiw	r26, 0x01	; 1
     c92:	1c 91       	ld	r17, X
     c94:	11 97       	sbiw	r26, 0x01	; 1
     c96:	82 30       	cpi	r24, 0x02	; 2
     c98:	f1 f0       	breq	.+60     	; 0xcd6 <__fpcmp_parts_f+0x88>
     c9a:	81 81       	ldd	r24, Z+1	; 0x01
     c9c:	18 17       	cp	r17, r24
     c9e:	d9 f4       	brne	.+54     	; 0xcd6 <__fpcmp_parts_f+0x88>
     ca0:	12 96       	adiw	r26, 0x02	; 2
     ca2:	2d 91       	ld	r18, X+
     ca4:	3c 91       	ld	r19, X
     ca6:	13 97       	sbiw	r26, 0x03	; 3
     ca8:	82 81       	ldd	r24, Z+2	; 0x02
     caa:	93 81       	ldd	r25, Z+3	; 0x03
     cac:	82 17       	cp	r24, r18
     cae:	93 07       	cpc	r25, r19
     cb0:	94 f0       	brlt	.+36     	; 0xcd6 <__fpcmp_parts_f+0x88>
     cb2:	28 17       	cp	r18, r24
     cb4:	39 07       	cpc	r19, r25
     cb6:	bc f0       	brlt	.+46     	; 0xce6 <__fpcmp_parts_f+0x98>
     cb8:	14 96       	adiw	r26, 0x04	; 4
     cba:	8d 91       	ld	r24, X+
     cbc:	9d 91       	ld	r25, X+
     cbe:	0d 90       	ld	r0, X+
     cc0:	bc 91       	ld	r27, X
     cc2:	a0 2d       	mov	r26, r0
     cc4:	24 81       	ldd	r18, Z+4	; 0x04
     cc6:	35 81       	ldd	r19, Z+5	; 0x05
     cc8:	46 81       	ldd	r20, Z+6	; 0x06
     cca:	57 81       	ldd	r21, Z+7	; 0x07
     ccc:	28 17       	cp	r18, r24
     cce:	39 07       	cpc	r19, r25
     cd0:	4a 07       	cpc	r20, r26
     cd2:	5b 07       	cpc	r21, r27
     cd4:	18 f4       	brcc	.+6      	; 0xcdc <__fpcmp_parts_f+0x8e>
     cd6:	11 23       	and	r17, r17
     cd8:	41 f0       	breq	.+16     	; 0xcea <__fpcmp_parts_f+0x9c>
     cda:	0a c0       	rjmp	.+20     	; 0xcf0 <__fpcmp_parts_f+0xa2>
     cdc:	82 17       	cp	r24, r18
     cde:	93 07       	cpc	r25, r19
     ce0:	a4 07       	cpc	r26, r20
     ce2:	b5 07       	cpc	r27, r21
     ce4:	40 f4       	brcc	.+16     	; 0xcf6 <__fpcmp_parts_f+0xa8>
     ce6:	11 23       	and	r17, r17
     ce8:	19 f0       	breq	.+6      	; 0xcf0 <__fpcmp_parts_f+0xa2>
     cea:	61 e0       	ldi	r22, 0x01	; 1
     cec:	70 e0       	ldi	r23, 0x00	; 0
     cee:	05 c0       	rjmp	.+10     	; 0xcfa <__fpcmp_parts_f+0xac>
     cf0:	6f ef       	ldi	r22, 0xFF	; 255
     cf2:	7f ef       	ldi	r23, 0xFF	; 255
     cf4:	02 c0       	rjmp	.+4      	; 0xcfa <__fpcmp_parts_f+0xac>
     cf6:	60 e0       	ldi	r22, 0x00	; 0
     cf8:	70 e0       	ldi	r23, 0x00	; 0
     cfa:	cb 01       	movw	r24, r22
     cfc:	1f 91       	pop	r17
     cfe:	08 95       	ret

00000d00 <C_LCD_voidSendCommand>:

#include "CLCD_private.h"


void C_LCD_voidSendCommand(u8 Copy_u8Command)
{
     d00:	1f 93       	push	r17
     d02:	df 93       	push	r29
     d04:	cf 93       	push	r28
     d06:	cd b7       	in	r28, 0x3d	; 61
     d08:	de b7       	in	r29, 0x3e	; 62
     d0a:	ea 97       	sbiw	r28, 0x3a	; 58
     d0c:	0f b6       	in	r0, 0x3f	; 63
     d0e:	f8 94       	cli
     d10:	de bf       	out	0x3e, r29	; 62
     d12:	0f be       	out	0x3f, r0	; 63
     d14:	cd bf       	out	0x3d, r28	; 61
     d16:	8a af       	std	Y+58, r24	; 0x3a
	/*Set RS Pin to low to send command */
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_LOW);
     d18:	80 e0       	ldi	r24, 0x00	; 0
     d1a:	61 e0       	ldi	r22, 0x01	; 1
     d1c:	40 e0       	ldi	r20, 0x00	; 0
     d1e:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <DIO_u8SetPinValue>
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);

#elif   MODE_SELECT ==_4_BIT_MODE

	u8 Local_u8Command = (((Copy_u8Command>>1 ) & CLCD_COMMAND_MASK) | DIO_u8AndWithPort(CLCD_DATA_PORT, CLCD_DATA_PORT_MASK));
     d22:	8a ad       	ldd	r24, Y+58	; 0x3a
     d24:	86 95       	lsr	r24
     d26:	18 2f       	mov	r17, r24
     d28:	18 77       	andi	r17, 0x78	; 120
     d2a:	80 e0       	ldi	r24, 0x00	; 0
     d2c:	67 e8       	ldi	r22, 0x87	; 135
     d2e:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <DIO_u8AndWithPort>
     d32:	81 2b       	or	r24, r17
     d34:	89 af       	std	Y+57, r24	; 0x39
	/* Set Command to data pins */
	DIO_u8SetPortValue(CLCD_DATA_PORT,Local_u8Command);
     d36:	80 e0       	ldi	r24, 0x00	; 0
     d38:	69 ad       	ldd	r22, Y+57	; 0x39
     d3a:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <DIO_u8SetPortValue>

	/*Send Enable pulse */
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
     d3e:	80 e0       	ldi	r24, 0x00	; 0
     d40:	62 e0       	ldi	r22, 0x02	; 2
     d42:	41 e0       	ldi	r20, 0x01	; 1
     d44:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <DIO_u8SetPinValue>
     d48:	80 e0       	ldi	r24, 0x00	; 0
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	a0 e0       	ldi	r26, 0x00	; 0
     d4e:	b0 e4       	ldi	r27, 0x40	; 64
     d50:	8d ab       	std	Y+53, r24	; 0x35
     d52:	9e ab       	std	Y+54, r25	; 0x36
     d54:	af ab       	std	Y+55, r26	; 0x37
     d56:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d58:	6d a9       	ldd	r22, Y+53	; 0x35
     d5a:	7e a9       	ldd	r23, Y+54	; 0x36
     d5c:	8f a9       	ldd	r24, Y+55	; 0x37
     d5e:	98 ad       	ldd	r25, Y+56	; 0x38
     d60:	20 e0       	ldi	r18, 0x00	; 0
     d62:	30 e0       	ldi	r19, 0x00	; 0
     d64:	4a ef       	ldi	r20, 0xFA	; 250
     d66:	54 e4       	ldi	r21, 0x44	; 68
     d68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d6c:	dc 01       	movw	r26, r24
     d6e:	cb 01       	movw	r24, r22
     d70:	89 ab       	std	Y+49, r24	; 0x31
     d72:	9a ab       	std	Y+50, r25	; 0x32
     d74:	ab ab       	std	Y+51, r26	; 0x33
     d76:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     d78:	69 a9       	ldd	r22, Y+49	; 0x31
     d7a:	7a a9       	ldd	r23, Y+50	; 0x32
     d7c:	8b a9       	ldd	r24, Y+51	; 0x33
     d7e:	9c a9       	ldd	r25, Y+52	; 0x34
     d80:	20 e0       	ldi	r18, 0x00	; 0
     d82:	30 e0       	ldi	r19, 0x00	; 0
     d84:	40 e8       	ldi	r20, 0x80	; 128
     d86:	5f e3       	ldi	r21, 0x3F	; 63
     d88:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
     d8c:	88 23       	and	r24, r24
     d8e:	2c f4       	brge	.+10     	; 0xd9a <C_LCD_voidSendCommand+0x9a>
		__ticks = 1;
     d90:	81 e0       	ldi	r24, 0x01	; 1
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	98 ab       	std	Y+48, r25	; 0x30
     d96:	8f a7       	std	Y+47, r24	; 0x2f
     d98:	3f c0       	rjmp	.+126    	; 0xe18 <C_LCD_voidSendCommand+0x118>
	else if (__tmp > 65535)
     d9a:	69 a9       	ldd	r22, Y+49	; 0x31
     d9c:	7a a9       	ldd	r23, Y+50	; 0x32
     d9e:	8b a9       	ldd	r24, Y+51	; 0x33
     da0:	9c a9       	ldd	r25, Y+52	; 0x34
     da2:	20 e0       	ldi	r18, 0x00	; 0
     da4:	3f ef       	ldi	r19, 0xFF	; 255
     da6:	4f e7       	ldi	r20, 0x7F	; 127
     da8:	57 e4       	ldi	r21, 0x47	; 71
     daa:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
     dae:	18 16       	cp	r1, r24
     db0:	4c f5       	brge	.+82     	; 0xe04 <C_LCD_voidSendCommand+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     db2:	6d a9       	ldd	r22, Y+53	; 0x35
     db4:	7e a9       	ldd	r23, Y+54	; 0x36
     db6:	8f a9       	ldd	r24, Y+55	; 0x37
     db8:	98 ad       	ldd	r25, Y+56	; 0x38
     dba:	20 e0       	ldi	r18, 0x00	; 0
     dbc:	30 e0       	ldi	r19, 0x00	; 0
     dbe:	40 e2       	ldi	r20, 0x20	; 32
     dc0:	51 e4       	ldi	r21, 0x41	; 65
     dc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dc6:	dc 01       	movw	r26, r24
     dc8:	cb 01       	movw	r24, r22
     dca:	bc 01       	movw	r22, r24
     dcc:	cd 01       	movw	r24, r26
     dce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dd2:	dc 01       	movw	r26, r24
     dd4:	cb 01       	movw	r24, r22
     dd6:	98 ab       	std	Y+48, r25	; 0x30
     dd8:	8f a7       	std	Y+47, r24	; 0x2f
     dda:	0f c0       	rjmp	.+30     	; 0xdfa <C_LCD_voidSendCommand+0xfa>
     ddc:	88 ec       	ldi	r24, 0xC8	; 200
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	9e a7       	std	Y+46, r25	; 0x2e
     de2:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     de4:	8d a5       	ldd	r24, Y+45	; 0x2d
     de6:	9e a5       	ldd	r25, Y+46	; 0x2e
     de8:	01 97       	sbiw	r24, 0x01	; 1
     dea:	f1 f7       	brne	.-4      	; 0xde8 <C_LCD_voidSendCommand+0xe8>
     dec:	9e a7       	std	Y+46, r25	; 0x2e
     dee:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     df0:	8f a5       	ldd	r24, Y+47	; 0x2f
     df2:	98 a9       	ldd	r25, Y+48	; 0x30
     df4:	01 97       	sbiw	r24, 0x01	; 1
     df6:	98 ab       	std	Y+48, r25	; 0x30
     df8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dfa:	8f a5       	ldd	r24, Y+47	; 0x2f
     dfc:	98 a9       	ldd	r25, Y+48	; 0x30
     dfe:	00 97       	sbiw	r24, 0x00	; 0
     e00:	69 f7       	brne	.-38     	; 0xddc <C_LCD_voidSendCommand+0xdc>
     e02:	14 c0       	rjmp	.+40     	; 0xe2c <C_LCD_voidSendCommand+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e04:	69 a9       	ldd	r22, Y+49	; 0x31
     e06:	7a a9       	ldd	r23, Y+50	; 0x32
     e08:	8b a9       	ldd	r24, Y+51	; 0x33
     e0a:	9c a9       	ldd	r25, Y+52	; 0x34
     e0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e10:	dc 01       	movw	r26, r24
     e12:	cb 01       	movw	r24, r22
     e14:	98 ab       	std	Y+48, r25	; 0x30
     e16:	8f a7       	std	Y+47, r24	; 0x2f
     e18:	8f a5       	ldd	r24, Y+47	; 0x2f
     e1a:	98 a9       	ldd	r25, Y+48	; 0x30
     e1c:	9c a7       	std	Y+44, r25	; 0x2c
     e1e:	8b a7       	std	Y+43, r24	; 0x2b
     e20:	8b a5       	ldd	r24, Y+43	; 0x2b
     e22:	9c a5       	ldd	r25, Y+44	; 0x2c
     e24:	01 97       	sbiw	r24, 0x01	; 1
     e26:	f1 f7       	brne	.-4      	; 0xe24 <C_LCD_voidSendCommand+0x124>
     e28:	9c a7       	std	Y+44, r25	; 0x2c
     e2a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
     e2c:	80 e0       	ldi	r24, 0x00	; 0
     e2e:	62 e0       	ldi	r22, 0x02	; 2
     e30:	40 e0       	ldi	r20, 0x00	; 0
     e32:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <DIO_u8SetPinValue>
     e36:	80 e0       	ldi	r24, 0x00	; 0
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	a0 ea       	ldi	r26, 0xA0	; 160
     e3c:	b0 e4       	ldi	r27, 0x40	; 64
     e3e:	8f a3       	std	Y+39, r24	; 0x27
     e40:	98 a7       	std	Y+40, r25	; 0x28
     e42:	a9 a7       	std	Y+41, r26	; 0x29
     e44:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e46:	6f a1       	ldd	r22, Y+39	; 0x27
     e48:	78 a5       	ldd	r23, Y+40	; 0x28
     e4a:	89 a5       	ldd	r24, Y+41	; 0x29
     e4c:	9a a5       	ldd	r25, Y+42	; 0x2a
     e4e:	20 e0       	ldi	r18, 0x00	; 0
     e50:	30 e0       	ldi	r19, 0x00	; 0
     e52:	4a ef       	ldi	r20, 0xFA	; 250
     e54:	54 e4       	ldi	r21, 0x44	; 68
     e56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e5a:	dc 01       	movw	r26, r24
     e5c:	cb 01       	movw	r24, r22
     e5e:	8b a3       	std	Y+35, r24	; 0x23
     e60:	9c a3       	std	Y+36, r25	; 0x24
     e62:	ad a3       	std	Y+37, r26	; 0x25
     e64:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     e66:	6b a1       	ldd	r22, Y+35	; 0x23
     e68:	7c a1       	ldd	r23, Y+36	; 0x24
     e6a:	8d a1       	ldd	r24, Y+37	; 0x25
     e6c:	9e a1       	ldd	r25, Y+38	; 0x26
     e6e:	20 e0       	ldi	r18, 0x00	; 0
     e70:	30 e0       	ldi	r19, 0x00	; 0
     e72:	40 e8       	ldi	r20, 0x80	; 128
     e74:	5f e3       	ldi	r21, 0x3F	; 63
     e76:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
     e7a:	88 23       	and	r24, r24
     e7c:	2c f4       	brge	.+10     	; 0xe88 <C_LCD_voidSendCommand+0x188>
		__ticks = 1;
     e7e:	81 e0       	ldi	r24, 0x01	; 1
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	9a a3       	std	Y+34, r25	; 0x22
     e84:	89 a3       	std	Y+33, r24	; 0x21
     e86:	3f c0       	rjmp	.+126    	; 0xf06 <C_LCD_voidSendCommand+0x206>
	else if (__tmp > 65535)
     e88:	6b a1       	ldd	r22, Y+35	; 0x23
     e8a:	7c a1       	ldd	r23, Y+36	; 0x24
     e8c:	8d a1       	ldd	r24, Y+37	; 0x25
     e8e:	9e a1       	ldd	r25, Y+38	; 0x26
     e90:	20 e0       	ldi	r18, 0x00	; 0
     e92:	3f ef       	ldi	r19, 0xFF	; 255
     e94:	4f e7       	ldi	r20, 0x7F	; 127
     e96:	57 e4       	ldi	r21, 0x47	; 71
     e98:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
     e9c:	18 16       	cp	r1, r24
     e9e:	4c f5       	brge	.+82     	; 0xef2 <C_LCD_voidSendCommand+0x1f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ea0:	6f a1       	ldd	r22, Y+39	; 0x27
     ea2:	78 a5       	ldd	r23, Y+40	; 0x28
     ea4:	89 a5       	ldd	r24, Y+41	; 0x29
     ea6:	9a a5       	ldd	r25, Y+42	; 0x2a
     ea8:	20 e0       	ldi	r18, 0x00	; 0
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	40 e2       	ldi	r20, 0x20	; 32
     eae:	51 e4       	ldi	r21, 0x41	; 65
     eb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eb4:	dc 01       	movw	r26, r24
     eb6:	cb 01       	movw	r24, r22
     eb8:	bc 01       	movw	r22, r24
     eba:	cd 01       	movw	r24, r26
     ebc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ec0:	dc 01       	movw	r26, r24
     ec2:	cb 01       	movw	r24, r22
     ec4:	9a a3       	std	Y+34, r25	; 0x22
     ec6:	89 a3       	std	Y+33, r24	; 0x21
     ec8:	0f c0       	rjmp	.+30     	; 0xee8 <C_LCD_voidSendCommand+0x1e8>
     eca:	88 ec       	ldi	r24, 0xC8	; 200
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	98 a3       	std	Y+32, r25	; 0x20
     ed0:	8f 8f       	std	Y+31, r24	; 0x1f
     ed2:	8f 8d       	ldd	r24, Y+31	; 0x1f
     ed4:	98 a1       	ldd	r25, Y+32	; 0x20
     ed6:	01 97       	sbiw	r24, 0x01	; 1
     ed8:	f1 f7       	brne	.-4      	; 0xed6 <C_LCD_voidSendCommand+0x1d6>
     eda:	98 a3       	std	Y+32, r25	; 0x20
     edc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ede:	89 a1       	ldd	r24, Y+33	; 0x21
     ee0:	9a a1       	ldd	r25, Y+34	; 0x22
     ee2:	01 97       	sbiw	r24, 0x01	; 1
     ee4:	9a a3       	std	Y+34, r25	; 0x22
     ee6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ee8:	89 a1       	ldd	r24, Y+33	; 0x21
     eea:	9a a1       	ldd	r25, Y+34	; 0x22
     eec:	00 97       	sbiw	r24, 0x00	; 0
     eee:	69 f7       	brne	.-38     	; 0xeca <C_LCD_voidSendCommand+0x1ca>
     ef0:	14 c0       	rjmp	.+40     	; 0xf1a <C_LCD_voidSendCommand+0x21a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ef2:	6b a1       	ldd	r22, Y+35	; 0x23
     ef4:	7c a1       	ldd	r23, Y+36	; 0x24
     ef6:	8d a1       	ldd	r24, Y+37	; 0x25
     ef8:	9e a1       	ldd	r25, Y+38	; 0x26
     efa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     efe:	dc 01       	movw	r26, r24
     f00:	cb 01       	movw	r24, r22
     f02:	9a a3       	std	Y+34, r25	; 0x22
     f04:	89 a3       	std	Y+33, r24	; 0x21
     f06:	89 a1       	ldd	r24, Y+33	; 0x21
     f08:	9a a1       	ldd	r25, Y+34	; 0x22
     f0a:	9e 8f       	std	Y+30, r25	; 0x1e
     f0c:	8d 8f       	std	Y+29, r24	; 0x1d
     f0e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f10:	9e 8d       	ldd	r25, Y+30	; 0x1e
     f12:	01 97       	sbiw	r24, 0x01	; 1
     f14:	f1 f7       	brne	.-4      	; 0xf12 <C_LCD_voidSendCommand+0x212>
     f16:	9e 8f       	std	Y+30, r25	; 0x1e
     f18:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);

	Local_u8Command = ((Copy_u8Command <<3) |DIO_u8AndWithPort(CLCD_DATA_PORT, CLCD_DATA_PORT_MASK));
     f1a:	8a ad       	ldd	r24, Y+58	; 0x3a
     f1c:	88 2f       	mov	r24, r24
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	88 0f       	add	r24, r24
     f22:	99 1f       	adc	r25, r25
     f24:	88 0f       	add	r24, r24
     f26:	99 1f       	adc	r25, r25
     f28:	88 0f       	add	r24, r24
     f2a:	99 1f       	adc	r25, r25
     f2c:	18 2f       	mov	r17, r24
     f2e:	80 e0       	ldi	r24, 0x00	; 0
     f30:	67 e8       	ldi	r22, 0x87	; 135
     f32:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <DIO_u8AndWithPort>
     f36:	81 2b       	or	r24, r17
     f38:	89 af       	std	Y+57, r24	; 0x39
	DIO_u8SetPortValue(CLCD_DATA_PORT,Local_u8Command);
     f3a:	80 e0       	ldi	r24, 0x00	; 0
     f3c:	69 ad       	ldd	r22, Y+57	; 0x39
     f3e:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <DIO_u8SetPortValue>

	/*Send Enable pulse */
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
     f42:	80 e0       	ldi	r24, 0x00	; 0
     f44:	62 e0       	ldi	r22, 0x02	; 2
     f46:	41 e0       	ldi	r20, 0x01	; 1
     f48:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <DIO_u8SetPinValue>
     f4c:	80 e0       	ldi	r24, 0x00	; 0
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	a0 e0       	ldi	r26, 0x00	; 0
     f52:	b0 e4       	ldi	r27, 0x40	; 64
     f54:	89 8f       	std	Y+25, r24	; 0x19
     f56:	9a 8f       	std	Y+26, r25	; 0x1a
     f58:	ab 8f       	std	Y+27, r26	; 0x1b
     f5a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f5c:	69 8d       	ldd	r22, Y+25	; 0x19
     f5e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f60:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f62:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f64:	20 e0       	ldi	r18, 0x00	; 0
     f66:	30 e0       	ldi	r19, 0x00	; 0
     f68:	4a ef       	ldi	r20, 0xFA	; 250
     f6a:	54 e4       	ldi	r21, 0x44	; 68
     f6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f70:	dc 01       	movw	r26, r24
     f72:	cb 01       	movw	r24, r22
     f74:	8d 8b       	std	Y+21, r24	; 0x15
     f76:	9e 8b       	std	Y+22, r25	; 0x16
     f78:	af 8b       	std	Y+23, r26	; 0x17
     f7a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     f7c:	6d 89       	ldd	r22, Y+21	; 0x15
     f7e:	7e 89       	ldd	r23, Y+22	; 0x16
     f80:	8f 89       	ldd	r24, Y+23	; 0x17
     f82:	98 8d       	ldd	r25, Y+24	; 0x18
     f84:	20 e0       	ldi	r18, 0x00	; 0
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	40 e8       	ldi	r20, 0x80	; 128
     f8a:	5f e3       	ldi	r21, 0x3F	; 63
     f8c:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
     f90:	88 23       	and	r24, r24
     f92:	2c f4       	brge	.+10     	; 0xf9e <C_LCD_voidSendCommand+0x29e>
		__ticks = 1;
     f94:	81 e0       	ldi	r24, 0x01	; 1
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	9c 8b       	std	Y+20, r25	; 0x14
     f9a:	8b 8b       	std	Y+19, r24	; 0x13
     f9c:	3f c0       	rjmp	.+126    	; 0x101c <C_LCD_voidSendCommand+0x31c>
	else if (__tmp > 65535)
     f9e:	6d 89       	ldd	r22, Y+21	; 0x15
     fa0:	7e 89       	ldd	r23, Y+22	; 0x16
     fa2:	8f 89       	ldd	r24, Y+23	; 0x17
     fa4:	98 8d       	ldd	r25, Y+24	; 0x18
     fa6:	20 e0       	ldi	r18, 0x00	; 0
     fa8:	3f ef       	ldi	r19, 0xFF	; 255
     faa:	4f e7       	ldi	r20, 0x7F	; 127
     fac:	57 e4       	ldi	r21, 0x47	; 71
     fae:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
     fb2:	18 16       	cp	r1, r24
     fb4:	4c f5       	brge	.+82     	; 0x1008 <C_LCD_voidSendCommand+0x308>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fb6:	69 8d       	ldd	r22, Y+25	; 0x19
     fb8:	7a 8d       	ldd	r23, Y+26	; 0x1a
     fba:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fbc:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fbe:	20 e0       	ldi	r18, 0x00	; 0
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	40 e2       	ldi	r20, 0x20	; 32
     fc4:	51 e4       	ldi	r21, 0x41	; 65
     fc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fca:	dc 01       	movw	r26, r24
     fcc:	cb 01       	movw	r24, r22
     fce:	bc 01       	movw	r22, r24
     fd0:	cd 01       	movw	r24, r26
     fd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fd6:	dc 01       	movw	r26, r24
     fd8:	cb 01       	movw	r24, r22
     fda:	9c 8b       	std	Y+20, r25	; 0x14
     fdc:	8b 8b       	std	Y+19, r24	; 0x13
     fde:	0f c0       	rjmp	.+30     	; 0xffe <C_LCD_voidSendCommand+0x2fe>
     fe0:	88 ec       	ldi	r24, 0xC8	; 200
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	9a 8b       	std	Y+18, r25	; 0x12
     fe6:	89 8b       	std	Y+17, r24	; 0x11
     fe8:	89 89       	ldd	r24, Y+17	; 0x11
     fea:	9a 89       	ldd	r25, Y+18	; 0x12
     fec:	01 97       	sbiw	r24, 0x01	; 1
     fee:	f1 f7       	brne	.-4      	; 0xfec <C_LCD_voidSendCommand+0x2ec>
     ff0:	9a 8b       	std	Y+18, r25	; 0x12
     ff2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ff4:	8b 89       	ldd	r24, Y+19	; 0x13
     ff6:	9c 89       	ldd	r25, Y+20	; 0x14
     ff8:	01 97       	sbiw	r24, 0x01	; 1
     ffa:	9c 8b       	std	Y+20, r25	; 0x14
     ffc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ffe:	8b 89       	ldd	r24, Y+19	; 0x13
    1000:	9c 89       	ldd	r25, Y+20	; 0x14
    1002:	00 97       	sbiw	r24, 0x00	; 0
    1004:	69 f7       	brne	.-38     	; 0xfe0 <C_LCD_voidSendCommand+0x2e0>
    1006:	14 c0       	rjmp	.+40     	; 0x1030 <C_LCD_voidSendCommand+0x330>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1008:	6d 89       	ldd	r22, Y+21	; 0x15
    100a:	7e 89       	ldd	r23, Y+22	; 0x16
    100c:	8f 89       	ldd	r24, Y+23	; 0x17
    100e:	98 8d       	ldd	r25, Y+24	; 0x18
    1010:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1014:	dc 01       	movw	r26, r24
    1016:	cb 01       	movw	r24, r22
    1018:	9c 8b       	std	Y+20, r25	; 0x14
    101a:	8b 8b       	std	Y+19, r24	; 0x13
    101c:	8b 89       	ldd	r24, Y+19	; 0x13
    101e:	9c 89       	ldd	r25, Y+20	; 0x14
    1020:	98 8b       	std	Y+16, r25	; 0x10
    1022:	8f 87       	std	Y+15, r24	; 0x0f
    1024:	8f 85       	ldd	r24, Y+15	; 0x0f
    1026:	98 89       	ldd	r25, Y+16	; 0x10
    1028:	01 97       	sbiw	r24, 0x01	; 1
    102a:	f1 f7       	brne	.-4      	; 0x1028 <C_LCD_voidSendCommand+0x328>
    102c:	98 8b       	std	Y+16, r25	; 0x10
    102e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    1030:	80 e0       	ldi	r24, 0x00	; 0
    1032:	62 e0       	ldi	r22, 0x02	; 2
    1034:	40 e0       	ldi	r20, 0x00	; 0
    1036:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <DIO_u8SetPinValue>
    103a:	80 e0       	ldi	r24, 0x00	; 0
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	a0 ea       	ldi	r26, 0xA0	; 160
    1040:	b0 e4       	ldi	r27, 0x40	; 64
    1042:	8b 87       	std	Y+11, r24	; 0x0b
    1044:	9c 87       	std	Y+12, r25	; 0x0c
    1046:	ad 87       	std	Y+13, r26	; 0x0d
    1048:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    104a:	6b 85       	ldd	r22, Y+11	; 0x0b
    104c:	7c 85       	ldd	r23, Y+12	; 0x0c
    104e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1050:	9e 85       	ldd	r25, Y+14	; 0x0e
    1052:	20 e0       	ldi	r18, 0x00	; 0
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	4a ef       	ldi	r20, 0xFA	; 250
    1058:	54 e4       	ldi	r21, 0x44	; 68
    105a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    105e:	dc 01       	movw	r26, r24
    1060:	cb 01       	movw	r24, r22
    1062:	8f 83       	std	Y+7, r24	; 0x07
    1064:	98 87       	std	Y+8, r25	; 0x08
    1066:	a9 87       	std	Y+9, r26	; 0x09
    1068:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    106a:	6f 81       	ldd	r22, Y+7	; 0x07
    106c:	78 85       	ldd	r23, Y+8	; 0x08
    106e:	89 85       	ldd	r24, Y+9	; 0x09
    1070:	9a 85       	ldd	r25, Y+10	; 0x0a
    1072:	20 e0       	ldi	r18, 0x00	; 0
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	40 e8       	ldi	r20, 0x80	; 128
    1078:	5f e3       	ldi	r21, 0x3F	; 63
    107a:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    107e:	88 23       	and	r24, r24
    1080:	2c f4       	brge	.+10     	; 0x108c <C_LCD_voidSendCommand+0x38c>
		__ticks = 1;
    1082:	81 e0       	ldi	r24, 0x01	; 1
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	9e 83       	std	Y+6, r25	; 0x06
    1088:	8d 83       	std	Y+5, r24	; 0x05
    108a:	3f c0       	rjmp	.+126    	; 0x110a <C_LCD_voidSendCommand+0x40a>
	else if (__tmp > 65535)
    108c:	6f 81       	ldd	r22, Y+7	; 0x07
    108e:	78 85       	ldd	r23, Y+8	; 0x08
    1090:	89 85       	ldd	r24, Y+9	; 0x09
    1092:	9a 85       	ldd	r25, Y+10	; 0x0a
    1094:	20 e0       	ldi	r18, 0x00	; 0
    1096:	3f ef       	ldi	r19, 0xFF	; 255
    1098:	4f e7       	ldi	r20, 0x7F	; 127
    109a:	57 e4       	ldi	r21, 0x47	; 71
    109c:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    10a0:	18 16       	cp	r1, r24
    10a2:	4c f5       	brge	.+82     	; 0x10f6 <C_LCD_voidSendCommand+0x3f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    10a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    10a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    10aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    10ac:	20 e0       	ldi	r18, 0x00	; 0
    10ae:	30 e0       	ldi	r19, 0x00	; 0
    10b0:	40 e2       	ldi	r20, 0x20	; 32
    10b2:	51 e4       	ldi	r21, 0x41	; 65
    10b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10b8:	dc 01       	movw	r26, r24
    10ba:	cb 01       	movw	r24, r22
    10bc:	bc 01       	movw	r22, r24
    10be:	cd 01       	movw	r24, r26
    10c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10c4:	dc 01       	movw	r26, r24
    10c6:	cb 01       	movw	r24, r22
    10c8:	9e 83       	std	Y+6, r25	; 0x06
    10ca:	8d 83       	std	Y+5, r24	; 0x05
    10cc:	0f c0       	rjmp	.+30     	; 0x10ec <C_LCD_voidSendCommand+0x3ec>
    10ce:	88 ec       	ldi	r24, 0xC8	; 200
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	9c 83       	std	Y+4, r25	; 0x04
    10d4:	8b 83       	std	Y+3, r24	; 0x03
    10d6:	8b 81       	ldd	r24, Y+3	; 0x03
    10d8:	9c 81       	ldd	r25, Y+4	; 0x04
    10da:	01 97       	sbiw	r24, 0x01	; 1
    10dc:	f1 f7       	brne	.-4      	; 0x10da <C_LCD_voidSendCommand+0x3da>
    10de:	9c 83       	std	Y+4, r25	; 0x04
    10e0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10e2:	8d 81       	ldd	r24, Y+5	; 0x05
    10e4:	9e 81       	ldd	r25, Y+6	; 0x06
    10e6:	01 97       	sbiw	r24, 0x01	; 1
    10e8:	9e 83       	std	Y+6, r25	; 0x06
    10ea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10ec:	8d 81       	ldd	r24, Y+5	; 0x05
    10ee:	9e 81       	ldd	r25, Y+6	; 0x06
    10f0:	00 97       	sbiw	r24, 0x00	; 0
    10f2:	69 f7       	brne	.-38     	; 0x10ce <C_LCD_voidSendCommand+0x3ce>
    10f4:	14 c0       	rjmp	.+40     	; 0x111e <C_LCD_voidSendCommand+0x41e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10f6:	6f 81       	ldd	r22, Y+7	; 0x07
    10f8:	78 85       	ldd	r23, Y+8	; 0x08
    10fa:	89 85       	ldd	r24, Y+9	; 0x09
    10fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    10fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1102:	dc 01       	movw	r26, r24
    1104:	cb 01       	movw	r24, r22
    1106:	9e 83       	std	Y+6, r25	; 0x06
    1108:	8d 83       	std	Y+5, r24	; 0x05
    110a:	8d 81       	ldd	r24, Y+5	; 0x05
    110c:	9e 81       	ldd	r25, Y+6	; 0x06
    110e:	9a 83       	std	Y+2, r25	; 0x02
    1110:	89 83       	std	Y+1, r24	; 0x01
    1112:	89 81       	ldd	r24, Y+1	; 0x01
    1114:	9a 81       	ldd	r25, Y+2	; 0x02
    1116:	01 97       	sbiw	r24, 0x01	; 1
    1118:	f1 f7       	brne	.-4      	; 0x1116 <C_LCD_voidSendCommand+0x416>
    111a:	9a 83       	std	Y+2, r25	; 0x02
    111c:	89 83       	std	Y+1, r24	; 0x01

#endif



}
    111e:	ea 96       	adiw	r28, 0x3a	; 58
    1120:	0f b6       	in	r0, 0x3f	; 63
    1122:	f8 94       	cli
    1124:	de bf       	out	0x3e, r29	; 62
    1126:	0f be       	out	0x3f, r0	; 63
    1128:	cd bf       	out	0x3d, r28	; 61
    112a:	cf 91       	pop	r28
    112c:	df 91       	pop	r29
    112e:	1f 91       	pop	r17
    1130:	08 95       	ret

00001132 <CLCD_voidSendData>:

void CLCD_voidSendData(u8 Copy_u8Data)
{
    1132:	1f 93       	push	r17
    1134:	df 93       	push	r29
    1136:	cf 93       	push	r28
    1138:	cd b7       	in	r28, 0x3d	; 61
    113a:	de b7       	in	r29, 0x3e	; 62
    113c:	ea 97       	sbiw	r28, 0x3a	; 58
    113e:	0f b6       	in	r0, 0x3f	; 63
    1140:	f8 94       	cli
    1142:	de bf       	out	0x3e, r29	; 62
    1144:	0f be       	out	0x3f, r0	; 63
    1146:	cd bf       	out	0x3d, r28	; 61
    1148:	8a af       	std	Y+58, r24	; 0x3a
	/*Set RS Pin to low to send data */
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_HIGH);
    114a:	80 e0       	ldi	r24, 0x00	; 0
    114c:	61 e0       	ldi	r22, 0x01	; 1
    114e:	41 e0       	ldi	r20, 0x01	; 1
    1150:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <DIO_u8SetPinValue>
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);

#elif   MODE_SELECT ==_4_BIT_MODE

	u8 Local_u8Data = (((Copy_u8Data>>1) & CLCD_COMMAND_MASK) | DIO_u8AndWithPort(CLCD_DATA_PORT, CLCD_DATA_PORT_MASK));
    1154:	8a ad       	ldd	r24, Y+58	; 0x3a
    1156:	86 95       	lsr	r24
    1158:	18 2f       	mov	r17, r24
    115a:	18 77       	andi	r17, 0x78	; 120
    115c:	80 e0       	ldi	r24, 0x00	; 0
    115e:	67 e8       	ldi	r22, 0x87	; 135
    1160:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <DIO_u8AndWithPort>
    1164:	81 2b       	or	r24, r17
    1166:	89 af       	std	Y+57, r24	; 0x39
	/* Set Command to data pins */
	DIO_u8SetPortValue(CLCD_DATA_PORT,Local_u8Data);
    1168:	80 e0       	ldi	r24, 0x00	; 0
    116a:	69 ad       	ldd	r22, Y+57	; 0x39
    116c:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <DIO_u8SetPortValue>

	/*Send Enable pulse */
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    1170:	80 e0       	ldi	r24, 0x00	; 0
    1172:	62 e0       	ldi	r22, 0x02	; 2
    1174:	41 e0       	ldi	r20, 0x01	; 1
    1176:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <DIO_u8SetPinValue>
    117a:	80 e0       	ldi	r24, 0x00	; 0
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	a0 e0       	ldi	r26, 0x00	; 0
    1180:	b0 e4       	ldi	r27, 0x40	; 64
    1182:	8d ab       	std	Y+53, r24	; 0x35
    1184:	9e ab       	std	Y+54, r25	; 0x36
    1186:	af ab       	std	Y+55, r26	; 0x37
    1188:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    118a:	6d a9       	ldd	r22, Y+53	; 0x35
    118c:	7e a9       	ldd	r23, Y+54	; 0x36
    118e:	8f a9       	ldd	r24, Y+55	; 0x37
    1190:	98 ad       	ldd	r25, Y+56	; 0x38
    1192:	20 e0       	ldi	r18, 0x00	; 0
    1194:	30 e0       	ldi	r19, 0x00	; 0
    1196:	4a ef       	ldi	r20, 0xFA	; 250
    1198:	54 e4       	ldi	r21, 0x44	; 68
    119a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    119e:	dc 01       	movw	r26, r24
    11a0:	cb 01       	movw	r24, r22
    11a2:	89 ab       	std	Y+49, r24	; 0x31
    11a4:	9a ab       	std	Y+50, r25	; 0x32
    11a6:	ab ab       	std	Y+51, r26	; 0x33
    11a8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    11aa:	69 a9       	ldd	r22, Y+49	; 0x31
    11ac:	7a a9       	ldd	r23, Y+50	; 0x32
    11ae:	8b a9       	ldd	r24, Y+51	; 0x33
    11b0:	9c a9       	ldd	r25, Y+52	; 0x34
    11b2:	20 e0       	ldi	r18, 0x00	; 0
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	40 e8       	ldi	r20, 0x80	; 128
    11b8:	5f e3       	ldi	r21, 0x3F	; 63
    11ba:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    11be:	88 23       	and	r24, r24
    11c0:	2c f4       	brge	.+10     	; 0x11cc <CLCD_voidSendData+0x9a>
		__ticks = 1;
    11c2:	81 e0       	ldi	r24, 0x01	; 1
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	98 ab       	std	Y+48, r25	; 0x30
    11c8:	8f a7       	std	Y+47, r24	; 0x2f
    11ca:	3f c0       	rjmp	.+126    	; 0x124a <CLCD_voidSendData+0x118>
	else if (__tmp > 65535)
    11cc:	69 a9       	ldd	r22, Y+49	; 0x31
    11ce:	7a a9       	ldd	r23, Y+50	; 0x32
    11d0:	8b a9       	ldd	r24, Y+51	; 0x33
    11d2:	9c a9       	ldd	r25, Y+52	; 0x34
    11d4:	20 e0       	ldi	r18, 0x00	; 0
    11d6:	3f ef       	ldi	r19, 0xFF	; 255
    11d8:	4f e7       	ldi	r20, 0x7F	; 127
    11da:	57 e4       	ldi	r21, 0x47	; 71
    11dc:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    11e0:	18 16       	cp	r1, r24
    11e2:	4c f5       	brge	.+82     	; 0x1236 <CLCD_voidSendData+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11e4:	6d a9       	ldd	r22, Y+53	; 0x35
    11e6:	7e a9       	ldd	r23, Y+54	; 0x36
    11e8:	8f a9       	ldd	r24, Y+55	; 0x37
    11ea:	98 ad       	ldd	r25, Y+56	; 0x38
    11ec:	20 e0       	ldi	r18, 0x00	; 0
    11ee:	30 e0       	ldi	r19, 0x00	; 0
    11f0:	40 e2       	ldi	r20, 0x20	; 32
    11f2:	51 e4       	ldi	r21, 0x41	; 65
    11f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11f8:	dc 01       	movw	r26, r24
    11fa:	cb 01       	movw	r24, r22
    11fc:	bc 01       	movw	r22, r24
    11fe:	cd 01       	movw	r24, r26
    1200:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1204:	dc 01       	movw	r26, r24
    1206:	cb 01       	movw	r24, r22
    1208:	98 ab       	std	Y+48, r25	; 0x30
    120a:	8f a7       	std	Y+47, r24	; 0x2f
    120c:	0f c0       	rjmp	.+30     	; 0x122c <CLCD_voidSendData+0xfa>
    120e:	88 ec       	ldi	r24, 0xC8	; 200
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	9e a7       	std	Y+46, r25	; 0x2e
    1214:	8d a7       	std	Y+45, r24	; 0x2d
    1216:	8d a5       	ldd	r24, Y+45	; 0x2d
    1218:	9e a5       	ldd	r25, Y+46	; 0x2e
    121a:	01 97       	sbiw	r24, 0x01	; 1
    121c:	f1 f7       	brne	.-4      	; 0x121a <CLCD_voidSendData+0xe8>
    121e:	9e a7       	std	Y+46, r25	; 0x2e
    1220:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1222:	8f a5       	ldd	r24, Y+47	; 0x2f
    1224:	98 a9       	ldd	r25, Y+48	; 0x30
    1226:	01 97       	sbiw	r24, 0x01	; 1
    1228:	98 ab       	std	Y+48, r25	; 0x30
    122a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    122c:	8f a5       	ldd	r24, Y+47	; 0x2f
    122e:	98 a9       	ldd	r25, Y+48	; 0x30
    1230:	00 97       	sbiw	r24, 0x00	; 0
    1232:	69 f7       	brne	.-38     	; 0x120e <CLCD_voidSendData+0xdc>
    1234:	14 c0       	rjmp	.+40     	; 0x125e <CLCD_voidSendData+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1236:	69 a9       	ldd	r22, Y+49	; 0x31
    1238:	7a a9       	ldd	r23, Y+50	; 0x32
    123a:	8b a9       	ldd	r24, Y+51	; 0x33
    123c:	9c a9       	ldd	r25, Y+52	; 0x34
    123e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1242:	dc 01       	movw	r26, r24
    1244:	cb 01       	movw	r24, r22
    1246:	98 ab       	std	Y+48, r25	; 0x30
    1248:	8f a7       	std	Y+47, r24	; 0x2f
    124a:	8f a5       	ldd	r24, Y+47	; 0x2f
    124c:	98 a9       	ldd	r25, Y+48	; 0x30
    124e:	9c a7       	std	Y+44, r25	; 0x2c
    1250:	8b a7       	std	Y+43, r24	; 0x2b
    1252:	8b a5       	ldd	r24, Y+43	; 0x2b
    1254:	9c a5       	ldd	r25, Y+44	; 0x2c
    1256:	01 97       	sbiw	r24, 0x01	; 1
    1258:	f1 f7       	brne	.-4      	; 0x1256 <CLCD_voidSendData+0x124>
    125a:	9c a7       	std	Y+44, r25	; 0x2c
    125c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    125e:	80 e0       	ldi	r24, 0x00	; 0
    1260:	62 e0       	ldi	r22, 0x02	; 2
    1262:	40 e0       	ldi	r20, 0x00	; 0
    1264:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <DIO_u8SetPinValue>
    1268:	80 e0       	ldi	r24, 0x00	; 0
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	a0 ea       	ldi	r26, 0xA0	; 160
    126e:	b0 e4       	ldi	r27, 0x40	; 64
    1270:	8f a3       	std	Y+39, r24	; 0x27
    1272:	98 a7       	std	Y+40, r25	; 0x28
    1274:	a9 a7       	std	Y+41, r26	; 0x29
    1276:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1278:	6f a1       	ldd	r22, Y+39	; 0x27
    127a:	78 a5       	ldd	r23, Y+40	; 0x28
    127c:	89 a5       	ldd	r24, Y+41	; 0x29
    127e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1280:	20 e0       	ldi	r18, 0x00	; 0
    1282:	30 e0       	ldi	r19, 0x00	; 0
    1284:	4a ef       	ldi	r20, 0xFA	; 250
    1286:	54 e4       	ldi	r21, 0x44	; 68
    1288:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    128c:	dc 01       	movw	r26, r24
    128e:	cb 01       	movw	r24, r22
    1290:	8b a3       	std	Y+35, r24	; 0x23
    1292:	9c a3       	std	Y+36, r25	; 0x24
    1294:	ad a3       	std	Y+37, r26	; 0x25
    1296:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1298:	6b a1       	ldd	r22, Y+35	; 0x23
    129a:	7c a1       	ldd	r23, Y+36	; 0x24
    129c:	8d a1       	ldd	r24, Y+37	; 0x25
    129e:	9e a1       	ldd	r25, Y+38	; 0x26
    12a0:	20 e0       	ldi	r18, 0x00	; 0
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	40 e8       	ldi	r20, 0x80	; 128
    12a6:	5f e3       	ldi	r21, 0x3F	; 63
    12a8:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    12ac:	88 23       	and	r24, r24
    12ae:	2c f4       	brge	.+10     	; 0x12ba <CLCD_voidSendData+0x188>
		__ticks = 1;
    12b0:	81 e0       	ldi	r24, 0x01	; 1
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	9a a3       	std	Y+34, r25	; 0x22
    12b6:	89 a3       	std	Y+33, r24	; 0x21
    12b8:	3f c0       	rjmp	.+126    	; 0x1338 <CLCD_voidSendData+0x206>
	else if (__tmp > 65535)
    12ba:	6b a1       	ldd	r22, Y+35	; 0x23
    12bc:	7c a1       	ldd	r23, Y+36	; 0x24
    12be:	8d a1       	ldd	r24, Y+37	; 0x25
    12c0:	9e a1       	ldd	r25, Y+38	; 0x26
    12c2:	20 e0       	ldi	r18, 0x00	; 0
    12c4:	3f ef       	ldi	r19, 0xFF	; 255
    12c6:	4f e7       	ldi	r20, 0x7F	; 127
    12c8:	57 e4       	ldi	r21, 0x47	; 71
    12ca:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    12ce:	18 16       	cp	r1, r24
    12d0:	4c f5       	brge	.+82     	; 0x1324 <CLCD_voidSendData+0x1f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12d2:	6f a1       	ldd	r22, Y+39	; 0x27
    12d4:	78 a5       	ldd	r23, Y+40	; 0x28
    12d6:	89 a5       	ldd	r24, Y+41	; 0x29
    12d8:	9a a5       	ldd	r25, Y+42	; 0x2a
    12da:	20 e0       	ldi	r18, 0x00	; 0
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	40 e2       	ldi	r20, 0x20	; 32
    12e0:	51 e4       	ldi	r21, 0x41	; 65
    12e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12e6:	dc 01       	movw	r26, r24
    12e8:	cb 01       	movw	r24, r22
    12ea:	bc 01       	movw	r22, r24
    12ec:	cd 01       	movw	r24, r26
    12ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12f2:	dc 01       	movw	r26, r24
    12f4:	cb 01       	movw	r24, r22
    12f6:	9a a3       	std	Y+34, r25	; 0x22
    12f8:	89 a3       	std	Y+33, r24	; 0x21
    12fa:	0f c0       	rjmp	.+30     	; 0x131a <CLCD_voidSendData+0x1e8>
    12fc:	88 ec       	ldi	r24, 0xC8	; 200
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	98 a3       	std	Y+32, r25	; 0x20
    1302:	8f 8f       	std	Y+31, r24	; 0x1f
    1304:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1306:	98 a1       	ldd	r25, Y+32	; 0x20
    1308:	01 97       	sbiw	r24, 0x01	; 1
    130a:	f1 f7       	brne	.-4      	; 0x1308 <CLCD_voidSendData+0x1d6>
    130c:	98 a3       	std	Y+32, r25	; 0x20
    130e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1310:	89 a1       	ldd	r24, Y+33	; 0x21
    1312:	9a a1       	ldd	r25, Y+34	; 0x22
    1314:	01 97       	sbiw	r24, 0x01	; 1
    1316:	9a a3       	std	Y+34, r25	; 0x22
    1318:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    131a:	89 a1       	ldd	r24, Y+33	; 0x21
    131c:	9a a1       	ldd	r25, Y+34	; 0x22
    131e:	00 97       	sbiw	r24, 0x00	; 0
    1320:	69 f7       	brne	.-38     	; 0x12fc <CLCD_voidSendData+0x1ca>
    1322:	14 c0       	rjmp	.+40     	; 0x134c <CLCD_voidSendData+0x21a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1324:	6b a1       	ldd	r22, Y+35	; 0x23
    1326:	7c a1       	ldd	r23, Y+36	; 0x24
    1328:	8d a1       	ldd	r24, Y+37	; 0x25
    132a:	9e a1       	ldd	r25, Y+38	; 0x26
    132c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1330:	dc 01       	movw	r26, r24
    1332:	cb 01       	movw	r24, r22
    1334:	9a a3       	std	Y+34, r25	; 0x22
    1336:	89 a3       	std	Y+33, r24	; 0x21
    1338:	89 a1       	ldd	r24, Y+33	; 0x21
    133a:	9a a1       	ldd	r25, Y+34	; 0x22
    133c:	9e 8f       	std	Y+30, r25	; 0x1e
    133e:	8d 8f       	std	Y+29, r24	; 0x1d
    1340:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1342:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1344:	01 97       	sbiw	r24, 0x01	; 1
    1346:	f1 f7       	brne	.-4      	; 0x1344 <CLCD_voidSendData+0x212>
    1348:	9e 8f       	std	Y+30, r25	; 0x1e
    134a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);

	Local_u8Data = ((Copy_u8Data <<3) |DIO_u8AndWithPort(CLCD_DATA_PORT, CLCD_DATA_PORT_MASK));
    134c:	8a ad       	ldd	r24, Y+58	; 0x3a
    134e:	88 2f       	mov	r24, r24
    1350:	90 e0       	ldi	r25, 0x00	; 0
    1352:	88 0f       	add	r24, r24
    1354:	99 1f       	adc	r25, r25
    1356:	88 0f       	add	r24, r24
    1358:	99 1f       	adc	r25, r25
    135a:	88 0f       	add	r24, r24
    135c:	99 1f       	adc	r25, r25
    135e:	18 2f       	mov	r17, r24
    1360:	80 e0       	ldi	r24, 0x00	; 0
    1362:	67 e8       	ldi	r22, 0x87	; 135
    1364:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <DIO_u8AndWithPort>
    1368:	81 2b       	or	r24, r17
    136a:	89 af       	std	Y+57, r24	; 0x39

	DIO_u8SetPortValue(CLCD_DATA_PORT,Local_u8Data);
    136c:	80 e0       	ldi	r24, 0x00	; 0
    136e:	69 ad       	ldd	r22, Y+57	; 0x39
    1370:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <DIO_u8SetPortValue>

	/*Send Enable pulse */
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    1374:	80 e0       	ldi	r24, 0x00	; 0
    1376:	62 e0       	ldi	r22, 0x02	; 2
    1378:	41 e0       	ldi	r20, 0x01	; 1
    137a:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <DIO_u8SetPinValue>
    137e:	80 e0       	ldi	r24, 0x00	; 0
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	a0 e0       	ldi	r26, 0x00	; 0
    1384:	b0 e4       	ldi	r27, 0x40	; 64
    1386:	89 8f       	std	Y+25, r24	; 0x19
    1388:	9a 8f       	std	Y+26, r25	; 0x1a
    138a:	ab 8f       	std	Y+27, r26	; 0x1b
    138c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    138e:	69 8d       	ldd	r22, Y+25	; 0x19
    1390:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1392:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1394:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1396:	20 e0       	ldi	r18, 0x00	; 0
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	4a ef       	ldi	r20, 0xFA	; 250
    139c:	54 e4       	ldi	r21, 0x44	; 68
    139e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13a2:	dc 01       	movw	r26, r24
    13a4:	cb 01       	movw	r24, r22
    13a6:	8d 8b       	std	Y+21, r24	; 0x15
    13a8:	9e 8b       	std	Y+22, r25	; 0x16
    13aa:	af 8b       	std	Y+23, r26	; 0x17
    13ac:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    13ae:	6d 89       	ldd	r22, Y+21	; 0x15
    13b0:	7e 89       	ldd	r23, Y+22	; 0x16
    13b2:	8f 89       	ldd	r24, Y+23	; 0x17
    13b4:	98 8d       	ldd	r25, Y+24	; 0x18
    13b6:	20 e0       	ldi	r18, 0x00	; 0
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	40 e8       	ldi	r20, 0x80	; 128
    13bc:	5f e3       	ldi	r21, 0x3F	; 63
    13be:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    13c2:	88 23       	and	r24, r24
    13c4:	2c f4       	brge	.+10     	; 0x13d0 <CLCD_voidSendData+0x29e>
		__ticks = 1;
    13c6:	81 e0       	ldi	r24, 0x01	; 1
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	9c 8b       	std	Y+20, r25	; 0x14
    13cc:	8b 8b       	std	Y+19, r24	; 0x13
    13ce:	3f c0       	rjmp	.+126    	; 0x144e <CLCD_voidSendData+0x31c>
	else if (__tmp > 65535)
    13d0:	6d 89       	ldd	r22, Y+21	; 0x15
    13d2:	7e 89       	ldd	r23, Y+22	; 0x16
    13d4:	8f 89       	ldd	r24, Y+23	; 0x17
    13d6:	98 8d       	ldd	r25, Y+24	; 0x18
    13d8:	20 e0       	ldi	r18, 0x00	; 0
    13da:	3f ef       	ldi	r19, 0xFF	; 255
    13dc:	4f e7       	ldi	r20, 0x7F	; 127
    13de:	57 e4       	ldi	r21, 0x47	; 71
    13e0:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    13e4:	18 16       	cp	r1, r24
    13e6:	4c f5       	brge	.+82     	; 0x143a <CLCD_voidSendData+0x308>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13e8:	69 8d       	ldd	r22, Y+25	; 0x19
    13ea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13f0:	20 e0       	ldi	r18, 0x00	; 0
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	40 e2       	ldi	r20, 0x20	; 32
    13f6:	51 e4       	ldi	r21, 0x41	; 65
    13f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13fc:	dc 01       	movw	r26, r24
    13fe:	cb 01       	movw	r24, r22
    1400:	bc 01       	movw	r22, r24
    1402:	cd 01       	movw	r24, r26
    1404:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1408:	dc 01       	movw	r26, r24
    140a:	cb 01       	movw	r24, r22
    140c:	9c 8b       	std	Y+20, r25	; 0x14
    140e:	8b 8b       	std	Y+19, r24	; 0x13
    1410:	0f c0       	rjmp	.+30     	; 0x1430 <CLCD_voidSendData+0x2fe>
    1412:	88 ec       	ldi	r24, 0xC8	; 200
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	9a 8b       	std	Y+18, r25	; 0x12
    1418:	89 8b       	std	Y+17, r24	; 0x11
    141a:	89 89       	ldd	r24, Y+17	; 0x11
    141c:	9a 89       	ldd	r25, Y+18	; 0x12
    141e:	01 97       	sbiw	r24, 0x01	; 1
    1420:	f1 f7       	brne	.-4      	; 0x141e <CLCD_voidSendData+0x2ec>
    1422:	9a 8b       	std	Y+18, r25	; 0x12
    1424:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1426:	8b 89       	ldd	r24, Y+19	; 0x13
    1428:	9c 89       	ldd	r25, Y+20	; 0x14
    142a:	01 97       	sbiw	r24, 0x01	; 1
    142c:	9c 8b       	std	Y+20, r25	; 0x14
    142e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1430:	8b 89       	ldd	r24, Y+19	; 0x13
    1432:	9c 89       	ldd	r25, Y+20	; 0x14
    1434:	00 97       	sbiw	r24, 0x00	; 0
    1436:	69 f7       	brne	.-38     	; 0x1412 <CLCD_voidSendData+0x2e0>
    1438:	14 c0       	rjmp	.+40     	; 0x1462 <CLCD_voidSendData+0x330>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    143a:	6d 89       	ldd	r22, Y+21	; 0x15
    143c:	7e 89       	ldd	r23, Y+22	; 0x16
    143e:	8f 89       	ldd	r24, Y+23	; 0x17
    1440:	98 8d       	ldd	r25, Y+24	; 0x18
    1442:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1446:	dc 01       	movw	r26, r24
    1448:	cb 01       	movw	r24, r22
    144a:	9c 8b       	std	Y+20, r25	; 0x14
    144c:	8b 8b       	std	Y+19, r24	; 0x13
    144e:	8b 89       	ldd	r24, Y+19	; 0x13
    1450:	9c 89       	ldd	r25, Y+20	; 0x14
    1452:	98 8b       	std	Y+16, r25	; 0x10
    1454:	8f 87       	std	Y+15, r24	; 0x0f
    1456:	8f 85       	ldd	r24, Y+15	; 0x0f
    1458:	98 89       	ldd	r25, Y+16	; 0x10
    145a:	01 97       	sbiw	r24, 0x01	; 1
    145c:	f1 f7       	brne	.-4      	; 0x145a <CLCD_voidSendData+0x328>
    145e:	98 8b       	std	Y+16, r25	; 0x10
    1460:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    1462:	80 e0       	ldi	r24, 0x00	; 0
    1464:	62 e0       	ldi	r22, 0x02	; 2
    1466:	40 e0       	ldi	r20, 0x00	; 0
    1468:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <DIO_u8SetPinValue>
    146c:	80 e0       	ldi	r24, 0x00	; 0
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	a0 ea       	ldi	r26, 0xA0	; 160
    1472:	b0 e4       	ldi	r27, 0x40	; 64
    1474:	8b 87       	std	Y+11, r24	; 0x0b
    1476:	9c 87       	std	Y+12, r25	; 0x0c
    1478:	ad 87       	std	Y+13, r26	; 0x0d
    147a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    147c:	6b 85       	ldd	r22, Y+11	; 0x0b
    147e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1480:	8d 85       	ldd	r24, Y+13	; 0x0d
    1482:	9e 85       	ldd	r25, Y+14	; 0x0e
    1484:	20 e0       	ldi	r18, 0x00	; 0
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	4a ef       	ldi	r20, 0xFA	; 250
    148a:	54 e4       	ldi	r21, 0x44	; 68
    148c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1490:	dc 01       	movw	r26, r24
    1492:	cb 01       	movw	r24, r22
    1494:	8f 83       	std	Y+7, r24	; 0x07
    1496:	98 87       	std	Y+8, r25	; 0x08
    1498:	a9 87       	std	Y+9, r26	; 0x09
    149a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    149c:	6f 81       	ldd	r22, Y+7	; 0x07
    149e:	78 85       	ldd	r23, Y+8	; 0x08
    14a0:	89 85       	ldd	r24, Y+9	; 0x09
    14a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    14a4:	20 e0       	ldi	r18, 0x00	; 0
    14a6:	30 e0       	ldi	r19, 0x00	; 0
    14a8:	40 e8       	ldi	r20, 0x80	; 128
    14aa:	5f e3       	ldi	r21, 0x3F	; 63
    14ac:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    14b0:	88 23       	and	r24, r24
    14b2:	2c f4       	brge	.+10     	; 0x14be <CLCD_voidSendData+0x38c>
		__ticks = 1;
    14b4:	81 e0       	ldi	r24, 0x01	; 1
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	9e 83       	std	Y+6, r25	; 0x06
    14ba:	8d 83       	std	Y+5, r24	; 0x05
    14bc:	3f c0       	rjmp	.+126    	; 0x153c <CLCD_voidSendData+0x40a>
	else if (__tmp > 65535)
    14be:	6f 81       	ldd	r22, Y+7	; 0x07
    14c0:	78 85       	ldd	r23, Y+8	; 0x08
    14c2:	89 85       	ldd	r24, Y+9	; 0x09
    14c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    14c6:	20 e0       	ldi	r18, 0x00	; 0
    14c8:	3f ef       	ldi	r19, 0xFF	; 255
    14ca:	4f e7       	ldi	r20, 0x7F	; 127
    14cc:	57 e4       	ldi	r21, 0x47	; 71
    14ce:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    14d2:	18 16       	cp	r1, r24
    14d4:	4c f5       	brge	.+82     	; 0x1528 <CLCD_voidSendData+0x3f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    14d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    14da:	8d 85       	ldd	r24, Y+13	; 0x0d
    14dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    14de:	20 e0       	ldi	r18, 0x00	; 0
    14e0:	30 e0       	ldi	r19, 0x00	; 0
    14e2:	40 e2       	ldi	r20, 0x20	; 32
    14e4:	51 e4       	ldi	r21, 0x41	; 65
    14e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14ea:	dc 01       	movw	r26, r24
    14ec:	cb 01       	movw	r24, r22
    14ee:	bc 01       	movw	r22, r24
    14f0:	cd 01       	movw	r24, r26
    14f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14f6:	dc 01       	movw	r26, r24
    14f8:	cb 01       	movw	r24, r22
    14fa:	9e 83       	std	Y+6, r25	; 0x06
    14fc:	8d 83       	std	Y+5, r24	; 0x05
    14fe:	0f c0       	rjmp	.+30     	; 0x151e <CLCD_voidSendData+0x3ec>
    1500:	88 ec       	ldi	r24, 0xC8	; 200
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	9c 83       	std	Y+4, r25	; 0x04
    1506:	8b 83       	std	Y+3, r24	; 0x03
    1508:	8b 81       	ldd	r24, Y+3	; 0x03
    150a:	9c 81       	ldd	r25, Y+4	; 0x04
    150c:	01 97       	sbiw	r24, 0x01	; 1
    150e:	f1 f7       	brne	.-4      	; 0x150c <CLCD_voidSendData+0x3da>
    1510:	9c 83       	std	Y+4, r25	; 0x04
    1512:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1514:	8d 81       	ldd	r24, Y+5	; 0x05
    1516:	9e 81       	ldd	r25, Y+6	; 0x06
    1518:	01 97       	sbiw	r24, 0x01	; 1
    151a:	9e 83       	std	Y+6, r25	; 0x06
    151c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    151e:	8d 81       	ldd	r24, Y+5	; 0x05
    1520:	9e 81       	ldd	r25, Y+6	; 0x06
    1522:	00 97       	sbiw	r24, 0x00	; 0
    1524:	69 f7       	brne	.-38     	; 0x1500 <CLCD_voidSendData+0x3ce>
    1526:	14 c0       	rjmp	.+40     	; 0x1550 <CLCD_voidSendData+0x41e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1528:	6f 81       	ldd	r22, Y+7	; 0x07
    152a:	78 85       	ldd	r23, Y+8	; 0x08
    152c:	89 85       	ldd	r24, Y+9	; 0x09
    152e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1530:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1534:	dc 01       	movw	r26, r24
    1536:	cb 01       	movw	r24, r22
    1538:	9e 83       	std	Y+6, r25	; 0x06
    153a:	8d 83       	std	Y+5, r24	; 0x05
    153c:	8d 81       	ldd	r24, Y+5	; 0x05
    153e:	9e 81       	ldd	r25, Y+6	; 0x06
    1540:	9a 83       	std	Y+2, r25	; 0x02
    1542:	89 83       	std	Y+1, r24	; 0x01
    1544:	89 81       	ldd	r24, Y+1	; 0x01
    1546:	9a 81       	ldd	r25, Y+2	; 0x02
    1548:	01 97       	sbiw	r24, 0x01	; 1
    154a:	f1 f7       	brne	.-4      	; 0x1548 <CLCD_voidSendData+0x416>
    154c:	9a 83       	std	Y+2, r25	; 0x02
    154e:	89 83       	std	Y+1, r24	; 0x01



#endif

}
    1550:	ea 96       	adiw	r28, 0x3a	; 58
    1552:	0f b6       	in	r0, 0x3f	; 63
    1554:	f8 94       	cli
    1556:	de bf       	out	0x3e, r29	; 62
    1558:	0f be       	out	0x3f, r0	; 63
    155a:	cd bf       	out	0x3d, r28	; 61
    155c:	cf 91       	pop	r28
    155e:	df 91       	pop	r29
    1560:	1f 91       	pop	r17
    1562:	08 95       	ret

00001564 <CLCD_voidInit>:

void CLCD_voidInit(void)
{
    1564:	df 93       	push	r29
    1566:	cf 93       	push	r28
    1568:	cd b7       	in	r28, 0x3d	; 61
    156a:	de b7       	in	r29, 0x3e	; 62
    156c:	2e 97       	sbiw	r28, 0x0e	; 14
    156e:	0f b6       	in	r0, 0x3f	; 63
    1570:	f8 94       	cli
    1572:	de bf       	out	0x3e, r29	; 62
    1574:	0f be       	out	0x3f, r0	; 63
    1576:	cd bf       	out	0x3d, r28	; 61
    1578:	80 e0       	ldi	r24, 0x00	; 0
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	a0 e2       	ldi	r26, 0x20	; 32
    157e:	b2 e4       	ldi	r27, 0x42	; 66
    1580:	8b 87       	std	Y+11, r24	; 0x0b
    1582:	9c 87       	std	Y+12, r25	; 0x0c
    1584:	ad 87       	std	Y+13, r26	; 0x0d
    1586:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1588:	6b 85       	ldd	r22, Y+11	; 0x0b
    158a:	7c 85       	ldd	r23, Y+12	; 0x0c
    158c:	8d 85       	ldd	r24, Y+13	; 0x0d
    158e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1590:	20 e0       	ldi	r18, 0x00	; 0
    1592:	30 e0       	ldi	r19, 0x00	; 0
    1594:	4a ef       	ldi	r20, 0xFA	; 250
    1596:	54 e4       	ldi	r21, 0x44	; 68
    1598:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    159c:	dc 01       	movw	r26, r24
    159e:	cb 01       	movw	r24, r22
    15a0:	8f 83       	std	Y+7, r24	; 0x07
    15a2:	98 87       	std	Y+8, r25	; 0x08
    15a4:	a9 87       	std	Y+9, r26	; 0x09
    15a6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    15a8:	6f 81       	ldd	r22, Y+7	; 0x07
    15aa:	78 85       	ldd	r23, Y+8	; 0x08
    15ac:	89 85       	ldd	r24, Y+9	; 0x09
    15ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    15b0:	20 e0       	ldi	r18, 0x00	; 0
    15b2:	30 e0       	ldi	r19, 0x00	; 0
    15b4:	40 e8       	ldi	r20, 0x80	; 128
    15b6:	5f e3       	ldi	r21, 0x3F	; 63
    15b8:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    15bc:	88 23       	and	r24, r24
    15be:	2c f4       	brge	.+10     	; 0x15ca <CLCD_voidInit+0x66>
		__ticks = 1;
    15c0:	81 e0       	ldi	r24, 0x01	; 1
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	9e 83       	std	Y+6, r25	; 0x06
    15c6:	8d 83       	std	Y+5, r24	; 0x05
    15c8:	3f c0       	rjmp	.+126    	; 0x1648 <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
    15ca:	6f 81       	ldd	r22, Y+7	; 0x07
    15cc:	78 85       	ldd	r23, Y+8	; 0x08
    15ce:	89 85       	ldd	r24, Y+9	; 0x09
    15d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    15d2:	20 e0       	ldi	r18, 0x00	; 0
    15d4:	3f ef       	ldi	r19, 0xFF	; 255
    15d6:	4f e7       	ldi	r20, 0x7F	; 127
    15d8:	57 e4       	ldi	r21, 0x47	; 71
    15da:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    15de:	18 16       	cp	r1, r24
    15e0:	4c f5       	brge	.+82     	; 0x1634 <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    15e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    15e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    15e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    15ea:	20 e0       	ldi	r18, 0x00	; 0
    15ec:	30 e0       	ldi	r19, 0x00	; 0
    15ee:	40 e2       	ldi	r20, 0x20	; 32
    15f0:	51 e4       	ldi	r21, 0x41	; 65
    15f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15f6:	dc 01       	movw	r26, r24
    15f8:	cb 01       	movw	r24, r22
    15fa:	bc 01       	movw	r22, r24
    15fc:	cd 01       	movw	r24, r26
    15fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1602:	dc 01       	movw	r26, r24
    1604:	cb 01       	movw	r24, r22
    1606:	9e 83       	std	Y+6, r25	; 0x06
    1608:	8d 83       	std	Y+5, r24	; 0x05
    160a:	0f c0       	rjmp	.+30     	; 0x162a <CLCD_voidInit+0xc6>
    160c:	88 ec       	ldi	r24, 0xC8	; 200
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	9c 83       	std	Y+4, r25	; 0x04
    1612:	8b 83       	std	Y+3, r24	; 0x03
    1614:	8b 81       	ldd	r24, Y+3	; 0x03
    1616:	9c 81       	ldd	r25, Y+4	; 0x04
    1618:	01 97       	sbiw	r24, 0x01	; 1
    161a:	f1 f7       	brne	.-4      	; 0x1618 <CLCD_voidInit+0xb4>
    161c:	9c 83       	std	Y+4, r25	; 0x04
    161e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1620:	8d 81       	ldd	r24, Y+5	; 0x05
    1622:	9e 81       	ldd	r25, Y+6	; 0x06
    1624:	01 97       	sbiw	r24, 0x01	; 1
    1626:	9e 83       	std	Y+6, r25	; 0x06
    1628:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    162a:	8d 81       	ldd	r24, Y+5	; 0x05
    162c:	9e 81       	ldd	r25, Y+6	; 0x06
    162e:	00 97       	sbiw	r24, 0x00	; 0
    1630:	69 f7       	brne	.-38     	; 0x160c <CLCD_voidInit+0xa8>
    1632:	14 c0       	rjmp	.+40     	; 0x165c <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1634:	6f 81       	ldd	r22, Y+7	; 0x07
    1636:	78 85       	ldd	r23, Y+8	; 0x08
    1638:	89 85       	ldd	r24, Y+9	; 0x09
    163a:	9a 85       	ldd	r25, Y+10	; 0x0a
    163c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1640:	dc 01       	movw	r26, r24
    1642:	cb 01       	movw	r24, r22
    1644:	9e 83       	std	Y+6, r25	; 0x06
    1646:	8d 83       	std	Y+5, r24	; 0x05
    1648:	8d 81       	ldd	r24, Y+5	; 0x05
    164a:	9e 81       	ldd	r25, Y+6	; 0x06
    164c:	9a 83       	std	Y+2, r25	; 0x02
    164e:	89 83       	std	Y+1, r24	; 0x01
    1650:	89 81       	ldd	r24, Y+1	; 0x01
    1652:	9a 81       	ldd	r25, Y+2	; 0x02
    1654:	01 97       	sbiw	r24, 0x01	; 1
    1656:	f1 f7       	brne	.-4      	; 0x1654 <CLCD_voidInit+0xf0>
    1658:	9a 83       	std	Y+2, r25	; 0x02
    165a:	89 83       	std	Y+1, r24	; 0x01
	C_LCD_voidSendCommand(0x01); /* 1 or 0x01 or 0b00000001*/

#elif   MODE_SELECT ==_4_BIT_MODE

	/* Function set command : 2 lines , 5*8 font size */
	C_LCD_voidSendCommand(0x33);
    165c:	83 e3       	ldi	r24, 0x33	; 51
    165e:	0e 94 80 06 	call	0xd00	; 0xd00 <C_LCD_voidSendCommand>
	C_LCD_voidSendCommand(0x32);
    1662:	82 e3       	ldi	r24, 0x32	; 50
    1664:	0e 94 80 06 	call	0xd00	; 0xd00 <C_LCD_voidSendCommand>
	C_LCD_voidSendCommand(0x28);   /* 0bNFXXXXXX  --> N: no of lines F: font size*/
    1668:	88 e2       	ldi	r24, 0x28	; 40
    166a:	0e 94 80 06 	call	0xd00	; 0xd00 <C_LCD_voidSendCommand>


	/*Display on off control : disable enable , disable cursor , no blink cursor*/
	C_LCD_voidSendCommand(0x0C);
    166e:	8c e0       	ldi	r24, 0x0C	; 12
    1670:	0e 94 80 06 	call	0xd00	; 0xd00 <C_LCD_voidSendCommand>
	C_LCD_voidSendCommand(0x02);
    1674:	82 e0       	ldi	r24, 0x02	; 2
    1676:	0e 94 80 06 	call	0xd00	; 0xd00 <C_LCD_voidSendCommand>

	C_LCD_voidSendCommand(0x06);
    167a:	86 e0       	ldi	r24, 0x06	; 6
    167c:	0e 94 80 06 	call	0xd00	; 0xd00 <C_LCD_voidSendCommand>

	/* Clear display */
	C_LCD_voidSendCommand(0x01);
    1680:	81 e0       	ldi	r24, 0x01	; 1
    1682:	0e 94 80 06 	call	0xd00	; 0xd00 <C_LCD_voidSendCommand>


#endif


}
    1686:	2e 96       	adiw	r28, 0x0e	; 14
    1688:	0f b6       	in	r0, 0x3f	; 63
    168a:	f8 94       	cli
    168c:	de bf       	out	0x3e, r29	; 62
    168e:	0f be       	out	0x3f, r0	; 63
    1690:	cd bf       	out	0x3d, r28	; 61
    1692:	cf 91       	pop	r28
    1694:	df 91       	pop	r29
    1696:	08 95       	ret

00001698 <CLCD_voidSendString>:

void CLCD_voidSendString(const char* Copy_pcString )
{
    1698:	df 93       	push	r29
    169a:	cf 93       	push	r28
    169c:	00 d0       	rcall	.+0      	; 0x169e <CLCD_voidSendString+0x6>
    169e:	0f 92       	push	r0
    16a0:	cd b7       	in	r28, 0x3d	; 61
    16a2:	de b7       	in	r29, 0x3e	; 62
    16a4:	9b 83       	std	Y+3, r25	; 0x03
    16a6:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Counter = 0;
    16a8:	19 82       	std	Y+1, r1	; 0x01
    16aa:	0e c0       	rjmp	.+28     	; 0x16c8 <CLCD_voidSendString+0x30>
	while (Copy_pcString[Local_u8Counter] != NULL)
	{
		CLCD_voidSendData(Copy_pcString[Local_u8Counter]);
    16ac:	89 81       	ldd	r24, Y+1	; 0x01
    16ae:	28 2f       	mov	r18, r24
    16b0:	30 e0       	ldi	r19, 0x00	; 0
    16b2:	8a 81       	ldd	r24, Y+2	; 0x02
    16b4:	9b 81       	ldd	r25, Y+3	; 0x03
    16b6:	fc 01       	movw	r30, r24
    16b8:	e2 0f       	add	r30, r18
    16ba:	f3 1f       	adc	r31, r19
    16bc:	80 81       	ld	r24, Z
    16be:	0e 94 99 08 	call	0x1132	; 0x1132 <CLCD_voidSendData>
		Local_u8Counter++;
    16c2:	89 81       	ldd	r24, Y+1	; 0x01
    16c4:	8f 5f       	subi	r24, 0xFF	; 255
    16c6:	89 83       	std	Y+1, r24	; 0x01
}

void CLCD_voidSendString(const char* Copy_pcString )
{
	u8 Local_u8Counter = 0;
	while (Copy_pcString[Local_u8Counter] != NULL)
    16c8:	89 81       	ldd	r24, Y+1	; 0x01
    16ca:	28 2f       	mov	r18, r24
    16cc:	30 e0       	ldi	r19, 0x00	; 0
    16ce:	8a 81       	ldd	r24, Y+2	; 0x02
    16d0:	9b 81       	ldd	r25, Y+3	; 0x03
    16d2:	fc 01       	movw	r30, r24
    16d4:	e2 0f       	add	r30, r18
    16d6:	f3 1f       	adc	r31, r19
    16d8:	80 81       	ld	r24, Z
    16da:	88 23       	and	r24, r24
    16dc:	39 f7       	brne	.-50     	; 0x16ac <CLCD_voidSendString+0x14>
	{
		CLCD_voidSendData(Copy_pcString[Local_u8Counter]);
		Local_u8Counter++;
	}
}
    16de:	0f 90       	pop	r0
    16e0:	0f 90       	pop	r0
    16e2:	0f 90       	pop	r0
    16e4:	cf 91       	pop	r28
    16e6:	df 91       	pop	r29
    16e8:	08 95       	ret

000016ea <CLCD_voidGoToXY>:

void CLCD_voidGoToXY(u8 Copy_u8Xpos, u8 Copy_u8Ypos)
{
    16ea:	df 93       	push	r29
    16ec:	cf 93       	push	r28
    16ee:	00 d0       	rcall	.+0      	; 0x16f0 <CLCD_voidGoToXY+0x6>
    16f0:	0f 92       	push	r0
    16f2:	cd b7       	in	r28, 0x3d	; 61
    16f4:	de b7       	in	r29, 0x3e	; 62
    16f6:	8a 83       	std	Y+2, r24	; 0x02
    16f8:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Adress=0;
    16fa:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8Xpos == 0)
    16fc:	8a 81       	ldd	r24, Y+2	; 0x02
    16fe:	88 23       	and	r24, r24
    1700:	19 f4       	brne	.+6      	; 0x1708 <CLCD_voidGoToXY+0x1e>
	{
		Local_u8Adress = Copy_u8Ypos;
    1702:	8b 81       	ldd	r24, Y+3	; 0x03
    1704:	89 83       	std	Y+1, r24	; 0x01
    1706:	06 c0       	rjmp	.+12     	; 0x1714 <CLCD_voidGoToXY+0x2a>
	}
	else if (Copy_u8Xpos == 1)
    1708:	8a 81       	ldd	r24, Y+2	; 0x02
    170a:	81 30       	cpi	r24, 0x01	; 1
    170c:	19 f4       	brne	.+6      	; 0x1714 <CLCD_voidGoToXY+0x2a>
	{
		Local_u8Adress = Copy_u8Ypos+0x40;
    170e:	8b 81       	ldd	r24, Y+3	; 0x03
    1710:	80 5c       	subi	r24, 0xC0	; 192
    1712:	89 83       	std	Y+1, r24	; 0x01
	}

	C_LCD_voidSendCommand(Local_u8Adress+128);
    1714:	89 81       	ldd	r24, Y+1	; 0x01
    1716:	80 58       	subi	r24, 0x80	; 128
    1718:	0e 94 80 06 	call	0xd00	; 0xd00 <C_LCD_voidSendCommand>



}
    171c:	0f 90       	pop	r0
    171e:	0f 90       	pop	r0
    1720:	0f 90       	pop	r0
    1722:	cf 91       	pop	r28
    1724:	df 91       	pop	r29
    1726:	08 95       	ret

00001728 <CLCD_voidWriteSpecialCharacter>:

void CLCD_voidWriteSpecialCharacter(u8* Copy_pu8Pattern, u8 Copy_u8PatternNumber, u8 Copy_u8XPos, u8 Copy_u8YPos)
{
    1728:	df 93       	push	r29
    172a:	cf 93       	push	r28
    172c:	cd b7       	in	r28, 0x3d	; 61
    172e:	de b7       	in	r29, 0x3e	; 62
    1730:	27 97       	sbiw	r28, 0x07	; 7
    1732:	0f b6       	in	r0, 0x3f	; 63
    1734:	f8 94       	cli
    1736:	de bf       	out	0x3e, r29	; 62
    1738:	0f be       	out	0x3f, r0	; 63
    173a:	cd bf       	out	0x3d, r28	; 61
    173c:	9c 83       	std	Y+4, r25	; 0x04
    173e:	8b 83       	std	Y+3, r24	; 0x03
    1740:	6d 83       	std	Y+5, r22	; 0x05
    1742:	4e 83       	std	Y+6, r20	; 0x06
    1744:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8CGRAMAddress= 0, Local_u8Iterator;
    1746:	1a 82       	std	Y+2, r1	; 0x02
	/* Calculate the CGRAM address whose each block is 8 bytes */
	Local_u8CGRAMAddress =Copy_u8PatternNumber*8;
    1748:	8d 81       	ldd	r24, Y+5	; 0x05
    174a:	88 2f       	mov	r24, r24
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	88 0f       	add	r24, r24
    1750:	99 1f       	adc	r25, r25
    1752:	88 0f       	add	r24, r24
    1754:	99 1f       	adc	r25, r25
    1756:	88 0f       	add	r24, r24
    1758:	99 1f       	adc	r25, r25
    175a:	8a 83       	std	Y+2, r24	; 0x02

	/* Send CGRAM Address command to LCD, with setting bit 6, clearing bit 7*/
	C_LCD_voidSendCommand(Local_u8CGRAMAddress+64);
    175c:	8a 81       	ldd	r24, Y+2	; 0x02
    175e:	80 5c       	subi	r24, 0xC0	; 192
    1760:	0e 94 80 06 	call	0xd00	; 0xd00 <C_LCD_voidSendCommand>

	/* Write the pattern into CGRAM */

	for (Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++)
    1764:	19 82       	std	Y+1, r1	; 0x01
    1766:	0e c0       	rjmp	.+28     	; 0x1784 <CLCD_voidWriteSpecialCharacter+0x5c>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Iterator]);
    1768:	89 81       	ldd	r24, Y+1	; 0x01
    176a:	28 2f       	mov	r18, r24
    176c:	30 e0       	ldi	r19, 0x00	; 0
    176e:	8b 81       	ldd	r24, Y+3	; 0x03
    1770:	9c 81       	ldd	r25, Y+4	; 0x04
    1772:	fc 01       	movw	r30, r24
    1774:	e2 0f       	add	r30, r18
    1776:	f3 1f       	adc	r31, r19
    1778:	80 81       	ld	r24, Z
    177a:	0e 94 99 08 	call	0x1132	; 0x1132 <CLCD_voidSendData>
	/* Send CGRAM Address command to LCD, with setting bit 6, clearing bit 7*/
	C_LCD_voidSendCommand(Local_u8CGRAMAddress+64);

	/* Write the pattern into CGRAM */

	for (Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++)
    177e:	89 81       	ldd	r24, Y+1	; 0x01
    1780:	8f 5f       	subi	r24, 0xFF	; 255
    1782:	89 83       	std	Y+1, r24	; 0x01
    1784:	89 81       	ldd	r24, Y+1	; 0x01
    1786:	88 30       	cpi	r24, 0x08	; 8
    1788:	78 f3       	brcs	.-34     	; 0x1768 <CLCD_voidWriteSpecialCharacter+0x40>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Iterator]);
	}

	/* go back to the DDRAM to display the Pattern*/
	CLCD_voidGoToXY(Copy_u8XPos,Copy_u8YPos);
    178a:	8e 81       	ldd	r24, Y+6	; 0x06
    178c:	6f 81       	ldd	r22, Y+7	; 0x07
    178e:	0e 94 75 0b 	call	0x16ea	; 0x16ea <CLCD_voidGoToXY>
	/* Display the pattern written in the CGRAM*/
	CLCD_voidSendData(Copy_u8PatternNumber);
    1792:	8d 81       	ldd	r24, Y+5	; 0x05
    1794:	0e 94 99 08 	call	0x1132	; 0x1132 <CLCD_voidSendData>
}
    1798:	27 96       	adiw	r28, 0x07	; 7
    179a:	0f b6       	in	r0, 0x3f	; 63
    179c:	f8 94       	cli
    179e:	de bf       	out	0x3e, r29	; 62
    17a0:	0f be       	out	0x3f, r0	; 63
    17a2:	cd bf       	out	0x3d, r28	; 61
    17a4:	cf 91       	pop	r28
    17a6:	df 91       	pop	r29
    17a8:	08 95       	ret

000017aa <CLCD_VoidWriteNumber>:

void CLCD_VoidWriteNumber(f32 Copy_u32Number)
{
    17aa:	0f 93       	push	r16
    17ac:	1f 93       	push	r17
    17ae:	df 93       	push	r29
    17b0:	cf 93       	push	r28
    17b2:	cd b7       	in	r28, 0x3d	; 61
    17b4:	de b7       	in	r29, 0x3e	; 62
    17b6:	6d 97       	sbiw	r28, 0x1d	; 29
    17b8:	0f b6       	in	r0, 0x3f	; 63
    17ba:	f8 94       	cli
    17bc:	de bf       	out	0x3e, r29	; 62
    17be:	0f be       	out	0x3f, r0	; 63
    17c0:	cd bf       	out	0x3d, r28	; 61
    17c2:	6a 8f       	std	Y+26, r22	; 0x1a
    17c4:	7b 8f       	std	Y+27, r23	; 0x1b
    17c6:	8c 8f       	std	Y+28, r24	; 0x1c
    17c8:	9d 8f       	std	Y+29, r25	; 0x1d
	s32 Local_s32Number = Copy_u32Number;
    17ca:	6a 8d       	ldd	r22, Y+26	; 0x1a
    17cc:	7b 8d       	ldd	r23, Y+27	; 0x1b
    17ce:	8c 8d       	ldd	r24, Y+28	; 0x1c
    17d0:	9d 8d       	ldd	r25, Y+29	; 0x1d
    17d2:	0e 94 37 04 	call	0x86e	; 0x86e <__fixsfsi>
    17d6:	dc 01       	movw	r26, r24
    17d8:	cb 01       	movw	r24, r22
    17da:	8a 83       	std	Y+2, r24	; 0x02
    17dc:	9b 83       	std	Y+3, r25	; 0x03
    17de:	ac 83       	std	Y+4, r26	; 0x04
    17e0:	bd 83       	std	Y+5, r27	; 0x05

	if(Local_s32Number == 0)
    17e2:	8a 81       	ldd	r24, Y+2	; 0x02
    17e4:	9b 81       	ldd	r25, Y+3	; 0x03
    17e6:	ac 81       	ldd	r26, Y+4	; 0x04
    17e8:	bd 81       	ldd	r27, Y+5	; 0x05
    17ea:	00 97       	sbiw	r24, 0x00	; 0
    17ec:	a1 05       	cpc	r26, r1
    17ee:	b1 05       	cpc	r27, r1
    17f0:	21 f4       	brne	.+8      	; 0x17fa <CLCD_VoidWriteNumber+0x50>
	{
		CLCD_voidSendData('0');
    17f2:	80 e3       	ldi	r24, 0x30	; 48
    17f4:	0e 94 99 08 	call	0x1132	; 0x1132 <CLCD_voidSendData>
    17f8:	18 c0       	rjmp	.+48     	; 0x182a <CLCD_VoidWriteNumber+0x80>
	}
	else if (Local_s32Number <0)
    17fa:	8a 81       	ldd	r24, Y+2	; 0x02
    17fc:	9b 81       	ldd	r25, Y+3	; 0x03
    17fe:	ac 81       	ldd	r26, Y+4	; 0x04
    1800:	bd 81       	ldd	r27, Y+5	; 0x05
    1802:	bb 23       	and	r27, r27
    1804:	94 f4       	brge	.+36     	; 0x182a <CLCD_VoidWriteNumber+0x80>
	{
		CLCD_voidSendData('-');
    1806:	8d e2       	ldi	r24, 0x2D	; 45
    1808:	0e 94 99 08 	call	0x1132	; 0x1132 <CLCD_voidSendData>
		Local_s32Number = Local_s32Number *(-1);
    180c:	8a 81       	ldd	r24, Y+2	; 0x02
    180e:	9b 81       	ldd	r25, Y+3	; 0x03
    1810:	ac 81       	ldd	r26, Y+4	; 0x04
    1812:	bd 81       	ldd	r27, Y+5	; 0x05
    1814:	b0 95       	com	r27
    1816:	a0 95       	com	r26
    1818:	90 95       	com	r25
    181a:	81 95       	neg	r24
    181c:	9f 4f       	sbci	r25, 0xFF	; 255
    181e:	af 4f       	sbci	r26, 0xFF	; 255
    1820:	bf 4f       	sbci	r27, 0xFF	; 255
    1822:	8a 83       	std	Y+2, r24	; 0x02
    1824:	9b 83       	std	Y+3, r25	; 0x03
    1826:	ac 83       	std	Y+4, r26	; 0x04
    1828:	bd 83       	std	Y+5, r27	; 0x05

	}
	u8 Local_u8Array[20]={0};
    182a:	84 e1       	ldi	r24, 0x14	; 20
    182c:	fe 01       	movw	r30, r28
    182e:	36 96       	adiw	r30, 0x06	; 6
    1830:	df 01       	movw	r26, r30
    1832:	98 2f       	mov	r25, r24
    1834:	1d 92       	st	X+, r1
    1836:	9a 95       	dec	r25
    1838:	e9 f7       	brne	.-6      	; 0x1834 <CLCD_VoidWriteNumber+0x8a>
	s8 local_s8Counter =0;
    183a:	19 82       	std	Y+1, r1	; 0x01
    183c:	2f c0       	rjmp	.+94     	; 0x189c <CLCD_VoidWriteNumber+0xf2>
	while (Local_s32Number != 0)
	{
		Local_u8Array[local_s8Counter]= Local_s32Number%10;
    183e:	89 81       	ldd	r24, Y+1	; 0x01
    1840:	08 2f       	mov	r16, r24
    1842:	11 27       	eor	r17, r17
    1844:	07 fd       	sbrc	r16, 7
    1846:	10 95       	com	r17
    1848:	8a 81       	ldd	r24, Y+2	; 0x02
    184a:	9b 81       	ldd	r25, Y+3	; 0x03
    184c:	ac 81       	ldd	r26, Y+4	; 0x04
    184e:	bd 81       	ldd	r27, Y+5	; 0x05
    1850:	2a e0       	ldi	r18, 0x0A	; 10
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	40 e0       	ldi	r20, 0x00	; 0
    1856:	50 e0       	ldi	r21, 0x00	; 0
    1858:	bc 01       	movw	r22, r24
    185a:	cd 01       	movw	r24, r26
    185c:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <__divmodsi4>
    1860:	dc 01       	movw	r26, r24
    1862:	cb 01       	movw	r24, r22
    1864:	28 2f       	mov	r18, r24
    1866:	ce 01       	movw	r24, r28
    1868:	06 96       	adiw	r24, 0x06	; 6
    186a:	fc 01       	movw	r30, r24
    186c:	e0 0f       	add	r30, r16
    186e:	f1 1f       	adc	r31, r17
    1870:	20 83       	st	Z, r18
		Local_s32Number/=10;
    1872:	8a 81       	ldd	r24, Y+2	; 0x02
    1874:	9b 81       	ldd	r25, Y+3	; 0x03
    1876:	ac 81       	ldd	r26, Y+4	; 0x04
    1878:	bd 81       	ldd	r27, Y+5	; 0x05
    187a:	2a e0       	ldi	r18, 0x0A	; 10
    187c:	30 e0       	ldi	r19, 0x00	; 0
    187e:	40 e0       	ldi	r20, 0x00	; 0
    1880:	50 e0       	ldi	r21, 0x00	; 0
    1882:	bc 01       	movw	r22, r24
    1884:	cd 01       	movw	r24, r26
    1886:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <__divmodsi4>
    188a:	da 01       	movw	r26, r20
    188c:	c9 01       	movw	r24, r18
    188e:	8a 83       	std	Y+2, r24	; 0x02
    1890:	9b 83       	std	Y+3, r25	; 0x03
    1892:	ac 83       	std	Y+4, r26	; 0x04
    1894:	bd 83       	std	Y+5, r27	; 0x05
		local_s8Counter++;
    1896:	89 81       	ldd	r24, Y+1	; 0x01
    1898:	8f 5f       	subi	r24, 0xFF	; 255
    189a:	89 83       	std	Y+1, r24	; 0x01
		Local_s32Number = Local_s32Number *(-1);

	}
	u8 Local_u8Array[20]={0};
	s8 local_s8Counter =0;
	while (Local_s32Number != 0)
    189c:	8a 81       	ldd	r24, Y+2	; 0x02
    189e:	9b 81       	ldd	r25, Y+3	; 0x03
    18a0:	ac 81       	ldd	r26, Y+4	; 0x04
    18a2:	bd 81       	ldd	r27, Y+5	; 0x05
    18a4:	00 97       	sbiw	r24, 0x00	; 0
    18a6:	a1 05       	cpc	r26, r1
    18a8:	b1 05       	cpc	r27, r1
    18aa:	49 f6       	brne	.-110    	; 0x183e <CLCD_VoidWriteNumber+0x94>
	{
		Local_u8Array[local_s8Counter]= Local_s32Number%10;
		Local_s32Number/=10;
		local_s8Counter++;
	}
	local_s8Counter--;
    18ac:	89 81       	ldd	r24, Y+1	; 0x01
    18ae:	81 50       	subi	r24, 0x01	; 1
    18b0:	89 83       	std	Y+1, r24	; 0x01
    18b2:	11 c0       	rjmp	.+34     	; 0x18d6 <CLCD_VoidWriteNumber+0x12c>
	while (local_s8Counter>=0)
	{
		CLCD_voidSendData(Local_u8Array[local_s8Counter]+'0');
    18b4:	89 81       	ldd	r24, Y+1	; 0x01
    18b6:	28 2f       	mov	r18, r24
    18b8:	33 27       	eor	r19, r19
    18ba:	27 fd       	sbrc	r18, 7
    18bc:	30 95       	com	r19
    18be:	ce 01       	movw	r24, r28
    18c0:	06 96       	adiw	r24, 0x06	; 6
    18c2:	fc 01       	movw	r30, r24
    18c4:	e2 0f       	add	r30, r18
    18c6:	f3 1f       	adc	r31, r19
    18c8:	80 81       	ld	r24, Z
    18ca:	80 5d       	subi	r24, 0xD0	; 208
    18cc:	0e 94 99 08 	call	0x1132	; 0x1132 <CLCD_voidSendData>
		local_s8Counter--;
    18d0:	89 81       	ldd	r24, Y+1	; 0x01
    18d2:	81 50       	subi	r24, 0x01	; 1
    18d4:	89 83       	std	Y+1, r24	; 0x01
		Local_u8Array[local_s8Counter]= Local_s32Number%10;
		Local_s32Number/=10;
		local_s8Counter++;
	}
	local_s8Counter--;
	while (local_s8Counter>=0)
    18d6:	89 81       	ldd	r24, Y+1	; 0x01
    18d8:	88 23       	and	r24, r24
    18da:	64 f7       	brge	.-40     	; 0x18b4 <CLCD_VoidWriteNumber+0x10a>
	{
		CLCD_voidSendData(Local_u8Array[local_s8Counter]+'0');
		local_s8Counter--;
	}
}
    18dc:	6d 96       	adiw	r28, 0x1d	; 29
    18de:	0f b6       	in	r0, 0x3f	; 63
    18e0:	f8 94       	cli
    18e2:	de bf       	out	0x3e, r29	; 62
    18e4:	0f be       	out	0x3f, r0	; 63
    18e6:	cd bf       	out	0x3d, r28	; 61
    18e8:	cf 91       	pop	r28
    18ea:	df 91       	pop	r29
    18ec:	1f 91       	pop	r17
    18ee:	0f 91       	pop	r16
    18f0:	08 95       	ret

000018f2 <CLCD_voidWriteFloatNumber>:

void CLCD_voidWriteFloatNumber(f32 Copy_f32FloatNumber )
{
    18f2:	df 93       	push	r29
    18f4:	cf 93       	push	r28
    18f6:	cd b7       	in	r28, 0x3d	; 61
    18f8:	de b7       	in	r29, 0x3e	; 62
    18fa:	28 97       	sbiw	r28, 0x08	; 8
    18fc:	0f b6       	in	r0, 0x3f	; 63
    18fe:	f8 94       	cli
    1900:	de bf       	out	0x3e, r29	; 62
    1902:	0f be       	out	0x3f, r0	; 63
    1904:	cd bf       	out	0x3d, r28	; 61
    1906:	6d 83       	std	Y+5, r22	; 0x05
    1908:	7e 83       	std	Y+6, r23	; 0x06
    190a:	8f 83       	std	Y+7, r24	; 0x07
    190c:	98 87       	std	Y+8, r25	; 0x08

	if(Copy_f32FloatNumber == 0)
    190e:	6d 81       	ldd	r22, Y+5	; 0x05
    1910:	7e 81       	ldd	r23, Y+6	; 0x06
    1912:	8f 81       	ldd	r24, Y+7	; 0x07
    1914:	98 85       	ldd	r25, Y+8	; 0x08
    1916:	20 e0       	ldi	r18, 0x00	; 0
    1918:	30 e0       	ldi	r19, 0x00	; 0
    191a:	40 e0       	ldi	r20, 0x00	; 0
    191c:	50 e0       	ldi	r21, 0x00	; 0
    191e:	0e 94 19 03 	call	0x632	; 0x632 <__eqsf2>
    1922:	88 23       	and	r24, r24
    1924:	39 f4       	brne	.+14     	; 0x1934 <CLCD_voidWriteFloatNumber+0x42>
	{
		CLCD_VoidWriteNumber(0);
    1926:	60 e0       	ldi	r22, 0x00	; 0
    1928:	70 e0       	ldi	r23, 0x00	; 0
    192a:	80 e0       	ldi	r24, 0x00	; 0
    192c:	90 e0       	ldi	r25, 0x00	; 0
    192e:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <CLCD_VoidWriteNumber>
    1932:	7c c0       	rjmp	.+248    	; 0x1a2c <CLCD_voidWriteFloatNumber+0x13a>
	}

	else
	{
		s32 Local_s32DecemalNum=Copy_f32FloatNumber;
    1934:	6d 81       	ldd	r22, Y+5	; 0x05
    1936:	7e 81       	ldd	r23, Y+6	; 0x06
    1938:	8f 81       	ldd	r24, Y+7	; 0x07
    193a:	98 85       	ldd	r25, Y+8	; 0x08
    193c:	0e 94 37 04 	call	0x86e	; 0x86e <__fixsfsi>
    1940:	dc 01       	movw	r26, r24
    1942:	cb 01       	movw	r24, r22
    1944:	89 83       	std	Y+1, r24	; 0x01
    1946:	9a 83       	std	Y+2, r25	; 0x02
    1948:	ab 83       	std	Y+3, r26	; 0x03
    194a:	bc 83       	std	Y+4, r27	; 0x04
		CLCD_VoidWriteNumber(Local_s32DecemalNum);
    194c:	69 81       	ldd	r22, Y+1	; 0x01
    194e:	7a 81       	ldd	r23, Y+2	; 0x02
    1950:	8b 81       	ldd	r24, Y+3	; 0x03
    1952:	9c 81       	ldd	r25, Y+4	; 0x04
    1954:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <__floatsisf>
    1958:	dc 01       	movw	r26, r24
    195a:	cb 01       	movw	r24, r22
    195c:	bc 01       	movw	r22, r24
    195e:	cd 01       	movw	r24, r26
    1960:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <CLCD_VoidWriteNumber>
		CLCD_voidSendData('.');
    1964:	8e e2       	ldi	r24, 0x2E	; 46
    1966:	0e 94 99 08 	call	0x1132	; 0x1132 <CLCD_voidSendData>
		Copy_f32FloatNumber = Copy_f32FloatNumber -Local_s32DecemalNum;
    196a:	69 81       	ldd	r22, Y+1	; 0x01
    196c:	7a 81       	ldd	r23, Y+2	; 0x02
    196e:	8b 81       	ldd	r24, Y+3	; 0x03
    1970:	9c 81       	ldd	r25, Y+4	; 0x04
    1972:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <__floatsisf>
    1976:	9b 01       	movw	r18, r22
    1978:	ac 01       	movw	r20, r24
    197a:	6d 81       	ldd	r22, Y+5	; 0x05
    197c:	7e 81       	ldd	r23, Y+6	; 0x06
    197e:	8f 81       	ldd	r24, Y+7	; 0x07
    1980:	98 85       	ldd	r25, Y+8	; 0x08
    1982:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1986:	dc 01       	movw	r26, r24
    1988:	cb 01       	movw	r24, r22
    198a:	8d 83       	std	Y+5, r24	; 0x05
    198c:	9e 83       	std	Y+6, r25	; 0x06
    198e:	af 83       	std	Y+7, r26	; 0x07
    1990:	b8 87       	std	Y+8, r27	; 0x08

		Copy_f32FloatNumber*=100000;
    1992:	6d 81       	ldd	r22, Y+5	; 0x05
    1994:	7e 81       	ldd	r23, Y+6	; 0x06
    1996:	8f 81       	ldd	r24, Y+7	; 0x07
    1998:	98 85       	ldd	r25, Y+8	; 0x08
    199a:	20 e0       	ldi	r18, 0x00	; 0
    199c:	30 e5       	ldi	r19, 0x50	; 80
    199e:	43 ec       	ldi	r20, 0xC3	; 195
    19a0:	57 e4       	ldi	r21, 0x47	; 71
    19a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19a6:	dc 01       	movw	r26, r24
    19a8:	cb 01       	movw	r24, r22
    19aa:	8d 83       	std	Y+5, r24	; 0x05
    19ac:	9e 83       	std	Y+6, r25	; 0x06
    19ae:	af 83       	std	Y+7, r26	; 0x07
    19b0:	b8 87       	std	Y+8, r27	; 0x08
		Local_s32DecemalNum = Copy_f32FloatNumber;
    19b2:	6d 81       	ldd	r22, Y+5	; 0x05
    19b4:	7e 81       	ldd	r23, Y+6	; 0x06
    19b6:	8f 81       	ldd	r24, Y+7	; 0x07
    19b8:	98 85       	ldd	r25, Y+8	; 0x08
    19ba:	0e 94 37 04 	call	0x86e	; 0x86e <__fixsfsi>
    19be:	dc 01       	movw	r26, r24
    19c0:	cb 01       	movw	r24, r22
    19c2:	89 83       	std	Y+1, r24	; 0x01
    19c4:	9a 83       	std	Y+2, r25	; 0x02
    19c6:	ab 83       	std	Y+3, r26	; 0x03
    19c8:	bc 83       	std	Y+4, r27	; 0x04
    19ca:	12 c0       	rjmp	.+36     	; 0x19f0 <CLCD_voidWriteFloatNumber+0xfe>

		while (Local_s32DecemalNum%10 == 0)
		{
			Local_s32DecemalNum/=10;
    19cc:	89 81       	ldd	r24, Y+1	; 0x01
    19ce:	9a 81       	ldd	r25, Y+2	; 0x02
    19d0:	ab 81       	ldd	r26, Y+3	; 0x03
    19d2:	bc 81       	ldd	r27, Y+4	; 0x04
    19d4:	2a e0       	ldi	r18, 0x0A	; 10
    19d6:	30 e0       	ldi	r19, 0x00	; 0
    19d8:	40 e0       	ldi	r20, 0x00	; 0
    19da:	50 e0       	ldi	r21, 0x00	; 0
    19dc:	bc 01       	movw	r22, r24
    19de:	cd 01       	movw	r24, r26
    19e0:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <__divmodsi4>
    19e4:	da 01       	movw	r26, r20
    19e6:	c9 01       	movw	r24, r18
    19e8:	89 83       	std	Y+1, r24	; 0x01
    19ea:	9a 83       	std	Y+2, r25	; 0x02
    19ec:	ab 83       	std	Y+3, r26	; 0x03
    19ee:	bc 83       	std	Y+4, r27	; 0x04
		Copy_f32FloatNumber = Copy_f32FloatNumber -Local_s32DecemalNum;

		Copy_f32FloatNumber*=100000;
		Local_s32DecemalNum = Copy_f32FloatNumber;

		while (Local_s32DecemalNum%10 == 0)
    19f0:	89 81       	ldd	r24, Y+1	; 0x01
    19f2:	9a 81       	ldd	r25, Y+2	; 0x02
    19f4:	ab 81       	ldd	r26, Y+3	; 0x03
    19f6:	bc 81       	ldd	r27, Y+4	; 0x04
    19f8:	2a e0       	ldi	r18, 0x0A	; 10
    19fa:	30 e0       	ldi	r19, 0x00	; 0
    19fc:	40 e0       	ldi	r20, 0x00	; 0
    19fe:	50 e0       	ldi	r21, 0x00	; 0
    1a00:	bc 01       	movw	r22, r24
    1a02:	cd 01       	movw	r24, r26
    1a04:	0e 94 74 16 	call	0x2ce8	; 0x2ce8 <__divmodsi4>
    1a08:	dc 01       	movw	r26, r24
    1a0a:	cb 01       	movw	r24, r22
    1a0c:	00 97       	sbiw	r24, 0x00	; 0
    1a0e:	a1 05       	cpc	r26, r1
    1a10:	b1 05       	cpc	r27, r1
    1a12:	e1 f2       	breq	.-72     	; 0x19cc <CLCD_voidWriteFloatNumber+0xda>
		{
			Local_s32DecemalNum/=10;
		}
		CLCD_VoidWriteNumber(Local_s32DecemalNum);
    1a14:	69 81       	ldd	r22, Y+1	; 0x01
    1a16:	7a 81       	ldd	r23, Y+2	; 0x02
    1a18:	8b 81       	ldd	r24, Y+3	; 0x03
    1a1a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a1c:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <__floatsisf>
    1a20:	dc 01       	movw	r26, r24
    1a22:	cb 01       	movw	r24, r22
    1a24:	bc 01       	movw	r22, r24
    1a26:	cd 01       	movw	r24, r26
    1a28:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <CLCD_VoidWriteNumber>
	}
}
    1a2c:	28 96       	adiw	r28, 0x08	; 8
    1a2e:	0f b6       	in	r0, 0x3f	; 63
    1a30:	f8 94       	cli
    1a32:	de bf       	out	0x3e, r29	; 62
    1a34:	0f be       	out	0x3f, r0	; 63
    1a36:	cd bf       	out	0x3d, r28	; 61
    1a38:	cf 91       	pop	r28
    1a3a:	df 91       	pop	r29
    1a3c:	08 95       	ret

00001a3e <CLCD_voidClear>:
//}



void CLCD_voidClear()
{
    1a3e:	df 93       	push	r29
    1a40:	cf 93       	push	r28
    1a42:	cd b7       	in	r28, 0x3d	; 61
    1a44:	de b7       	in	r29, 0x3e	; 62
	C_LCD_voidSendCommand(0x01);
    1a46:	81 e0       	ldi	r24, 0x01	; 1
    1a48:	0e 94 80 06 	call	0xd00	; 0xd00 <C_LCD_voidSendCommand>

}
    1a4c:	cf 91       	pop	r28
    1a4e:	df 91       	pop	r29
    1a50:	08 95       	ret

00001a52 <DIO_u8SetPinValue>:
//
//	return Local_u8ErrorState;
//}

u8 DIO_u8SetPinValue(u8 Copy_u8port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
    1a52:	df 93       	push	r29
    1a54:	cf 93       	push	r28
    1a56:	cd b7       	in	r28, 0x3d	; 61
    1a58:	de b7       	in	r29, 0x3e	; 62
    1a5a:	28 97       	sbiw	r28, 0x08	; 8
    1a5c:	0f b6       	in	r0, 0x3f	; 63
    1a5e:	f8 94       	cli
    1a60:	de bf       	out	0x3e, r29	; 62
    1a62:	0f be       	out	0x3f, r0	; 63
    1a64:	cd bf       	out	0x3d, r28	; 61
    1a66:	8a 83       	std	Y+2, r24	; 0x02
    1a68:	6b 83       	std	Y+3, r22	; 0x03
    1a6a:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    1a6c:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin<=DIO_u8PIN7)
    1a6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a70:	88 30       	cpi	r24, 0x08	; 8
    1a72:	08 f0       	brcs	.+2      	; 0x1a76 <DIO_u8SetPinValue+0x24>
    1a74:	f4 c0       	rjmp	.+488    	; 0x1c5e <DIO_u8SetPinValue+0x20c>
	{
		if(Copy_u8Value == DIO_u8PIN_LOW)
    1a76:	8c 81       	ldd	r24, Y+4	; 0x04
    1a78:	88 23       	and	r24, r24
    1a7a:	09 f0       	breq	.+2      	; 0x1a7e <DIO_u8SetPinValue+0x2c>
    1a7c:	77 c0       	rjmp	.+238    	; 0x1b6c <DIO_u8SetPinValue+0x11a>
		{

			switch(Copy_u8port)
    1a7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a80:	28 2f       	mov	r18, r24
    1a82:	30 e0       	ldi	r19, 0x00	; 0
    1a84:	38 87       	std	Y+8, r19	; 0x08
    1a86:	2f 83       	std	Y+7, r18	; 0x07
    1a88:	8f 81       	ldd	r24, Y+7	; 0x07
    1a8a:	98 85       	ldd	r25, Y+8	; 0x08
    1a8c:	81 30       	cpi	r24, 0x01	; 1
    1a8e:	91 05       	cpc	r25, r1
    1a90:	59 f1       	breq	.+86     	; 0x1ae8 <DIO_u8SetPinValue+0x96>
    1a92:	2f 81       	ldd	r18, Y+7	; 0x07
    1a94:	38 85       	ldd	r19, Y+8	; 0x08
    1a96:	22 30       	cpi	r18, 0x02	; 2
    1a98:	31 05       	cpc	r19, r1
    1a9a:	2c f4       	brge	.+10     	; 0x1aa6 <DIO_u8SetPinValue+0x54>
    1a9c:	8f 81       	ldd	r24, Y+7	; 0x07
    1a9e:	98 85       	ldd	r25, Y+8	; 0x08
    1aa0:	00 97       	sbiw	r24, 0x00	; 0
    1aa2:	69 f0       	breq	.+26     	; 0x1abe <DIO_u8SetPinValue+0x6c>
    1aa4:	60 c0       	rjmp	.+192    	; 0x1b66 <DIO_u8SetPinValue+0x114>
    1aa6:	2f 81       	ldd	r18, Y+7	; 0x07
    1aa8:	38 85       	ldd	r19, Y+8	; 0x08
    1aaa:	22 30       	cpi	r18, 0x02	; 2
    1aac:	31 05       	cpc	r19, r1
    1aae:	89 f1       	breq	.+98     	; 0x1b12 <DIO_u8SetPinValue+0xc0>
    1ab0:	8f 81       	ldd	r24, Y+7	; 0x07
    1ab2:	98 85       	ldd	r25, Y+8	; 0x08
    1ab4:	83 30       	cpi	r24, 0x03	; 3
    1ab6:	91 05       	cpc	r25, r1
    1ab8:	09 f4       	brne	.+2      	; 0x1abc <DIO_u8SetPinValue+0x6a>
    1aba:	40 c0       	rjmp	.+128    	; 0x1b3c <DIO_u8SetPinValue+0xea>
    1abc:	54 c0       	rjmp	.+168    	; 0x1b66 <DIO_u8SetPinValue+0x114>
			{
			case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
    1abe:	ab e3       	ldi	r26, 0x3B	; 59
    1ac0:	b0 e0       	ldi	r27, 0x00	; 0
    1ac2:	eb e3       	ldi	r30, 0x3B	; 59
    1ac4:	f0 e0       	ldi	r31, 0x00	; 0
    1ac6:	80 81       	ld	r24, Z
    1ac8:	48 2f       	mov	r20, r24
    1aca:	8b 81       	ldd	r24, Y+3	; 0x03
    1acc:	28 2f       	mov	r18, r24
    1ace:	30 e0       	ldi	r19, 0x00	; 0
    1ad0:	81 e0       	ldi	r24, 0x01	; 1
    1ad2:	90 e0       	ldi	r25, 0x00	; 0
    1ad4:	02 2e       	mov	r0, r18
    1ad6:	02 c0       	rjmp	.+4      	; 0x1adc <DIO_u8SetPinValue+0x8a>
    1ad8:	88 0f       	add	r24, r24
    1ada:	99 1f       	adc	r25, r25
    1adc:	0a 94       	dec	r0
    1ade:	e2 f7       	brpl	.-8      	; 0x1ad8 <DIO_u8SetPinValue+0x86>
    1ae0:	80 95       	com	r24
    1ae2:	84 23       	and	r24, r20
    1ae4:	8c 93       	st	X, r24
    1ae6:	bd c0       	rjmp	.+378    	; 0x1c62 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
    1ae8:	a8 e3       	ldi	r26, 0x38	; 56
    1aea:	b0 e0       	ldi	r27, 0x00	; 0
    1aec:	e8 e3       	ldi	r30, 0x38	; 56
    1aee:	f0 e0       	ldi	r31, 0x00	; 0
    1af0:	80 81       	ld	r24, Z
    1af2:	48 2f       	mov	r20, r24
    1af4:	8b 81       	ldd	r24, Y+3	; 0x03
    1af6:	28 2f       	mov	r18, r24
    1af8:	30 e0       	ldi	r19, 0x00	; 0
    1afa:	81 e0       	ldi	r24, 0x01	; 1
    1afc:	90 e0       	ldi	r25, 0x00	; 0
    1afe:	02 2e       	mov	r0, r18
    1b00:	02 c0       	rjmp	.+4      	; 0x1b06 <DIO_u8SetPinValue+0xb4>
    1b02:	88 0f       	add	r24, r24
    1b04:	99 1f       	adc	r25, r25
    1b06:	0a 94       	dec	r0
    1b08:	e2 f7       	brpl	.-8      	; 0x1b02 <DIO_u8SetPinValue+0xb0>
    1b0a:	80 95       	com	r24
    1b0c:	84 23       	and	r24, r20
    1b0e:	8c 93       	st	X, r24
    1b10:	a8 c0       	rjmp	.+336    	; 0x1c62 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin); break;
    1b12:	a5 e3       	ldi	r26, 0x35	; 53
    1b14:	b0 e0       	ldi	r27, 0x00	; 0
    1b16:	e5 e3       	ldi	r30, 0x35	; 53
    1b18:	f0 e0       	ldi	r31, 0x00	; 0
    1b1a:	80 81       	ld	r24, Z
    1b1c:	48 2f       	mov	r20, r24
    1b1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b20:	28 2f       	mov	r18, r24
    1b22:	30 e0       	ldi	r19, 0x00	; 0
    1b24:	81 e0       	ldi	r24, 0x01	; 1
    1b26:	90 e0       	ldi	r25, 0x00	; 0
    1b28:	02 2e       	mov	r0, r18
    1b2a:	02 c0       	rjmp	.+4      	; 0x1b30 <DIO_u8SetPinValue+0xde>
    1b2c:	88 0f       	add	r24, r24
    1b2e:	99 1f       	adc	r25, r25
    1b30:	0a 94       	dec	r0
    1b32:	e2 f7       	brpl	.-8      	; 0x1b2c <DIO_u8SetPinValue+0xda>
    1b34:	80 95       	com	r24
    1b36:	84 23       	and	r24, r20
    1b38:	8c 93       	st	X, r24
    1b3a:	93 c0       	rjmp	.+294    	; 0x1c62 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin); break;
    1b3c:	a2 e3       	ldi	r26, 0x32	; 50
    1b3e:	b0 e0       	ldi	r27, 0x00	; 0
    1b40:	e2 e3       	ldi	r30, 0x32	; 50
    1b42:	f0 e0       	ldi	r31, 0x00	; 0
    1b44:	80 81       	ld	r24, Z
    1b46:	48 2f       	mov	r20, r24
    1b48:	8b 81       	ldd	r24, Y+3	; 0x03
    1b4a:	28 2f       	mov	r18, r24
    1b4c:	30 e0       	ldi	r19, 0x00	; 0
    1b4e:	81 e0       	ldi	r24, 0x01	; 1
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	02 2e       	mov	r0, r18
    1b54:	02 c0       	rjmp	.+4      	; 0x1b5a <DIO_u8SetPinValue+0x108>
    1b56:	88 0f       	add	r24, r24
    1b58:	99 1f       	adc	r25, r25
    1b5a:	0a 94       	dec	r0
    1b5c:	e2 f7       	brpl	.-8      	; 0x1b56 <DIO_u8SetPinValue+0x104>
    1b5e:	80 95       	com	r24
    1b60:	84 23       	and	r24, r20
    1b62:	8c 93       	st	X, r24
    1b64:	7e c0       	rjmp	.+252    	; 0x1c62 <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState =1; break;
    1b66:	81 e0       	ldi	r24, 0x01	; 1
    1b68:	89 83       	std	Y+1, r24	; 0x01
    1b6a:	7b c0       	rjmp	.+246    	; 0x1c62 <DIO_u8SetPinValue+0x210>

			}
		}
		else if(Copy_u8Value == DIO_u8PIN_HIGH)
    1b6c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b6e:	81 30       	cpi	r24, 0x01	; 1
    1b70:	09 f0       	breq	.+2      	; 0x1b74 <DIO_u8SetPinValue+0x122>
    1b72:	72 c0       	rjmp	.+228    	; 0x1c58 <DIO_u8SetPinValue+0x206>
		{

			switch(Copy_u8port)
    1b74:	8a 81       	ldd	r24, Y+2	; 0x02
    1b76:	28 2f       	mov	r18, r24
    1b78:	30 e0       	ldi	r19, 0x00	; 0
    1b7a:	3e 83       	std	Y+6, r19	; 0x06
    1b7c:	2d 83       	std	Y+5, r18	; 0x05
    1b7e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b80:	9e 81       	ldd	r25, Y+6	; 0x06
    1b82:	81 30       	cpi	r24, 0x01	; 1
    1b84:	91 05       	cpc	r25, r1
    1b86:	49 f1       	breq	.+82     	; 0x1bda <DIO_u8SetPinValue+0x188>
    1b88:	2d 81       	ldd	r18, Y+5	; 0x05
    1b8a:	3e 81       	ldd	r19, Y+6	; 0x06
    1b8c:	22 30       	cpi	r18, 0x02	; 2
    1b8e:	31 05       	cpc	r19, r1
    1b90:	2c f4       	brge	.+10     	; 0x1b9c <DIO_u8SetPinValue+0x14a>
    1b92:	8d 81       	ldd	r24, Y+5	; 0x05
    1b94:	9e 81       	ldd	r25, Y+6	; 0x06
    1b96:	00 97       	sbiw	r24, 0x00	; 0
    1b98:	61 f0       	breq	.+24     	; 0x1bb2 <DIO_u8SetPinValue+0x160>
    1b9a:	5b c0       	rjmp	.+182    	; 0x1c52 <DIO_u8SetPinValue+0x200>
    1b9c:	2d 81       	ldd	r18, Y+5	; 0x05
    1b9e:	3e 81       	ldd	r19, Y+6	; 0x06
    1ba0:	22 30       	cpi	r18, 0x02	; 2
    1ba2:	31 05       	cpc	r19, r1
    1ba4:	71 f1       	breq	.+92     	; 0x1c02 <DIO_u8SetPinValue+0x1b0>
    1ba6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ba8:	9e 81       	ldd	r25, Y+6	; 0x06
    1baa:	83 30       	cpi	r24, 0x03	; 3
    1bac:	91 05       	cpc	r25, r1
    1bae:	e9 f1       	breq	.+122    	; 0x1c2a <DIO_u8SetPinValue+0x1d8>
    1bb0:	50 c0       	rjmp	.+160    	; 0x1c52 <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
    1bb2:	ab e3       	ldi	r26, 0x3B	; 59
    1bb4:	b0 e0       	ldi	r27, 0x00	; 0
    1bb6:	eb e3       	ldi	r30, 0x3B	; 59
    1bb8:	f0 e0       	ldi	r31, 0x00	; 0
    1bba:	80 81       	ld	r24, Z
    1bbc:	48 2f       	mov	r20, r24
    1bbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc0:	28 2f       	mov	r18, r24
    1bc2:	30 e0       	ldi	r19, 0x00	; 0
    1bc4:	81 e0       	ldi	r24, 0x01	; 1
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	02 2e       	mov	r0, r18
    1bca:	02 c0       	rjmp	.+4      	; 0x1bd0 <DIO_u8SetPinValue+0x17e>
    1bcc:	88 0f       	add	r24, r24
    1bce:	99 1f       	adc	r25, r25
    1bd0:	0a 94       	dec	r0
    1bd2:	e2 f7       	brpl	.-8      	; 0x1bcc <DIO_u8SetPinValue+0x17a>
    1bd4:	84 2b       	or	r24, r20
    1bd6:	8c 93       	st	X, r24
    1bd8:	44 c0       	rjmp	.+136    	; 0x1c62 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
    1bda:	a8 e3       	ldi	r26, 0x38	; 56
    1bdc:	b0 e0       	ldi	r27, 0x00	; 0
    1bde:	e8 e3       	ldi	r30, 0x38	; 56
    1be0:	f0 e0       	ldi	r31, 0x00	; 0
    1be2:	80 81       	ld	r24, Z
    1be4:	48 2f       	mov	r20, r24
    1be6:	8b 81       	ldd	r24, Y+3	; 0x03
    1be8:	28 2f       	mov	r18, r24
    1bea:	30 e0       	ldi	r19, 0x00	; 0
    1bec:	81 e0       	ldi	r24, 0x01	; 1
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	02 2e       	mov	r0, r18
    1bf2:	02 c0       	rjmp	.+4      	; 0x1bf8 <DIO_u8SetPinValue+0x1a6>
    1bf4:	88 0f       	add	r24, r24
    1bf6:	99 1f       	adc	r25, r25
    1bf8:	0a 94       	dec	r0
    1bfa:	e2 f7       	brpl	.-8      	; 0x1bf4 <DIO_u8SetPinValue+0x1a2>
    1bfc:	84 2b       	or	r24, r20
    1bfe:	8c 93       	st	X, r24
    1c00:	30 c0       	rjmp	.+96     	; 0x1c62 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin); break;
    1c02:	a5 e3       	ldi	r26, 0x35	; 53
    1c04:	b0 e0       	ldi	r27, 0x00	; 0
    1c06:	e5 e3       	ldi	r30, 0x35	; 53
    1c08:	f0 e0       	ldi	r31, 0x00	; 0
    1c0a:	80 81       	ld	r24, Z
    1c0c:	48 2f       	mov	r20, r24
    1c0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c10:	28 2f       	mov	r18, r24
    1c12:	30 e0       	ldi	r19, 0x00	; 0
    1c14:	81 e0       	ldi	r24, 0x01	; 1
    1c16:	90 e0       	ldi	r25, 0x00	; 0
    1c18:	02 2e       	mov	r0, r18
    1c1a:	02 c0       	rjmp	.+4      	; 0x1c20 <DIO_u8SetPinValue+0x1ce>
    1c1c:	88 0f       	add	r24, r24
    1c1e:	99 1f       	adc	r25, r25
    1c20:	0a 94       	dec	r0
    1c22:	e2 f7       	brpl	.-8      	; 0x1c1c <DIO_u8SetPinValue+0x1ca>
    1c24:	84 2b       	or	r24, r20
    1c26:	8c 93       	st	X, r24
    1c28:	1c c0       	rjmp	.+56     	; 0x1c62 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin); break;
    1c2a:	a2 e3       	ldi	r26, 0x32	; 50
    1c2c:	b0 e0       	ldi	r27, 0x00	; 0
    1c2e:	e2 e3       	ldi	r30, 0x32	; 50
    1c30:	f0 e0       	ldi	r31, 0x00	; 0
    1c32:	80 81       	ld	r24, Z
    1c34:	48 2f       	mov	r20, r24
    1c36:	8b 81       	ldd	r24, Y+3	; 0x03
    1c38:	28 2f       	mov	r18, r24
    1c3a:	30 e0       	ldi	r19, 0x00	; 0
    1c3c:	81 e0       	ldi	r24, 0x01	; 1
    1c3e:	90 e0       	ldi	r25, 0x00	; 0
    1c40:	02 2e       	mov	r0, r18
    1c42:	02 c0       	rjmp	.+4      	; 0x1c48 <DIO_u8SetPinValue+0x1f6>
    1c44:	88 0f       	add	r24, r24
    1c46:	99 1f       	adc	r25, r25
    1c48:	0a 94       	dec	r0
    1c4a:	e2 f7       	brpl	.-8      	; 0x1c44 <DIO_u8SetPinValue+0x1f2>
    1c4c:	84 2b       	or	r24, r20
    1c4e:	8c 93       	st	X, r24
    1c50:	08 c0       	rjmp	.+16     	; 0x1c62 <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState =1; break;
    1c52:	81 e0       	ldi	r24, 0x01	; 1
    1c54:	89 83       	std	Y+1, r24	; 0x01
    1c56:	05 c0       	rjmp	.+10     	; 0x1c62 <DIO_u8SetPinValue+0x210>

			}
		}
		else
		{
			Local_u8ErrorState = 1;
    1c58:	81 e0       	ldi	r24, 0x01	; 1
    1c5a:	89 83       	std	Y+1, r24	; 0x01
    1c5c:	02 c0       	rjmp	.+4      	; 0x1c62 <DIO_u8SetPinValue+0x210>
		}

	}
	else
	{
		Local_u8ErrorState = 1;
    1c5e:	81 e0       	ldi	r24, 0x01	; 1
    1c60:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1c62:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c64:	28 96       	adiw	r28, 0x08	; 8
    1c66:	0f b6       	in	r0, 0x3f	; 63
    1c68:	f8 94       	cli
    1c6a:	de bf       	out	0x3e, r29	; 62
    1c6c:	0f be       	out	0x3f, r0	; 63
    1c6e:	cd bf       	out	0x3d, r28	; 61
    1c70:	cf 91       	pop	r28
    1c72:	df 91       	pop	r29
    1c74:	08 95       	ret

00001c76 <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8port, u8 Copy_u8Value)
{
    1c76:	df 93       	push	r29
    1c78:	cf 93       	push	r28
    1c7a:	00 d0       	rcall	.+0      	; 0x1c7c <DIO_u8SetPortValue+0x6>
    1c7c:	00 d0       	rcall	.+0      	; 0x1c7e <DIO_u8SetPortValue+0x8>
    1c7e:	0f 92       	push	r0
    1c80:	cd b7       	in	r28, 0x3d	; 61
    1c82:	de b7       	in	r29, 0x3e	; 62
    1c84:	8a 83       	std	Y+2, r24	; 0x02
    1c86:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    1c88:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8port<=DIO_u8PORTD)
    1c8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c8c:	84 30       	cpi	r24, 0x04	; 4
    1c8e:	b0 f5       	brcc	.+108    	; 0x1cfc <DIO_u8SetPortValue+0x86>
	{
		switch(Copy_u8port)
    1c90:	8a 81       	ldd	r24, Y+2	; 0x02
    1c92:	28 2f       	mov	r18, r24
    1c94:	30 e0       	ldi	r19, 0x00	; 0
    1c96:	3d 83       	std	Y+5, r19	; 0x05
    1c98:	2c 83       	std	Y+4, r18	; 0x04
    1c9a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c9c:	9d 81       	ldd	r25, Y+5	; 0x05
    1c9e:	81 30       	cpi	r24, 0x01	; 1
    1ca0:	91 05       	cpc	r25, r1
    1ca2:	d1 f0       	breq	.+52     	; 0x1cd8 <DIO_u8SetPortValue+0x62>
    1ca4:	2c 81       	ldd	r18, Y+4	; 0x04
    1ca6:	3d 81       	ldd	r19, Y+5	; 0x05
    1ca8:	22 30       	cpi	r18, 0x02	; 2
    1caa:	31 05       	cpc	r19, r1
    1cac:	2c f4       	brge	.+10     	; 0x1cb8 <DIO_u8SetPortValue+0x42>
    1cae:	8c 81       	ldd	r24, Y+4	; 0x04
    1cb0:	9d 81       	ldd	r25, Y+5	; 0x05
    1cb2:	00 97       	sbiw	r24, 0x00	; 0
    1cb4:	61 f0       	breq	.+24     	; 0x1cce <DIO_u8SetPortValue+0x58>
    1cb6:	1f c0       	rjmp	.+62     	; 0x1cf6 <DIO_u8SetPortValue+0x80>
    1cb8:	2c 81       	ldd	r18, Y+4	; 0x04
    1cba:	3d 81       	ldd	r19, Y+5	; 0x05
    1cbc:	22 30       	cpi	r18, 0x02	; 2
    1cbe:	31 05       	cpc	r19, r1
    1cc0:	81 f0       	breq	.+32     	; 0x1ce2 <DIO_u8SetPortValue+0x6c>
    1cc2:	8c 81       	ldd	r24, Y+4	; 0x04
    1cc4:	9d 81       	ldd	r25, Y+5	; 0x05
    1cc6:	83 30       	cpi	r24, 0x03	; 3
    1cc8:	91 05       	cpc	r25, r1
    1cca:	81 f0       	breq	.+32     	; 0x1cec <DIO_u8SetPortValue+0x76>
    1ccc:	14 c0       	rjmp	.+40     	; 0x1cf6 <DIO_u8SetPortValue+0x80>
		{
		case DIO_u8PORTA: PORTA = Copy_u8Value; break;
    1cce:	eb e3       	ldi	r30, 0x3B	; 59
    1cd0:	f0 e0       	ldi	r31, 0x00	; 0
    1cd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd4:	80 83       	st	Z, r24
    1cd6:	14 c0       	rjmp	.+40     	; 0x1d00 <DIO_u8SetPortValue+0x8a>
		case DIO_u8PORTB: PORTB = Copy_u8Value; break;
    1cd8:	e8 e3       	ldi	r30, 0x38	; 56
    1cda:	f0 e0       	ldi	r31, 0x00	; 0
    1cdc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cde:	80 83       	st	Z, r24
    1ce0:	0f c0       	rjmp	.+30     	; 0x1d00 <DIO_u8SetPortValue+0x8a>
		case DIO_u8PORTC: PORTC = Copy_u8Value; break;
    1ce2:	e5 e3       	ldi	r30, 0x35	; 53
    1ce4:	f0 e0       	ldi	r31, 0x00	; 0
    1ce6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce8:	80 83       	st	Z, r24
    1cea:	0a c0       	rjmp	.+20     	; 0x1d00 <DIO_u8SetPortValue+0x8a>
		case DIO_u8PORTD: PORTD = Copy_u8Value; break;
    1cec:	e2 e3       	ldi	r30, 0x32	; 50
    1cee:	f0 e0       	ldi	r31, 0x00	; 0
    1cf0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf2:	80 83       	st	Z, r24
    1cf4:	05 c0       	rjmp	.+10     	; 0x1d00 <DIO_u8SetPortValue+0x8a>
		default: Local_u8ErrorState =1; break;
    1cf6:	81 e0       	ldi	r24, 0x01	; 1
    1cf8:	89 83       	std	Y+1, r24	; 0x01
    1cfa:	02 c0       	rjmp	.+4      	; 0x1d00 <DIO_u8SetPortValue+0x8a>

		}
	}
	else
	{
		Local_u8ErrorState = 1;
    1cfc:	81 e0       	ldi	r24, 0x01	; 1
    1cfe:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_u8ErrorState;
    1d00:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d02:	0f 90       	pop	r0
    1d04:	0f 90       	pop	r0
    1d06:	0f 90       	pop	r0
    1d08:	0f 90       	pop	r0
    1d0a:	0f 90       	pop	r0
    1d0c:	cf 91       	pop	r28
    1d0e:	df 91       	pop	r29
    1d10:	08 95       	ret

00001d12 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8port, u8 Copy_u8Pin, u8* Copy_Pu8Value)
{
    1d12:	df 93       	push	r29
    1d14:	cf 93       	push	r28
    1d16:	cd b7       	in	r28, 0x3d	; 61
    1d18:	de b7       	in	r29, 0x3e	; 62
    1d1a:	27 97       	sbiw	r28, 0x07	; 7
    1d1c:	0f b6       	in	r0, 0x3f	; 63
    1d1e:	f8 94       	cli
    1d20:	de bf       	out	0x3e, r29	; 62
    1d22:	0f be       	out	0x3f, r0	; 63
    1d24:	cd bf       	out	0x3d, r28	; 61
    1d26:	8a 83       	std	Y+2, r24	; 0x02
    1d28:	6b 83       	std	Y+3, r22	; 0x03
    1d2a:	5d 83       	std	Y+5, r21	; 0x05
    1d2c:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    1d2e:	19 82       	std	Y+1, r1	; 0x01

	if((Copy_Pu8Value != NULL )&&(Copy_u8Pin<=DIO_u8PIN7))
    1d30:	8c 81       	ldd	r24, Y+4	; 0x04
    1d32:	9d 81       	ldd	r25, Y+5	; 0x05
    1d34:	00 97       	sbiw	r24, 0x00	; 0
    1d36:	09 f4       	brne	.+2      	; 0x1d3a <DIO_u8GetPinValue+0x28>
    1d38:	78 c0       	rjmp	.+240    	; 0x1e2a <DIO_u8GetPinValue+0x118>
    1d3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d3c:	88 30       	cpi	r24, 0x08	; 8
    1d3e:	08 f0       	brcs	.+2      	; 0x1d42 <DIO_u8GetPinValue+0x30>
    1d40:	74 c0       	rjmp	.+232    	; 0x1e2a <DIO_u8GetPinValue+0x118>
	{


			switch(Copy_u8port)
    1d42:	8a 81       	ldd	r24, Y+2	; 0x02
    1d44:	28 2f       	mov	r18, r24
    1d46:	30 e0       	ldi	r19, 0x00	; 0
    1d48:	3f 83       	std	Y+7, r19	; 0x07
    1d4a:	2e 83       	std	Y+6, r18	; 0x06
    1d4c:	4e 81       	ldd	r20, Y+6	; 0x06
    1d4e:	5f 81       	ldd	r21, Y+7	; 0x07
    1d50:	41 30       	cpi	r20, 0x01	; 1
    1d52:	51 05       	cpc	r21, r1
    1d54:	59 f1       	breq	.+86     	; 0x1dac <DIO_u8GetPinValue+0x9a>
    1d56:	8e 81       	ldd	r24, Y+6	; 0x06
    1d58:	9f 81       	ldd	r25, Y+7	; 0x07
    1d5a:	82 30       	cpi	r24, 0x02	; 2
    1d5c:	91 05       	cpc	r25, r1
    1d5e:	34 f4       	brge	.+12     	; 0x1d6c <DIO_u8GetPinValue+0x5a>
    1d60:	2e 81       	ldd	r18, Y+6	; 0x06
    1d62:	3f 81       	ldd	r19, Y+7	; 0x07
    1d64:	21 15       	cp	r18, r1
    1d66:	31 05       	cpc	r19, r1
    1d68:	69 f0       	breq	.+26     	; 0x1d84 <DIO_u8GetPinValue+0x72>
    1d6a:	5c c0       	rjmp	.+184    	; 0x1e24 <DIO_u8GetPinValue+0x112>
    1d6c:	4e 81       	ldd	r20, Y+6	; 0x06
    1d6e:	5f 81       	ldd	r21, Y+7	; 0x07
    1d70:	42 30       	cpi	r20, 0x02	; 2
    1d72:	51 05       	cpc	r21, r1
    1d74:	79 f1       	breq	.+94     	; 0x1dd4 <DIO_u8GetPinValue+0xc2>
    1d76:	8e 81       	ldd	r24, Y+6	; 0x06
    1d78:	9f 81       	ldd	r25, Y+7	; 0x07
    1d7a:	83 30       	cpi	r24, 0x03	; 3
    1d7c:	91 05       	cpc	r25, r1
    1d7e:	09 f4       	brne	.+2      	; 0x1d82 <DIO_u8GetPinValue+0x70>
    1d80:	3d c0       	rjmp	.+122    	; 0x1dfc <DIO_u8GetPinValue+0xea>
    1d82:	50 c0       	rjmp	.+160    	; 0x1e24 <DIO_u8GetPinValue+0x112>
			{
			case DIO_u8PORTA: * Copy_Pu8Value = GET_BIT(PINA,Copy_u8Pin); break;
    1d84:	e9 e3       	ldi	r30, 0x39	; 57
    1d86:	f0 e0       	ldi	r31, 0x00	; 0
    1d88:	80 81       	ld	r24, Z
    1d8a:	28 2f       	mov	r18, r24
    1d8c:	30 e0       	ldi	r19, 0x00	; 0
    1d8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d90:	88 2f       	mov	r24, r24
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	a9 01       	movw	r20, r18
    1d96:	02 c0       	rjmp	.+4      	; 0x1d9c <DIO_u8GetPinValue+0x8a>
    1d98:	55 95       	asr	r21
    1d9a:	47 95       	ror	r20
    1d9c:	8a 95       	dec	r24
    1d9e:	e2 f7       	brpl	.-8      	; 0x1d98 <DIO_u8GetPinValue+0x86>
    1da0:	ca 01       	movw	r24, r20
    1da2:	81 70       	andi	r24, 0x01	; 1
    1da4:	ec 81       	ldd	r30, Y+4	; 0x04
    1da6:	fd 81       	ldd	r31, Y+5	; 0x05
    1da8:	80 83       	st	Z, r24
    1daa:	41 c0       	rjmp	.+130    	; 0x1e2e <DIO_u8GetPinValue+0x11c>
			case DIO_u8PORTB: * Copy_Pu8Value = GET_BIT(PINB,Copy_u8Pin); break;
    1dac:	e6 e3       	ldi	r30, 0x36	; 54
    1dae:	f0 e0       	ldi	r31, 0x00	; 0
    1db0:	80 81       	ld	r24, Z
    1db2:	28 2f       	mov	r18, r24
    1db4:	30 e0       	ldi	r19, 0x00	; 0
    1db6:	8b 81       	ldd	r24, Y+3	; 0x03
    1db8:	88 2f       	mov	r24, r24
    1dba:	90 e0       	ldi	r25, 0x00	; 0
    1dbc:	a9 01       	movw	r20, r18
    1dbe:	02 c0       	rjmp	.+4      	; 0x1dc4 <DIO_u8GetPinValue+0xb2>
    1dc0:	55 95       	asr	r21
    1dc2:	47 95       	ror	r20
    1dc4:	8a 95       	dec	r24
    1dc6:	e2 f7       	brpl	.-8      	; 0x1dc0 <DIO_u8GetPinValue+0xae>
    1dc8:	ca 01       	movw	r24, r20
    1dca:	81 70       	andi	r24, 0x01	; 1
    1dcc:	ec 81       	ldd	r30, Y+4	; 0x04
    1dce:	fd 81       	ldd	r31, Y+5	; 0x05
    1dd0:	80 83       	st	Z, r24
    1dd2:	2d c0       	rjmp	.+90     	; 0x1e2e <DIO_u8GetPinValue+0x11c>
			case DIO_u8PORTC: * Copy_Pu8Value = GET_BIT(PINC,Copy_u8Pin); break;
    1dd4:	e3 e3       	ldi	r30, 0x33	; 51
    1dd6:	f0 e0       	ldi	r31, 0x00	; 0
    1dd8:	80 81       	ld	r24, Z
    1dda:	28 2f       	mov	r18, r24
    1ddc:	30 e0       	ldi	r19, 0x00	; 0
    1dde:	8b 81       	ldd	r24, Y+3	; 0x03
    1de0:	88 2f       	mov	r24, r24
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	a9 01       	movw	r20, r18
    1de6:	02 c0       	rjmp	.+4      	; 0x1dec <DIO_u8GetPinValue+0xda>
    1de8:	55 95       	asr	r21
    1dea:	47 95       	ror	r20
    1dec:	8a 95       	dec	r24
    1dee:	e2 f7       	brpl	.-8      	; 0x1de8 <DIO_u8GetPinValue+0xd6>
    1df0:	ca 01       	movw	r24, r20
    1df2:	81 70       	andi	r24, 0x01	; 1
    1df4:	ec 81       	ldd	r30, Y+4	; 0x04
    1df6:	fd 81       	ldd	r31, Y+5	; 0x05
    1df8:	80 83       	st	Z, r24
    1dfa:	19 c0       	rjmp	.+50     	; 0x1e2e <DIO_u8GetPinValue+0x11c>
			case DIO_u8PORTD: * Copy_Pu8Value = GET_BIT(PIND,Copy_u8Pin); break;
    1dfc:	e0 e3       	ldi	r30, 0x30	; 48
    1dfe:	f0 e0       	ldi	r31, 0x00	; 0
    1e00:	80 81       	ld	r24, Z
    1e02:	28 2f       	mov	r18, r24
    1e04:	30 e0       	ldi	r19, 0x00	; 0
    1e06:	8b 81       	ldd	r24, Y+3	; 0x03
    1e08:	88 2f       	mov	r24, r24
    1e0a:	90 e0       	ldi	r25, 0x00	; 0
    1e0c:	a9 01       	movw	r20, r18
    1e0e:	02 c0       	rjmp	.+4      	; 0x1e14 <DIO_u8GetPinValue+0x102>
    1e10:	55 95       	asr	r21
    1e12:	47 95       	ror	r20
    1e14:	8a 95       	dec	r24
    1e16:	e2 f7       	brpl	.-8      	; 0x1e10 <DIO_u8GetPinValue+0xfe>
    1e18:	ca 01       	movw	r24, r20
    1e1a:	81 70       	andi	r24, 0x01	; 1
    1e1c:	ec 81       	ldd	r30, Y+4	; 0x04
    1e1e:	fd 81       	ldd	r31, Y+5	; 0x05
    1e20:	80 83       	st	Z, r24
    1e22:	05 c0       	rjmp	.+10     	; 0x1e2e <DIO_u8GetPinValue+0x11c>
			default: Local_u8ErrorState =1; break;
    1e24:	81 e0       	ldi	r24, 0x01	; 1
    1e26:	89 83       	std	Y+1, r24	; 0x01
    1e28:	02 c0       	rjmp	.+4      	; 0x1e2e <DIO_u8GetPinValue+0x11c>

			}
	}
	else
	{
		Local_u8ErrorState = 1;
    1e2a:	81 e0       	ldi	r24, 0x01	; 1
    1e2c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1e2e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e30:	27 96       	adiw	r28, 0x07	; 7
    1e32:	0f b6       	in	r0, 0x3f	; 63
    1e34:	f8 94       	cli
    1e36:	de bf       	out	0x3e, r29	; 62
    1e38:	0f be       	out	0x3f, r0	; 63
    1e3a:	cd bf       	out	0x3d, r28	; 61
    1e3c:	cf 91       	pop	r28
    1e3e:	df 91       	pop	r29
    1e40:	08 95       	ret

00001e42 <DIO_u8AndWithPort>:

u8 DIO_u8AndWithPort(u8 Copy_u8port, u8 Copy_u8Value)
{
    1e42:	df 93       	push	r29
    1e44:	cf 93       	push	r28
    1e46:	00 d0       	rcall	.+0      	; 0x1e48 <DIO_u8AndWithPort+0x6>
    1e48:	00 d0       	rcall	.+0      	; 0x1e4a <DIO_u8AndWithPort+0x8>
    1e4a:	0f 92       	push	r0
    1e4c:	cd b7       	in	r28, 0x3d	; 61
    1e4e:	de b7       	in	r29, 0x3e	; 62
    1e50:	8a 83       	std	Y+2, r24	; 0x02
    1e52:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Result = 0;
    1e54:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8port)
    1e56:	8a 81       	ldd	r24, Y+2	; 0x02
    1e58:	28 2f       	mov	r18, r24
    1e5a:	30 e0       	ldi	r19, 0x00	; 0
    1e5c:	3d 83       	std	Y+5, r19	; 0x05
    1e5e:	2c 83       	std	Y+4, r18	; 0x04
    1e60:	8c 81       	ldd	r24, Y+4	; 0x04
    1e62:	9d 81       	ldd	r25, Y+5	; 0x05
    1e64:	81 30       	cpi	r24, 0x01	; 1
    1e66:	91 05       	cpc	r25, r1
    1e68:	e1 f0       	breq	.+56     	; 0x1ea2 <DIO_u8AndWithPort+0x60>
    1e6a:	2c 81       	ldd	r18, Y+4	; 0x04
    1e6c:	3d 81       	ldd	r19, Y+5	; 0x05
    1e6e:	22 30       	cpi	r18, 0x02	; 2
    1e70:	31 05       	cpc	r19, r1
    1e72:	2c f4       	brge	.+10     	; 0x1e7e <DIO_u8AndWithPort+0x3c>
    1e74:	8c 81       	ldd	r24, Y+4	; 0x04
    1e76:	9d 81       	ldd	r25, Y+5	; 0x05
    1e78:	00 97       	sbiw	r24, 0x00	; 0
    1e7a:	61 f0       	breq	.+24     	; 0x1e94 <DIO_u8AndWithPort+0x52>
    1e7c:	26 c0       	rjmp	.+76     	; 0x1eca <DIO_u8AndWithPort+0x88>
    1e7e:	2c 81       	ldd	r18, Y+4	; 0x04
    1e80:	3d 81       	ldd	r19, Y+5	; 0x05
    1e82:	22 30       	cpi	r18, 0x02	; 2
    1e84:	31 05       	cpc	r19, r1
    1e86:	a1 f0       	breq	.+40     	; 0x1eb0 <DIO_u8AndWithPort+0x6e>
    1e88:	8c 81       	ldd	r24, Y+4	; 0x04
    1e8a:	9d 81       	ldd	r25, Y+5	; 0x05
    1e8c:	83 30       	cpi	r24, 0x03	; 3
    1e8e:	91 05       	cpc	r25, r1
    1e90:	b1 f0       	breq	.+44     	; 0x1ebe <DIO_u8AndWithPort+0x7c>
    1e92:	1b c0       	rjmp	.+54     	; 0x1eca <DIO_u8AndWithPort+0x88>
			{
			case DIO_u8PORTA: Local_u8Result= PORTA & Copy_u8Value; break;
    1e94:	eb e3       	ldi	r30, 0x3B	; 59
    1e96:	f0 e0       	ldi	r31, 0x00	; 0
    1e98:	90 81       	ld	r25, Z
    1e9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e9c:	89 23       	and	r24, r25
    1e9e:	89 83       	std	Y+1, r24	; 0x01
    1ea0:	14 c0       	rjmp	.+40     	; 0x1eca <DIO_u8AndWithPort+0x88>
			case DIO_u8PORTB: Local_u8Result= PORTB & Copy_u8Value; break;
    1ea2:	e8 e3       	ldi	r30, 0x38	; 56
    1ea4:	f0 e0       	ldi	r31, 0x00	; 0
    1ea6:	90 81       	ld	r25, Z
    1ea8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eaa:	89 23       	and	r24, r25
    1eac:	89 83       	std	Y+1, r24	; 0x01
    1eae:	0d c0       	rjmp	.+26     	; 0x1eca <DIO_u8AndWithPort+0x88>
			case DIO_u8PORTC: Local_u8Result= PORTC & Copy_u8Value; break;
    1eb0:	e5 e3       	ldi	r30, 0x35	; 53
    1eb2:	f0 e0       	ldi	r31, 0x00	; 0
    1eb4:	90 81       	ld	r25, Z
    1eb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb8:	89 23       	and	r24, r25
    1eba:	89 83       	std	Y+1, r24	; 0x01
    1ebc:	06 c0       	rjmp	.+12     	; 0x1eca <DIO_u8AndWithPort+0x88>
			case DIO_u8PORTD: Local_u8Result = PORTD & Copy_u8Value; break;
    1ebe:	e2 e3       	ldi	r30, 0x32	; 50
    1ec0:	f0 e0       	ldi	r31, 0x00	; 0
    1ec2:	90 81       	ld	r25, Z
    1ec4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec6:	89 23       	and	r24, r25
    1ec8:	89 83       	std	Y+1, r24	; 0x01
			default:  break;


			}
	return Local_u8Result;
    1eca:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ecc:	0f 90       	pop	r0
    1ece:	0f 90       	pop	r0
    1ed0:	0f 90       	pop	r0
    1ed2:	0f 90       	pop	r0
    1ed4:	0f 90       	pop	r0
    1ed6:	cf 91       	pop	r28
    1ed8:	df 91       	pop	r29
    1eda:	08 95       	ret

00001edc <GIE_VoidEnable>:

#include "GIE_interface.h"
#include "GIE_register.h"

void GIE_VoidEnable(void)
{
    1edc:	df 93       	push	r29
    1ede:	cf 93       	push	r28
    1ee0:	cd b7       	in	r28, 0x3d	; 61
    1ee2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
    1ee4:	af e5       	ldi	r26, 0x5F	; 95
    1ee6:	b0 e0       	ldi	r27, 0x00	; 0
    1ee8:	ef e5       	ldi	r30, 0x5F	; 95
    1eea:	f0 e0       	ldi	r31, 0x00	; 0
    1eec:	80 81       	ld	r24, Z
    1eee:	80 68       	ori	r24, 0x80	; 128
    1ef0:	8c 93       	st	X, r24
}
    1ef2:	cf 91       	pop	r28
    1ef4:	df 91       	pop	r29
    1ef6:	08 95       	ret

00001ef8 <GIE_VoidDisable>:
void GIE_VoidDisable(void)
{
    1ef8:	df 93       	push	r29
    1efa:	cf 93       	push	r28
    1efc:	cd b7       	in	r28, 0x3d	; 61
    1efe:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,SREG_I);
    1f00:	af e5       	ldi	r26, 0x5F	; 95
    1f02:	b0 e0       	ldi	r27, 0x00	; 0
    1f04:	ef e5       	ldi	r30, 0x5F	; 95
    1f06:	f0 e0       	ldi	r31, 0x00	; 0
    1f08:	80 81       	ld	r24, Z
    1f0a:	8f 77       	andi	r24, 0x7F	; 127
    1f0c:	8c 93       	st	X, r24
}
    1f0e:	cf 91       	pop	r28
    1f10:	df 91       	pop	r29
    1f12:	08 95       	ret

00001f14 <KPD_u8GetPressedKey>:
#include "KPD_private.h"



u8 KPD_u8GetPressedKey(void)
{
    1f14:	df 93       	push	r29
    1f16:	cf 93       	push	r28
    1f18:	00 d0       	rcall	.+0      	; 0x1f1a <KPD_u8GetPressedKey+0x6>
    1f1a:	00 d0       	rcall	.+0      	; 0x1f1c <KPD_u8GetPressedKey+0x8>
    1f1c:	0f 92       	push	r0
    1f1e:	cd b7       	in	r28, 0x3d	; 61
    1f20:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8PressedKey = KPD_NO_PRESSED_KEY;
    1f22:	8f ef       	ldi	r24, 0xFF	; 255
    1f24:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8PinState;
	static u8 Local_u8KPDColArr[COLUMN_NUM]= {KPD_COL_0_PIN,KPD_COL_1_PIN,KPD_COL_2_PIN,KPD_COL_3_PIN };
	static u8 Local_u8KPDRowArr[ROW_NUM]= {KPD_ROW_0_PIN,KPD_ROW_1_PIN,KPD_ROW_2_PIN,KPD_ROW_3_PIN };
	static u8 Local_u8KPDArr[ROW_NUM][COLUMN_NUM]=KPD_ARR_VAL;

	for (Local_u8ColCounter=0;Local_u8ColCounter<COLUMN_NUM;Local_u8ColCounter++)
    1f26:	19 82       	std	Y+1, r1	; 0x01
    1f28:	5e c0       	rjmp	.+188    	; 0x1fe6 <KPD_u8GetPressedKey+0xd2>
	{
		/* Activate current Cloumn*/
		DIO_u8SetPinValue(KPD_COL_PORT,Local_u8KPDColArr[Local_u8ColCounter],DIO_u8PIN_LOW);
    1f2a:	89 81       	ldd	r24, Y+1	; 0x01
    1f2c:	88 2f       	mov	r24, r24
    1f2e:	90 e0       	ldi	r25, 0x00	; 0
    1f30:	fc 01       	movw	r30, r24
    1f32:	e4 58       	subi	r30, 0x84	; 132
    1f34:	fe 4f       	sbci	r31, 0xFE	; 254
    1f36:	90 81       	ld	r25, Z
    1f38:	83 e0       	ldi	r24, 0x03	; 3
    1f3a:	69 2f       	mov	r22, r25
    1f3c:	40 e0       	ldi	r20, 0x00	; 0
    1f3e:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <DIO_u8SetPinValue>

		for(Local_u8RowCounter=0;Local_u8RowCounter<ROW_NUM;Local_u8RowCounter++)
    1f42:	1a 82       	std	Y+2, r1	; 0x02
    1f44:	3d c0       	rjmp	.+122    	; 0x1fc0 <KPD_u8GetPressedKey+0xac>
		{
			/* Read the current row */
			DIO_u8GetPinValue(KPD_ROW_PORT,Local_u8KPDRowArr[Local_u8RowCounter],&Local_u8PinState);
    1f46:	8a 81       	ldd	r24, Y+2	; 0x02
    1f48:	88 2f       	mov	r24, r24
    1f4a:	90 e0       	ldi	r25, 0x00	; 0
    1f4c:	fc 01       	movw	r30, r24
    1f4e:	e8 58       	subi	r30, 0x88	; 136
    1f50:	fe 4f       	sbci	r31, 0xFE	; 254
    1f52:	90 81       	ld	r25, Z
    1f54:	9e 01       	movw	r18, r28
    1f56:	2c 5f       	subi	r18, 0xFC	; 252
    1f58:	3f 4f       	sbci	r19, 0xFF	; 255
    1f5a:	81 e0       	ldi	r24, 0x01	; 1
    1f5c:	69 2f       	mov	r22, r25
    1f5e:	a9 01       	movw	r20, r18
    1f60:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <DIO_u8GetPinValue>
			/* Check if switch is pressed */

			if(DIO_u8PIN_LOW == Local_u8PinState )
    1f64:	8c 81       	ldd	r24, Y+4	; 0x04
    1f66:	88 23       	and	r24, r24
    1f68:	41 f5       	brne	.+80     	; 0x1fba <KPD_u8GetPressedKey+0xa6>
			{

				Local_u8PressedKey = Local_u8KPDArr[Local_u8RowCounter][Local_u8ColCounter];
    1f6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f6c:	48 2f       	mov	r20, r24
    1f6e:	50 e0       	ldi	r21, 0x00	; 0
    1f70:	89 81       	ldd	r24, Y+1	; 0x01
    1f72:	28 2f       	mov	r18, r24
    1f74:	30 e0       	ldi	r19, 0x00	; 0
    1f76:	ca 01       	movw	r24, r20
    1f78:	88 0f       	add	r24, r24
    1f7a:	99 1f       	adc	r25, r25
    1f7c:	88 0f       	add	r24, r24
    1f7e:	99 1f       	adc	r25, r25
    1f80:	82 0f       	add	r24, r18
    1f82:	93 1f       	adc	r25, r19
    1f84:	fc 01       	movw	r30, r24
    1f86:	e8 59       	subi	r30, 0x98	; 152
    1f88:	fe 4f       	sbci	r31, 0xFE	; 254
    1f8a:	80 81       	ld	r24, Z
    1f8c:	8b 83       	std	Y+3, r24	; 0x03
    1f8e:	0f c0       	rjmp	.+30     	; 0x1fae <KPD_u8GetPressedKey+0x9a>
				/* Polling (busy waiting ) until the key is released */
				while (DIO_u8PIN_LOW == Local_u8PinState)
				{
					DIO_u8GetPinValue(KPD_ROW_PORT,Local_u8KPDRowArr[Local_u8RowCounter],&Local_u8PinState);
    1f90:	8a 81       	ldd	r24, Y+2	; 0x02
    1f92:	88 2f       	mov	r24, r24
    1f94:	90 e0       	ldi	r25, 0x00	; 0
    1f96:	fc 01       	movw	r30, r24
    1f98:	e8 58       	subi	r30, 0x88	; 136
    1f9a:	fe 4f       	sbci	r31, 0xFE	; 254
    1f9c:	90 81       	ld	r25, Z
    1f9e:	9e 01       	movw	r18, r28
    1fa0:	2c 5f       	subi	r18, 0xFC	; 252
    1fa2:	3f 4f       	sbci	r19, 0xFF	; 255
    1fa4:	81 e0       	ldi	r24, 0x01	; 1
    1fa6:	69 2f       	mov	r22, r25
    1fa8:	a9 01       	movw	r20, r18
    1faa:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <DIO_u8GetPinValue>
			if(DIO_u8PIN_LOW == Local_u8PinState )
			{

				Local_u8PressedKey = Local_u8KPDArr[Local_u8RowCounter][Local_u8ColCounter];
				/* Polling (busy waiting ) until the key is released */
				while (DIO_u8PIN_LOW == Local_u8PinState)
    1fae:	8c 81       	ldd	r24, Y+4	; 0x04
    1fb0:	88 23       	and	r24, r24
    1fb2:	71 f3       	breq	.-36     	; 0x1f90 <KPD_u8GetPressedKey+0x7c>
				{
					DIO_u8GetPinValue(KPD_ROW_PORT,Local_u8KPDRowArr[Local_u8RowCounter],&Local_u8PinState);

				}
				return Local_u8PressedKey;
    1fb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb6:	8d 83       	std	Y+5, r24	; 0x05
    1fb8:	1c c0       	rjmp	.+56     	; 0x1ff2 <KPD_u8GetPressedKey+0xde>
	for (Local_u8ColCounter=0;Local_u8ColCounter<COLUMN_NUM;Local_u8ColCounter++)
	{
		/* Activate current Cloumn*/
		DIO_u8SetPinValue(KPD_COL_PORT,Local_u8KPDColArr[Local_u8ColCounter],DIO_u8PIN_LOW);

		for(Local_u8RowCounter=0;Local_u8RowCounter<ROW_NUM;Local_u8RowCounter++)
    1fba:	8a 81       	ldd	r24, Y+2	; 0x02
    1fbc:	8f 5f       	subi	r24, 0xFF	; 255
    1fbe:	8a 83       	std	Y+2, r24	; 0x02
    1fc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc2:	84 30       	cpi	r24, 0x04	; 4
    1fc4:	08 f4       	brcc	.+2      	; 0x1fc8 <KPD_u8GetPressedKey+0xb4>
    1fc6:	bf cf       	rjmp	.-130    	; 0x1f46 <KPD_u8GetPressedKey+0x32>

		}

		/* Deactivate the current column */

		DIO_u8SetPinValue(KPD_COL_PORT,Local_u8KPDColArr[Local_u8ColCounter],DIO_u8PIN_HIGH);
    1fc8:	89 81       	ldd	r24, Y+1	; 0x01
    1fca:	88 2f       	mov	r24, r24
    1fcc:	90 e0       	ldi	r25, 0x00	; 0
    1fce:	fc 01       	movw	r30, r24
    1fd0:	e4 58       	subi	r30, 0x84	; 132
    1fd2:	fe 4f       	sbci	r31, 0xFE	; 254
    1fd4:	90 81       	ld	r25, Z
    1fd6:	83 e0       	ldi	r24, 0x03	; 3
    1fd8:	69 2f       	mov	r22, r25
    1fda:	41 e0       	ldi	r20, 0x01	; 1
    1fdc:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <DIO_u8SetPinValue>
	u8 Local_u8PinState;
	static u8 Local_u8KPDColArr[COLUMN_NUM]= {KPD_COL_0_PIN,KPD_COL_1_PIN,KPD_COL_2_PIN,KPD_COL_3_PIN };
	static u8 Local_u8KPDRowArr[ROW_NUM]= {KPD_ROW_0_PIN,KPD_ROW_1_PIN,KPD_ROW_2_PIN,KPD_ROW_3_PIN };
	static u8 Local_u8KPDArr[ROW_NUM][COLUMN_NUM]=KPD_ARR_VAL;

	for (Local_u8ColCounter=0;Local_u8ColCounter<COLUMN_NUM;Local_u8ColCounter++)
    1fe0:	89 81       	ldd	r24, Y+1	; 0x01
    1fe2:	8f 5f       	subi	r24, 0xFF	; 255
    1fe4:	89 83       	std	Y+1, r24	; 0x01
    1fe6:	89 81       	ldd	r24, Y+1	; 0x01
    1fe8:	84 30       	cpi	r24, 0x04	; 4
    1fea:	08 f4       	brcc	.+2      	; 0x1fee <KPD_u8GetPressedKey+0xda>
    1fec:	9e cf       	rjmp	.-196    	; 0x1f2a <KPD_u8GetPressedKey+0x16>

		DIO_u8SetPinValue(KPD_COL_PORT,Local_u8KPDColArr[Local_u8ColCounter],DIO_u8PIN_HIGH);

	}

	return Local_u8PressedKey;
    1fee:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff0:	8d 83       	std	Y+5, r24	; 0x05
    1ff2:	8d 81       	ldd	r24, Y+5	; 0x05





}
    1ff4:	0f 90       	pop	r0
    1ff6:	0f 90       	pop	r0
    1ff8:	0f 90       	pop	r0
    1ffa:	0f 90       	pop	r0
    1ffc:	0f 90       	pop	r0
    1ffe:	cf 91       	pop	r28
    2000:	df 91       	pop	r29
    2002:	08 95       	ret

00002004 <PORT_VoidInit>:
#include "PORT_interface.h"
#include "PORT_register.h"


void PORT_VoidInit(void)
{
    2004:	df 93       	push	r29
    2006:	cf 93       	push	r28
    2008:	cd b7       	in	r28, 0x3d	; 61
    200a:	de b7       	in	r29, 0x3e	; 62
	DDRA = PORTA_DIR;
    200c:	ea e3       	ldi	r30, 0x3A	; 58
    200e:	f0 e0       	ldi	r31, 0x00	; 0
    2010:	8f ef       	ldi	r24, 0xFF	; 255
    2012:	80 83       	st	Z, r24
	DDRB = PORTB_DIR;
    2014:	e7 e3       	ldi	r30, 0x37	; 55
    2016:	f0 e0       	ldi	r31, 0x00	; 0
    2018:	88 e0       	ldi	r24, 0x08	; 8
    201a:	80 83       	st	Z, r24
	DDRC = PORTC_DIR;
    201c:	e4 e3       	ldi	r30, 0x34	; 52
    201e:	f0 e0       	ldi	r31, 0x00	; 0
    2020:	87 ec       	ldi	r24, 0xC7	; 199
    2022:	80 83       	st	Z, r24
	DDRD = PORTD_DIR;
    2024:	e1 e3       	ldi	r30, 0x31	; 49
    2026:	f0 e0       	ldi	r31, 0x00	; 0
    2028:	8c e3       	ldi	r24, 0x3C	; 60
    202a:	80 83       	st	Z, r24
	
	PORTA = PORTA_INITIAL_VALUE;
    202c:	eb e3       	ldi	r30, 0x3B	; 59
    202e:	f0 e0       	ldi	r31, 0x00	; 0
    2030:	10 82       	st	Z, r1
	PORTB = PORTB_INITIAL_VALUE;
    2032:	e8 e3       	ldi	r30, 0x38	; 56
    2034:	f0 e0       	ldi	r31, 0x00	; 0
    2036:	80 ef       	ldi	r24, 0xF0	; 240
    2038:	80 83       	st	Z, r24
	PORTC = PORTC_INITIAL_VALUE;
    203a:	e5 e3       	ldi	r30, 0x35	; 53
    203c:	f0 e0       	ldi	r31, 0x00	; 0
    203e:	87 e0       	ldi	r24, 0x07	; 7
    2040:	80 83       	st	Z, r24
	PORTD = PORTD_INITIAL_VALUE;
    2042:	e2 e3       	ldi	r30, 0x32	; 50
    2044:	f0 e0       	ldi	r31, 0x00	; 0
    2046:	10 82       	st	Z, r1


}
    2048:	cf 91       	pop	r28
    204a:	df 91       	pop	r29
    204c:	08 95       	ret

0000204e <SSD_u8SingleNumDisplayBlink>:


u8 seven_seg[10]={ZERO,ONE,TWO,THREE,FOUR,FIVE,SIX,SEVEN,EIGHT,NINE};

u8 SSD_u8SingleNumDisplayBlink(u8 number)
{
    204e:	df 93       	push	r29
    2050:	cf 93       	push	r28
    2052:	00 d0       	rcall	.+0      	; 0x2054 <SSD_u8SingleNumDisplayBlink+0x6>
    2054:	00 d0       	rcall	.+0      	; 0x2056 <SSD_u8SingleNumDisplayBlink+0x8>
    2056:	cd b7       	in	r28, 0x3d	; 61
    2058:	de b7       	in	r29, 0x3e	; 62
    205a:	8c 83       	std	Y+4, r24	; 0x04
	u8 Local_u8ErrorState = 0;
    205c:	1b 82       	std	Y+3, r1	; 0x03
	u8 Local_u8Counter;
	u8 Local_u8PortMask;

	for(Local_u8Counter=0;Local_u8Counter<100;Local_u8Counter++)
    205e:	1a 82       	std	Y+2, r1	; 0x02
    2060:	28 c0       	rjmp	.+80     	; 0x20b2 <SSD_u8SingleNumDisplayBlink+0x64>
	{
		DIO_u8SetPinValue(SSD_EN_PORT,SSD_1_EN_PIN,DIO_u8PIN_HIGH);
    2062:	82 e0       	ldi	r24, 0x02	; 2
    2064:	66 e0       	ldi	r22, 0x06	; 6
    2066:	41 e0       	ldi	r20, 0x01	; 1
    2068:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <DIO_u8SetPinValue>
		Local_u8PortMask = DIO_u8AndWithPort(SSD_DATA_PORT,SSD_DATA_MASK);
    206c:	80 e0       	ldi	r24, 0x00	; 0
    206e:	61 e0       	ldi	r22, 0x01	; 1
    2070:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <DIO_u8AndWithPort>
    2074:	89 83       	std	Y+1, r24	; 0x01

		seven_seg[number]|=Local_u8PortMask;
    2076:	8c 81       	ldd	r24, Y+4	; 0x04
    2078:	28 2f       	mov	r18, r24
    207a:	30 e0       	ldi	r19, 0x00	; 0
    207c:	8c 81       	ldd	r24, Y+4	; 0x04
    207e:	88 2f       	mov	r24, r24
    2080:	90 e0       	ldi	r25, 0x00	; 0
    2082:	fc 01       	movw	r30, r24
    2084:	e0 58       	subi	r30, 0x80	; 128
    2086:	fe 4f       	sbci	r31, 0xFE	; 254
    2088:	90 81       	ld	r25, Z
    208a:	89 81       	ldd	r24, Y+1	; 0x01
    208c:	89 2b       	or	r24, r25
    208e:	f9 01       	movw	r30, r18
    2090:	e0 58       	subi	r30, 0x80	; 128
    2092:	fe 4f       	sbci	r31, 0xFE	; 254
    2094:	80 83       	st	Z, r24
		DIO_u8SetPortValue(SSD_DATA_PORT,seven_seg[number]);
    2096:	8c 81       	ldd	r24, Y+4	; 0x04
    2098:	88 2f       	mov	r24, r24
    209a:	90 e0       	ldi	r25, 0x00	; 0
    209c:	fc 01       	movw	r30, r24
    209e:	e0 58       	subi	r30, 0x80	; 128
    20a0:	fe 4f       	sbci	r31, 0xFE	; 254
    20a2:	90 81       	ld	r25, Z
    20a4:	80 e0       	ldi	r24, 0x00	; 0
    20a6:	69 2f       	mov	r22, r25
    20a8:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <DIO_u8SetPortValue>
{
	u8 Local_u8ErrorState = 0;
	u8 Local_u8Counter;
	u8 Local_u8PortMask;

	for(Local_u8Counter=0;Local_u8Counter<100;Local_u8Counter++)
    20ac:	8a 81       	ldd	r24, Y+2	; 0x02
    20ae:	8f 5f       	subi	r24, 0xFF	; 255
    20b0:	8a 83       	std	Y+2, r24	; 0x02
    20b2:	8a 81       	ldd	r24, Y+2	; 0x02
    20b4:	84 36       	cpi	r24, 0x64	; 100
    20b6:	a8 f2       	brcs	.-86     	; 0x2062 <SSD_u8SingleNumDisplayBlink+0x14>
		seven_seg[number]|=Local_u8PortMask;
		DIO_u8SetPortValue(SSD_DATA_PORT,seven_seg[number]);
		//		_delay_ms(5);
		//		DIO_u8SetPinValue(SSD_EN_PORT,SSD_1_EN_PIN,DIO_u8PIN_LOW);
	}
	return Local_u8ErrorState;
    20b8:	8b 81       	ldd	r24, Y+3	; 0x03
}
    20ba:	0f 90       	pop	r0
    20bc:	0f 90       	pop	r0
    20be:	0f 90       	pop	r0
    20c0:	0f 90       	pop	r0
    20c2:	cf 91       	pop	r28
    20c4:	df 91       	pop	r29
    20c6:	08 95       	ret

000020c8 <SSD_u8DisplayBlink>:

u8 SSD_u8DisplayBlink(u8 number)
{
    20c8:	df 93       	push	r29
    20ca:	cf 93       	push	r28
    20cc:	cd b7       	in	r28, 0x3d	; 61
    20ce:	de b7       	in	r29, 0x3e	; 62
    20d0:	a2 97       	sbiw	r28, 0x22	; 34
    20d2:	0f b6       	in	r0, 0x3f	; 63
    20d4:	f8 94       	cli
    20d6:	de bf       	out	0x3e, r29	; 62
    20d8:	0f be       	out	0x3f, r0	; 63
    20da:	cd bf       	out	0x3d, r28	; 61
    20dc:	8a a3       	std	Y+34, r24	; 0x22
	u8 Local_u8ErrorState = 0;
    20de:	19 a2       	std	Y+33, r1	; 0x21
	u8 Local_u8PortMask;

	u8 Local_u8Counter;
	u8 ones = number%10;
    20e0:	8a a1       	ldd	r24, Y+34	; 0x22
    20e2:	9a e0       	ldi	r25, 0x0A	; 10
    20e4:	69 2f       	mov	r22, r25
    20e6:	0e 94 68 16 	call	0x2cd0	; 0x2cd0 <__udivmodqi4>
    20ea:	89 2f       	mov	r24, r25
    20ec:	8e 8f       	std	Y+30, r24	; 0x1e
	u8 tens = number/10;
    20ee:	8a a1       	ldd	r24, Y+34	; 0x22
    20f0:	9a e0       	ldi	r25, 0x0A	; 10
    20f2:	69 2f       	mov	r22, r25
    20f4:	0e 94 68 16 	call	0x2cd0	; 0x2cd0 <__udivmodqi4>
    20f8:	8d 8f       	std	Y+29, r24	; 0x1d

	Local_u8PortMask = DIO_u8AndWithPort(SSD_DATA_PORT,SSD_DATA_MASK);
    20fa:	80 e0       	ldi	r24, 0x00	; 0
    20fc:	61 e0       	ldi	r22, 0x01	; 1
    20fe:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <DIO_u8AndWithPort>
    2102:	88 a3       	std	Y+32, r24	; 0x20
	seven_seg[ones]|=Local_u8PortMask;
    2104:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2106:	28 2f       	mov	r18, r24
    2108:	30 e0       	ldi	r19, 0x00	; 0
    210a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    210c:	88 2f       	mov	r24, r24
    210e:	90 e0       	ldi	r25, 0x00	; 0
    2110:	fc 01       	movw	r30, r24
    2112:	e0 58       	subi	r30, 0x80	; 128
    2114:	fe 4f       	sbci	r31, 0xFE	; 254
    2116:	90 81       	ld	r25, Z
    2118:	88 a1       	ldd	r24, Y+32	; 0x20
    211a:	89 2b       	or	r24, r25
    211c:	f9 01       	movw	r30, r18
    211e:	e0 58       	subi	r30, 0x80	; 128
    2120:	fe 4f       	sbci	r31, 0xFE	; 254
    2122:	80 83       	st	Z, r24

	Local_u8PortMask = DIO_u8AndWithPort(SSD_DATA_PORT,SSD_DATA_MASK);
    2124:	80 e0       	ldi	r24, 0x00	; 0
    2126:	61 e0       	ldi	r22, 0x01	; 1
    2128:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <DIO_u8AndWithPort>
    212c:	88 a3       	std	Y+32, r24	; 0x20
	seven_seg[tens]|=Local_u8PortMask;
    212e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2130:	28 2f       	mov	r18, r24
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2136:	88 2f       	mov	r24, r24
    2138:	90 e0       	ldi	r25, 0x00	; 0
    213a:	fc 01       	movw	r30, r24
    213c:	e0 58       	subi	r30, 0x80	; 128
    213e:	fe 4f       	sbci	r31, 0xFE	; 254
    2140:	90 81       	ld	r25, Z
    2142:	88 a1       	ldd	r24, Y+32	; 0x20
    2144:	89 2b       	or	r24, r25
    2146:	f9 01       	movw	r30, r18
    2148:	e0 58       	subi	r30, 0x80	; 128
    214a:	fe 4f       	sbci	r31, 0xFE	; 254
    214c:	80 83       	st	Z, r24

	for(Local_u8Counter=0;Local_u8Counter<100;Local_u8Counter++)
    214e:	1f 8e       	std	Y+31, r1	; 0x1f
    2150:	1b c1       	rjmp	.+566    	; 0x2388 <SSD_u8DisplayBlink+0x2c0>
	{
		DIO_u8SetPinValue(SSD_EN_PORT,SSD_1_EN_PIN,DIO_u8PIN_HIGH);
    2152:	82 e0       	ldi	r24, 0x02	; 2
    2154:	66 e0       	ldi	r22, 0x06	; 6
    2156:	41 e0       	ldi	r20, 0x01	; 1
    2158:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(SSD_EN_PORT,SSD_2_EN_PIN,DIO_u8PIN_LOW);
    215c:	82 e0       	ldi	r24, 0x02	; 2
    215e:	67 e0       	ldi	r22, 0x07	; 7
    2160:	40 e0       	ldi	r20, 0x00	; 0
    2162:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <DIO_u8SetPinValue>
		DIO_u8SetPortValue(SSD_DATA_PORT,seven_seg[ones]);
    2166:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2168:	88 2f       	mov	r24, r24
    216a:	90 e0       	ldi	r25, 0x00	; 0
    216c:	fc 01       	movw	r30, r24
    216e:	e0 58       	subi	r30, 0x80	; 128
    2170:	fe 4f       	sbci	r31, 0xFE	; 254
    2172:	90 81       	ld	r25, Z
    2174:	80 e0       	ldi	r24, 0x00	; 0
    2176:	69 2f       	mov	r22, r25
    2178:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <DIO_u8SetPortValue>
    217c:	80 e0       	ldi	r24, 0x00	; 0
    217e:	90 e0       	ldi	r25, 0x00	; 0
    2180:	a0 ea       	ldi	r26, 0xA0	; 160
    2182:	b1 e4       	ldi	r27, 0x41	; 65
    2184:	89 8f       	std	Y+25, r24	; 0x19
    2186:	9a 8f       	std	Y+26, r25	; 0x1a
    2188:	ab 8f       	std	Y+27, r26	; 0x1b
    218a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    218c:	69 8d       	ldd	r22, Y+25	; 0x19
    218e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2190:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2192:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2194:	20 e0       	ldi	r18, 0x00	; 0
    2196:	30 e0       	ldi	r19, 0x00	; 0
    2198:	4a ef       	ldi	r20, 0xFA	; 250
    219a:	54 e4       	ldi	r21, 0x44	; 68
    219c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21a0:	dc 01       	movw	r26, r24
    21a2:	cb 01       	movw	r24, r22
    21a4:	8d 8b       	std	Y+21, r24	; 0x15
    21a6:	9e 8b       	std	Y+22, r25	; 0x16
    21a8:	af 8b       	std	Y+23, r26	; 0x17
    21aa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    21ac:	6d 89       	ldd	r22, Y+21	; 0x15
    21ae:	7e 89       	ldd	r23, Y+22	; 0x16
    21b0:	8f 89       	ldd	r24, Y+23	; 0x17
    21b2:	98 8d       	ldd	r25, Y+24	; 0x18
    21b4:	20 e0       	ldi	r18, 0x00	; 0
    21b6:	30 e0       	ldi	r19, 0x00	; 0
    21b8:	40 e8       	ldi	r20, 0x80	; 128
    21ba:	5f e3       	ldi	r21, 0x3F	; 63
    21bc:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    21c0:	88 23       	and	r24, r24
    21c2:	2c f4       	brge	.+10     	; 0x21ce <SSD_u8DisplayBlink+0x106>
		__ticks = 1;
    21c4:	81 e0       	ldi	r24, 0x01	; 1
    21c6:	90 e0       	ldi	r25, 0x00	; 0
    21c8:	9c 8b       	std	Y+20, r25	; 0x14
    21ca:	8b 8b       	std	Y+19, r24	; 0x13
    21cc:	3f c0       	rjmp	.+126    	; 0x224c <SSD_u8DisplayBlink+0x184>
	else if (__tmp > 65535)
    21ce:	6d 89       	ldd	r22, Y+21	; 0x15
    21d0:	7e 89       	ldd	r23, Y+22	; 0x16
    21d2:	8f 89       	ldd	r24, Y+23	; 0x17
    21d4:	98 8d       	ldd	r25, Y+24	; 0x18
    21d6:	20 e0       	ldi	r18, 0x00	; 0
    21d8:	3f ef       	ldi	r19, 0xFF	; 255
    21da:	4f e7       	ldi	r20, 0x7F	; 127
    21dc:	57 e4       	ldi	r21, 0x47	; 71
    21de:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    21e2:	18 16       	cp	r1, r24
    21e4:	4c f5       	brge	.+82     	; 0x2238 <SSD_u8DisplayBlink+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21e6:	69 8d       	ldd	r22, Y+25	; 0x19
    21e8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21ea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21ec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21ee:	20 e0       	ldi	r18, 0x00	; 0
    21f0:	30 e0       	ldi	r19, 0x00	; 0
    21f2:	40 e2       	ldi	r20, 0x20	; 32
    21f4:	51 e4       	ldi	r21, 0x41	; 65
    21f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21fa:	dc 01       	movw	r26, r24
    21fc:	cb 01       	movw	r24, r22
    21fe:	bc 01       	movw	r22, r24
    2200:	cd 01       	movw	r24, r26
    2202:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2206:	dc 01       	movw	r26, r24
    2208:	cb 01       	movw	r24, r22
    220a:	9c 8b       	std	Y+20, r25	; 0x14
    220c:	8b 8b       	std	Y+19, r24	; 0x13
    220e:	0f c0       	rjmp	.+30     	; 0x222e <SSD_u8DisplayBlink+0x166>
    2210:	88 ec       	ldi	r24, 0xC8	; 200
    2212:	90 e0       	ldi	r25, 0x00	; 0
    2214:	9a 8b       	std	Y+18, r25	; 0x12
    2216:	89 8b       	std	Y+17, r24	; 0x11
    2218:	89 89       	ldd	r24, Y+17	; 0x11
    221a:	9a 89       	ldd	r25, Y+18	; 0x12
    221c:	01 97       	sbiw	r24, 0x01	; 1
    221e:	f1 f7       	brne	.-4      	; 0x221c <SSD_u8DisplayBlink+0x154>
    2220:	9a 8b       	std	Y+18, r25	; 0x12
    2222:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2224:	8b 89       	ldd	r24, Y+19	; 0x13
    2226:	9c 89       	ldd	r25, Y+20	; 0x14
    2228:	01 97       	sbiw	r24, 0x01	; 1
    222a:	9c 8b       	std	Y+20, r25	; 0x14
    222c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    222e:	8b 89       	ldd	r24, Y+19	; 0x13
    2230:	9c 89       	ldd	r25, Y+20	; 0x14
    2232:	00 97       	sbiw	r24, 0x00	; 0
    2234:	69 f7       	brne	.-38     	; 0x2210 <SSD_u8DisplayBlink+0x148>
    2236:	14 c0       	rjmp	.+40     	; 0x2260 <SSD_u8DisplayBlink+0x198>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2238:	6d 89       	ldd	r22, Y+21	; 0x15
    223a:	7e 89       	ldd	r23, Y+22	; 0x16
    223c:	8f 89       	ldd	r24, Y+23	; 0x17
    223e:	98 8d       	ldd	r25, Y+24	; 0x18
    2240:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2244:	dc 01       	movw	r26, r24
    2246:	cb 01       	movw	r24, r22
    2248:	9c 8b       	std	Y+20, r25	; 0x14
    224a:	8b 8b       	std	Y+19, r24	; 0x13
    224c:	8b 89       	ldd	r24, Y+19	; 0x13
    224e:	9c 89       	ldd	r25, Y+20	; 0x14
    2250:	98 8b       	std	Y+16, r25	; 0x10
    2252:	8f 87       	std	Y+15, r24	; 0x0f
    2254:	8f 85       	ldd	r24, Y+15	; 0x0f
    2256:	98 89       	ldd	r25, Y+16	; 0x10
    2258:	01 97       	sbiw	r24, 0x01	; 1
    225a:	f1 f7       	brne	.-4      	; 0x2258 <SSD_u8DisplayBlink+0x190>
    225c:	98 8b       	std	Y+16, r25	; 0x10
    225e:	8f 87       	std	Y+15, r24	; 0x0f

		_delay_ms(20);
		DIO_u8SetPinValue(SSD_EN_PORT,SSD_1_EN_PIN,DIO_u8PIN_LOW);
    2260:	82 e0       	ldi	r24, 0x02	; 2
    2262:	66 e0       	ldi	r22, 0x06	; 6
    2264:	40 e0       	ldi	r20, 0x00	; 0
    2266:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(SSD_EN_PORT,SSD_2_EN_PIN,DIO_u8PIN_HIGH);
    226a:	82 e0       	ldi	r24, 0x02	; 2
    226c:	67 e0       	ldi	r22, 0x07	; 7
    226e:	41 e0       	ldi	r20, 0x01	; 1
    2270:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <DIO_u8SetPinValue>
		DIO_u8SetPortValue(SSD_DATA_PORT,seven_seg[tens]);
    2274:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2276:	88 2f       	mov	r24, r24
    2278:	90 e0       	ldi	r25, 0x00	; 0
    227a:	fc 01       	movw	r30, r24
    227c:	e0 58       	subi	r30, 0x80	; 128
    227e:	fe 4f       	sbci	r31, 0xFE	; 254
    2280:	90 81       	ld	r25, Z
    2282:	80 e0       	ldi	r24, 0x00	; 0
    2284:	69 2f       	mov	r22, r25
    2286:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <DIO_u8SetPortValue>
    228a:	80 e0       	ldi	r24, 0x00	; 0
    228c:	90 e0       	ldi	r25, 0x00	; 0
    228e:	a0 ea       	ldi	r26, 0xA0	; 160
    2290:	b1 e4       	ldi	r27, 0x41	; 65
    2292:	8b 87       	std	Y+11, r24	; 0x0b
    2294:	9c 87       	std	Y+12, r25	; 0x0c
    2296:	ad 87       	std	Y+13, r26	; 0x0d
    2298:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    229a:	6b 85       	ldd	r22, Y+11	; 0x0b
    229c:	7c 85       	ldd	r23, Y+12	; 0x0c
    229e:	8d 85       	ldd	r24, Y+13	; 0x0d
    22a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    22a2:	20 e0       	ldi	r18, 0x00	; 0
    22a4:	30 e0       	ldi	r19, 0x00	; 0
    22a6:	4a ef       	ldi	r20, 0xFA	; 250
    22a8:	54 e4       	ldi	r21, 0x44	; 68
    22aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ae:	dc 01       	movw	r26, r24
    22b0:	cb 01       	movw	r24, r22
    22b2:	8f 83       	std	Y+7, r24	; 0x07
    22b4:	98 87       	std	Y+8, r25	; 0x08
    22b6:	a9 87       	std	Y+9, r26	; 0x09
    22b8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22ba:	6f 81       	ldd	r22, Y+7	; 0x07
    22bc:	78 85       	ldd	r23, Y+8	; 0x08
    22be:	89 85       	ldd	r24, Y+9	; 0x09
    22c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    22c2:	20 e0       	ldi	r18, 0x00	; 0
    22c4:	30 e0       	ldi	r19, 0x00	; 0
    22c6:	40 e8       	ldi	r20, 0x80	; 128
    22c8:	5f e3       	ldi	r21, 0x3F	; 63
    22ca:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    22ce:	88 23       	and	r24, r24
    22d0:	2c f4       	brge	.+10     	; 0x22dc <SSD_u8DisplayBlink+0x214>
		__ticks = 1;
    22d2:	81 e0       	ldi	r24, 0x01	; 1
    22d4:	90 e0       	ldi	r25, 0x00	; 0
    22d6:	9e 83       	std	Y+6, r25	; 0x06
    22d8:	8d 83       	std	Y+5, r24	; 0x05
    22da:	3f c0       	rjmp	.+126    	; 0x235a <SSD_u8DisplayBlink+0x292>
	else if (__tmp > 65535)
    22dc:	6f 81       	ldd	r22, Y+7	; 0x07
    22de:	78 85       	ldd	r23, Y+8	; 0x08
    22e0:	89 85       	ldd	r24, Y+9	; 0x09
    22e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    22e4:	20 e0       	ldi	r18, 0x00	; 0
    22e6:	3f ef       	ldi	r19, 0xFF	; 255
    22e8:	4f e7       	ldi	r20, 0x7F	; 127
    22ea:	57 e4       	ldi	r21, 0x47	; 71
    22ec:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    22f0:	18 16       	cp	r1, r24
    22f2:	4c f5       	brge	.+82     	; 0x2346 <SSD_u8DisplayBlink+0x27e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    22f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    22f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    22fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    22fc:	20 e0       	ldi	r18, 0x00	; 0
    22fe:	30 e0       	ldi	r19, 0x00	; 0
    2300:	40 e2       	ldi	r20, 0x20	; 32
    2302:	51 e4       	ldi	r21, 0x41	; 65
    2304:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2308:	dc 01       	movw	r26, r24
    230a:	cb 01       	movw	r24, r22
    230c:	bc 01       	movw	r22, r24
    230e:	cd 01       	movw	r24, r26
    2310:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2314:	dc 01       	movw	r26, r24
    2316:	cb 01       	movw	r24, r22
    2318:	9e 83       	std	Y+6, r25	; 0x06
    231a:	8d 83       	std	Y+5, r24	; 0x05
    231c:	0f c0       	rjmp	.+30     	; 0x233c <SSD_u8DisplayBlink+0x274>
    231e:	88 ec       	ldi	r24, 0xC8	; 200
    2320:	90 e0       	ldi	r25, 0x00	; 0
    2322:	9c 83       	std	Y+4, r25	; 0x04
    2324:	8b 83       	std	Y+3, r24	; 0x03
    2326:	8b 81       	ldd	r24, Y+3	; 0x03
    2328:	9c 81       	ldd	r25, Y+4	; 0x04
    232a:	01 97       	sbiw	r24, 0x01	; 1
    232c:	f1 f7       	brne	.-4      	; 0x232a <SSD_u8DisplayBlink+0x262>
    232e:	9c 83       	std	Y+4, r25	; 0x04
    2330:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2332:	8d 81       	ldd	r24, Y+5	; 0x05
    2334:	9e 81       	ldd	r25, Y+6	; 0x06
    2336:	01 97       	sbiw	r24, 0x01	; 1
    2338:	9e 83       	std	Y+6, r25	; 0x06
    233a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    233c:	8d 81       	ldd	r24, Y+5	; 0x05
    233e:	9e 81       	ldd	r25, Y+6	; 0x06
    2340:	00 97       	sbiw	r24, 0x00	; 0
    2342:	69 f7       	brne	.-38     	; 0x231e <SSD_u8DisplayBlink+0x256>
    2344:	14 c0       	rjmp	.+40     	; 0x236e <SSD_u8DisplayBlink+0x2a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2346:	6f 81       	ldd	r22, Y+7	; 0x07
    2348:	78 85       	ldd	r23, Y+8	; 0x08
    234a:	89 85       	ldd	r24, Y+9	; 0x09
    234c:	9a 85       	ldd	r25, Y+10	; 0x0a
    234e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2352:	dc 01       	movw	r26, r24
    2354:	cb 01       	movw	r24, r22
    2356:	9e 83       	std	Y+6, r25	; 0x06
    2358:	8d 83       	std	Y+5, r24	; 0x05
    235a:	8d 81       	ldd	r24, Y+5	; 0x05
    235c:	9e 81       	ldd	r25, Y+6	; 0x06
    235e:	9a 83       	std	Y+2, r25	; 0x02
    2360:	89 83       	std	Y+1, r24	; 0x01
    2362:	89 81       	ldd	r24, Y+1	; 0x01
    2364:	9a 81       	ldd	r25, Y+2	; 0x02
    2366:	01 97       	sbiw	r24, 0x01	; 1
    2368:	f1 f7       	brne	.-4      	; 0x2366 <SSD_u8DisplayBlink+0x29e>
    236a:	9a 83       	std	Y+2, r25	; 0x02
    236c:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(20);
		DIO_u8SetPinValue(SSD_EN_PORT,SSD_1_EN_PIN,DIO_u8PIN_LOW);
    236e:	82 e0       	ldi	r24, 0x02	; 2
    2370:	66 e0       	ldi	r22, 0x06	; 6
    2372:	40 e0       	ldi	r20, 0x00	; 0
    2374:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(SSD_EN_PORT,SSD_2_EN_PIN,DIO_u8PIN_LOW);
    2378:	82 e0       	ldi	r24, 0x02	; 2
    237a:	67 e0       	ldi	r22, 0x07	; 7
    237c:	40 e0       	ldi	r20, 0x00	; 0
    237e:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <DIO_u8SetPinValue>
	seven_seg[ones]|=Local_u8PortMask;

	Local_u8PortMask = DIO_u8AndWithPort(SSD_DATA_PORT,SSD_DATA_MASK);
	seven_seg[tens]|=Local_u8PortMask;

	for(Local_u8Counter=0;Local_u8Counter<100;Local_u8Counter++)
    2382:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2384:	8f 5f       	subi	r24, 0xFF	; 255
    2386:	8f 8f       	std	Y+31, r24	; 0x1f
    2388:	8f 8d       	ldd	r24, Y+31	; 0x1f
    238a:	84 36       	cpi	r24, 0x64	; 100
    238c:	08 f4       	brcc	.+2      	; 0x2390 <SSD_u8DisplayBlink+0x2c8>
    238e:	e1 ce       	rjmp	.-574    	; 0x2152 <SSD_u8DisplayBlink+0x8a>
		DIO_u8SetPinValue(SSD_EN_PORT,SSD_1_EN_PIN,DIO_u8PIN_LOW);
		DIO_u8SetPinValue(SSD_EN_PORT,SSD_2_EN_PIN,DIO_u8PIN_LOW);


	}
	return Local_u8ErrorState;
    2390:	89 a1       	ldd	r24, Y+33	; 0x21
}
    2392:	a2 96       	adiw	r28, 0x22	; 34
    2394:	0f b6       	in	r0, 0x3f	; 63
    2396:	f8 94       	cli
    2398:	de bf       	out	0x3e, r29	; 62
    239a:	0f be       	out	0x3f, r0	; 63
    239c:	cd bf       	out	0x3d, r28	; 61
    239e:	cf 91       	pop	r28
    23a0:	df 91       	pop	r29
    23a2:	08 95       	ret

000023a4 <SSD_u8Displaynum>:

u8 SSD_u8Displaynum(u8 number)
{
    23a4:	df 93       	push	r29
    23a6:	cf 93       	push	r28
    23a8:	cd b7       	in	r28, 0x3d	; 61
    23aa:	de b7       	in	r29, 0x3e	; 62
    23ac:	a0 97       	sbiw	r28, 0x20	; 32
    23ae:	0f b6       	in	r0, 0x3f	; 63
    23b0:	f8 94       	cli
    23b2:	de bf       	out	0x3e, r29	; 62
    23b4:	0f be       	out	0x3f, r0	; 63
    23b6:	cd bf       	out	0x3d, r28	; 61
    23b8:	88 a3       	std	Y+32, r24	; 0x20
	u8 Local_u8ErrorState = 0;
    23ba:	1f 8e       	std	Y+31, r1	; 0x1f

	u8 ones = number%10;
    23bc:	88 a1       	ldd	r24, Y+32	; 0x20
    23be:	9a e0       	ldi	r25, 0x0A	; 10
    23c0:	69 2f       	mov	r22, r25
    23c2:	0e 94 68 16 	call	0x2cd0	; 0x2cd0 <__udivmodqi4>
    23c6:	89 2f       	mov	r24, r25
    23c8:	8e 8f       	std	Y+30, r24	; 0x1e
	u8 tens = number/10;
    23ca:	88 a1       	ldd	r24, Y+32	; 0x20
    23cc:	9a e0       	ldi	r25, 0x0A	; 10
    23ce:	69 2f       	mov	r22, r25
    23d0:	0e 94 68 16 	call	0x2cd0	; 0x2cd0 <__udivmodqi4>
    23d4:	8d 8f       	std	Y+29, r24	; 0x1d

	for(;;)
	{
		DIO_u8SetPinValue(SSD_EN_PORT,SSD_1_EN_PIN,DIO_u8PIN_HIGH);
    23d6:	82 e0       	ldi	r24, 0x02	; 2
    23d8:	66 e0       	ldi	r22, 0x06	; 6
    23da:	41 e0       	ldi	r20, 0x01	; 1
    23dc:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(SSD_EN_PORT,SSD_2_EN_PIN,DIO_u8PIN_LOW);
    23e0:	82 e0       	ldi	r24, 0x02	; 2
    23e2:	67 e0       	ldi	r22, 0x07	; 7
    23e4:	40 e0       	ldi	r20, 0x00	; 0
    23e6:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <DIO_u8SetPinValue>
		DIO_u8SetPortValue(SSD_DATA_PORT,seven_seg[ones]);
    23ea:	8e 8d       	ldd	r24, Y+30	; 0x1e
    23ec:	88 2f       	mov	r24, r24
    23ee:	90 e0       	ldi	r25, 0x00	; 0
    23f0:	fc 01       	movw	r30, r24
    23f2:	e0 58       	subi	r30, 0x80	; 128
    23f4:	fe 4f       	sbci	r31, 0xFE	; 254
    23f6:	90 81       	ld	r25, Z
    23f8:	80 e0       	ldi	r24, 0x00	; 0
    23fa:	69 2f       	mov	r22, r25
    23fc:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <DIO_u8SetPortValue>
    2400:	80 e0       	ldi	r24, 0x00	; 0
    2402:	90 e0       	ldi	r25, 0x00	; 0
    2404:	a0 ea       	ldi	r26, 0xA0	; 160
    2406:	b0 e4       	ldi	r27, 0x40	; 64
    2408:	89 8f       	std	Y+25, r24	; 0x19
    240a:	9a 8f       	std	Y+26, r25	; 0x1a
    240c:	ab 8f       	std	Y+27, r26	; 0x1b
    240e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2410:	69 8d       	ldd	r22, Y+25	; 0x19
    2412:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2414:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2416:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2418:	20 e0       	ldi	r18, 0x00	; 0
    241a:	30 e0       	ldi	r19, 0x00	; 0
    241c:	4a ef       	ldi	r20, 0xFA	; 250
    241e:	54 e4       	ldi	r21, 0x44	; 68
    2420:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2424:	dc 01       	movw	r26, r24
    2426:	cb 01       	movw	r24, r22
    2428:	8d 8b       	std	Y+21, r24	; 0x15
    242a:	9e 8b       	std	Y+22, r25	; 0x16
    242c:	af 8b       	std	Y+23, r26	; 0x17
    242e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2430:	6d 89       	ldd	r22, Y+21	; 0x15
    2432:	7e 89       	ldd	r23, Y+22	; 0x16
    2434:	8f 89       	ldd	r24, Y+23	; 0x17
    2436:	98 8d       	ldd	r25, Y+24	; 0x18
    2438:	20 e0       	ldi	r18, 0x00	; 0
    243a:	30 e0       	ldi	r19, 0x00	; 0
    243c:	40 e8       	ldi	r20, 0x80	; 128
    243e:	5f e3       	ldi	r21, 0x3F	; 63
    2440:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    2444:	88 23       	and	r24, r24
    2446:	2c f4       	brge	.+10     	; 0x2452 <SSD_u8Displaynum+0xae>
		__ticks = 1;
    2448:	81 e0       	ldi	r24, 0x01	; 1
    244a:	90 e0       	ldi	r25, 0x00	; 0
    244c:	9c 8b       	std	Y+20, r25	; 0x14
    244e:	8b 8b       	std	Y+19, r24	; 0x13
    2450:	3f c0       	rjmp	.+126    	; 0x24d0 <SSD_u8Displaynum+0x12c>
	else if (__tmp > 65535)
    2452:	6d 89       	ldd	r22, Y+21	; 0x15
    2454:	7e 89       	ldd	r23, Y+22	; 0x16
    2456:	8f 89       	ldd	r24, Y+23	; 0x17
    2458:	98 8d       	ldd	r25, Y+24	; 0x18
    245a:	20 e0       	ldi	r18, 0x00	; 0
    245c:	3f ef       	ldi	r19, 0xFF	; 255
    245e:	4f e7       	ldi	r20, 0x7F	; 127
    2460:	57 e4       	ldi	r21, 0x47	; 71
    2462:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    2466:	18 16       	cp	r1, r24
    2468:	4c f5       	brge	.+82     	; 0x24bc <SSD_u8Displaynum+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    246a:	69 8d       	ldd	r22, Y+25	; 0x19
    246c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    246e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2470:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2472:	20 e0       	ldi	r18, 0x00	; 0
    2474:	30 e0       	ldi	r19, 0x00	; 0
    2476:	40 e2       	ldi	r20, 0x20	; 32
    2478:	51 e4       	ldi	r21, 0x41	; 65
    247a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    247e:	dc 01       	movw	r26, r24
    2480:	cb 01       	movw	r24, r22
    2482:	bc 01       	movw	r22, r24
    2484:	cd 01       	movw	r24, r26
    2486:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    248a:	dc 01       	movw	r26, r24
    248c:	cb 01       	movw	r24, r22
    248e:	9c 8b       	std	Y+20, r25	; 0x14
    2490:	8b 8b       	std	Y+19, r24	; 0x13
    2492:	0f c0       	rjmp	.+30     	; 0x24b2 <SSD_u8Displaynum+0x10e>
    2494:	88 ec       	ldi	r24, 0xC8	; 200
    2496:	90 e0       	ldi	r25, 0x00	; 0
    2498:	9a 8b       	std	Y+18, r25	; 0x12
    249a:	89 8b       	std	Y+17, r24	; 0x11
    249c:	89 89       	ldd	r24, Y+17	; 0x11
    249e:	9a 89       	ldd	r25, Y+18	; 0x12
    24a0:	01 97       	sbiw	r24, 0x01	; 1
    24a2:	f1 f7       	brne	.-4      	; 0x24a0 <SSD_u8Displaynum+0xfc>
    24a4:	9a 8b       	std	Y+18, r25	; 0x12
    24a6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24a8:	8b 89       	ldd	r24, Y+19	; 0x13
    24aa:	9c 89       	ldd	r25, Y+20	; 0x14
    24ac:	01 97       	sbiw	r24, 0x01	; 1
    24ae:	9c 8b       	std	Y+20, r25	; 0x14
    24b0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24b2:	8b 89       	ldd	r24, Y+19	; 0x13
    24b4:	9c 89       	ldd	r25, Y+20	; 0x14
    24b6:	00 97       	sbiw	r24, 0x00	; 0
    24b8:	69 f7       	brne	.-38     	; 0x2494 <SSD_u8Displaynum+0xf0>
    24ba:	14 c0       	rjmp	.+40     	; 0x24e4 <SSD_u8Displaynum+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24bc:	6d 89       	ldd	r22, Y+21	; 0x15
    24be:	7e 89       	ldd	r23, Y+22	; 0x16
    24c0:	8f 89       	ldd	r24, Y+23	; 0x17
    24c2:	98 8d       	ldd	r25, Y+24	; 0x18
    24c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24c8:	dc 01       	movw	r26, r24
    24ca:	cb 01       	movw	r24, r22
    24cc:	9c 8b       	std	Y+20, r25	; 0x14
    24ce:	8b 8b       	std	Y+19, r24	; 0x13
    24d0:	8b 89       	ldd	r24, Y+19	; 0x13
    24d2:	9c 89       	ldd	r25, Y+20	; 0x14
    24d4:	98 8b       	std	Y+16, r25	; 0x10
    24d6:	8f 87       	std	Y+15, r24	; 0x0f
    24d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    24da:	98 89       	ldd	r25, Y+16	; 0x10
    24dc:	01 97       	sbiw	r24, 0x01	; 1
    24de:	f1 f7       	brne	.-4      	; 0x24dc <SSD_u8Displaynum+0x138>
    24e0:	98 8b       	std	Y+16, r25	; 0x10
    24e2:	8f 87       	std	Y+15, r24	; 0x0f

		_delay_ms(5);
		DIO_u8SetPinValue(SSD_EN_PORT,SSD_1_EN_PIN,DIO_u8PIN_LOW);
    24e4:	82 e0       	ldi	r24, 0x02	; 2
    24e6:	66 e0       	ldi	r22, 0x06	; 6
    24e8:	40 e0       	ldi	r20, 0x00	; 0
    24ea:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(SSD_EN_PORT,SSD_2_EN_PIN,DIO_u8PIN_HIGH);
    24ee:	82 e0       	ldi	r24, 0x02	; 2
    24f0:	67 e0       	ldi	r22, 0x07	; 7
    24f2:	41 e0       	ldi	r20, 0x01	; 1
    24f4:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <DIO_u8SetPinValue>
		DIO_u8SetPortValue(SSD_DATA_PORT,seven_seg[tens]);
    24f8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    24fa:	88 2f       	mov	r24, r24
    24fc:	90 e0       	ldi	r25, 0x00	; 0
    24fe:	fc 01       	movw	r30, r24
    2500:	e0 58       	subi	r30, 0x80	; 128
    2502:	fe 4f       	sbci	r31, 0xFE	; 254
    2504:	90 81       	ld	r25, Z
    2506:	80 e0       	ldi	r24, 0x00	; 0
    2508:	69 2f       	mov	r22, r25
    250a:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <DIO_u8SetPortValue>
    250e:	80 e0       	ldi	r24, 0x00	; 0
    2510:	90 e0       	ldi	r25, 0x00	; 0
    2512:	a0 ea       	ldi	r26, 0xA0	; 160
    2514:	b0 e4       	ldi	r27, 0x40	; 64
    2516:	8b 87       	std	Y+11, r24	; 0x0b
    2518:	9c 87       	std	Y+12, r25	; 0x0c
    251a:	ad 87       	std	Y+13, r26	; 0x0d
    251c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    251e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2520:	7c 85       	ldd	r23, Y+12	; 0x0c
    2522:	8d 85       	ldd	r24, Y+13	; 0x0d
    2524:	9e 85       	ldd	r25, Y+14	; 0x0e
    2526:	20 e0       	ldi	r18, 0x00	; 0
    2528:	30 e0       	ldi	r19, 0x00	; 0
    252a:	4a ef       	ldi	r20, 0xFA	; 250
    252c:	54 e4       	ldi	r21, 0x44	; 68
    252e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2532:	dc 01       	movw	r26, r24
    2534:	cb 01       	movw	r24, r22
    2536:	8f 83       	std	Y+7, r24	; 0x07
    2538:	98 87       	std	Y+8, r25	; 0x08
    253a:	a9 87       	std	Y+9, r26	; 0x09
    253c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    253e:	6f 81       	ldd	r22, Y+7	; 0x07
    2540:	78 85       	ldd	r23, Y+8	; 0x08
    2542:	89 85       	ldd	r24, Y+9	; 0x09
    2544:	9a 85       	ldd	r25, Y+10	; 0x0a
    2546:	20 e0       	ldi	r18, 0x00	; 0
    2548:	30 e0       	ldi	r19, 0x00	; 0
    254a:	40 e8       	ldi	r20, 0x80	; 128
    254c:	5f e3       	ldi	r21, 0x3F	; 63
    254e:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    2552:	88 23       	and	r24, r24
    2554:	2c f4       	brge	.+10     	; 0x2560 <SSD_u8Displaynum+0x1bc>
		__ticks = 1;
    2556:	81 e0       	ldi	r24, 0x01	; 1
    2558:	90 e0       	ldi	r25, 0x00	; 0
    255a:	9e 83       	std	Y+6, r25	; 0x06
    255c:	8d 83       	std	Y+5, r24	; 0x05
    255e:	3f c0       	rjmp	.+126    	; 0x25de <SSD_u8Displaynum+0x23a>
	else if (__tmp > 65535)
    2560:	6f 81       	ldd	r22, Y+7	; 0x07
    2562:	78 85       	ldd	r23, Y+8	; 0x08
    2564:	89 85       	ldd	r24, Y+9	; 0x09
    2566:	9a 85       	ldd	r25, Y+10	; 0x0a
    2568:	20 e0       	ldi	r18, 0x00	; 0
    256a:	3f ef       	ldi	r19, 0xFF	; 255
    256c:	4f e7       	ldi	r20, 0x7F	; 127
    256e:	57 e4       	ldi	r21, 0x47	; 71
    2570:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    2574:	18 16       	cp	r1, r24
    2576:	4c f5       	brge	.+82     	; 0x25ca <SSD_u8Displaynum+0x226>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2578:	6b 85       	ldd	r22, Y+11	; 0x0b
    257a:	7c 85       	ldd	r23, Y+12	; 0x0c
    257c:	8d 85       	ldd	r24, Y+13	; 0x0d
    257e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2580:	20 e0       	ldi	r18, 0x00	; 0
    2582:	30 e0       	ldi	r19, 0x00	; 0
    2584:	40 e2       	ldi	r20, 0x20	; 32
    2586:	51 e4       	ldi	r21, 0x41	; 65
    2588:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    258c:	dc 01       	movw	r26, r24
    258e:	cb 01       	movw	r24, r22
    2590:	bc 01       	movw	r22, r24
    2592:	cd 01       	movw	r24, r26
    2594:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2598:	dc 01       	movw	r26, r24
    259a:	cb 01       	movw	r24, r22
    259c:	9e 83       	std	Y+6, r25	; 0x06
    259e:	8d 83       	std	Y+5, r24	; 0x05
    25a0:	0f c0       	rjmp	.+30     	; 0x25c0 <SSD_u8Displaynum+0x21c>
    25a2:	88 ec       	ldi	r24, 0xC8	; 200
    25a4:	90 e0       	ldi	r25, 0x00	; 0
    25a6:	9c 83       	std	Y+4, r25	; 0x04
    25a8:	8b 83       	std	Y+3, r24	; 0x03
    25aa:	8b 81       	ldd	r24, Y+3	; 0x03
    25ac:	9c 81       	ldd	r25, Y+4	; 0x04
    25ae:	01 97       	sbiw	r24, 0x01	; 1
    25b0:	f1 f7       	brne	.-4      	; 0x25ae <SSD_u8Displaynum+0x20a>
    25b2:	9c 83       	std	Y+4, r25	; 0x04
    25b4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25b6:	8d 81       	ldd	r24, Y+5	; 0x05
    25b8:	9e 81       	ldd	r25, Y+6	; 0x06
    25ba:	01 97       	sbiw	r24, 0x01	; 1
    25bc:	9e 83       	std	Y+6, r25	; 0x06
    25be:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25c0:	8d 81       	ldd	r24, Y+5	; 0x05
    25c2:	9e 81       	ldd	r25, Y+6	; 0x06
    25c4:	00 97       	sbiw	r24, 0x00	; 0
    25c6:	69 f7       	brne	.-38     	; 0x25a2 <SSD_u8Displaynum+0x1fe>
    25c8:	14 c0       	rjmp	.+40     	; 0x25f2 <SSD_u8Displaynum+0x24e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25ca:	6f 81       	ldd	r22, Y+7	; 0x07
    25cc:	78 85       	ldd	r23, Y+8	; 0x08
    25ce:	89 85       	ldd	r24, Y+9	; 0x09
    25d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    25d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25d6:	dc 01       	movw	r26, r24
    25d8:	cb 01       	movw	r24, r22
    25da:	9e 83       	std	Y+6, r25	; 0x06
    25dc:	8d 83       	std	Y+5, r24	; 0x05
    25de:	8d 81       	ldd	r24, Y+5	; 0x05
    25e0:	9e 81       	ldd	r25, Y+6	; 0x06
    25e2:	9a 83       	std	Y+2, r25	; 0x02
    25e4:	89 83       	std	Y+1, r24	; 0x01
    25e6:	89 81       	ldd	r24, Y+1	; 0x01
    25e8:	9a 81       	ldd	r25, Y+2	; 0x02
    25ea:	01 97       	sbiw	r24, 0x01	; 1
    25ec:	f1 f7       	brne	.-4      	; 0x25ea <SSD_u8Displaynum+0x246>
    25ee:	9a 83       	std	Y+2, r25	; 0x02
    25f0:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(5);
		DIO_u8SetPinValue(SSD_EN_PORT,SSD_1_EN_PIN,DIO_u8PIN_LOW);
    25f2:	82 e0       	ldi	r24, 0x02	; 2
    25f4:	66 e0       	ldi	r22, 0x06	; 6
    25f6:	40 e0       	ldi	r20, 0x00	; 0
    25f8:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(SSD_EN_PORT,SSD_2_EN_PIN,DIO_u8PIN_LOW);
    25fc:	82 e0       	ldi	r24, 0x02	; 2
    25fe:	67 e0       	ldi	r22, 0x07	; 7
    2600:	40 e0       	ldi	r20, 0x00	; 0
    2602:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <DIO_u8SetPinValue>
    2606:	e7 ce       	rjmp	.-562    	; 0x23d6 <SSD_u8Displaynum+0x32>

00002608 <SSD_u8CountUp>:
	return Local_u8ErrorState;

}

u8 SSD_u8CountUp(u8 number)
{
    2608:	df 93       	push	r29
    260a:	cf 93       	push	r28
    260c:	00 d0       	rcall	.+0      	; 0x260e <SSD_u8CountUp+0x6>
    260e:	0f 92       	push	r0
    2610:	cd b7       	in	r28, 0x3d	; 61
    2612:	de b7       	in	r29, 0x3e	; 62
    2614:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8ErrorState = 0;
    2616:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8Counter;

	for(Local_u8Counter=0;Local_u8Counter<=number;Local_u8Counter++)
    2618:	19 82       	std	Y+1, r1	; 0x01
    261a:	06 c0       	rjmp	.+12     	; 0x2628 <SSD_u8CountUp+0x20>
	{
		SSD_u8DisplayBlink(Local_u8Counter);
    261c:	89 81       	ldd	r24, Y+1	; 0x01
    261e:	0e 94 64 10 	call	0x20c8	; 0x20c8 <SSD_u8DisplayBlink>
u8 SSD_u8CountUp(u8 number)
{
	u8 Local_u8ErrorState = 0;
	u8 Local_u8Counter;

	for(Local_u8Counter=0;Local_u8Counter<=number;Local_u8Counter++)
    2622:	89 81       	ldd	r24, Y+1	; 0x01
    2624:	8f 5f       	subi	r24, 0xFF	; 255
    2626:	89 83       	std	Y+1, r24	; 0x01
    2628:	99 81       	ldd	r25, Y+1	; 0x01
    262a:	8b 81       	ldd	r24, Y+3	; 0x03
    262c:	89 17       	cp	r24, r25
    262e:	b0 f7       	brcc	.-20     	; 0x261c <SSD_u8CountUp+0x14>
	{
		SSD_u8DisplayBlink(Local_u8Counter);

	}

	return Local_u8ErrorState;
    2630:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2632:	0f 90       	pop	r0
    2634:	0f 90       	pop	r0
    2636:	0f 90       	pop	r0
    2638:	cf 91       	pop	r28
    263a:	df 91       	pop	r29
    263c:	08 95       	ret

0000263e <SSD_u8CountDown>:

u8 SSD_u8CountDown(u8 number)
{
    263e:	df 93       	push	r29
    2640:	cf 93       	push	r28
    2642:	00 d0       	rcall	.+0      	; 0x2644 <SSD_u8CountDown+0x6>
    2644:	0f 92       	push	r0
    2646:	cd b7       	in	r28, 0x3d	; 61
    2648:	de b7       	in	r29, 0x3e	; 62
    264a:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8ErrorState = 0;
    264c:	1a 82       	std	Y+2, r1	; 0x02
	s8 Local_u8Counter;
	for(Local_u8Counter=number;Local_u8Counter>=0;Local_u8Counter--)
    264e:	8b 81       	ldd	r24, Y+3	; 0x03
    2650:	89 83       	std	Y+1, r24	; 0x01
    2652:	06 c0       	rjmp	.+12     	; 0x2660 <SSD_u8CountDown+0x22>
	{
		SSD_u8DisplayBlink(Local_u8Counter);
    2654:	89 81       	ldd	r24, Y+1	; 0x01
    2656:	0e 94 64 10 	call	0x20c8	; 0x20c8 <SSD_u8DisplayBlink>

u8 SSD_u8CountDown(u8 number)
{
	u8 Local_u8ErrorState = 0;
	s8 Local_u8Counter;
	for(Local_u8Counter=number;Local_u8Counter>=0;Local_u8Counter--)
    265a:	89 81       	ldd	r24, Y+1	; 0x01
    265c:	81 50       	subi	r24, 0x01	; 1
    265e:	89 83       	std	Y+1, r24	; 0x01
    2660:	89 81       	ldd	r24, Y+1	; 0x01
    2662:	88 23       	and	r24, r24
    2664:	bc f7       	brge	.-18     	; 0x2654 <SSD_u8CountDown+0x16>
	{
		SSD_u8DisplayBlink(Local_u8Counter);
	}

	return Local_u8ErrorState;
    2666:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2668:	0f 90       	pop	r0
    266a:	0f 90       	pop	r0
    266c:	0f 90       	pop	r0
    266e:	cf 91       	pop	r28
    2670:	df 91       	pop	r29
    2672:	08 95       	ret

00002674 <SSD_u8Specficfunc>:

void SSD_u8Specficfunc(void)
{
    2674:	df 93       	push	r29
    2676:	cf 93       	push	r28
    2678:	cd b7       	in	r28, 0x3d	; 61
    267a:	de b7       	in	r29, 0x3e	; 62
    267c:	6e 97       	sbiw	r28, 0x1e	; 30
    267e:	0f b6       	in	r0, 0x3f	; 63
    2680:	f8 94       	cli
    2682:	de bf       	out	0x3e, r29	; 62
    2684:	0f be       	out	0x3f, r0	; 63
    2686:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8PortMask;

	u8 Local_u8Counter;


	Local_u8PortMask = DIO_u8AndWithPort(SSD_DATA_PORT,SSD_DATA_MASK);
    2688:	80 e0       	ldi	r24, 0x00	; 0
    268a:	61 e0       	ldi	r22, 0x01	; 1
    268c:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <DIO_u8AndWithPort>
    2690:	8e 8f       	std	Y+30, r24	; 0x1e
	seven_seg[Local_u8num1]|=Local_u8PortMask;
    2692:	80 91 8a 01 	lds	r24, 0x018A
    2696:	28 2f       	mov	r18, r24
    2698:	30 e0       	ldi	r19, 0x00	; 0
    269a:	80 91 8a 01 	lds	r24, 0x018A
    269e:	88 2f       	mov	r24, r24
    26a0:	90 e0       	ldi	r25, 0x00	; 0
    26a2:	fc 01       	movw	r30, r24
    26a4:	e0 58       	subi	r30, 0x80	; 128
    26a6:	fe 4f       	sbci	r31, 0xFE	; 254
    26a8:	90 81       	ld	r25, Z
    26aa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    26ac:	89 2b       	or	r24, r25
    26ae:	f9 01       	movw	r30, r18
    26b0:	e0 58       	subi	r30, 0x80	; 128
    26b2:	fe 4f       	sbci	r31, 0xFE	; 254
    26b4:	80 83       	st	Z, r24

	Local_u8PortMask = DIO_u8AndWithPort(SSD_DATA_PORT,SSD_DATA_MASK);
    26b6:	80 e0       	ldi	r24, 0x00	; 0
    26b8:	61 e0       	ldi	r22, 0x01	; 1
    26ba:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <DIO_u8AndWithPort>
    26be:	8e 8f       	std	Y+30, r24	; 0x1e
	seven_seg[Local_u8num2]|=Local_u8PortMask;
    26c0:	80 91 8c 01 	lds	r24, 0x018C
    26c4:	28 2f       	mov	r18, r24
    26c6:	30 e0       	ldi	r19, 0x00	; 0
    26c8:	80 91 8c 01 	lds	r24, 0x018C
    26cc:	88 2f       	mov	r24, r24
    26ce:	90 e0       	ldi	r25, 0x00	; 0
    26d0:	fc 01       	movw	r30, r24
    26d2:	e0 58       	subi	r30, 0x80	; 128
    26d4:	fe 4f       	sbci	r31, 0xFE	; 254
    26d6:	90 81       	ld	r25, Z
    26d8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    26da:	89 2b       	or	r24, r25
    26dc:	f9 01       	movw	r30, r18
    26de:	e0 58       	subi	r30, 0x80	; 128
    26e0:	fe 4f       	sbci	r31, 0xFE	; 254
    26e2:	80 83       	st	Z, r24


	DIO_u8SetPinValue(SSD_EN_PORT,SSD_1_EN_PIN,DIO_u8PIN_LOW);
    26e4:	82 e0       	ldi	r24, 0x02	; 2
    26e6:	66 e0       	ldi	r22, 0x06	; 6
    26e8:	40 e0       	ldi	r20, 0x00	; 0
    26ea:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(SSD_EN_PORT,SSD_2_EN_PIN,DIO_u8PIN_LOW);
    26ee:	82 e0       	ldi	r24, 0x02	; 2
    26f0:	67 e0       	ldi	r22, 0x07	; 7
    26f2:	40 e0       	ldi	r20, 0x00	; 0
    26f4:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <DIO_u8SetPinValue>
    26f8:	80 e0       	ldi	r24, 0x00	; 0
    26fa:	90 e0       	ldi	r25, 0x00	; 0
    26fc:	a0 ea       	ldi	r26, 0xA0	; 160
    26fe:	b0 e4       	ldi	r27, 0x40	; 64
    2700:	89 8f       	std	Y+25, r24	; 0x19
    2702:	9a 8f       	std	Y+26, r25	; 0x1a
    2704:	ab 8f       	std	Y+27, r26	; 0x1b
    2706:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2708:	69 8d       	ldd	r22, Y+25	; 0x19
    270a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    270c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    270e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2710:	20 e0       	ldi	r18, 0x00	; 0
    2712:	30 e0       	ldi	r19, 0x00	; 0
    2714:	4a ef       	ldi	r20, 0xFA	; 250
    2716:	54 e4       	ldi	r21, 0x44	; 68
    2718:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    271c:	dc 01       	movw	r26, r24
    271e:	cb 01       	movw	r24, r22
    2720:	8d 8b       	std	Y+21, r24	; 0x15
    2722:	9e 8b       	std	Y+22, r25	; 0x16
    2724:	af 8b       	std	Y+23, r26	; 0x17
    2726:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2728:	6d 89       	ldd	r22, Y+21	; 0x15
    272a:	7e 89       	ldd	r23, Y+22	; 0x16
    272c:	8f 89       	ldd	r24, Y+23	; 0x17
    272e:	98 8d       	ldd	r25, Y+24	; 0x18
    2730:	20 e0       	ldi	r18, 0x00	; 0
    2732:	30 e0       	ldi	r19, 0x00	; 0
    2734:	40 e8       	ldi	r20, 0x80	; 128
    2736:	5f e3       	ldi	r21, 0x3F	; 63
    2738:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    273c:	88 23       	and	r24, r24
    273e:	2c f4       	brge	.+10     	; 0x274a <SSD_u8Specficfunc+0xd6>
		__ticks = 1;
    2740:	81 e0       	ldi	r24, 0x01	; 1
    2742:	90 e0       	ldi	r25, 0x00	; 0
    2744:	9c 8b       	std	Y+20, r25	; 0x14
    2746:	8b 8b       	std	Y+19, r24	; 0x13
    2748:	3f c0       	rjmp	.+126    	; 0x27c8 <SSD_u8Specficfunc+0x154>
	else if (__tmp > 65535)
    274a:	6d 89       	ldd	r22, Y+21	; 0x15
    274c:	7e 89       	ldd	r23, Y+22	; 0x16
    274e:	8f 89       	ldd	r24, Y+23	; 0x17
    2750:	98 8d       	ldd	r25, Y+24	; 0x18
    2752:	20 e0       	ldi	r18, 0x00	; 0
    2754:	3f ef       	ldi	r19, 0xFF	; 255
    2756:	4f e7       	ldi	r20, 0x7F	; 127
    2758:	57 e4       	ldi	r21, 0x47	; 71
    275a:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    275e:	18 16       	cp	r1, r24
    2760:	4c f5       	brge	.+82     	; 0x27b4 <SSD_u8Specficfunc+0x140>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2762:	69 8d       	ldd	r22, Y+25	; 0x19
    2764:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2766:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2768:	9c 8d       	ldd	r25, Y+28	; 0x1c
    276a:	20 e0       	ldi	r18, 0x00	; 0
    276c:	30 e0       	ldi	r19, 0x00	; 0
    276e:	40 e2       	ldi	r20, 0x20	; 32
    2770:	51 e4       	ldi	r21, 0x41	; 65
    2772:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2776:	dc 01       	movw	r26, r24
    2778:	cb 01       	movw	r24, r22
    277a:	bc 01       	movw	r22, r24
    277c:	cd 01       	movw	r24, r26
    277e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2782:	dc 01       	movw	r26, r24
    2784:	cb 01       	movw	r24, r22
    2786:	9c 8b       	std	Y+20, r25	; 0x14
    2788:	8b 8b       	std	Y+19, r24	; 0x13
    278a:	0f c0       	rjmp	.+30     	; 0x27aa <SSD_u8Specficfunc+0x136>
    278c:	88 ec       	ldi	r24, 0xC8	; 200
    278e:	90 e0       	ldi	r25, 0x00	; 0
    2790:	9a 8b       	std	Y+18, r25	; 0x12
    2792:	89 8b       	std	Y+17, r24	; 0x11
    2794:	89 89       	ldd	r24, Y+17	; 0x11
    2796:	9a 89       	ldd	r25, Y+18	; 0x12
    2798:	01 97       	sbiw	r24, 0x01	; 1
    279a:	f1 f7       	brne	.-4      	; 0x2798 <SSD_u8Specficfunc+0x124>
    279c:	9a 8b       	std	Y+18, r25	; 0x12
    279e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27a0:	8b 89       	ldd	r24, Y+19	; 0x13
    27a2:	9c 89       	ldd	r25, Y+20	; 0x14
    27a4:	01 97       	sbiw	r24, 0x01	; 1
    27a6:	9c 8b       	std	Y+20, r25	; 0x14
    27a8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27aa:	8b 89       	ldd	r24, Y+19	; 0x13
    27ac:	9c 89       	ldd	r25, Y+20	; 0x14
    27ae:	00 97       	sbiw	r24, 0x00	; 0
    27b0:	69 f7       	brne	.-38     	; 0x278c <SSD_u8Specficfunc+0x118>
    27b2:	14 c0       	rjmp	.+40     	; 0x27dc <SSD_u8Specficfunc+0x168>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27b4:	6d 89       	ldd	r22, Y+21	; 0x15
    27b6:	7e 89       	ldd	r23, Y+22	; 0x16
    27b8:	8f 89       	ldd	r24, Y+23	; 0x17
    27ba:	98 8d       	ldd	r25, Y+24	; 0x18
    27bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27c0:	dc 01       	movw	r26, r24
    27c2:	cb 01       	movw	r24, r22
    27c4:	9c 8b       	std	Y+20, r25	; 0x14
    27c6:	8b 8b       	std	Y+19, r24	; 0x13
    27c8:	8b 89       	ldd	r24, Y+19	; 0x13
    27ca:	9c 89       	ldd	r25, Y+20	; 0x14
    27cc:	98 8b       	std	Y+16, r25	; 0x10
    27ce:	8f 87       	std	Y+15, r24	; 0x0f
    27d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    27d2:	98 89       	ldd	r25, Y+16	; 0x10
    27d4:	01 97       	sbiw	r24, 0x01	; 1
    27d6:	f1 f7       	brne	.-4      	; 0x27d4 <SSD_u8Specficfunc+0x160>
    27d8:	98 8b       	std	Y+16, r25	; 0x10
    27da:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);

	DIO_u8SetPinValue(SSD_EN_PORT,SSD_1_EN_PIN,DIO_u8PIN_HIGH);
    27dc:	82 e0       	ldi	r24, 0x02	; 2
    27de:	66 e0       	ldi	r22, 0x06	; 6
    27e0:	41 e0       	ldi	r20, 0x01	; 1
    27e2:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(SSD_EN_PORT,SSD_2_EN_PIN,DIO_u8PIN_LOW);
    27e6:	82 e0       	ldi	r24, 0x02	; 2
    27e8:	67 e0       	ldi	r22, 0x07	; 7
    27ea:	40 e0       	ldi	r20, 0x00	; 0
    27ec:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <DIO_u8SetPinValue>
	DIO_u8SetPortValue(SSD_DATA_PORT,seven_seg[Local_u8num1]);
    27f0:	80 91 8a 01 	lds	r24, 0x018A
    27f4:	88 2f       	mov	r24, r24
    27f6:	90 e0       	ldi	r25, 0x00	; 0
    27f8:	fc 01       	movw	r30, r24
    27fa:	e0 58       	subi	r30, 0x80	; 128
    27fc:	fe 4f       	sbci	r31, 0xFE	; 254
    27fe:	90 81       	ld	r25, Z
    2800:	80 e0       	ldi	r24, 0x00	; 0
    2802:	69 2f       	mov	r22, r25
    2804:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <DIO_u8SetPortValue>
    2808:	80 e0       	ldi	r24, 0x00	; 0
    280a:	90 e0       	ldi	r25, 0x00	; 0
    280c:	a0 ea       	ldi	r26, 0xA0	; 160
    280e:	b0 e4       	ldi	r27, 0x40	; 64
    2810:	8b 87       	std	Y+11, r24	; 0x0b
    2812:	9c 87       	std	Y+12, r25	; 0x0c
    2814:	ad 87       	std	Y+13, r26	; 0x0d
    2816:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2818:	6b 85       	ldd	r22, Y+11	; 0x0b
    281a:	7c 85       	ldd	r23, Y+12	; 0x0c
    281c:	8d 85       	ldd	r24, Y+13	; 0x0d
    281e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2820:	20 e0       	ldi	r18, 0x00	; 0
    2822:	30 e0       	ldi	r19, 0x00	; 0
    2824:	4a ef       	ldi	r20, 0xFA	; 250
    2826:	54 e4       	ldi	r21, 0x44	; 68
    2828:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    282c:	dc 01       	movw	r26, r24
    282e:	cb 01       	movw	r24, r22
    2830:	8f 83       	std	Y+7, r24	; 0x07
    2832:	98 87       	std	Y+8, r25	; 0x08
    2834:	a9 87       	std	Y+9, r26	; 0x09
    2836:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2838:	6f 81       	ldd	r22, Y+7	; 0x07
    283a:	78 85       	ldd	r23, Y+8	; 0x08
    283c:	89 85       	ldd	r24, Y+9	; 0x09
    283e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2840:	20 e0       	ldi	r18, 0x00	; 0
    2842:	30 e0       	ldi	r19, 0x00	; 0
    2844:	40 e8       	ldi	r20, 0x80	; 128
    2846:	5f e3       	ldi	r21, 0x3F	; 63
    2848:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    284c:	88 23       	and	r24, r24
    284e:	2c f4       	brge	.+10     	; 0x285a <SSD_u8Specficfunc+0x1e6>
		__ticks = 1;
    2850:	81 e0       	ldi	r24, 0x01	; 1
    2852:	90 e0       	ldi	r25, 0x00	; 0
    2854:	9e 83       	std	Y+6, r25	; 0x06
    2856:	8d 83       	std	Y+5, r24	; 0x05
    2858:	3f c0       	rjmp	.+126    	; 0x28d8 <SSD_u8Specficfunc+0x264>
	else if (__tmp > 65535)
    285a:	6f 81       	ldd	r22, Y+7	; 0x07
    285c:	78 85       	ldd	r23, Y+8	; 0x08
    285e:	89 85       	ldd	r24, Y+9	; 0x09
    2860:	9a 85       	ldd	r25, Y+10	; 0x0a
    2862:	20 e0       	ldi	r18, 0x00	; 0
    2864:	3f ef       	ldi	r19, 0xFF	; 255
    2866:	4f e7       	ldi	r20, 0x7F	; 127
    2868:	57 e4       	ldi	r21, 0x47	; 71
    286a:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    286e:	18 16       	cp	r1, r24
    2870:	4c f5       	brge	.+82     	; 0x28c4 <SSD_u8Specficfunc+0x250>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2872:	6b 85       	ldd	r22, Y+11	; 0x0b
    2874:	7c 85       	ldd	r23, Y+12	; 0x0c
    2876:	8d 85       	ldd	r24, Y+13	; 0x0d
    2878:	9e 85       	ldd	r25, Y+14	; 0x0e
    287a:	20 e0       	ldi	r18, 0x00	; 0
    287c:	30 e0       	ldi	r19, 0x00	; 0
    287e:	40 e2       	ldi	r20, 0x20	; 32
    2880:	51 e4       	ldi	r21, 0x41	; 65
    2882:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2886:	dc 01       	movw	r26, r24
    2888:	cb 01       	movw	r24, r22
    288a:	bc 01       	movw	r22, r24
    288c:	cd 01       	movw	r24, r26
    288e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2892:	dc 01       	movw	r26, r24
    2894:	cb 01       	movw	r24, r22
    2896:	9e 83       	std	Y+6, r25	; 0x06
    2898:	8d 83       	std	Y+5, r24	; 0x05
    289a:	0f c0       	rjmp	.+30     	; 0x28ba <SSD_u8Specficfunc+0x246>
    289c:	88 ec       	ldi	r24, 0xC8	; 200
    289e:	90 e0       	ldi	r25, 0x00	; 0
    28a0:	9c 83       	std	Y+4, r25	; 0x04
    28a2:	8b 83       	std	Y+3, r24	; 0x03
    28a4:	8b 81       	ldd	r24, Y+3	; 0x03
    28a6:	9c 81       	ldd	r25, Y+4	; 0x04
    28a8:	01 97       	sbiw	r24, 0x01	; 1
    28aa:	f1 f7       	brne	.-4      	; 0x28a8 <SSD_u8Specficfunc+0x234>
    28ac:	9c 83       	std	Y+4, r25	; 0x04
    28ae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28b0:	8d 81       	ldd	r24, Y+5	; 0x05
    28b2:	9e 81       	ldd	r25, Y+6	; 0x06
    28b4:	01 97       	sbiw	r24, 0x01	; 1
    28b6:	9e 83       	std	Y+6, r25	; 0x06
    28b8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28ba:	8d 81       	ldd	r24, Y+5	; 0x05
    28bc:	9e 81       	ldd	r25, Y+6	; 0x06
    28be:	00 97       	sbiw	r24, 0x00	; 0
    28c0:	69 f7       	brne	.-38     	; 0x289c <SSD_u8Specficfunc+0x228>
    28c2:	14 c0       	rjmp	.+40     	; 0x28ec <SSD_u8Specficfunc+0x278>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28c4:	6f 81       	ldd	r22, Y+7	; 0x07
    28c6:	78 85       	ldd	r23, Y+8	; 0x08
    28c8:	89 85       	ldd	r24, Y+9	; 0x09
    28ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    28cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28d0:	dc 01       	movw	r26, r24
    28d2:	cb 01       	movw	r24, r22
    28d4:	9e 83       	std	Y+6, r25	; 0x06
    28d6:	8d 83       	std	Y+5, r24	; 0x05
    28d8:	8d 81       	ldd	r24, Y+5	; 0x05
    28da:	9e 81       	ldd	r25, Y+6	; 0x06
    28dc:	9a 83       	std	Y+2, r25	; 0x02
    28de:	89 83       	std	Y+1, r24	; 0x01
    28e0:	89 81       	ldd	r24, Y+1	; 0x01
    28e2:	9a 81       	ldd	r25, Y+2	; 0x02
    28e4:	01 97       	sbiw	r24, 0x01	; 1
    28e6:	f1 f7       	brne	.-4      	; 0x28e4 <SSD_u8Specficfunc+0x270>
    28e8:	9a 83       	std	Y+2, r25	; 0x02
    28ea:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(5);
	DIO_u8SetPinValue(SSD_EN_PORT,SSD_1_EN_PIN,DIO_u8PIN_LOW);
    28ec:	82 e0       	ldi	r24, 0x02	; 2
    28ee:	66 e0       	ldi	r22, 0x06	; 6
    28f0:	40 e0       	ldi	r20, 0x00	; 0
    28f2:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(SSD_EN_PORT,SSD_2_EN_PIN,DIO_u8PIN_HIGH);
    28f6:	82 e0       	ldi	r24, 0x02	; 2
    28f8:	67 e0       	ldi	r22, 0x07	; 7
    28fa:	41 e0       	ldi	r20, 0x01	; 1
    28fc:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <DIO_u8SetPinValue>
	DIO_u8SetPortValue(SSD_DATA_PORT,seven_seg[Local_u8num2]);
    2900:	80 91 8c 01 	lds	r24, 0x018C
    2904:	88 2f       	mov	r24, r24
    2906:	90 e0       	ldi	r25, 0x00	; 0
    2908:	fc 01       	movw	r30, r24
    290a:	e0 58       	subi	r30, 0x80	; 128
    290c:	fe 4f       	sbci	r31, 0xFE	; 254
    290e:	90 81       	ld	r25, Z
    2910:	80 e0       	ldi	r24, 0x00	; 0
    2912:	69 2f       	mov	r22, r25
    2914:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <DIO_u8SetPortValue>



	if(Local_u8num1 - Local_u8num2 >= 0 && Local_u8num2 == Local_u8num1-1)
    2918:	80 91 8a 01 	lds	r24, 0x018A
    291c:	28 2f       	mov	r18, r24
    291e:	30 e0       	ldi	r19, 0x00	; 0
    2920:	80 91 8c 01 	lds	r24, 0x018C
    2924:	88 2f       	mov	r24, r24
    2926:	90 e0       	ldi	r25, 0x00	; 0
    2928:	a9 01       	movw	r20, r18
    292a:	48 1b       	sub	r20, r24
    292c:	59 0b       	sbc	r21, r25
    292e:	ca 01       	movw	r24, r20
    2930:	99 23       	and	r25, r25
    2932:	bc f0       	brlt	.+46     	; 0x2962 <SSD_u8Specficfunc+0x2ee>
    2934:	80 91 8c 01 	lds	r24, 0x018C
    2938:	28 2f       	mov	r18, r24
    293a:	30 e0       	ldi	r19, 0x00	; 0
    293c:	80 91 8a 01 	lds	r24, 0x018A
    2940:	88 2f       	mov	r24, r24
    2942:	90 e0       	ldi	r25, 0x00	; 0
    2944:	01 97       	sbiw	r24, 0x01	; 1
    2946:	28 17       	cp	r18, r24
    2948:	39 07       	cpc	r19, r25
    294a:	59 f4       	brne	.+22     	; 0x2962 <SSD_u8Specficfunc+0x2ee>
	{
		Local_u8num1 --;
    294c:	80 91 8a 01 	lds	r24, 0x018A
    2950:	81 50       	subi	r24, 0x01	; 1
    2952:	80 93 8a 01 	sts	0x018A, r24
		Local_u8num2 ++;
    2956:	80 91 8c 01 	lds	r24, 0x018C
    295a:	8f 5f       	subi	r24, 0xFF	; 255
    295c:	80 93 8c 01 	sts	0x018C, r24
    2960:	0a c0       	rjmp	.+20     	; 0x2976 <SSD_u8Specficfunc+0x302>
	}
	else
	{
		Local_u8num1 ++;
    2962:	80 91 8a 01 	lds	r24, 0x018A
    2966:	8f 5f       	subi	r24, 0xFF	; 255
    2968:	80 93 8a 01 	sts	0x018A, r24
		Local_u8num2 --;
    296c:	80 91 8c 01 	lds	r24, 0x018C
    2970:	81 50       	subi	r24, 0x01	; 1
    2972:	80 93 8c 01 	sts	0x018C, r24
	}



}
    2976:	6e 96       	adiw	r28, 0x1e	; 30
    2978:	0f b6       	in	r0, 0x3f	; 63
    297a:	f8 94       	cli
    297c:	de bf       	out	0x3e, r29	; 62
    297e:	0f be       	out	0x3f, r0	; 63
    2980:	cd bf       	out	0x3d, r28	; 61
    2982:	cf 91       	pop	r28
    2984:	df 91       	pop	r29
    2986:	08 95       	ret

00002988 <TIMER0_voidInit>:
#include "TIMER_register.h"

static void (*TIMER0_pvCallBackFunc)(void) = NULL;

void TIMER0_voidInit(void)
{
    2988:	df 93       	push	r29
    298a:	cf 93       	push	r28
    298c:	cd b7       	in	r28, 0x3d	; 61
    298e:	de b7       	in	r29, 0x3e	; 62
	/* Choose fast pwm mode*/
	SET_BIT(TCCR0,TCCR0_WGM00);
    2990:	a3 e5       	ldi	r26, 0x53	; 83
    2992:	b0 e0       	ldi	r27, 0x00	; 0
    2994:	e3 e5       	ldi	r30, 0x53	; 83
    2996:	f0 e0       	ldi	r31, 0x00	; 0
    2998:	80 81       	ld	r24, Z
    299a:	80 64       	ori	r24, 0x40	; 64
    299c:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_WGM01);
    299e:	a3 e5       	ldi	r26, 0x53	; 83
    29a0:	b0 e0       	ldi	r27, 0x00	; 0
    29a2:	e3 e5       	ldi	r30, 0x53	; 83
    29a4:	f0 e0       	ldi	r31, 0x00	; 0
    29a6:	80 81       	ld	r24, Z
    29a8:	88 60       	ori	r24, 0x08	; 8
    29aa:	8c 93       	st	X, r24
//	SET_BIT(TIMSK,TIMSK_OCIE0);
//
//	/*Set compare match value to 250*/
//	OCR0 = 125;

	CLR_BIT(TCCR0,4);
    29ac:	a3 e5       	ldi	r26, 0x53	; 83
    29ae:	b0 e0       	ldi	r27, 0x00	; 0
    29b0:	e3 e5       	ldi	r30, 0x53	; 83
    29b2:	f0 e0       	ldi	r31, 0x00	; 0
    29b4:	80 81       	ld	r24, Z
    29b6:	8f 7e       	andi	r24, 0xEF	; 239
    29b8:	8c 93       	st	X, r24
	SET_BIT(TCCR0,5);
    29ba:	a3 e5       	ldi	r26, 0x53	; 83
    29bc:	b0 e0       	ldi	r27, 0x00	; 0
    29be:	e3 e5       	ldi	r30, 0x53	; 83
    29c0:	f0 e0       	ldi	r31, 0x00	; 0
    29c2:	80 81       	ld	r24, Z
    29c4:	80 62       	ori	r24, 0x20	; 32
    29c6:	8c 93       	st	X, r24
	/*prescaller : Division by 64*/
	SET_BIT(TCCR0,TCCR0_CS00);
    29c8:	a3 e5       	ldi	r26, 0x53	; 83
    29ca:	b0 e0       	ldi	r27, 0x00	; 0
    29cc:	e3 e5       	ldi	r30, 0x53	; 83
    29ce:	f0 e0       	ldi	r31, 0x00	; 0
    29d0:	80 81       	ld	r24, Z
    29d2:	81 60       	ori	r24, 0x01	; 1
    29d4:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_CS01);
    29d6:	a3 e5       	ldi	r26, 0x53	; 83
    29d8:	b0 e0       	ldi	r27, 0x00	; 0
    29da:	e3 e5       	ldi	r30, 0x53	; 83
    29dc:	f0 e0       	ldi	r31, 0x00	; 0
    29de:	80 81       	ld	r24, Z
    29e0:	82 60       	ori	r24, 0x02	; 2
    29e2:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_CS02);
    29e4:	a3 e5       	ldi	r26, 0x53	; 83
    29e6:	b0 e0       	ldi	r27, 0x00	; 0
    29e8:	e3 e5       	ldi	r30, 0x53	; 83
    29ea:	f0 e0       	ldi	r31, 0x00	; 0
    29ec:	80 81       	ld	r24, Z
    29ee:	8e 7f       	andi	r24, 0xFE	; 254
    29f0:	8c 93       	st	X, r24

}
    29f2:	cf 91       	pop	r28
    29f4:	df 91       	pop	r29
    29f6:	08 95       	ret

000029f8 <TIMER0_SetComMatchValue>:

void TIMER0_SetComMatchValue(u8 Copy_u8Value)
{
    29f8:	df 93       	push	r29
    29fa:	cf 93       	push	r28
    29fc:	0f 92       	push	r0
    29fe:	cd b7       	in	r28, 0x3d	; 61
    2a00:	de b7       	in	r29, 0x3e	; 62
    2a02:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Copy_u8Value;
    2a04:	ec e5       	ldi	r30, 0x5C	; 92
    2a06:	f0 e0       	ldi	r31, 0x00	; 0
    2a08:	89 81       	ldd	r24, Y+1	; 0x01
    2a0a:	80 83       	st	Z, r24
}
    2a0c:	0f 90       	pop	r0
    2a0e:	cf 91       	pop	r28
    2a10:	df 91       	pop	r29
    2a12:	08 95       	ret

00002a14 <TIMER0_u8SetCallBack>:

u8 TIMER0_u8SetCallBack(void(*Copy_pvCallBackFunc)(void))
{
    2a14:	df 93       	push	r29
    2a16:	cf 93       	push	r28
    2a18:	00 d0       	rcall	.+0      	; 0x2a1a <TIMER0_u8SetCallBack+0x6>
    2a1a:	0f 92       	push	r0
    2a1c:	cd b7       	in	r28, 0x3d	; 61
    2a1e:	de b7       	in	r29, 0x3e	; 62
    2a20:	9b 83       	std	Y+3, r25	; 0x03
    2a22:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStatus = OK;
    2a24:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvCallBackFunc != NULL)
    2a26:	8a 81       	ldd	r24, Y+2	; 0x02
    2a28:	9b 81       	ldd	r25, Y+3	; 0x03
    2a2a:	00 97       	sbiw	r24, 0x00	; 0
    2a2c:	39 f0       	breq	.+14     	; 0x2a3c <TIMER0_u8SetCallBack+0x28>
	{
		TIMER0_pvCallBackFunc = Copy_pvCallBackFunc;
    2a2e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a30:	9b 81       	ldd	r25, Y+3	; 0x03
    2a32:	90 93 8e 01 	sts	0x018E, r25
    2a36:	80 93 8d 01 	sts	0x018D, r24
    2a3a:	02 c0       	rjmp	.+4      	; 0x2a40 <TIMER0_u8SetCallBack+0x2c>
	}
	else
	{
		Local_u8ErrorStatus = NULL_POINTER;
    2a3c:	82 e0       	ldi	r24, 0x02	; 2
    2a3e:	89 83       	std	Y+1, r24	; 0x01

	}


	return Local_u8ErrorStatus;
    2a40:	89 81       	ldd	r24, Y+1	; 0x01

}
    2a42:	0f 90       	pop	r0
    2a44:	0f 90       	pop	r0
    2a46:	0f 90       	pop	r0
    2a48:	cf 91       	pop	r28
    2a4a:	df 91       	pop	r29
    2a4c:	08 95       	ret

00002a4e <__vector_10>:

void __vector_10 (void) __attribute__((signal));
void __vector_10 (void)
{
    2a4e:	1f 92       	push	r1
    2a50:	0f 92       	push	r0
    2a52:	0f b6       	in	r0, 0x3f	; 63
    2a54:	0f 92       	push	r0
    2a56:	11 24       	eor	r1, r1
    2a58:	2f 93       	push	r18
    2a5a:	3f 93       	push	r19
    2a5c:	4f 93       	push	r20
    2a5e:	5f 93       	push	r21
    2a60:	6f 93       	push	r22
    2a62:	7f 93       	push	r23
    2a64:	8f 93       	push	r24
    2a66:	9f 93       	push	r25
    2a68:	af 93       	push	r26
    2a6a:	bf 93       	push	r27
    2a6c:	ef 93       	push	r30
    2a6e:	ff 93       	push	r31
    2a70:	df 93       	push	r29
    2a72:	cf 93       	push	r28
    2a74:	cd b7       	in	r28, 0x3d	; 61
    2a76:	de b7       	in	r29, 0x3e	; 62
	if(TIMER0_pvCallBackFunc != NULL)
    2a78:	80 91 8d 01 	lds	r24, 0x018D
    2a7c:	90 91 8e 01 	lds	r25, 0x018E
    2a80:	00 97       	sbiw	r24, 0x00	; 0
    2a82:	29 f0       	breq	.+10     	; 0x2a8e <__vector_10+0x40>
	{
		TIMER0_pvCallBackFunc();
    2a84:	e0 91 8d 01 	lds	r30, 0x018D
    2a88:	f0 91 8e 01 	lds	r31, 0x018E
    2a8c:	09 95       	icall
	}
}
    2a8e:	cf 91       	pop	r28
    2a90:	df 91       	pop	r29
    2a92:	ff 91       	pop	r31
    2a94:	ef 91       	pop	r30
    2a96:	bf 91       	pop	r27
    2a98:	af 91       	pop	r26
    2a9a:	9f 91       	pop	r25
    2a9c:	8f 91       	pop	r24
    2a9e:	7f 91       	pop	r23
    2aa0:	6f 91       	pop	r22
    2aa2:	5f 91       	pop	r21
    2aa4:	4f 91       	pop	r20
    2aa6:	3f 91       	pop	r19
    2aa8:	2f 91       	pop	r18
    2aaa:	0f 90       	pop	r0
    2aac:	0f be       	out	0x3f, r0	; 63
    2aae:	0f 90       	pop	r0
    2ab0:	1f 90       	pop	r1
    2ab2:	18 95       	reti

00002ab4 <main>:
/*********************Global Variables *****************************/
//void PWM(void);

/************************ Main Prog *******************************/
void main(void)
{
    2ab4:	df 93       	push	r29
    2ab6:	cf 93       	push	r28
    2ab8:	cd b7       	in	r28, 0x3d	; 61
    2aba:	de b7       	in	r29, 0x3e	; 62
    2abc:	6d 97       	sbiw	r28, 0x1d	; 29
    2abe:	0f b6       	in	r0, 0x3f	; 63
    2ac0:	f8 94       	cli
    2ac2:	de bf       	out	0x3e, r29	; 62
    2ac4:	0f be       	out	0x3f, r0	; 63
    2ac6:	cd bf       	out	0x3d, r28	; 61
	/****************** Local Variables **************************/



	/******************** Driver Init ***************************/
	PORT_VoidInit();
    2ac8:	0e 94 02 10 	call	0x2004	; 0x2004 <PORT_VoidInit>
	CLCD_voidInit();
    2acc:	0e 94 b2 0a 	call	0x1564	; 0x1564 <CLCD_voidInit>
	TIMER0_voidInit();
    2ad0:	0e 94 c4 14 	call	0x2988	; 0x2988 <TIMER0_voidInit>

	u8 Local_u8Counter;

	while(1)
	{
		for(Local_u8Counter=0;Local_u8Counter<255;Local_u8Counter++)
    2ad4:	1d 8e       	std	Y+29, r1	; 0x1d
    2ad6:	78 c0       	rjmp	.+240    	; 0x2bc8 <main+0x114>
		{
			TIMER0_SetComMatchValue(Local_u8Counter);
    2ad8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ada:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <TIMER0_SetComMatchValue>
    2ade:	80 e0       	ldi	r24, 0x00	; 0
    2ae0:	90 e0       	ldi	r25, 0x00	; 0
    2ae2:	a0 e2       	ldi	r26, 0x20	; 32
    2ae4:	b1 e4       	ldi	r27, 0x41	; 65
    2ae6:	89 8f       	std	Y+25, r24	; 0x19
    2ae8:	9a 8f       	std	Y+26, r25	; 0x1a
    2aea:	ab 8f       	std	Y+27, r26	; 0x1b
    2aec:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2aee:	69 8d       	ldd	r22, Y+25	; 0x19
    2af0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2af2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2af4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2af6:	20 e0       	ldi	r18, 0x00	; 0
    2af8:	30 e0       	ldi	r19, 0x00	; 0
    2afa:	4a ef       	ldi	r20, 0xFA	; 250
    2afc:	54 e4       	ldi	r21, 0x44	; 68
    2afe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b02:	dc 01       	movw	r26, r24
    2b04:	cb 01       	movw	r24, r22
    2b06:	8d 8b       	std	Y+21, r24	; 0x15
    2b08:	9e 8b       	std	Y+22, r25	; 0x16
    2b0a:	af 8b       	std	Y+23, r26	; 0x17
    2b0c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b0e:	6d 89       	ldd	r22, Y+21	; 0x15
    2b10:	7e 89       	ldd	r23, Y+22	; 0x16
    2b12:	8f 89       	ldd	r24, Y+23	; 0x17
    2b14:	98 8d       	ldd	r25, Y+24	; 0x18
    2b16:	20 e0       	ldi	r18, 0x00	; 0
    2b18:	30 e0       	ldi	r19, 0x00	; 0
    2b1a:	40 e8       	ldi	r20, 0x80	; 128
    2b1c:	5f e3       	ldi	r21, 0x3F	; 63
    2b1e:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    2b22:	88 23       	and	r24, r24
    2b24:	2c f4       	brge	.+10     	; 0x2b30 <main+0x7c>
		__ticks = 1;
    2b26:	81 e0       	ldi	r24, 0x01	; 1
    2b28:	90 e0       	ldi	r25, 0x00	; 0
    2b2a:	9c 8b       	std	Y+20, r25	; 0x14
    2b2c:	8b 8b       	std	Y+19, r24	; 0x13
    2b2e:	3f c0       	rjmp	.+126    	; 0x2bae <main+0xfa>
	else if (__tmp > 65535)
    2b30:	6d 89       	ldd	r22, Y+21	; 0x15
    2b32:	7e 89       	ldd	r23, Y+22	; 0x16
    2b34:	8f 89       	ldd	r24, Y+23	; 0x17
    2b36:	98 8d       	ldd	r25, Y+24	; 0x18
    2b38:	20 e0       	ldi	r18, 0x00	; 0
    2b3a:	3f ef       	ldi	r19, 0xFF	; 255
    2b3c:	4f e7       	ldi	r20, 0x7F	; 127
    2b3e:	57 e4       	ldi	r21, 0x47	; 71
    2b40:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    2b44:	18 16       	cp	r1, r24
    2b46:	4c f5       	brge	.+82     	; 0x2b9a <main+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b48:	69 8d       	ldd	r22, Y+25	; 0x19
    2b4a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b4c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b4e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b50:	20 e0       	ldi	r18, 0x00	; 0
    2b52:	30 e0       	ldi	r19, 0x00	; 0
    2b54:	40 e2       	ldi	r20, 0x20	; 32
    2b56:	51 e4       	ldi	r21, 0x41	; 65
    2b58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b5c:	dc 01       	movw	r26, r24
    2b5e:	cb 01       	movw	r24, r22
    2b60:	bc 01       	movw	r22, r24
    2b62:	cd 01       	movw	r24, r26
    2b64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b68:	dc 01       	movw	r26, r24
    2b6a:	cb 01       	movw	r24, r22
    2b6c:	9c 8b       	std	Y+20, r25	; 0x14
    2b6e:	8b 8b       	std	Y+19, r24	; 0x13
    2b70:	0f c0       	rjmp	.+30     	; 0x2b90 <main+0xdc>
    2b72:	88 ec       	ldi	r24, 0xC8	; 200
    2b74:	90 e0       	ldi	r25, 0x00	; 0
    2b76:	9a 8b       	std	Y+18, r25	; 0x12
    2b78:	89 8b       	std	Y+17, r24	; 0x11
    2b7a:	89 89       	ldd	r24, Y+17	; 0x11
    2b7c:	9a 89       	ldd	r25, Y+18	; 0x12
    2b7e:	01 97       	sbiw	r24, 0x01	; 1
    2b80:	f1 f7       	brne	.-4      	; 0x2b7e <main+0xca>
    2b82:	9a 8b       	std	Y+18, r25	; 0x12
    2b84:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b86:	8b 89       	ldd	r24, Y+19	; 0x13
    2b88:	9c 89       	ldd	r25, Y+20	; 0x14
    2b8a:	01 97       	sbiw	r24, 0x01	; 1
    2b8c:	9c 8b       	std	Y+20, r25	; 0x14
    2b8e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b90:	8b 89       	ldd	r24, Y+19	; 0x13
    2b92:	9c 89       	ldd	r25, Y+20	; 0x14
    2b94:	00 97       	sbiw	r24, 0x00	; 0
    2b96:	69 f7       	brne	.-38     	; 0x2b72 <main+0xbe>
    2b98:	14 c0       	rjmp	.+40     	; 0x2bc2 <main+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b9a:	6d 89       	ldd	r22, Y+21	; 0x15
    2b9c:	7e 89       	ldd	r23, Y+22	; 0x16
    2b9e:	8f 89       	ldd	r24, Y+23	; 0x17
    2ba0:	98 8d       	ldd	r25, Y+24	; 0x18
    2ba2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ba6:	dc 01       	movw	r26, r24
    2ba8:	cb 01       	movw	r24, r22
    2baa:	9c 8b       	std	Y+20, r25	; 0x14
    2bac:	8b 8b       	std	Y+19, r24	; 0x13
    2bae:	8b 89       	ldd	r24, Y+19	; 0x13
    2bb0:	9c 89       	ldd	r25, Y+20	; 0x14
    2bb2:	98 8b       	std	Y+16, r25	; 0x10
    2bb4:	8f 87       	std	Y+15, r24	; 0x0f
    2bb6:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bb8:	98 89       	ldd	r25, Y+16	; 0x10
    2bba:	01 97       	sbiw	r24, 0x01	; 1
    2bbc:	f1 f7       	brne	.-4      	; 0x2bba <main+0x106>
    2bbe:	98 8b       	std	Y+16, r25	; 0x10
    2bc0:	8f 87       	std	Y+15, r24	; 0x0f

	u8 Local_u8Counter;

	while(1)
	{
		for(Local_u8Counter=0;Local_u8Counter<255;Local_u8Counter++)
    2bc2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2bc4:	8f 5f       	subi	r24, 0xFF	; 255
    2bc6:	8d 8f       	std	Y+29, r24	; 0x1d
    2bc8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2bca:	8f 3f       	cpi	r24, 0xFF	; 255
    2bcc:	09 f0       	breq	.+2      	; 0x2bd0 <main+0x11c>
    2bce:	84 cf       	rjmp	.-248    	; 0x2ad8 <main+0x24>
		{
			TIMER0_SetComMatchValue(Local_u8Counter);
			_delay_ms(10);
		}
		for(Local_u8Counter=255;Local_u8Counter>0;Local_u8Counter--)
    2bd0:	8f ef       	ldi	r24, 0xFF	; 255
    2bd2:	8d 8f       	std	Y+29, r24	; 0x1d
    2bd4:	78 c0       	rjmp	.+240    	; 0x2cc6 <main+0x212>
		{
			TIMER0_SetComMatchValue(Local_u8Counter);
    2bd6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2bd8:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <TIMER0_SetComMatchValue>
    2bdc:	80 e0       	ldi	r24, 0x00	; 0
    2bde:	90 e0       	ldi	r25, 0x00	; 0
    2be0:	a0 e2       	ldi	r26, 0x20	; 32
    2be2:	b1 e4       	ldi	r27, 0x41	; 65
    2be4:	8b 87       	std	Y+11, r24	; 0x0b
    2be6:	9c 87       	std	Y+12, r25	; 0x0c
    2be8:	ad 87       	std	Y+13, r26	; 0x0d
    2bea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bec:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bee:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bf0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bf2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bf4:	20 e0       	ldi	r18, 0x00	; 0
    2bf6:	30 e0       	ldi	r19, 0x00	; 0
    2bf8:	4a ef       	ldi	r20, 0xFA	; 250
    2bfa:	54 e4       	ldi	r21, 0x44	; 68
    2bfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c00:	dc 01       	movw	r26, r24
    2c02:	cb 01       	movw	r24, r22
    2c04:	8f 83       	std	Y+7, r24	; 0x07
    2c06:	98 87       	std	Y+8, r25	; 0x08
    2c08:	a9 87       	std	Y+9, r26	; 0x09
    2c0a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c0c:	6f 81       	ldd	r22, Y+7	; 0x07
    2c0e:	78 85       	ldd	r23, Y+8	; 0x08
    2c10:	89 85       	ldd	r24, Y+9	; 0x09
    2c12:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c14:	20 e0       	ldi	r18, 0x00	; 0
    2c16:	30 e0       	ldi	r19, 0x00	; 0
    2c18:	40 e8       	ldi	r20, 0x80	; 128
    2c1a:	5f e3       	ldi	r21, 0x3F	; 63
    2c1c:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    2c20:	88 23       	and	r24, r24
    2c22:	2c f4       	brge	.+10     	; 0x2c2e <main+0x17a>
		__ticks = 1;
    2c24:	81 e0       	ldi	r24, 0x01	; 1
    2c26:	90 e0       	ldi	r25, 0x00	; 0
    2c28:	9e 83       	std	Y+6, r25	; 0x06
    2c2a:	8d 83       	std	Y+5, r24	; 0x05
    2c2c:	3f c0       	rjmp	.+126    	; 0x2cac <main+0x1f8>
	else if (__tmp > 65535)
    2c2e:	6f 81       	ldd	r22, Y+7	; 0x07
    2c30:	78 85       	ldd	r23, Y+8	; 0x08
    2c32:	89 85       	ldd	r24, Y+9	; 0x09
    2c34:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c36:	20 e0       	ldi	r18, 0x00	; 0
    2c38:	3f ef       	ldi	r19, 0xFF	; 255
    2c3a:	4f e7       	ldi	r20, 0x7F	; 127
    2c3c:	57 e4       	ldi	r21, 0x47	; 71
    2c3e:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    2c42:	18 16       	cp	r1, r24
    2c44:	4c f5       	brge	.+82     	; 0x2c98 <main+0x1e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c46:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c48:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c4a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c4c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c4e:	20 e0       	ldi	r18, 0x00	; 0
    2c50:	30 e0       	ldi	r19, 0x00	; 0
    2c52:	40 e2       	ldi	r20, 0x20	; 32
    2c54:	51 e4       	ldi	r21, 0x41	; 65
    2c56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c5a:	dc 01       	movw	r26, r24
    2c5c:	cb 01       	movw	r24, r22
    2c5e:	bc 01       	movw	r22, r24
    2c60:	cd 01       	movw	r24, r26
    2c62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c66:	dc 01       	movw	r26, r24
    2c68:	cb 01       	movw	r24, r22
    2c6a:	9e 83       	std	Y+6, r25	; 0x06
    2c6c:	8d 83       	std	Y+5, r24	; 0x05
    2c6e:	0f c0       	rjmp	.+30     	; 0x2c8e <main+0x1da>
    2c70:	88 ec       	ldi	r24, 0xC8	; 200
    2c72:	90 e0       	ldi	r25, 0x00	; 0
    2c74:	9c 83       	std	Y+4, r25	; 0x04
    2c76:	8b 83       	std	Y+3, r24	; 0x03
    2c78:	8b 81       	ldd	r24, Y+3	; 0x03
    2c7a:	9c 81       	ldd	r25, Y+4	; 0x04
    2c7c:	01 97       	sbiw	r24, 0x01	; 1
    2c7e:	f1 f7       	brne	.-4      	; 0x2c7c <main+0x1c8>
    2c80:	9c 83       	std	Y+4, r25	; 0x04
    2c82:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c84:	8d 81       	ldd	r24, Y+5	; 0x05
    2c86:	9e 81       	ldd	r25, Y+6	; 0x06
    2c88:	01 97       	sbiw	r24, 0x01	; 1
    2c8a:	9e 83       	std	Y+6, r25	; 0x06
    2c8c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c8e:	8d 81       	ldd	r24, Y+5	; 0x05
    2c90:	9e 81       	ldd	r25, Y+6	; 0x06
    2c92:	00 97       	sbiw	r24, 0x00	; 0
    2c94:	69 f7       	brne	.-38     	; 0x2c70 <main+0x1bc>
    2c96:	14 c0       	rjmp	.+40     	; 0x2cc0 <main+0x20c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c98:	6f 81       	ldd	r22, Y+7	; 0x07
    2c9a:	78 85       	ldd	r23, Y+8	; 0x08
    2c9c:	89 85       	ldd	r24, Y+9	; 0x09
    2c9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ca0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ca4:	dc 01       	movw	r26, r24
    2ca6:	cb 01       	movw	r24, r22
    2ca8:	9e 83       	std	Y+6, r25	; 0x06
    2caa:	8d 83       	std	Y+5, r24	; 0x05
    2cac:	8d 81       	ldd	r24, Y+5	; 0x05
    2cae:	9e 81       	ldd	r25, Y+6	; 0x06
    2cb0:	9a 83       	std	Y+2, r25	; 0x02
    2cb2:	89 83       	std	Y+1, r24	; 0x01
    2cb4:	89 81       	ldd	r24, Y+1	; 0x01
    2cb6:	9a 81       	ldd	r25, Y+2	; 0x02
    2cb8:	01 97       	sbiw	r24, 0x01	; 1
    2cba:	f1 f7       	brne	.-4      	; 0x2cb8 <main+0x204>
    2cbc:	9a 83       	std	Y+2, r25	; 0x02
    2cbe:	89 83       	std	Y+1, r24	; 0x01
		for(Local_u8Counter=0;Local_u8Counter<255;Local_u8Counter++)
		{
			TIMER0_SetComMatchValue(Local_u8Counter);
			_delay_ms(10);
		}
		for(Local_u8Counter=255;Local_u8Counter>0;Local_u8Counter--)
    2cc0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2cc2:	81 50       	subi	r24, 0x01	; 1
    2cc4:	8d 8f       	std	Y+29, r24	; 0x1d
    2cc6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2cc8:	88 23       	and	r24, r24
    2cca:	09 f0       	breq	.+2      	; 0x2cce <main+0x21a>
    2ccc:	84 cf       	rjmp	.-248    	; 0x2bd6 <main+0x122>
    2cce:	02 cf       	rjmp	.-508    	; 0x2ad4 <main+0x20>

00002cd0 <__udivmodqi4>:
    2cd0:	99 1b       	sub	r25, r25
    2cd2:	79 e0       	ldi	r23, 0x09	; 9
    2cd4:	04 c0       	rjmp	.+8      	; 0x2cde <__udivmodqi4_ep>

00002cd6 <__udivmodqi4_loop>:
    2cd6:	99 1f       	adc	r25, r25
    2cd8:	96 17       	cp	r25, r22
    2cda:	08 f0       	brcs	.+2      	; 0x2cde <__udivmodqi4_ep>
    2cdc:	96 1b       	sub	r25, r22

00002cde <__udivmodqi4_ep>:
    2cde:	88 1f       	adc	r24, r24
    2ce0:	7a 95       	dec	r23
    2ce2:	c9 f7       	brne	.-14     	; 0x2cd6 <__udivmodqi4_loop>
    2ce4:	80 95       	com	r24
    2ce6:	08 95       	ret

00002ce8 <__divmodsi4>:
    2ce8:	97 fb       	bst	r25, 7
    2cea:	09 2e       	mov	r0, r25
    2cec:	05 26       	eor	r0, r21
    2cee:	0e d0       	rcall	.+28     	; 0x2d0c <__divmodsi4_neg1>
    2cf0:	57 fd       	sbrc	r21, 7
    2cf2:	04 d0       	rcall	.+8      	; 0x2cfc <__divmodsi4_neg2>
    2cf4:	14 d0       	rcall	.+40     	; 0x2d1e <__udivmodsi4>
    2cf6:	0a d0       	rcall	.+20     	; 0x2d0c <__divmodsi4_neg1>
    2cf8:	00 1c       	adc	r0, r0
    2cfa:	38 f4       	brcc	.+14     	; 0x2d0a <__divmodsi4_exit>

00002cfc <__divmodsi4_neg2>:
    2cfc:	50 95       	com	r21
    2cfe:	40 95       	com	r20
    2d00:	30 95       	com	r19
    2d02:	21 95       	neg	r18
    2d04:	3f 4f       	sbci	r19, 0xFF	; 255
    2d06:	4f 4f       	sbci	r20, 0xFF	; 255
    2d08:	5f 4f       	sbci	r21, 0xFF	; 255

00002d0a <__divmodsi4_exit>:
    2d0a:	08 95       	ret

00002d0c <__divmodsi4_neg1>:
    2d0c:	f6 f7       	brtc	.-4      	; 0x2d0a <__divmodsi4_exit>
    2d0e:	90 95       	com	r25
    2d10:	80 95       	com	r24
    2d12:	70 95       	com	r23
    2d14:	61 95       	neg	r22
    2d16:	7f 4f       	sbci	r23, 0xFF	; 255
    2d18:	8f 4f       	sbci	r24, 0xFF	; 255
    2d1a:	9f 4f       	sbci	r25, 0xFF	; 255
    2d1c:	08 95       	ret

00002d1e <__udivmodsi4>:
    2d1e:	a1 e2       	ldi	r26, 0x21	; 33
    2d20:	1a 2e       	mov	r1, r26
    2d22:	aa 1b       	sub	r26, r26
    2d24:	bb 1b       	sub	r27, r27
    2d26:	fd 01       	movw	r30, r26
    2d28:	0d c0       	rjmp	.+26     	; 0x2d44 <__udivmodsi4_ep>

00002d2a <__udivmodsi4_loop>:
    2d2a:	aa 1f       	adc	r26, r26
    2d2c:	bb 1f       	adc	r27, r27
    2d2e:	ee 1f       	adc	r30, r30
    2d30:	ff 1f       	adc	r31, r31
    2d32:	a2 17       	cp	r26, r18
    2d34:	b3 07       	cpc	r27, r19
    2d36:	e4 07       	cpc	r30, r20
    2d38:	f5 07       	cpc	r31, r21
    2d3a:	20 f0       	brcs	.+8      	; 0x2d44 <__udivmodsi4_ep>
    2d3c:	a2 1b       	sub	r26, r18
    2d3e:	b3 0b       	sbc	r27, r19
    2d40:	e4 0b       	sbc	r30, r20
    2d42:	f5 0b       	sbc	r31, r21

00002d44 <__udivmodsi4_ep>:
    2d44:	66 1f       	adc	r22, r22
    2d46:	77 1f       	adc	r23, r23
    2d48:	88 1f       	adc	r24, r24
    2d4a:	99 1f       	adc	r25, r25
    2d4c:	1a 94       	dec	r1
    2d4e:	69 f7       	brne	.-38     	; 0x2d2a <__udivmodsi4_loop>
    2d50:	60 95       	com	r22
    2d52:	70 95       	com	r23
    2d54:	80 95       	com	r24
    2d56:	90 95       	com	r25
    2d58:	9b 01       	movw	r18, r22
    2d5a:	ac 01       	movw	r20, r24
    2d5c:	bd 01       	movw	r22, r26
    2d5e:	cf 01       	movw	r24, r30
    2d60:	08 95       	ret

00002d62 <__prologue_saves__>:
    2d62:	2f 92       	push	r2
    2d64:	3f 92       	push	r3
    2d66:	4f 92       	push	r4
    2d68:	5f 92       	push	r5
    2d6a:	6f 92       	push	r6
    2d6c:	7f 92       	push	r7
    2d6e:	8f 92       	push	r8
    2d70:	9f 92       	push	r9
    2d72:	af 92       	push	r10
    2d74:	bf 92       	push	r11
    2d76:	cf 92       	push	r12
    2d78:	df 92       	push	r13
    2d7a:	ef 92       	push	r14
    2d7c:	ff 92       	push	r15
    2d7e:	0f 93       	push	r16
    2d80:	1f 93       	push	r17
    2d82:	cf 93       	push	r28
    2d84:	df 93       	push	r29
    2d86:	cd b7       	in	r28, 0x3d	; 61
    2d88:	de b7       	in	r29, 0x3e	; 62
    2d8a:	ca 1b       	sub	r28, r26
    2d8c:	db 0b       	sbc	r29, r27
    2d8e:	0f b6       	in	r0, 0x3f	; 63
    2d90:	f8 94       	cli
    2d92:	de bf       	out	0x3e, r29	; 62
    2d94:	0f be       	out	0x3f, r0	; 63
    2d96:	cd bf       	out	0x3d, r28	; 61
    2d98:	09 94       	ijmp

00002d9a <__epilogue_restores__>:
    2d9a:	2a 88       	ldd	r2, Y+18	; 0x12
    2d9c:	39 88       	ldd	r3, Y+17	; 0x11
    2d9e:	48 88       	ldd	r4, Y+16	; 0x10
    2da0:	5f 84       	ldd	r5, Y+15	; 0x0f
    2da2:	6e 84       	ldd	r6, Y+14	; 0x0e
    2da4:	7d 84       	ldd	r7, Y+13	; 0x0d
    2da6:	8c 84       	ldd	r8, Y+12	; 0x0c
    2da8:	9b 84       	ldd	r9, Y+11	; 0x0b
    2daa:	aa 84       	ldd	r10, Y+10	; 0x0a
    2dac:	b9 84       	ldd	r11, Y+9	; 0x09
    2dae:	c8 84       	ldd	r12, Y+8	; 0x08
    2db0:	df 80       	ldd	r13, Y+7	; 0x07
    2db2:	ee 80       	ldd	r14, Y+6	; 0x06
    2db4:	fd 80       	ldd	r15, Y+5	; 0x05
    2db6:	0c 81       	ldd	r16, Y+4	; 0x04
    2db8:	1b 81       	ldd	r17, Y+3	; 0x03
    2dba:	aa 81       	ldd	r26, Y+2	; 0x02
    2dbc:	b9 81       	ldd	r27, Y+1	; 0x01
    2dbe:	ce 0f       	add	r28, r30
    2dc0:	d1 1d       	adc	r29, r1
    2dc2:	0f b6       	in	r0, 0x3f	; 63
    2dc4:	f8 94       	cli
    2dc6:	de bf       	out	0x3e, r29	; 62
    2dc8:	0f be       	out	0x3f, r0	; 63
    2dca:	cd bf       	out	0x3d, r28	; 61
    2dcc:	ed 01       	movw	r28, r26
    2dce:	08 95       	ret

00002dd0 <_exit>:
    2dd0:	f8 94       	cli

00002dd2 <__stop_program>:
    2dd2:	ff cf       	rjmp	.-2      	; 0x2dd2 <__stop_program>
