
FreeRTOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000046d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000122  00800060  000046d6  0000476a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000480  00800182  00800182  0000488c  2**0
                  ALLOC
  3 .stab         00005868  00000000  00000000  0000488c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002fb8  00000000  00000000  0000a0f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000d0ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001ef  00000000  00000000  0000d24c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000228f  00000000  00000000  0000d43b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000012bb  00000000  00000000  0000f6ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000010d6  00000000  00000000  00010985  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  00011a5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c6  00000000  00000000  00011c1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000094a  00000000  00000000  00011ee2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0001282c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 67 17 	jmp	0x2ece	; 0x2ece <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ed       	ldi	r30, 0xD6	; 214
      68:	f6 e4       	ldi	r31, 0x46	; 70
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 38       	cpi	r26, 0x82	; 130
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	16 e0       	ldi	r17, 0x06	; 6
      78:	a2 e8       	ldi	r26, 0x82	; 130
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 30       	cpi	r26, 0x02	; 2
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 44 14 	call	0x2888	; 0x2888 <main>
      8a:	0c 94 69 23 	jmp	0x46d2	; 0x46d2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 37 04 	call	0x86e	; 0x86e <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 37 04 	call	0x86e	; 0x86e <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 13 23 	jmp	0x4626	; 0x4626 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a7 e7       	ldi	r26, 0x77	; 119
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 2f 23 	jmp	0x465e	; 0x465e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 1f 23 	jmp	0x463e	; 0x463e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 af 05 	call	0xb5e	; 0xb5e <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 af 05 	call	0xb5e	; 0xb5e <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 da 04 	call	0x9b4	; 0x9b4 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 3b 23 	jmp	0x4676	; 0x4676 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 1f 23 	jmp	0x463e	; 0x463e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 af 05 	call	0xb5e	; 0xb5e <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 af 05 	call	0xb5e	; 0xb5e <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 da 04 	call	0x9b4	; 0x9b4 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 3b 23 	jmp	0x4676	; 0x4676 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 13 23 	jmp	0x4626	; 0x4626 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 af 05 	call	0xb5e	; 0xb5e <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 af 05 	call	0xb5e	; 0xb5e <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	87 e7       	ldi	r24, 0x77	; 119
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 da 04 	call	0x9b4	; 0x9b4 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 2f 23 	jmp	0x465e	; 0x465e <__epilogue_restores__>

00000632 <__eqsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 1f 23 	jmp	0x463e	; 0x463e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 af 05 	call	0xb5e	; 0xb5e <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 af 05 	call	0xb5e	; 0xb5e <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__eqsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__eqsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 27 06 	call	0xc4e	; 0xc4e <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__eqsf2+0x58>
     688:	81 e0       	ldi	r24, 0x01	; 1
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 3b 23 	jmp	0x4676	; 0x4676 <__epilogue_restores__+0x18>

00000692 <__gtsf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 1f 23 	jmp	0x463e	; 0x463e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 af 05 	call	0xb5e	; 0xb5e <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 af 05 	call	0xb5e	; 0xb5e <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gtsf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gtsf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 27 06 	call	0xc4e	; 0xc4e <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gtsf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 3b 23 	jmp	0x4676	; 0x4676 <__epilogue_restores__+0x18>

000006f2 <__gesf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 1f 23 	jmp	0x463e	; 0x463e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 af 05 	call	0xb5e	; 0xb5e <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 af 05 	call	0xb5e	; 0xb5e <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__gesf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__gesf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 27 06 	call	0xc4e	; 0xc4e <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__gesf2+0x58>
     748:	8f ef       	ldi	r24, 0xFF	; 255
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 3b 23 	jmp	0x4676	; 0x4676 <__epilogue_restores__+0x18>

00000752 <__ltsf2>:
     752:	a8 e1       	ldi	r26, 0x18	; 24
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 1f 23 	jmp	0x463e	; 0x463e <__prologue_saves__+0x18>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	2d 83       	std	Y+5, r18	; 0x05
     768:	3e 83       	std	Y+6, r19	; 0x06
     76a:	4f 83       	std	Y+7, r20	; 0x07
     76c:	58 87       	std	Y+8, r21	; 0x08
     76e:	89 e0       	ldi	r24, 0x09	; 9
     770:	e8 2e       	mov	r14, r24
     772:	f1 2c       	mov	r15, r1
     774:	ec 0e       	add	r14, r28
     776:	fd 1e       	adc	r15, r29
     778:	ce 01       	movw	r24, r28
     77a:	01 96       	adiw	r24, 0x01	; 1
     77c:	b7 01       	movw	r22, r14
     77e:	0e 94 af 05 	call	0xb5e	; 0xb5e <__unpack_f>
     782:	8e 01       	movw	r16, r28
     784:	0f 5e       	subi	r16, 0xEF	; 239
     786:	1f 4f       	sbci	r17, 0xFF	; 255
     788:	ce 01       	movw	r24, r28
     78a:	05 96       	adiw	r24, 0x05	; 5
     78c:	b8 01       	movw	r22, r16
     78e:	0e 94 af 05 	call	0xb5e	; 0xb5e <__unpack_f>
     792:	89 85       	ldd	r24, Y+9	; 0x09
     794:	82 30       	cpi	r24, 0x02	; 2
     796:	40 f0       	brcs	.+16     	; 0x7a8 <__ltsf2+0x56>
     798:	89 89       	ldd	r24, Y+17	; 0x11
     79a:	82 30       	cpi	r24, 0x02	; 2
     79c:	28 f0       	brcs	.+10     	; 0x7a8 <__ltsf2+0x56>
     79e:	c7 01       	movw	r24, r14
     7a0:	b8 01       	movw	r22, r16
     7a2:	0e 94 27 06 	call	0xc4e	; 0xc4e <__fpcmp_parts_f>
     7a6:	01 c0       	rjmp	.+2      	; 0x7aa <__ltsf2+0x58>
     7a8:	81 e0       	ldi	r24, 0x01	; 1
     7aa:	68 96       	adiw	r28, 0x18	; 24
     7ac:	e6 e0       	ldi	r30, 0x06	; 6
     7ae:	0c 94 3b 23 	jmp	0x4676	; 0x4676 <__epilogue_restores__+0x18>

000007b2 <__floatsisf>:
     7b2:	a8 e0       	ldi	r26, 0x08	; 8
     7b4:	b0 e0       	ldi	r27, 0x00	; 0
     7b6:	ef ed       	ldi	r30, 0xDF	; 223
     7b8:	f3 e0       	ldi	r31, 0x03	; 3
     7ba:	0c 94 1c 23 	jmp	0x4638	; 0x4638 <__prologue_saves__+0x12>
     7be:	9b 01       	movw	r18, r22
     7c0:	ac 01       	movw	r20, r24
     7c2:	83 e0       	ldi	r24, 0x03	; 3
     7c4:	89 83       	std	Y+1, r24	; 0x01
     7c6:	da 01       	movw	r26, r20
     7c8:	c9 01       	movw	r24, r18
     7ca:	88 27       	eor	r24, r24
     7cc:	b7 fd       	sbrc	r27, 7
     7ce:	83 95       	inc	r24
     7d0:	99 27       	eor	r25, r25
     7d2:	aa 27       	eor	r26, r26
     7d4:	bb 27       	eor	r27, r27
     7d6:	b8 2e       	mov	r11, r24
     7d8:	21 15       	cp	r18, r1
     7da:	31 05       	cpc	r19, r1
     7dc:	41 05       	cpc	r20, r1
     7de:	51 05       	cpc	r21, r1
     7e0:	19 f4       	brne	.+6      	; 0x7e8 <__floatsisf+0x36>
     7e2:	82 e0       	ldi	r24, 0x02	; 2
     7e4:	89 83       	std	Y+1, r24	; 0x01
     7e6:	3a c0       	rjmp	.+116    	; 0x85c <__floatsisf+0xaa>
     7e8:	88 23       	and	r24, r24
     7ea:	a9 f0       	breq	.+42     	; 0x816 <__floatsisf+0x64>
     7ec:	20 30       	cpi	r18, 0x00	; 0
     7ee:	80 e0       	ldi	r24, 0x00	; 0
     7f0:	38 07       	cpc	r19, r24
     7f2:	80 e0       	ldi	r24, 0x00	; 0
     7f4:	48 07       	cpc	r20, r24
     7f6:	80 e8       	ldi	r24, 0x80	; 128
     7f8:	58 07       	cpc	r21, r24
     7fa:	29 f4       	brne	.+10     	; 0x806 <__floatsisf+0x54>
     7fc:	60 e0       	ldi	r22, 0x00	; 0
     7fe:	70 e0       	ldi	r23, 0x00	; 0
     800:	80 e0       	ldi	r24, 0x00	; 0
     802:	9f ec       	ldi	r25, 0xCF	; 207
     804:	30 c0       	rjmp	.+96     	; 0x866 <__stack+0x7>
     806:	ee 24       	eor	r14, r14
     808:	ff 24       	eor	r15, r15
     80a:	87 01       	movw	r16, r14
     80c:	e2 1a       	sub	r14, r18
     80e:	f3 0a       	sbc	r15, r19
     810:	04 0b       	sbc	r16, r20
     812:	15 0b       	sbc	r17, r21
     814:	02 c0       	rjmp	.+4      	; 0x81a <__floatsisf+0x68>
     816:	79 01       	movw	r14, r18
     818:	8a 01       	movw	r16, r20
     81a:	8e e1       	ldi	r24, 0x1E	; 30
     81c:	c8 2e       	mov	r12, r24
     81e:	d1 2c       	mov	r13, r1
     820:	dc 82       	std	Y+4, r13	; 0x04
     822:	cb 82       	std	Y+3, r12	; 0x03
     824:	ed 82       	std	Y+5, r14	; 0x05
     826:	fe 82       	std	Y+6, r15	; 0x06
     828:	0f 83       	std	Y+7, r16	; 0x07
     82a:	18 87       	std	Y+8, r17	; 0x08
     82c:	c8 01       	movw	r24, r16
     82e:	b7 01       	movw	r22, r14
     830:	0e 94 8b 04 	call	0x916	; 0x916 <__clzsi2>
     834:	01 97       	sbiw	r24, 0x01	; 1
     836:	18 16       	cp	r1, r24
     838:	19 06       	cpc	r1, r25
     83a:	84 f4       	brge	.+32     	; 0x85c <__floatsisf+0xaa>
     83c:	08 2e       	mov	r0, r24
     83e:	04 c0       	rjmp	.+8      	; 0x848 <__floatsisf+0x96>
     840:	ee 0c       	add	r14, r14
     842:	ff 1c       	adc	r15, r15
     844:	00 1f       	adc	r16, r16
     846:	11 1f       	adc	r17, r17
     848:	0a 94       	dec	r0
     84a:	d2 f7       	brpl	.-12     	; 0x840 <__floatsisf+0x8e>
     84c:	ed 82       	std	Y+5, r14	; 0x05
     84e:	fe 82       	std	Y+6, r15	; 0x06
     850:	0f 83       	std	Y+7, r16	; 0x07
     852:	18 87       	std	Y+8, r17	; 0x08
     854:	c8 1a       	sub	r12, r24
     856:	d9 0a       	sbc	r13, r25
     858:	dc 82       	std	Y+4, r13	; 0x04
     85a:	cb 82       	std	Y+3, r12	; 0x03
     85c:	ba 82       	std	Y+2, r11	; 0x02
     85e:	ce 01       	movw	r24, r28
     860:	01 96       	adiw	r24, 0x01	; 1
     862:	0e 94 da 04 	call	0x9b4	; 0x9b4 <__pack_f>
     866:	28 96       	adiw	r28, 0x08	; 8
     868:	e9 e0       	ldi	r30, 0x09	; 9
     86a:	0c 94 38 23 	jmp	0x4670	; 0x4670 <__epilogue_restores__+0x12>

0000086e <__fixsfsi>:
     86e:	ac e0       	ldi	r26, 0x0C	; 12
     870:	b0 e0       	ldi	r27, 0x00	; 0
     872:	ed e3       	ldi	r30, 0x3D	; 61
     874:	f4 e0       	ldi	r31, 0x04	; 4
     876:	0c 94 23 23 	jmp	0x4646	; 0x4646 <__prologue_saves__+0x20>
     87a:	69 83       	std	Y+1, r22	; 0x01
     87c:	7a 83       	std	Y+2, r23	; 0x02
     87e:	8b 83       	std	Y+3, r24	; 0x03
     880:	9c 83       	std	Y+4, r25	; 0x04
     882:	ce 01       	movw	r24, r28
     884:	01 96       	adiw	r24, 0x01	; 1
     886:	be 01       	movw	r22, r28
     888:	6b 5f       	subi	r22, 0xFB	; 251
     88a:	7f 4f       	sbci	r23, 0xFF	; 255
     88c:	0e 94 af 05 	call	0xb5e	; 0xb5e <__unpack_f>
     890:	8d 81       	ldd	r24, Y+5	; 0x05
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	61 f1       	breq	.+88     	; 0x8ee <__fixsfsi+0x80>
     896:	82 30       	cpi	r24, 0x02	; 2
     898:	50 f1       	brcs	.+84     	; 0x8ee <__fixsfsi+0x80>
     89a:	84 30       	cpi	r24, 0x04	; 4
     89c:	21 f4       	brne	.+8      	; 0x8a6 <__fixsfsi+0x38>
     89e:	8e 81       	ldd	r24, Y+6	; 0x06
     8a0:	88 23       	and	r24, r24
     8a2:	51 f1       	breq	.+84     	; 0x8f8 <__fixsfsi+0x8a>
     8a4:	2e c0       	rjmp	.+92     	; 0x902 <__fixsfsi+0x94>
     8a6:	2f 81       	ldd	r18, Y+7	; 0x07
     8a8:	38 85       	ldd	r19, Y+8	; 0x08
     8aa:	37 fd       	sbrc	r19, 7
     8ac:	20 c0       	rjmp	.+64     	; 0x8ee <__fixsfsi+0x80>
     8ae:	6e 81       	ldd	r22, Y+6	; 0x06
     8b0:	2f 31       	cpi	r18, 0x1F	; 31
     8b2:	31 05       	cpc	r19, r1
     8b4:	1c f0       	brlt	.+6      	; 0x8bc <__fixsfsi+0x4e>
     8b6:	66 23       	and	r22, r22
     8b8:	f9 f0       	breq	.+62     	; 0x8f8 <__fixsfsi+0x8a>
     8ba:	23 c0       	rjmp	.+70     	; 0x902 <__fixsfsi+0x94>
     8bc:	8e e1       	ldi	r24, 0x1E	; 30
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	82 1b       	sub	r24, r18
     8c2:	93 0b       	sbc	r25, r19
     8c4:	29 85       	ldd	r18, Y+9	; 0x09
     8c6:	3a 85       	ldd	r19, Y+10	; 0x0a
     8c8:	4b 85       	ldd	r20, Y+11	; 0x0b
     8ca:	5c 85       	ldd	r21, Y+12	; 0x0c
     8cc:	04 c0       	rjmp	.+8      	; 0x8d6 <__fixsfsi+0x68>
     8ce:	56 95       	lsr	r21
     8d0:	47 95       	ror	r20
     8d2:	37 95       	ror	r19
     8d4:	27 95       	ror	r18
     8d6:	8a 95       	dec	r24
     8d8:	d2 f7       	brpl	.-12     	; 0x8ce <__fixsfsi+0x60>
     8da:	66 23       	and	r22, r22
     8dc:	b1 f0       	breq	.+44     	; 0x90a <__fixsfsi+0x9c>
     8de:	50 95       	com	r21
     8e0:	40 95       	com	r20
     8e2:	30 95       	com	r19
     8e4:	21 95       	neg	r18
     8e6:	3f 4f       	sbci	r19, 0xFF	; 255
     8e8:	4f 4f       	sbci	r20, 0xFF	; 255
     8ea:	5f 4f       	sbci	r21, 0xFF	; 255
     8ec:	0e c0       	rjmp	.+28     	; 0x90a <__fixsfsi+0x9c>
     8ee:	20 e0       	ldi	r18, 0x00	; 0
     8f0:	30 e0       	ldi	r19, 0x00	; 0
     8f2:	40 e0       	ldi	r20, 0x00	; 0
     8f4:	50 e0       	ldi	r21, 0x00	; 0
     8f6:	09 c0       	rjmp	.+18     	; 0x90a <__fixsfsi+0x9c>
     8f8:	2f ef       	ldi	r18, 0xFF	; 255
     8fa:	3f ef       	ldi	r19, 0xFF	; 255
     8fc:	4f ef       	ldi	r20, 0xFF	; 255
     8fe:	5f e7       	ldi	r21, 0x7F	; 127
     900:	04 c0       	rjmp	.+8      	; 0x90a <__fixsfsi+0x9c>
     902:	20 e0       	ldi	r18, 0x00	; 0
     904:	30 e0       	ldi	r19, 0x00	; 0
     906:	40 e0       	ldi	r20, 0x00	; 0
     908:	50 e8       	ldi	r21, 0x80	; 128
     90a:	b9 01       	movw	r22, r18
     90c:	ca 01       	movw	r24, r20
     90e:	2c 96       	adiw	r28, 0x0c	; 12
     910:	e2 e0       	ldi	r30, 0x02	; 2
     912:	0c 94 3f 23 	jmp	0x467e	; 0x467e <__epilogue_restores__+0x20>

00000916 <__clzsi2>:
     916:	ef 92       	push	r14
     918:	ff 92       	push	r15
     91a:	0f 93       	push	r16
     91c:	1f 93       	push	r17
     91e:	7b 01       	movw	r14, r22
     920:	8c 01       	movw	r16, r24
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	e8 16       	cp	r14, r24
     926:	80 e0       	ldi	r24, 0x00	; 0
     928:	f8 06       	cpc	r15, r24
     92a:	81 e0       	ldi	r24, 0x01	; 1
     92c:	08 07       	cpc	r16, r24
     92e:	80 e0       	ldi	r24, 0x00	; 0
     930:	18 07       	cpc	r17, r24
     932:	88 f4       	brcc	.+34     	; 0x956 <__clzsi2+0x40>
     934:	8f ef       	ldi	r24, 0xFF	; 255
     936:	e8 16       	cp	r14, r24
     938:	f1 04       	cpc	r15, r1
     93a:	01 05       	cpc	r16, r1
     93c:	11 05       	cpc	r17, r1
     93e:	31 f0       	breq	.+12     	; 0x94c <__clzsi2+0x36>
     940:	28 f0       	brcs	.+10     	; 0x94c <__clzsi2+0x36>
     942:	88 e0       	ldi	r24, 0x08	; 8
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	a0 e0       	ldi	r26, 0x00	; 0
     948:	b0 e0       	ldi	r27, 0x00	; 0
     94a:	17 c0       	rjmp	.+46     	; 0x97a <__clzsi2+0x64>
     94c:	80 e0       	ldi	r24, 0x00	; 0
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	a0 e0       	ldi	r26, 0x00	; 0
     952:	b0 e0       	ldi	r27, 0x00	; 0
     954:	12 c0       	rjmp	.+36     	; 0x97a <__clzsi2+0x64>
     956:	80 e0       	ldi	r24, 0x00	; 0
     958:	e8 16       	cp	r14, r24
     95a:	80 e0       	ldi	r24, 0x00	; 0
     95c:	f8 06       	cpc	r15, r24
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	08 07       	cpc	r16, r24
     962:	81 e0       	ldi	r24, 0x01	; 1
     964:	18 07       	cpc	r17, r24
     966:	28 f0       	brcs	.+10     	; 0x972 <__clzsi2+0x5c>
     968:	88 e1       	ldi	r24, 0x18	; 24
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	a0 e0       	ldi	r26, 0x00	; 0
     96e:	b0 e0       	ldi	r27, 0x00	; 0
     970:	04 c0       	rjmp	.+8      	; 0x97a <__clzsi2+0x64>
     972:	80 e1       	ldi	r24, 0x10	; 16
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	a0 e0       	ldi	r26, 0x00	; 0
     978:	b0 e0       	ldi	r27, 0x00	; 0
     97a:	20 e2       	ldi	r18, 0x20	; 32
     97c:	30 e0       	ldi	r19, 0x00	; 0
     97e:	40 e0       	ldi	r20, 0x00	; 0
     980:	50 e0       	ldi	r21, 0x00	; 0
     982:	28 1b       	sub	r18, r24
     984:	39 0b       	sbc	r19, r25
     986:	4a 0b       	sbc	r20, r26
     988:	5b 0b       	sbc	r21, r27
     98a:	04 c0       	rjmp	.+8      	; 0x994 <__clzsi2+0x7e>
     98c:	16 95       	lsr	r17
     98e:	07 95       	ror	r16
     990:	f7 94       	ror	r15
     992:	e7 94       	ror	r14
     994:	8a 95       	dec	r24
     996:	d2 f7       	brpl	.-12     	; 0x98c <__clzsi2+0x76>
     998:	f7 01       	movw	r30, r14
     99a:	e1 58       	subi	r30, 0x81	; 129
     99c:	ff 4f       	sbci	r31, 0xFF	; 255
     99e:	80 81       	ld	r24, Z
     9a0:	28 1b       	sub	r18, r24
     9a2:	31 09       	sbc	r19, r1
     9a4:	41 09       	sbc	r20, r1
     9a6:	51 09       	sbc	r21, r1
     9a8:	c9 01       	movw	r24, r18
     9aa:	1f 91       	pop	r17
     9ac:	0f 91       	pop	r16
     9ae:	ff 90       	pop	r15
     9b0:	ef 90       	pop	r14
     9b2:	08 95       	ret

000009b4 <__pack_f>:
     9b4:	df 92       	push	r13
     9b6:	ef 92       	push	r14
     9b8:	ff 92       	push	r15
     9ba:	0f 93       	push	r16
     9bc:	1f 93       	push	r17
     9be:	fc 01       	movw	r30, r24
     9c0:	e4 80       	ldd	r14, Z+4	; 0x04
     9c2:	f5 80       	ldd	r15, Z+5	; 0x05
     9c4:	06 81       	ldd	r16, Z+6	; 0x06
     9c6:	17 81       	ldd	r17, Z+7	; 0x07
     9c8:	d1 80       	ldd	r13, Z+1	; 0x01
     9ca:	80 81       	ld	r24, Z
     9cc:	82 30       	cpi	r24, 0x02	; 2
     9ce:	48 f4       	brcc	.+18     	; 0x9e2 <__pack_f+0x2e>
     9d0:	80 e0       	ldi	r24, 0x00	; 0
     9d2:	90 e0       	ldi	r25, 0x00	; 0
     9d4:	a0 e1       	ldi	r26, 0x10	; 16
     9d6:	b0 e0       	ldi	r27, 0x00	; 0
     9d8:	e8 2a       	or	r14, r24
     9da:	f9 2a       	or	r15, r25
     9dc:	0a 2b       	or	r16, r26
     9de:	1b 2b       	or	r17, r27
     9e0:	a5 c0       	rjmp	.+330    	; 0xb2c <__pack_f+0x178>
     9e2:	84 30       	cpi	r24, 0x04	; 4
     9e4:	09 f4       	brne	.+2      	; 0x9e8 <__pack_f+0x34>
     9e6:	9f c0       	rjmp	.+318    	; 0xb26 <__pack_f+0x172>
     9e8:	82 30       	cpi	r24, 0x02	; 2
     9ea:	21 f4       	brne	.+8      	; 0x9f4 <__pack_f+0x40>
     9ec:	ee 24       	eor	r14, r14
     9ee:	ff 24       	eor	r15, r15
     9f0:	87 01       	movw	r16, r14
     9f2:	05 c0       	rjmp	.+10     	; 0x9fe <__pack_f+0x4a>
     9f4:	e1 14       	cp	r14, r1
     9f6:	f1 04       	cpc	r15, r1
     9f8:	01 05       	cpc	r16, r1
     9fa:	11 05       	cpc	r17, r1
     9fc:	19 f4       	brne	.+6      	; 0xa04 <__pack_f+0x50>
     9fe:	e0 e0       	ldi	r30, 0x00	; 0
     a00:	f0 e0       	ldi	r31, 0x00	; 0
     a02:	96 c0       	rjmp	.+300    	; 0xb30 <__pack_f+0x17c>
     a04:	62 81       	ldd	r22, Z+2	; 0x02
     a06:	73 81       	ldd	r23, Z+3	; 0x03
     a08:	9f ef       	ldi	r25, 0xFF	; 255
     a0a:	62 38       	cpi	r22, 0x82	; 130
     a0c:	79 07       	cpc	r23, r25
     a0e:	0c f0       	brlt	.+2      	; 0xa12 <__pack_f+0x5e>
     a10:	5b c0       	rjmp	.+182    	; 0xac8 <__pack_f+0x114>
     a12:	22 e8       	ldi	r18, 0x82	; 130
     a14:	3f ef       	ldi	r19, 0xFF	; 255
     a16:	26 1b       	sub	r18, r22
     a18:	37 0b       	sbc	r19, r23
     a1a:	2a 31       	cpi	r18, 0x1A	; 26
     a1c:	31 05       	cpc	r19, r1
     a1e:	2c f0       	brlt	.+10     	; 0xa2a <__pack_f+0x76>
     a20:	20 e0       	ldi	r18, 0x00	; 0
     a22:	30 e0       	ldi	r19, 0x00	; 0
     a24:	40 e0       	ldi	r20, 0x00	; 0
     a26:	50 e0       	ldi	r21, 0x00	; 0
     a28:	2a c0       	rjmp	.+84     	; 0xa7e <__pack_f+0xca>
     a2a:	b8 01       	movw	r22, r16
     a2c:	a7 01       	movw	r20, r14
     a2e:	02 2e       	mov	r0, r18
     a30:	04 c0       	rjmp	.+8      	; 0xa3a <__pack_f+0x86>
     a32:	76 95       	lsr	r23
     a34:	67 95       	ror	r22
     a36:	57 95       	ror	r21
     a38:	47 95       	ror	r20
     a3a:	0a 94       	dec	r0
     a3c:	d2 f7       	brpl	.-12     	; 0xa32 <__pack_f+0x7e>
     a3e:	81 e0       	ldi	r24, 0x01	; 1
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	b0 e0       	ldi	r27, 0x00	; 0
     a46:	04 c0       	rjmp	.+8      	; 0xa50 <__pack_f+0x9c>
     a48:	88 0f       	add	r24, r24
     a4a:	99 1f       	adc	r25, r25
     a4c:	aa 1f       	adc	r26, r26
     a4e:	bb 1f       	adc	r27, r27
     a50:	2a 95       	dec	r18
     a52:	d2 f7       	brpl	.-12     	; 0xa48 <__pack_f+0x94>
     a54:	01 97       	sbiw	r24, 0x01	; 1
     a56:	a1 09       	sbc	r26, r1
     a58:	b1 09       	sbc	r27, r1
     a5a:	8e 21       	and	r24, r14
     a5c:	9f 21       	and	r25, r15
     a5e:	a0 23       	and	r26, r16
     a60:	b1 23       	and	r27, r17
     a62:	00 97       	sbiw	r24, 0x00	; 0
     a64:	a1 05       	cpc	r26, r1
     a66:	b1 05       	cpc	r27, r1
     a68:	21 f0       	breq	.+8      	; 0xa72 <__pack_f+0xbe>
     a6a:	81 e0       	ldi	r24, 0x01	; 1
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	9a 01       	movw	r18, r20
     a74:	ab 01       	movw	r20, r22
     a76:	28 2b       	or	r18, r24
     a78:	39 2b       	or	r19, r25
     a7a:	4a 2b       	or	r20, r26
     a7c:	5b 2b       	or	r21, r27
     a7e:	da 01       	movw	r26, r20
     a80:	c9 01       	movw	r24, r18
     a82:	8f 77       	andi	r24, 0x7F	; 127
     a84:	90 70       	andi	r25, 0x00	; 0
     a86:	a0 70       	andi	r26, 0x00	; 0
     a88:	b0 70       	andi	r27, 0x00	; 0
     a8a:	80 34       	cpi	r24, 0x40	; 64
     a8c:	91 05       	cpc	r25, r1
     a8e:	a1 05       	cpc	r26, r1
     a90:	b1 05       	cpc	r27, r1
     a92:	39 f4       	brne	.+14     	; 0xaa2 <__pack_f+0xee>
     a94:	27 ff       	sbrs	r18, 7
     a96:	09 c0       	rjmp	.+18     	; 0xaaa <__pack_f+0xf6>
     a98:	20 5c       	subi	r18, 0xC0	; 192
     a9a:	3f 4f       	sbci	r19, 0xFF	; 255
     a9c:	4f 4f       	sbci	r20, 0xFF	; 255
     a9e:	5f 4f       	sbci	r21, 0xFF	; 255
     aa0:	04 c0       	rjmp	.+8      	; 0xaaa <__pack_f+0xf6>
     aa2:	21 5c       	subi	r18, 0xC1	; 193
     aa4:	3f 4f       	sbci	r19, 0xFF	; 255
     aa6:	4f 4f       	sbci	r20, 0xFF	; 255
     aa8:	5f 4f       	sbci	r21, 0xFF	; 255
     aaa:	e0 e0       	ldi	r30, 0x00	; 0
     aac:	f0 e0       	ldi	r31, 0x00	; 0
     aae:	20 30       	cpi	r18, 0x00	; 0
     ab0:	a0 e0       	ldi	r26, 0x00	; 0
     ab2:	3a 07       	cpc	r19, r26
     ab4:	a0 e0       	ldi	r26, 0x00	; 0
     ab6:	4a 07       	cpc	r20, r26
     ab8:	a0 e4       	ldi	r26, 0x40	; 64
     aba:	5a 07       	cpc	r21, r26
     abc:	10 f0       	brcs	.+4      	; 0xac2 <__pack_f+0x10e>
     abe:	e1 e0       	ldi	r30, 0x01	; 1
     ac0:	f0 e0       	ldi	r31, 0x00	; 0
     ac2:	79 01       	movw	r14, r18
     ac4:	8a 01       	movw	r16, r20
     ac6:	27 c0       	rjmp	.+78     	; 0xb16 <__pack_f+0x162>
     ac8:	60 38       	cpi	r22, 0x80	; 128
     aca:	71 05       	cpc	r23, r1
     acc:	64 f5       	brge	.+88     	; 0xb26 <__pack_f+0x172>
     ace:	fb 01       	movw	r30, r22
     ad0:	e1 58       	subi	r30, 0x81	; 129
     ad2:	ff 4f       	sbci	r31, 0xFF	; 255
     ad4:	d8 01       	movw	r26, r16
     ad6:	c7 01       	movw	r24, r14
     ad8:	8f 77       	andi	r24, 0x7F	; 127
     ada:	90 70       	andi	r25, 0x00	; 0
     adc:	a0 70       	andi	r26, 0x00	; 0
     ade:	b0 70       	andi	r27, 0x00	; 0
     ae0:	80 34       	cpi	r24, 0x40	; 64
     ae2:	91 05       	cpc	r25, r1
     ae4:	a1 05       	cpc	r26, r1
     ae6:	b1 05       	cpc	r27, r1
     ae8:	39 f4       	brne	.+14     	; 0xaf8 <__pack_f+0x144>
     aea:	e7 fe       	sbrs	r14, 7
     aec:	0d c0       	rjmp	.+26     	; 0xb08 <__pack_f+0x154>
     aee:	80 e4       	ldi	r24, 0x40	; 64
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	a0 e0       	ldi	r26, 0x00	; 0
     af4:	b0 e0       	ldi	r27, 0x00	; 0
     af6:	04 c0       	rjmp	.+8      	; 0xb00 <__pack_f+0x14c>
     af8:	8f e3       	ldi	r24, 0x3F	; 63
     afa:	90 e0       	ldi	r25, 0x00	; 0
     afc:	a0 e0       	ldi	r26, 0x00	; 0
     afe:	b0 e0       	ldi	r27, 0x00	; 0
     b00:	e8 0e       	add	r14, r24
     b02:	f9 1e       	adc	r15, r25
     b04:	0a 1f       	adc	r16, r26
     b06:	1b 1f       	adc	r17, r27
     b08:	17 ff       	sbrs	r17, 7
     b0a:	05 c0       	rjmp	.+10     	; 0xb16 <__pack_f+0x162>
     b0c:	16 95       	lsr	r17
     b0e:	07 95       	ror	r16
     b10:	f7 94       	ror	r15
     b12:	e7 94       	ror	r14
     b14:	31 96       	adiw	r30, 0x01	; 1
     b16:	87 e0       	ldi	r24, 0x07	; 7
     b18:	16 95       	lsr	r17
     b1a:	07 95       	ror	r16
     b1c:	f7 94       	ror	r15
     b1e:	e7 94       	ror	r14
     b20:	8a 95       	dec	r24
     b22:	d1 f7       	brne	.-12     	; 0xb18 <__pack_f+0x164>
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__pack_f+0x17c>
     b26:	ee 24       	eor	r14, r14
     b28:	ff 24       	eor	r15, r15
     b2a:	87 01       	movw	r16, r14
     b2c:	ef ef       	ldi	r30, 0xFF	; 255
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	6e 2f       	mov	r22, r30
     b32:	67 95       	ror	r22
     b34:	66 27       	eor	r22, r22
     b36:	67 95       	ror	r22
     b38:	90 2f       	mov	r25, r16
     b3a:	9f 77       	andi	r25, 0x7F	; 127
     b3c:	d7 94       	ror	r13
     b3e:	dd 24       	eor	r13, r13
     b40:	d7 94       	ror	r13
     b42:	8e 2f       	mov	r24, r30
     b44:	86 95       	lsr	r24
     b46:	49 2f       	mov	r20, r25
     b48:	46 2b       	or	r20, r22
     b4a:	58 2f       	mov	r21, r24
     b4c:	5d 29       	or	r21, r13
     b4e:	b7 01       	movw	r22, r14
     b50:	ca 01       	movw	r24, r20
     b52:	1f 91       	pop	r17
     b54:	0f 91       	pop	r16
     b56:	ff 90       	pop	r15
     b58:	ef 90       	pop	r14
     b5a:	df 90       	pop	r13
     b5c:	08 95       	ret

00000b5e <__unpack_f>:
     b5e:	fc 01       	movw	r30, r24
     b60:	db 01       	movw	r26, r22
     b62:	40 81       	ld	r20, Z
     b64:	51 81       	ldd	r21, Z+1	; 0x01
     b66:	22 81       	ldd	r18, Z+2	; 0x02
     b68:	62 2f       	mov	r22, r18
     b6a:	6f 77       	andi	r22, 0x7F	; 127
     b6c:	70 e0       	ldi	r23, 0x00	; 0
     b6e:	22 1f       	adc	r18, r18
     b70:	22 27       	eor	r18, r18
     b72:	22 1f       	adc	r18, r18
     b74:	93 81       	ldd	r25, Z+3	; 0x03
     b76:	89 2f       	mov	r24, r25
     b78:	88 0f       	add	r24, r24
     b7a:	82 2b       	or	r24, r18
     b7c:	28 2f       	mov	r18, r24
     b7e:	30 e0       	ldi	r19, 0x00	; 0
     b80:	99 1f       	adc	r25, r25
     b82:	99 27       	eor	r25, r25
     b84:	99 1f       	adc	r25, r25
     b86:	11 96       	adiw	r26, 0x01	; 1
     b88:	9c 93       	st	X, r25
     b8a:	11 97       	sbiw	r26, 0x01	; 1
     b8c:	21 15       	cp	r18, r1
     b8e:	31 05       	cpc	r19, r1
     b90:	a9 f5       	brne	.+106    	; 0xbfc <__unpack_f+0x9e>
     b92:	41 15       	cp	r20, r1
     b94:	51 05       	cpc	r21, r1
     b96:	61 05       	cpc	r22, r1
     b98:	71 05       	cpc	r23, r1
     b9a:	11 f4       	brne	.+4      	; 0xba0 <__unpack_f+0x42>
     b9c:	82 e0       	ldi	r24, 0x02	; 2
     b9e:	37 c0       	rjmp	.+110    	; 0xc0e <__unpack_f+0xb0>
     ba0:	82 e8       	ldi	r24, 0x82	; 130
     ba2:	9f ef       	ldi	r25, 0xFF	; 255
     ba4:	13 96       	adiw	r26, 0x03	; 3
     ba6:	9c 93       	st	X, r25
     ba8:	8e 93       	st	-X, r24
     baa:	12 97       	sbiw	r26, 0x02	; 2
     bac:	9a 01       	movw	r18, r20
     bae:	ab 01       	movw	r20, r22
     bb0:	67 e0       	ldi	r22, 0x07	; 7
     bb2:	22 0f       	add	r18, r18
     bb4:	33 1f       	adc	r19, r19
     bb6:	44 1f       	adc	r20, r20
     bb8:	55 1f       	adc	r21, r21
     bba:	6a 95       	dec	r22
     bbc:	d1 f7       	brne	.-12     	; 0xbb2 <__unpack_f+0x54>
     bbe:	83 e0       	ldi	r24, 0x03	; 3
     bc0:	8c 93       	st	X, r24
     bc2:	0d c0       	rjmp	.+26     	; 0xbde <__unpack_f+0x80>
     bc4:	22 0f       	add	r18, r18
     bc6:	33 1f       	adc	r19, r19
     bc8:	44 1f       	adc	r20, r20
     bca:	55 1f       	adc	r21, r21
     bcc:	12 96       	adiw	r26, 0x02	; 2
     bce:	8d 91       	ld	r24, X+
     bd0:	9c 91       	ld	r25, X
     bd2:	13 97       	sbiw	r26, 0x03	; 3
     bd4:	01 97       	sbiw	r24, 0x01	; 1
     bd6:	13 96       	adiw	r26, 0x03	; 3
     bd8:	9c 93       	st	X, r25
     bda:	8e 93       	st	-X, r24
     bdc:	12 97       	sbiw	r26, 0x02	; 2
     bde:	20 30       	cpi	r18, 0x00	; 0
     be0:	80 e0       	ldi	r24, 0x00	; 0
     be2:	38 07       	cpc	r19, r24
     be4:	80 e0       	ldi	r24, 0x00	; 0
     be6:	48 07       	cpc	r20, r24
     be8:	80 e4       	ldi	r24, 0x40	; 64
     bea:	58 07       	cpc	r21, r24
     bec:	58 f3       	brcs	.-42     	; 0xbc4 <__unpack_f+0x66>
     bee:	14 96       	adiw	r26, 0x04	; 4
     bf0:	2d 93       	st	X+, r18
     bf2:	3d 93       	st	X+, r19
     bf4:	4d 93       	st	X+, r20
     bf6:	5c 93       	st	X, r21
     bf8:	17 97       	sbiw	r26, 0x07	; 7
     bfa:	08 95       	ret
     bfc:	2f 3f       	cpi	r18, 0xFF	; 255
     bfe:	31 05       	cpc	r19, r1
     c00:	79 f4       	brne	.+30     	; 0xc20 <__unpack_f+0xc2>
     c02:	41 15       	cp	r20, r1
     c04:	51 05       	cpc	r21, r1
     c06:	61 05       	cpc	r22, r1
     c08:	71 05       	cpc	r23, r1
     c0a:	19 f4       	brne	.+6      	; 0xc12 <__unpack_f+0xb4>
     c0c:	84 e0       	ldi	r24, 0x04	; 4
     c0e:	8c 93       	st	X, r24
     c10:	08 95       	ret
     c12:	64 ff       	sbrs	r22, 4
     c14:	03 c0       	rjmp	.+6      	; 0xc1c <__unpack_f+0xbe>
     c16:	81 e0       	ldi	r24, 0x01	; 1
     c18:	8c 93       	st	X, r24
     c1a:	12 c0       	rjmp	.+36     	; 0xc40 <__unpack_f+0xe2>
     c1c:	1c 92       	st	X, r1
     c1e:	10 c0       	rjmp	.+32     	; 0xc40 <__unpack_f+0xe2>
     c20:	2f 57       	subi	r18, 0x7F	; 127
     c22:	30 40       	sbci	r19, 0x00	; 0
     c24:	13 96       	adiw	r26, 0x03	; 3
     c26:	3c 93       	st	X, r19
     c28:	2e 93       	st	-X, r18
     c2a:	12 97       	sbiw	r26, 0x02	; 2
     c2c:	83 e0       	ldi	r24, 0x03	; 3
     c2e:	8c 93       	st	X, r24
     c30:	87 e0       	ldi	r24, 0x07	; 7
     c32:	44 0f       	add	r20, r20
     c34:	55 1f       	adc	r21, r21
     c36:	66 1f       	adc	r22, r22
     c38:	77 1f       	adc	r23, r23
     c3a:	8a 95       	dec	r24
     c3c:	d1 f7       	brne	.-12     	; 0xc32 <__unpack_f+0xd4>
     c3e:	70 64       	ori	r23, 0x40	; 64
     c40:	14 96       	adiw	r26, 0x04	; 4
     c42:	4d 93       	st	X+, r20
     c44:	5d 93       	st	X+, r21
     c46:	6d 93       	st	X+, r22
     c48:	7c 93       	st	X, r23
     c4a:	17 97       	sbiw	r26, 0x07	; 7
     c4c:	08 95       	ret

00000c4e <__fpcmp_parts_f>:
     c4e:	1f 93       	push	r17
     c50:	dc 01       	movw	r26, r24
     c52:	fb 01       	movw	r30, r22
     c54:	9c 91       	ld	r25, X
     c56:	92 30       	cpi	r25, 0x02	; 2
     c58:	08 f4       	brcc	.+2      	; 0xc5c <__fpcmp_parts_f+0xe>
     c5a:	47 c0       	rjmp	.+142    	; 0xcea <__fpcmp_parts_f+0x9c>
     c5c:	80 81       	ld	r24, Z
     c5e:	82 30       	cpi	r24, 0x02	; 2
     c60:	08 f4       	brcc	.+2      	; 0xc64 <__fpcmp_parts_f+0x16>
     c62:	43 c0       	rjmp	.+134    	; 0xcea <__fpcmp_parts_f+0x9c>
     c64:	94 30       	cpi	r25, 0x04	; 4
     c66:	51 f4       	brne	.+20     	; 0xc7c <__fpcmp_parts_f+0x2e>
     c68:	11 96       	adiw	r26, 0x01	; 1
     c6a:	1c 91       	ld	r17, X
     c6c:	84 30       	cpi	r24, 0x04	; 4
     c6e:	99 f5       	brne	.+102    	; 0xcd6 <__fpcmp_parts_f+0x88>
     c70:	81 81       	ldd	r24, Z+1	; 0x01
     c72:	68 2f       	mov	r22, r24
     c74:	70 e0       	ldi	r23, 0x00	; 0
     c76:	61 1b       	sub	r22, r17
     c78:	71 09       	sbc	r23, r1
     c7a:	3f c0       	rjmp	.+126    	; 0xcfa <__fpcmp_parts_f+0xac>
     c7c:	84 30       	cpi	r24, 0x04	; 4
     c7e:	21 f0       	breq	.+8      	; 0xc88 <__fpcmp_parts_f+0x3a>
     c80:	92 30       	cpi	r25, 0x02	; 2
     c82:	31 f4       	brne	.+12     	; 0xc90 <__fpcmp_parts_f+0x42>
     c84:	82 30       	cpi	r24, 0x02	; 2
     c86:	b9 f1       	breq	.+110    	; 0xcf6 <__fpcmp_parts_f+0xa8>
     c88:	81 81       	ldd	r24, Z+1	; 0x01
     c8a:	88 23       	and	r24, r24
     c8c:	89 f1       	breq	.+98     	; 0xcf0 <__fpcmp_parts_f+0xa2>
     c8e:	2d c0       	rjmp	.+90     	; 0xcea <__fpcmp_parts_f+0x9c>
     c90:	11 96       	adiw	r26, 0x01	; 1
     c92:	1c 91       	ld	r17, X
     c94:	11 97       	sbiw	r26, 0x01	; 1
     c96:	82 30       	cpi	r24, 0x02	; 2
     c98:	f1 f0       	breq	.+60     	; 0xcd6 <__fpcmp_parts_f+0x88>
     c9a:	81 81       	ldd	r24, Z+1	; 0x01
     c9c:	18 17       	cp	r17, r24
     c9e:	d9 f4       	brne	.+54     	; 0xcd6 <__fpcmp_parts_f+0x88>
     ca0:	12 96       	adiw	r26, 0x02	; 2
     ca2:	2d 91       	ld	r18, X+
     ca4:	3c 91       	ld	r19, X
     ca6:	13 97       	sbiw	r26, 0x03	; 3
     ca8:	82 81       	ldd	r24, Z+2	; 0x02
     caa:	93 81       	ldd	r25, Z+3	; 0x03
     cac:	82 17       	cp	r24, r18
     cae:	93 07       	cpc	r25, r19
     cb0:	94 f0       	brlt	.+36     	; 0xcd6 <__fpcmp_parts_f+0x88>
     cb2:	28 17       	cp	r18, r24
     cb4:	39 07       	cpc	r19, r25
     cb6:	bc f0       	brlt	.+46     	; 0xce6 <__fpcmp_parts_f+0x98>
     cb8:	14 96       	adiw	r26, 0x04	; 4
     cba:	8d 91       	ld	r24, X+
     cbc:	9d 91       	ld	r25, X+
     cbe:	0d 90       	ld	r0, X+
     cc0:	bc 91       	ld	r27, X
     cc2:	a0 2d       	mov	r26, r0
     cc4:	24 81       	ldd	r18, Z+4	; 0x04
     cc6:	35 81       	ldd	r19, Z+5	; 0x05
     cc8:	46 81       	ldd	r20, Z+6	; 0x06
     cca:	57 81       	ldd	r21, Z+7	; 0x07
     ccc:	28 17       	cp	r18, r24
     cce:	39 07       	cpc	r19, r25
     cd0:	4a 07       	cpc	r20, r26
     cd2:	5b 07       	cpc	r21, r27
     cd4:	18 f4       	brcc	.+6      	; 0xcdc <__fpcmp_parts_f+0x8e>
     cd6:	11 23       	and	r17, r17
     cd8:	41 f0       	breq	.+16     	; 0xcea <__fpcmp_parts_f+0x9c>
     cda:	0a c0       	rjmp	.+20     	; 0xcf0 <__fpcmp_parts_f+0xa2>
     cdc:	82 17       	cp	r24, r18
     cde:	93 07       	cpc	r25, r19
     ce0:	a4 07       	cpc	r26, r20
     ce2:	b5 07       	cpc	r27, r21
     ce4:	40 f4       	brcc	.+16     	; 0xcf6 <__fpcmp_parts_f+0xa8>
     ce6:	11 23       	and	r17, r17
     ce8:	19 f0       	breq	.+6      	; 0xcf0 <__fpcmp_parts_f+0xa2>
     cea:	61 e0       	ldi	r22, 0x01	; 1
     cec:	70 e0       	ldi	r23, 0x00	; 0
     cee:	05 c0       	rjmp	.+10     	; 0xcfa <__fpcmp_parts_f+0xac>
     cf0:	6f ef       	ldi	r22, 0xFF	; 255
     cf2:	7f ef       	ldi	r23, 0xFF	; 255
     cf4:	02 c0       	rjmp	.+4      	; 0xcfa <__fpcmp_parts_f+0xac>
     cf6:	60 e0       	ldi	r22, 0x00	; 0
     cf8:	70 e0       	ldi	r23, 0x00	; 0
     cfa:	cb 01       	movw	r24, r22
     cfc:	1f 91       	pop	r17
     cfe:	08 95       	ret

00000d00 <C_LCD_voidSendCommand>:
u8 Local_u8SetPositionX = X_INITIAL_POSITION;
u8 Local_u8SetPositionY = Y_INITIAL_POSITION;


void C_LCD_voidSendCommand(u8 Copy_u8Command)
{
     d00:	1f 93       	push	r17
     d02:	df 93       	push	r29
     d04:	cf 93       	push	r28
     d06:	cd b7       	in	r28, 0x3d	; 61
     d08:	de b7       	in	r29, 0x3e	; 62
     d0a:	ea 97       	sbiw	r28, 0x3a	; 58
     d0c:	0f b6       	in	r0, 0x3f	; 63
     d0e:	f8 94       	cli
     d10:	de bf       	out	0x3e, r29	; 62
     d12:	0f be       	out	0x3f, r0	; 63
     d14:	cd bf       	out	0x3d, r28	; 61
     d16:	8a af       	std	Y+58, r24	; 0x3a
	/*Set RS Pin to low to send command */
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_LOW);
     d18:	80 e0       	ldi	r24, 0x00	; 0
     d1a:	61 e0       	ldi	r22, 0x01	; 1
     d1c:	40 e0       	ldi	r20, 0x00	; 0
     d1e:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <DIO_u8SetPinValue>

#elif   MODE_SELECT ==_4_BIT_MODE
#if DRIVER_PURPOUSE == PROTEUS
	u8 Local_u8Command = (((Copy_u8Command ) & CLCD_COMMAND_PROTEUS_MASK) | DIO_u8AndWithPort(CLCD_DATA_PORT, CLCD_DATA_PORT_PROTEUS_MASK));
#elif DRIVER_PURPOUSE == ATMEGA_KIT
	u8 Local_u8Command = (((Copy_u8Command>>1 ) & CLCD_COMMAND_ATMEGA_KIT_MASK) | DIO_u8AndWithPort(CLCD_DATA_PORT, CLCD_DATA_PORT_ATMEGA_KIT_MASK));
     d22:	8a ad       	ldd	r24, Y+58	; 0x3a
     d24:	86 95       	lsr	r24
     d26:	18 2f       	mov	r17, r24
     d28:	18 77       	andi	r17, 0x78	; 120
     d2a:	80 e0       	ldi	r24, 0x00	; 0
     d2c:	67 e8       	ldi	r22, 0x87	; 135
     d2e:	0e 94 57 0f 	call	0x1eae	; 0x1eae <DIO_u8AndWithPort>
     d32:	81 2b       	or	r24, r17
     d34:	89 af       	std	Y+57, r24	; 0x39
#endif

	/* Set Command to data pins */
	DIO_u8SetPortValue(CLCD_DATA_PORT,Local_u8Command);
     d36:	80 e0       	ldi	r24, 0x00	; 0
     d38:	69 ad       	ldd	r22, Y+57	; 0x39
     d3a:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <DIO_u8SetPortValue>

	/*Send Enable pulse */
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
     d3e:	80 e0       	ldi	r24, 0x00	; 0
     d40:	62 e0       	ldi	r22, 0x02	; 2
     d42:	41 e0       	ldi	r20, 0x01	; 1
     d44:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <DIO_u8SetPinValue>
     d48:	80 e0       	ldi	r24, 0x00	; 0
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	a0 e0       	ldi	r26, 0x00	; 0
     d4e:	b0 e4       	ldi	r27, 0x40	; 64
     d50:	8d ab       	std	Y+53, r24	; 0x35
     d52:	9e ab       	std	Y+54, r25	; 0x36
     d54:	af ab       	std	Y+55, r26	; 0x37
     d56:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d58:	6d a9       	ldd	r22, Y+53	; 0x35
     d5a:	7e a9       	ldd	r23, Y+54	; 0x36
     d5c:	8f a9       	ldd	r24, Y+55	; 0x37
     d5e:	98 ad       	ldd	r25, Y+56	; 0x38
     d60:	20 e0       	ldi	r18, 0x00	; 0
     d62:	30 e0       	ldi	r19, 0x00	; 0
     d64:	4a e7       	ldi	r20, 0x7A	; 122
     d66:	55 e4       	ldi	r21, 0x45	; 69
     d68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d6c:	dc 01       	movw	r26, r24
     d6e:	cb 01       	movw	r24, r22
     d70:	89 ab       	std	Y+49, r24	; 0x31
     d72:	9a ab       	std	Y+50, r25	; 0x32
     d74:	ab ab       	std	Y+51, r26	; 0x33
     d76:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     d78:	69 a9       	ldd	r22, Y+49	; 0x31
     d7a:	7a a9       	ldd	r23, Y+50	; 0x32
     d7c:	8b a9       	ldd	r24, Y+51	; 0x33
     d7e:	9c a9       	ldd	r25, Y+52	; 0x34
     d80:	20 e0       	ldi	r18, 0x00	; 0
     d82:	30 e0       	ldi	r19, 0x00	; 0
     d84:	40 e8       	ldi	r20, 0x80	; 128
     d86:	5f e3       	ldi	r21, 0x3F	; 63
     d88:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
     d8c:	88 23       	and	r24, r24
     d8e:	2c f4       	brge	.+10     	; 0xd9a <C_LCD_voidSendCommand+0x9a>
		__ticks = 1;
     d90:	81 e0       	ldi	r24, 0x01	; 1
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	98 ab       	std	Y+48, r25	; 0x30
     d96:	8f a7       	std	Y+47, r24	; 0x2f
     d98:	3f c0       	rjmp	.+126    	; 0xe18 <C_LCD_voidSendCommand+0x118>
	else if (__tmp > 65535)
     d9a:	69 a9       	ldd	r22, Y+49	; 0x31
     d9c:	7a a9       	ldd	r23, Y+50	; 0x32
     d9e:	8b a9       	ldd	r24, Y+51	; 0x33
     da0:	9c a9       	ldd	r25, Y+52	; 0x34
     da2:	20 e0       	ldi	r18, 0x00	; 0
     da4:	3f ef       	ldi	r19, 0xFF	; 255
     da6:	4f e7       	ldi	r20, 0x7F	; 127
     da8:	57 e4       	ldi	r21, 0x47	; 71
     daa:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
     dae:	18 16       	cp	r1, r24
     db0:	4c f5       	brge	.+82     	; 0xe04 <C_LCD_voidSendCommand+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     db2:	6d a9       	ldd	r22, Y+53	; 0x35
     db4:	7e a9       	ldd	r23, Y+54	; 0x36
     db6:	8f a9       	ldd	r24, Y+55	; 0x37
     db8:	98 ad       	ldd	r25, Y+56	; 0x38
     dba:	20 e0       	ldi	r18, 0x00	; 0
     dbc:	30 e0       	ldi	r19, 0x00	; 0
     dbe:	40 e2       	ldi	r20, 0x20	; 32
     dc0:	51 e4       	ldi	r21, 0x41	; 65
     dc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dc6:	dc 01       	movw	r26, r24
     dc8:	cb 01       	movw	r24, r22
     dca:	bc 01       	movw	r22, r24
     dcc:	cd 01       	movw	r24, r26
     dce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dd2:	dc 01       	movw	r26, r24
     dd4:	cb 01       	movw	r24, r22
     dd6:	98 ab       	std	Y+48, r25	; 0x30
     dd8:	8f a7       	std	Y+47, r24	; 0x2f
     dda:	0f c0       	rjmp	.+30     	; 0xdfa <C_LCD_voidSendCommand+0xfa>
     ddc:	80 e9       	ldi	r24, 0x90	; 144
     dde:	91 e0       	ldi	r25, 0x01	; 1
     de0:	9e a7       	std	Y+46, r25	; 0x2e
     de2:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     de4:	8d a5       	ldd	r24, Y+45	; 0x2d
     de6:	9e a5       	ldd	r25, Y+46	; 0x2e
     de8:	01 97       	sbiw	r24, 0x01	; 1
     dea:	f1 f7       	brne	.-4      	; 0xde8 <C_LCD_voidSendCommand+0xe8>
     dec:	9e a7       	std	Y+46, r25	; 0x2e
     dee:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     df0:	8f a5       	ldd	r24, Y+47	; 0x2f
     df2:	98 a9       	ldd	r25, Y+48	; 0x30
     df4:	01 97       	sbiw	r24, 0x01	; 1
     df6:	98 ab       	std	Y+48, r25	; 0x30
     df8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dfa:	8f a5       	ldd	r24, Y+47	; 0x2f
     dfc:	98 a9       	ldd	r25, Y+48	; 0x30
     dfe:	00 97       	sbiw	r24, 0x00	; 0
     e00:	69 f7       	brne	.-38     	; 0xddc <C_LCD_voidSendCommand+0xdc>
     e02:	14 c0       	rjmp	.+40     	; 0xe2c <C_LCD_voidSendCommand+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e04:	69 a9       	ldd	r22, Y+49	; 0x31
     e06:	7a a9       	ldd	r23, Y+50	; 0x32
     e08:	8b a9       	ldd	r24, Y+51	; 0x33
     e0a:	9c a9       	ldd	r25, Y+52	; 0x34
     e0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e10:	dc 01       	movw	r26, r24
     e12:	cb 01       	movw	r24, r22
     e14:	98 ab       	std	Y+48, r25	; 0x30
     e16:	8f a7       	std	Y+47, r24	; 0x2f
     e18:	8f a5       	ldd	r24, Y+47	; 0x2f
     e1a:	98 a9       	ldd	r25, Y+48	; 0x30
     e1c:	9c a7       	std	Y+44, r25	; 0x2c
     e1e:	8b a7       	std	Y+43, r24	; 0x2b
     e20:	8b a5       	ldd	r24, Y+43	; 0x2b
     e22:	9c a5       	ldd	r25, Y+44	; 0x2c
     e24:	01 97       	sbiw	r24, 0x01	; 1
     e26:	f1 f7       	brne	.-4      	; 0xe24 <C_LCD_voidSendCommand+0x124>
     e28:	9c a7       	std	Y+44, r25	; 0x2c
     e2a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
     e2c:	80 e0       	ldi	r24, 0x00	; 0
     e2e:	62 e0       	ldi	r22, 0x02	; 2
     e30:	40 e0       	ldi	r20, 0x00	; 0
     e32:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <DIO_u8SetPinValue>
     e36:	80 e0       	ldi	r24, 0x00	; 0
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	a0 ea       	ldi	r26, 0xA0	; 160
     e3c:	b0 e4       	ldi	r27, 0x40	; 64
     e3e:	8f a3       	std	Y+39, r24	; 0x27
     e40:	98 a7       	std	Y+40, r25	; 0x28
     e42:	a9 a7       	std	Y+41, r26	; 0x29
     e44:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e46:	6f a1       	ldd	r22, Y+39	; 0x27
     e48:	78 a5       	ldd	r23, Y+40	; 0x28
     e4a:	89 a5       	ldd	r24, Y+41	; 0x29
     e4c:	9a a5       	ldd	r25, Y+42	; 0x2a
     e4e:	20 e0       	ldi	r18, 0x00	; 0
     e50:	30 e0       	ldi	r19, 0x00	; 0
     e52:	4a e7       	ldi	r20, 0x7A	; 122
     e54:	55 e4       	ldi	r21, 0x45	; 69
     e56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e5a:	dc 01       	movw	r26, r24
     e5c:	cb 01       	movw	r24, r22
     e5e:	8b a3       	std	Y+35, r24	; 0x23
     e60:	9c a3       	std	Y+36, r25	; 0x24
     e62:	ad a3       	std	Y+37, r26	; 0x25
     e64:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     e66:	6b a1       	ldd	r22, Y+35	; 0x23
     e68:	7c a1       	ldd	r23, Y+36	; 0x24
     e6a:	8d a1       	ldd	r24, Y+37	; 0x25
     e6c:	9e a1       	ldd	r25, Y+38	; 0x26
     e6e:	20 e0       	ldi	r18, 0x00	; 0
     e70:	30 e0       	ldi	r19, 0x00	; 0
     e72:	40 e8       	ldi	r20, 0x80	; 128
     e74:	5f e3       	ldi	r21, 0x3F	; 63
     e76:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
     e7a:	88 23       	and	r24, r24
     e7c:	2c f4       	brge	.+10     	; 0xe88 <C_LCD_voidSendCommand+0x188>
		__ticks = 1;
     e7e:	81 e0       	ldi	r24, 0x01	; 1
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	9a a3       	std	Y+34, r25	; 0x22
     e84:	89 a3       	std	Y+33, r24	; 0x21
     e86:	3f c0       	rjmp	.+126    	; 0xf06 <C_LCD_voidSendCommand+0x206>
	else if (__tmp > 65535)
     e88:	6b a1       	ldd	r22, Y+35	; 0x23
     e8a:	7c a1       	ldd	r23, Y+36	; 0x24
     e8c:	8d a1       	ldd	r24, Y+37	; 0x25
     e8e:	9e a1       	ldd	r25, Y+38	; 0x26
     e90:	20 e0       	ldi	r18, 0x00	; 0
     e92:	3f ef       	ldi	r19, 0xFF	; 255
     e94:	4f e7       	ldi	r20, 0x7F	; 127
     e96:	57 e4       	ldi	r21, 0x47	; 71
     e98:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
     e9c:	18 16       	cp	r1, r24
     e9e:	4c f5       	brge	.+82     	; 0xef2 <C_LCD_voidSendCommand+0x1f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ea0:	6f a1       	ldd	r22, Y+39	; 0x27
     ea2:	78 a5       	ldd	r23, Y+40	; 0x28
     ea4:	89 a5       	ldd	r24, Y+41	; 0x29
     ea6:	9a a5       	ldd	r25, Y+42	; 0x2a
     ea8:	20 e0       	ldi	r18, 0x00	; 0
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	40 e2       	ldi	r20, 0x20	; 32
     eae:	51 e4       	ldi	r21, 0x41	; 65
     eb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eb4:	dc 01       	movw	r26, r24
     eb6:	cb 01       	movw	r24, r22
     eb8:	bc 01       	movw	r22, r24
     eba:	cd 01       	movw	r24, r26
     ebc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ec0:	dc 01       	movw	r26, r24
     ec2:	cb 01       	movw	r24, r22
     ec4:	9a a3       	std	Y+34, r25	; 0x22
     ec6:	89 a3       	std	Y+33, r24	; 0x21
     ec8:	0f c0       	rjmp	.+30     	; 0xee8 <C_LCD_voidSendCommand+0x1e8>
     eca:	80 e9       	ldi	r24, 0x90	; 144
     ecc:	91 e0       	ldi	r25, 0x01	; 1
     ece:	98 a3       	std	Y+32, r25	; 0x20
     ed0:	8f 8f       	std	Y+31, r24	; 0x1f
     ed2:	8f 8d       	ldd	r24, Y+31	; 0x1f
     ed4:	98 a1       	ldd	r25, Y+32	; 0x20
     ed6:	01 97       	sbiw	r24, 0x01	; 1
     ed8:	f1 f7       	brne	.-4      	; 0xed6 <C_LCD_voidSendCommand+0x1d6>
     eda:	98 a3       	std	Y+32, r25	; 0x20
     edc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ede:	89 a1       	ldd	r24, Y+33	; 0x21
     ee0:	9a a1       	ldd	r25, Y+34	; 0x22
     ee2:	01 97       	sbiw	r24, 0x01	; 1
     ee4:	9a a3       	std	Y+34, r25	; 0x22
     ee6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ee8:	89 a1       	ldd	r24, Y+33	; 0x21
     eea:	9a a1       	ldd	r25, Y+34	; 0x22
     eec:	00 97       	sbiw	r24, 0x00	; 0
     eee:	69 f7       	brne	.-38     	; 0xeca <C_LCD_voidSendCommand+0x1ca>
     ef0:	14 c0       	rjmp	.+40     	; 0xf1a <C_LCD_voidSendCommand+0x21a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ef2:	6b a1       	ldd	r22, Y+35	; 0x23
     ef4:	7c a1       	ldd	r23, Y+36	; 0x24
     ef6:	8d a1       	ldd	r24, Y+37	; 0x25
     ef8:	9e a1       	ldd	r25, Y+38	; 0x26
     efa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     efe:	dc 01       	movw	r26, r24
     f00:	cb 01       	movw	r24, r22
     f02:	9a a3       	std	Y+34, r25	; 0x22
     f04:	89 a3       	std	Y+33, r24	; 0x21
     f06:	89 a1       	ldd	r24, Y+33	; 0x21
     f08:	9a a1       	ldd	r25, Y+34	; 0x22
     f0a:	9e 8f       	std	Y+30, r25	; 0x1e
     f0c:	8d 8f       	std	Y+29, r24	; 0x1d
     f0e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f10:	9e 8d       	ldd	r25, Y+30	; 0x1e
     f12:	01 97       	sbiw	r24, 0x01	; 1
     f14:	f1 f7       	brne	.-4      	; 0xf12 <C_LCD_voidSendCommand+0x212>
     f16:	9e 8f       	std	Y+30, r25	; 0x1e
     f18:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);
#if DRIVER_PURPOUSE == PROTEUS
	Local_u8Command = ((Copy_u8Command <<4) |DIO_u8AndWithPort(CLCD_DATA_PORT, CLCD_DATA_PORT_PROTEUS_MASK));
#elif DRIVER_PURPOUSE == ATMEGA_KIT
	Local_u8Command = ((Copy_u8Command <<3) |DIO_u8AndWithPort(CLCD_DATA_PORT, CLCD_DATA_PORT_ATMEGA_KIT_MASK));
     f1a:	8a ad       	ldd	r24, Y+58	; 0x3a
     f1c:	88 2f       	mov	r24, r24
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	88 0f       	add	r24, r24
     f22:	99 1f       	adc	r25, r25
     f24:	88 0f       	add	r24, r24
     f26:	99 1f       	adc	r25, r25
     f28:	88 0f       	add	r24, r24
     f2a:	99 1f       	adc	r25, r25
     f2c:	18 2f       	mov	r17, r24
     f2e:	80 e0       	ldi	r24, 0x00	; 0
     f30:	67 e8       	ldi	r22, 0x87	; 135
     f32:	0e 94 57 0f 	call	0x1eae	; 0x1eae <DIO_u8AndWithPort>
     f36:	81 2b       	or	r24, r17
     f38:	89 af       	std	Y+57, r24	; 0x39
#endif

	DIO_u8SetPortValue(CLCD_DATA_PORT,Local_u8Command);
     f3a:	80 e0       	ldi	r24, 0x00	; 0
     f3c:	69 ad       	ldd	r22, Y+57	; 0x39
     f3e:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <DIO_u8SetPortValue>

	/*Send Enable pulse */
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
     f42:	80 e0       	ldi	r24, 0x00	; 0
     f44:	62 e0       	ldi	r22, 0x02	; 2
     f46:	41 e0       	ldi	r20, 0x01	; 1
     f48:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <DIO_u8SetPinValue>
     f4c:	80 e0       	ldi	r24, 0x00	; 0
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	a0 e0       	ldi	r26, 0x00	; 0
     f52:	b0 e4       	ldi	r27, 0x40	; 64
     f54:	89 8f       	std	Y+25, r24	; 0x19
     f56:	9a 8f       	std	Y+26, r25	; 0x1a
     f58:	ab 8f       	std	Y+27, r26	; 0x1b
     f5a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f5c:	69 8d       	ldd	r22, Y+25	; 0x19
     f5e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f60:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f62:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f64:	20 e0       	ldi	r18, 0x00	; 0
     f66:	30 e0       	ldi	r19, 0x00	; 0
     f68:	4a e7       	ldi	r20, 0x7A	; 122
     f6a:	55 e4       	ldi	r21, 0x45	; 69
     f6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f70:	dc 01       	movw	r26, r24
     f72:	cb 01       	movw	r24, r22
     f74:	8d 8b       	std	Y+21, r24	; 0x15
     f76:	9e 8b       	std	Y+22, r25	; 0x16
     f78:	af 8b       	std	Y+23, r26	; 0x17
     f7a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     f7c:	6d 89       	ldd	r22, Y+21	; 0x15
     f7e:	7e 89       	ldd	r23, Y+22	; 0x16
     f80:	8f 89       	ldd	r24, Y+23	; 0x17
     f82:	98 8d       	ldd	r25, Y+24	; 0x18
     f84:	20 e0       	ldi	r18, 0x00	; 0
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	40 e8       	ldi	r20, 0x80	; 128
     f8a:	5f e3       	ldi	r21, 0x3F	; 63
     f8c:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
     f90:	88 23       	and	r24, r24
     f92:	2c f4       	brge	.+10     	; 0xf9e <C_LCD_voidSendCommand+0x29e>
		__ticks = 1;
     f94:	81 e0       	ldi	r24, 0x01	; 1
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	9c 8b       	std	Y+20, r25	; 0x14
     f9a:	8b 8b       	std	Y+19, r24	; 0x13
     f9c:	3f c0       	rjmp	.+126    	; 0x101c <C_LCD_voidSendCommand+0x31c>
	else if (__tmp > 65535)
     f9e:	6d 89       	ldd	r22, Y+21	; 0x15
     fa0:	7e 89       	ldd	r23, Y+22	; 0x16
     fa2:	8f 89       	ldd	r24, Y+23	; 0x17
     fa4:	98 8d       	ldd	r25, Y+24	; 0x18
     fa6:	20 e0       	ldi	r18, 0x00	; 0
     fa8:	3f ef       	ldi	r19, 0xFF	; 255
     faa:	4f e7       	ldi	r20, 0x7F	; 127
     fac:	57 e4       	ldi	r21, 0x47	; 71
     fae:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
     fb2:	18 16       	cp	r1, r24
     fb4:	4c f5       	brge	.+82     	; 0x1008 <C_LCD_voidSendCommand+0x308>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fb6:	69 8d       	ldd	r22, Y+25	; 0x19
     fb8:	7a 8d       	ldd	r23, Y+26	; 0x1a
     fba:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fbc:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fbe:	20 e0       	ldi	r18, 0x00	; 0
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	40 e2       	ldi	r20, 0x20	; 32
     fc4:	51 e4       	ldi	r21, 0x41	; 65
     fc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fca:	dc 01       	movw	r26, r24
     fcc:	cb 01       	movw	r24, r22
     fce:	bc 01       	movw	r22, r24
     fd0:	cd 01       	movw	r24, r26
     fd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fd6:	dc 01       	movw	r26, r24
     fd8:	cb 01       	movw	r24, r22
     fda:	9c 8b       	std	Y+20, r25	; 0x14
     fdc:	8b 8b       	std	Y+19, r24	; 0x13
     fde:	0f c0       	rjmp	.+30     	; 0xffe <C_LCD_voidSendCommand+0x2fe>
     fe0:	80 e9       	ldi	r24, 0x90	; 144
     fe2:	91 e0       	ldi	r25, 0x01	; 1
     fe4:	9a 8b       	std	Y+18, r25	; 0x12
     fe6:	89 8b       	std	Y+17, r24	; 0x11
     fe8:	89 89       	ldd	r24, Y+17	; 0x11
     fea:	9a 89       	ldd	r25, Y+18	; 0x12
     fec:	01 97       	sbiw	r24, 0x01	; 1
     fee:	f1 f7       	brne	.-4      	; 0xfec <C_LCD_voidSendCommand+0x2ec>
     ff0:	9a 8b       	std	Y+18, r25	; 0x12
     ff2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ff4:	8b 89       	ldd	r24, Y+19	; 0x13
     ff6:	9c 89       	ldd	r25, Y+20	; 0x14
     ff8:	01 97       	sbiw	r24, 0x01	; 1
     ffa:	9c 8b       	std	Y+20, r25	; 0x14
     ffc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ffe:	8b 89       	ldd	r24, Y+19	; 0x13
    1000:	9c 89       	ldd	r25, Y+20	; 0x14
    1002:	00 97       	sbiw	r24, 0x00	; 0
    1004:	69 f7       	brne	.-38     	; 0xfe0 <C_LCD_voidSendCommand+0x2e0>
    1006:	14 c0       	rjmp	.+40     	; 0x1030 <C_LCD_voidSendCommand+0x330>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1008:	6d 89       	ldd	r22, Y+21	; 0x15
    100a:	7e 89       	ldd	r23, Y+22	; 0x16
    100c:	8f 89       	ldd	r24, Y+23	; 0x17
    100e:	98 8d       	ldd	r25, Y+24	; 0x18
    1010:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1014:	dc 01       	movw	r26, r24
    1016:	cb 01       	movw	r24, r22
    1018:	9c 8b       	std	Y+20, r25	; 0x14
    101a:	8b 8b       	std	Y+19, r24	; 0x13
    101c:	8b 89       	ldd	r24, Y+19	; 0x13
    101e:	9c 89       	ldd	r25, Y+20	; 0x14
    1020:	98 8b       	std	Y+16, r25	; 0x10
    1022:	8f 87       	std	Y+15, r24	; 0x0f
    1024:	8f 85       	ldd	r24, Y+15	; 0x0f
    1026:	98 89       	ldd	r25, Y+16	; 0x10
    1028:	01 97       	sbiw	r24, 0x01	; 1
    102a:	f1 f7       	brne	.-4      	; 0x1028 <C_LCD_voidSendCommand+0x328>
    102c:	98 8b       	std	Y+16, r25	; 0x10
    102e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    1030:	80 e0       	ldi	r24, 0x00	; 0
    1032:	62 e0       	ldi	r22, 0x02	; 2
    1034:	40 e0       	ldi	r20, 0x00	; 0
    1036:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <DIO_u8SetPinValue>
    103a:	80 e0       	ldi	r24, 0x00	; 0
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	a0 ea       	ldi	r26, 0xA0	; 160
    1040:	b0 e4       	ldi	r27, 0x40	; 64
    1042:	8b 87       	std	Y+11, r24	; 0x0b
    1044:	9c 87       	std	Y+12, r25	; 0x0c
    1046:	ad 87       	std	Y+13, r26	; 0x0d
    1048:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    104a:	6b 85       	ldd	r22, Y+11	; 0x0b
    104c:	7c 85       	ldd	r23, Y+12	; 0x0c
    104e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1050:	9e 85       	ldd	r25, Y+14	; 0x0e
    1052:	20 e0       	ldi	r18, 0x00	; 0
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	4a e7       	ldi	r20, 0x7A	; 122
    1058:	55 e4       	ldi	r21, 0x45	; 69
    105a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    105e:	dc 01       	movw	r26, r24
    1060:	cb 01       	movw	r24, r22
    1062:	8f 83       	std	Y+7, r24	; 0x07
    1064:	98 87       	std	Y+8, r25	; 0x08
    1066:	a9 87       	std	Y+9, r26	; 0x09
    1068:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    106a:	6f 81       	ldd	r22, Y+7	; 0x07
    106c:	78 85       	ldd	r23, Y+8	; 0x08
    106e:	89 85       	ldd	r24, Y+9	; 0x09
    1070:	9a 85       	ldd	r25, Y+10	; 0x0a
    1072:	20 e0       	ldi	r18, 0x00	; 0
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	40 e8       	ldi	r20, 0x80	; 128
    1078:	5f e3       	ldi	r21, 0x3F	; 63
    107a:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    107e:	88 23       	and	r24, r24
    1080:	2c f4       	brge	.+10     	; 0x108c <C_LCD_voidSendCommand+0x38c>
		__ticks = 1;
    1082:	81 e0       	ldi	r24, 0x01	; 1
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	9e 83       	std	Y+6, r25	; 0x06
    1088:	8d 83       	std	Y+5, r24	; 0x05
    108a:	3f c0       	rjmp	.+126    	; 0x110a <C_LCD_voidSendCommand+0x40a>
	else if (__tmp > 65535)
    108c:	6f 81       	ldd	r22, Y+7	; 0x07
    108e:	78 85       	ldd	r23, Y+8	; 0x08
    1090:	89 85       	ldd	r24, Y+9	; 0x09
    1092:	9a 85       	ldd	r25, Y+10	; 0x0a
    1094:	20 e0       	ldi	r18, 0x00	; 0
    1096:	3f ef       	ldi	r19, 0xFF	; 255
    1098:	4f e7       	ldi	r20, 0x7F	; 127
    109a:	57 e4       	ldi	r21, 0x47	; 71
    109c:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    10a0:	18 16       	cp	r1, r24
    10a2:	4c f5       	brge	.+82     	; 0x10f6 <C_LCD_voidSendCommand+0x3f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    10a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    10a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    10aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    10ac:	20 e0       	ldi	r18, 0x00	; 0
    10ae:	30 e0       	ldi	r19, 0x00	; 0
    10b0:	40 e2       	ldi	r20, 0x20	; 32
    10b2:	51 e4       	ldi	r21, 0x41	; 65
    10b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10b8:	dc 01       	movw	r26, r24
    10ba:	cb 01       	movw	r24, r22
    10bc:	bc 01       	movw	r22, r24
    10be:	cd 01       	movw	r24, r26
    10c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10c4:	dc 01       	movw	r26, r24
    10c6:	cb 01       	movw	r24, r22
    10c8:	9e 83       	std	Y+6, r25	; 0x06
    10ca:	8d 83       	std	Y+5, r24	; 0x05
    10cc:	0f c0       	rjmp	.+30     	; 0x10ec <C_LCD_voidSendCommand+0x3ec>
    10ce:	80 e9       	ldi	r24, 0x90	; 144
    10d0:	91 e0       	ldi	r25, 0x01	; 1
    10d2:	9c 83       	std	Y+4, r25	; 0x04
    10d4:	8b 83       	std	Y+3, r24	; 0x03
    10d6:	8b 81       	ldd	r24, Y+3	; 0x03
    10d8:	9c 81       	ldd	r25, Y+4	; 0x04
    10da:	01 97       	sbiw	r24, 0x01	; 1
    10dc:	f1 f7       	brne	.-4      	; 0x10da <C_LCD_voidSendCommand+0x3da>
    10de:	9c 83       	std	Y+4, r25	; 0x04
    10e0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10e2:	8d 81       	ldd	r24, Y+5	; 0x05
    10e4:	9e 81       	ldd	r25, Y+6	; 0x06
    10e6:	01 97       	sbiw	r24, 0x01	; 1
    10e8:	9e 83       	std	Y+6, r25	; 0x06
    10ea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10ec:	8d 81       	ldd	r24, Y+5	; 0x05
    10ee:	9e 81       	ldd	r25, Y+6	; 0x06
    10f0:	00 97       	sbiw	r24, 0x00	; 0
    10f2:	69 f7       	brne	.-38     	; 0x10ce <C_LCD_voidSendCommand+0x3ce>
    10f4:	14 c0       	rjmp	.+40     	; 0x111e <C_LCD_voidSendCommand+0x41e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10f6:	6f 81       	ldd	r22, Y+7	; 0x07
    10f8:	78 85       	ldd	r23, Y+8	; 0x08
    10fa:	89 85       	ldd	r24, Y+9	; 0x09
    10fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    10fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1102:	dc 01       	movw	r26, r24
    1104:	cb 01       	movw	r24, r22
    1106:	9e 83       	std	Y+6, r25	; 0x06
    1108:	8d 83       	std	Y+5, r24	; 0x05
    110a:	8d 81       	ldd	r24, Y+5	; 0x05
    110c:	9e 81       	ldd	r25, Y+6	; 0x06
    110e:	9a 83       	std	Y+2, r25	; 0x02
    1110:	89 83       	std	Y+1, r24	; 0x01
    1112:	89 81       	ldd	r24, Y+1	; 0x01
    1114:	9a 81       	ldd	r25, Y+2	; 0x02
    1116:	01 97       	sbiw	r24, 0x01	; 1
    1118:	f1 f7       	brne	.-4      	; 0x1116 <C_LCD_voidSendCommand+0x416>
    111a:	9a 83       	std	Y+2, r25	; 0x02
    111c:	89 83       	std	Y+1, r24	; 0x01

#endif



}
    111e:	ea 96       	adiw	r28, 0x3a	; 58
    1120:	0f b6       	in	r0, 0x3f	; 63
    1122:	f8 94       	cli
    1124:	de bf       	out	0x3e, r29	; 62
    1126:	0f be       	out	0x3f, r0	; 63
    1128:	cd bf       	out	0x3d, r28	; 61
    112a:	cf 91       	pop	r28
    112c:	df 91       	pop	r29
    112e:	1f 91       	pop	r17
    1130:	08 95       	ret

00001132 <CLCD_voidSendData>:

void CLCD_voidSendData(u8 Copy_u8Data)
{
    1132:	1f 93       	push	r17
    1134:	df 93       	push	r29
    1136:	cf 93       	push	r28
    1138:	cd b7       	in	r28, 0x3d	; 61
    113a:	de b7       	in	r29, 0x3e	; 62
    113c:	ea 97       	sbiw	r28, 0x3a	; 58
    113e:	0f b6       	in	r0, 0x3f	; 63
    1140:	f8 94       	cli
    1142:	de bf       	out	0x3e, r29	; 62
    1144:	0f be       	out	0x3f, r0	; 63
    1146:	cd bf       	out	0x3d, r28	; 61
    1148:	8a af       	std	Y+58, r24	; 0x3a

	if(Local_u8SetPositionY>CLCD_COL_NUM)
    114a:	80 91 83 01 	lds	r24, 0x0183
    114e:	80 31       	cpi	r24, 0x10	; 16
    1150:	c8 f0       	brcs	.+50     	; 0x1184 <CLCD_voidSendData+0x52>
	{
		if(Local_u8SetPositionX>CLCD_ROW_NUM)
    1152:	80 91 82 01 	lds	r24, 0x0182
    1156:	84 30       	cpi	r24, 0x04	; 4
    1158:	10 f0       	brcs	.+4      	; 0x115e <CLCD_voidSendData+0x2c>
		{
			Local_u8SetPositionX = X_INITIAL_POSITION;
    115a:	10 92 82 01 	sts	0x0182, r1
		}
		DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN4,DIO_u8PIN_HIGH);
    115e:	80 e0       	ldi	r24, 0x00	; 0
    1160:	64 e0       	ldi	r22, 0x04	; 4
    1162:	41 e0       	ldi	r20, 0x01	; 1
    1164:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <DIO_u8SetPinValue>
		Local_u8SetPositionY = Y_INITIAL_POSITION;
    1168:	10 92 83 01 	sts	0x0183, r1
		Local_u8SetPositionX++;
    116c:	80 91 82 01 	lds	r24, 0x0182
    1170:	8f 5f       	subi	r24, 0xFF	; 255
    1172:	80 93 82 01 	sts	0x0182, r24
		CLCD_voidGoToXY(Local_u8SetPositionX,Local_u8SetPositionY);
    1176:	80 91 82 01 	lds	r24, 0x0182
    117a:	90 91 83 01 	lds	r25, 0x0183
    117e:	69 2f       	mov	r22, r25
    1180:	0e 94 97 0b 	call	0x172e	; 0x172e <CLCD_voidGoToXY>
	}
	Local_u8SetPositionY++;
    1184:	80 91 83 01 	lds	r24, 0x0183
    1188:	8f 5f       	subi	r24, 0xFF	; 255
    118a:	80 93 83 01 	sts	0x0183, r24


	/*Set RS Pin to low to send data */
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_HIGH);
    118e:	80 e0       	ldi	r24, 0x00	; 0
    1190:	61 e0       	ldi	r22, 0x01	; 1
    1192:	41 e0       	ldi	r20, 0x01	; 1
    1194:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <DIO_u8SetPinValue>
#elif   MODE_SELECT ==_4_BIT_MODE

#if DRIVER_PURPOUSE == PROTEUS
	u8 Local_u8Data = (((Copy_u8Data) & CLCD_COMMAND_PROTEUS_MASK) | DIO_u8AndWithPort(CLCD_DATA_PORT, CLCD_DATA_PORT_PROTEUS_MASK));
#elif DRIVER_PURPOUSE == ATMEGA_KIT
	u8 Local_u8Data = (((Copy_u8Data>>1) & CLCD_COMMAND_ATMEGA_KIT_MASK) | DIO_u8AndWithPort(CLCD_DATA_PORT, CLCD_DATA_PORT_ATMEGA_KIT_MASK));
    1198:	8a ad       	ldd	r24, Y+58	; 0x3a
    119a:	86 95       	lsr	r24
    119c:	18 2f       	mov	r17, r24
    119e:	18 77       	andi	r17, 0x78	; 120
    11a0:	80 e0       	ldi	r24, 0x00	; 0
    11a2:	67 e8       	ldi	r22, 0x87	; 135
    11a4:	0e 94 57 0f 	call	0x1eae	; 0x1eae <DIO_u8AndWithPort>
    11a8:	81 2b       	or	r24, r17
    11aa:	89 af       	std	Y+57, r24	; 0x39
#endif
	/* Set Command to data pins */
	DIO_u8SetPortValue(CLCD_DATA_PORT,Local_u8Data);
    11ac:	80 e0       	ldi	r24, 0x00	; 0
    11ae:	69 ad       	ldd	r22, Y+57	; 0x39
    11b0:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <DIO_u8SetPortValue>

	/*Send Enable pulse */
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    11b4:	80 e0       	ldi	r24, 0x00	; 0
    11b6:	62 e0       	ldi	r22, 0x02	; 2
    11b8:	41 e0       	ldi	r20, 0x01	; 1
    11ba:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <DIO_u8SetPinValue>
    11be:	80 e0       	ldi	r24, 0x00	; 0
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	a0 e0       	ldi	r26, 0x00	; 0
    11c4:	b0 e4       	ldi	r27, 0x40	; 64
    11c6:	8d ab       	std	Y+53, r24	; 0x35
    11c8:	9e ab       	std	Y+54, r25	; 0x36
    11ca:	af ab       	std	Y+55, r26	; 0x37
    11cc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11ce:	6d a9       	ldd	r22, Y+53	; 0x35
    11d0:	7e a9       	ldd	r23, Y+54	; 0x36
    11d2:	8f a9       	ldd	r24, Y+55	; 0x37
    11d4:	98 ad       	ldd	r25, Y+56	; 0x38
    11d6:	20 e0       	ldi	r18, 0x00	; 0
    11d8:	30 e0       	ldi	r19, 0x00	; 0
    11da:	4a e7       	ldi	r20, 0x7A	; 122
    11dc:	55 e4       	ldi	r21, 0x45	; 69
    11de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11e2:	dc 01       	movw	r26, r24
    11e4:	cb 01       	movw	r24, r22
    11e6:	89 ab       	std	Y+49, r24	; 0x31
    11e8:	9a ab       	std	Y+50, r25	; 0x32
    11ea:	ab ab       	std	Y+51, r26	; 0x33
    11ec:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    11ee:	69 a9       	ldd	r22, Y+49	; 0x31
    11f0:	7a a9       	ldd	r23, Y+50	; 0x32
    11f2:	8b a9       	ldd	r24, Y+51	; 0x33
    11f4:	9c a9       	ldd	r25, Y+52	; 0x34
    11f6:	20 e0       	ldi	r18, 0x00	; 0
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	40 e8       	ldi	r20, 0x80	; 128
    11fc:	5f e3       	ldi	r21, 0x3F	; 63
    11fe:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    1202:	88 23       	and	r24, r24
    1204:	2c f4       	brge	.+10     	; 0x1210 <CLCD_voidSendData+0xde>
		__ticks = 1;
    1206:	81 e0       	ldi	r24, 0x01	; 1
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	98 ab       	std	Y+48, r25	; 0x30
    120c:	8f a7       	std	Y+47, r24	; 0x2f
    120e:	3f c0       	rjmp	.+126    	; 0x128e <CLCD_voidSendData+0x15c>
	else if (__tmp > 65535)
    1210:	69 a9       	ldd	r22, Y+49	; 0x31
    1212:	7a a9       	ldd	r23, Y+50	; 0x32
    1214:	8b a9       	ldd	r24, Y+51	; 0x33
    1216:	9c a9       	ldd	r25, Y+52	; 0x34
    1218:	20 e0       	ldi	r18, 0x00	; 0
    121a:	3f ef       	ldi	r19, 0xFF	; 255
    121c:	4f e7       	ldi	r20, 0x7F	; 127
    121e:	57 e4       	ldi	r21, 0x47	; 71
    1220:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    1224:	18 16       	cp	r1, r24
    1226:	4c f5       	brge	.+82     	; 0x127a <CLCD_voidSendData+0x148>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1228:	6d a9       	ldd	r22, Y+53	; 0x35
    122a:	7e a9       	ldd	r23, Y+54	; 0x36
    122c:	8f a9       	ldd	r24, Y+55	; 0x37
    122e:	98 ad       	ldd	r25, Y+56	; 0x38
    1230:	20 e0       	ldi	r18, 0x00	; 0
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	40 e2       	ldi	r20, 0x20	; 32
    1236:	51 e4       	ldi	r21, 0x41	; 65
    1238:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    123c:	dc 01       	movw	r26, r24
    123e:	cb 01       	movw	r24, r22
    1240:	bc 01       	movw	r22, r24
    1242:	cd 01       	movw	r24, r26
    1244:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1248:	dc 01       	movw	r26, r24
    124a:	cb 01       	movw	r24, r22
    124c:	98 ab       	std	Y+48, r25	; 0x30
    124e:	8f a7       	std	Y+47, r24	; 0x2f
    1250:	0f c0       	rjmp	.+30     	; 0x1270 <CLCD_voidSendData+0x13e>
    1252:	80 e9       	ldi	r24, 0x90	; 144
    1254:	91 e0       	ldi	r25, 0x01	; 1
    1256:	9e a7       	std	Y+46, r25	; 0x2e
    1258:	8d a7       	std	Y+45, r24	; 0x2d
    125a:	8d a5       	ldd	r24, Y+45	; 0x2d
    125c:	9e a5       	ldd	r25, Y+46	; 0x2e
    125e:	01 97       	sbiw	r24, 0x01	; 1
    1260:	f1 f7       	brne	.-4      	; 0x125e <CLCD_voidSendData+0x12c>
    1262:	9e a7       	std	Y+46, r25	; 0x2e
    1264:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1266:	8f a5       	ldd	r24, Y+47	; 0x2f
    1268:	98 a9       	ldd	r25, Y+48	; 0x30
    126a:	01 97       	sbiw	r24, 0x01	; 1
    126c:	98 ab       	std	Y+48, r25	; 0x30
    126e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1270:	8f a5       	ldd	r24, Y+47	; 0x2f
    1272:	98 a9       	ldd	r25, Y+48	; 0x30
    1274:	00 97       	sbiw	r24, 0x00	; 0
    1276:	69 f7       	brne	.-38     	; 0x1252 <CLCD_voidSendData+0x120>
    1278:	14 c0       	rjmp	.+40     	; 0x12a2 <CLCD_voidSendData+0x170>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    127a:	69 a9       	ldd	r22, Y+49	; 0x31
    127c:	7a a9       	ldd	r23, Y+50	; 0x32
    127e:	8b a9       	ldd	r24, Y+51	; 0x33
    1280:	9c a9       	ldd	r25, Y+52	; 0x34
    1282:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1286:	dc 01       	movw	r26, r24
    1288:	cb 01       	movw	r24, r22
    128a:	98 ab       	std	Y+48, r25	; 0x30
    128c:	8f a7       	std	Y+47, r24	; 0x2f
    128e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1290:	98 a9       	ldd	r25, Y+48	; 0x30
    1292:	9c a7       	std	Y+44, r25	; 0x2c
    1294:	8b a7       	std	Y+43, r24	; 0x2b
    1296:	8b a5       	ldd	r24, Y+43	; 0x2b
    1298:	9c a5       	ldd	r25, Y+44	; 0x2c
    129a:	01 97       	sbiw	r24, 0x01	; 1
    129c:	f1 f7       	brne	.-4      	; 0x129a <CLCD_voidSendData+0x168>
    129e:	9c a7       	std	Y+44, r25	; 0x2c
    12a0:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    12a2:	80 e0       	ldi	r24, 0x00	; 0
    12a4:	62 e0       	ldi	r22, 0x02	; 2
    12a6:	40 e0       	ldi	r20, 0x00	; 0
    12a8:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <DIO_u8SetPinValue>
    12ac:	80 e0       	ldi	r24, 0x00	; 0
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	a0 ea       	ldi	r26, 0xA0	; 160
    12b2:	b0 e4       	ldi	r27, 0x40	; 64
    12b4:	8f a3       	std	Y+39, r24	; 0x27
    12b6:	98 a7       	std	Y+40, r25	; 0x28
    12b8:	a9 a7       	std	Y+41, r26	; 0x29
    12ba:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12bc:	6f a1       	ldd	r22, Y+39	; 0x27
    12be:	78 a5       	ldd	r23, Y+40	; 0x28
    12c0:	89 a5       	ldd	r24, Y+41	; 0x29
    12c2:	9a a5       	ldd	r25, Y+42	; 0x2a
    12c4:	20 e0       	ldi	r18, 0x00	; 0
    12c6:	30 e0       	ldi	r19, 0x00	; 0
    12c8:	4a e7       	ldi	r20, 0x7A	; 122
    12ca:	55 e4       	ldi	r21, 0x45	; 69
    12cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12d0:	dc 01       	movw	r26, r24
    12d2:	cb 01       	movw	r24, r22
    12d4:	8b a3       	std	Y+35, r24	; 0x23
    12d6:	9c a3       	std	Y+36, r25	; 0x24
    12d8:	ad a3       	std	Y+37, r26	; 0x25
    12da:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    12dc:	6b a1       	ldd	r22, Y+35	; 0x23
    12de:	7c a1       	ldd	r23, Y+36	; 0x24
    12e0:	8d a1       	ldd	r24, Y+37	; 0x25
    12e2:	9e a1       	ldd	r25, Y+38	; 0x26
    12e4:	20 e0       	ldi	r18, 0x00	; 0
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	40 e8       	ldi	r20, 0x80	; 128
    12ea:	5f e3       	ldi	r21, 0x3F	; 63
    12ec:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    12f0:	88 23       	and	r24, r24
    12f2:	2c f4       	brge	.+10     	; 0x12fe <CLCD_voidSendData+0x1cc>
		__ticks = 1;
    12f4:	81 e0       	ldi	r24, 0x01	; 1
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	9a a3       	std	Y+34, r25	; 0x22
    12fa:	89 a3       	std	Y+33, r24	; 0x21
    12fc:	3f c0       	rjmp	.+126    	; 0x137c <CLCD_voidSendData+0x24a>
	else if (__tmp > 65535)
    12fe:	6b a1       	ldd	r22, Y+35	; 0x23
    1300:	7c a1       	ldd	r23, Y+36	; 0x24
    1302:	8d a1       	ldd	r24, Y+37	; 0x25
    1304:	9e a1       	ldd	r25, Y+38	; 0x26
    1306:	20 e0       	ldi	r18, 0x00	; 0
    1308:	3f ef       	ldi	r19, 0xFF	; 255
    130a:	4f e7       	ldi	r20, 0x7F	; 127
    130c:	57 e4       	ldi	r21, 0x47	; 71
    130e:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    1312:	18 16       	cp	r1, r24
    1314:	4c f5       	brge	.+82     	; 0x1368 <CLCD_voidSendData+0x236>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1316:	6f a1       	ldd	r22, Y+39	; 0x27
    1318:	78 a5       	ldd	r23, Y+40	; 0x28
    131a:	89 a5       	ldd	r24, Y+41	; 0x29
    131c:	9a a5       	ldd	r25, Y+42	; 0x2a
    131e:	20 e0       	ldi	r18, 0x00	; 0
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	40 e2       	ldi	r20, 0x20	; 32
    1324:	51 e4       	ldi	r21, 0x41	; 65
    1326:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    132a:	dc 01       	movw	r26, r24
    132c:	cb 01       	movw	r24, r22
    132e:	bc 01       	movw	r22, r24
    1330:	cd 01       	movw	r24, r26
    1332:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1336:	dc 01       	movw	r26, r24
    1338:	cb 01       	movw	r24, r22
    133a:	9a a3       	std	Y+34, r25	; 0x22
    133c:	89 a3       	std	Y+33, r24	; 0x21
    133e:	0f c0       	rjmp	.+30     	; 0x135e <CLCD_voidSendData+0x22c>
    1340:	80 e9       	ldi	r24, 0x90	; 144
    1342:	91 e0       	ldi	r25, 0x01	; 1
    1344:	98 a3       	std	Y+32, r25	; 0x20
    1346:	8f 8f       	std	Y+31, r24	; 0x1f
    1348:	8f 8d       	ldd	r24, Y+31	; 0x1f
    134a:	98 a1       	ldd	r25, Y+32	; 0x20
    134c:	01 97       	sbiw	r24, 0x01	; 1
    134e:	f1 f7       	brne	.-4      	; 0x134c <CLCD_voidSendData+0x21a>
    1350:	98 a3       	std	Y+32, r25	; 0x20
    1352:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1354:	89 a1       	ldd	r24, Y+33	; 0x21
    1356:	9a a1       	ldd	r25, Y+34	; 0x22
    1358:	01 97       	sbiw	r24, 0x01	; 1
    135a:	9a a3       	std	Y+34, r25	; 0x22
    135c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    135e:	89 a1       	ldd	r24, Y+33	; 0x21
    1360:	9a a1       	ldd	r25, Y+34	; 0x22
    1362:	00 97       	sbiw	r24, 0x00	; 0
    1364:	69 f7       	brne	.-38     	; 0x1340 <CLCD_voidSendData+0x20e>
    1366:	14 c0       	rjmp	.+40     	; 0x1390 <CLCD_voidSendData+0x25e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1368:	6b a1       	ldd	r22, Y+35	; 0x23
    136a:	7c a1       	ldd	r23, Y+36	; 0x24
    136c:	8d a1       	ldd	r24, Y+37	; 0x25
    136e:	9e a1       	ldd	r25, Y+38	; 0x26
    1370:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1374:	dc 01       	movw	r26, r24
    1376:	cb 01       	movw	r24, r22
    1378:	9a a3       	std	Y+34, r25	; 0x22
    137a:	89 a3       	std	Y+33, r24	; 0x21
    137c:	89 a1       	ldd	r24, Y+33	; 0x21
    137e:	9a a1       	ldd	r25, Y+34	; 0x22
    1380:	9e 8f       	std	Y+30, r25	; 0x1e
    1382:	8d 8f       	std	Y+29, r24	; 0x1d
    1384:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1386:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1388:	01 97       	sbiw	r24, 0x01	; 1
    138a:	f1 f7       	brne	.-4      	; 0x1388 <CLCD_voidSendData+0x256>
    138c:	9e 8f       	std	Y+30, r25	; 0x1e
    138e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);
#if DRIVER_PURPOUSE == PROTEUS
	Local_u8Data = ((Copy_u8Data <<4) |DIO_u8AndWithPort(CLCD_DATA_PORT, CLCD_DATA_PORT_PROTEUS_MASK));
#elif DRIVER_PURPOUSE == ATMEGA_KIT
	Local_u8Data = ((Copy_u8Data <<3) |DIO_u8AndWithPort(CLCD_DATA_PORT, CLCD_DATA_PORT_ATMEGA_KIT_MASK));
    1390:	8a ad       	ldd	r24, Y+58	; 0x3a
    1392:	88 2f       	mov	r24, r24
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	88 0f       	add	r24, r24
    1398:	99 1f       	adc	r25, r25
    139a:	88 0f       	add	r24, r24
    139c:	99 1f       	adc	r25, r25
    139e:	88 0f       	add	r24, r24
    13a0:	99 1f       	adc	r25, r25
    13a2:	18 2f       	mov	r17, r24
    13a4:	80 e0       	ldi	r24, 0x00	; 0
    13a6:	67 e8       	ldi	r22, 0x87	; 135
    13a8:	0e 94 57 0f 	call	0x1eae	; 0x1eae <DIO_u8AndWithPort>
    13ac:	81 2b       	or	r24, r17
    13ae:	89 af       	std	Y+57, r24	; 0x39
#endif
	DIO_u8SetPortValue(CLCD_DATA_PORT,Local_u8Data);
    13b0:	80 e0       	ldi	r24, 0x00	; 0
    13b2:	69 ad       	ldd	r22, Y+57	; 0x39
    13b4:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <DIO_u8SetPortValue>

	/*Send Enable pulse */
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    13b8:	80 e0       	ldi	r24, 0x00	; 0
    13ba:	62 e0       	ldi	r22, 0x02	; 2
    13bc:	41 e0       	ldi	r20, 0x01	; 1
    13be:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <DIO_u8SetPinValue>
    13c2:	80 e0       	ldi	r24, 0x00	; 0
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	a0 e0       	ldi	r26, 0x00	; 0
    13c8:	b0 e4       	ldi	r27, 0x40	; 64
    13ca:	89 8f       	std	Y+25, r24	; 0x19
    13cc:	9a 8f       	std	Y+26, r25	; 0x1a
    13ce:	ab 8f       	std	Y+27, r26	; 0x1b
    13d0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13d2:	69 8d       	ldd	r22, Y+25	; 0x19
    13d4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13da:	20 e0       	ldi	r18, 0x00	; 0
    13dc:	30 e0       	ldi	r19, 0x00	; 0
    13de:	4a e7       	ldi	r20, 0x7A	; 122
    13e0:	55 e4       	ldi	r21, 0x45	; 69
    13e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13e6:	dc 01       	movw	r26, r24
    13e8:	cb 01       	movw	r24, r22
    13ea:	8d 8b       	std	Y+21, r24	; 0x15
    13ec:	9e 8b       	std	Y+22, r25	; 0x16
    13ee:	af 8b       	std	Y+23, r26	; 0x17
    13f0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    13f2:	6d 89       	ldd	r22, Y+21	; 0x15
    13f4:	7e 89       	ldd	r23, Y+22	; 0x16
    13f6:	8f 89       	ldd	r24, Y+23	; 0x17
    13f8:	98 8d       	ldd	r25, Y+24	; 0x18
    13fa:	20 e0       	ldi	r18, 0x00	; 0
    13fc:	30 e0       	ldi	r19, 0x00	; 0
    13fe:	40 e8       	ldi	r20, 0x80	; 128
    1400:	5f e3       	ldi	r21, 0x3F	; 63
    1402:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    1406:	88 23       	and	r24, r24
    1408:	2c f4       	brge	.+10     	; 0x1414 <CLCD_voidSendData+0x2e2>
		__ticks = 1;
    140a:	81 e0       	ldi	r24, 0x01	; 1
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	9c 8b       	std	Y+20, r25	; 0x14
    1410:	8b 8b       	std	Y+19, r24	; 0x13
    1412:	3f c0       	rjmp	.+126    	; 0x1492 <CLCD_voidSendData+0x360>
	else if (__tmp > 65535)
    1414:	6d 89       	ldd	r22, Y+21	; 0x15
    1416:	7e 89       	ldd	r23, Y+22	; 0x16
    1418:	8f 89       	ldd	r24, Y+23	; 0x17
    141a:	98 8d       	ldd	r25, Y+24	; 0x18
    141c:	20 e0       	ldi	r18, 0x00	; 0
    141e:	3f ef       	ldi	r19, 0xFF	; 255
    1420:	4f e7       	ldi	r20, 0x7F	; 127
    1422:	57 e4       	ldi	r21, 0x47	; 71
    1424:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    1428:	18 16       	cp	r1, r24
    142a:	4c f5       	brge	.+82     	; 0x147e <CLCD_voidSendData+0x34c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    142c:	69 8d       	ldd	r22, Y+25	; 0x19
    142e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1430:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1432:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1434:	20 e0       	ldi	r18, 0x00	; 0
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	40 e2       	ldi	r20, 0x20	; 32
    143a:	51 e4       	ldi	r21, 0x41	; 65
    143c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1440:	dc 01       	movw	r26, r24
    1442:	cb 01       	movw	r24, r22
    1444:	bc 01       	movw	r22, r24
    1446:	cd 01       	movw	r24, r26
    1448:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    144c:	dc 01       	movw	r26, r24
    144e:	cb 01       	movw	r24, r22
    1450:	9c 8b       	std	Y+20, r25	; 0x14
    1452:	8b 8b       	std	Y+19, r24	; 0x13
    1454:	0f c0       	rjmp	.+30     	; 0x1474 <CLCD_voidSendData+0x342>
    1456:	80 e9       	ldi	r24, 0x90	; 144
    1458:	91 e0       	ldi	r25, 0x01	; 1
    145a:	9a 8b       	std	Y+18, r25	; 0x12
    145c:	89 8b       	std	Y+17, r24	; 0x11
    145e:	89 89       	ldd	r24, Y+17	; 0x11
    1460:	9a 89       	ldd	r25, Y+18	; 0x12
    1462:	01 97       	sbiw	r24, 0x01	; 1
    1464:	f1 f7       	brne	.-4      	; 0x1462 <CLCD_voidSendData+0x330>
    1466:	9a 8b       	std	Y+18, r25	; 0x12
    1468:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    146a:	8b 89       	ldd	r24, Y+19	; 0x13
    146c:	9c 89       	ldd	r25, Y+20	; 0x14
    146e:	01 97       	sbiw	r24, 0x01	; 1
    1470:	9c 8b       	std	Y+20, r25	; 0x14
    1472:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1474:	8b 89       	ldd	r24, Y+19	; 0x13
    1476:	9c 89       	ldd	r25, Y+20	; 0x14
    1478:	00 97       	sbiw	r24, 0x00	; 0
    147a:	69 f7       	brne	.-38     	; 0x1456 <CLCD_voidSendData+0x324>
    147c:	14 c0       	rjmp	.+40     	; 0x14a6 <CLCD_voidSendData+0x374>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    147e:	6d 89       	ldd	r22, Y+21	; 0x15
    1480:	7e 89       	ldd	r23, Y+22	; 0x16
    1482:	8f 89       	ldd	r24, Y+23	; 0x17
    1484:	98 8d       	ldd	r25, Y+24	; 0x18
    1486:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    148a:	dc 01       	movw	r26, r24
    148c:	cb 01       	movw	r24, r22
    148e:	9c 8b       	std	Y+20, r25	; 0x14
    1490:	8b 8b       	std	Y+19, r24	; 0x13
    1492:	8b 89       	ldd	r24, Y+19	; 0x13
    1494:	9c 89       	ldd	r25, Y+20	; 0x14
    1496:	98 8b       	std	Y+16, r25	; 0x10
    1498:	8f 87       	std	Y+15, r24	; 0x0f
    149a:	8f 85       	ldd	r24, Y+15	; 0x0f
    149c:	98 89       	ldd	r25, Y+16	; 0x10
    149e:	01 97       	sbiw	r24, 0x01	; 1
    14a0:	f1 f7       	brne	.-4      	; 0x149e <CLCD_voidSendData+0x36c>
    14a2:	98 8b       	std	Y+16, r25	; 0x10
    14a4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    14a6:	80 e0       	ldi	r24, 0x00	; 0
    14a8:	62 e0       	ldi	r22, 0x02	; 2
    14aa:	40 e0       	ldi	r20, 0x00	; 0
    14ac:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <DIO_u8SetPinValue>
    14b0:	80 e0       	ldi	r24, 0x00	; 0
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	a0 ea       	ldi	r26, 0xA0	; 160
    14b6:	b0 e4       	ldi	r27, 0x40	; 64
    14b8:	8b 87       	std	Y+11, r24	; 0x0b
    14ba:	9c 87       	std	Y+12, r25	; 0x0c
    14bc:	ad 87       	std	Y+13, r26	; 0x0d
    14be:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    14c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    14c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    14c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    14c8:	20 e0       	ldi	r18, 0x00	; 0
    14ca:	30 e0       	ldi	r19, 0x00	; 0
    14cc:	4a e7       	ldi	r20, 0x7A	; 122
    14ce:	55 e4       	ldi	r21, 0x45	; 69
    14d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14d4:	dc 01       	movw	r26, r24
    14d6:	cb 01       	movw	r24, r22
    14d8:	8f 83       	std	Y+7, r24	; 0x07
    14da:	98 87       	std	Y+8, r25	; 0x08
    14dc:	a9 87       	std	Y+9, r26	; 0x09
    14de:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14e0:	6f 81       	ldd	r22, Y+7	; 0x07
    14e2:	78 85       	ldd	r23, Y+8	; 0x08
    14e4:	89 85       	ldd	r24, Y+9	; 0x09
    14e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    14e8:	20 e0       	ldi	r18, 0x00	; 0
    14ea:	30 e0       	ldi	r19, 0x00	; 0
    14ec:	40 e8       	ldi	r20, 0x80	; 128
    14ee:	5f e3       	ldi	r21, 0x3F	; 63
    14f0:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    14f4:	88 23       	and	r24, r24
    14f6:	2c f4       	brge	.+10     	; 0x1502 <CLCD_voidSendData+0x3d0>
		__ticks = 1;
    14f8:	81 e0       	ldi	r24, 0x01	; 1
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	9e 83       	std	Y+6, r25	; 0x06
    14fe:	8d 83       	std	Y+5, r24	; 0x05
    1500:	3f c0       	rjmp	.+126    	; 0x1580 <CLCD_voidSendData+0x44e>
	else if (__tmp > 65535)
    1502:	6f 81       	ldd	r22, Y+7	; 0x07
    1504:	78 85       	ldd	r23, Y+8	; 0x08
    1506:	89 85       	ldd	r24, Y+9	; 0x09
    1508:	9a 85       	ldd	r25, Y+10	; 0x0a
    150a:	20 e0       	ldi	r18, 0x00	; 0
    150c:	3f ef       	ldi	r19, 0xFF	; 255
    150e:	4f e7       	ldi	r20, 0x7F	; 127
    1510:	57 e4       	ldi	r21, 0x47	; 71
    1512:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    1516:	18 16       	cp	r1, r24
    1518:	4c f5       	brge	.+82     	; 0x156c <CLCD_voidSendData+0x43a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    151a:	6b 85       	ldd	r22, Y+11	; 0x0b
    151c:	7c 85       	ldd	r23, Y+12	; 0x0c
    151e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1520:	9e 85       	ldd	r25, Y+14	; 0x0e
    1522:	20 e0       	ldi	r18, 0x00	; 0
    1524:	30 e0       	ldi	r19, 0x00	; 0
    1526:	40 e2       	ldi	r20, 0x20	; 32
    1528:	51 e4       	ldi	r21, 0x41	; 65
    152a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    152e:	dc 01       	movw	r26, r24
    1530:	cb 01       	movw	r24, r22
    1532:	bc 01       	movw	r22, r24
    1534:	cd 01       	movw	r24, r26
    1536:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    153a:	dc 01       	movw	r26, r24
    153c:	cb 01       	movw	r24, r22
    153e:	9e 83       	std	Y+6, r25	; 0x06
    1540:	8d 83       	std	Y+5, r24	; 0x05
    1542:	0f c0       	rjmp	.+30     	; 0x1562 <CLCD_voidSendData+0x430>
    1544:	80 e9       	ldi	r24, 0x90	; 144
    1546:	91 e0       	ldi	r25, 0x01	; 1
    1548:	9c 83       	std	Y+4, r25	; 0x04
    154a:	8b 83       	std	Y+3, r24	; 0x03
    154c:	8b 81       	ldd	r24, Y+3	; 0x03
    154e:	9c 81       	ldd	r25, Y+4	; 0x04
    1550:	01 97       	sbiw	r24, 0x01	; 1
    1552:	f1 f7       	brne	.-4      	; 0x1550 <CLCD_voidSendData+0x41e>
    1554:	9c 83       	std	Y+4, r25	; 0x04
    1556:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1558:	8d 81       	ldd	r24, Y+5	; 0x05
    155a:	9e 81       	ldd	r25, Y+6	; 0x06
    155c:	01 97       	sbiw	r24, 0x01	; 1
    155e:	9e 83       	std	Y+6, r25	; 0x06
    1560:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1562:	8d 81       	ldd	r24, Y+5	; 0x05
    1564:	9e 81       	ldd	r25, Y+6	; 0x06
    1566:	00 97       	sbiw	r24, 0x00	; 0
    1568:	69 f7       	brne	.-38     	; 0x1544 <CLCD_voidSendData+0x412>
    156a:	14 c0       	rjmp	.+40     	; 0x1594 <CLCD_voidSendData+0x462>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    156c:	6f 81       	ldd	r22, Y+7	; 0x07
    156e:	78 85       	ldd	r23, Y+8	; 0x08
    1570:	89 85       	ldd	r24, Y+9	; 0x09
    1572:	9a 85       	ldd	r25, Y+10	; 0x0a
    1574:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1578:	dc 01       	movw	r26, r24
    157a:	cb 01       	movw	r24, r22
    157c:	9e 83       	std	Y+6, r25	; 0x06
    157e:	8d 83       	std	Y+5, r24	; 0x05
    1580:	8d 81       	ldd	r24, Y+5	; 0x05
    1582:	9e 81       	ldd	r25, Y+6	; 0x06
    1584:	9a 83       	std	Y+2, r25	; 0x02
    1586:	89 83       	std	Y+1, r24	; 0x01
    1588:	89 81       	ldd	r24, Y+1	; 0x01
    158a:	9a 81       	ldd	r25, Y+2	; 0x02
    158c:	01 97       	sbiw	r24, 0x01	; 1
    158e:	f1 f7       	brne	.-4      	; 0x158c <CLCD_voidSendData+0x45a>
    1590:	9a 83       	std	Y+2, r25	; 0x02
    1592:	89 83       	std	Y+1, r24	; 0x01



#endif

}
    1594:	ea 96       	adiw	r28, 0x3a	; 58
    1596:	0f b6       	in	r0, 0x3f	; 63
    1598:	f8 94       	cli
    159a:	de bf       	out	0x3e, r29	; 62
    159c:	0f be       	out	0x3f, r0	; 63
    159e:	cd bf       	out	0x3d, r28	; 61
    15a0:	cf 91       	pop	r28
    15a2:	df 91       	pop	r29
    15a4:	1f 91       	pop	r17
    15a6:	08 95       	ret

000015a8 <CLCD_voidInit>:

void CLCD_voidInit(void)
{
    15a8:	df 93       	push	r29
    15aa:	cf 93       	push	r28
    15ac:	cd b7       	in	r28, 0x3d	; 61
    15ae:	de b7       	in	r29, 0x3e	; 62
    15b0:	2e 97       	sbiw	r28, 0x0e	; 14
    15b2:	0f b6       	in	r0, 0x3f	; 63
    15b4:	f8 94       	cli
    15b6:	de bf       	out	0x3e, r29	; 62
    15b8:	0f be       	out	0x3f, r0	; 63
    15ba:	cd bf       	out	0x3d, r28	; 61
    15bc:	80 e0       	ldi	r24, 0x00	; 0
    15be:	90 e0       	ldi	r25, 0x00	; 0
    15c0:	a0 e2       	ldi	r26, 0x20	; 32
    15c2:	b2 e4       	ldi	r27, 0x42	; 66
    15c4:	8b 87       	std	Y+11, r24	; 0x0b
    15c6:	9c 87       	std	Y+12, r25	; 0x0c
    15c8:	ad 87       	std	Y+13, r26	; 0x0d
    15ca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    15ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    15d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    15d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    15d4:	20 e0       	ldi	r18, 0x00	; 0
    15d6:	30 e0       	ldi	r19, 0x00	; 0
    15d8:	4a e7       	ldi	r20, 0x7A	; 122
    15da:	55 e4       	ldi	r21, 0x45	; 69
    15dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15e0:	dc 01       	movw	r26, r24
    15e2:	cb 01       	movw	r24, r22
    15e4:	8f 83       	std	Y+7, r24	; 0x07
    15e6:	98 87       	std	Y+8, r25	; 0x08
    15e8:	a9 87       	std	Y+9, r26	; 0x09
    15ea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    15ec:	6f 81       	ldd	r22, Y+7	; 0x07
    15ee:	78 85       	ldd	r23, Y+8	; 0x08
    15f0:	89 85       	ldd	r24, Y+9	; 0x09
    15f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    15f4:	20 e0       	ldi	r18, 0x00	; 0
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	40 e8       	ldi	r20, 0x80	; 128
    15fa:	5f e3       	ldi	r21, 0x3F	; 63
    15fc:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    1600:	88 23       	and	r24, r24
    1602:	2c f4       	brge	.+10     	; 0x160e <CLCD_voidInit+0x66>
		__ticks = 1;
    1604:	81 e0       	ldi	r24, 0x01	; 1
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	9e 83       	std	Y+6, r25	; 0x06
    160a:	8d 83       	std	Y+5, r24	; 0x05
    160c:	3f c0       	rjmp	.+126    	; 0x168c <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
    160e:	6f 81       	ldd	r22, Y+7	; 0x07
    1610:	78 85       	ldd	r23, Y+8	; 0x08
    1612:	89 85       	ldd	r24, Y+9	; 0x09
    1614:	9a 85       	ldd	r25, Y+10	; 0x0a
    1616:	20 e0       	ldi	r18, 0x00	; 0
    1618:	3f ef       	ldi	r19, 0xFF	; 255
    161a:	4f e7       	ldi	r20, 0x7F	; 127
    161c:	57 e4       	ldi	r21, 0x47	; 71
    161e:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    1622:	18 16       	cp	r1, r24
    1624:	4c f5       	brge	.+82     	; 0x1678 <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1626:	6b 85       	ldd	r22, Y+11	; 0x0b
    1628:	7c 85       	ldd	r23, Y+12	; 0x0c
    162a:	8d 85       	ldd	r24, Y+13	; 0x0d
    162c:	9e 85       	ldd	r25, Y+14	; 0x0e
    162e:	20 e0       	ldi	r18, 0x00	; 0
    1630:	30 e0       	ldi	r19, 0x00	; 0
    1632:	40 e2       	ldi	r20, 0x20	; 32
    1634:	51 e4       	ldi	r21, 0x41	; 65
    1636:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    163a:	dc 01       	movw	r26, r24
    163c:	cb 01       	movw	r24, r22
    163e:	bc 01       	movw	r22, r24
    1640:	cd 01       	movw	r24, r26
    1642:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1646:	dc 01       	movw	r26, r24
    1648:	cb 01       	movw	r24, r22
    164a:	9e 83       	std	Y+6, r25	; 0x06
    164c:	8d 83       	std	Y+5, r24	; 0x05
    164e:	0f c0       	rjmp	.+30     	; 0x166e <CLCD_voidInit+0xc6>
    1650:	80 e9       	ldi	r24, 0x90	; 144
    1652:	91 e0       	ldi	r25, 0x01	; 1
    1654:	9c 83       	std	Y+4, r25	; 0x04
    1656:	8b 83       	std	Y+3, r24	; 0x03
    1658:	8b 81       	ldd	r24, Y+3	; 0x03
    165a:	9c 81       	ldd	r25, Y+4	; 0x04
    165c:	01 97       	sbiw	r24, 0x01	; 1
    165e:	f1 f7       	brne	.-4      	; 0x165c <CLCD_voidInit+0xb4>
    1660:	9c 83       	std	Y+4, r25	; 0x04
    1662:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1664:	8d 81       	ldd	r24, Y+5	; 0x05
    1666:	9e 81       	ldd	r25, Y+6	; 0x06
    1668:	01 97       	sbiw	r24, 0x01	; 1
    166a:	9e 83       	std	Y+6, r25	; 0x06
    166c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    166e:	8d 81       	ldd	r24, Y+5	; 0x05
    1670:	9e 81       	ldd	r25, Y+6	; 0x06
    1672:	00 97       	sbiw	r24, 0x00	; 0
    1674:	69 f7       	brne	.-38     	; 0x1650 <CLCD_voidInit+0xa8>
    1676:	14 c0       	rjmp	.+40     	; 0x16a0 <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1678:	6f 81       	ldd	r22, Y+7	; 0x07
    167a:	78 85       	ldd	r23, Y+8	; 0x08
    167c:	89 85       	ldd	r24, Y+9	; 0x09
    167e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1680:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1684:	dc 01       	movw	r26, r24
    1686:	cb 01       	movw	r24, r22
    1688:	9e 83       	std	Y+6, r25	; 0x06
    168a:	8d 83       	std	Y+5, r24	; 0x05
    168c:	8d 81       	ldd	r24, Y+5	; 0x05
    168e:	9e 81       	ldd	r25, Y+6	; 0x06
    1690:	9a 83       	std	Y+2, r25	; 0x02
    1692:	89 83       	std	Y+1, r24	; 0x01
    1694:	89 81       	ldd	r24, Y+1	; 0x01
    1696:	9a 81       	ldd	r25, Y+2	; 0x02
    1698:	01 97       	sbiw	r24, 0x01	; 1
    169a:	f1 f7       	brne	.-4      	; 0x1698 <CLCD_voidInit+0xf0>
    169c:	9a 83       	std	Y+2, r25	; 0x02
    169e:	89 83       	std	Y+1, r24	; 0x01
	C_LCD_voidSendCommand(0x01); /* 1 or 0x01 or 0b00000001*/

#elif   MODE_SELECT ==_4_BIT_MODE

	/* Function set command : 2 lines , 5*8 font size */
	C_LCD_voidSendCommand(0x33);
    16a0:	83 e3       	ldi	r24, 0x33	; 51
    16a2:	0e 94 80 06 	call	0xd00	; 0xd00 <C_LCD_voidSendCommand>
	C_LCD_voidSendCommand(0x32);
    16a6:	82 e3       	ldi	r24, 0x32	; 50
    16a8:	0e 94 80 06 	call	0xd00	; 0xd00 <C_LCD_voidSendCommand>
	C_LCD_voidSendCommand(0x28);   /* 0bNFXXXXXX  --> N: no of lines F: font size*/
    16ac:	88 e2       	ldi	r24, 0x28	; 40
    16ae:	0e 94 80 06 	call	0xd00	; 0xd00 <C_LCD_voidSendCommand>


	/*Display on off control : disable enable , disable cursor , no blink cursor*/
	C_LCD_voidSendCommand(0x0C);
    16b2:	8c e0       	ldi	r24, 0x0C	; 12
    16b4:	0e 94 80 06 	call	0xd00	; 0xd00 <C_LCD_voidSendCommand>
	C_LCD_voidSendCommand(0x02);
    16b8:	82 e0       	ldi	r24, 0x02	; 2
    16ba:	0e 94 80 06 	call	0xd00	; 0xd00 <C_LCD_voidSendCommand>

	C_LCD_voidSendCommand(0x06);
    16be:	86 e0       	ldi	r24, 0x06	; 6
    16c0:	0e 94 80 06 	call	0xd00	; 0xd00 <C_LCD_voidSendCommand>

	/* Clear display */
	C_LCD_voidSendCommand(0x01);
    16c4:	81 e0       	ldi	r24, 0x01	; 1
    16c6:	0e 94 80 06 	call	0xd00	; 0xd00 <C_LCD_voidSendCommand>


#endif


}
    16ca:	2e 96       	adiw	r28, 0x0e	; 14
    16cc:	0f b6       	in	r0, 0x3f	; 63
    16ce:	f8 94       	cli
    16d0:	de bf       	out	0x3e, r29	; 62
    16d2:	0f be       	out	0x3f, r0	; 63
    16d4:	cd bf       	out	0x3d, r28	; 61
    16d6:	cf 91       	pop	r28
    16d8:	df 91       	pop	r29
    16da:	08 95       	ret

000016dc <CLCD_voidSendString>:

void CLCD_voidSendString(const char* Copy_pcString )
{
    16dc:	df 93       	push	r29
    16de:	cf 93       	push	r28
    16e0:	00 d0       	rcall	.+0      	; 0x16e2 <CLCD_voidSendString+0x6>
    16e2:	0f 92       	push	r0
    16e4:	cd b7       	in	r28, 0x3d	; 61
    16e6:	de b7       	in	r29, 0x3e	; 62
    16e8:	9b 83       	std	Y+3, r25	; 0x03
    16ea:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Counter = 0;
    16ec:	19 82       	std	Y+1, r1	; 0x01
    16ee:	0e c0       	rjmp	.+28     	; 0x170c <CLCD_voidSendString+0x30>
	while (Copy_pcString[Local_u8Counter] != NULL)
	{
		CLCD_voidSendData(Copy_pcString[Local_u8Counter]);
    16f0:	89 81       	ldd	r24, Y+1	; 0x01
    16f2:	28 2f       	mov	r18, r24
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	8a 81       	ldd	r24, Y+2	; 0x02
    16f8:	9b 81       	ldd	r25, Y+3	; 0x03
    16fa:	fc 01       	movw	r30, r24
    16fc:	e2 0f       	add	r30, r18
    16fe:	f3 1f       	adc	r31, r19
    1700:	80 81       	ld	r24, Z
    1702:	0e 94 99 08 	call	0x1132	; 0x1132 <CLCD_voidSendData>
		Local_u8Counter++;
    1706:	89 81       	ldd	r24, Y+1	; 0x01
    1708:	8f 5f       	subi	r24, 0xFF	; 255
    170a:	89 83       	std	Y+1, r24	; 0x01
}

void CLCD_voidSendString(const char* Copy_pcString )
{
	u8 Local_u8Counter = 0;
	while (Copy_pcString[Local_u8Counter] != NULL)
    170c:	89 81       	ldd	r24, Y+1	; 0x01
    170e:	28 2f       	mov	r18, r24
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	8a 81       	ldd	r24, Y+2	; 0x02
    1714:	9b 81       	ldd	r25, Y+3	; 0x03
    1716:	fc 01       	movw	r30, r24
    1718:	e2 0f       	add	r30, r18
    171a:	f3 1f       	adc	r31, r19
    171c:	80 81       	ld	r24, Z
    171e:	88 23       	and	r24, r24
    1720:	39 f7       	brne	.-50     	; 0x16f0 <CLCD_voidSendString+0x14>
	{
		CLCD_voidSendData(Copy_pcString[Local_u8Counter]);
		Local_u8Counter++;
	}
}
    1722:	0f 90       	pop	r0
    1724:	0f 90       	pop	r0
    1726:	0f 90       	pop	r0
    1728:	cf 91       	pop	r28
    172a:	df 91       	pop	r29
    172c:	08 95       	ret

0000172e <CLCD_voidGoToXY>:

void CLCD_voidGoToXY(u8 Copy_u8Xpos, u8 Copy_u8Ypos)
{
    172e:	df 93       	push	r29
    1730:	cf 93       	push	r28
    1732:	00 d0       	rcall	.+0      	; 0x1734 <CLCD_voidGoToXY+0x6>
    1734:	0f 92       	push	r0
    1736:	cd b7       	in	r28, 0x3d	; 61
    1738:	de b7       	in	r29, 0x3e	; 62
    173a:	8a 83       	std	Y+2, r24	; 0x02
    173c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Adress=0;
    173e:	19 82       	std	Y+1, r1	; 0x01
	Local_u8SetPositionY = Copy_u8Ypos;
    1740:	8b 81       	ldd	r24, Y+3	; 0x03
    1742:	80 93 83 01 	sts	0x0183, r24
	Local_u8SetPositionX = Copy_u8Xpos;
    1746:	8a 81       	ldd	r24, Y+2	; 0x02
    1748:	80 93 82 01 	sts	0x0182, r24
	if (Copy_u8Xpos == 0)                      // First Line
    174c:	8a 81       	ldd	r24, Y+2	; 0x02
    174e:	88 23       	and	r24, r24
    1750:	19 f4       	brne	.+6      	; 0x1758 <CLCD_voidGoToXY+0x2a>
	{
		Local_u8Adress = Copy_u8Ypos;
    1752:	8b 81       	ldd	r24, Y+3	; 0x03
    1754:	89 83       	std	Y+1, r24	; 0x01
    1756:	14 c0       	rjmp	.+40     	; 0x1780 <CLCD_voidGoToXY+0x52>
	}
	else if (Copy_u8Xpos == 1)                // Second Line
    1758:	8a 81       	ldd	r24, Y+2	; 0x02
    175a:	81 30       	cpi	r24, 0x01	; 1
    175c:	21 f4       	brne	.+8      	; 0x1766 <CLCD_voidGoToXY+0x38>
	{
		Local_u8Adress = Copy_u8Ypos+0x40;
    175e:	8b 81       	ldd	r24, Y+3	; 0x03
    1760:	80 5c       	subi	r24, 0xC0	; 192
    1762:	89 83       	std	Y+1, r24	; 0x01
    1764:	0d c0       	rjmp	.+26     	; 0x1780 <CLCD_voidGoToXY+0x52>
	}
	else if (Copy_u8Xpos == 2)                // Third Line
    1766:	8a 81       	ldd	r24, Y+2	; 0x02
    1768:	82 30       	cpi	r24, 0x02	; 2
    176a:	21 f4       	brne	.+8      	; 0x1774 <CLCD_voidGoToXY+0x46>
	{
		Local_u8Adress = Copy_u8Ypos+0x10;
    176c:	8b 81       	ldd	r24, Y+3	; 0x03
    176e:	80 5f       	subi	r24, 0xF0	; 240
    1770:	89 83       	std	Y+1, r24	; 0x01
    1772:	06 c0       	rjmp	.+12     	; 0x1780 <CLCD_voidGoToXY+0x52>
	}
	else if (Copy_u8Xpos == 3)                // Fourth Line
    1774:	8a 81       	ldd	r24, Y+2	; 0x02
    1776:	83 30       	cpi	r24, 0x03	; 3
    1778:	19 f4       	brne	.+6      	; 0x1780 <CLCD_voidGoToXY+0x52>
	{
		Local_u8Adress = Copy_u8Ypos+0x50;
    177a:	8b 81       	ldd	r24, Y+3	; 0x03
    177c:	80 5b       	subi	r24, 0xB0	; 176
    177e:	89 83       	std	Y+1, r24	; 0x01
	}

	C_LCD_voidSendCommand(Local_u8Adress+128);
    1780:	89 81       	ldd	r24, Y+1	; 0x01
    1782:	80 58       	subi	r24, 0x80	; 128
    1784:	0e 94 80 06 	call	0xd00	; 0xd00 <C_LCD_voidSendCommand>



}
    1788:	0f 90       	pop	r0
    178a:	0f 90       	pop	r0
    178c:	0f 90       	pop	r0
    178e:	cf 91       	pop	r28
    1790:	df 91       	pop	r29
    1792:	08 95       	ret

00001794 <CLCD_voidWriteSpecialCharacter>:

void CLCD_voidWriteSpecialCharacter(u8* Copy_pu8Pattern, u8 Copy_u8PatternNumber, u8 Copy_u8XPos, u8 Copy_u8YPos)
{
    1794:	df 93       	push	r29
    1796:	cf 93       	push	r28
    1798:	cd b7       	in	r28, 0x3d	; 61
    179a:	de b7       	in	r29, 0x3e	; 62
    179c:	27 97       	sbiw	r28, 0x07	; 7
    179e:	0f b6       	in	r0, 0x3f	; 63
    17a0:	f8 94       	cli
    17a2:	de bf       	out	0x3e, r29	; 62
    17a4:	0f be       	out	0x3f, r0	; 63
    17a6:	cd bf       	out	0x3d, r28	; 61
    17a8:	9c 83       	std	Y+4, r25	; 0x04
    17aa:	8b 83       	std	Y+3, r24	; 0x03
    17ac:	6d 83       	std	Y+5, r22	; 0x05
    17ae:	4e 83       	std	Y+6, r20	; 0x06
    17b0:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8CGRAMAddress= 0, Local_u8Iterator;
    17b2:	1a 82       	std	Y+2, r1	; 0x02
	/* Calculate the CGRAM address whose each block is 8 bytes */
	Local_u8CGRAMAddress =Copy_u8PatternNumber*8;
    17b4:	8d 81       	ldd	r24, Y+5	; 0x05
    17b6:	88 2f       	mov	r24, r24
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	88 0f       	add	r24, r24
    17bc:	99 1f       	adc	r25, r25
    17be:	88 0f       	add	r24, r24
    17c0:	99 1f       	adc	r25, r25
    17c2:	88 0f       	add	r24, r24
    17c4:	99 1f       	adc	r25, r25
    17c6:	8a 83       	std	Y+2, r24	; 0x02

	/* Send CGRAM Address command to LCD, with setting bit 6, clearing bit 7*/
	C_LCD_voidSendCommand(Local_u8CGRAMAddress+64);
    17c8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ca:	80 5c       	subi	r24, 0xC0	; 192
    17cc:	0e 94 80 06 	call	0xd00	; 0xd00 <C_LCD_voidSendCommand>

	/* Write the pattern into CGRAM */

	for (Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++)
    17d0:	19 82       	std	Y+1, r1	; 0x01
    17d2:	0e c0       	rjmp	.+28     	; 0x17f0 <CLCD_voidWriteSpecialCharacter+0x5c>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Iterator]);
    17d4:	89 81       	ldd	r24, Y+1	; 0x01
    17d6:	28 2f       	mov	r18, r24
    17d8:	30 e0       	ldi	r19, 0x00	; 0
    17da:	8b 81       	ldd	r24, Y+3	; 0x03
    17dc:	9c 81       	ldd	r25, Y+4	; 0x04
    17de:	fc 01       	movw	r30, r24
    17e0:	e2 0f       	add	r30, r18
    17e2:	f3 1f       	adc	r31, r19
    17e4:	80 81       	ld	r24, Z
    17e6:	0e 94 99 08 	call	0x1132	; 0x1132 <CLCD_voidSendData>
	/* Send CGRAM Address command to LCD, with setting bit 6, clearing bit 7*/
	C_LCD_voidSendCommand(Local_u8CGRAMAddress+64);

	/* Write the pattern into CGRAM */

	for (Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++)
    17ea:	89 81       	ldd	r24, Y+1	; 0x01
    17ec:	8f 5f       	subi	r24, 0xFF	; 255
    17ee:	89 83       	std	Y+1, r24	; 0x01
    17f0:	89 81       	ldd	r24, Y+1	; 0x01
    17f2:	88 30       	cpi	r24, 0x08	; 8
    17f4:	78 f3       	brcs	.-34     	; 0x17d4 <CLCD_voidWriteSpecialCharacter+0x40>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8Iterator]);
	}

	/* go back to the DDRAM to display the Pattern*/
	CLCD_voidGoToXY(Copy_u8XPos,Copy_u8YPos);
    17f6:	8e 81       	ldd	r24, Y+6	; 0x06
    17f8:	6f 81       	ldd	r22, Y+7	; 0x07
    17fa:	0e 94 97 0b 	call	0x172e	; 0x172e <CLCD_voidGoToXY>
	/* Display the pattern written in the CGRAM*/
	CLCD_voidSendData(Copy_u8PatternNumber);
    17fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1800:	0e 94 99 08 	call	0x1132	; 0x1132 <CLCD_voidSendData>
}
    1804:	27 96       	adiw	r28, 0x07	; 7
    1806:	0f b6       	in	r0, 0x3f	; 63
    1808:	f8 94       	cli
    180a:	de bf       	out	0x3e, r29	; 62
    180c:	0f be       	out	0x3f, r0	; 63
    180e:	cd bf       	out	0x3d, r28	; 61
    1810:	cf 91       	pop	r28
    1812:	df 91       	pop	r29
    1814:	08 95       	ret

00001816 <CLCD_VoidWriteNumber>:

void CLCD_VoidWriteNumber(f32 Copy_u32Number)
{
    1816:	0f 93       	push	r16
    1818:	1f 93       	push	r17
    181a:	df 93       	push	r29
    181c:	cf 93       	push	r28
    181e:	cd b7       	in	r28, 0x3d	; 61
    1820:	de b7       	in	r29, 0x3e	; 62
    1822:	6d 97       	sbiw	r28, 0x1d	; 29
    1824:	0f b6       	in	r0, 0x3f	; 63
    1826:	f8 94       	cli
    1828:	de bf       	out	0x3e, r29	; 62
    182a:	0f be       	out	0x3f, r0	; 63
    182c:	cd bf       	out	0x3d, r28	; 61
    182e:	6a 8f       	std	Y+26, r22	; 0x1a
    1830:	7b 8f       	std	Y+27, r23	; 0x1b
    1832:	8c 8f       	std	Y+28, r24	; 0x1c
    1834:	9d 8f       	std	Y+29, r25	; 0x1d
	s32 Local_s32Number = Copy_u32Number;
    1836:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1838:	7b 8d       	ldd	r23, Y+27	; 0x1b
    183a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    183c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    183e:	0e 94 37 04 	call	0x86e	; 0x86e <__fixsfsi>
    1842:	dc 01       	movw	r26, r24
    1844:	cb 01       	movw	r24, r22
    1846:	8a 83       	std	Y+2, r24	; 0x02
    1848:	9b 83       	std	Y+3, r25	; 0x03
    184a:	ac 83       	std	Y+4, r26	; 0x04
    184c:	bd 83       	std	Y+5, r27	; 0x05

	if(Local_s32Number == 0)
    184e:	8a 81       	ldd	r24, Y+2	; 0x02
    1850:	9b 81       	ldd	r25, Y+3	; 0x03
    1852:	ac 81       	ldd	r26, Y+4	; 0x04
    1854:	bd 81       	ldd	r27, Y+5	; 0x05
    1856:	00 97       	sbiw	r24, 0x00	; 0
    1858:	a1 05       	cpc	r26, r1
    185a:	b1 05       	cpc	r27, r1
    185c:	21 f4       	brne	.+8      	; 0x1866 <CLCD_VoidWriteNumber+0x50>
	{
		CLCD_voidSendData('0');
    185e:	80 e3       	ldi	r24, 0x30	; 48
    1860:	0e 94 99 08 	call	0x1132	; 0x1132 <CLCD_voidSendData>
    1864:	18 c0       	rjmp	.+48     	; 0x1896 <CLCD_VoidWriteNumber+0x80>
	}
	else if (Local_s32Number <0)
    1866:	8a 81       	ldd	r24, Y+2	; 0x02
    1868:	9b 81       	ldd	r25, Y+3	; 0x03
    186a:	ac 81       	ldd	r26, Y+4	; 0x04
    186c:	bd 81       	ldd	r27, Y+5	; 0x05
    186e:	bb 23       	and	r27, r27
    1870:	94 f4       	brge	.+36     	; 0x1896 <CLCD_VoidWriteNumber+0x80>
	{
		CLCD_voidSendData('-');
    1872:	8d e2       	ldi	r24, 0x2D	; 45
    1874:	0e 94 99 08 	call	0x1132	; 0x1132 <CLCD_voidSendData>
		Local_s32Number = Local_s32Number *(-1);
    1878:	8a 81       	ldd	r24, Y+2	; 0x02
    187a:	9b 81       	ldd	r25, Y+3	; 0x03
    187c:	ac 81       	ldd	r26, Y+4	; 0x04
    187e:	bd 81       	ldd	r27, Y+5	; 0x05
    1880:	b0 95       	com	r27
    1882:	a0 95       	com	r26
    1884:	90 95       	com	r25
    1886:	81 95       	neg	r24
    1888:	9f 4f       	sbci	r25, 0xFF	; 255
    188a:	af 4f       	sbci	r26, 0xFF	; 255
    188c:	bf 4f       	sbci	r27, 0xFF	; 255
    188e:	8a 83       	std	Y+2, r24	; 0x02
    1890:	9b 83       	std	Y+3, r25	; 0x03
    1892:	ac 83       	std	Y+4, r26	; 0x04
    1894:	bd 83       	std	Y+5, r27	; 0x05

	}
	u8 Local_u8Array[20]={0};
    1896:	84 e1       	ldi	r24, 0x14	; 20
    1898:	fe 01       	movw	r30, r28
    189a:	36 96       	adiw	r30, 0x06	; 6
    189c:	df 01       	movw	r26, r30
    189e:	98 2f       	mov	r25, r24
    18a0:	1d 92       	st	X+, r1
    18a2:	9a 95       	dec	r25
    18a4:	e9 f7       	brne	.-6      	; 0x18a0 <CLCD_VoidWriteNumber+0x8a>
	s8 local_s8Counter =0;
    18a6:	19 82       	std	Y+1, r1	; 0x01
    18a8:	2f c0       	rjmp	.+94     	; 0x1908 <CLCD_VoidWriteNumber+0xf2>
	while (Local_s32Number != 0)
	{
		Local_u8Array[local_s8Counter]= Local_s32Number%10;
    18aa:	89 81       	ldd	r24, Y+1	; 0x01
    18ac:	08 2f       	mov	r16, r24
    18ae:	11 27       	eor	r17, r17
    18b0:	07 fd       	sbrc	r16, 7
    18b2:	10 95       	com	r17
    18b4:	8a 81       	ldd	r24, Y+2	; 0x02
    18b6:	9b 81       	ldd	r25, Y+3	; 0x03
    18b8:	ac 81       	ldd	r26, Y+4	; 0x04
    18ba:	bd 81       	ldd	r27, Y+5	; 0x05
    18bc:	2a e0       	ldi	r18, 0x0A	; 10
    18be:	30 e0       	ldi	r19, 0x00	; 0
    18c0:	40 e0       	ldi	r20, 0x00	; 0
    18c2:	50 e0       	ldi	r21, 0x00	; 0
    18c4:	bc 01       	movw	r22, r24
    18c6:	cd 01       	movw	r24, r26
    18c8:	0e 94 d6 22 	call	0x45ac	; 0x45ac <__divmodsi4>
    18cc:	dc 01       	movw	r26, r24
    18ce:	cb 01       	movw	r24, r22
    18d0:	28 2f       	mov	r18, r24
    18d2:	ce 01       	movw	r24, r28
    18d4:	06 96       	adiw	r24, 0x06	; 6
    18d6:	fc 01       	movw	r30, r24
    18d8:	e0 0f       	add	r30, r16
    18da:	f1 1f       	adc	r31, r17
    18dc:	20 83       	st	Z, r18
		Local_s32Number/=10;
    18de:	8a 81       	ldd	r24, Y+2	; 0x02
    18e0:	9b 81       	ldd	r25, Y+3	; 0x03
    18e2:	ac 81       	ldd	r26, Y+4	; 0x04
    18e4:	bd 81       	ldd	r27, Y+5	; 0x05
    18e6:	2a e0       	ldi	r18, 0x0A	; 10
    18e8:	30 e0       	ldi	r19, 0x00	; 0
    18ea:	40 e0       	ldi	r20, 0x00	; 0
    18ec:	50 e0       	ldi	r21, 0x00	; 0
    18ee:	bc 01       	movw	r22, r24
    18f0:	cd 01       	movw	r24, r26
    18f2:	0e 94 d6 22 	call	0x45ac	; 0x45ac <__divmodsi4>
    18f6:	da 01       	movw	r26, r20
    18f8:	c9 01       	movw	r24, r18
    18fa:	8a 83       	std	Y+2, r24	; 0x02
    18fc:	9b 83       	std	Y+3, r25	; 0x03
    18fe:	ac 83       	std	Y+4, r26	; 0x04
    1900:	bd 83       	std	Y+5, r27	; 0x05
		local_s8Counter++;
    1902:	89 81       	ldd	r24, Y+1	; 0x01
    1904:	8f 5f       	subi	r24, 0xFF	; 255
    1906:	89 83       	std	Y+1, r24	; 0x01
		Local_s32Number = Local_s32Number *(-1);

	}
	u8 Local_u8Array[20]={0};
	s8 local_s8Counter =0;
	while (Local_s32Number != 0)
    1908:	8a 81       	ldd	r24, Y+2	; 0x02
    190a:	9b 81       	ldd	r25, Y+3	; 0x03
    190c:	ac 81       	ldd	r26, Y+4	; 0x04
    190e:	bd 81       	ldd	r27, Y+5	; 0x05
    1910:	00 97       	sbiw	r24, 0x00	; 0
    1912:	a1 05       	cpc	r26, r1
    1914:	b1 05       	cpc	r27, r1
    1916:	49 f6       	brne	.-110    	; 0x18aa <CLCD_VoidWriteNumber+0x94>
	{
		Local_u8Array[local_s8Counter]= Local_s32Number%10;
		Local_s32Number/=10;
		local_s8Counter++;
	}
	local_s8Counter--;
    1918:	89 81       	ldd	r24, Y+1	; 0x01
    191a:	81 50       	subi	r24, 0x01	; 1
    191c:	89 83       	std	Y+1, r24	; 0x01
    191e:	11 c0       	rjmp	.+34     	; 0x1942 <CLCD_VoidWriteNumber+0x12c>
	while (local_s8Counter>=0)
	{
		CLCD_voidSendData(Local_u8Array[local_s8Counter]+'0');
    1920:	89 81       	ldd	r24, Y+1	; 0x01
    1922:	28 2f       	mov	r18, r24
    1924:	33 27       	eor	r19, r19
    1926:	27 fd       	sbrc	r18, 7
    1928:	30 95       	com	r19
    192a:	ce 01       	movw	r24, r28
    192c:	06 96       	adiw	r24, 0x06	; 6
    192e:	fc 01       	movw	r30, r24
    1930:	e2 0f       	add	r30, r18
    1932:	f3 1f       	adc	r31, r19
    1934:	80 81       	ld	r24, Z
    1936:	80 5d       	subi	r24, 0xD0	; 208
    1938:	0e 94 99 08 	call	0x1132	; 0x1132 <CLCD_voidSendData>
		local_s8Counter--;
    193c:	89 81       	ldd	r24, Y+1	; 0x01
    193e:	81 50       	subi	r24, 0x01	; 1
    1940:	89 83       	std	Y+1, r24	; 0x01
		Local_u8Array[local_s8Counter]= Local_s32Number%10;
		Local_s32Number/=10;
		local_s8Counter++;
	}
	local_s8Counter--;
	while (local_s8Counter>=0)
    1942:	89 81       	ldd	r24, Y+1	; 0x01
    1944:	88 23       	and	r24, r24
    1946:	64 f7       	brge	.-40     	; 0x1920 <CLCD_VoidWriteNumber+0x10a>
	{
		CLCD_voidSendData(Local_u8Array[local_s8Counter]+'0');
		local_s8Counter--;
	}
}
    1948:	6d 96       	adiw	r28, 0x1d	; 29
    194a:	0f b6       	in	r0, 0x3f	; 63
    194c:	f8 94       	cli
    194e:	de bf       	out	0x3e, r29	; 62
    1950:	0f be       	out	0x3f, r0	; 63
    1952:	cd bf       	out	0x3d, r28	; 61
    1954:	cf 91       	pop	r28
    1956:	df 91       	pop	r29
    1958:	1f 91       	pop	r17
    195a:	0f 91       	pop	r16
    195c:	08 95       	ret

0000195e <CLCD_voidWriteFloatNumber>:

void CLCD_voidWriteFloatNumber(f32 Copy_f32FloatNumber )
{
    195e:	df 93       	push	r29
    1960:	cf 93       	push	r28
    1962:	cd b7       	in	r28, 0x3d	; 61
    1964:	de b7       	in	r29, 0x3e	; 62
    1966:	28 97       	sbiw	r28, 0x08	; 8
    1968:	0f b6       	in	r0, 0x3f	; 63
    196a:	f8 94       	cli
    196c:	de bf       	out	0x3e, r29	; 62
    196e:	0f be       	out	0x3f, r0	; 63
    1970:	cd bf       	out	0x3d, r28	; 61
    1972:	6d 83       	std	Y+5, r22	; 0x05
    1974:	7e 83       	std	Y+6, r23	; 0x06
    1976:	8f 83       	std	Y+7, r24	; 0x07
    1978:	98 87       	std	Y+8, r25	; 0x08

	if(Copy_f32FloatNumber == 0)
    197a:	6d 81       	ldd	r22, Y+5	; 0x05
    197c:	7e 81       	ldd	r23, Y+6	; 0x06
    197e:	8f 81       	ldd	r24, Y+7	; 0x07
    1980:	98 85       	ldd	r25, Y+8	; 0x08
    1982:	20 e0       	ldi	r18, 0x00	; 0
    1984:	30 e0       	ldi	r19, 0x00	; 0
    1986:	40 e0       	ldi	r20, 0x00	; 0
    1988:	50 e0       	ldi	r21, 0x00	; 0
    198a:	0e 94 19 03 	call	0x632	; 0x632 <__eqsf2>
    198e:	88 23       	and	r24, r24
    1990:	39 f4       	brne	.+14     	; 0x19a0 <CLCD_voidWriteFloatNumber+0x42>
	{
		CLCD_VoidWriteNumber(0);
    1992:	60 e0       	ldi	r22, 0x00	; 0
    1994:	70 e0       	ldi	r23, 0x00	; 0
    1996:	80 e0       	ldi	r24, 0x00	; 0
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	0e 94 0b 0c 	call	0x1816	; 0x1816 <CLCD_VoidWriteNumber>
    199e:	7c c0       	rjmp	.+248    	; 0x1a98 <CLCD_voidWriteFloatNumber+0x13a>
	}

	else
	{
		s32 Local_s32DecemalNum=Copy_f32FloatNumber;
    19a0:	6d 81       	ldd	r22, Y+5	; 0x05
    19a2:	7e 81       	ldd	r23, Y+6	; 0x06
    19a4:	8f 81       	ldd	r24, Y+7	; 0x07
    19a6:	98 85       	ldd	r25, Y+8	; 0x08
    19a8:	0e 94 37 04 	call	0x86e	; 0x86e <__fixsfsi>
    19ac:	dc 01       	movw	r26, r24
    19ae:	cb 01       	movw	r24, r22
    19b0:	89 83       	std	Y+1, r24	; 0x01
    19b2:	9a 83       	std	Y+2, r25	; 0x02
    19b4:	ab 83       	std	Y+3, r26	; 0x03
    19b6:	bc 83       	std	Y+4, r27	; 0x04
		CLCD_VoidWriteNumber(Local_s32DecemalNum);
    19b8:	69 81       	ldd	r22, Y+1	; 0x01
    19ba:	7a 81       	ldd	r23, Y+2	; 0x02
    19bc:	8b 81       	ldd	r24, Y+3	; 0x03
    19be:	9c 81       	ldd	r25, Y+4	; 0x04
    19c0:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <__floatsisf>
    19c4:	dc 01       	movw	r26, r24
    19c6:	cb 01       	movw	r24, r22
    19c8:	bc 01       	movw	r22, r24
    19ca:	cd 01       	movw	r24, r26
    19cc:	0e 94 0b 0c 	call	0x1816	; 0x1816 <CLCD_VoidWriteNumber>
		CLCD_voidSendData('.');
    19d0:	8e e2       	ldi	r24, 0x2E	; 46
    19d2:	0e 94 99 08 	call	0x1132	; 0x1132 <CLCD_voidSendData>
		Copy_f32FloatNumber = Copy_f32FloatNumber -Local_s32DecemalNum;
    19d6:	69 81       	ldd	r22, Y+1	; 0x01
    19d8:	7a 81       	ldd	r23, Y+2	; 0x02
    19da:	8b 81       	ldd	r24, Y+3	; 0x03
    19dc:	9c 81       	ldd	r25, Y+4	; 0x04
    19de:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <__floatsisf>
    19e2:	9b 01       	movw	r18, r22
    19e4:	ac 01       	movw	r20, r24
    19e6:	6d 81       	ldd	r22, Y+5	; 0x05
    19e8:	7e 81       	ldd	r23, Y+6	; 0x06
    19ea:	8f 81       	ldd	r24, Y+7	; 0x07
    19ec:	98 85       	ldd	r25, Y+8	; 0x08
    19ee:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    19f2:	dc 01       	movw	r26, r24
    19f4:	cb 01       	movw	r24, r22
    19f6:	8d 83       	std	Y+5, r24	; 0x05
    19f8:	9e 83       	std	Y+6, r25	; 0x06
    19fa:	af 83       	std	Y+7, r26	; 0x07
    19fc:	b8 87       	std	Y+8, r27	; 0x08

		Copy_f32FloatNumber*=100000;
    19fe:	6d 81       	ldd	r22, Y+5	; 0x05
    1a00:	7e 81       	ldd	r23, Y+6	; 0x06
    1a02:	8f 81       	ldd	r24, Y+7	; 0x07
    1a04:	98 85       	ldd	r25, Y+8	; 0x08
    1a06:	20 e0       	ldi	r18, 0x00	; 0
    1a08:	30 e5       	ldi	r19, 0x50	; 80
    1a0a:	43 ec       	ldi	r20, 0xC3	; 195
    1a0c:	57 e4       	ldi	r21, 0x47	; 71
    1a0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a12:	dc 01       	movw	r26, r24
    1a14:	cb 01       	movw	r24, r22
    1a16:	8d 83       	std	Y+5, r24	; 0x05
    1a18:	9e 83       	std	Y+6, r25	; 0x06
    1a1a:	af 83       	std	Y+7, r26	; 0x07
    1a1c:	b8 87       	std	Y+8, r27	; 0x08
		Local_s32DecemalNum = Copy_f32FloatNumber;
    1a1e:	6d 81       	ldd	r22, Y+5	; 0x05
    1a20:	7e 81       	ldd	r23, Y+6	; 0x06
    1a22:	8f 81       	ldd	r24, Y+7	; 0x07
    1a24:	98 85       	ldd	r25, Y+8	; 0x08
    1a26:	0e 94 37 04 	call	0x86e	; 0x86e <__fixsfsi>
    1a2a:	dc 01       	movw	r26, r24
    1a2c:	cb 01       	movw	r24, r22
    1a2e:	89 83       	std	Y+1, r24	; 0x01
    1a30:	9a 83       	std	Y+2, r25	; 0x02
    1a32:	ab 83       	std	Y+3, r26	; 0x03
    1a34:	bc 83       	std	Y+4, r27	; 0x04
    1a36:	12 c0       	rjmp	.+36     	; 0x1a5c <CLCD_voidWriteFloatNumber+0xfe>

		while (Local_s32DecemalNum%10 == 0)
		{
			Local_s32DecemalNum/=10;
    1a38:	89 81       	ldd	r24, Y+1	; 0x01
    1a3a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a3c:	ab 81       	ldd	r26, Y+3	; 0x03
    1a3e:	bc 81       	ldd	r27, Y+4	; 0x04
    1a40:	2a e0       	ldi	r18, 0x0A	; 10
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	40 e0       	ldi	r20, 0x00	; 0
    1a46:	50 e0       	ldi	r21, 0x00	; 0
    1a48:	bc 01       	movw	r22, r24
    1a4a:	cd 01       	movw	r24, r26
    1a4c:	0e 94 d6 22 	call	0x45ac	; 0x45ac <__divmodsi4>
    1a50:	da 01       	movw	r26, r20
    1a52:	c9 01       	movw	r24, r18
    1a54:	89 83       	std	Y+1, r24	; 0x01
    1a56:	9a 83       	std	Y+2, r25	; 0x02
    1a58:	ab 83       	std	Y+3, r26	; 0x03
    1a5a:	bc 83       	std	Y+4, r27	; 0x04
		Copy_f32FloatNumber = Copy_f32FloatNumber -Local_s32DecemalNum;

		Copy_f32FloatNumber*=100000;
		Local_s32DecemalNum = Copy_f32FloatNumber;

		while (Local_s32DecemalNum%10 == 0)
    1a5c:	89 81       	ldd	r24, Y+1	; 0x01
    1a5e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a60:	ab 81       	ldd	r26, Y+3	; 0x03
    1a62:	bc 81       	ldd	r27, Y+4	; 0x04
    1a64:	2a e0       	ldi	r18, 0x0A	; 10
    1a66:	30 e0       	ldi	r19, 0x00	; 0
    1a68:	40 e0       	ldi	r20, 0x00	; 0
    1a6a:	50 e0       	ldi	r21, 0x00	; 0
    1a6c:	bc 01       	movw	r22, r24
    1a6e:	cd 01       	movw	r24, r26
    1a70:	0e 94 d6 22 	call	0x45ac	; 0x45ac <__divmodsi4>
    1a74:	dc 01       	movw	r26, r24
    1a76:	cb 01       	movw	r24, r22
    1a78:	00 97       	sbiw	r24, 0x00	; 0
    1a7a:	a1 05       	cpc	r26, r1
    1a7c:	b1 05       	cpc	r27, r1
    1a7e:	e1 f2       	breq	.-72     	; 0x1a38 <CLCD_voidWriteFloatNumber+0xda>
		{
			Local_s32DecemalNum/=10;
		}
		CLCD_VoidWriteNumber(Local_s32DecemalNum);
    1a80:	69 81       	ldd	r22, Y+1	; 0x01
    1a82:	7a 81       	ldd	r23, Y+2	; 0x02
    1a84:	8b 81       	ldd	r24, Y+3	; 0x03
    1a86:	9c 81       	ldd	r25, Y+4	; 0x04
    1a88:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <__floatsisf>
    1a8c:	dc 01       	movw	r26, r24
    1a8e:	cb 01       	movw	r24, r22
    1a90:	bc 01       	movw	r22, r24
    1a92:	cd 01       	movw	r24, r26
    1a94:	0e 94 0b 0c 	call	0x1816	; 0x1816 <CLCD_VoidWriteNumber>
	}
}
    1a98:	28 96       	adiw	r28, 0x08	; 8
    1a9a:	0f b6       	in	r0, 0x3f	; 63
    1a9c:	f8 94       	cli
    1a9e:	de bf       	out	0x3e, r29	; 62
    1aa0:	0f be       	out	0x3f, r0	; 63
    1aa2:	cd bf       	out	0x3d, r28	; 61
    1aa4:	cf 91       	pop	r28
    1aa6:	df 91       	pop	r29
    1aa8:	08 95       	ret

00001aaa <CLCD_voidClear>:
//}



void CLCD_voidClear()
{
    1aaa:	df 93       	push	r29
    1aac:	cf 93       	push	r28
    1aae:	cd b7       	in	r28, 0x3d	; 61
    1ab0:	de b7       	in	r29, 0x3e	; 62
	C_LCD_voidSendCommand(0x01);
    1ab2:	81 e0       	ldi	r24, 0x01	; 1
    1ab4:	0e 94 80 06 	call	0xd00	; 0xd00 <C_LCD_voidSendCommand>

}
    1ab8:	cf 91       	pop	r28
    1aba:	df 91       	pop	r29
    1abc:	08 95       	ret

00001abe <DIO_u8SetPinValue>:
//
//	return Local_u8ErrorState;
//}

u8 DIO_u8SetPinValue(u8 Copy_u8port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
    1abe:	df 93       	push	r29
    1ac0:	cf 93       	push	r28
    1ac2:	cd b7       	in	r28, 0x3d	; 61
    1ac4:	de b7       	in	r29, 0x3e	; 62
    1ac6:	28 97       	sbiw	r28, 0x08	; 8
    1ac8:	0f b6       	in	r0, 0x3f	; 63
    1aca:	f8 94       	cli
    1acc:	de bf       	out	0x3e, r29	; 62
    1ace:	0f be       	out	0x3f, r0	; 63
    1ad0:	cd bf       	out	0x3d, r28	; 61
    1ad2:	8a 83       	std	Y+2, r24	; 0x02
    1ad4:	6b 83       	std	Y+3, r22	; 0x03
    1ad6:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    1ad8:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Pin<=DIO_u8PIN7)
    1ada:	8b 81       	ldd	r24, Y+3	; 0x03
    1adc:	88 30       	cpi	r24, 0x08	; 8
    1ade:	08 f0       	brcs	.+2      	; 0x1ae2 <DIO_u8SetPinValue+0x24>
    1ae0:	f4 c0       	rjmp	.+488    	; 0x1cca <DIO_u8SetPinValue+0x20c>
	{
		if(Copy_u8Value == DIO_u8PIN_LOW)
    1ae2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ae4:	88 23       	and	r24, r24
    1ae6:	09 f0       	breq	.+2      	; 0x1aea <DIO_u8SetPinValue+0x2c>
    1ae8:	77 c0       	rjmp	.+238    	; 0x1bd8 <DIO_u8SetPinValue+0x11a>
		{

			switch(Copy_u8port)
    1aea:	8a 81       	ldd	r24, Y+2	; 0x02
    1aec:	28 2f       	mov	r18, r24
    1aee:	30 e0       	ldi	r19, 0x00	; 0
    1af0:	38 87       	std	Y+8, r19	; 0x08
    1af2:	2f 83       	std	Y+7, r18	; 0x07
    1af4:	8f 81       	ldd	r24, Y+7	; 0x07
    1af6:	98 85       	ldd	r25, Y+8	; 0x08
    1af8:	81 30       	cpi	r24, 0x01	; 1
    1afa:	91 05       	cpc	r25, r1
    1afc:	59 f1       	breq	.+86     	; 0x1b54 <DIO_u8SetPinValue+0x96>
    1afe:	2f 81       	ldd	r18, Y+7	; 0x07
    1b00:	38 85       	ldd	r19, Y+8	; 0x08
    1b02:	22 30       	cpi	r18, 0x02	; 2
    1b04:	31 05       	cpc	r19, r1
    1b06:	2c f4       	brge	.+10     	; 0x1b12 <DIO_u8SetPinValue+0x54>
    1b08:	8f 81       	ldd	r24, Y+7	; 0x07
    1b0a:	98 85       	ldd	r25, Y+8	; 0x08
    1b0c:	00 97       	sbiw	r24, 0x00	; 0
    1b0e:	69 f0       	breq	.+26     	; 0x1b2a <DIO_u8SetPinValue+0x6c>
    1b10:	60 c0       	rjmp	.+192    	; 0x1bd2 <DIO_u8SetPinValue+0x114>
    1b12:	2f 81       	ldd	r18, Y+7	; 0x07
    1b14:	38 85       	ldd	r19, Y+8	; 0x08
    1b16:	22 30       	cpi	r18, 0x02	; 2
    1b18:	31 05       	cpc	r19, r1
    1b1a:	89 f1       	breq	.+98     	; 0x1b7e <DIO_u8SetPinValue+0xc0>
    1b1c:	8f 81       	ldd	r24, Y+7	; 0x07
    1b1e:	98 85       	ldd	r25, Y+8	; 0x08
    1b20:	83 30       	cpi	r24, 0x03	; 3
    1b22:	91 05       	cpc	r25, r1
    1b24:	09 f4       	brne	.+2      	; 0x1b28 <DIO_u8SetPinValue+0x6a>
    1b26:	40 c0       	rjmp	.+128    	; 0x1ba8 <DIO_u8SetPinValue+0xea>
    1b28:	54 c0       	rjmp	.+168    	; 0x1bd2 <DIO_u8SetPinValue+0x114>
			{
			case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
    1b2a:	ab e3       	ldi	r26, 0x3B	; 59
    1b2c:	b0 e0       	ldi	r27, 0x00	; 0
    1b2e:	eb e3       	ldi	r30, 0x3B	; 59
    1b30:	f0 e0       	ldi	r31, 0x00	; 0
    1b32:	80 81       	ld	r24, Z
    1b34:	48 2f       	mov	r20, r24
    1b36:	8b 81       	ldd	r24, Y+3	; 0x03
    1b38:	28 2f       	mov	r18, r24
    1b3a:	30 e0       	ldi	r19, 0x00	; 0
    1b3c:	81 e0       	ldi	r24, 0x01	; 1
    1b3e:	90 e0       	ldi	r25, 0x00	; 0
    1b40:	02 2e       	mov	r0, r18
    1b42:	02 c0       	rjmp	.+4      	; 0x1b48 <DIO_u8SetPinValue+0x8a>
    1b44:	88 0f       	add	r24, r24
    1b46:	99 1f       	adc	r25, r25
    1b48:	0a 94       	dec	r0
    1b4a:	e2 f7       	brpl	.-8      	; 0x1b44 <DIO_u8SetPinValue+0x86>
    1b4c:	80 95       	com	r24
    1b4e:	84 23       	and	r24, r20
    1b50:	8c 93       	st	X, r24
    1b52:	bd c0       	rjmp	.+378    	; 0x1cce <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
    1b54:	a8 e3       	ldi	r26, 0x38	; 56
    1b56:	b0 e0       	ldi	r27, 0x00	; 0
    1b58:	e8 e3       	ldi	r30, 0x38	; 56
    1b5a:	f0 e0       	ldi	r31, 0x00	; 0
    1b5c:	80 81       	ld	r24, Z
    1b5e:	48 2f       	mov	r20, r24
    1b60:	8b 81       	ldd	r24, Y+3	; 0x03
    1b62:	28 2f       	mov	r18, r24
    1b64:	30 e0       	ldi	r19, 0x00	; 0
    1b66:	81 e0       	ldi	r24, 0x01	; 1
    1b68:	90 e0       	ldi	r25, 0x00	; 0
    1b6a:	02 2e       	mov	r0, r18
    1b6c:	02 c0       	rjmp	.+4      	; 0x1b72 <DIO_u8SetPinValue+0xb4>
    1b6e:	88 0f       	add	r24, r24
    1b70:	99 1f       	adc	r25, r25
    1b72:	0a 94       	dec	r0
    1b74:	e2 f7       	brpl	.-8      	; 0x1b6e <DIO_u8SetPinValue+0xb0>
    1b76:	80 95       	com	r24
    1b78:	84 23       	and	r24, r20
    1b7a:	8c 93       	st	X, r24
    1b7c:	a8 c0       	rjmp	.+336    	; 0x1cce <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin); break;
    1b7e:	a5 e3       	ldi	r26, 0x35	; 53
    1b80:	b0 e0       	ldi	r27, 0x00	; 0
    1b82:	e5 e3       	ldi	r30, 0x35	; 53
    1b84:	f0 e0       	ldi	r31, 0x00	; 0
    1b86:	80 81       	ld	r24, Z
    1b88:	48 2f       	mov	r20, r24
    1b8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b8c:	28 2f       	mov	r18, r24
    1b8e:	30 e0       	ldi	r19, 0x00	; 0
    1b90:	81 e0       	ldi	r24, 0x01	; 1
    1b92:	90 e0       	ldi	r25, 0x00	; 0
    1b94:	02 2e       	mov	r0, r18
    1b96:	02 c0       	rjmp	.+4      	; 0x1b9c <DIO_u8SetPinValue+0xde>
    1b98:	88 0f       	add	r24, r24
    1b9a:	99 1f       	adc	r25, r25
    1b9c:	0a 94       	dec	r0
    1b9e:	e2 f7       	brpl	.-8      	; 0x1b98 <DIO_u8SetPinValue+0xda>
    1ba0:	80 95       	com	r24
    1ba2:	84 23       	and	r24, r20
    1ba4:	8c 93       	st	X, r24
    1ba6:	93 c0       	rjmp	.+294    	; 0x1cce <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin); break;
    1ba8:	a2 e3       	ldi	r26, 0x32	; 50
    1baa:	b0 e0       	ldi	r27, 0x00	; 0
    1bac:	e2 e3       	ldi	r30, 0x32	; 50
    1bae:	f0 e0       	ldi	r31, 0x00	; 0
    1bb0:	80 81       	ld	r24, Z
    1bb2:	48 2f       	mov	r20, r24
    1bb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb6:	28 2f       	mov	r18, r24
    1bb8:	30 e0       	ldi	r19, 0x00	; 0
    1bba:	81 e0       	ldi	r24, 0x01	; 1
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	02 2e       	mov	r0, r18
    1bc0:	02 c0       	rjmp	.+4      	; 0x1bc6 <DIO_u8SetPinValue+0x108>
    1bc2:	88 0f       	add	r24, r24
    1bc4:	99 1f       	adc	r25, r25
    1bc6:	0a 94       	dec	r0
    1bc8:	e2 f7       	brpl	.-8      	; 0x1bc2 <DIO_u8SetPinValue+0x104>
    1bca:	80 95       	com	r24
    1bcc:	84 23       	and	r24, r20
    1bce:	8c 93       	st	X, r24
    1bd0:	7e c0       	rjmp	.+252    	; 0x1cce <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState =1; break;
    1bd2:	81 e0       	ldi	r24, 0x01	; 1
    1bd4:	89 83       	std	Y+1, r24	; 0x01
    1bd6:	7b c0       	rjmp	.+246    	; 0x1cce <DIO_u8SetPinValue+0x210>

			}
		}
		else if(Copy_u8Value == DIO_u8PIN_HIGH)
    1bd8:	8c 81       	ldd	r24, Y+4	; 0x04
    1bda:	81 30       	cpi	r24, 0x01	; 1
    1bdc:	09 f0       	breq	.+2      	; 0x1be0 <DIO_u8SetPinValue+0x122>
    1bde:	72 c0       	rjmp	.+228    	; 0x1cc4 <DIO_u8SetPinValue+0x206>
		{

			switch(Copy_u8port)
    1be0:	8a 81       	ldd	r24, Y+2	; 0x02
    1be2:	28 2f       	mov	r18, r24
    1be4:	30 e0       	ldi	r19, 0x00	; 0
    1be6:	3e 83       	std	Y+6, r19	; 0x06
    1be8:	2d 83       	std	Y+5, r18	; 0x05
    1bea:	8d 81       	ldd	r24, Y+5	; 0x05
    1bec:	9e 81       	ldd	r25, Y+6	; 0x06
    1bee:	81 30       	cpi	r24, 0x01	; 1
    1bf0:	91 05       	cpc	r25, r1
    1bf2:	49 f1       	breq	.+82     	; 0x1c46 <DIO_u8SetPinValue+0x188>
    1bf4:	2d 81       	ldd	r18, Y+5	; 0x05
    1bf6:	3e 81       	ldd	r19, Y+6	; 0x06
    1bf8:	22 30       	cpi	r18, 0x02	; 2
    1bfa:	31 05       	cpc	r19, r1
    1bfc:	2c f4       	brge	.+10     	; 0x1c08 <DIO_u8SetPinValue+0x14a>
    1bfe:	8d 81       	ldd	r24, Y+5	; 0x05
    1c00:	9e 81       	ldd	r25, Y+6	; 0x06
    1c02:	00 97       	sbiw	r24, 0x00	; 0
    1c04:	61 f0       	breq	.+24     	; 0x1c1e <DIO_u8SetPinValue+0x160>
    1c06:	5b c0       	rjmp	.+182    	; 0x1cbe <DIO_u8SetPinValue+0x200>
    1c08:	2d 81       	ldd	r18, Y+5	; 0x05
    1c0a:	3e 81       	ldd	r19, Y+6	; 0x06
    1c0c:	22 30       	cpi	r18, 0x02	; 2
    1c0e:	31 05       	cpc	r19, r1
    1c10:	71 f1       	breq	.+92     	; 0x1c6e <DIO_u8SetPinValue+0x1b0>
    1c12:	8d 81       	ldd	r24, Y+5	; 0x05
    1c14:	9e 81       	ldd	r25, Y+6	; 0x06
    1c16:	83 30       	cpi	r24, 0x03	; 3
    1c18:	91 05       	cpc	r25, r1
    1c1a:	e9 f1       	breq	.+122    	; 0x1c96 <DIO_u8SetPinValue+0x1d8>
    1c1c:	50 c0       	rjmp	.+160    	; 0x1cbe <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
    1c1e:	ab e3       	ldi	r26, 0x3B	; 59
    1c20:	b0 e0       	ldi	r27, 0x00	; 0
    1c22:	eb e3       	ldi	r30, 0x3B	; 59
    1c24:	f0 e0       	ldi	r31, 0x00	; 0
    1c26:	80 81       	ld	r24, Z
    1c28:	48 2f       	mov	r20, r24
    1c2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c2c:	28 2f       	mov	r18, r24
    1c2e:	30 e0       	ldi	r19, 0x00	; 0
    1c30:	81 e0       	ldi	r24, 0x01	; 1
    1c32:	90 e0       	ldi	r25, 0x00	; 0
    1c34:	02 2e       	mov	r0, r18
    1c36:	02 c0       	rjmp	.+4      	; 0x1c3c <DIO_u8SetPinValue+0x17e>
    1c38:	88 0f       	add	r24, r24
    1c3a:	99 1f       	adc	r25, r25
    1c3c:	0a 94       	dec	r0
    1c3e:	e2 f7       	brpl	.-8      	; 0x1c38 <DIO_u8SetPinValue+0x17a>
    1c40:	84 2b       	or	r24, r20
    1c42:	8c 93       	st	X, r24
    1c44:	44 c0       	rjmp	.+136    	; 0x1cce <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
    1c46:	a8 e3       	ldi	r26, 0x38	; 56
    1c48:	b0 e0       	ldi	r27, 0x00	; 0
    1c4a:	e8 e3       	ldi	r30, 0x38	; 56
    1c4c:	f0 e0       	ldi	r31, 0x00	; 0
    1c4e:	80 81       	ld	r24, Z
    1c50:	48 2f       	mov	r20, r24
    1c52:	8b 81       	ldd	r24, Y+3	; 0x03
    1c54:	28 2f       	mov	r18, r24
    1c56:	30 e0       	ldi	r19, 0x00	; 0
    1c58:	81 e0       	ldi	r24, 0x01	; 1
    1c5a:	90 e0       	ldi	r25, 0x00	; 0
    1c5c:	02 2e       	mov	r0, r18
    1c5e:	02 c0       	rjmp	.+4      	; 0x1c64 <DIO_u8SetPinValue+0x1a6>
    1c60:	88 0f       	add	r24, r24
    1c62:	99 1f       	adc	r25, r25
    1c64:	0a 94       	dec	r0
    1c66:	e2 f7       	brpl	.-8      	; 0x1c60 <DIO_u8SetPinValue+0x1a2>
    1c68:	84 2b       	or	r24, r20
    1c6a:	8c 93       	st	X, r24
    1c6c:	30 c0       	rjmp	.+96     	; 0x1cce <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin); break;
    1c6e:	a5 e3       	ldi	r26, 0x35	; 53
    1c70:	b0 e0       	ldi	r27, 0x00	; 0
    1c72:	e5 e3       	ldi	r30, 0x35	; 53
    1c74:	f0 e0       	ldi	r31, 0x00	; 0
    1c76:	80 81       	ld	r24, Z
    1c78:	48 2f       	mov	r20, r24
    1c7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c7c:	28 2f       	mov	r18, r24
    1c7e:	30 e0       	ldi	r19, 0x00	; 0
    1c80:	81 e0       	ldi	r24, 0x01	; 1
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	02 2e       	mov	r0, r18
    1c86:	02 c0       	rjmp	.+4      	; 0x1c8c <DIO_u8SetPinValue+0x1ce>
    1c88:	88 0f       	add	r24, r24
    1c8a:	99 1f       	adc	r25, r25
    1c8c:	0a 94       	dec	r0
    1c8e:	e2 f7       	brpl	.-8      	; 0x1c88 <DIO_u8SetPinValue+0x1ca>
    1c90:	84 2b       	or	r24, r20
    1c92:	8c 93       	st	X, r24
    1c94:	1c c0       	rjmp	.+56     	; 0x1cce <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin); break;
    1c96:	a2 e3       	ldi	r26, 0x32	; 50
    1c98:	b0 e0       	ldi	r27, 0x00	; 0
    1c9a:	e2 e3       	ldi	r30, 0x32	; 50
    1c9c:	f0 e0       	ldi	r31, 0x00	; 0
    1c9e:	80 81       	ld	r24, Z
    1ca0:	48 2f       	mov	r20, r24
    1ca2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca4:	28 2f       	mov	r18, r24
    1ca6:	30 e0       	ldi	r19, 0x00	; 0
    1ca8:	81 e0       	ldi	r24, 0x01	; 1
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	02 2e       	mov	r0, r18
    1cae:	02 c0       	rjmp	.+4      	; 0x1cb4 <DIO_u8SetPinValue+0x1f6>
    1cb0:	88 0f       	add	r24, r24
    1cb2:	99 1f       	adc	r25, r25
    1cb4:	0a 94       	dec	r0
    1cb6:	e2 f7       	brpl	.-8      	; 0x1cb0 <DIO_u8SetPinValue+0x1f2>
    1cb8:	84 2b       	or	r24, r20
    1cba:	8c 93       	st	X, r24
    1cbc:	08 c0       	rjmp	.+16     	; 0x1cce <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState =1; break;
    1cbe:	81 e0       	ldi	r24, 0x01	; 1
    1cc0:	89 83       	std	Y+1, r24	; 0x01
    1cc2:	05 c0       	rjmp	.+10     	; 0x1cce <DIO_u8SetPinValue+0x210>

			}
		}
		else
		{
			Local_u8ErrorState = 1;
    1cc4:	81 e0       	ldi	r24, 0x01	; 1
    1cc6:	89 83       	std	Y+1, r24	; 0x01
    1cc8:	02 c0       	rjmp	.+4      	; 0x1cce <DIO_u8SetPinValue+0x210>
		}

	}
	else
	{
		Local_u8ErrorState = 1;
    1cca:	81 e0       	ldi	r24, 0x01	; 1
    1ccc:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1cce:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cd0:	28 96       	adiw	r28, 0x08	; 8
    1cd2:	0f b6       	in	r0, 0x3f	; 63
    1cd4:	f8 94       	cli
    1cd6:	de bf       	out	0x3e, r29	; 62
    1cd8:	0f be       	out	0x3f, r0	; 63
    1cda:	cd bf       	out	0x3d, r28	; 61
    1cdc:	cf 91       	pop	r28
    1cde:	df 91       	pop	r29
    1ce0:	08 95       	ret

00001ce2 <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8port, u8 Copy_u8Value)
{
    1ce2:	df 93       	push	r29
    1ce4:	cf 93       	push	r28
    1ce6:	00 d0       	rcall	.+0      	; 0x1ce8 <DIO_u8SetPortValue+0x6>
    1ce8:	00 d0       	rcall	.+0      	; 0x1cea <DIO_u8SetPortValue+0x8>
    1cea:	0f 92       	push	r0
    1cec:	cd b7       	in	r28, 0x3d	; 61
    1cee:	de b7       	in	r29, 0x3e	; 62
    1cf0:	8a 83       	std	Y+2, r24	; 0x02
    1cf2:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    1cf4:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8port<=DIO_u8PORTD)
    1cf6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf8:	84 30       	cpi	r24, 0x04	; 4
    1cfa:	b0 f5       	brcc	.+108    	; 0x1d68 <DIO_u8SetPortValue+0x86>
	{
		switch(Copy_u8port)
    1cfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cfe:	28 2f       	mov	r18, r24
    1d00:	30 e0       	ldi	r19, 0x00	; 0
    1d02:	3d 83       	std	Y+5, r19	; 0x05
    1d04:	2c 83       	std	Y+4, r18	; 0x04
    1d06:	8c 81       	ldd	r24, Y+4	; 0x04
    1d08:	9d 81       	ldd	r25, Y+5	; 0x05
    1d0a:	81 30       	cpi	r24, 0x01	; 1
    1d0c:	91 05       	cpc	r25, r1
    1d0e:	d1 f0       	breq	.+52     	; 0x1d44 <DIO_u8SetPortValue+0x62>
    1d10:	2c 81       	ldd	r18, Y+4	; 0x04
    1d12:	3d 81       	ldd	r19, Y+5	; 0x05
    1d14:	22 30       	cpi	r18, 0x02	; 2
    1d16:	31 05       	cpc	r19, r1
    1d18:	2c f4       	brge	.+10     	; 0x1d24 <DIO_u8SetPortValue+0x42>
    1d1a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d1c:	9d 81       	ldd	r25, Y+5	; 0x05
    1d1e:	00 97       	sbiw	r24, 0x00	; 0
    1d20:	61 f0       	breq	.+24     	; 0x1d3a <DIO_u8SetPortValue+0x58>
    1d22:	1f c0       	rjmp	.+62     	; 0x1d62 <DIO_u8SetPortValue+0x80>
    1d24:	2c 81       	ldd	r18, Y+4	; 0x04
    1d26:	3d 81       	ldd	r19, Y+5	; 0x05
    1d28:	22 30       	cpi	r18, 0x02	; 2
    1d2a:	31 05       	cpc	r19, r1
    1d2c:	81 f0       	breq	.+32     	; 0x1d4e <DIO_u8SetPortValue+0x6c>
    1d2e:	8c 81       	ldd	r24, Y+4	; 0x04
    1d30:	9d 81       	ldd	r25, Y+5	; 0x05
    1d32:	83 30       	cpi	r24, 0x03	; 3
    1d34:	91 05       	cpc	r25, r1
    1d36:	81 f0       	breq	.+32     	; 0x1d58 <DIO_u8SetPortValue+0x76>
    1d38:	14 c0       	rjmp	.+40     	; 0x1d62 <DIO_u8SetPortValue+0x80>
		{
		case DIO_u8PORTA: PORTA = Copy_u8Value; break;
    1d3a:	eb e3       	ldi	r30, 0x3B	; 59
    1d3c:	f0 e0       	ldi	r31, 0x00	; 0
    1d3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d40:	80 83       	st	Z, r24
    1d42:	14 c0       	rjmp	.+40     	; 0x1d6c <DIO_u8SetPortValue+0x8a>
		case DIO_u8PORTB: PORTB = Copy_u8Value; break;
    1d44:	e8 e3       	ldi	r30, 0x38	; 56
    1d46:	f0 e0       	ldi	r31, 0x00	; 0
    1d48:	8b 81       	ldd	r24, Y+3	; 0x03
    1d4a:	80 83       	st	Z, r24
    1d4c:	0f c0       	rjmp	.+30     	; 0x1d6c <DIO_u8SetPortValue+0x8a>
		case DIO_u8PORTC: PORTC = Copy_u8Value; break;
    1d4e:	e5 e3       	ldi	r30, 0x35	; 53
    1d50:	f0 e0       	ldi	r31, 0x00	; 0
    1d52:	8b 81       	ldd	r24, Y+3	; 0x03
    1d54:	80 83       	st	Z, r24
    1d56:	0a c0       	rjmp	.+20     	; 0x1d6c <DIO_u8SetPortValue+0x8a>
		case DIO_u8PORTD: PORTD = Copy_u8Value; break;
    1d58:	e2 e3       	ldi	r30, 0x32	; 50
    1d5a:	f0 e0       	ldi	r31, 0x00	; 0
    1d5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d5e:	80 83       	st	Z, r24
    1d60:	05 c0       	rjmp	.+10     	; 0x1d6c <DIO_u8SetPortValue+0x8a>
		default: Local_u8ErrorState =1; break;
    1d62:	81 e0       	ldi	r24, 0x01	; 1
    1d64:	89 83       	std	Y+1, r24	; 0x01
    1d66:	02 c0       	rjmp	.+4      	; 0x1d6c <DIO_u8SetPortValue+0x8a>

		}
	}
	else
	{
		Local_u8ErrorState = 1;
    1d68:	81 e0       	ldi	r24, 0x01	; 1
    1d6a:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_u8ErrorState;
    1d6c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d6e:	0f 90       	pop	r0
    1d70:	0f 90       	pop	r0
    1d72:	0f 90       	pop	r0
    1d74:	0f 90       	pop	r0
    1d76:	0f 90       	pop	r0
    1d78:	cf 91       	pop	r28
    1d7a:	df 91       	pop	r29
    1d7c:	08 95       	ret

00001d7e <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8port, u8 Copy_u8Pin, u8* Copy_Pu8Value)
{
    1d7e:	df 93       	push	r29
    1d80:	cf 93       	push	r28
    1d82:	cd b7       	in	r28, 0x3d	; 61
    1d84:	de b7       	in	r29, 0x3e	; 62
    1d86:	27 97       	sbiw	r28, 0x07	; 7
    1d88:	0f b6       	in	r0, 0x3f	; 63
    1d8a:	f8 94       	cli
    1d8c:	de bf       	out	0x3e, r29	; 62
    1d8e:	0f be       	out	0x3f, r0	; 63
    1d90:	cd bf       	out	0x3d, r28	; 61
    1d92:	8a 83       	std	Y+2, r24	; 0x02
    1d94:	6b 83       	std	Y+3, r22	; 0x03
    1d96:	5d 83       	std	Y+5, r21	; 0x05
    1d98:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    1d9a:	19 82       	std	Y+1, r1	; 0x01

	if((Copy_Pu8Value != NULL )&&(Copy_u8Pin<=DIO_u8PIN7))
    1d9c:	8c 81       	ldd	r24, Y+4	; 0x04
    1d9e:	9d 81       	ldd	r25, Y+5	; 0x05
    1da0:	00 97       	sbiw	r24, 0x00	; 0
    1da2:	09 f4       	brne	.+2      	; 0x1da6 <DIO_u8GetPinValue+0x28>
    1da4:	78 c0       	rjmp	.+240    	; 0x1e96 <DIO_u8GetPinValue+0x118>
    1da6:	8b 81       	ldd	r24, Y+3	; 0x03
    1da8:	88 30       	cpi	r24, 0x08	; 8
    1daa:	08 f0       	brcs	.+2      	; 0x1dae <DIO_u8GetPinValue+0x30>
    1dac:	74 c0       	rjmp	.+232    	; 0x1e96 <DIO_u8GetPinValue+0x118>
	{


			switch(Copy_u8port)
    1dae:	8a 81       	ldd	r24, Y+2	; 0x02
    1db0:	28 2f       	mov	r18, r24
    1db2:	30 e0       	ldi	r19, 0x00	; 0
    1db4:	3f 83       	std	Y+7, r19	; 0x07
    1db6:	2e 83       	std	Y+6, r18	; 0x06
    1db8:	4e 81       	ldd	r20, Y+6	; 0x06
    1dba:	5f 81       	ldd	r21, Y+7	; 0x07
    1dbc:	41 30       	cpi	r20, 0x01	; 1
    1dbe:	51 05       	cpc	r21, r1
    1dc0:	59 f1       	breq	.+86     	; 0x1e18 <DIO_u8GetPinValue+0x9a>
    1dc2:	8e 81       	ldd	r24, Y+6	; 0x06
    1dc4:	9f 81       	ldd	r25, Y+7	; 0x07
    1dc6:	82 30       	cpi	r24, 0x02	; 2
    1dc8:	91 05       	cpc	r25, r1
    1dca:	34 f4       	brge	.+12     	; 0x1dd8 <DIO_u8GetPinValue+0x5a>
    1dcc:	2e 81       	ldd	r18, Y+6	; 0x06
    1dce:	3f 81       	ldd	r19, Y+7	; 0x07
    1dd0:	21 15       	cp	r18, r1
    1dd2:	31 05       	cpc	r19, r1
    1dd4:	69 f0       	breq	.+26     	; 0x1df0 <DIO_u8GetPinValue+0x72>
    1dd6:	5c c0       	rjmp	.+184    	; 0x1e90 <DIO_u8GetPinValue+0x112>
    1dd8:	4e 81       	ldd	r20, Y+6	; 0x06
    1dda:	5f 81       	ldd	r21, Y+7	; 0x07
    1ddc:	42 30       	cpi	r20, 0x02	; 2
    1dde:	51 05       	cpc	r21, r1
    1de0:	79 f1       	breq	.+94     	; 0x1e40 <DIO_u8GetPinValue+0xc2>
    1de2:	8e 81       	ldd	r24, Y+6	; 0x06
    1de4:	9f 81       	ldd	r25, Y+7	; 0x07
    1de6:	83 30       	cpi	r24, 0x03	; 3
    1de8:	91 05       	cpc	r25, r1
    1dea:	09 f4       	brne	.+2      	; 0x1dee <DIO_u8GetPinValue+0x70>
    1dec:	3d c0       	rjmp	.+122    	; 0x1e68 <DIO_u8GetPinValue+0xea>
    1dee:	50 c0       	rjmp	.+160    	; 0x1e90 <DIO_u8GetPinValue+0x112>
			{
			case DIO_u8PORTA: * Copy_Pu8Value = GET_BIT(PINA,Copy_u8Pin); break;
    1df0:	e9 e3       	ldi	r30, 0x39	; 57
    1df2:	f0 e0       	ldi	r31, 0x00	; 0
    1df4:	80 81       	ld	r24, Z
    1df6:	28 2f       	mov	r18, r24
    1df8:	30 e0       	ldi	r19, 0x00	; 0
    1dfa:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfc:	88 2f       	mov	r24, r24
    1dfe:	90 e0       	ldi	r25, 0x00	; 0
    1e00:	a9 01       	movw	r20, r18
    1e02:	02 c0       	rjmp	.+4      	; 0x1e08 <DIO_u8GetPinValue+0x8a>
    1e04:	55 95       	asr	r21
    1e06:	47 95       	ror	r20
    1e08:	8a 95       	dec	r24
    1e0a:	e2 f7       	brpl	.-8      	; 0x1e04 <DIO_u8GetPinValue+0x86>
    1e0c:	ca 01       	movw	r24, r20
    1e0e:	81 70       	andi	r24, 0x01	; 1
    1e10:	ec 81       	ldd	r30, Y+4	; 0x04
    1e12:	fd 81       	ldd	r31, Y+5	; 0x05
    1e14:	80 83       	st	Z, r24
    1e16:	41 c0       	rjmp	.+130    	; 0x1e9a <DIO_u8GetPinValue+0x11c>
			case DIO_u8PORTB: * Copy_Pu8Value = GET_BIT(PINB,Copy_u8Pin); break;
    1e18:	e6 e3       	ldi	r30, 0x36	; 54
    1e1a:	f0 e0       	ldi	r31, 0x00	; 0
    1e1c:	80 81       	ld	r24, Z
    1e1e:	28 2f       	mov	r18, r24
    1e20:	30 e0       	ldi	r19, 0x00	; 0
    1e22:	8b 81       	ldd	r24, Y+3	; 0x03
    1e24:	88 2f       	mov	r24, r24
    1e26:	90 e0       	ldi	r25, 0x00	; 0
    1e28:	a9 01       	movw	r20, r18
    1e2a:	02 c0       	rjmp	.+4      	; 0x1e30 <DIO_u8GetPinValue+0xb2>
    1e2c:	55 95       	asr	r21
    1e2e:	47 95       	ror	r20
    1e30:	8a 95       	dec	r24
    1e32:	e2 f7       	brpl	.-8      	; 0x1e2c <DIO_u8GetPinValue+0xae>
    1e34:	ca 01       	movw	r24, r20
    1e36:	81 70       	andi	r24, 0x01	; 1
    1e38:	ec 81       	ldd	r30, Y+4	; 0x04
    1e3a:	fd 81       	ldd	r31, Y+5	; 0x05
    1e3c:	80 83       	st	Z, r24
    1e3e:	2d c0       	rjmp	.+90     	; 0x1e9a <DIO_u8GetPinValue+0x11c>
			case DIO_u8PORTC: * Copy_Pu8Value = GET_BIT(PINC,Copy_u8Pin); break;
    1e40:	e3 e3       	ldi	r30, 0x33	; 51
    1e42:	f0 e0       	ldi	r31, 0x00	; 0
    1e44:	80 81       	ld	r24, Z
    1e46:	28 2f       	mov	r18, r24
    1e48:	30 e0       	ldi	r19, 0x00	; 0
    1e4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e4c:	88 2f       	mov	r24, r24
    1e4e:	90 e0       	ldi	r25, 0x00	; 0
    1e50:	a9 01       	movw	r20, r18
    1e52:	02 c0       	rjmp	.+4      	; 0x1e58 <DIO_u8GetPinValue+0xda>
    1e54:	55 95       	asr	r21
    1e56:	47 95       	ror	r20
    1e58:	8a 95       	dec	r24
    1e5a:	e2 f7       	brpl	.-8      	; 0x1e54 <DIO_u8GetPinValue+0xd6>
    1e5c:	ca 01       	movw	r24, r20
    1e5e:	81 70       	andi	r24, 0x01	; 1
    1e60:	ec 81       	ldd	r30, Y+4	; 0x04
    1e62:	fd 81       	ldd	r31, Y+5	; 0x05
    1e64:	80 83       	st	Z, r24
    1e66:	19 c0       	rjmp	.+50     	; 0x1e9a <DIO_u8GetPinValue+0x11c>
			case DIO_u8PORTD: * Copy_Pu8Value = GET_BIT(PIND,Copy_u8Pin); break;
    1e68:	e0 e3       	ldi	r30, 0x30	; 48
    1e6a:	f0 e0       	ldi	r31, 0x00	; 0
    1e6c:	80 81       	ld	r24, Z
    1e6e:	28 2f       	mov	r18, r24
    1e70:	30 e0       	ldi	r19, 0x00	; 0
    1e72:	8b 81       	ldd	r24, Y+3	; 0x03
    1e74:	88 2f       	mov	r24, r24
    1e76:	90 e0       	ldi	r25, 0x00	; 0
    1e78:	a9 01       	movw	r20, r18
    1e7a:	02 c0       	rjmp	.+4      	; 0x1e80 <DIO_u8GetPinValue+0x102>
    1e7c:	55 95       	asr	r21
    1e7e:	47 95       	ror	r20
    1e80:	8a 95       	dec	r24
    1e82:	e2 f7       	brpl	.-8      	; 0x1e7c <DIO_u8GetPinValue+0xfe>
    1e84:	ca 01       	movw	r24, r20
    1e86:	81 70       	andi	r24, 0x01	; 1
    1e88:	ec 81       	ldd	r30, Y+4	; 0x04
    1e8a:	fd 81       	ldd	r31, Y+5	; 0x05
    1e8c:	80 83       	st	Z, r24
    1e8e:	05 c0       	rjmp	.+10     	; 0x1e9a <DIO_u8GetPinValue+0x11c>
			default: Local_u8ErrorState =1; break;
    1e90:	81 e0       	ldi	r24, 0x01	; 1
    1e92:	89 83       	std	Y+1, r24	; 0x01
    1e94:	02 c0       	rjmp	.+4      	; 0x1e9a <DIO_u8GetPinValue+0x11c>

			}
	}
	else
	{
		Local_u8ErrorState = 1;
    1e96:	81 e0       	ldi	r24, 0x01	; 1
    1e98:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1e9a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e9c:	27 96       	adiw	r28, 0x07	; 7
    1e9e:	0f b6       	in	r0, 0x3f	; 63
    1ea0:	f8 94       	cli
    1ea2:	de bf       	out	0x3e, r29	; 62
    1ea4:	0f be       	out	0x3f, r0	; 63
    1ea6:	cd bf       	out	0x3d, r28	; 61
    1ea8:	cf 91       	pop	r28
    1eaa:	df 91       	pop	r29
    1eac:	08 95       	ret

00001eae <DIO_u8AndWithPort>:

u8 DIO_u8AndWithPort(u8 Copy_u8port, u8 Copy_u8Value)
{
    1eae:	df 93       	push	r29
    1eb0:	cf 93       	push	r28
    1eb2:	00 d0       	rcall	.+0      	; 0x1eb4 <DIO_u8AndWithPort+0x6>
    1eb4:	00 d0       	rcall	.+0      	; 0x1eb6 <DIO_u8AndWithPort+0x8>
    1eb6:	0f 92       	push	r0
    1eb8:	cd b7       	in	r28, 0x3d	; 61
    1eba:	de b7       	in	r29, 0x3e	; 62
    1ebc:	8a 83       	std	Y+2, r24	; 0x02
    1ebe:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Result = 0;
    1ec0:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8port)
    1ec2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec4:	28 2f       	mov	r18, r24
    1ec6:	30 e0       	ldi	r19, 0x00	; 0
    1ec8:	3d 83       	std	Y+5, r19	; 0x05
    1eca:	2c 83       	std	Y+4, r18	; 0x04
    1ecc:	8c 81       	ldd	r24, Y+4	; 0x04
    1ece:	9d 81       	ldd	r25, Y+5	; 0x05
    1ed0:	81 30       	cpi	r24, 0x01	; 1
    1ed2:	91 05       	cpc	r25, r1
    1ed4:	e1 f0       	breq	.+56     	; 0x1f0e <DIO_u8AndWithPort+0x60>
    1ed6:	2c 81       	ldd	r18, Y+4	; 0x04
    1ed8:	3d 81       	ldd	r19, Y+5	; 0x05
    1eda:	22 30       	cpi	r18, 0x02	; 2
    1edc:	31 05       	cpc	r19, r1
    1ede:	2c f4       	brge	.+10     	; 0x1eea <DIO_u8AndWithPort+0x3c>
    1ee0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ee2:	9d 81       	ldd	r25, Y+5	; 0x05
    1ee4:	00 97       	sbiw	r24, 0x00	; 0
    1ee6:	61 f0       	breq	.+24     	; 0x1f00 <DIO_u8AndWithPort+0x52>
    1ee8:	26 c0       	rjmp	.+76     	; 0x1f36 <DIO_u8AndWithPort+0x88>
    1eea:	2c 81       	ldd	r18, Y+4	; 0x04
    1eec:	3d 81       	ldd	r19, Y+5	; 0x05
    1eee:	22 30       	cpi	r18, 0x02	; 2
    1ef0:	31 05       	cpc	r19, r1
    1ef2:	a1 f0       	breq	.+40     	; 0x1f1c <DIO_u8AndWithPort+0x6e>
    1ef4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ef6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ef8:	83 30       	cpi	r24, 0x03	; 3
    1efa:	91 05       	cpc	r25, r1
    1efc:	b1 f0       	breq	.+44     	; 0x1f2a <DIO_u8AndWithPort+0x7c>
    1efe:	1b c0       	rjmp	.+54     	; 0x1f36 <DIO_u8AndWithPort+0x88>
			{
			case DIO_u8PORTA: Local_u8Result= PORTA & Copy_u8Value; break;
    1f00:	eb e3       	ldi	r30, 0x3B	; 59
    1f02:	f0 e0       	ldi	r31, 0x00	; 0
    1f04:	90 81       	ld	r25, Z
    1f06:	8b 81       	ldd	r24, Y+3	; 0x03
    1f08:	89 23       	and	r24, r25
    1f0a:	89 83       	std	Y+1, r24	; 0x01
    1f0c:	14 c0       	rjmp	.+40     	; 0x1f36 <DIO_u8AndWithPort+0x88>
			case DIO_u8PORTB: Local_u8Result= PORTB & Copy_u8Value; break;
    1f0e:	e8 e3       	ldi	r30, 0x38	; 56
    1f10:	f0 e0       	ldi	r31, 0x00	; 0
    1f12:	90 81       	ld	r25, Z
    1f14:	8b 81       	ldd	r24, Y+3	; 0x03
    1f16:	89 23       	and	r24, r25
    1f18:	89 83       	std	Y+1, r24	; 0x01
    1f1a:	0d c0       	rjmp	.+26     	; 0x1f36 <DIO_u8AndWithPort+0x88>
			case DIO_u8PORTC: Local_u8Result= PORTC & Copy_u8Value; break;
    1f1c:	e5 e3       	ldi	r30, 0x35	; 53
    1f1e:	f0 e0       	ldi	r31, 0x00	; 0
    1f20:	90 81       	ld	r25, Z
    1f22:	8b 81       	ldd	r24, Y+3	; 0x03
    1f24:	89 23       	and	r24, r25
    1f26:	89 83       	std	Y+1, r24	; 0x01
    1f28:	06 c0       	rjmp	.+12     	; 0x1f36 <DIO_u8AndWithPort+0x88>
			case DIO_u8PORTD: Local_u8Result = PORTD & Copy_u8Value; break;
    1f2a:	e2 e3       	ldi	r30, 0x32	; 50
    1f2c:	f0 e0       	ldi	r31, 0x00	; 0
    1f2e:	90 81       	ld	r25, Z
    1f30:	8b 81       	ldd	r24, Y+3	; 0x03
    1f32:	89 23       	and	r24, r25
    1f34:	89 83       	std	Y+1, r24	; 0x01
			default:  break;


			}
	return Local_u8Result;
    1f36:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f38:	0f 90       	pop	r0
    1f3a:	0f 90       	pop	r0
    1f3c:	0f 90       	pop	r0
    1f3e:	0f 90       	pop	r0
    1f40:	0f 90       	pop	r0
    1f42:	cf 91       	pop	r28
    1f44:	df 91       	pop	r29
    1f46:	08 95       	ret

00001f48 <PORT_VoidInit>:
#include "PORT_interface.h"
#include "PORT_register.h"


void PORT_VoidInit(void)
{
    1f48:	df 93       	push	r29
    1f4a:	cf 93       	push	r28
    1f4c:	cd b7       	in	r28, 0x3d	; 61
    1f4e:	de b7       	in	r29, 0x3e	; 62
	DDRA = PORTA_DIR;
    1f50:	ea e3       	ldi	r30, 0x3A	; 58
    1f52:	f0 e0       	ldi	r31, 0x00	; 0
    1f54:	8e ef       	ldi	r24, 0xFE	; 254
    1f56:	80 83       	st	Z, r24
	DDRB = PORTB_DIR;
    1f58:	e7 e3       	ldi	r30, 0x37	; 55
    1f5a:	f0 e0       	ldi	r31, 0x00	; 0
    1f5c:	10 82       	st	Z, r1
	DDRC = PORTC_DIR;
    1f5e:	e4 e3       	ldi	r30, 0x34	; 52
    1f60:	f0 e0       	ldi	r31, 0x00	; 0
    1f62:	87 e0       	ldi	r24, 0x07	; 7
    1f64:	80 83       	st	Z, r24
	DDRD = PORTD_DIR;
    1f66:	e1 e3       	ldi	r30, 0x31	; 49
    1f68:	f0 e0       	ldi	r31, 0x00	; 0
    1f6a:	10 82       	st	Z, r1
	
	PORTA = PORTA_INITIAL_VALUE;
    1f6c:	eb e3       	ldi	r30, 0x3B	; 59
    1f6e:	f0 e0       	ldi	r31, 0x00	; 0
    1f70:	10 82       	st	Z, r1
	PORTB = PORTB_INITIAL_VALUE;
    1f72:	e8 e3       	ldi	r30, 0x38	; 56
    1f74:	f0 e0       	ldi	r31, 0x00	; 0
    1f76:	10 82       	st	Z, r1
	PORTC = PORTC_INITIAL_VALUE;
    1f78:	e5 e3       	ldi	r30, 0x35	; 53
    1f7a:	f0 e0       	ldi	r31, 0x00	; 0
    1f7c:	10 82       	st	Z, r1
	PORTD = PORTD_INITIAL_VALUE;
    1f7e:	e2 e3       	ldi	r30, 0x32	; 50
    1f80:	f0 e0       	ldi	r31, 0x00	; 0
    1f82:	10 82       	st	Z, r1


}
    1f84:	cf 91       	pop	r28
    1f86:	df 91       	pop	r29
    1f88:	08 95       	ret

00001f8a <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxPriority, unsigned portBASE_TYPE uxIndex )
{
    1f8a:	df 93       	push	r29
    1f8c:	cf 93       	push	r28
    1f8e:	cd b7       	in	r28, 0x3d	; 61
    1f90:	de b7       	in	r29, 0x3e	; 62
    1f92:	27 97       	sbiw	r28, 0x07	; 7
    1f94:	0f b6       	in	r0, 0x3f	; 63
    1f96:	f8 94       	cli
    1f98:	de bf       	out	0x3e, r29	; 62
    1f9a:	0f be       	out	0x3f, r0	; 63
    1f9c:	cd bf       	out	0x3d, r28	; 61
    1f9e:	9d 83       	std	Y+5, r25	; 0x05
    1fa0:	8c 83       	std	Y+4, r24	; 0x04
    1fa2:	6e 83       	std	Y+6, r22	; 0x06
    1fa4:	4f 83       	std	Y+7, r20	; 0x07
signed portBASE_TYPE xReturn;
corCRCB *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
    1fa6:	8a e1       	ldi	r24, 0x1A	; 26
    1fa8:	90 e0       	ldi	r25, 0x00	; 0
    1faa:	0e 94 9d 12 	call	0x253a	; 0x253a <pvPortMalloc>
    1fae:	9a 83       	std	Y+2, r25	; 0x02
    1fb0:	89 83       	std	Y+1, r24	; 0x01
	if( pxCoRoutine )
    1fb2:	89 81       	ldd	r24, Y+1	; 0x01
    1fb4:	9a 81       	ldd	r25, Y+2	; 0x02
    1fb6:	00 97       	sbiw	r24, 0x00	; 0
    1fb8:	09 f4       	brne	.+2      	; 0x1fbc <xCoRoutineCreate+0x32>
    1fba:	6f c0       	rjmp	.+222    	; 0x209a <xCoRoutineCreate+0x110>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
    1fbc:	80 91 84 01 	lds	r24, 0x0184
    1fc0:	90 91 85 01 	lds	r25, 0x0185
    1fc4:	00 97       	sbiw	r24, 0x00	; 0
    1fc6:	41 f4       	brne	.+16     	; 0x1fd8 <xCoRoutineCreate+0x4e>
		{
			pxCurrentCoRoutine = pxCoRoutine;
    1fc8:	89 81       	ldd	r24, Y+1	; 0x01
    1fca:	9a 81       	ldd	r25, Y+2	; 0x02
    1fcc:	90 93 85 01 	sts	0x0185, r25
    1fd0:	80 93 84 01 	sts	0x0184, r24
			prvInitialiseCoRoutineLists();
    1fd4:	0e 94 2c 12 	call	0x2458	; 0x2458 <prvInitialiseCoRoutineLists>
		}

		/* Check the priority is within limits. */
		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
    1fd8:	8e 81       	ldd	r24, Y+6	; 0x06
    1fda:	82 30       	cpi	r24, 0x02	; 2
    1fdc:	10 f0       	brcs	.+4      	; 0x1fe2 <xCoRoutineCreate+0x58>
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
    1fde:	81 e0       	ldi	r24, 0x01	; 1
    1fe0:	8e 83       	std	Y+6, r24	; 0x06
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
    1fe2:	e9 81       	ldd	r30, Y+1	; 0x01
    1fe4:	fa 81       	ldd	r31, Y+2	; 0x02
    1fe6:	11 8e       	std	Z+25, r1	; 0x19
    1fe8:	10 8e       	std	Z+24, r1	; 0x18
		pxCoRoutine->uxPriority = uxPriority;
    1fea:	e9 81       	ldd	r30, Y+1	; 0x01
    1fec:	fa 81       	ldd	r31, Y+2	; 0x02
    1fee:	8e 81       	ldd	r24, Y+6	; 0x06
    1ff0:	86 8b       	std	Z+22, r24	; 0x16
		pxCoRoutine->uxIndex = uxIndex;
    1ff2:	e9 81       	ldd	r30, Y+1	; 0x01
    1ff4:	fa 81       	ldd	r31, Y+2	; 0x02
    1ff6:	8f 81       	ldd	r24, Y+7	; 0x07
    1ff8:	87 8b       	std	Z+23, r24	; 0x17
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
    1ffa:	e9 81       	ldd	r30, Y+1	; 0x01
    1ffc:	fa 81       	ldd	r31, Y+2	; 0x02
    1ffe:	8c 81       	ldd	r24, Y+4	; 0x04
    2000:	9d 81       	ldd	r25, Y+5	; 0x05
    2002:	91 83       	std	Z+1, r25	; 0x01
    2004:	80 83       	st	Z, r24

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
    2006:	89 81       	ldd	r24, Y+1	; 0x01
    2008:	9a 81       	ldd	r25, Y+2	; 0x02
    200a:	02 96       	adiw	r24, 0x02	; 2
    200c:	0e 94 33 13 	call	0x2666	; 0x2666 <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
    2010:	89 81       	ldd	r24, Y+1	; 0x01
    2012:	9a 81       	ldd	r25, Y+2	; 0x02
    2014:	0c 96       	adiw	r24, 0x0c	; 12
    2016:	0e 94 33 13 	call	0x2666	; 0x2666 <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the xListItem.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
    201a:	e9 81       	ldd	r30, Y+1	; 0x01
    201c:	fa 81       	ldd	r31, Y+2	; 0x02
    201e:	89 81       	ldd	r24, Y+1	; 0x01
    2020:	9a 81       	ldd	r25, Y+2	; 0x02
    2022:	91 87       	std	Z+9, r25	; 0x09
    2024:	80 87       	std	Z+8, r24	; 0x08
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
    2026:	e9 81       	ldd	r30, Y+1	; 0x01
    2028:	fa 81       	ldd	r31, Y+2	; 0x02
    202a:	89 81       	ldd	r24, Y+1	; 0x01
    202c:	9a 81       	ldd	r25, Y+2	; 0x02
    202e:	93 8b       	std	Z+19, r25	; 0x13
    2030:	82 8b       	std	Z+18, r24	; 0x12
	
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    2032:	8e 81       	ldd	r24, Y+6	; 0x06
    2034:	28 2f       	mov	r18, r24
    2036:	30 e0       	ldi	r19, 0x00	; 0
    2038:	84 e0       	ldi	r24, 0x04	; 4
    203a:	90 e0       	ldi	r25, 0x00	; 0
    203c:	82 1b       	sub	r24, r18
    203e:	93 0b       	sbc	r25, r19
    2040:	e9 81       	ldd	r30, Y+1	; 0x01
    2042:	fa 81       	ldd	r31, Y+2	; 0x02
    2044:	95 87       	std	Z+13, r25	; 0x0d
    2046:	84 87       	std	Z+12, r24	; 0x0c
		
		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
    2048:	e9 81       	ldd	r30, Y+1	; 0x01
    204a:	fa 81       	ldd	r31, Y+2	; 0x02
    204c:	96 89       	ldd	r25, Z+22	; 0x16
    204e:	80 91 86 01 	lds	r24, 0x0186
    2052:	89 17       	cp	r24, r25
    2054:	28 f4       	brcc	.+10     	; 0x2060 <xCoRoutineCreate+0xd6>
    2056:	e9 81       	ldd	r30, Y+1	; 0x01
    2058:	fa 81       	ldd	r31, Y+2	; 0x02
    205a:	86 89       	ldd	r24, Z+22	; 0x16
    205c:	80 93 86 01 	sts	0x0186, r24
    2060:	e9 81       	ldd	r30, Y+1	; 0x01
    2062:	fa 81       	ldd	r31, Y+2	; 0x02
    2064:	86 89       	ldd	r24, Z+22	; 0x16
    2066:	28 2f       	mov	r18, r24
    2068:	30 e0       	ldi	r19, 0x00	; 0
    206a:	c9 01       	movw	r24, r18
    206c:	88 0f       	add	r24, r24
    206e:	99 1f       	adc	r25, r25
    2070:	88 0f       	add	r24, r24
    2072:	99 1f       	adc	r25, r25
    2074:	88 0f       	add	r24, r24
    2076:	99 1f       	adc	r25, r25
    2078:	82 0f       	add	r24, r18
    207a:	93 1f       	adc	r25, r19
    207c:	ac 01       	movw	r20, r24
    207e:	43 57       	subi	r20, 0x73	; 115
    2080:	5e 4f       	sbci	r21, 0xFE	; 254
    2082:	89 81       	ldd	r24, Y+1	; 0x01
    2084:	9a 81       	ldd	r25, Y+2	; 0x02
    2086:	9c 01       	movw	r18, r24
    2088:	2e 5f       	subi	r18, 0xFE	; 254
    208a:	3f 4f       	sbci	r19, 0xFF	; 255
    208c:	ca 01       	movw	r24, r20
    208e:	b9 01       	movw	r22, r18
    2090:	0e 94 43 13 	call	0x2686	; 0x2686 <vListInsertEnd>

		xReturn = pdPASS;
    2094:	81 e0       	ldi	r24, 0x01	; 1
    2096:	8b 83       	std	Y+3, r24	; 0x03
    2098:	02 c0       	rjmp	.+4      	; 0x209e <xCoRoutineCreate+0x114>
	}
	else
	{		
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    209a:	8f ef       	ldi	r24, 0xFF	; 255
    209c:	8b 83       	std	Y+3, r24	; 0x03
	}
	
	return xReturn;	
    209e:	8b 81       	ldd	r24, Y+3	; 0x03
}
    20a0:	27 96       	adiw	r28, 0x07	; 7
    20a2:	0f b6       	in	r0, 0x3f	; 63
    20a4:	f8 94       	cli
    20a6:	de bf       	out	0x3e, r29	; 62
    20a8:	0f be       	out	0x3f, r0	; 63
    20aa:	cd bf       	out	0x3d, r28	; 61
    20ac:	cf 91       	pop	r28
    20ae:	df 91       	pop	r29
    20b0:	08 95       	ret

000020b2 <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
{
    20b2:	df 93       	push	r29
    20b4:	cf 93       	push	r28
    20b6:	00 d0       	rcall	.+0      	; 0x20b8 <vCoRoutineAddToDelayedList+0x6>
    20b8:	00 d0       	rcall	.+0      	; 0x20ba <vCoRoutineAddToDelayedList+0x8>
    20ba:	00 d0       	rcall	.+0      	; 0x20bc <vCoRoutineAddToDelayedList+0xa>
    20bc:	cd b7       	in	r28, 0x3d	; 61
    20be:	de b7       	in	r29, 0x3e	; 62
    20c0:	9c 83       	std	Y+4, r25	; 0x04
    20c2:	8b 83       	std	Y+3, r24	; 0x03
    20c4:	7e 83       	std	Y+6, r23	; 0x06
    20c6:	6d 83       	std	Y+5, r22	; 0x05
portTickType xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
    20c8:	20 91 87 01 	lds	r18, 0x0187
    20cc:	30 91 88 01 	lds	r19, 0x0188
    20d0:	8b 81       	ldd	r24, Y+3	; 0x03
    20d2:	9c 81       	ldd	r25, Y+4	; 0x04
    20d4:	82 0f       	add	r24, r18
    20d6:	93 1f       	adc	r25, r19
    20d8:	9a 83       	std	Y+2, r25	; 0x02
    20da:	89 83       	std	Y+1, r24	; 0x01

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    20dc:	80 91 84 01 	lds	r24, 0x0184
    20e0:	90 91 85 01 	lds	r25, 0x0185
    20e4:	02 96       	adiw	r24, 0x02	; 2
    20e6:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <vListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
    20ea:	e0 91 84 01 	lds	r30, 0x0184
    20ee:	f0 91 85 01 	lds	r31, 0x0185
    20f2:	89 81       	ldd	r24, Y+1	; 0x01
    20f4:	9a 81       	ldd	r25, Y+2	; 0x02
    20f6:	93 83       	std	Z+3, r25	; 0x03
    20f8:	82 83       	std	Z+2, r24	; 0x02

	if( xTimeToWake < xCoRoutineTickCount )
    20fa:	20 91 87 01 	lds	r18, 0x0187
    20fe:	30 91 88 01 	lds	r19, 0x0188
    2102:	89 81       	ldd	r24, Y+1	; 0x01
    2104:	9a 81       	ldd	r25, Y+2	; 0x02
    2106:	82 17       	cp	r24, r18
    2108:	93 07       	cpc	r25, r19
    210a:	70 f4       	brcc	.+28     	; 0x2128 <vCoRoutineAddToDelayedList+0x76>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    210c:	80 91 b3 01 	lds	r24, 0x01B3
    2110:	90 91 b4 01 	lds	r25, 0x01B4
    2114:	20 91 84 01 	lds	r18, 0x0184
    2118:	30 91 85 01 	lds	r19, 0x0185
    211c:	2e 5f       	subi	r18, 0xFE	; 254
    211e:	3f 4f       	sbci	r19, 0xFF	; 255
    2120:	b9 01       	movw	r22, r18
    2122:	0e 94 8f 13 	call	0x271e	; 0x271e <vListInsert>
    2126:	0d c0       	rjmp	.+26     	; 0x2142 <vCoRoutineAddToDelayedList+0x90>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    2128:	80 91 b1 01 	lds	r24, 0x01B1
    212c:	90 91 b2 01 	lds	r25, 0x01B2
    2130:	20 91 84 01 	lds	r18, 0x0184
    2134:	30 91 85 01 	lds	r19, 0x0185
    2138:	2e 5f       	subi	r18, 0xFE	; 254
    213a:	3f 4f       	sbci	r19, 0xFF	; 255
    213c:	b9 01       	movw	r22, r18
    213e:	0e 94 8f 13 	call	0x271e	; 0x271e <vListInsert>
	}

	if( pxEventList )
    2142:	8d 81       	ldd	r24, Y+5	; 0x05
    2144:	9e 81       	ldd	r25, Y+6	; 0x06
    2146:	00 97       	sbiw	r24, 0x00	; 0
    2148:	61 f0       	breq	.+24     	; 0x2162 <vCoRoutineAddToDelayedList+0xb0>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
    214a:	80 91 84 01 	lds	r24, 0x0184
    214e:	90 91 85 01 	lds	r25, 0x0185
    2152:	9c 01       	movw	r18, r24
    2154:	24 5f       	subi	r18, 0xF4	; 244
    2156:	3f 4f       	sbci	r19, 0xFF	; 255
    2158:	8d 81       	ldd	r24, Y+5	; 0x05
    215a:	9e 81       	ldd	r25, Y+6	; 0x06
    215c:	b9 01       	movw	r22, r18
    215e:	0e 94 8f 13 	call	0x271e	; 0x271e <vListInsert>
	}
}
    2162:	26 96       	adiw	r28, 0x06	; 6
    2164:	0f b6       	in	r0, 0x3f	; 63
    2166:	f8 94       	cli
    2168:	de bf       	out	0x3e, r29	; 62
    216a:	0f be       	out	0x3f, r0	; 63
    216c:	cd bf       	out	0x3d, r28	; 61
    216e:	cf 91       	pop	r28
    2170:	df 91       	pop	r29
    2172:	08 95       	ret

00002174 <prvCheckPendingReadyList>:
/*-----------------------------------------------------------*/

static void prvCheckPendingReadyList( void )
{
    2174:	df 93       	push	r29
    2176:	cf 93       	push	r28
    2178:	00 d0       	rcall	.+0      	; 0x217a <prvCheckPendingReadyList+0x6>
    217a:	cd b7       	in	r28, 0x3d	; 61
    217c:	de b7       	in	r29, 0x3e	; 62
    217e:	3a c0       	rjmp	.+116    	; 0x21f4 <prvCheckPendingReadyList+0x80>
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
	{
		corCRCB *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
    2180:	f8 94       	cli
		{	
			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
    2182:	e0 91 ba 01 	lds	r30, 0x01BA
    2186:	f0 91 bb 01 	lds	r31, 0x01BB
    218a:	86 81       	ldd	r24, Z+6	; 0x06
    218c:	97 81       	ldd	r25, Z+7	; 0x07
    218e:	9a 83       	std	Y+2, r25	; 0x02
    2190:	89 83       	std	Y+1, r24	; 0x01
			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    2192:	89 81       	ldd	r24, Y+1	; 0x01
    2194:	9a 81       	ldd	r25, Y+2	; 0x02
    2196:	0c 96       	adiw	r24, 0x0c	; 12
    2198:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <vListRemove>
		}
		portENABLE_INTERRUPTS();
    219c:	78 94       	sei

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
    219e:	89 81       	ldd	r24, Y+1	; 0x01
    21a0:	9a 81       	ldd	r25, Y+2	; 0x02
    21a2:	02 96       	adiw	r24, 0x02	; 2
    21a4:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <vListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
    21a8:	e9 81       	ldd	r30, Y+1	; 0x01
    21aa:	fa 81       	ldd	r31, Y+2	; 0x02
    21ac:	96 89       	ldd	r25, Z+22	; 0x16
    21ae:	80 91 86 01 	lds	r24, 0x0186
    21b2:	89 17       	cp	r24, r25
    21b4:	28 f4       	brcc	.+10     	; 0x21c0 <prvCheckPendingReadyList+0x4c>
    21b6:	e9 81       	ldd	r30, Y+1	; 0x01
    21b8:	fa 81       	ldd	r31, Y+2	; 0x02
    21ba:	86 89       	ldd	r24, Z+22	; 0x16
    21bc:	80 93 86 01 	sts	0x0186, r24
    21c0:	e9 81       	ldd	r30, Y+1	; 0x01
    21c2:	fa 81       	ldd	r31, Y+2	; 0x02
    21c4:	86 89       	ldd	r24, Z+22	; 0x16
    21c6:	28 2f       	mov	r18, r24
    21c8:	30 e0       	ldi	r19, 0x00	; 0
    21ca:	c9 01       	movw	r24, r18
    21cc:	88 0f       	add	r24, r24
    21ce:	99 1f       	adc	r25, r25
    21d0:	88 0f       	add	r24, r24
    21d2:	99 1f       	adc	r25, r25
    21d4:	88 0f       	add	r24, r24
    21d6:	99 1f       	adc	r25, r25
    21d8:	82 0f       	add	r24, r18
    21da:	93 1f       	adc	r25, r19
    21dc:	ac 01       	movw	r20, r24
    21de:	43 57       	subi	r20, 0x73	; 115
    21e0:	5e 4f       	sbci	r21, 0xFE	; 254
    21e2:	89 81       	ldd	r24, Y+1	; 0x01
    21e4:	9a 81       	ldd	r25, Y+2	; 0x02
    21e6:	9c 01       	movw	r18, r24
    21e8:	2e 5f       	subi	r18, 0xFE	; 254
    21ea:	3f 4f       	sbci	r19, 0xFF	; 255
    21ec:	ca 01       	movw	r24, r20
    21ee:	b9 01       	movw	r22, r18
    21f0:	0e 94 43 13 	call	0x2686	; 0x2686 <vListInsertEnd>
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    21f4:	80 91 b5 01 	lds	r24, 0x01B5
    21f8:	88 23       	and	r24, r24
    21fa:	09 f0       	breq	.+2      	; 0x21fe <prvCheckPendingReadyList+0x8a>
    21fc:	c1 cf       	rjmp	.-126    	; 0x2180 <prvCheckPendingReadyList+0xc>
		portENABLE_INTERRUPTS();

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
	}
}
    21fe:	0f 90       	pop	r0
    2200:	0f 90       	pop	r0
    2202:	cf 91       	pop	r28
    2204:	df 91       	pop	r29
    2206:	08 95       	ret

00002208 <prvCheckDelayedList>:
/*-----------------------------------------------------------*/

static void prvCheckDelayedList( void )
{
    2208:	df 93       	push	r29
    220a:	cf 93       	push	r28
    220c:	00 d0       	rcall	.+0      	; 0x220e <prvCheckDelayedList+0x6>
    220e:	00 d0       	rcall	.+0      	; 0x2210 <prvCheckDelayedList+0x8>
    2210:	cd b7       	in	r28, 0x3d	; 61
    2212:	de b7       	in	r29, 0x3e	; 62
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
    2214:	0e 94 bd 1e 	call	0x3d7a	; 0x3d7a <xTaskGetTickCount>
    2218:	20 91 89 01 	lds	r18, 0x0189
    221c:	30 91 8a 01 	lds	r19, 0x018A
    2220:	82 1b       	sub	r24, r18
    2222:	93 0b       	sbc	r25, r19
    2224:	90 93 8c 01 	sts	0x018C, r25
    2228:	80 93 8b 01 	sts	0x018B, r24
    222c:	85 c0       	rjmp	.+266    	; 0x2338 <prvCheckDelayedList+0x130>
	while( xPassedTicks )
	{
		xCoRoutineTickCount++;
    222e:	80 91 87 01 	lds	r24, 0x0187
    2232:	90 91 88 01 	lds	r25, 0x0188
    2236:	01 96       	adiw	r24, 0x01	; 1
    2238:	90 93 88 01 	sts	0x0188, r25
    223c:	80 93 87 01 	sts	0x0187, r24
		xPassedTicks--;
    2240:	80 91 8b 01 	lds	r24, 0x018B
    2244:	90 91 8c 01 	lds	r25, 0x018C
    2248:	01 97       	sbiw	r24, 0x01	; 1
    224a:	90 93 8c 01 	sts	0x018C, r25
    224e:	80 93 8b 01 	sts	0x018B, r24

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
    2252:	80 91 87 01 	lds	r24, 0x0187
    2256:	90 91 88 01 	lds	r25, 0x0188
    225a:	00 97       	sbiw	r24, 0x00	; 0
    225c:	09 f0       	breq	.+2      	; 0x2260 <prvCheckDelayedList+0x58>
    225e:	64 c0       	rjmp	.+200    	; 0x2328 <prvCheckDelayedList+0x120>
		{
			xList * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
    2260:	80 91 b1 01 	lds	r24, 0x01B1
    2264:	90 91 b2 01 	lds	r25, 0x01B2
    2268:	9a 83       	std	Y+2, r25	; 0x02
    226a:	89 83       	std	Y+1, r24	; 0x01
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
    226c:	80 91 b3 01 	lds	r24, 0x01B3
    2270:	90 91 b4 01 	lds	r25, 0x01B4
    2274:	90 93 b2 01 	sts	0x01B2, r25
    2278:	80 93 b1 01 	sts	0x01B1, r24
			pxOverflowDelayedCoRoutineList = pxTemp;
    227c:	89 81       	ldd	r24, Y+1	; 0x01
    227e:	9a 81       	ldd	r25, Y+2	; 0x02
    2280:	90 93 b4 01 	sts	0x01B4, r25
    2284:	80 93 b3 01 	sts	0x01B3, r24
    2288:	4f c0       	rjmp	.+158    	; 0x2328 <prvCheckDelayedList+0x120>
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
		{
			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
    228a:	e0 91 b1 01 	lds	r30, 0x01B1
    228e:	f0 91 b2 01 	lds	r31, 0x01B2
    2292:	05 80       	ldd	r0, Z+5	; 0x05
    2294:	f6 81       	ldd	r31, Z+6	; 0x06
    2296:	e0 2d       	mov	r30, r0
    2298:	86 81       	ldd	r24, Z+6	; 0x06
    229a:	97 81       	ldd	r25, Z+7	; 0x07
    229c:	9c 83       	std	Y+4, r25	; 0x04
    229e:	8b 83       	std	Y+3, r24	; 0x03

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
    22a0:	eb 81       	ldd	r30, Y+3	; 0x03
    22a2:	fc 81       	ldd	r31, Y+4	; 0x04
    22a4:	22 81       	ldd	r18, Z+2	; 0x02
    22a6:	33 81       	ldd	r19, Z+3	; 0x03
    22a8:	80 91 87 01 	lds	r24, 0x0187
    22ac:	90 91 88 01 	lds	r25, 0x0188
    22b0:	82 17       	cp	r24, r18
    22b2:	93 07       	cpc	r25, r19
    22b4:	08 f4       	brcc	.+2      	; 0x22b8 <prvCheckDelayedList+0xb0>
    22b6:	40 c0       	rjmp	.+128    	; 0x2338 <prvCheckDelayedList+0x130>
			{			
				/* Timeout not yet expired. */																			
				break;																				
			}																						

			portDISABLE_INTERRUPTS();
    22b8:	f8 94       	cli
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				vListRemove( &( pxCRCB->xGenericListItem ) );											
    22ba:	8b 81       	ldd	r24, Y+3	; 0x03
    22bc:	9c 81       	ldd	r25, Y+4	; 0x04
    22be:	02 96       	adiw	r24, 0x02	; 2
    22c0:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <vListRemove>

				/* Is the co-routine waiting on an event also? */												
				if( pxCRCB->xEventListItem.pvContainer )													
    22c4:	eb 81       	ldd	r30, Y+3	; 0x03
    22c6:	fc 81       	ldd	r31, Y+4	; 0x04
    22c8:	84 89       	ldd	r24, Z+20	; 0x14
    22ca:	95 89       	ldd	r25, Z+21	; 0x15
    22cc:	00 97       	sbiw	r24, 0x00	; 0
    22ce:	29 f0       	breq	.+10     	; 0x22da <prvCheckDelayedList+0xd2>
				{															
					vListRemove( &( pxCRCB->xEventListItem ) );											
    22d0:	8b 81       	ldd	r24, Y+3	; 0x03
    22d2:	9c 81       	ldd	r25, Y+4	; 0x04
    22d4:	0c 96       	adiw	r24, 0x0c	; 12
    22d6:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <vListRemove>
				}
			}
			portENABLE_INTERRUPTS();
    22da:	78 94       	sei

			prvAddCoRoutineToReadyQueue( pxCRCB );													
    22dc:	eb 81       	ldd	r30, Y+3	; 0x03
    22de:	fc 81       	ldd	r31, Y+4	; 0x04
    22e0:	96 89       	ldd	r25, Z+22	; 0x16
    22e2:	80 91 86 01 	lds	r24, 0x0186
    22e6:	89 17       	cp	r24, r25
    22e8:	28 f4       	brcc	.+10     	; 0x22f4 <prvCheckDelayedList+0xec>
    22ea:	eb 81       	ldd	r30, Y+3	; 0x03
    22ec:	fc 81       	ldd	r31, Y+4	; 0x04
    22ee:	86 89       	ldd	r24, Z+22	; 0x16
    22f0:	80 93 86 01 	sts	0x0186, r24
    22f4:	eb 81       	ldd	r30, Y+3	; 0x03
    22f6:	fc 81       	ldd	r31, Y+4	; 0x04
    22f8:	86 89       	ldd	r24, Z+22	; 0x16
    22fa:	28 2f       	mov	r18, r24
    22fc:	30 e0       	ldi	r19, 0x00	; 0
    22fe:	c9 01       	movw	r24, r18
    2300:	88 0f       	add	r24, r24
    2302:	99 1f       	adc	r25, r25
    2304:	88 0f       	add	r24, r24
    2306:	99 1f       	adc	r25, r25
    2308:	88 0f       	add	r24, r24
    230a:	99 1f       	adc	r25, r25
    230c:	82 0f       	add	r24, r18
    230e:	93 1f       	adc	r25, r19
    2310:	ac 01       	movw	r20, r24
    2312:	43 57       	subi	r20, 0x73	; 115
    2314:	5e 4f       	sbci	r21, 0xFE	; 254
    2316:	8b 81       	ldd	r24, Y+3	; 0x03
    2318:	9c 81       	ldd	r25, Y+4	; 0x04
    231a:	9c 01       	movw	r18, r24
    231c:	2e 5f       	subi	r18, 0xFE	; 254
    231e:	3f 4f       	sbci	r19, 0xFF	; 255
    2320:	ca 01       	movw	r24, r20
    2322:	b9 01       	movw	r22, r18
    2324:	0e 94 43 13 	call	0x2686	; 0x2686 <vListInsertEnd>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    2328:	e0 91 b1 01 	lds	r30, 0x01B1
    232c:	f0 91 b2 01 	lds	r31, 0x01B2
    2330:	80 81       	ld	r24, Z
    2332:	88 23       	and	r24, r24
    2334:	09 f0       	breq	.+2      	; 0x2338 <prvCheckDelayedList+0x130>
    2336:	a9 cf       	rjmp	.-174    	; 0x228a <prvCheckDelayedList+0x82>
static void prvCheckDelayedList( void )
{
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
    2338:	80 91 8b 01 	lds	r24, 0x018B
    233c:	90 91 8c 01 	lds	r25, 0x018C
    2340:	00 97       	sbiw	r24, 0x00	; 0
    2342:	09 f0       	breq	.+2      	; 0x2346 <prvCheckDelayedList+0x13e>
    2344:	74 cf       	rjmp	.-280    	; 0x222e <prvCheckDelayedList+0x26>

			prvAddCoRoutineToReadyQueue( pxCRCB );													
		}																									
	}

	xLastTickCount = xCoRoutineTickCount;
    2346:	80 91 87 01 	lds	r24, 0x0187
    234a:	90 91 88 01 	lds	r25, 0x0188
    234e:	90 93 8a 01 	sts	0x018A, r25
    2352:	80 93 89 01 	sts	0x0189, r24
}
    2356:	0f 90       	pop	r0
    2358:	0f 90       	pop	r0
    235a:	0f 90       	pop	r0
    235c:	0f 90       	pop	r0
    235e:	cf 91       	pop	r28
    2360:	df 91       	pop	r29
    2362:	08 95       	ret

00002364 <vCoRoutineSchedule>:
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
    2364:	df 93       	push	r29
    2366:	cf 93       	push	r28
    2368:	00 d0       	rcall	.+0      	; 0x236a <vCoRoutineSchedule+0x6>
    236a:	cd b7       	in	r28, 0x3d	; 61
    236c:	de b7       	in	r29, 0x3e	; 62
	/* See if any co-routines readied by events need moving to the ready lists. */
	prvCheckPendingReadyList();
    236e:	0e 94 ba 10 	call	0x2174	; 0x2174 <prvCheckPendingReadyList>

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();
    2372:	0e 94 04 11 	call	0x2208	; 0x2208 <prvCheckDelayedList>
    2376:	0a c0       	rjmp	.+20     	; 0x238c <vCoRoutineSchedule+0x28>

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
	{
		if( uxTopCoRoutineReadyPriority == 0 )
    2378:	80 91 86 01 	lds	r24, 0x0186
    237c:	88 23       	and	r24, r24
    237e:	09 f4       	brne	.+2      	; 0x2382 <vCoRoutineSchedule+0x1e>
    2380:	66 c0       	rjmp	.+204    	; 0x244e <vCoRoutineSchedule+0xea>
		{
			/* No more co-routines to check. */
			return;
		}
		--uxTopCoRoutineReadyPriority;
    2382:	80 91 86 01 	lds	r24, 0x0186
    2386:	81 50       	subi	r24, 0x01	; 1
    2388:	80 93 86 01 	sts	0x0186, r24

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    238c:	80 91 86 01 	lds	r24, 0x0186
    2390:	28 2f       	mov	r18, r24
    2392:	30 e0       	ldi	r19, 0x00	; 0
    2394:	c9 01       	movw	r24, r18
    2396:	88 0f       	add	r24, r24
    2398:	99 1f       	adc	r25, r25
    239a:	88 0f       	add	r24, r24
    239c:	99 1f       	adc	r25, r25
    239e:	88 0f       	add	r24, r24
    23a0:	99 1f       	adc	r25, r25
    23a2:	82 0f       	add	r24, r18
    23a4:	93 1f       	adc	r25, r19
    23a6:	fc 01       	movw	r30, r24
    23a8:	e3 57       	subi	r30, 0x73	; 115
    23aa:	fe 4f       	sbci	r31, 0xFE	; 254
    23ac:	80 81       	ld	r24, Z
    23ae:	88 23       	and	r24, r24
    23b0:	19 f3       	breq	.-58     	; 0x2378 <vCoRoutineSchedule+0x14>
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
    23b2:	80 91 86 01 	lds	r24, 0x0186
    23b6:	28 2f       	mov	r18, r24
    23b8:	30 e0       	ldi	r19, 0x00	; 0
    23ba:	c9 01       	movw	r24, r18
    23bc:	88 0f       	add	r24, r24
    23be:	99 1f       	adc	r25, r25
    23c0:	88 0f       	add	r24, r24
    23c2:	99 1f       	adc	r25, r25
    23c4:	88 0f       	add	r24, r24
    23c6:	99 1f       	adc	r25, r25
    23c8:	82 0f       	add	r24, r18
    23ca:	93 1f       	adc	r25, r19
    23cc:	83 57       	subi	r24, 0x73	; 115
    23ce:	9e 4f       	sbci	r25, 0xFE	; 254
    23d0:	9a 83       	std	Y+2, r25	; 0x02
    23d2:	89 83       	std	Y+1, r24	; 0x01
    23d4:	e9 81       	ldd	r30, Y+1	; 0x01
    23d6:	fa 81       	ldd	r31, Y+2	; 0x02
    23d8:	01 80       	ldd	r0, Z+1	; 0x01
    23da:	f2 81       	ldd	r31, Z+2	; 0x02
    23dc:	e0 2d       	mov	r30, r0
    23de:	82 81       	ldd	r24, Z+2	; 0x02
    23e0:	93 81       	ldd	r25, Z+3	; 0x03
    23e2:	e9 81       	ldd	r30, Y+1	; 0x01
    23e4:	fa 81       	ldd	r31, Y+2	; 0x02
    23e6:	92 83       	std	Z+2, r25	; 0x02
    23e8:	81 83       	std	Z+1, r24	; 0x01
    23ea:	e9 81       	ldd	r30, Y+1	; 0x01
    23ec:	fa 81       	ldd	r31, Y+2	; 0x02
    23ee:	21 81       	ldd	r18, Z+1	; 0x01
    23f0:	32 81       	ldd	r19, Z+2	; 0x02
    23f2:	89 81       	ldd	r24, Y+1	; 0x01
    23f4:	9a 81       	ldd	r25, Y+2	; 0x02
    23f6:	03 96       	adiw	r24, 0x03	; 3
    23f8:	28 17       	cp	r18, r24
    23fa:	39 07       	cpc	r19, r25
    23fc:	59 f4       	brne	.+22     	; 0x2414 <vCoRoutineSchedule+0xb0>
    23fe:	e9 81       	ldd	r30, Y+1	; 0x01
    2400:	fa 81       	ldd	r31, Y+2	; 0x02
    2402:	01 80       	ldd	r0, Z+1	; 0x01
    2404:	f2 81       	ldd	r31, Z+2	; 0x02
    2406:	e0 2d       	mov	r30, r0
    2408:	82 81       	ldd	r24, Z+2	; 0x02
    240a:	93 81       	ldd	r25, Z+3	; 0x03
    240c:	e9 81       	ldd	r30, Y+1	; 0x01
    240e:	fa 81       	ldd	r31, Y+2	; 0x02
    2410:	92 83       	std	Z+2, r25	; 0x02
    2412:	81 83       	std	Z+1, r24	; 0x01
    2414:	e9 81       	ldd	r30, Y+1	; 0x01
    2416:	fa 81       	ldd	r31, Y+2	; 0x02
    2418:	01 80       	ldd	r0, Z+1	; 0x01
    241a:	f2 81       	ldd	r31, Z+2	; 0x02
    241c:	e0 2d       	mov	r30, r0
    241e:	86 81       	ldd	r24, Z+6	; 0x06
    2420:	97 81       	ldd	r25, Z+7	; 0x07
    2422:	90 93 85 01 	sts	0x0185, r25
    2426:	80 93 84 01 	sts	0x0184, r24

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
    242a:	e0 91 84 01 	lds	r30, 0x0184
    242e:	f0 91 85 01 	lds	r31, 0x0185
    2432:	40 81       	ld	r20, Z
    2434:	51 81       	ldd	r21, Z+1	; 0x01
    2436:	80 91 84 01 	lds	r24, 0x0184
    243a:	90 91 85 01 	lds	r25, 0x0185
    243e:	e0 91 84 01 	lds	r30, 0x0184
    2442:	f0 91 85 01 	lds	r31, 0x0185
    2446:	27 89       	ldd	r18, Z+23	; 0x17
    2448:	62 2f       	mov	r22, r18
    244a:	fa 01       	movw	r30, r20
    244c:	09 95       	icall

	return;
}
    244e:	0f 90       	pop	r0
    2450:	0f 90       	pop	r0
    2452:	cf 91       	pop	r28
    2454:	df 91       	pop	r29
    2456:	08 95       	ret

00002458 <prvInitialiseCoRoutineLists>:
/*-----------------------------------------------------------*/

static void prvInitialiseCoRoutineLists( void )
{
    2458:	df 93       	push	r29
    245a:	cf 93       	push	r28
    245c:	0f 92       	push	r0
    245e:	cd b7       	in	r28, 0x3d	; 61
    2460:	de b7       	in	r29, 0x3e	; 62
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    2462:	19 82       	std	Y+1, r1	; 0x01
    2464:	13 c0       	rjmp	.+38     	; 0x248c <prvInitialiseCoRoutineLists+0x34>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
    2466:	89 81       	ldd	r24, Y+1	; 0x01
    2468:	28 2f       	mov	r18, r24
    246a:	30 e0       	ldi	r19, 0x00	; 0
    246c:	c9 01       	movw	r24, r18
    246e:	88 0f       	add	r24, r24
    2470:	99 1f       	adc	r25, r25
    2472:	88 0f       	add	r24, r24
    2474:	99 1f       	adc	r25, r25
    2476:	88 0f       	add	r24, r24
    2478:	99 1f       	adc	r25, r25
    247a:	82 0f       	add	r24, r18
    247c:	93 1f       	adc	r25, r19
    247e:	83 57       	subi	r24, 0x73	; 115
    2480:	9e 4f       	sbci	r25, 0xFE	; 254
    2482:	0e 94 09 13 	call	0x2612	; 0x2612 <vListInitialise>

static void prvInitialiseCoRoutineLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    2486:	89 81       	ldd	r24, Y+1	; 0x01
    2488:	8f 5f       	subi	r24, 0xFF	; 255
    248a:	89 83       	std	Y+1, r24	; 0x01
    248c:	89 81       	ldd	r24, Y+1	; 0x01
    248e:	82 30       	cpi	r24, 0x02	; 2
    2490:	50 f3       	brcs	.-44     	; 0x2466 <prvInitialiseCoRoutineLists+0xe>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
    2492:	8f e9       	ldi	r24, 0x9F	; 159
    2494:	91 e0       	ldi	r25, 0x01	; 1
    2496:	0e 94 09 13 	call	0x2612	; 0x2612 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
    249a:	88 ea       	ldi	r24, 0xA8	; 168
    249c:	91 e0       	ldi	r25, 0x01	; 1
    249e:	0e 94 09 13 	call	0x2612	; 0x2612 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
    24a2:	85 eb       	ldi	r24, 0xB5	; 181
    24a4:	91 e0       	ldi	r25, 0x01	; 1
    24a6:	0e 94 09 13 	call	0x2612	; 0x2612 <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
    24aa:	8f e9       	ldi	r24, 0x9F	; 159
    24ac:	91 e0       	ldi	r25, 0x01	; 1
    24ae:	90 93 b2 01 	sts	0x01B2, r25
    24b2:	80 93 b1 01 	sts	0x01B1, r24
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
    24b6:	88 ea       	ldi	r24, 0xA8	; 168
    24b8:	91 e0       	ldi	r25, 0x01	; 1
    24ba:	90 93 b4 01 	sts	0x01B4, r25
    24be:	80 93 b3 01 	sts	0x01B3, r24
}
    24c2:	0f 90       	pop	r0
    24c4:	cf 91       	pop	r28
    24c6:	df 91       	pop	r29
    24c8:	08 95       	ret

000024ca <xCoRoutineRemoveFromEventList>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
{
    24ca:	df 93       	push	r29
    24cc:	cf 93       	push	r28
    24ce:	00 d0       	rcall	.+0      	; 0x24d0 <xCoRoutineRemoveFromEventList+0x6>
    24d0:	00 d0       	rcall	.+0      	; 0x24d2 <xCoRoutineRemoveFromEventList+0x8>
    24d2:	0f 92       	push	r0
    24d4:	cd b7       	in	r28, 0x3d	; 61
    24d6:	de b7       	in	r29, 0x3e	; 62
    24d8:	9d 83       	std	Y+5, r25	; 0x05
    24da:	8c 83       	std	Y+4, r24	; 0x04
signed portBASE_TYPE xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    24dc:	ec 81       	ldd	r30, Y+4	; 0x04
    24de:	fd 81       	ldd	r31, Y+5	; 0x05
    24e0:	05 80       	ldd	r0, Z+5	; 0x05
    24e2:	f6 81       	ldd	r31, Z+6	; 0x06
    24e4:	e0 2d       	mov	r30, r0
    24e6:	86 81       	ldd	r24, Z+6	; 0x06
    24e8:	97 81       	ldd	r25, Z+7	; 0x07
    24ea:	9b 83       	std	Y+3, r25	; 0x03
    24ec:	8a 83       	std	Y+2, r24	; 0x02
	vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    24ee:	8a 81       	ldd	r24, Y+2	; 0x02
    24f0:	9b 81       	ldd	r25, Y+3	; 0x03
    24f2:	0c 96       	adiw	r24, 0x0c	; 12
    24f4:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <vListRemove>
	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
    24f8:	8a 81       	ldd	r24, Y+2	; 0x02
    24fa:	9b 81       	ldd	r25, Y+3	; 0x03
    24fc:	9c 01       	movw	r18, r24
    24fe:	24 5f       	subi	r18, 0xF4	; 244
    2500:	3f 4f       	sbci	r19, 0xFF	; 255
    2502:	85 eb       	ldi	r24, 0xB5	; 181
    2504:	91 e0       	ldi	r25, 0x01	; 1
    2506:	b9 01       	movw	r22, r18
    2508:	0e 94 43 13 	call	0x2686	; 0x2686 <vListInsertEnd>

	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
    250c:	ea 81       	ldd	r30, Y+2	; 0x02
    250e:	fb 81       	ldd	r31, Y+3	; 0x03
    2510:	96 89       	ldd	r25, Z+22	; 0x16
    2512:	e0 91 84 01 	lds	r30, 0x0184
    2516:	f0 91 85 01 	lds	r31, 0x0185
    251a:	86 89       	ldd	r24, Z+22	; 0x16
    251c:	98 17       	cp	r25, r24
    251e:	18 f0       	brcs	.+6      	; 0x2526 <xCoRoutineRemoveFromEventList+0x5c>
	{
		xReturn = pdTRUE;
    2520:	81 e0       	ldi	r24, 0x01	; 1
    2522:	89 83       	std	Y+1, r24	; 0x01
    2524:	01 c0       	rjmp	.+2      	; 0x2528 <xCoRoutineRemoveFromEventList+0x5e>
	}
	else
	{
		xReturn = pdFALSE;
    2526:	19 82       	std	Y+1, r1	; 0x01
	}

	return xReturn;
    2528:	89 81       	ldd	r24, Y+1	; 0x01
}
    252a:	0f 90       	pop	r0
    252c:	0f 90       	pop	r0
    252e:	0f 90       	pop	r0
    2530:	0f 90       	pop	r0
    2532:	0f 90       	pop	r0
    2534:	cf 91       	pop	r28
    2536:	df 91       	pop	r29
    2538:	08 95       	ret

0000253a <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    253a:	df 93       	push	r29
    253c:	cf 93       	push	r28
    253e:	00 d0       	rcall	.+0      	; 0x2540 <pvPortMalloc+0x6>
    2540:	00 d0       	rcall	.+0      	; 0x2542 <pvPortMalloc+0x8>
    2542:	cd b7       	in	r28, 0x3d	; 61
    2544:	de b7       	in	r29, 0x3e	; 62
    2546:	9c 83       	std	Y+4, r25	; 0x04
    2548:	8b 83       	std	Y+3, r24	; 0x03
void *pvReturn = NULL; 
    254a:	1a 82       	std	Y+2, r1	; 0x02
    254c:	19 82       	std	Y+1, r1	; 0x01
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
    254e:	0e 94 27 1e 	call	0x3c4e	; 0x3c4e <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
    2552:	80 91 be 01 	lds	r24, 0x01BE
    2556:	90 91 bf 01 	lds	r25, 0x01BF
    255a:	2b 81       	ldd	r18, Y+3	; 0x03
    255c:	3c 81       	ldd	r19, Y+4	; 0x04
    255e:	82 0f       	add	r24, r18
    2560:	93 1f       	adc	r25, r19
    2562:	23 e0       	ldi	r18, 0x03	; 3
    2564:	88 3e       	cpi	r24, 0xE8	; 232
    2566:	92 07       	cpc	r25, r18
    2568:	18 f5       	brcc	.+70     	; 0x25b0 <pvPortMalloc+0x76>
    256a:	20 91 be 01 	lds	r18, 0x01BE
    256e:	30 91 bf 01 	lds	r19, 0x01BF
    2572:	8b 81       	ldd	r24, Y+3	; 0x03
    2574:	9c 81       	ldd	r25, Y+4	; 0x04
    2576:	28 0f       	add	r18, r24
    2578:	39 1f       	adc	r19, r25
    257a:	80 91 be 01 	lds	r24, 0x01BE
    257e:	90 91 bf 01 	lds	r25, 0x01BF
    2582:	82 17       	cp	r24, r18
    2584:	93 07       	cpc	r25, r19
    2586:	a0 f4       	brcc	.+40     	; 0x25b0 <pvPortMalloc+0x76>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
    2588:	80 91 be 01 	lds	r24, 0x01BE
    258c:	90 91 bf 01 	lds	r25, 0x01BF
    2590:	80 54       	subi	r24, 0x40	; 64
    2592:	9e 4f       	sbci	r25, 0xFE	; 254
    2594:	9a 83       	std	Y+2, r25	; 0x02
    2596:	89 83       	std	Y+1, r24	; 0x01
			xNextFreeByte += xWantedSize;			
    2598:	20 91 be 01 	lds	r18, 0x01BE
    259c:	30 91 bf 01 	lds	r19, 0x01BF
    25a0:	8b 81       	ldd	r24, Y+3	; 0x03
    25a2:	9c 81       	ldd	r25, Y+4	; 0x04
    25a4:	82 0f       	add	r24, r18
    25a6:	93 1f       	adc	r25, r19
    25a8:	90 93 bf 01 	sts	0x01BF, r25
    25ac:	80 93 be 01 	sts	0x01BE, r24
		}	
	}
	xTaskResumeAll();
    25b0:	0e 94 33 1e 	call	0x3c66	; 0x3c66 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif	

	return pvReturn;
    25b4:	89 81       	ldd	r24, Y+1	; 0x01
    25b6:	9a 81       	ldd	r25, Y+2	; 0x02
}
    25b8:	0f 90       	pop	r0
    25ba:	0f 90       	pop	r0
    25bc:	0f 90       	pop	r0
    25be:	0f 90       	pop	r0
    25c0:	cf 91       	pop	r28
    25c2:	df 91       	pop	r29
    25c4:	08 95       	ret

000025c6 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    25c6:	df 93       	push	r29
    25c8:	cf 93       	push	r28
    25ca:	00 d0       	rcall	.+0      	; 0x25cc <vPortFree+0x6>
    25cc:	cd b7       	in	r28, 0x3d	; 61
    25ce:	de b7       	in	r29, 0x3e	; 62
    25d0:	9a 83       	std	Y+2, r25	; 0x02
    25d2:	89 83       	std	Y+1, r24	; 0x01
	/* Memory cannot be freed using this scheme.  See heap_2.c and heap_3.c 
	for alternative implementations, and the memory management pages of 
	http://www.FreeRTOS.org for more information. */
	( void ) pv;
}
    25d4:	0f 90       	pop	r0
    25d6:	0f 90       	pop	r0
    25d8:	cf 91       	pop	r28
    25da:	df 91       	pop	r29
    25dc:	08 95       	ret

000025de <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
    25de:	df 93       	push	r29
    25e0:	cf 93       	push	r28
    25e2:	cd b7       	in	r28, 0x3d	; 61
    25e4:	de b7       	in	r29, 0x3e	; 62
	/* Only required when static memory is not cleared. */
	xNextFreeByte = ( size_t ) 0;
    25e6:	10 92 bf 01 	sts	0x01BF, r1
    25ea:	10 92 be 01 	sts	0x01BE, r1
}
    25ee:	cf 91       	pop	r28
    25f0:	df 91       	pop	r29
    25f2:	08 95       	ret

000025f4 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    25f4:	df 93       	push	r29
    25f6:	cf 93       	push	r28
    25f8:	cd b7       	in	r28, 0x3d	; 61
    25fa:	de b7       	in	r29, 0x3e	; 62
	return ( configTOTAL_HEAP_SIZE - xNextFreeByte );
    25fc:	20 91 be 01 	lds	r18, 0x01BE
    2600:	30 91 bf 01 	lds	r19, 0x01BF
    2604:	88 ee       	ldi	r24, 0xE8	; 232
    2606:	93 e0       	ldi	r25, 0x03	; 3
    2608:	82 1b       	sub	r24, r18
    260a:	93 0b       	sbc	r25, r19
}
    260c:	cf 91       	pop	r28
    260e:	df 91       	pop	r29
    2610:	08 95       	ret

00002612 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
    2612:	df 93       	push	r29
    2614:	cf 93       	push	r28
    2616:	00 d0       	rcall	.+0      	; 0x2618 <vListInitialise+0x6>
    2618:	cd b7       	in	r28, 0x3d	; 61
    261a:	de b7       	in	r29, 0x3e	; 62
    261c:	9a 83       	std	Y+2, r25	; 0x02
    261e:	89 83       	std	Y+1, r24	; 0x01
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
    2620:	89 81       	ldd	r24, Y+1	; 0x01
    2622:	9a 81       	ldd	r25, Y+2	; 0x02
    2624:	03 96       	adiw	r24, 0x03	; 3
    2626:	e9 81       	ldd	r30, Y+1	; 0x01
    2628:	fa 81       	ldd	r31, Y+2	; 0x02
    262a:	92 83       	std	Z+2, r25	; 0x02
    262c:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    262e:	e9 81       	ldd	r30, Y+1	; 0x01
    2630:	fa 81       	ldd	r31, Y+2	; 0x02
    2632:	8f ef       	ldi	r24, 0xFF	; 255
    2634:	9f ef       	ldi	r25, 0xFF	; 255
    2636:	94 83       	std	Z+4, r25	; 0x04
    2638:	83 83       	std	Z+3, r24	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
    263a:	89 81       	ldd	r24, Y+1	; 0x01
    263c:	9a 81       	ldd	r25, Y+2	; 0x02
    263e:	03 96       	adiw	r24, 0x03	; 3
    2640:	e9 81       	ldd	r30, Y+1	; 0x01
    2642:	fa 81       	ldd	r31, Y+2	; 0x02
    2644:	96 83       	std	Z+6, r25	; 0x06
    2646:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
    2648:	89 81       	ldd	r24, Y+1	; 0x01
    264a:	9a 81       	ldd	r25, Y+2	; 0x02
    264c:	03 96       	adiw	r24, 0x03	; 3
    264e:	e9 81       	ldd	r30, Y+1	; 0x01
    2650:	fa 81       	ldd	r31, Y+2	; 0x02
    2652:	90 87       	std	Z+8, r25	; 0x08
    2654:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
    2656:	e9 81       	ldd	r30, Y+1	; 0x01
    2658:	fa 81       	ldd	r31, Y+2	; 0x02
    265a:	10 82       	st	Z, r1
}
    265c:	0f 90       	pop	r0
    265e:	0f 90       	pop	r0
    2660:	cf 91       	pop	r28
    2662:	df 91       	pop	r29
    2664:	08 95       	ret

00002666 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
    2666:	df 93       	push	r29
    2668:	cf 93       	push	r28
    266a:	00 d0       	rcall	.+0      	; 0x266c <vListInitialiseItem+0x6>
    266c:	cd b7       	in	r28, 0x3d	; 61
    266e:	de b7       	in	r29, 0x3e	; 62
    2670:	9a 83       	std	Y+2, r25	; 0x02
    2672:	89 83       	std	Y+1, r24	; 0x01
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    2674:	e9 81       	ldd	r30, Y+1	; 0x01
    2676:	fa 81       	ldd	r31, Y+2	; 0x02
    2678:	11 86       	std	Z+9, r1	; 0x09
    267a:	10 86       	std	Z+8, r1	; 0x08
}
    267c:	0f 90       	pop	r0
    267e:	0f 90       	pop	r0
    2680:	cf 91       	pop	r28
    2682:	df 91       	pop	r29
    2684:	08 95       	ret

00002686 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
    2686:	df 93       	push	r29
    2688:	cf 93       	push	r28
    268a:	00 d0       	rcall	.+0      	; 0x268c <vListInsertEnd+0x6>
    268c:	00 d0       	rcall	.+0      	; 0x268e <vListInsertEnd+0x8>
    268e:	00 d0       	rcall	.+0      	; 0x2690 <vListInsertEnd+0xa>
    2690:	cd b7       	in	r28, 0x3d	; 61
    2692:	de b7       	in	r29, 0x3e	; 62
    2694:	9c 83       	std	Y+4, r25	; 0x04
    2696:	8b 83       	std	Y+3, r24	; 0x03
    2698:	7e 83       	std	Y+6, r23	; 0x06
    269a:	6d 83       	std	Y+5, r22	; 0x05

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
    269c:	eb 81       	ldd	r30, Y+3	; 0x03
    269e:	fc 81       	ldd	r31, Y+4	; 0x04
    26a0:	81 81       	ldd	r24, Z+1	; 0x01
    26a2:	92 81       	ldd	r25, Z+2	; 0x02
    26a4:	9a 83       	std	Y+2, r25	; 0x02
    26a6:	89 83       	std	Y+1, r24	; 0x01

	pxNewListItem->pxNext = pxIndex->pxNext;
    26a8:	e9 81       	ldd	r30, Y+1	; 0x01
    26aa:	fa 81       	ldd	r31, Y+2	; 0x02
    26ac:	82 81       	ldd	r24, Z+2	; 0x02
    26ae:	93 81       	ldd	r25, Z+3	; 0x03
    26b0:	ed 81       	ldd	r30, Y+5	; 0x05
    26b2:	fe 81       	ldd	r31, Y+6	; 0x06
    26b4:	93 83       	std	Z+3, r25	; 0x03
    26b6:	82 83       	std	Z+2, r24	; 0x02
	pxNewListItem->pxPrevious = pxList->pxIndex;
    26b8:	eb 81       	ldd	r30, Y+3	; 0x03
    26ba:	fc 81       	ldd	r31, Y+4	; 0x04
    26bc:	81 81       	ldd	r24, Z+1	; 0x01
    26be:	92 81       	ldd	r25, Z+2	; 0x02
    26c0:	ed 81       	ldd	r30, Y+5	; 0x05
    26c2:	fe 81       	ldd	r31, Y+6	; 0x06
    26c4:	95 83       	std	Z+5, r25	; 0x05
    26c6:	84 83       	std	Z+4, r24	; 0x04
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    26c8:	e9 81       	ldd	r30, Y+1	; 0x01
    26ca:	fa 81       	ldd	r31, Y+2	; 0x02
    26cc:	02 80       	ldd	r0, Z+2	; 0x02
    26ce:	f3 81       	ldd	r31, Z+3	; 0x03
    26d0:	e0 2d       	mov	r30, r0
    26d2:	8d 81       	ldd	r24, Y+5	; 0x05
    26d4:	9e 81       	ldd	r25, Y+6	; 0x06
    26d6:	95 83       	std	Z+5, r25	; 0x05
    26d8:	84 83       	std	Z+4, r24	; 0x04
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
    26da:	8d 81       	ldd	r24, Y+5	; 0x05
    26dc:	9e 81       	ldd	r25, Y+6	; 0x06
    26de:	e9 81       	ldd	r30, Y+1	; 0x01
    26e0:	fa 81       	ldd	r31, Y+2	; 0x02
    26e2:	93 83       	std	Z+3, r25	; 0x03
    26e4:	82 83       	std	Z+2, r24	; 0x02
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
    26e6:	8d 81       	ldd	r24, Y+5	; 0x05
    26e8:	9e 81       	ldd	r25, Y+6	; 0x06
    26ea:	eb 81       	ldd	r30, Y+3	; 0x03
    26ec:	fc 81       	ldd	r31, Y+4	; 0x04
    26ee:	92 83       	std	Z+2, r25	; 0x02
    26f0:	81 83       	std	Z+1, r24	; 0x01

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    26f2:	ed 81       	ldd	r30, Y+5	; 0x05
    26f4:	fe 81       	ldd	r31, Y+6	; 0x06
    26f6:	8b 81       	ldd	r24, Y+3	; 0x03
    26f8:	9c 81       	ldd	r25, Y+4	; 0x04
    26fa:	91 87       	std	Z+9, r25	; 0x09
    26fc:	80 87       	std	Z+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
    26fe:	eb 81       	ldd	r30, Y+3	; 0x03
    2700:	fc 81       	ldd	r31, Y+4	; 0x04
    2702:	80 81       	ld	r24, Z
    2704:	8f 5f       	subi	r24, 0xFF	; 255
    2706:	eb 81       	ldd	r30, Y+3	; 0x03
    2708:	fc 81       	ldd	r31, Y+4	; 0x04
    270a:	80 83       	st	Z, r24
}
    270c:	26 96       	adiw	r28, 0x06	; 6
    270e:	0f b6       	in	r0, 0x3f	; 63
    2710:	f8 94       	cli
    2712:	de bf       	out	0x3e, r29	; 62
    2714:	0f be       	out	0x3f, r0	; 63
    2716:	cd bf       	out	0x3d, r28	; 61
    2718:	cf 91       	pop	r28
    271a:	df 91       	pop	r29
    271c:	08 95       	ret

0000271e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
    271e:	df 93       	push	r29
    2720:	cf 93       	push	r28
    2722:	cd b7       	in	r28, 0x3d	; 61
    2724:	de b7       	in	r29, 0x3e	; 62
    2726:	28 97       	sbiw	r28, 0x08	; 8
    2728:	0f b6       	in	r0, 0x3f	; 63
    272a:	f8 94       	cli
    272c:	de bf       	out	0x3e, r29	; 62
    272e:	0f be       	out	0x3f, r0	; 63
    2730:	cd bf       	out	0x3d, r28	; 61
    2732:	9e 83       	std	Y+6, r25	; 0x06
    2734:	8d 83       	std	Y+5, r24	; 0x05
    2736:	78 87       	std	Y+8, r23	; 0x08
    2738:	6f 83       	std	Y+7, r22	; 0x07
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
    273a:	ef 81       	ldd	r30, Y+7	; 0x07
    273c:	f8 85       	ldd	r31, Y+8	; 0x08
    273e:	80 81       	ld	r24, Z
    2740:	91 81       	ldd	r25, Z+1	; 0x01
    2742:	9a 83       	std	Y+2, r25	; 0x02
    2744:	89 83       	std	Y+1, r24	; 0x01
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    2746:	89 81       	ldd	r24, Y+1	; 0x01
    2748:	9a 81       	ldd	r25, Y+2	; 0x02
    274a:	2f ef       	ldi	r18, 0xFF	; 255
    274c:	8f 3f       	cpi	r24, 0xFF	; 255
    274e:	92 07       	cpc	r25, r18
    2750:	39 f4       	brne	.+14     	; 0x2760 <vListInsert+0x42>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    2752:	ed 81       	ldd	r30, Y+5	; 0x05
    2754:	fe 81       	ldd	r31, Y+6	; 0x06
    2756:	87 81       	ldd	r24, Z+7	; 0x07
    2758:	90 85       	ldd	r25, Z+8	; 0x08
    275a:	9c 83       	std	Y+4, r25	; 0x04
    275c:	8b 83       	std	Y+3, r24	; 0x03
    275e:	18 c0       	rjmp	.+48     	; 0x2790 <vListInsert+0x72>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
    2760:	8d 81       	ldd	r24, Y+5	; 0x05
    2762:	9e 81       	ldd	r25, Y+6	; 0x06
    2764:	03 96       	adiw	r24, 0x03	; 3
    2766:	9c 83       	std	Y+4, r25	; 0x04
    2768:	8b 83       	std	Y+3, r24	; 0x03
    276a:	06 c0       	rjmp	.+12     	; 0x2778 <vListInsert+0x5a>
    276c:	eb 81       	ldd	r30, Y+3	; 0x03
    276e:	fc 81       	ldd	r31, Y+4	; 0x04
    2770:	82 81       	ldd	r24, Z+2	; 0x02
    2772:	93 81       	ldd	r25, Z+3	; 0x03
    2774:	9c 83       	std	Y+4, r25	; 0x04
    2776:	8b 83       	std	Y+3, r24	; 0x03
    2778:	eb 81       	ldd	r30, Y+3	; 0x03
    277a:	fc 81       	ldd	r31, Y+4	; 0x04
    277c:	02 80       	ldd	r0, Z+2	; 0x02
    277e:	f3 81       	ldd	r31, Z+3	; 0x03
    2780:	e0 2d       	mov	r30, r0
    2782:	20 81       	ld	r18, Z
    2784:	31 81       	ldd	r19, Z+1	; 0x01
    2786:	89 81       	ldd	r24, Y+1	; 0x01
    2788:	9a 81       	ldd	r25, Y+2	; 0x02
    278a:	82 17       	cp	r24, r18
    278c:	93 07       	cpc	r25, r19
    278e:	70 f7       	brcc	.-36     	; 0x276c <vListInsert+0x4e>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    2790:	eb 81       	ldd	r30, Y+3	; 0x03
    2792:	fc 81       	ldd	r31, Y+4	; 0x04
    2794:	82 81       	ldd	r24, Z+2	; 0x02
    2796:	93 81       	ldd	r25, Z+3	; 0x03
    2798:	ef 81       	ldd	r30, Y+7	; 0x07
    279a:	f8 85       	ldd	r31, Y+8	; 0x08
    279c:	93 83       	std	Z+3, r25	; 0x03
    279e:	82 83       	std	Z+2, r24	; 0x02
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    27a0:	ef 81       	ldd	r30, Y+7	; 0x07
    27a2:	f8 85       	ldd	r31, Y+8	; 0x08
    27a4:	02 80       	ldd	r0, Z+2	; 0x02
    27a6:	f3 81       	ldd	r31, Z+3	; 0x03
    27a8:	e0 2d       	mov	r30, r0
    27aa:	8f 81       	ldd	r24, Y+7	; 0x07
    27ac:	98 85       	ldd	r25, Y+8	; 0x08
    27ae:	95 83       	std	Z+5, r25	; 0x05
    27b0:	84 83       	std	Z+4, r24	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
    27b2:	ef 81       	ldd	r30, Y+7	; 0x07
    27b4:	f8 85       	ldd	r31, Y+8	; 0x08
    27b6:	8b 81       	ldd	r24, Y+3	; 0x03
    27b8:	9c 81       	ldd	r25, Y+4	; 0x04
    27ba:	95 83       	std	Z+5, r25	; 0x05
    27bc:	84 83       	std	Z+4, r24	; 0x04
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    27be:	8f 81       	ldd	r24, Y+7	; 0x07
    27c0:	98 85       	ldd	r25, Y+8	; 0x08
    27c2:	eb 81       	ldd	r30, Y+3	; 0x03
    27c4:	fc 81       	ldd	r31, Y+4	; 0x04
    27c6:	93 83       	std	Z+3, r25	; 0x03
    27c8:	82 83       	std	Z+2, r24	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    27ca:	ef 81       	ldd	r30, Y+7	; 0x07
    27cc:	f8 85       	ldd	r31, Y+8	; 0x08
    27ce:	8d 81       	ldd	r24, Y+5	; 0x05
    27d0:	9e 81       	ldd	r25, Y+6	; 0x06
    27d2:	91 87       	std	Z+9, r25	; 0x09
    27d4:	80 87       	std	Z+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
    27d6:	ed 81       	ldd	r30, Y+5	; 0x05
    27d8:	fe 81       	ldd	r31, Y+6	; 0x06
    27da:	80 81       	ld	r24, Z
    27dc:	8f 5f       	subi	r24, 0xFF	; 255
    27de:	ed 81       	ldd	r30, Y+5	; 0x05
    27e0:	fe 81       	ldd	r31, Y+6	; 0x06
    27e2:	80 83       	st	Z, r24
}
    27e4:	28 96       	adiw	r28, 0x08	; 8
    27e6:	0f b6       	in	r0, 0x3f	; 63
    27e8:	f8 94       	cli
    27ea:	de bf       	out	0x3e, r29	; 62
    27ec:	0f be       	out	0x3f, r0	; 63
    27ee:	cd bf       	out	0x3d, r28	; 61
    27f0:	cf 91       	pop	r28
    27f2:	df 91       	pop	r29
    27f4:	08 95       	ret

000027f6 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
    27f6:	df 93       	push	r29
    27f8:	cf 93       	push	r28
    27fa:	00 d0       	rcall	.+0      	; 0x27fc <vListRemove+0x6>
    27fc:	00 d0       	rcall	.+0      	; 0x27fe <vListRemove+0x8>
    27fe:	cd b7       	in	r28, 0x3d	; 61
    2800:	de b7       	in	r29, 0x3e	; 62
    2802:	9c 83       	std	Y+4, r25	; 0x04
    2804:	8b 83       	std	Y+3, r24	; 0x03
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    2806:	eb 81       	ldd	r30, Y+3	; 0x03
    2808:	fc 81       	ldd	r31, Y+4	; 0x04
    280a:	a2 81       	ldd	r26, Z+2	; 0x02
    280c:	b3 81       	ldd	r27, Z+3	; 0x03
    280e:	eb 81       	ldd	r30, Y+3	; 0x03
    2810:	fc 81       	ldd	r31, Y+4	; 0x04
    2812:	84 81       	ldd	r24, Z+4	; 0x04
    2814:	95 81       	ldd	r25, Z+5	; 0x05
    2816:	15 96       	adiw	r26, 0x05	; 5
    2818:	9c 93       	st	X, r25
    281a:	8e 93       	st	-X, r24
    281c:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    281e:	eb 81       	ldd	r30, Y+3	; 0x03
    2820:	fc 81       	ldd	r31, Y+4	; 0x04
    2822:	a4 81       	ldd	r26, Z+4	; 0x04
    2824:	b5 81       	ldd	r27, Z+5	; 0x05
    2826:	eb 81       	ldd	r30, Y+3	; 0x03
    2828:	fc 81       	ldd	r31, Y+4	; 0x04
    282a:	82 81       	ldd	r24, Z+2	; 0x02
    282c:	93 81       	ldd	r25, Z+3	; 0x03
    282e:	13 96       	adiw	r26, 0x03	; 3
    2830:	9c 93       	st	X, r25
    2832:	8e 93       	st	-X, r24
    2834:	12 97       	sbiw	r26, 0x02	; 2
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
    2836:	eb 81       	ldd	r30, Y+3	; 0x03
    2838:	fc 81       	ldd	r31, Y+4	; 0x04
    283a:	80 85       	ldd	r24, Z+8	; 0x08
    283c:	91 85       	ldd	r25, Z+9	; 0x09
    283e:	9a 83       	std	Y+2, r25	; 0x02
    2840:	89 83       	std	Y+1, r24	; 0x01

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    2842:	e9 81       	ldd	r30, Y+1	; 0x01
    2844:	fa 81       	ldd	r31, Y+2	; 0x02
    2846:	21 81       	ldd	r18, Z+1	; 0x01
    2848:	32 81       	ldd	r19, Z+2	; 0x02
    284a:	8b 81       	ldd	r24, Y+3	; 0x03
    284c:	9c 81       	ldd	r25, Y+4	; 0x04
    284e:	28 17       	cp	r18, r24
    2850:	39 07       	cpc	r19, r25
    2852:	41 f4       	brne	.+16     	; 0x2864 <vListRemove+0x6e>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    2854:	eb 81       	ldd	r30, Y+3	; 0x03
    2856:	fc 81       	ldd	r31, Y+4	; 0x04
    2858:	84 81       	ldd	r24, Z+4	; 0x04
    285a:	95 81       	ldd	r25, Z+5	; 0x05
    285c:	e9 81       	ldd	r30, Y+1	; 0x01
    285e:	fa 81       	ldd	r31, Y+2	; 0x02
    2860:	92 83       	std	Z+2, r25	; 0x02
    2862:	81 83       	std	Z+1, r24	; 0x01
	}

	pxItemToRemove->pvContainer = NULL;
    2864:	eb 81       	ldd	r30, Y+3	; 0x03
    2866:	fc 81       	ldd	r31, Y+4	; 0x04
    2868:	11 86       	std	Z+9, r1	; 0x09
    286a:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
    286c:	e9 81       	ldd	r30, Y+1	; 0x01
    286e:	fa 81       	ldd	r31, Y+2	; 0x02
    2870:	80 81       	ld	r24, Z
    2872:	81 50       	subi	r24, 0x01	; 1
    2874:	e9 81       	ldd	r30, Y+1	; 0x01
    2876:	fa 81       	ldd	r31, Y+2	; 0x02
    2878:	80 83       	st	Z, r24
}
    287a:	0f 90       	pop	r0
    287c:	0f 90       	pop	r0
    287e:	0f 90       	pop	r0
    2880:	0f 90       	pop	r0
    2882:	cf 91       	pop	r28
    2884:	df 91       	pop	r29
    2886:	08 95       	ret

00002888 <main>:
//void LED_3(void *pv);



void main(void)
{
    2888:	af 92       	push	r10
    288a:	bf 92       	push	r11
    288c:	cf 92       	push	r12
    288e:	df 92       	push	r13
    2890:	ef 92       	push	r14
    2892:	ff 92       	push	r15
    2894:	0f 93       	push	r16
    2896:	df 93       	push	r29
    2898:	cf 93       	push	r28
    289a:	cd b7       	in	r28, 0x3d	; 61
    289c:	de b7       	in	r29, 0x3e	; 62

	PORT_VoidInit();
    289e:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <PORT_VoidInit>
	CLCD_voidInit();
    28a2:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <CLCD_voidInit>

	xTaskCreate(&LCD_1,NULL,250,NULL,0,NULL);
    28a6:	88 e7       	ldi	r24, 0x78	; 120
    28a8:	94 e1       	ldi	r25, 0x14	; 20
    28aa:	60 e0       	ldi	r22, 0x00	; 0
    28ac:	70 e0       	ldi	r23, 0x00	; 0
    28ae:	4a ef       	ldi	r20, 0xFA	; 250
    28b0:	50 e0       	ldi	r21, 0x00	; 0
    28b2:	20 e0       	ldi	r18, 0x00	; 0
    28b4:	30 e0       	ldi	r19, 0x00	; 0
    28b6:	00 e0       	ldi	r16, 0x00	; 0
    28b8:	ee 24       	eor	r14, r14
    28ba:	ff 24       	eor	r15, r15
    28bc:	cc 24       	eor	r12, r12
    28be:	dd 24       	eor	r13, r13
    28c0:	aa 24       	eor	r10, r10
    28c2:	bb 24       	eor	r11, r11
    28c4:	0e 94 eb 1b 	call	0x37d6	; 0x37d6 <xTaskGenericCreate>
	xTaskCreate(&LCD_2,NULL,250,NULL,0,NULL);
    28c8:	88 e8       	ldi	r24, 0x88	; 136
    28ca:	94 e1       	ldi	r25, 0x14	; 20
    28cc:	60 e0       	ldi	r22, 0x00	; 0
    28ce:	70 e0       	ldi	r23, 0x00	; 0
    28d0:	4a ef       	ldi	r20, 0xFA	; 250
    28d2:	50 e0       	ldi	r21, 0x00	; 0
    28d4:	20 e0       	ldi	r18, 0x00	; 0
    28d6:	30 e0       	ldi	r19, 0x00	; 0
    28d8:	00 e0       	ldi	r16, 0x00	; 0
    28da:	ee 24       	eor	r14, r14
    28dc:	ff 24       	eor	r15, r15
    28de:	cc 24       	eor	r12, r12
    28e0:	dd 24       	eor	r13, r13
    28e2:	aa 24       	eor	r10, r10
    28e4:	bb 24       	eor	r11, r11
    28e6:	0e 94 eb 1b 	call	0x37d6	; 0x37d6 <xTaskGenericCreate>
	//xTaskCreate(&LED_3,NULL,100,NULL,3,NULL);
	vTaskStartScheduler();
    28ea:	0e 94 e4 1d 	call	0x3bc8	; 0x3bc8 <vTaskStartScheduler>
    28ee:	ff cf       	rjmp	.-2      	; 0x28ee <main+0x66>

000028f0 <LCD_1>:

	}
}

void LCD_1(void *pv)
{
    28f0:	df 93       	push	r29
    28f2:	cf 93       	push	r28
    28f4:	00 d0       	rcall	.+0      	; 0x28f6 <LCD_1+0x6>
    28f6:	cd b7       	in	r28, 0x3d	; 61
    28f8:	de b7       	in	r29, 0x3e	; 62
    28fa:	9a 83       	std	Y+2, r25	; 0x02
    28fc:	89 83       	std	Y+1, r24	; 0x01

	while(1)
	{
		CLCD_voidSendString("IAMTASk1");
    28fe:	80 e6       	ldi	r24, 0x60	; 96
    2900:	90 e0       	ldi	r25, 0x00	; 0
    2902:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <CLCD_voidSendString>
		vTaskDelay(1000);
    2906:	88 ee       	ldi	r24, 0xE8	; 232
    2908:	93 e0       	ldi	r25, 0x03	; 3
    290a:	0e 94 af 1d 	call	0x3b5e	; 0x3b5e <vTaskDelay>
    290e:	f7 cf       	rjmp	.-18     	; 0x28fe <LCD_1+0xe>

00002910 <LCD_2>:
	}

}

void LCD_2(void *pv)
{
    2910:	df 93       	push	r29
    2912:	cf 93       	push	r28
    2914:	00 d0       	rcall	.+0      	; 0x2916 <LCD_2+0x6>
    2916:	cd b7       	in	r28, 0x3d	; 61
    2918:	de b7       	in	r29, 0x3e	; 62
    291a:	9a 83       	std	Y+2, r25	; 0x02
    291c:	89 83       	std	Y+1, r24	; 0x01

	while(1)
	{
		CLCD_voidSendString("IAMTASk2");
    291e:	89 e6       	ldi	r24, 0x69	; 105
    2920:	90 e0       	ldi	r25, 0x00	; 0
    2922:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <CLCD_voidSendString>
		vTaskDelay(1000);
    2926:	88 ee       	ldi	r24, 0xE8	; 232
    2928:	93 e0       	ldi	r25, 0x03	; 3
    292a:	0e 94 af 1d 	call	0x3b5e	; 0x3b5e <vTaskDelay>
    292e:	f7 cf       	rjmp	.-18     	; 0x291e <LCD_2+0xe>

00002930 <pxPortInitialiseStack>:

/* 
 * See header file for description. 
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
    2930:	df 93       	push	r29
    2932:	cf 93       	push	r28
    2934:	cd b7       	in	r28, 0x3d	; 61
    2936:	de b7       	in	r29, 0x3e	; 62
    2938:	28 97       	sbiw	r28, 0x08	; 8
    293a:	0f b6       	in	r0, 0x3f	; 63
    293c:	f8 94       	cli
    293e:	de bf       	out	0x3e, r29	; 62
    2940:	0f be       	out	0x3f, r0	; 63
    2942:	cd bf       	out	0x3d, r28	; 61
    2944:	9c 83       	std	Y+4, r25	; 0x04
    2946:	8b 83       	std	Y+3, r24	; 0x03
    2948:	7e 83       	std	Y+6, r23	; 0x06
    294a:	6d 83       	std	Y+5, r22	; 0x05
    294c:	58 87       	std	Y+8, r21	; 0x08
    294e:	4f 83       	std	Y+7, r20	; 0x07
unsigned short usAddress;

	/* Place a few bytes of known values on the bottom of the stack. 
	This is just useful for debugging. */

	*pxTopOfStack = 0x11;
    2950:	eb 81       	ldd	r30, Y+3	; 0x03
    2952:	fc 81       	ldd	r31, Y+4	; 0x04
    2954:	81 e1       	ldi	r24, 0x11	; 17
    2956:	80 83       	st	Z, r24
	pxTopOfStack--;
    2958:	8b 81       	ldd	r24, Y+3	; 0x03
    295a:	9c 81       	ldd	r25, Y+4	; 0x04
    295c:	01 97       	sbiw	r24, 0x01	; 1
    295e:	9c 83       	std	Y+4, r25	; 0x04
    2960:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = 0x22;
    2962:	eb 81       	ldd	r30, Y+3	; 0x03
    2964:	fc 81       	ldd	r31, Y+4	; 0x04
    2966:	82 e2       	ldi	r24, 0x22	; 34
    2968:	80 83       	st	Z, r24
	pxTopOfStack--;
    296a:	8b 81       	ldd	r24, Y+3	; 0x03
    296c:	9c 81       	ldd	r25, Y+4	; 0x04
    296e:	01 97       	sbiw	r24, 0x01	; 1
    2970:	9c 83       	std	Y+4, r25	; 0x04
    2972:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = 0x33;
    2974:	eb 81       	ldd	r30, Y+3	; 0x03
    2976:	fc 81       	ldd	r31, Y+4	; 0x04
    2978:	83 e3       	ldi	r24, 0x33	; 51
    297a:	80 83       	st	Z, r24
	pxTopOfStack--;
    297c:	8b 81       	ldd	r24, Y+3	; 0x03
    297e:	9c 81       	ldd	r25, Y+4	; 0x04
    2980:	01 97       	sbiw	r24, 0x01	; 1
    2982:	9c 83       	std	Y+4, r25	; 0x04
    2984:	8b 83       	std	Y+3, r24	; 0x03

	/*lint -e950 -e611 -e923 Lint doesn't like this much - but nothing I can do about it. */

	/* The start of the task code will be popped off the stack last, so place
	it on first. */
	usAddress = ( unsigned short ) pxCode;
    2986:	8d 81       	ldd	r24, Y+5	; 0x05
    2988:	9e 81       	ldd	r25, Y+6	; 0x06
    298a:	9a 83       	std	Y+2, r25	; 0x02
    298c:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    298e:	89 81       	ldd	r24, Y+1	; 0x01
    2990:	eb 81       	ldd	r30, Y+3	; 0x03
    2992:	fc 81       	ldd	r31, Y+4	; 0x04
    2994:	80 83       	st	Z, r24
	pxTopOfStack--;
    2996:	8b 81       	ldd	r24, Y+3	; 0x03
    2998:	9c 81       	ldd	r25, Y+4	; 0x04
    299a:	01 97       	sbiw	r24, 0x01	; 1
    299c:	9c 83       	std	Y+4, r25	; 0x04
    299e:	8b 83       	std	Y+3, r24	; 0x03

	usAddress >>= 8;
    29a0:	89 81       	ldd	r24, Y+1	; 0x01
    29a2:	9a 81       	ldd	r25, Y+2	; 0x02
    29a4:	89 2f       	mov	r24, r25
    29a6:	99 27       	eor	r25, r25
    29a8:	9a 83       	std	Y+2, r25	; 0x02
    29aa:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    29ac:	89 81       	ldd	r24, Y+1	; 0x01
    29ae:	eb 81       	ldd	r30, Y+3	; 0x03
    29b0:	fc 81       	ldd	r31, Y+4	; 0x04
    29b2:	80 83       	st	Z, r24
	pxTopOfStack--;
    29b4:	8b 81       	ldd	r24, Y+3	; 0x03
    29b6:	9c 81       	ldd	r25, Y+4	; 0x04
    29b8:	01 97       	sbiw	r24, 0x01	; 1
    29ba:	9c 83       	std	Y+4, r25	; 0x04
    29bc:	8b 83       	std	Y+3, r24	; 0x03

	/* Next simulate the stack as if after a call to portSAVE_CONTEXT().  
	portSAVE_CONTEXT places the flags on the stack immediately after r0
	to ensure the interrupts get disabled as soon as possible, and so ensuring
	the stack use is minimal should a context switch interrupt occur. */
	*pxTopOfStack = ( portSTACK_TYPE ) 0x00;	/* R0 */
    29be:	eb 81       	ldd	r30, Y+3	; 0x03
    29c0:	fc 81       	ldd	r31, Y+4	; 0x04
    29c2:	10 82       	st	Z, r1
	pxTopOfStack--;
    29c4:	8b 81       	ldd	r24, Y+3	; 0x03
    29c6:	9c 81       	ldd	r25, Y+4	; 0x04
    29c8:	01 97       	sbiw	r24, 0x01	; 1
    29ca:	9c 83       	std	Y+4, r25	; 0x04
    29cc:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = portFLAGS_INT_ENABLED;
    29ce:	eb 81       	ldd	r30, Y+3	; 0x03
    29d0:	fc 81       	ldd	r31, Y+4	; 0x04
    29d2:	80 e8       	ldi	r24, 0x80	; 128
    29d4:	80 83       	st	Z, r24
	pxTopOfStack--;
    29d6:	8b 81       	ldd	r24, Y+3	; 0x03
    29d8:	9c 81       	ldd	r25, Y+4	; 0x04
    29da:	01 97       	sbiw	r24, 0x01	; 1
    29dc:	9c 83       	std	Y+4, r25	; 0x04
    29de:	8b 83       	std	Y+3, r24	; 0x03


	/* Now the remaining registers.   The compiler expects R1 to be 0. */
	*pxTopOfStack = ( portSTACK_TYPE ) 0x00;	/* R1 */
    29e0:	eb 81       	ldd	r30, Y+3	; 0x03
    29e2:	fc 81       	ldd	r31, Y+4	; 0x04
    29e4:	10 82       	st	Z, r1
	pxTopOfStack--;
    29e6:	8b 81       	ldd	r24, Y+3	; 0x03
    29e8:	9c 81       	ldd	r25, Y+4	; 0x04
    29ea:	01 97       	sbiw	r24, 0x01	; 1
    29ec:	9c 83       	std	Y+4, r25	; 0x04
    29ee:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x02;	/* R2 */
    29f0:	eb 81       	ldd	r30, Y+3	; 0x03
    29f2:	fc 81       	ldd	r31, Y+4	; 0x04
    29f4:	82 e0       	ldi	r24, 0x02	; 2
    29f6:	80 83       	st	Z, r24
	pxTopOfStack--;
    29f8:	8b 81       	ldd	r24, Y+3	; 0x03
    29fa:	9c 81       	ldd	r25, Y+4	; 0x04
    29fc:	01 97       	sbiw	r24, 0x01	; 1
    29fe:	9c 83       	std	Y+4, r25	; 0x04
    2a00:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x03;	/* R3 */
    2a02:	eb 81       	ldd	r30, Y+3	; 0x03
    2a04:	fc 81       	ldd	r31, Y+4	; 0x04
    2a06:	83 e0       	ldi	r24, 0x03	; 3
    2a08:	80 83       	st	Z, r24
	pxTopOfStack--;
    2a0a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a0c:	9c 81       	ldd	r25, Y+4	; 0x04
    2a0e:	01 97       	sbiw	r24, 0x01	; 1
    2a10:	9c 83       	std	Y+4, r25	; 0x04
    2a12:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x04;	/* R4 */
    2a14:	eb 81       	ldd	r30, Y+3	; 0x03
    2a16:	fc 81       	ldd	r31, Y+4	; 0x04
    2a18:	84 e0       	ldi	r24, 0x04	; 4
    2a1a:	80 83       	st	Z, r24
	pxTopOfStack--;
    2a1c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a1e:	9c 81       	ldd	r25, Y+4	; 0x04
    2a20:	01 97       	sbiw	r24, 0x01	; 1
    2a22:	9c 83       	std	Y+4, r25	; 0x04
    2a24:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x05;	/* R5 */
    2a26:	eb 81       	ldd	r30, Y+3	; 0x03
    2a28:	fc 81       	ldd	r31, Y+4	; 0x04
    2a2a:	85 e0       	ldi	r24, 0x05	; 5
    2a2c:	80 83       	st	Z, r24
	pxTopOfStack--;
    2a2e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a30:	9c 81       	ldd	r25, Y+4	; 0x04
    2a32:	01 97       	sbiw	r24, 0x01	; 1
    2a34:	9c 83       	std	Y+4, r25	; 0x04
    2a36:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x06;	/* R6 */
    2a38:	eb 81       	ldd	r30, Y+3	; 0x03
    2a3a:	fc 81       	ldd	r31, Y+4	; 0x04
    2a3c:	86 e0       	ldi	r24, 0x06	; 6
    2a3e:	80 83       	st	Z, r24
	pxTopOfStack--;
    2a40:	8b 81       	ldd	r24, Y+3	; 0x03
    2a42:	9c 81       	ldd	r25, Y+4	; 0x04
    2a44:	01 97       	sbiw	r24, 0x01	; 1
    2a46:	9c 83       	std	Y+4, r25	; 0x04
    2a48:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x07;	/* R7 */
    2a4a:	eb 81       	ldd	r30, Y+3	; 0x03
    2a4c:	fc 81       	ldd	r31, Y+4	; 0x04
    2a4e:	87 e0       	ldi	r24, 0x07	; 7
    2a50:	80 83       	st	Z, r24
	pxTopOfStack--;
    2a52:	8b 81       	ldd	r24, Y+3	; 0x03
    2a54:	9c 81       	ldd	r25, Y+4	; 0x04
    2a56:	01 97       	sbiw	r24, 0x01	; 1
    2a58:	9c 83       	std	Y+4, r25	; 0x04
    2a5a:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x08;	/* R8 */
    2a5c:	eb 81       	ldd	r30, Y+3	; 0x03
    2a5e:	fc 81       	ldd	r31, Y+4	; 0x04
    2a60:	88 e0       	ldi	r24, 0x08	; 8
    2a62:	80 83       	st	Z, r24
	pxTopOfStack--;
    2a64:	8b 81       	ldd	r24, Y+3	; 0x03
    2a66:	9c 81       	ldd	r25, Y+4	; 0x04
    2a68:	01 97       	sbiw	r24, 0x01	; 1
    2a6a:	9c 83       	std	Y+4, r25	; 0x04
    2a6c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x09;	/* R9 */
    2a6e:	eb 81       	ldd	r30, Y+3	; 0x03
    2a70:	fc 81       	ldd	r31, Y+4	; 0x04
    2a72:	89 e0       	ldi	r24, 0x09	; 9
    2a74:	80 83       	st	Z, r24
	pxTopOfStack--;
    2a76:	8b 81       	ldd	r24, Y+3	; 0x03
    2a78:	9c 81       	ldd	r25, Y+4	; 0x04
    2a7a:	01 97       	sbiw	r24, 0x01	; 1
    2a7c:	9c 83       	std	Y+4, r25	; 0x04
    2a7e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x10;	/* R10 */
    2a80:	eb 81       	ldd	r30, Y+3	; 0x03
    2a82:	fc 81       	ldd	r31, Y+4	; 0x04
    2a84:	80 e1       	ldi	r24, 0x10	; 16
    2a86:	80 83       	st	Z, r24
	pxTopOfStack--;
    2a88:	8b 81       	ldd	r24, Y+3	; 0x03
    2a8a:	9c 81       	ldd	r25, Y+4	; 0x04
    2a8c:	01 97       	sbiw	r24, 0x01	; 1
    2a8e:	9c 83       	std	Y+4, r25	; 0x04
    2a90:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x11;	/* R11 */
    2a92:	eb 81       	ldd	r30, Y+3	; 0x03
    2a94:	fc 81       	ldd	r31, Y+4	; 0x04
    2a96:	81 e1       	ldi	r24, 0x11	; 17
    2a98:	80 83       	st	Z, r24
	pxTopOfStack--;
    2a9a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a9c:	9c 81       	ldd	r25, Y+4	; 0x04
    2a9e:	01 97       	sbiw	r24, 0x01	; 1
    2aa0:	9c 83       	std	Y+4, r25	; 0x04
    2aa2:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x12;	/* R12 */
    2aa4:	eb 81       	ldd	r30, Y+3	; 0x03
    2aa6:	fc 81       	ldd	r31, Y+4	; 0x04
    2aa8:	82 e1       	ldi	r24, 0x12	; 18
    2aaa:	80 83       	st	Z, r24
	pxTopOfStack--;
    2aac:	8b 81       	ldd	r24, Y+3	; 0x03
    2aae:	9c 81       	ldd	r25, Y+4	; 0x04
    2ab0:	01 97       	sbiw	r24, 0x01	; 1
    2ab2:	9c 83       	std	Y+4, r25	; 0x04
    2ab4:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x13;	/* R13 */
    2ab6:	eb 81       	ldd	r30, Y+3	; 0x03
    2ab8:	fc 81       	ldd	r31, Y+4	; 0x04
    2aba:	83 e1       	ldi	r24, 0x13	; 19
    2abc:	80 83       	st	Z, r24
	pxTopOfStack--;
    2abe:	8b 81       	ldd	r24, Y+3	; 0x03
    2ac0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ac2:	01 97       	sbiw	r24, 0x01	; 1
    2ac4:	9c 83       	std	Y+4, r25	; 0x04
    2ac6:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x14;	/* R14 */
    2ac8:	eb 81       	ldd	r30, Y+3	; 0x03
    2aca:	fc 81       	ldd	r31, Y+4	; 0x04
    2acc:	84 e1       	ldi	r24, 0x14	; 20
    2ace:	80 83       	st	Z, r24
	pxTopOfStack--;
    2ad0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ad2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ad4:	01 97       	sbiw	r24, 0x01	; 1
    2ad6:	9c 83       	std	Y+4, r25	; 0x04
    2ad8:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x15;	/* R15 */
    2ada:	eb 81       	ldd	r30, Y+3	; 0x03
    2adc:	fc 81       	ldd	r31, Y+4	; 0x04
    2ade:	85 e1       	ldi	r24, 0x15	; 21
    2ae0:	80 83       	st	Z, r24
	pxTopOfStack--;
    2ae2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ae4:	9c 81       	ldd	r25, Y+4	; 0x04
    2ae6:	01 97       	sbiw	r24, 0x01	; 1
    2ae8:	9c 83       	std	Y+4, r25	; 0x04
    2aea:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x16;	/* R16 */
    2aec:	eb 81       	ldd	r30, Y+3	; 0x03
    2aee:	fc 81       	ldd	r31, Y+4	; 0x04
    2af0:	86 e1       	ldi	r24, 0x16	; 22
    2af2:	80 83       	st	Z, r24
	pxTopOfStack--;
    2af4:	8b 81       	ldd	r24, Y+3	; 0x03
    2af6:	9c 81       	ldd	r25, Y+4	; 0x04
    2af8:	01 97       	sbiw	r24, 0x01	; 1
    2afa:	9c 83       	std	Y+4, r25	; 0x04
    2afc:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x17;	/* R17 */
    2afe:	eb 81       	ldd	r30, Y+3	; 0x03
    2b00:	fc 81       	ldd	r31, Y+4	; 0x04
    2b02:	87 e1       	ldi	r24, 0x17	; 23
    2b04:	80 83       	st	Z, r24
	pxTopOfStack--;
    2b06:	8b 81       	ldd	r24, Y+3	; 0x03
    2b08:	9c 81       	ldd	r25, Y+4	; 0x04
    2b0a:	01 97       	sbiw	r24, 0x01	; 1
    2b0c:	9c 83       	std	Y+4, r25	; 0x04
    2b0e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x18;	/* R18 */
    2b10:	eb 81       	ldd	r30, Y+3	; 0x03
    2b12:	fc 81       	ldd	r31, Y+4	; 0x04
    2b14:	88 e1       	ldi	r24, 0x18	; 24
    2b16:	80 83       	st	Z, r24
	pxTopOfStack--;
    2b18:	8b 81       	ldd	r24, Y+3	; 0x03
    2b1a:	9c 81       	ldd	r25, Y+4	; 0x04
    2b1c:	01 97       	sbiw	r24, 0x01	; 1
    2b1e:	9c 83       	std	Y+4, r25	; 0x04
    2b20:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x19;	/* R19 */
    2b22:	eb 81       	ldd	r30, Y+3	; 0x03
    2b24:	fc 81       	ldd	r31, Y+4	; 0x04
    2b26:	89 e1       	ldi	r24, 0x19	; 25
    2b28:	80 83       	st	Z, r24
	pxTopOfStack--;
    2b2a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b2c:	9c 81       	ldd	r25, Y+4	; 0x04
    2b2e:	01 97       	sbiw	r24, 0x01	; 1
    2b30:	9c 83       	std	Y+4, r25	; 0x04
    2b32:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x20;	/* R20 */
    2b34:	eb 81       	ldd	r30, Y+3	; 0x03
    2b36:	fc 81       	ldd	r31, Y+4	; 0x04
    2b38:	80 e2       	ldi	r24, 0x20	; 32
    2b3a:	80 83       	st	Z, r24
	pxTopOfStack--;
    2b3c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b3e:	9c 81       	ldd	r25, Y+4	; 0x04
    2b40:	01 97       	sbiw	r24, 0x01	; 1
    2b42:	9c 83       	std	Y+4, r25	; 0x04
    2b44:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x21;	/* R21 */
    2b46:	eb 81       	ldd	r30, Y+3	; 0x03
    2b48:	fc 81       	ldd	r31, Y+4	; 0x04
    2b4a:	81 e2       	ldi	r24, 0x21	; 33
    2b4c:	80 83       	st	Z, r24
	pxTopOfStack--;
    2b4e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b50:	9c 81       	ldd	r25, Y+4	; 0x04
    2b52:	01 97       	sbiw	r24, 0x01	; 1
    2b54:	9c 83       	std	Y+4, r25	; 0x04
    2b56:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x22;	/* R22 */
    2b58:	eb 81       	ldd	r30, Y+3	; 0x03
    2b5a:	fc 81       	ldd	r31, Y+4	; 0x04
    2b5c:	82 e2       	ldi	r24, 0x22	; 34
    2b5e:	80 83       	st	Z, r24
	pxTopOfStack--;
    2b60:	8b 81       	ldd	r24, Y+3	; 0x03
    2b62:	9c 81       	ldd	r25, Y+4	; 0x04
    2b64:	01 97       	sbiw	r24, 0x01	; 1
    2b66:	9c 83       	std	Y+4, r25	; 0x04
    2b68:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x23;	/* R23 */
    2b6a:	eb 81       	ldd	r30, Y+3	; 0x03
    2b6c:	fc 81       	ldd	r31, Y+4	; 0x04
    2b6e:	83 e2       	ldi	r24, 0x23	; 35
    2b70:	80 83       	st	Z, r24
	pxTopOfStack--;
    2b72:	8b 81       	ldd	r24, Y+3	; 0x03
    2b74:	9c 81       	ldd	r25, Y+4	; 0x04
    2b76:	01 97       	sbiw	r24, 0x01	; 1
    2b78:	9c 83       	std	Y+4, r25	; 0x04
    2b7a:	8b 83       	std	Y+3, r24	; 0x03

	/* Place the parameter on the stack in the expected location. */
	usAddress = ( unsigned short ) pvParameters;
    2b7c:	8f 81       	ldd	r24, Y+7	; 0x07
    2b7e:	98 85       	ldd	r25, Y+8	; 0x08
    2b80:	9a 83       	std	Y+2, r25	; 0x02
    2b82:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    2b84:	89 81       	ldd	r24, Y+1	; 0x01
    2b86:	eb 81       	ldd	r30, Y+3	; 0x03
    2b88:	fc 81       	ldd	r31, Y+4	; 0x04
    2b8a:	80 83       	st	Z, r24
	pxTopOfStack--;
    2b8c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b8e:	9c 81       	ldd	r25, Y+4	; 0x04
    2b90:	01 97       	sbiw	r24, 0x01	; 1
    2b92:	9c 83       	std	Y+4, r25	; 0x04
    2b94:	8b 83       	std	Y+3, r24	; 0x03

	usAddress >>= 8;
    2b96:	89 81       	ldd	r24, Y+1	; 0x01
    2b98:	9a 81       	ldd	r25, Y+2	; 0x02
    2b9a:	89 2f       	mov	r24, r25
    2b9c:	99 27       	eor	r25, r25
    2b9e:	9a 83       	std	Y+2, r25	; 0x02
    2ba0:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    2ba2:	89 81       	ldd	r24, Y+1	; 0x01
    2ba4:	eb 81       	ldd	r30, Y+3	; 0x03
    2ba6:	fc 81       	ldd	r31, Y+4	; 0x04
    2ba8:	80 83       	st	Z, r24
	pxTopOfStack--;
    2baa:	8b 81       	ldd	r24, Y+3	; 0x03
    2bac:	9c 81       	ldd	r25, Y+4	; 0x04
    2bae:	01 97       	sbiw	r24, 0x01	; 1
    2bb0:	9c 83       	std	Y+4, r25	; 0x04
    2bb2:	8b 83       	std	Y+3, r24	; 0x03

	*pxTopOfStack = ( portSTACK_TYPE ) 0x26;	/* R26 X */
    2bb4:	eb 81       	ldd	r30, Y+3	; 0x03
    2bb6:	fc 81       	ldd	r31, Y+4	; 0x04
    2bb8:	86 e2       	ldi	r24, 0x26	; 38
    2bba:	80 83       	st	Z, r24
	pxTopOfStack--;
    2bbc:	8b 81       	ldd	r24, Y+3	; 0x03
    2bbe:	9c 81       	ldd	r25, Y+4	; 0x04
    2bc0:	01 97       	sbiw	r24, 0x01	; 1
    2bc2:	9c 83       	std	Y+4, r25	; 0x04
    2bc4:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x27;	/* R27 */
    2bc6:	eb 81       	ldd	r30, Y+3	; 0x03
    2bc8:	fc 81       	ldd	r31, Y+4	; 0x04
    2bca:	87 e2       	ldi	r24, 0x27	; 39
    2bcc:	80 83       	st	Z, r24
	pxTopOfStack--;
    2bce:	8b 81       	ldd	r24, Y+3	; 0x03
    2bd0:	9c 81       	ldd	r25, Y+4	; 0x04
    2bd2:	01 97       	sbiw	r24, 0x01	; 1
    2bd4:	9c 83       	std	Y+4, r25	; 0x04
    2bd6:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x28;	/* R28 Y */
    2bd8:	eb 81       	ldd	r30, Y+3	; 0x03
    2bda:	fc 81       	ldd	r31, Y+4	; 0x04
    2bdc:	88 e2       	ldi	r24, 0x28	; 40
    2bde:	80 83       	st	Z, r24
	pxTopOfStack--;
    2be0:	8b 81       	ldd	r24, Y+3	; 0x03
    2be2:	9c 81       	ldd	r25, Y+4	; 0x04
    2be4:	01 97       	sbiw	r24, 0x01	; 1
    2be6:	9c 83       	std	Y+4, r25	; 0x04
    2be8:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x29;	/* R29 */
    2bea:	eb 81       	ldd	r30, Y+3	; 0x03
    2bec:	fc 81       	ldd	r31, Y+4	; 0x04
    2bee:	89 e2       	ldi	r24, 0x29	; 41
    2bf0:	80 83       	st	Z, r24
	pxTopOfStack--;
    2bf2:	8b 81       	ldd	r24, Y+3	; 0x03
    2bf4:	9c 81       	ldd	r25, Y+4	; 0x04
    2bf6:	01 97       	sbiw	r24, 0x01	; 1
    2bf8:	9c 83       	std	Y+4, r25	; 0x04
    2bfa:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x30;	/* R30 Z */
    2bfc:	eb 81       	ldd	r30, Y+3	; 0x03
    2bfe:	fc 81       	ldd	r31, Y+4	; 0x04
    2c00:	80 e3       	ldi	r24, 0x30	; 48
    2c02:	80 83       	st	Z, r24
	pxTopOfStack--;
    2c04:	8b 81       	ldd	r24, Y+3	; 0x03
    2c06:	9c 81       	ldd	r25, Y+4	; 0x04
    2c08:	01 97       	sbiw	r24, 0x01	; 1
    2c0a:	9c 83       	std	Y+4, r25	; 0x04
    2c0c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x031;	/* R31 */
    2c0e:	eb 81       	ldd	r30, Y+3	; 0x03
    2c10:	fc 81       	ldd	r31, Y+4	; 0x04
    2c12:	81 e3       	ldi	r24, 0x31	; 49
    2c14:	80 83       	st	Z, r24
	pxTopOfStack--;
    2c16:	8b 81       	ldd	r24, Y+3	; 0x03
    2c18:	9c 81       	ldd	r25, Y+4	; 0x04
    2c1a:	01 97       	sbiw	r24, 0x01	; 1
    2c1c:	9c 83       	std	Y+4, r25	; 0x04
    2c1e:	8b 83       	std	Y+3, r24	; 0x03

	/*lint +e950 +e611 +e923 */

	return pxTopOfStack;
    2c20:	8b 81       	ldd	r24, Y+3	; 0x03
    2c22:	9c 81       	ldd	r25, Y+4	; 0x04
}
    2c24:	28 96       	adiw	r28, 0x08	; 8
    2c26:	0f b6       	in	r0, 0x3f	; 63
    2c28:	f8 94       	cli
    2c2a:	de bf       	out	0x3e, r29	; 62
    2c2c:	0f be       	out	0x3f, r0	; 63
    2c2e:	cd bf       	out	0x3d, r28	; 61
    2c30:	cf 91       	pop	r28
    2c32:	df 91       	pop	r29
    2c34:	08 95       	ret

00002c36 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

portBASE_TYPE xPortStartScheduler( void )
{
    2c36:	df 93       	push	r29
    2c38:	cf 93       	push	r28
    2c3a:	cd b7       	in	r28, 0x3d	; 61
    2c3c:	de b7       	in	r29, 0x3e	; 62
	/* Setup the hardware to generate the tick. */
	prvSetupTimerInterrupt();
    2c3e:	0e 94 0b 17 	call	0x2e16	; 0x2e16 <prvSetupTimerInterrupt>

	/* Restore the context of the first task that is going to run. */
	portRESTORE_CONTEXT();
    2c42:	a0 91 a8 05 	lds	r26, 0x05A8
    2c46:	b0 91 a9 05 	lds	r27, 0x05A9
    2c4a:	cd 91       	ld	r28, X+
    2c4c:	cd bf       	out	0x3d, r28	; 61
    2c4e:	dd 91       	ld	r29, X+
    2c50:	de bf       	out	0x3e, r29	; 62
    2c52:	ff 91       	pop	r31
    2c54:	ef 91       	pop	r30
    2c56:	df 91       	pop	r29
    2c58:	cf 91       	pop	r28
    2c5a:	bf 91       	pop	r27
    2c5c:	af 91       	pop	r26
    2c5e:	9f 91       	pop	r25
    2c60:	8f 91       	pop	r24
    2c62:	7f 91       	pop	r23
    2c64:	6f 91       	pop	r22
    2c66:	5f 91       	pop	r21
    2c68:	4f 91       	pop	r20
    2c6a:	3f 91       	pop	r19
    2c6c:	2f 91       	pop	r18
    2c6e:	1f 91       	pop	r17
    2c70:	0f 91       	pop	r16
    2c72:	ff 90       	pop	r15
    2c74:	ef 90       	pop	r14
    2c76:	df 90       	pop	r13
    2c78:	cf 90       	pop	r12
    2c7a:	bf 90       	pop	r11
    2c7c:	af 90       	pop	r10
    2c7e:	9f 90       	pop	r9
    2c80:	8f 90       	pop	r8
    2c82:	7f 90       	pop	r7
    2c84:	6f 90       	pop	r6
    2c86:	5f 90       	pop	r5
    2c88:	4f 90       	pop	r4
    2c8a:	3f 90       	pop	r3
    2c8c:	2f 90       	pop	r2
    2c8e:	1f 90       	pop	r1
    2c90:	0f 90       	pop	r0
    2c92:	0f be       	out	0x3f, r0	; 63
    2c94:	0f 90       	pop	r0

	/* Simulate a function call end as generated by the compiler.  We will now
	jump to the start of the task the context of which we have just restored. */
	asm volatile ( "ret" );
    2c96:	08 95       	ret

	/* Should not get here. */
	return pdTRUE;
    2c98:	81 e0       	ldi	r24, 0x01	; 1
}
    2c9a:	cf 91       	pop	r28
    2c9c:	df 91       	pop	r29
    2c9e:	08 95       	ret

00002ca0 <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    2ca0:	df 93       	push	r29
    2ca2:	cf 93       	push	r28
    2ca4:	cd b7       	in	r28, 0x3d	; 61
    2ca6:	de b7       	in	r29, 0x3e	; 62
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
    2ca8:	cf 91       	pop	r28
    2caa:	df 91       	pop	r29
    2cac:	08 95       	ret

00002cae <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    2cae:	0f 92       	push	r0
    2cb0:	0f b6       	in	r0, 0x3f	; 63
    2cb2:	f8 94       	cli
    2cb4:	0f 92       	push	r0
    2cb6:	1f 92       	push	r1
    2cb8:	11 24       	eor	r1, r1
    2cba:	2f 92       	push	r2
    2cbc:	3f 92       	push	r3
    2cbe:	4f 92       	push	r4
    2cc0:	5f 92       	push	r5
    2cc2:	6f 92       	push	r6
    2cc4:	7f 92       	push	r7
    2cc6:	8f 92       	push	r8
    2cc8:	9f 92       	push	r9
    2cca:	af 92       	push	r10
    2ccc:	bf 92       	push	r11
    2cce:	cf 92       	push	r12
    2cd0:	df 92       	push	r13
    2cd2:	ef 92       	push	r14
    2cd4:	ff 92       	push	r15
    2cd6:	0f 93       	push	r16
    2cd8:	1f 93       	push	r17
    2cda:	2f 93       	push	r18
    2cdc:	3f 93       	push	r19
    2cde:	4f 93       	push	r20
    2ce0:	5f 93       	push	r21
    2ce2:	6f 93       	push	r22
    2ce4:	7f 93       	push	r23
    2ce6:	8f 93       	push	r24
    2ce8:	9f 93       	push	r25
    2cea:	af 93       	push	r26
    2cec:	bf 93       	push	r27
    2cee:	cf 93       	push	r28
    2cf0:	df 93       	push	r29
    2cf2:	ef 93       	push	r30
    2cf4:	ff 93       	push	r31
    2cf6:	a0 91 a8 05 	lds	r26, 0x05A8
    2cfa:	b0 91 a9 05 	lds	r27, 0x05A9
    2cfe:	0d b6       	in	r0, 0x3d	; 61
    2d00:	0d 92       	st	X+, r0
    2d02:	0e b6       	in	r0, 0x3e	; 62
    2d04:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    2d06:	0e 94 c7 1f 	call	0x3f8e	; 0x3f8e <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    2d0a:	a0 91 a8 05 	lds	r26, 0x05A8
    2d0e:	b0 91 a9 05 	lds	r27, 0x05A9
    2d12:	cd 91       	ld	r28, X+
    2d14:	cd bf       	out	0x3d, r28	; 61
    2d16:	dd 91       	ld	r29, X+
    2d18:	de bf       	out	0x3e, r29	; 62
    2d1a:	ff 91       	pop	r31
    2d1c:	ef 91       	pop	r30
    2d1e:	df 91       	pop	r29
    2d20:	cf 91       	pop	r28
    2d22:	bf 91       	pop	r27
    2d24:	af 91       	pop	r26
    2d26:	9f 91       	pop	r25
    2d28:	8f 91       	pop	r24
    2d2a:	7f 91       	pop	r23
    2d2c:	6f 91       	pop	r22
    2d2e:	5f 91       	pop	r21
    2d30:	4f 91       	pop	r20
    2d32:	3f 91       	pop	r19
    2d34:	2f 91       	pop	r18
    2d36:	1f 91       	pop	r17
    2d38:	0f 91       	pop	r16
    2d3a:	ff 90       	pop	r15
    2d3c:	ef 90       	pop	r14
    2d3e:	df 90       	pop	r13
    2d40:	cf 90       	pop	r12
    2d42:	bf 90       	pop	r11
    2d44:	af 90       	pop	r10
    2d46:	9f 90       	pop	r9
    2d48:	8f 90       	pop	r8
    2d4a:	7f 90       	pop	r7
    2d4c:	6f 90       	pop	r6
    2d4e:	5f 90       	pop	r5
    2d50:	4f 90       	pop	r4
    2d52:	3f 90       	pop	r3
    2d54:	2f 90       	pop	r2
    2d56:	1f 90       	pop	r1
    2d58:	0f 90       	pop	r0
    2d5a:	0f be       	out	0x3f, r0	; 63
    2d5c:	0f 90       	pop	r0

	asm volatile ( "ret" );
    2d5e:	08 95       	ret

00002d60 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    2d60:	0f 92       	push	r0
    2d62:	0f b6       	in	r0, 0x3f	; 63
    2d64:	f8 94       	cli
    2d66:	0f 92       	push	r0
    2d68:	1f 92       	push	r1
    2d6a:	11 24       	eor	r1, r1
    2d6c:	2f 92       	push	r2
    2d6e:	3f 92       	push	r3
    2d70:	4f 92       	push	r4
    2d72:	5f 92       	push	r5
    2d74:	6f 92       	push	r6
    2d76:	7f 92       	push	r7
    2d78:	8f 92       	push	r8
    2d7a:	9f 92       	push	r9
    2d7c:	af 92       	push	r10
    2d7e:	bf 92       	push	r11
    2d80:	cf 92       	push	r12
    2d82:	df 92       	push	r13
    2d84:	ef 92       	push	r14
    2d86:	ff 92       	push	r15
    2d88:	0f 93       	push	r16
    2d8a:	1f 93       	push	r17
    2d8c:	2f 93       	push	r18
    2d8e:	3f 93       	push	r19
    2d90:	4f 93       	push	r20
    2d92:	5f 93       	push	r21
    2d94:	6f 93       	push	r22
    2d96:	7f 93       	push	r23
    2d98:	8f 93       	push	r24
    2d9a:	9f 93       	push	r25
    2d9c:	af 93       	push	r26
    2d9e:	bf 93       	push	r27
    2da0:	cf 93       	push	r28
    2da2:	df 93       	push	r29
    2da4:	ef 93       	push	r30
    2da6:	ff 93       	push	r31
    2da8:	a0 91 a8 05 	lds	r26, 0x05A8
    2dac:	b0 91 a9 05 	lds	r27, 0x05A9
    2db0:	0d b6       	in	r0, 0x3d	; 61
    2db2:	0d 92       	st	X+, r0
    2db4:	0e b6       	in	r0, 0x3e	; 62
    2db6:	0d 92       	st	X+, r0
	vTaskIncrementTick();
    2db8:	0e 94 f2 1e 	call	0x3de4	; 0x3de4 <vTaskIncrementTick>
	vTaskSwitchContext();
    2dbc:	0e 94 c7 1f 	call	0x3f8e	; 0x3f8e <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    2dc0:	a0 91 a8 05 	lds	r26, 0x05A8
    2dc4:	b0 91 a9 05 	lds	r27, 0x05A9
    2dc8:	cd 91       	ld	r28, X+
    2dca:	cd bf       	out	0x3d, r28	; 61
    2dcc:	dd 91       	ld	r29, X+
    2dce:	de bf       	out	0x3e, r29	; 62
    2dd0:	ff 91       	pop	r31
    2dd2:	ef 91       	pop	r30
    2dd4:	df 91       	pop	r29
    2dd6:	cf 91       	pop	r28
    2dd8:	bf 91       	pop	r27
    2dda:	af 91       	pop	r26
    2ddc:	9f 91       	pop	r25
    2dde:	8f 91       	pop	r24
    2de0:	7f 91       	pop	r23
    2de2:	6f 91       	pop	r22
    2de4:	5f 91       	pop	r21
    2de6:	4f 91       	pop	r20
    2de8:	3f 91       	pop	r19
    2dea:	2f 91       	pop	r18
    2dec:	1f 91       	pop	r17
    2dee:	0f 91       	pop	r16
    2df0:	ff 90       	pop	r15
    2df2:	ef 90       	pop	r14
    2df4:	df 90       	pop	r13
    2df6:	cf 90       	pop	r12
    2df8:	bf 90       	pop	r11
    2dfa:	af 90       	pop	r10
    2dfc:	9f 90       	pop	r9
    2dfe:	8f 90       	pop	r8
    2e00:	7f 90       	pop	r7
    2e02:	6f 90       	pop	r6
    2e04:	5f 90       	pop	r5
    2e06:	4f 90       	pop	r4
    2e08:	3f 90       	pop	r3
    2e0a:	2f 90       	pop	r2
    2e0c:	1f 90       	pop	r1
    2e0e:	0f 90       	pop	r0
    2e10:	0f be       	out	0x3f, r0	; 63
    2e12:	0f 90       	pop	r0

	asm volatile ( "ret" );
    2e14:	08 95       	ret

00002e16 <prvSetupTimerInterrupt>:

/*
 * Setup timer 1 compare match A to generate a tick interrupt.
 */
static void prvSetupTimerInterrupt( void )
{
    2e16:	df 93       	push	r29
    2e18:	cf 93       	push	r28
    2e1a:	00 d0       	rcall	.+0      	; 0x2e1c <prvSetupTimerInterrupt+0x6>
    2e1c:	00 d0       	rcall	.+0      	; 0x2e1e <prvSetupTimerInterrupt+0x8>
    2e1e:	00 d0       	rcall	.+0      	; 0x2e20 <prvSetupTimerInterrupt+0xa>
    2e20:	cd b7       	in	r28, 0x3d	; 61
    2e22:	de b7       	in	r29, 0x3e	; 62
unsigned char ucHighByte, ucLowByte;

	/* Using 16bit timer 1 to generate the tick.  Correct fuses must be
	selected for the configCPU_CLOCK_HZ clock. */

	ulCompareMatch = configCPU_CLOCK_HZ / configTICK_RATE_HZ;
    2e24:	80 e8       	ldi	r24, 0x80	; 128
    2e26:	9e e3       	ldi	r25, 0x3E	; 62
    2e28:	a0 e0       	ldi	r26, 0x00	; 0
    2e2a:	b0 e0       	ldi	r27, 0x00	; 0
    2e2c:	8b 83       	std	Y+3, r24	; 0x03
    2e2e:	9c 83       	std	Y+4, r25	; 0x04
    2e30:	ad 83       	std	Y+5, r26	; 0x05
    2e32:	be 83       	std	Y+6, r27	; 0x06

	/* We only have 16 bits so have to scale to get our required tick rate. */
	ulCompareMatch /= portCLOCK_PRESCALER;
    2e34:	8b 81       	ldd	r24, Y+3	; 0x03
    2e36:	9c 81       	ldd	r25, Y+4	; 0x04
    2e38:	ad 81       	ldd	r26, Y+5	; 0x05
    2e3a:	be 81       	ldd	r27, Y+6	; 0x06
    2e3c:	68 94       	set
    2e3e:	15 f8       	bld	r1, 5
    2e40:	b6 95       	lsr	r27
    2e42:	a7 95       	ror	r26
    2e44:	97 95       	ror	r25
    2e46:	87 95       	ror	r24
    2e48:	16 94       	lsr	r1
    2e4a:	d1 f7       	brne	.-12     	; 0x2e40 <prvSetupTimerInterrupt+0x2a>
    2e4c:	8b 83       	std	Y+3, r24	; 0x03
    2e4e:	9c 83       	std	Y+4, r25	; 0x04
    2e50:	ad 83       	std	Y+5, r26	; 0x05
    2e52:	be 83       	std	Y+6, r27	; 0x06

	/* Adjust for correct value. */
	ulCompareMatch -= ( unsigned long ) 1;
    2e54:	8b 81       	ldd	r24, Y+3	; 0x03
    2e56:	9c 81       	ldd	r25, Y+4	; 0x04
    2e58:	ad 81       	ldd	r26, Y+5	; 0x05
    2e5a:	be 81       	ldd	r27, Y+6	; 0x06
    2e5c:	01 97       	sbiw	r24, 0x01	; 1
    2e5e:	a1 09       	sbc	r26, r1
    2e60:	b1 09       	sbc	r27, r1
    2e62:	8b 83       	std	Y+3, r24	; 0x03
    2e64:	9c 83       	std	Y+4, r25	; 0x04
    2e66:	ad 83       	std	Y+5, r26	; 0x05
    2e68:	be 83       	std	Y+6, r27	; 0x06

	/* Setup compare match value for compare match A.  Interrupts are disabled 
	before this is called so we need not worry here. */
	ucLowByte = ( unsigned char ) ( ulCompareMatch & ( unsigned long ) 0xff );
    2e6a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e6c:	89 83       	std	Y+1, r24	; 0x01
	ulCompareMatch >>= 8;
    2e6e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e70:	9c 81       	ldd	r25, Y+4	; 0x04
    2e72:	ad 81       	ldd	r26, Y+5	; 0x05
    2e74:	be 81       	ldd	r27, Y+6	; 0x06
    2e76:	89 2f       	mov	r24, r25
    2e78:	9a 2f       	mov	r25, r26
    2e7a:	ab 2f       	mov	r26, r27
    2e7c:	bb 27       	eor	r27, r27
    2e7e:	8b 83       	std	Y+3, r24	; 0x03
    2e80:	9c 83       	std	Y+4, r25	; 0x04
    2e82:	ad 83       	std	Y+5, r26	; 0x05
    2e84:	be 83       	std	Y+6, r27	; 0x06
	ucHighByte = ( unsigned char ) ( ulCompareMatch & ( unsigned long ) 0xff );
    2e86:	8b 81       	ldd	r24, Y+3	; 0x03
    2e88:	8a 83       	std	Y+2, r24	; 0x02
	OCR1AH = ucHighByte;
    2e8a:	eb e4       	ldi	r30, 0x4B	; 75
    2e8c:	f0 e0       	ldi	r31, 0x00	; 0
    2e8e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e90:	80 83       	st	Z, r24
	OCR1AL = ucLowByte;
    2e92:	ea e4       	ldi	r30, 0x4A	; 74
    2e94:	f0 e0       	ldi	r31, 0x00	; 0
    2e96:	89 81       	ldd	r24, Y+1	; 0x01
    2e98:	80 83       	st	Z, r24

	/* Setup clock source and compare match behaviour. */
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
    2e9a:	8b e0       	ldi	r24, 0x0B	; 11
    2e9c:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B = ucLowByte;
    2e9e:	ee e4       	ldi	r30, 0x4E	; 78
    2ea0:	f0 e0       	ldi	r31, 0x00	; 0
    2ea2:	89 81       	ldd	r24, Y+1	; 0x01
    2ea4:	80 83       	st	Z, r24

	/* Enable the interrupt - this is okay as interrupt are currently globally
	disabled. */
	ucLowByte = TIMSK;
    2ea6:	e9 e5       	ldi	r30, 0x59	; 89
    2ea8:	f0 e0       	ldi	r31, 0x00	; 0
    2eaa:	80 81       	ld	r24, Z
    2eac:	89 83       	std	Y+1, r24	; 0x01
	ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
    2eae:	89 81       	ldd	r24, Y+1	; 0x01
    2eb0:	80 61       	ori	r24, 0x10	; 16
    2eb2:	89 83       	std	Y+1, r24	; 0x01
	TIMSK = ucLowByte;
    2eb4:	e9 e5       	ldi	r30, 0x59	; 89
    2eb6:	f0 e0       	ldi	r31, 0x00	; 0
    2eb8:	89 81       	ldd	r24, Y+1	; 0x01
    2eba:	80 83       	st	Z, r24
}
    2ebc:	26 96       	adiw	r28, 0x06	; 6
    2ebe:	0f b6       	in	r0, 0x3f	; 63
    2ec0:	f8 94       	cli
    2ec2:	de bf       	out	0x3e, r29	; 62
    2ec4:	0f be       	out	0x3f, r0	; 63
    2ec6:	cd bf       	out	0x3d, r28	; 61
    2ec8:	cf 91       	pop	r28
    2eca:	df 91       	pop	r29
    2ecc:	08 95       	ret

00002ece <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void SIG_OUTPUT_COMPARE1A( void ) __attribute__ ( ( signal, naked ) );
	void SIG_OUTPUT_COMPARE1A( void )
	{
		vPortYieldFromTick();
    2ece:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <vPortYieldFromTick>
		asm volatile ( "reti" );
    2ed2:	18 95       	reti

00002ed4 <xQueueCreate>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

xQueueHandle xQueueCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize )
{
    2ed4:	df 93       	push	r29
    2ed6:	cf 93       	push	r28
    2ed8:	cd b7       	in	r28, 0x3d	; 61
    2eda:	de b7       	in	r29, 0x3e	; 62
    2edc:	28 97       	sbiw	r28, 0x08	; 8
    2ede:	0f b6       	in	r0, 0x3f	; 63
    2ee0:	f8 94       	cli
    2ee2:	de bf       	out	0x3e, r29	; 62
    2ee4:	0f be       	out	0x3f, r0	; 63
    2ee6:	cd bf       	out	0x3d, r28	; 61
    2ee8:	8f 83       	std	Y+7, r24	; 0x07
    2eea:	68 87       	std	Y+8, r22	; 0x08
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
    2eec:	1a 82       	std	Y+2, r1	; 0x02
    2eee:	19 82       	std	Y+1, r1	; 0x01

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
    2ef0:	8f 81       	ldd	r24, Y+7	; 0x07
    2ef2:	88 23       	and	r24, r24
    2ef4:	09 f4       	brne	.+2      	; 0x2ef8 <xQueueCreate+0x24>
    2ef6:	8c c0       	rjmp	.+280    	; 0x3010 <xQueueCreate+0x13c>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    2ef8:	8f e1       	ldi	r24, 0x1F	; 31
    2efa:	90 e0       	ldi	r25, 0x00	; 0
    2efc:	0e 94 9d 12 	call	0x253a	; 0x253a <pvPortMalloc>
    2f00:	9e 83       	std	Y+6, r25	; 0x06
    2f02:	8d 83       	std	Y+5, r24	; 0x05
		if( pxNewQueue != NULL )
    2f04:	8d 81       	ldd	r24, Y+5	; 0x05
    2f06:	9e 81       	ldd	r25, Y+6	; 0x06
    2f08:	00 97       	sbiw	r24, 0x00	; 0
    2f0a:	09 f4       	brne	.+2      	; 0x2f0e <xQueueCreate+0x3a>
    2f0c:	81 c0       	rjmp	.+258    	; 0x3010 <xQueueCreate+0x13c>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
    2f0e:	8f 81       	ldd	r24, Y+7	; 0x07
    2f10:	28 2f       	mov	r18, r24
    2f12:	30 e0       	ldi	r19, 0x00	; 0
    2f14:	88 85       	ldd	r24, Y+8	; 0x08
    2f16:	88 2f       	mov	r24, r24
    2f18:	90 e0       	ldi	r25, 0x00	; 0
    2f1a:	ac 01       	movw	r20, r24
    2f1c:	24 9f       	mul	r18, r20
    2f1e:	c0 01       	movw	r24, r0
    2f20:	25 9f       	mul	r18, r21
    2f22:	90 0d       	add	r25, r0
    2f24:	34 9f       	mul	r19, r20
    2f26:	90 0d       	add	r25, r0
    2f28:	11 24       	eor	r1, r1
    2f2a:	01 96       	adiw	r24, 0x01	; 1
    2f2c:	9c 83       	std	Y+4, r25	; 0x04
    2f2e:	8b 83       	std	Y+3, r24	; 0x03

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
    2f30:	8b 81       	ldd	r24, Y+3	; 0x03
    2f32:	9c 81       	ldd	r25, Y+4	; 0x04
    2f34:	0e 94 9d 12 	call	0x253a	; 0x253a <pvPortMalloc>
    2f38:	ed 81       	ldd	r30, Y+5	; 0x05
    2f3a:	fe 81       	ldd	r31, Y+6	; 0x06
    2f3c:	91 83       	std	Z+1, r25	; 0x01
    2f3e:	80 83       	st	Z, r24
			if( pxNewQueue->pcHead != NULL )
    2f40:	ed 81       	ldd	r30, Y+5	; 0x05
    2f42:	fe 81       	ldd	r31, Y+6	; 0x06
    2f44:	80 81       	ld	r24, Z
    2f46:	91 81       	ldd	r25, Z+1	; 0x01
    2f48:	00 97       	sbiw	r24, 0x00	; 0
    2f4a:	09 f4       	brne	.+2      	; 0x2f4e <xQueueCreate+0x7a>
    2f4c:	5d c0       	rjmp	.+186    	; 0x3008 <xQueueCreate+0x134>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->pcTail = pxNewQueue->pcHead + ( uxQueueLength * uxItemSize );
    2f4e:	ed 81       	ldd	r30, Y+5	; 0x05
    2f50:	fe 81       	ldd	r31, Y+6	; 0x06
    2f52:	40 81       	ld	r20, Z
    2f54:	51 81       	ldd	r21, Z+1	; 0x01
    2f56:	8f 81       	ldd	r24, Y+7	; 0x07
    2f58:	28 2f       	mov	r18, r24
    2f5a:	30 e0       	ldi	r19, 0x00	; 0
    2f5c:	88 85       	ldd	r24, Y+8	; 0x08
    2f5e:	88 2f       	mov	r24, r24
    2f60:	90 e0       	ldi	r25, 0x00	; 0
    2f62:	bc 01       	movw	r22, r24
    2f64:	26 9f       	mul	r18, r22
    2f66:	c0 01       	movw	r24, r0
    2f68:	27 9f       	mul	r18, r23
    2f6a:	90 0d       	add	r25, r0
    2f6c:	36 9f       	mul	r19, r22
    2f6e:	90 0d       	add	r25, r0
    2f70:	11 24       	eor	r1, r1
    2f72:	84 0f       	add	r24, r20
    2f74:	95 1f       	adc	r25, r21
    2f76:	ed 81       	ldd	r30, Y+5	; 0x05
    2f78:	fe 81       	ldd	r31, Y+6	; 0x06
    2f7a:	93 83       	std	Z+3, r25	; 0x03
    2f7c:	82 83       	std	Z+2, r24	; 0x02
				pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    2f7e:	ed 81       	ldd	r30, Y+5	; 0x05
    2f80:	fe 81       	ldd	r31, Y+6	; 0x06
    2f82:	12 8e       	std	Z+26, r1	; 0x1a
				pxNewQueue->pcWriteTo = pxNewQueue->pcHead;
    2f84:	ed 81       	ldd	r30, Y+5	; 0x05
    2f86:	fe 81       	ldd	r31, Y+6	; 0x06
    2f88:	80 81       	ld	r24, Z
    2f8a:	91 81       	ldd	r25, Z+1	; 0x01
    2f8c:	ed 81       	ldd	r30, Y+5	; 0x05
    2f8e:	fe 81       	ldd	r31, Y+6	; 0x06
    2f90:	95 83       	std	Z+5, r25	; 0x05
    2f92:	84 83       	std	Z+4, r24	; 0x04
				pxNewQueue->pcReadFrom = pxNewQueue->pcHead + ( ( uxQueueLength - ( unsigned portBASE_TYPE ) 1U ) * uxItemSize );
    2f94:	ed 81       	ldd	r30, Y+5	; 0x05
    2f96:	fe 81       	ldd	r31, Y+6	; 0x06
    2f98:	40 81       	ld	r20, Z
    2f9a:	51 81       	ldd	r21, Z+1	; 0x01
    2f9c:	8f 81       	ldd	r24, Y+7	; 0x07
    2f9e:	88 2f       	mov	r24, r24
    2fa0:	90 e0       	ldi	r25, 0x00	; 0
    2fa2:	9c 01       	movw	r18, r24
    2fa4:	21 50       	subi	r18, 0x01	; 1
    2fa6:	30 40       	sbci	r19, 0x00	; 0
    2fa8:	88 85       	ldd	r24, Y+8	; 0x08
    2faa:	88 2f       	mov	r24, r24
    2fac:	90 e0       	ldi	r25, 0x00	; 0
    2fae:	bc 01       	movw	r22, r24
    2fb0:	26 9f       	mul	r18, r22
    2fb2:	c0 01       	movw	r24, r0
    2fb4:	27 9f       	mul	r18, r23
    2fb6:	90 0d       	add	r25, r0
    2fb8:	36 9f       	mul	r19, r22
    2fba:	90 0d       	add	r25, r0
    2fbc:	11 24       	eor	r1, r1
    2fbe:	84 0f       	add	r24, r20
    2fc0:	95 1f       	adc	r25, r21
    2fc2:	ed 81       	ldd	r30, Y+5	; 0x05
    2fc4:	fe 81       	ldd	r31, Y+6	; 0x06
    2fc6:	97 83       	std	Z+7, r25	; 0x07
    2fc8:	86 83       	std	Z+6, r24	; 0x06
				pxNewQueue->uxLength = uxQueueLength;
    2fca:	ed 81       	ldd	r30, Y+5	; 0x05
    2fcc:	fe 81       	ldd	r31, Y+6	; 0x06
    2fce:	8f 81       	ldd	r24, Y+7	; 0x07
    2fd0:	83 8f       	std	Z+27, r24	; 0x1b
				pxNewQueue->uxItemSize = uxItemSize;
    2fd2:	ed 81       	ldd	r30, Y+5	; 0x05
    2fd4:	fe 81       	ldd	r31, Y+6	; 0x06
    2fd6:	88 85       	ldd	r24, Y+8	; 0x08
    2fd8:	84 8f       	std	Z+28, r24	; 0x1c
				pxNewQueue->xRxLock = queueUNLOCKED;
    2fda:	ed 81       	ldd	r30, Y+5	; 0x05
    2fdc:	fe 81       	ldd	r31, Y+6	; 0x06
    2fde:	8f ef       	ldi	r24, 0xFF	; 255
    2fe0:	85 8f       	std	Z+29, r24	; 0x1d
				pxNewQueue->xTxLock = queueUNLOCKED;
    2fe2:	ed 81       	ldd	r30, Y+5	; 0x05
    2fe4:	fe 81       	ldd	r31, Y+6	; 0x06
    2fe6:	8f ef       	ldi	r24, 0xFF	; 255
    2fe8:	86 8f       	std	Z+30, r24	; 0x1e

				/* Likewise ensure the event queues start with the correct state. */
				vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    2fea:	8d 81       	ldd	r24, Y+5	; 0x05
    2fec:	9e 81       	ldd	r25, Y+6	; 0x06
    2fee:	08 96       	adiw	r24, 0x08	; 8
    2ff0:	0e 94 09 13 	call	0x2612	; 0x2612 <vListInitialise>
				vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    2ff4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ff6:	9e 81       	ldd	r25, Y+6	; 0x06
    2ff8:	41 96       	adiw	r24, 0x11	; 17
    2ffa:	0e 94 09 13 	call	0x2612	; 0x2612 <vListInitialise>

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
    2ffe:	8d 81       	ldd	r24, Y+5	; 0x05
    3000:	9e 81       	ldd	r25, Y+6	; 0x06
    3002:	9a 83       	std	Y+2, r25	; 0x02
    3004:	89 83       	std	Y+1, r24	; 0x01
    3006:	04 c0       	rjmp	.+8      	; 0x3010 <xQueueCreate+0x13c>
			}
			else
			{
				traceQUEUE_CREATE_FAILED();
				vPortFree( pxNewQueue );
    3008:	8d 81       	ldd	r24, Y+5	; 0x05
    300a:	9e 81       	ldd	r25, Y+6	; 0x06
    300c:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <vPortFree>
		}
	}

	configASSERT( xReturn );

	return xReturn;
    3010:	89 81       	ldd	r24, Y+1	; 0x01
    3012:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3014:	28 96       	adiw	r28, 0x08	; 8
    3016:	0f b6       	in	r0, 0x3f	; 63
    3018:	f8 94       	cli
    301a:	de bf       	out	0x3e, r29	; 62
    301c:	0f be       	out	0x3f, r0	; 63
    301e:	cd bf       	out	0x3d, r28	; 61
    3020:	cf 91       	pop	r28
    3022:	df 91       	pop	r29
    3024:	08 95       	ret

00003026 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
    3026:	df 93       	push	r29
    3028:	cf 93       	push	r28
    302a:	cd b7       	in	r28, 0x3d	; 61
    302c:	de b7       	in	r29, 0x3e	; 62
    302e:	2c 97       	sbiw	r28, 0x0c	; 12
    3030:	0f b6       	in	r0, 0x3f	; 63
    3032:	f8 94       	cli
    3034:	de bf       	out	0x3e, r29	; 62
    3036:	0f be       	out	0x3f, r0	; 63
    3038:	cd bf       	out	0x3d, r28	; 61
    303a:	9e 83       	std	Y+6, r25	; 0x06
    303c:	8d 83       	std	Y+5, r24	; 0x05
    303e:	78 87       	std	Y+8, r23	; 0x08
    3040:	6f 83       	std	Y+7, r22	; 0x07
    3042:	5a 87       	std	Y+10, r21	; 0x0a
    3044:	49 87       	std	Y+9, r20	; 0x09
    3046:	2b 87       	std	Y+11, r18	; 0x0b
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    3048:	19 82       	std	Y+1, r1	; 0x01
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    304a:	0f b6       	in	r0, 0x3f	; 63
    304c:	f8 94       	cli
    304e:	0f 92       	push	r0
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    3050:	ed 81       	ldd	r30, Y+5	; 0x05
    3052:	fe 81       	ldd	r31, Y+6	; 0x06
    3054:	92 8d       	ldd	r25, Z+26	; 0x1a
    3056:	ed 81       	ldd	r30, Y+5	; 0x05
    3058:	fe 81       	ldd	r31, Y+6	; 0x06
    305a:	83 8d       	ldd	r24, Z+27	; 0x1b
    305c:	98 17       	cp	r25, r24
    305e:	d8 f4       	brcc	.+54     	; 0x3096 <xQueueGenericSend+0x70>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    3060:	8d 81       	ldd	r24, Y+5	; 0x05
    3062:	9e 81       	ldd	r25, Y+6	; 0x06
    3064:	2f 81       	ldd	r18, Y+7	; 0x07
    3066:	38 85       	ldd	r19, Y+8	; 0x08
    3068:	b9 01       	movw	r22, r18
    306a:	4b 85       	ldd	r20, Y+11	; 0x0b
    306c:	0e 94 4e 1a 	call	0x349c	; 0x349c <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3070:	ed 81       	ldd	r30, Y+5	; 0x05
    3072:	fe 81       	ldd	r31, Y+6	; 0x06
    3074:	81 89       	ldd	r24, Z+17	; 0x11
    3076:	88 23       	and	r24, r24
    3078:	49 f0       	breq	.+18     	; 0x308c <xQueueGenericSend+0x66>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    307a:	8d 81       	ldd	r24, Y+5	; 0x05
    307c:	9e 81       	ldd	r25, Y+6	; 0x06
    307e:	41 96       	adiw	r24, 0x11	; 17
    3080:	0e 94 63 20 	call	0x40c6	; 0x40c6 <xTaskRemoveFromEventList>
    3084:	81 30       	cpi	r24, 0x01	; 1
    3086:	11 f4       	brne	.+4      	; 0x308c <xQueueGenericSend+0x66>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
    3088:	0e 94 57 16 	call	0x2cae	; 0x2cae <vPortYield>
					}
				}

				taskEXIT_CRITICAL();
    308c:	0f 90       	pop	r0
    308e:	0f be       	out	0x3f, r0	; 63

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
    3090:	81 e0       	ldi	r24, 0x01	; 1
    3092:	8c 87       	std	Y+12, r24	; 0x0c
    3094:	5c c0       	rjmp	.+184    	; 0x314e <xQueueGenericSend+0x128>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    3096:	89 85       	ldd	r24, Y+9	; 0x09
    3098:	9a 85       	ldd	r25, Y+10	; 0x0a
    309a:	00 97       	sbiw	r24, 0x00	; 0
    309c:	21 f4       	brne	.+8      	; 0x30a6 <xQueueGenericSend+0x80>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    309e:	0f 90       	pop	r0
    30a0:	0f be       	out	0x3f, r0	; 63

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    30a2:	1c 86       	std	Y+12, r1	; 0x0c
    30a4:	54 c0       	rjmp	.+168    	; 0x314e <xQueueGenericSend+0x128>
				}
				else if( xEntryTimeSet == pdFALSE )
    30a6:	89 81       	ldd	r24, Y+1	; 0x01
    30a8:	88 23       	and	r24, r24
    30aa:	31 f4       	brne	.+12     	; 0x30b8 <xQueueGenericSend+0x92>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    30ac:	ce 01       	movw	r24, r28
    30ae:	02 96       	adiw	r24, 0x02	; 2
    30b0:	0e 94 cb 20 	call	0x4196	; 0x4196 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    30b4:	81 e0       	ldi	r24, 0x01	; 1
    30b6:	89 83       	std	Y+1, r24	; 0x01
				}
			}
		}
		taskEXIT_CRITICAL();
    30b8:	0f 90       	pop	r0
    30ba:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    30bc:	0e 94 27 1e 	call	0x3c4e	; 0x3c4e <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    30c0:	0f b6       	in	r0, 0x3f	; 63
    30c2:	f8 94       	cli
    30c4:	0f 92       	push	r0
    30c6:	ed 81       	ldd	r30, Y+5	; 0x05
    30c8:	fe 81       	ldd	r31, Y+6	; 0x06
    30ca:	85 8d       	ldd	r24, Z+29	; 0x1d
    30cc:	8f 3f       	cpi	r24, 0xFF	; 255
    30ce:	19 f4       	brne	.+6      	; 0x30d6 <xQueueGenericSend+0xb0>
    30d0:	ed 81       	ldd	r30, Y+5	; 0x05
    30d2:	fe 81       	ldd	r31, Y+6	; 0x06
    30d4:	15 8e       	std	Z+29, r1	; 0x1d
    30d6:	ed 81       	ldd	r30, Y+5	; 0x05
    30d8:	fe 81       	ldd	r31, Y+6	; 0x06
    30da:	86 8d       	ldd	r24, Z+30	; 0x1e
    30dc:	8f 3f       	cpi	r24, 0xFF	; 255
    30de:	19 f4       	brne	.+6      	; 0x30e6 <xQueueGenericSend+0xc0>
    30e0:	ed 81       	ldd	r30, Y+5	; 0x05
    30e2:	fe 81       	ldd	r31, Y+6	; 0x06
    30e4:	16 8e       	std	Z+30, r1	; 0x1e
    30e6:	0f 90       	pop	r0
    30e8:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    30ea:	ce 01       	movw	r24, r28
    30ec:	02 96       	adiw	r24, 0x02	; 2
    30ee:	9e 01       	movw	r18, r28
    30f0:	27 5f       	subi	r18, 0xF7	; 247
    30f2:	3f 4f       	sbci	r19, 0xFF	; 255
    30f4:	b9 01       	movw	r22, r18
    30f6:	0e 94 e4 20 	call	0x41c8	; 0x41c8 <xTaskCheckForTimeOut>
    30fa:	88 23       	and	r24, r24
    30fc:	09 f5       	brne	.+66     	; 0x3140 <xQueueGenericSend+0x11a>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    30fe:	8d 81       	ldd	r24, Y+5	; 0x05
    3100:	9e 81       	ldd	r25, Y+6	; 0x06
    3102:	0e 94 b2 1b 	call	0x3764	; 0x3764 <prvIsQueueFull>
    3106:	88 23       	and	r24, r24
    3108:	a1 f0       	breq	.+40     	; 0x3132 <xQueueGenericSend+0x10c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    310a:	8d 81       	ldd	r24, Y+5	; 0x05
    310c:	9e 81       	ldd	r25, Y+6	; 0x06
    310e:	08 96       	adiw	r24, 0x08	; 8
    3110:	29 85       	ldd	r18, Y+9	; 0x09
    3112:	3a 85       	ldd	r19, Y+10	; 0x0a
    3114:	b9 01       	movw	r22, r18
    3116:	0e 94 2d 20 	call	0x405a	; 0x405a <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    311a:	8d 81       	ldd	r24, Y+5	; 0x05
    311c:	9e 81       	ldd	r25, Y+6	; 0x06
    311e:	0e 94 2b 1b 	call	0x3656	; 0x3656 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    3122:	0e 94 33 1e 	call	0x3c66	; 0x3c66 <xTaskResumeAll>
    3126:	88 23       	and	r24, r24
    3128:	09 f0       	breq	.+2      	; 0x312c <xQueueGenericSend+0x106>
    312a:	8f cf       	rjmp	.-226    	; 0x304a <xQueueGenericSend+0x24>
				{
					portYIELD_WITHIN_API();
    312c:	0e 94 57 16 	call	0x2cae	; 0x2cae <vPortYield>
    3130:	8c cf       	rjmp	.-232    	; 0x304a <xQueueGenericSend+0x24>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    3132:	8d 81       	ldd	r24, Y+5	; 0x05
    3134:	9e 81       	ldd	r25, Y+6	; 0x06
    3136:	0e 94 2b 1b 	call	0x3656	; 0x3656 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    313a:	0e 94 33 1e 	call	0x3c66	; 0x3c66 <xTaskResumeAll>
    313e:	85 cf       	rjmp	.-246    	; 0x304a <xQueueGenericSend+0x24>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    3140:	8d 81       	ldd	r24, Y+5	; 0x05
    3142:	9e 81       	ldd	r25, Y+6	; 0x06
    3144:	0e 94 2b 1b 	call	0x3656	; 0x3656 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    3148:	0e 94 33 1e 	call	0x3c66	; 0x3c66 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    314c:	1c 86       	std	Y+12, r1	; 0x0c
    314e:	8c 85       	ldd	r24, Y+12	; 0x0c
		}
	}
}
    3150:	2c 96       	adiw	r28, 0x0c	; 12
    3152:	0f b6       	in	r0, 0x3f	; 63
    3154:	f8 94       	cli
    3156:	de bf       	out	0x3e, r29	; 62
    3158:	0f be       	out	0x3f, r0	; 63
    315a:	cd bf       	out	0x3d, r28	; 61
    315c:	cf 91       	pop	r28
    315e:	df 91       	pop	r29
    3160:	08 95       	ret

00003162 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
    3162:	df 93       	push	r29
    3164:	cf 93       	push	r28
    3166:	cd b7       	in	r28, 0x3d	; 61
    3168:	de b7       	in	r29, 0x3e	; 62
    316a:	29 97       	sbiw	r28, 0x09	; 9
    316c:	0f b6       	in	r0, 0x3f	; 63
    316e:	f8 94       	cli
    3170:	de bf       	out	0x3e, r29	; 62
    3172:	0f be       	out	0x3f, r0	; 63
    3174:	cd bf       	out	0x3d, r28	; 61
    3176:	9c 83       	std	Y+4, r25	; 0x04
    3178:	8b 83       	std	Y+3, r24	; 0x03
    317a:	7e 83       	std	Y+6, r23	; 0x06
    317c:	6d 83       	std	Y+5, r22	; 0x05
    317e:	58 87       	std	Y+8, r21	; 0x08
    3180:	4f 83       	std	Y+7, r20	; 0x07
    3182:	29 87       	std	Y+9, r18	; 0x09
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    3184:	19 82       	std	Y+1, r1	; 0x01
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    3186:	eb 81       	ldd	r30, Y+3	; 0x03
    3188:	fc 81       	ldd	r31, Y+4	; 0x04
    318a:	92 8d       	ldd	r25, Z+26	; 0x1a
    318c:	eb 81       	ldd	r30, Y+3	; 0x03
    318e:	fc 81       	ldd	r31, Y+4	; 0x04
    3190:	83 8d       	ldd	r24, Z+27	; 0x1b
    3192:	98 17       	cp	r25, r24
    3194:	40 f5       	brcc	.+80     	; 0x31e6 <xQueueGenericSendFromISR+0x84>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    3196:	8b 81       	ldd	r24, Y+3	; 0x03
    3198:	9c 81       	ldd	r25, Y+4	; 0x04
    319a:	2d 81       	ldd	r18, Y+5	; 0x05
    319c:	3e 81       	ldd	r19, Y+6	; 0x06
    319e:	b9 01       	movw	r22, r18
    31a0:	49 85       	ldd	r20, Y+9	; 0x09
    31a2:	0e 94 4e 1a 	call	0x349c	; 0x349c <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    31a6:	eb 81       	ldd	r30, Y+3	; 0x03
    31a8:	fc 81       	ldd	r31, Y+4	; 0x04
    31aa:	86 8d       	ldd	r24, Z+30	; 0x1e
    31ac:	8f 3f       	cpi	r24, 0xFF	; 255
    31ae:	89 f4       	brne	.+34     	; 0x31d2 <xQueueGenericSendFromISR+0x70>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    31b0:	eb 81       	ldd	r30, Y+3	; 0x03
    31b2:	fc 81       	ldd	r31, Y+4	; 0x04
    31b4:	81 89       	ldd	r24, Z+17	; 0x11
    31b6:	88 23       	and	r24, r24
    31b8:	99 f0       	breq	.+38     	; 0x31e0 <xQueueGenericSendFromISR+0x7e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    31ba:	8b 81       	ldd	r24, Y+3	; 0x03
    31bc:	9c 81       	ldd	r25, Y+4	; 0x04
    31be:	41 96       	adiw	r24, 0x11	; 17
    31c0:	0e 94 63 20 	call	0x40c6	; 0x40c6 <xTaskRemoveFromEventList>
    31c4:	88 23       	and	r24, r24
    31c6:	61 f0       	breq	.+24     	; 0x31e0 <xQueueGenericSendFromISR+0x7e>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						*pxHigherPriorityTaskWoken = pdTRUE;
    31c8:	ef 81       	ldd	r30, Y+7	; 0x07
    31ca:	f8 85       	ldd	r31, Y+8	; 0x08
    31cc:	81 e0       	ldi	r24, 0x01	; 1
    31ce:	80 83       	st	Z, r24
    31d0:	07 c0       	rjmp	.+14     	; 0x31e0 <xQueueGenericSendFromISR+0x7e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    31d2:	eb 81       	ldd	r30, Y+3	; 0x03
    31d4:	fc 81       	ldd	r31, Y+4	; 0x04
    31d6:	86 8d       	ldd	r24, Z+30	; 0x1e
    31d8:	8f 5f       	subi	r24, 0xFF	; 255
    31da:	eb 81       	ldd	r30, Y+3	; 0x03
    31dc:	fc 81       	ldd	r31, Y+4	; 0x04
    31de:	86 8f       	std	Z+30, r24	; 0x1e
			}

			xReturn = pdPASS;
    31e0:	81 e0       	ldi	r24, 0x01	; 1
    31e2:	8a 83       	std	Y+2, r24	; 0x02
    31e4:	01 c0       	rjmp	.+2      	; 0x31e8 <xQueueGenericSendFromISR+0x86>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    31e6:	1a 82       	std	Y+2, r1	; 0x02
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    31e8:	8a 81       	ldd	r24, Y+2	; 0x02
}
    31ea:	29 96       	adiw	r28, 0x09	; 9
    31ec:	0f b6       	in	r0, 0x3f	; 63
    31ee:	f8 94       	cli
    31f0:	de bf       	out	0x3e, r29	; 62
    31f2:	0f be       	out	0x3f, r0	; 63
    31f4:	cd bf       	out	0x3d, r28	; 61
    31f6:	cf 91       	pop	r28
    31f8:	df 91       	pop	r29
    31fa:	08 95       	ret

000031fc <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
    31fc:	df 93       	push	r29
    31fe:	cf 93       	push	r28
    3200:	cd b7       	in	r28, 0x3d	; 61
    3202:	de b7       	in	r29, 0x3e	; 62
    3204:	2e 97       	sbiw	r28, 0x0e	; 14
    3206:	0f b6       	in	r0, 0x3f	; 63
    3208:	f8 94       	cli
    320a:	de bf       	out	0x3e, r29	; 62
    320c:	0f be       	out	0x3f, r0	; 63
    320e:	cd bf       	out	0x3d, r28	; 61
    3210:	98 87       	std	Y+8, r25	; 0x08
    3212:	8f 83       	std	Y+7, r24	; 0x07
    3214:	7a 87       	std	Y+10, r23	; 0x0a
    3216:	69 87       	std	Y+9, r22	; 0x09
    3218:	5c 87       	std	Y+12, r21	; 0x0c
    321a:	4b 87       	std	Y+11, r20	; 0x0b
    321c:	2d 87       	std	Y+13, r18	; 0x0d
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    321e:	1b 82       	std	Y+3, r1	; 0x03
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    3220:	0f b6       	in	r0, 0x3f	; 63
    3222:	f8 94       	cli
    3224:	0f 92       	push	r0
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    3226:	ef 81       	ldd	r30, Y+7	; 0x07
    3228:	f8 85       	ldd	r31, Y+8	; 0x08
    322a:	82 8d       	ldd	r24, Z+26	; 0x1a
    322c:	88 23       	and	r24, r24
    322e:	09 f4       	brne	.+2      	; 0x3232 <xQueueGenericReceive+0x36>
    3230:	3f c0       	rjmp	.+126    	; 0x32b0 <xQueueGenericReceive+0xb4>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
    3232:	ef 81       	ldd	r30, Y+7	; 0x07
    3234:	f8 85       	ldd	r31, Y+8	; 0x08
    3236:	86 81       	ldd	r24, Z+6	; 0x06
    3238:	97 81       	ldd	r25, Z+7	; 0x07
    323a:	9a 83       	std	Y+2, r25	; 0x02
    323c:	89 83       	std	Y+1, r24	; 0x01

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    323e:	8f 81       	ldd	r24, Y+7	; 0x07
    3240:	98 85       	ldd	r25, Y+8	; 0x08
    3242:	29 85       	ldd	r18, Y+9	; 0x09
    3244:	3a 85       	ldd	r19, Y+10	; 0x0a
    3246:	b9 01       	movw	r22, r18
    3248:	0e 94 e3 1a 	call	0x35c6	; 0x35c6 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    324c:	8d 85       	ldd	r24, Y+13	; 0x0d
    324e:	88 23       	and	r24, r24
    3250:	b1 f4       	brne	.+44     	; 0x327e <xQueueGenericReceive+0x82>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
    3252:	ef 81       	ldd	r30, Y+7	; 0x07
    3254:	f8 85       	ldd	r31, Y+8	; 0x08
    3256:	82 8d       	ldd	r24, Z+26	; 0x1a
    3258:	81 50       	subi	r24, 0x01	; 1
    325a:	ef 81       	ldd	r30, Y+7	; 0x07
    325c:	f8 85       	ldd	r31, Y+8	; 0x08
    325e:	82 8f       	std	Z+26, r24	; 0x1a
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    3260:	ef 81       	ldd	r30, Y+7	; 0x07
    3262:	f8 85       	ldd	r31, Y+8	; 0x08
    3264:	80 85       	ldd	r24, Z+8	; 0x08
    3266:	88 23       	and	r24, r24
    3268:	f1 f0       	breq	.+60     	; 0x32a6 <xQueueGenericReceive+0xaa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    326a:	8f 81       	ldd	r24, Y+7	; 0x07
    326c:	98 85       	ldd	r25, Y+8	; 0x08
    326e:	08 96       	adiw	r24, 0x08	; 8
    3270:	0e 94 63 20 	call	0x40c6	; 0x40c6 <xTaskRemoveFromEventList>
    3274:	81 30       	cpi	r24, 0x01	; 1
    3276:	b9 f4       	brne	.+46     	; 0x32a6 <xQueueGenericReceive+0xaa>
						{
							portYIELD_WITHIN_API();
    3278:	0e 94 57 16 	call	0x2cae	; 0x2cae <vPortYield>
    327c:	14 c0       	rjmp	.+40     	; 0x32a6 <xQueueGenericReceive+0xaa>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
    327e:	ef 81       	ldd	r30, Y+7	; 0x07
    3280:	f8 85       	ldd	r31, Y+8	; 0x08
    3282:	89 81       	ldd	r24, Y+1	; 0x01
    3284:	9a 81       	ldd	r25, Y+2	; 0x02
    3286:	97 83       	std	Z+7, r25	; 0x07
    3288:	86 83       	std	Z+6, r24	; 0x06

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    328a:	ef 81       	ldd	r30, Y+7	; 0x07
    328c:	f8 85       	ldd	r31, Y+8	; 0x08
    328e:	81 89       	ldd	r24, Z+17	; 0x11
    3290:	88 23       	and	r24, r24
    3292:	49 f0       	breq	.+18     	; 0x32a6 <xQueueGenericReceive+0xaa>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    3294:	8f 81       	ldd	r24, Y+7	; 0x07
    3296:	98 85       	ldd	r25, Y+8	; 0x08
    3298:	41 96       	adiw	r24, 0x11	; 17
    329a:	0e 94 63 20 	call	0x40c6	; 0x40c6 <xTaskRemoveFromEventList>
    329e:	88 23       	and	r24, r24
    32a0:	11 f0       	breq	.+4      	; 0x32a6 <xQueueGenericReceive+0xaa>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
    32a2:	0e 94 57 16 	call	0x2cae	; 0x2cae <vPortYield>
						}
					}

				}

				taskEXIT_CRITICAL();
    32a6:	0f 90       	pop	r0
    32a8:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    32aa:	81 e0       	ldi	r24, 0x01	; 1
    32ac:	8e 87       	std	Y+14, r24	; 0x0e
    32ae:	5c c0       	rjmp	.+184    	; 0x3368 <xQueueGenericReceive+0x16c>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    32b0:	8b 85       	ldd	r24, Y+11	; 0x0b
    32b2:	9c 85       	ldd	r25, Y+12	; 0x0c
    32b4:	00 97       	sbiw	r24, 0x00	; 0
    32b6:	21 f4       	brne	.+8      	; 0x32c0 <xQueueGenericReceive+0xc4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    32b8:	0f 90       	pop	r0
    32ba:	0f be       	out	0x3f, r0	; 63
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    32bc:	1e 86       	std	Y+14, r1	; 0x0e
    32be:	54 c0       	rjmp	.+168    	; 0x3368 <xQueueGenericReceive+0x16c>
				}
				else if( xEntryTimeSet == pdFALSE )
    32c0:	8b 81       	ldd	r24, Y+3	; 0x03
    32c2:	88 23       	and	r24, r24
    32c4:	31 f4       	brne	.+12     	; 0x32d2 <xQueueGenericReceive+0xd6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    32c6:	ce 01       	movw	r24, r28
    32c8:	04 96       	adiw	r24, 0x04	; 4
    32ca:	0e 94 cb 20 	call	0x4196	; 0x4196 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    32ce:	81 e0       	ldi	r24, 0x01	; 1
    32d0:	8b 83       	std	Y+3, r24	; 0x03
				}
			}
		}
		taskEXIT_CRITICAL();
    32d2:	0f 90       	pop	r0
    32d4:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    32d6:	0e 94 27 1e 	call	0x3c4e	; 0x3c4e <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    32da:	0f b6       	in	r0, 0x3f	; 63
    32dc:	f8 94       	cli
    32de:	0f 92       	push	r0
    32e0:	ef 81       	ldd	r30, Y+7	; 0x07
    32e2:	f8 85       	ldd	r31, Y+8	; 0x08
    32e4:	85 8d       	ldd	r24, Z+29	; 0x1d
    32e6:	8f 3f       	cpi	r24, 0xFF	; 255
    32e8:	19 f4       	brne	.+6      	; 0x32f0 <xQueueGenericReceive+0xf4>
    32ea:	ef 81       	ldd	r30, Y+7	; 0x07
    32ec:	f8 85       	ldd	r31, Y+8	; 0x08
    32ee:	15 8e       	std	Z+29, r1	; 0x1d
    32f0:	ef 81       	ldd	r30, Y+7	; 0x07
    32f2:	f8 85       	ldd	r31, Y+8	; 0x08
    32f4:	86 8d       	ldd	r24, Z+30	; 0x1e
    32f6:	8f 3f       	cpi	r24, 0xFF	; 255
    32f8:	19 f4       	brne	.+6      	; 0x3300 <xQueueGenericReceive+0x104>
    32fa:	ef 81       	ldd	r30, Y+7	; 0x07
    32fc:	f8 85       	ldd	r31, Y+8	; 0x08
    32fe:	16 8e       	std	Z+30, r1	; 0x1e
    3300:	0f 90       	pop	r0
    3302:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    3304:	ce 01       	movw	r24, r28
    3306:	04 96       	adiw	r24, 0x04	; 4
    3308:	9e 01       	movw	r18, r28
    330a:	25 5f       	subi	r18, 0xF5	; 245
    330c:	3f 4f       	sbci	r19, 0xFF	; 255
    330e:	b9 01       	movw	r22, r18
    3310:	0e 94 e4 20 	call	0x41c8	; 0x41c8 <xTaskCheckForTimeOut>
    3314:	88 23       	and	r24, r24
    3316:	09 f5       	brne	.+66     	; 0x335a <xQueueGenericReceive+0x15e>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    3318:	8f 81       	ldd	r24, Y+7	; 0x07
    331a:	98 85       	ldd	r25, Y+8	; 0x08
    331c:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <prvIsQueueEmpty>
    3320:	88 23       	and	r24, r24
    3322:	a1 f0       	breq	.+40     	; 0x334c <xQueueGenericReceive+0x150>
						portEXIT_CRITICAL();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    3324:	8f 81       	ldd	r24, Y+7	; 0x07
    3326:	98 85       	ldd	r25, Y+8	; 0x08
    3328:	41 96       	adiw	r24, 0x11	; 17
    332a:	2b 85       	ldd	r18, Y+11	; 0x0b
    332c:	3c 85       	ldd	r19, Y+12	; 0x0c
    332e:	b9 01       	movw	r22, r18
    3330:	0e 94 2d 20 	call	0x405a	; 0x405a <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    3334:	8f 81       	ldd	r24, Y+7	; 0x07
    3336:	98 85       	ldd	r25, Y+8	; 0x08
    3338:	0e 94 2b 1b 	call	0x3656	; 0x3656 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    333c:	0e 94 33 1e 	call	0x3c66	; 0x3c66 <xTaskResumeAll>
    3340:	88 23       	and	r24, r24
    3342:	09 f0       	breq	.+2      	; 0x3346 <xQueueGenericReceive+0x14a>
    3344:	6d cf       	rjmp	.-294    	; 0x3220 <xQueueGenericReceive+0x24>
				{
					portYIELD_WITHIN_API();
    3346:	0e 94 57 16 	call	0x2cae	; 0x2cae <vPortYield>
    334a:	6a cf       	rjmp	.-300    	; 0x3220 <xQueueGenericReceive+0x24>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    334c:	8f 81       	ldd	r24, Y+7	; 0x07
    334e:	98 85       	ldd	r25, Y+8	; 0x08
    3350:	0e 94 2b 1b 	call	0x3656	; 0x3656 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    3354:	0e 94 33 1e 	call	0x3c66	; 0x3c66 <xTaskResumeAll>
    3358:	63 cf       	rjmp	.-314    	; 0x3220 <xQueueGenericReceive+0x24>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    335a:	8f 81       	ldd	r24, Y+7	; 0x07
    335c:	98 85       	ldd	r25, Y+8	; 0x08
    335e:	0e 94 2b 1b 	call	0x3656	; 0x3656 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    3362:	0e 94 33 1e 	call	0x3c66	; 0x3c66 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    3366:	1e 86       	std	Y+14, r1	; 0x0e
    3368:	8e 85       	ldd	r24, Y+14	; 0x0e
		}
	}
}
    336a:	2e 96       	adiw	r28, 0x0e	; 14
    336c:	0f b6       	in	r0, 0x3f	; 63
    336e:	f8 94       	cli
    3370:	de bf       	out	0x3e, r29	; 62
    3372:	0f be       	out	0x3f, r0	; 63
    3374:	cd bf       	out	0x3d, r28	; 61
    3376:	cf 91       	pop	r28
    3378:	df 91       	pop	r29
    337a:	08 95       	ret

0000337c <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxTaskWoken )
{
    337c:	df 93       	push	r29
    337e:	cf 93       	push	r28
    3380:	cd b7       	in	r28, 0x3d	; 61
    3382:	de b7       	in	r29, 0x3e	; 62
    3384:	28 97       	sbiw	r28, 0x08	; 8
    3386:	0f b6       	in	r0, 0x3f	; 63
    3388:	f8 94       	cli
    338a:	de bf       	out	0x3e, r29	; 62
    338c:	0f be       	out	0x3f, r0	; 63
    338e:	cd bf       	out	0x3d, r28	; 61
    3390:	9c 83       	std	Y+4, r25	; 0x04
    3392:	8b 83       	std	Y+3, r24	; 0x03
    3394:	7e 83       	std	Y+6, r23	; 0x06
    3396:	6d 83       	std	Y+5, r22	; 0x05
    3398:	58 87       	std	Y+8, r21	; 0x08
    339a:	4f 83       	std	Y+7, r20	; 0x07

	configASSERT( pxQueue );
	configASSERT( pxTaskWoken );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    339c:	19 82       	std	Y+1, r1	; 0x01
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    339e:	eb 81       	ldd	r30, Y+3	; 0x03
    33a0:	fc 81       	ldd	r31, Y+4	; 0x04
    33a2:	82 8d       	ldd	r24, Z+26	; 0x1a
    33a4:	88 23       	and	r24, r24
    33a6:	71 f1       	breq	.+92     	; 0x3404 <xQueueReceiveFromISR+0x88>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    33a8:	8b 81       	ldd	r24, Y+3	; 0x03
    33aa:	9c 81       	ldd	r25, Y+4	; 0x04
    33ac:	2d 81       	ldd	r18, Y+5	; 0x05
    33ae:	3e 81       	ldd	r19, Y+6	; 0x06
    33b0:	b9 01       	movw	r22, r18
    33b2:	0e 94 e3 1a 	call	0x35c6	; 0x35c6 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
    33b6:	eb 81       	ldd	r30, Y+3	; 0x03
    33b8:	fc 81       	ldd	r31, Y+4	; 0x04
    33ba:	82 8d       	ldd	r24, Z+26	; 0x1a
    33bc:	81 50       	subi	r24, 0x01	; 1
    33be:	eb 81       	ldd	r30, Y+3	; 0x03
    33c0:	fc 81       	ldd	r31, Y+4	; 0x04
    33c2:	82 8f       	std	Z+26, r24	; 0x1a

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    33c4:	eb 81       	ldd	r30, Y+3	; 0x03
    33c6:	fc 81       	ldd	r31, Y+4	; 0x04
    33c8:	85 8d       	ldd	r24, Z+29	; 0x1d
    33ca:	8f 3f       	cpi	r24, 0xFF	; 255
    33cc:	89 f4       	brne	.+34     	; 0x33f0 <xQueueReceiveFromISR+0x74>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    33ce:	eb 81       	ldd	r30, Y+3	; 0x03
    33d0:	fc 81       	ldd	r31, Y+4	; 0x04
    33d2:	80 85       	ldd	r24, Z+8	; 0x08
    33d4:	88 23       	and	r24, r24
    33d6:	99 f0       	breq	.+38     	; 0x33fe <xQueueReceiveFromISR+0x82>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    33d8:	8b 81       	ldd	r24, Y+3	; 0x03
    33da:	9c 81       	ldd	r25, Y+4	; 0x04
    33dc:	08 96       	adiw	r24, 0x08	; 8
    33de:	0e 94 63 20 	call	0x40c6	; 0x40c6 <xTaskRemoveFromEventList>
    33e2:	88 23       	and	r24, r24
    33e4:	61 f0       	breq	.+24     	; 0x33fe <xQueueReceiveFromISR+0x82>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						*pxTaskWoken = pdTRUE;
    33e6:	ef 81       	ldd	r30, Y+7	; 0x07
    33e8:	f8 85       	ldd	r31, Y+8	; 0x08
    33ea:	81 e0       	ldi	r24, 0x01	; 1
    33ec:	80 83       	st	Z, r24
    33ee:	07 c0       	rjmp	.+14     	; 0x33fe <xQueueReceiveFromISR+0x82>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    33f0:	eb 81       	ldd	r30, Y+3	; 0x03
    33f2:	fc 81       	ldd	r31, Y+4	; 0x04
    33f4:	85 8d       	ldd	r24, Z+29	; 0x1d
    33f6:	8f 5f       	subi	r24, 0xFF	; 255
    33f8:	eb 81       	ldd	r30, Y+3	; 0x03
    33fa:	fc 81       	ldd	r31, Y+4	; 0x04
    33fc:	85 8f       	std	Z+29, r24	; 0x1d
			}

			xReturn = pdPASS;
    33fe:	81 e0       	ldi	r24, 0x01	; 1
    3400:	8a 83       	std	Y+2, r24	; 0x02
    3402:	01 c0       	rjmp	.+2      	; 0x3406 <xQueueReceiveFromISR+0x8a>
		}
		else
		{
			xReturn = pdFAIL;
    3404:	1a 82       	std	Y+2, r1	; 0x02
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    3406:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3408:	28 96       	adiw	r28, 0x08	; 8
    340a:	0f b6       	in	r0, 0x3f	; 63
    340c:	f8 94       	cli
    340e:	de bf       	out	0x3e, r29	; 62
    3410:	0f be       	out	0x3f, r0	; 63
    3412:	cd bf       	out	0x3d, r28	; 61
    3414:	cf 91       	pop	r28
    3416:	df 91       	pop	r29
    3418:	08 95       	ret

0000341a <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
    341a:	df 93       	push	r29
    341c:	cf 93       	push	r28
    341e:	00 d0       	rcall	.+0      	; 0x3420 <uxQueueMessagesWaiting+0x6>
    3420:	0f 92       	push	r0
    3422:	cd b7       	in	r28, 0x3d	; 61
    3424:	de b7       	in	r29, 0x3e	; 62
    3426:	9b 83       	std	Y+3, r25	; 0x03
    3428:	8a 83       	std	Y+2, r24	; 0x02
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    342a:	0f b6       	in	r0, 0x3f	; 63
    342c:	f8 94       	cli
    342e:	0f 92       	push	r0
		uxReturn = pxQueue->uxMessagesWaiting;
    3430:	ea 81       	ldd	r30, Y+2	; 0x02
    3432:	fb 81       	ldd	r31, Y+3	; 0x03
    3434:	82 8d       	ldd	r24, Z+26	; 0x1a
    3436:	89 83       	std	Y+1, r24	; 0x01
	taskEXIT_CRITICAL();
    3438:	0f 90       	pop	r0
    343a:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
    343c:	89 81       	ldd	r24, Y+1	; 0x01
}
    343e:	0f 90       	pop	r0
    3440:	0f 90       	pop	r0
    3442:	0f 90       	pop	r0
    3444:	cf 91       	pop	r28
    3446:	df 91       	pop	r29
    3448:	08 95       	ret

0000344a <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
{
    344a:	df 93       	push	r29
    344c:	cf 93       	push	r28
    344e:	00 d0       	rcall	.+0      	; 0x3450 <uxQueueMessagesWaitingFromISR+0x6>
    3450:	0f 92       	push	r0
    3452:	cd b7       	in	r28, 0x3d	; 61
    3454:	de b7       	in	r29, 0x3e	; 62
    3456:	9b 83       	std	Y+3, r25	; 0x03
    3458:	8a 83       	std	Y+2, r24	; 0x02
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
    345a:	ea 81       	ldd	r30, Y+2	; 0x02
    345c:	fb 81       	ldd	r31, Y+3	; 0x03
    345e:	82 8d       	ldd	r24, Z+26	; 0x1a
    3460:	89 83       	std	Y+1, r24	; 0x01

	return uxReturn;
    3462:	89 81       	ldd	r24, Y+1	; 0x01
}
    3464:	0f 90       	pop	r0
    3466:	0f 90       	pop	r0
    3468:	0f 90       	pop	r0
    346a:	cf 91       	pop	r28
    346c:	df 91       	pop	r29
    346e:	08 95       	ret

00003470 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
    3470:	df 93       	push	r29
    3472:	cf 93       	push	r28
    3474:	00 d0       	rcall	.+0      	; 0x3476 <vQueueDelete+0x6>
    3476:	cd b7       	in	r28, 0x3d	; 61
    3478:	de b7       	in	r29, 0x3e	; 62
    347a:	9a 83       	std	Y+2, r25	; 0x02
    347c:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxQueue );

	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
	vPortFree( pxQueue->pcHead );
    347e:	e9 81       	ldd	r30, Y+1	; 0x01
    3480:	fa 81       	ldd	r31, Y+2	; 0x02
    3482:	80 81       	ld	r24, Z
    3484:	91 81       	ldd	r25, Z+1	; 0x01
    3486:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <vPortFree>
	vPortFree( pxQueue );
    348a:	89 81       	ldd	r24, Y+1	; 0x01
    348c:	9a 81       	ldd	r25, Y+2	; 0x02
    348e:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <vPortFree>
}
    3492:	0f 90       	pop	r0
    3494:	0f 90       	pop	r0
    3496:	cf 91       	pop	r28
    3498:	df 91       	pop	r29
    349a:	08 95       	ret

0000349c <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
    349c:	df 93       	push	r29
    349e:	cf 93       	push	r28
    34a0:	00 d0       	rcall	.+0      	; 0x34a2 <prvCopyDataToQueue+0x6>
    34a2:	00 d0       	rcall	.+0      	; 0x34a4 <prvCopyDataToQueue+0x8>
    34a4:	0f 92       	push	r0
    34a6:	cd b7       	in	r28, 0x3d	; 61
    34a8:	de b7       	in	r29, 0x3e	; 62
    34aa:	9a 83       	std	Y+2, r25	; 0x02
    34ac:	89 83       	std	Y+1, r24	; 0x01
    34ae:	7c 83       	std	Y+4, r23	; 0x04
    34b0:	6b 83       	std	Y+3, r22	; 0x03
    34b2:	4d 83       	std	Y+5, r20	; 0x05
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
    34b4:	e9 81       	ldd	r30, Y+1	; 0x01
    34b6:	fa 81       	ldd	r31, Y+2	; 0x02
    34b8:	84 8d       	ldd	r24, Z+28	; 0x1c
    34ba:	88 23       	and	r24, r24
    34bc:	09 f4       	brne	.+2      	; 0x34c0 <prvCopyDataToQueue+0x24>
    34be:	74 c0       	rjmp	.+232    	; 0x35a8 <prvCopyDataToQueue+0x10c>
				pxQueue->pxMutexHolder = NULL;
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
    34c0:	8d 81       	ldd	r24, Y+5	; 0x05
    34c2:	88 23       	and	r24, r24
    34c4:	99 f5       	brne	.+102    	; 0x352c <prvCopyDataToQueue+0x90>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    34c6:	e9 81       	ldd	r30, Y+1	; 0x01
    34c8:	fa 81       	ldd	r31, Y+2	; 0x02
    34ca:	64 81       	ldd	r22, Z+4	; 0x04
    34cc:	75 81       	ldd	r23, Z+5	; 0x05
    34ce:	e9 81       	ldd	r30, Y+1	; 0x01
    34d0:	fa 81       	ldd	r31, Y+2	; 0x02
    34d2:	84 8d       	ldd	r24, Z+28	; 0x1c
    34d4:	48 2f       	mov	r20, r24
    34d6:	50 e0       	ldi	r21, 0x00	; 0
    34d8:	2b 81       	ldd	r18, Y+3	; 0x03
    34da:	3c 81       	ldd	r19, Y+4	; 0x04
    34dc:	cb 01       	movw	r24, r22
    34de:	b9 01       	movw	r22, r18
    34e0:	0e 94 4a 23 	call	0x4694	; 0x4694 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    34e4:	e9 81       	ldd	r30, Y+1	; 0x01
    34e6:	fa 81       	ldd	r31, Y+2	; 0x02
    34e8:	24 81       	ldd	r18, Z+4	; 0x04
    34ea:	35 81       	ldd	r19, Z+5	; 0x05
    34ec:	e9 81       	ldd	r30, Y+1	; 0x01
    34ee:	fa 81       	ldd	r31, Y+2	; 0x02
    34f0:	84 8d       	ldd	r24, Z+28	; 0x1c
    34f2:	88 2f       	mov	r24, r24
    34f4:	90 e0       	ldi	r25, 0x00	; 0
    34f6:	82 0f       	add	r24, r18
    34f8:	93 1f       	adc	r25, r19
    34fa:	e9 81       	ldd	r30, Y+1	; 0x01
    34fc:	fa 81       	ldd	r31, Y+2	; 0x02
    34fe:	95 83       	std	Z+5, r25	; 0x05
    3500:	84 83       	std	Z+4, r24	; 0x04
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
    3502:	e9 81       	ldd	r30, Y+1	; 0x01
    3504:	fa 81       	ldd	r31, Y+2	; 0x02
    3506:	24 81       	ldd	r18, Z+4	; 0x04
    3508:	35 81       	ldd	r19, Z+5	; 0x05
    350a:	e9 81       	ldd	r30, Y+1	; 0x01
    350c:	fa 81       	ldd	r31, Y+2	; 0x02
    350e:	82 81       	ldd	r24, Z+2	; 0x02
    3510:	93 81       	ldd	r25, Z+3	; 0x03
    3512:	28 17       	cp	r18, r24
    3514:	39 07       	cpc	r19, r25
    3516:	08 f4       	brcc	.+2      	; 0x351a <prvCopyDataToQueue+0x7e>
    3518:	47 c0       	rjmp	.+142    	; 0x35a8 <prvCopyDataToQueue+0x10c>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    351a:	e9 81       	ldd	r30, Y+1	; 0x01
    351c:	fa 81       	ldd	r31, Y+2	; 0x02
    351e:	80 81       	ld	r24, Z
    3520:	91 81       	ldd	r25, Z+1	; 0x01
    3522:	e9 81       	ldd	r30, Y+1	; 0x01
    3524:	fa 81       	ldd	r31, Y+2	; 0x02
    3526:	95 83       	std	Z+5, r25	; 0x05
    3528:	84 83       	std	Z+4, r24	; 0x04
    352a:	3e c0       	rjmp	.+124    	; 0x35a8 <prvCopyDataToQueue+0x10c>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    352c:	e9 81       	ldd	r30, Y+1	; 0x01
    352e:	fa 81       	ldd	r31, Y+2	; 0x02
    3530:	66 81       	ldd	r22, Z+6	; 0x06
    3532:	77 81       	ldd	r23, Z+7	; 0x07
    3534:	e9 81       	ldd	r30, Y+1	; 0x01
    3536:	fa 81       	ldd	r31, Y+2	; 0x02
    3538:	84 8d       	ldd	r24, Z+28	; 0x1c
    353a:	48 2f       	mov	r20, r24
    353c:	50 e0       	ldi	r21, 0x00	; 0
    353e:	2b 81       	ldd	r18, Y+3	; 0x03
    3540:	3c 81       	ldd	r19, Y+4	; 0x04
    3542:	cb 01       	movw	r24, r22
    3544:	b9 01       	movw	r22, r18
    3546:	0e 94 4a 23 	call	0x4694	; 0x4694 <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
    354a:	e9 81       	ldd	r30, Y+1	; 0x01
    354c:	fa 81       	ldd	r31, Y+2	; 0x02
    354e:	26 81       	ldd	r18, Z+6	; 0x06
    3550:	37 81       	ldd	r19, Z+7	; 0x07
    3552:	e9 81       	ldd	r30, Y+1	; 0x01
    3554:	fa 81       	ldd	r31, Y+2	; 0x02
    3556:	84 8d       	ldd	r24, Z+28	; 0x1c
    3558:	88 2f       	mov	r24, r24
    355a:	90 e0       	ldi	r25, 0x00	; 0
    355c:	90 95       	com	r25
    355e:	81 95       	neg	r24
    3560:	9f 4f       	sbci	r25, 0xFF	; 255
    3562:	82 0f       	add	r24, r18
    3564:	93 1f       	adc	r25, r19
    3566:	e9 81       	ldd	r30, Y+1	; 0x01
    3568:	fa 81       	ldd	r31, Y+2	; 0x02
    356a:	97 83       	std	Z+7, r25	; 0x07
    356c:	86 83       	std	Z+6, r24	; 0x06
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
    356e:	e9 81       	ldd	r30, Y+1	; 0x01
    3570:	fa 81       	ldd	r31, Y+2	; 0x02
    3572:	26 81       	ldd	r18, Z+6	; 0x06
    3574:	37 81       	ldd	r19, Z+7	; 0x07
    3576:	e9 81       	ldd	r30, Y+1	; 0x01
    3578:	fa 81       	ldd	r31, Y+2	; 0x02
    357a:	80 81       	ld	r24, Z
    357c:	91 81       	ldd	r25, Z+1	; 0x01
    357e:	28 17       	cp	r18, r24
    3580:	39 07       	cpc	r19, r25
    3582:	90 f4       	brcc	.+36     	; 0x35a8 <prvCopyDataToQueue+0x10c>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    3584:	e9 81       	ldd	r30, Y+1	; 0x01
    3586:	fa 81       	ldd	r31, Y+2	; 0x02
    3588:	22 81       	ldd	r18, Z+2	; 0x02
    358a:	33 81       	ldd	r19, Z+3	; 0x03
    358c:	e9 81       	ldd	r30, Y+1	; 0x01
    358e:	fa 81       	ldd	r31, Y+2	; 0x02
    3590:	84 8d       	ldd	r24, Z+28	; 0x1c
    3592:	88 2f       	mov	r24, r24
    3594:	90 e0       	ldi	r25, 0x00	; 0
    3596:	90 95       	com	r25
    3598:	81 95       	neg	r24
    359a:	9f 4f       	sbci	r25, 0xFF	; 255
    359c:	82 0f       	add	r24, r18
    359e:	93 1f       	adc	r25, r19
    35a0:	e9 81       	ldd	r30, Y+1	; 0x01
    35a2:	fa 81       	ldd	r31, Y+2	; 0x02
    35a4:	97 83       	std	Z+7, r25	; 0x07
    35a6:	86 83       	std	Z+6, r24	; 0x06
		}
	}

	++( pxQueue->uxMessagesWaiting );
    35a8:	e9 81       	ldd	r30, Y+1	; 0x01
    35aa:	fa 81       	ldd	r31, Y+2	; 0x02
    35ac:	82 8d       	ldd	r24, Z+26	; 0x1a
    35ae:	8f 5f       	subi	r24, 0xFF	; 255
    35b0:	e9 81       	ldd	r30, Y+1	; 0x01
    35b2:	fa 81       	ldd	r31, Y+2	; 0x02
    35b4:	82 8f       	std	Z+26, r24	; 0x1a
}
    35b6:	0f 90       	pop	r0
    35b8:	0f 90       	pop	r0
    35ba:	0f 90       	pop	r0
    35bc:	0f 90       	pop	r0
    35be:	0f 90       	pop	r0
    35c0:	cf 91       	pop	r28
    35c2:	df 91       	pop	r29
    35c4:	08 95       	ret

000035c6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
    35c6:	df 93       	push	r29
    35c8:	cf 93       	push	r28
    35ca:	00 d0       	rcall	.+0      	; 0x35cc <prvCopyDataFromQueue+0x6>
    35cc:	00 d0       	rcall	.+0      	; 0x35ce <prvCopyDataFromQueue+0x8>
    35ce:	cd b7       	in	r28, 0x3d	; 61
    35d0:	de b7       	in	r29, 0x3e	; 62
    35d2:	9a 83       	std	Y+2, r25	; 0x02
    35d4:	89 83       	std	Y+1, r24	; 0x01
    35d6:	7c 83       	std	Y+4, r23	; 0x04
    35d8:	6b 83       	std	Y+3, r22	; 0x03
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    35da:	e9 81       	ldd	r30, Y+1	; 0x01
    35dc:	fa 81       	ldd	r31, Y+2	; 0x02
    35de:	80 81       	ld	r24, Z
    35e0:	91 81       	ldd	r25, Z+1	; 0x01
    35e2:	00 97       	sbiw	r24, 0x00	; 0
    35e4:	89 f1       	breq	.+98     	; 0x3648 <prvCopyDataFromQueue+0x82>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    35e6:	e9 81       	ldd	r30, Y+1	; 0x01
    35e8:	fa 81       	ldd	r31, Y+2	; 0x02
    35ea:	26 81       	ldd	r18, Z+6	; 0x06
    35ec:	37 81       	ldd	r19, Z+7	; 0x07
    35ee:	e9 81       	ldd	r30, Y+1	; 0x01
    35f0:	fa 81       	ldd	r31, Y+2	; 0x02
    35f2:	84 8d       	ldd	r24, Z+28	; 0x1c
    35f4:	88 2f       	mov	r24, r24
    35f6:	90 e0       	ldi	r25, 0x00	; 0
    35f8:	82 0f       	add	r24, r18
    35fa:	93 1f       	adc	r25, r19
    35fc:	e9 81       	ldd	r30, Y+1	; 0x01
    35fe:	fa 81       	ldd	r31, Y+2	; 0x02
    3600:	97 83       	std	Z+7, r25	; 0x07
    3602:	86 83       	std	Z+6, r24	; 0x06
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    3604:	e9 81       	ldd	r30, Y+1	; 0x01
    3606:	fa 81       	ldd	r31, Y+2	; 0x02
    3608:	26 81       	ldd	r18, Z+6	; 0x06
    360a:	37 81       	ldd	r19, Z+7	; 0x07
    360c:	e9 81       	ldd	r30, Y+1	; 0x01
    360e:	fa 81       	ldd	r31, Y+2	; 0x02
    3610:	82 81       	ldd	r24, Z+2	; 0x02
    3612:	93 81       	ldd	r25, Z+3	; 0x03
    3614:	28 17       	cp	r18, r24
    3616:	39 07       	cpc	r19, r25
    3618:	40 f0       	brcs	.+16     	; 0x362a <prvCopyDataFromQueue+0x64>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
    361a:	e9 81       	ldd	r30, Y+1	; 0x01
    361c:	fa 81       	ldd	r31, Y+2	; 0x02
    361e:	80 81       	ld	r24, Z
    3620:	91 81       	ldd	r25, Z+1	; 0x01
    3622:	e9 81       	ldd	r30, Y+1	; 0x01
    3624:	fa 81       	ldd	r31, Y+2	; 0x02
    3626:	97 83       	std	Z+7, r25	; 0x07
    3628:	86 83       	std	Z+6, r24	; 0x06
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    362a:	e9 81       	ldd	r30, Y+1	; 0x01
    362c:	fa 81       	ldd	r31, Y+2	; 0x02
    362e:	46 81       	ldd	r20, Z+6	; 0x06
    3630:	57 81       	ldd	r21, Z+7	; 0x07
    3632:	e9 81       	ldd	r30, Y+1	; 0x01
    3634:	fa 81       	ldd	r31, Y+2	; 0x02
    3636:	84 8d       	ldd	r24, Z+28	; 0x1c
    3638:	28 2f       	mov	r18, r24
    363a:	30 e0       	ldi	r19, 0x00	; 0
    363c:	8b 81       	ldd	r24, Y+3	; 0x03
    363e:	9c 81       	ldd	r25, Y+4	; 0x04
    3640:	ba 01       	movw	r22, r20
    3642:	a9 01       	movw	r20, r18
    3644:	0e 94 4a 23 	call	0x4694	; 0x4694 <memcpy>
	}
}
    3648:	0f 90       	pop	r0
    364a:	0f 90       	pop	r0
    364c:	0f 90       	pop	r0
    364e:	0f 90       	pop	r0
    3650:	cf 91       	pop	r28
    3652:	df 91       	pop	r29
    3654:	08 95       	ret

00003656 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
    3656:	df 93       	push	r29
    3658:	cf 93       	push	r28
    365a:	00 d0       	rcall	.+0      	; 0x365c <prvUnlockQueue+0x6>
    365c:	cd b7       	in	r28, 0x3d	; 61
    365e:	de b7       	in	r29, 0x3e	; 62
    3660:	9a 83       	std	Y+2, r25	; 0x02
    3662:	89 83       	std	Y+1, r24	; 0x01

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    3664:	0f b6       	in	r0, 0x3f	; 63
    3666:	f8 94       	cli
    3668:	0f 92       	push	r0
    366a:	15 c0       	rjmp	.+42     	; 0x3696 <prvUnlockQueue+0x40>
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    366c:	e9 81       	ldd	r30, Y+1	; 0x01
    366e:	fa 81       	ldd	r31, Y+2	; 0x02
    3670:	81 89       	ldd	r24, Z+17	; 0x11
    3672:	88 23       	and	r24, r24
    3674:	a9 f0       	breq	.+42     	; 0x36a0 <prvUnlockQueue+0x4a>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    3676:	89 81       	ldd	r24, Y+1	; 0x01
    3678:	9a 81       	ldd	r25, Y+2	; 0x02
    367a:	41 96       	adiw	r24, 0x11	; 17
    367c:	0e 94 63 20 	call	0x40c6	; 0x40c6 <xTaskRemoveFromEventList>
    3680:	88 23       	and	r24, r24
    3682:	11 f0       	breq	.+4      	; 0x3688 <prvUnlockQueue+0x32>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
    3684:	0e 94 41 21 	call	0x4282	; 0x4282 <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
    3688:	e9 81       	ldd	r30, Y+1	; 0x01
    368a:	fa 81       	ldd	r31, Y+2	; 0x02
    368c:	86 8d       	ldd	r24, Z+30	; 0x1e
    368e:	81 50       	subi	r24, 0x01	; 1
    3690:	e9 81       	ldd	r30, Y+1	; 0x01
    3692:	fa 81       	ldd	r31, Y+2	; 0x02
    3694:	86 8f       	std	Z+30, r24	; 0x1e
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    3696:	e9 81       	ldd	r30, Y+1	; 0x01
    3698:	fa 81       	ldd	r31, Y+2	; 0x02
    369a:	86 8d       	ldd	r24, Z+30	; 0x1e
    369c:	18 16       	cp	r1, r24
    369e:	34 f3       	brlt	.-52     	; 0x366c <prvUnlockQueue+0x16>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
    36a0:	e9 81       	ldd	r30, Y+1	; 0x01
    36a2:	fa 81       	ldd	r31, Y+2	; 0x02
    36a4:	8f ef       	ldi	r24, 0xFF	; 255
    36a6:	86 8f       	std	Z+30, r24	; 0x1e
	}
	taskEXIT_CRITICAL();
    36a8:	0f 90       	pop	r0
    36aa:	0f be       	out	0x3f, r0	; 63

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    36ac:	0f b6       	in	r0, 0x3f	; 63
    36ae:	f8 94       	cli
    36b0:	0f 92       	push	r0
    36b2:	15 c0       	rjmp	.+42     	; 0x36de <prvUnlockQueue+0x88>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    36b4:	e9 81       	ldd	r30, Y+1	; 0x01
    36b6:	fa 81       	ldd	r31, Y+2	; 0x02
    36b8:	80 85       	ldd	r24, Z+8	; 0x08
    36ba:	88 23       	and	r24, r24
    36bc:	a9 f0       	breq	.+42     	; 0x36e8 <prvUnlockQueue+0x92>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    36be:	89 81       	ldd	r24, Y+1	; 0x01
    36c0:	9a 81       	ldd	r25, Y+2	; 0x02
    36c2:	08 96       	adiw	r24, 0x08	; 8
    36c4:	0e 94 63 20 	call	0x40c6	; 0x40c6 <xTaskRemoveFromEventList>
    36c8:	88 23       	and	r24, r24
    36ca:	11 f0       	breq	.+4      	; 0x36d0 <prvUnlockQueue+0x7a>
				{
					vTaskMissedYield();
    36cc:	0e 94 41 21 	call	0x4282	; 0x4282 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
    36d0:	e9 81       	ldd	r30, Y+1	; 0x01
    36d2:	fa 81       	ldd	r31, Y+2	; 0x02
    36d4:	85 8d       	ldd	r24, Z+29	; 0x1d
    36d6:	81 50       	subi	r24, 0x01	; 1
    36d8:	e9 81       	ldd	r30, Y+1	; 0x01
    36da:	fa 81       	ldd	r31, Y+2	; 0x02
    36dc:	85 8f       	std	Z+29, r24	; 0x1d
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    36de:	e9 81       	ldd	r30, Y+1	; 0x01
    36e0:	fa 81       	ldd	r31, Y+2	; 0x02
    36e2:	85 8d       	ldd	r24, Z+29	; 0x1d
    36e4:	18 16       	cp	r1, r24
    36e6:	34 f3       	brlt	.-52     	; 0x36b4 <prvUnlockQueue+0x5e>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    36e8:	e9 81       	ldd	r30, Y+1	; 0x01
    36ea:	fa 81       	ldd	r31, Y+2	; 0x02
    36ec:	8f ef       	ldi	r24, 0xFF	; 255
    36ee:	85 8f       	std	Z+29, r24	; 0x1d
	}
	taskEXIT_CRITICAL();
    36f0:	0f 90       	pop	r0
    36f2:	0f be       	out	0x3f, r0	; 63
}
    36f4:	0f 90       	pop	r0
    36f6:	0f 90       	pop	r0
    36f8:	cf 91       	pop	r28
    36fa:	df 91       	pop	r29
    36fc:	08 95       	ret

000036fe <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
    36fe:	df 93       	push	r29
    3700:	cf 93       	push	r28
    3702:	00 d0       	rcall	.+0      	; 0x3704 <prvIsQueueEmpty+0x6>
    3704:	0f 92       	push	r0
    3706:	cd b7       	in	r28, 0x3d	; 61
    3708:	de b7       	in	r29, 0x3e	; 62
    370a:	9b 83       	std	Y+3, r25	; 0x03
    370c:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    370e:	0f b6       	in	r0, 0x3f	; 63
    3710:	f8 94       	cli
    3712:	0f 92       	push	r0
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    3714:	ea 81       	ldd	r30, Y+2	; 0x02
    3716:	fb 81       	ldd	r31, Y+3	; 0x03
    3718:	82 8d       	ldd	r24, Z+26	; 0x1a
    371a:	19 82       	std	Y+1, r1	; 0x01
    371c:	88 23       	and	r24, r24
    371e:	11 f4       	brne	.+4      	; 0x3724 <prvIsQueueEmpty+0x26>
    3720:	81 e0       	ldi	r24, 0x01	; 1
    3722:	89 83       	std	Y+1, r24	; 0x01
	taskEXIT_CRITICAL();
    3724:	0f 90       	pop	r0
    3726:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    3728:	89 81       	ldd	r24, Y+1	; 0x01
}
    372a:	0f 90       	pop	r0
    372c:	0f 90       	pop	r0
    372e:	0f 90       	pop	r0
    3730:	cf 91       	pop	r28
    3732:	df 91       	pop	r29
    3734:	08 95       	ret

00003736 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
    3736:	df 93       	push	r29
    3738:	cf 93       	push	r28
    373a:	00 d0       	rcall	.+0      	; 0x373c <xQueueIsQueueEmptyFromISR+0x6>
    373c:	0f 92       	push	r0
    373e:	cd b7       	in	r28, 0x3d	; 61
    3740:	de b7       	in	r29, 0x3e	; 62
    3742:	9b 83       	std	Y+3, r25	; 0x03
    3744:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    3746:	ea 81       	ldd	r30, Y+2	; 0x02
    3748:	fb 81       	ldd	r31, Y+3	; 0x03
    374a:	82 8d       	ldd	r24, Z+26	; 0x1a
    374c:	19 82       	std	Y+1, r1	; 0x01
    374e:	88 23       	and	r24, r24
    3750:	11 f4       	brne	.+4      	; 0x3756 <xQueueIsQueueEmptyFromISR+0x20>
    3752:	81 e0       	ldi	r24, 0x01	; 1
    3754:	89 83       	std	Y+1, r24	; 0x01

	return xReturn;
    3756:	89 81       	ldd	r24, Y+1	; 0x01
}
    3758:	0f 90       	pop	r0
    375a:	0f 90       	pop	r0
    375c:	0f 90       	pop	r0
    375e:	cf 91       	pop	r28
    3760:	df 91       	pop	r29
    3762:	08 95       	ret

00003764 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
    3764:	df 93       	push	r29
    3766:	cf 93       	push	r28
    3768:	00 d0       	rcall	.+0      	; 0x376a <prvIsQueueFull+0x6>
    376a:	0f 92       	push	r0
    376c:	cd b7       	in	r28, 0x3d	; 61
    376e:	de b7       	in	r29, 0x3e	; 62
    3770:	9b 83       	std	Y+3, r25	; 0x03
    3772:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    3774:	0f b6       	in	r0, 0x3f	; 63
    3776:	f8 94       	cli
    3778:	0f 92       	push	r0
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    377a:	ea 81       	ldd	r30, Y+2	; 0x02
    377c:	fb 81       	ldd	r31, Y+3	; 0x03
    377e:	92 8d       	ldd	r25, Z+26	; 0x1a
    3780:	ea 81       	ldd	r30, Y+2	; 0x02
    3782:	fb 81       	ldd	r31, Y+3	; 0x03
    3784:	83 8d       	ldd	r24, Z+27	; 0x1b
    3786:	19 82       	std	Y+1, r1	; 0x01
    3788:	98 17       	cp	r25, r24
    378a:	11 f4       	brne	.+4      	; 0x3790 <prvIsQueueFull+0x2c>
    378c:	81 e0       	ldi	r24, 0x01	; 1
    378e:	89 83       	std	Y+1, r24	; 0x01
	taskEXIT_CRITICAL();
    3790:	0f 90       	pop	r0
    3792:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    3794:	89 81       	ldd	r24, Y+1	; 0x01
}
    3796:	0f 90       	pop	r0
    3798:	0f 90       	pop	r0
    379a:	0f 90       	pop	r0
    379c:	cf 91       	pop	r28
    379e:	df 91       	pop	r29
    37a0:	08 95       	ret

000037a2 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
    37a2:	df 93       	push	r29
    37a4:	cf 93       	push	r28
    37a6:	00 d0       	rcall	.+0      	; 0x37a8 <xQueueIsQueueFullFromISR+0x6>
    37a8:	0f 92       	push	r0
    37aa:	cd b7       	in	r28, 0x3d	; 61
    37ac:	de b7       	in	r29, 0x3e	; 62
    37ae:	9b 83       	std	Y+3, r25	; 0x03
    37b0:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    37b2:	ea 81       	ldd	r30, Y+2	; 0x02
    37b4:	fb 81       	ldd	r31, Y+3	; 0x03
    37b6:	92 8d       	ldd	r25, Z+26	; 0x1a
    37b8:	ea 81       	ldd	r30, Y+2	; 0x02
    37ba:	fb 81       	ldd	r31, Y+3	; 0x03
    37bc:	83 8d       	ldd	r24, Z+27	; 0x1b
    37be:	19 82       	std	Y+1, r1	; 0x01
    37c0:	98 17       	cp	r25, r24
    37c2:	11 f4       	brne	.+4      	; 0x37c8 <xQueueIsQueueFullFromISR+0x26>
    37c4:	81 e0       	ldi	r24, 0x01	; 1
    37c6:	89 83       	std	Y+1, r24	; 0x01

	return xReturn;
    37c8:	89 81       	ldd	r24, Y+1	; 0x01
}
    37ca:	0f 90       	pop	r0
    37cc:	0f 90       	pop	r0
    37ce:	0f 90       	pop	r0
    37d0:	cf 91       	pop	r28
    37d2:	df 91       	pop	r29
    37d4:	08 95       	ret

000037d6 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
    37d6:	af 92       	push	r10
    37d8:	bf 92       	push	r11
    37da:	cf 92       	push	r12
    37dc:	df 92       	push	r13
    37de:	ef 92       	push	r14
    37e0:	ff 92       	push	r15
    37e2:	0f 93       	push	r16
    37e4:	1f 93       	push	r17
    37e6:	df 93       	push	r29
    37e8:	cf 93       	push	r28
    37ea:	cd b7       	in	r28, 0x3d	; 61
    37ec:	de b7       	in	r29, 0x3e	; 62
    37ee:	64 97       	sbiw	r28, 0x14	; 20
    37f0:	0f b6       	in	r0, 0x3f	; 63
    37f2:	f8 94       	cli
    37f4:	de bf       	out	0x3e, r29	; 62
    37f6:	0f be       	out	0x3f, r0	; 63
    37f8:	cd bf       	out	0x3d, r28	; 61
    37fa:	9f 83       	std	Y+7, r25	; 0x07
    37fc:	8e 83       	std	Y+6, r24	; 0x06
    37fe:	79 87       	std	Y+9, r23	; 0x09
    3800:	68 87       	std	Y+8, r22	; 0x08
    3802:	5b 87       	std	Y+11, r21	; 0x0b
    3804:	4a 87       	std	Y+10, r20	; 0x0a
    3806:	3d 87       	std	Y+13, r19	; 0x0d
    3808:	2c 87       	std	Y+12, r18	; 0x0c
    380a:	0e 87       	std	Y+14, r16	; 0x0e
    380c:	f8 8a       	std	Y+16, r15	; 0x10
    380e:	ef 86       	std	Y+15, r14	; 0x0f
    3810:	da 8a       	std	Y+18, r13	; 0x12
    3812:	c9 8a       	std	Y+17, r12	; 0x11
    3814:	bc 8a       	std	Y+20, r11	; 0x14
    3816:	ab 8a       	std	Y+19, r10	; 0x13
	configASSERT( pxTaskCode );
	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
    3818:	8a 85       	ldd	r24, Y+10	; 0x0a
    381a:	9b 85       	ldd	r25, Y+11	; 0x0b
    381c:	29 89       	ldd	r18, Y+17	; 0x11
    381e:	3a 89       	ldd	r19, Y+18	; 0x12
    3820:	b9 01       	movw	r22, r18
    3822:	0e 94 70 22 	call	0x44e0	; 0x44e0 <prvAllocateTCBAndStack>
    3826:	9c 83       	std	Y+4, r25	; 0x04
    3828:	8b 83       	std	Y+3, r24	; 0x03

	if( pxNewTCB != NULL )
    382a:	8b 81       	ldd	r24, Y+3	; 0x03
    382c:	9c 81       	ldd	r25, Y+4	; 0x04
    382e:	00 97       	sbiw	r24, 0x00	; 0
    3830:	09 f4       	brne	.+2      	; 0x3834 <xTaskGenericCreate+0x5e>
    3832:	99 c0       	rjmp	.+306    	; 0x3966 <xTaskGenericCreate+0x190>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
    3834:	eb 81       	ldd	r30, Y+3	; 0x03
    3836:	fc 81       	ldd	r31, Y+4	; 0x04
    3838:	27 89       	ldd	r18, Z+23	; 0x17
    383a:	30 8d       	ldd	r19, Z+24	; 0x18
    383c:	8a 85       	ldd	r24, Y+10	; 0x0a
    383e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3840:	01 97       	sbiw	r24, 0x01	; 1
    3842:	82 0f       	add	r24, r18
    3844:	93 1f       	adc	r25, r19
    3846:	9a 83       	std	Y+2, r25	; 0x02
    3848:	89 83       	std	Y+1, r24	; 0x01
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
    384a:	8b 81       	ldd	r24, Y+3	; 0x03
    384c:	9c 81       	ldd	r25, Y+4	; 0x04
    384e:	28 85       	ldd	r18, Y+8	; 0x08
    3850:	39 85       	ldd	r19, Y+9	; 0x09
    3852:	eb 89       	ldd	r30, Y+19	; 0x13
    3854:	fc 89       	ldd	r31, Y+20	; 0x14
    3856:	aa 85       	ldd	r26, Y+10	; 0x0a
    3858:	bb 85       	ldd	r27, Y+11	; 0x0b
    385a:	b9 01       	movw	r22, r18
    385c:	4e 85       	ldd	r20, Y+14	; 0x0e
    385e:	9f 01       	movw	r18, r30
    3860:	8d 01       	movw	r16, r26
    3862:	0e 94 55 21 	call	0x42aa	; 0x42aa <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    3866:	89 81       	ldd	r24, Y+1	; 0x01
    3868:	9a 81       	ldd	r25, Y+2	; 0x02
    386a:	2e 81       	ldd	r18, Y+6	; 0x06
    386c:	3f 81       	ldd	r19, Y+7	; 0x07
    386e:	4c 85       	ldd	r20, Y+12	; 0x0c
    3870:	5d 85       	ldd	r21, Y+13	; 0x0d
    3872:	b9 01       	movw	r22, r18
    3874:	0e 94 98 14 	call	0x2930	; 0x2930 <pxPortInitialiseStack>
    3878:	eb 81       	ldd	r30, Y+3	; 0x03
    387a:	fc 81       	ldd	r31, Y+4	; 0x04
    387c:	91 83       	std	Z+1, r25	; 0x01
    387e:	80 83       	st	Z, r24
		#endif

		/* Check the alignment of the initialised stack. */
		configASSERT( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
    3880:	8f 85       	ldd	r24, Y+15	; 0x0f
    3882:	98 89       	ldd	r25, Y+16	; 0x10
    3884:	00 97       	sbiw	r24, 0x00	; 0
    3886:	31 f0       	breq	.+12     	; 0x3894 <xTaskGenericCreate+0xbe>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
    3888:	ef 85       	ldd	r30, Y+15	; 0x0f
    388a:	f8 89       	ldd	r31, Y+16	; 0x10
    388c:	8b 81       	ldd	r24, Y+3	; 0x03
    388e:	9c 81       	ldd	r25, Y+4	; 0x04
    3890:	91 83       	std	Z+1, r25	; 0x01
    3892:	80 83       	st	Z, r24
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
    3894:	0f b6       	in	r0, 0x3f	; 63
    3896:	f8 94       	cli
    3898:	0f 92       	push	r0
		{
			uxCurrentNumberOfTasks++;
    389a:	80 91 ab 05 	lds	r24, 0x05AB
    389e:	8f 5f       	subi	r24, 0xFF	; 255
    38a0:	80 93 ab 05 	sts	0x05AB, r24
			if( pxCurrentTCB == NULL )
    38a4:	80 91 a8 05 	lds	r24, 0x05A8
    38a8:	90 91 a9 05 	lds	r25, 0x05A9
    38ac:	00 97       	sbiw	r24, 0x00	; 0
    38ae:	69 f4       	brne	.+26     	; 0x38ca <xTaskGenericCreate+0xf4>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    38b0:	8b 81       	ldd	r24, Y+3	; 0x03
    38b2:	9c 81       	ldd	r25, Y+4	; 0x04
    38b4:	90 93 a9 05 	sts	0x05A9, r25
    38b8:	80 93 a8 05 	sts	0x05A8, r24

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
    38bc:	80 91 ab 05 	lds	r24, 0x05AB
    38c0:	81 30       	cpi	r24, 0x01	; 1
    38c2:	a9 f4       	brne	.+42     	; 0x38ee <xTaskGenericCreate+0x118>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
    38c4:	0e 94 ac 21 	call	0x4358	; 0x4358 <prvInitialiseTaskLists>
    38c8:	12 c0       	rjmp	.+36     	; 0x38ee <xTaskGenericCreate+0x118>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    38ca:	80 91 b0 05 	lds	r24, 0x05B0
    38ce:	88 23       	and	r24, r24
    38d0:	71 f4       	brne	.+28     	; 0x38ee <xTaskGenericCreate+0x118>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    38d2:	e0 91 a8 05 	lds	r30, 0x05A8
    38d6:	f0 91 a9 05 	lds	r31, 0x05A9
    38da:	96 89       	ldd	r25, Z+22	; 0x16
    38dc:	8e 85       	ldd	r24, Y+14	; 0x0e
    38de:	89 17       	cp	r24, r25
    38e0:	30 f0       	brcs	.+12     	; 0x38ee <xTaskGenericCreate+0x118>
					{
						pxCurrentTCB = pxNewTCB;
    38e2:	8b 81       	ldd	r24, Y+3	; 0x03
    38e4:	9c 81       	ldd	r25, Y+4	; 0x04
    38e6:	90 93 a9 05 	sts	0x05A9, r25
    38ea:	80 93 a8 05 	sts	0x05A8, r24
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
    38ee:	eb 81       	ldd	r30, Y+3	; 0x03
    38f0:	fc 81       	ldd	r31, Y+4	; 0x04
    38f2:	96 89       	ldd	r25, Z+22	; 0x16
    38f4:	80 91 ae 05 	lds	r24, 0x05AE
    38f8:	89 17       	cp	r24, r25
    38fa:	28 f4       	brcc	.+10     	; 0x3906 <xTaskGenericCreate+0x130>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
    38fc:	eb 81       	ldd	r30, Y+3	; 0x03
    38fe:	fc 81       	ldd	r31, Y+4	; 0x04
    3900:	86 89       	ldd	r24, Z+22	; 0x16
    3902:	80 93 ae 05 	sts	0x05AE, r24
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
    3906:	80 91 b5 05 	lds	r24, 0x05B5
    390a:	8f 5f       	subi	r24, 0xFF	; 255
    390c:	80 93 b5 05 	sts	0x05B5, r24

			prvAddTaskToReadyQueue( pxNewTCB );
    3910:	eb 81       	ldd	r30, Y+3	; 0x03
    3912:	fc 81       	ldd	r31, Y+4	; 0x04
    3914:	96 89       	ldd	r25, Z+22	; 0x16
    3916:	80 91 af 05 	lds	r24, 0x05AF
    391a:	89 17       	cp	r24, r25
    391c:	28 f4       	brcc	.+10     	; 0x3928 <xTaskGenericCreate+0x152>
    391e:	eb 81       	ldd	r30, Y+3	; 0x03
    3920:	fc 81       	ldd	r31, Y+4	; 0x04
    3922:	86 89       	ldd	r24, Z+22	; 0x16
    3924:	80 93 af 05 	sts	0x05AF, r24
    3928:	eb 81       	ldd	r30, Y+3	; 0x03
    392a:	fc 81       	ldd	r31, Y+4	; 0x04
    392c:	86 89       	ldd	r24, Z+22	; 0x16
    392e:	28 2f       	mov	r18, r24
    3930:	30 e0       	ldi	r19, 0x00	; 0
    3932:	c9 01       	movw	r24, r18
    3934:	88 0f       	add	r24, r24
    3936:	99 1f       	adc	r25, r25
    3938:	88 0f       	add	r24, r24
    393a:	99 1f       	adc	r25, r25
    393c:	88 0f       	add	r24, r24
    393e:	99 1f       	adc	r25, r25
    3940:	82 0f       	add	r24, r18
    3942:	93 1f       	adc	r25, r19
    3944:	ac 01       	movw	r20, r24
    3946:	4a 54       	subi	r20, 0x4A	; 74
    3948:	5a 4f       	sbci	r21, 0xFA	; 250
    394a:	8b 81       	ldd	r24, Y+3	; 0x03
    394c:	9c 81       	ldd	r25, Y+4	; 0x04
    394e:	9c 01       	movw	r18, r24
    3950:	2e 5f       	subi	r18, 0xFE	; 254
    3952:	3f 4f       	sbci	r19, 0xFF	; 255
    3954:	ca 01       	movw	r24, r20
    3956:	b9 01       	movw	r22, r18
    3958:	0e 94 43 13 	call	0x2686	; 0x2686 <vListInsertEnd>

			xReturn = pdPASS;
    395c:	81 e0       	ldi	r24, 0x01	; 1
    395e:	8d 83       	std	Y+5, r24	; 0x05
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
    3960:	0f 90       	pop	r0
    3962:	0f be       	out	0x3f, r0	; 63
    3964:	02 c0       	rjmp	.+4      	; 0x396a <xTaskGenericCreate+0x194>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    3966:	8f ef       	ldi	r24, 0xFF	; 255
    3968:	8d 83       	std	Y+5, r24	; 0x05
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
    396a:	8d 81       	ldd	r24, Y+5	; 0x05
    396c:	81 30       	cpi	r24, 0x01	; 1
    396e:	71 f4       	brne	.+28     	; 0x398c <xTaskGenericCreate+0x1b6>
	{
		if( xSchedulerRunning != pdFALSE )
    3970:	80 91 b0 05 	lds	r24, 0x05B0
    3974:	88 23       	and	r24, r24
    3976:	51 f0       	breq	.+20     	; 0x398c <xTaskGenericCreate+0x1b6>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    3978:	e0 91 a8 05 	lds	r30, 0x05A8
    397c:	f0 91 a9 05 	lds	r31, 0x05A9
    3980:	96 89       	ldd	r25, Z+22	; 0x16
    3982:	8e 85       	ldd	r24, Y+14	; 0x0e
    3984:	98 17       	cp	r25, r24
    3986:	10 f4       	brcc	.+4      	; 0x398c <xTaskGenericCreate+0x1b6>
			{
				portYIELD_WITHIN_API();
    3988:	0e 94 57 16 	call	0x2cae	; 0x2cae <vPortYield>
			}
		}
	}

	return xReturn;
    398c:	8d 81       	ldd	r24, Y+5	; 0x05
}
    398e:	64 96       	adiw	r28, 0x14	; 20
    3990:	0f b6       	in	r0, 0x3f	; 63
    3992:	f8 94       	cli
    3994:	de bf       	out	0x3e, r29	; 62
    3996:	0f be       	out	0x3f, r0	; 63
    3998:	cd bf       	out	0x3d, r28	; 61
    399a:	cf 91       	pop	r28
    399c:	df 91       	pop	r29
    399e:	1f 91       	pop	r17
    39a0:	0f 91       	pop	r16
    39a2:	ff 90       	pop	r15
    39a4:	ef 90       	pop	r14
    39a6:	df 90       	pop	r13
    39a8:	cf 90       	pop	r12
    39aa:	bf 90       	pop	r11
    39ac:	af 90       	pop	r10
    39ae:	08 95       	ret

000039b0 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
    39b0:	df 93       	push	r29
    39b2:	cf 93       	push	r28
    39b4:	00 d0       	rcall	.+0      	; 0x39b6 <vTaskDelete+0x6>
    39b6:	00 d0       	rcall	.+0      	; 0x39b8 <vTaskDelete+0x8>
    39b8:	00 d0       	rcall	.+0      	; 0x39ba <vTaskDelete+0xa>
    39ba:	cd b7       	in	r28, 0x3d	; 61
    39bc:	de b7       	in	r29, 0x3e	; 62
    39be:	9c 83       	std	Y+4, r25	; 0x04
    39c0:	8b 83       	std	Y+3, r24	; 0x03
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    39c2:	0f b6       	in	r0, 0x3f	; 63
    39c4:	f8 94       	cli
    39c6:	0f 92       	push	r0
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
    39c8:	20 91 a8 05 	lds	r18, 0x05A8
    39cc:	30 91 a9 05 	lds	r19, 0x05A9
    39d0:	8b 81       	ldd	r24, Y+3	; 0x03
    39d2:	9c 81       	ldd	r25, Y+4	; 0x04
    39d4:	82 17       	cp	r24, r18
    39d6:	93 07       	cpc	r25, r19
    39d8:	11 f4       	brne	.+4      	; 0x39de <vTaskDelete+0x2e>
			{
				pxTaskToDelete = NULL;
    39da:	1c 82       	std	Y+4, r1	; 0x04
    39dc:	1b 82       	std	Y+3, r1	; 0x03
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
    39de:	8b 81       	ldd	r24, Y+3	; 0x03
    39e0:	9c 81       	ldd	r25, Y+4	; 0x04
    39e2:	00 97       	sbiw	r24, 0x00	; 0
    39e4:	39 f4       	brne	.+14     	; 0x39f4 <vTaskDelete+0x44>
    39e6:	80 91 a8 05 	lds	r24, 0x05A8
    39ea:	90 91 a9 05 	lds	r25, 0x05A9
    39ee:	9e 83       	std	Y+6, r25	; 0x06
    39f0:	8d 83       	std	Y+5, r24	; 0x05
    39f2:	04 c0       	rjmp	.+8      	; 0x39fc <vTaskDelete+0x4c>
    39f4:	8b 81       	ldd	r24, Y+3	; 0x03
    39f6:	9c 81       	ldd	r25, Y+4	; 0x04
    39f8:	9e 83       	std	Y+6, r25	; 0x06
    39fa:	8d 83       	std	Y+5, r24	; 0x05
    39fc:	8d 81       	ldd	r24, Y+5	; 0x05
    39fe:	9e 81       	ldd	r25, Y+6	; 0x06
    3a00:	9a 83       	std	Y+2, r25	; 0x02
    3a02:	89 83       	std	Y+1, r24	; 0x01

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    3a04:	89 81       	ldd	r24, Y+1	; 0x01
    3a06:	9a 81       	ldd	r25, Y+2	; 0x02
    3a08:	02 96       	adiw	r24, 0x02	; 2
    3a0a:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    3a0e:	e9 81       	ldd	r30, Y+1	; 0x01
    3a10:	fa 81       	ldd	r31, Y+2	; 0x02
    3a12:	84 89       	ldd	r24, Z+20	; 0x14
    3a14:	95 89       	ldd	r25, Z+21	; 0x15
    3a16:	00 97       	sbiw	r24, 0x00	; 0
    3a18:	29 f0       	breq	.+10     	; 0x3a24 <vTaskDelete+0x74>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    3a1a:	89 81       	ldd	r24, Y+1	; 0x01
    3a1c:	9a 81       	ldd	r25, Y+2	; 0x02
    3a1e:	0c 96       	adiw	r24, 0x0c	; 12
    3a20:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
    3a24:	89 81       	ldd	r24, Y+1	; 0x01
    3a26:	9a 81       	ldd	r25, Y+2	; 0x02
    3a28:	9c 01       	movw	r18, r24
    3a2a:	2e 5f       	subi	r18, 0xFE	; 254
    3a2c:	3f 4f       	sbci	r19, 0xFF	; 255
    3a2e:	89 ef       	ldi	r24, 0xF9	; 249
    3a30:	95 e0       	ldi	r25, 0x05	; 5
    3a32:	b9 01       	movw	r22, r18
    3a34:	0e 94 43 13 	call	0x2686	; 0x2686 <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
    3a38:	80 91 aa 05 	lds	r24, 0x05AA
    3a3c:	8f 5f       	subi	r24, 0xFF	; 255
    3a3e:	80 93 aa 05 	sts	0x05AA, r24

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
    3a42:	80 91 b5 05 	lds	r24, 0x05B5
    3a46:	8f 5f       	subi	r24, 0xFF	; 255
    3a48:	80 93 b5 05 	sts	0x05B5, r24

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    3a4c:	0f 90       	pop	r0
    3a4e:	0f be       	out	0x3f, r0	; 63

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
    3a50:	80 91 b0 05 	lds	r24, 0x05B0
    3a54:	88 23       	and	r24, r24
    3a56:	31 f0       	breq	.+12     	; 0x3a64 <vTaskDelete+0xb4>
		{
			if( ( void * ) pxTaskToDelete == NULL )
    3a58:	8b 81       	ldd	r24, Y+3	; 0x03
    3a5a:	9c 81       	ldd	r25, Y+4	; 0x04
    3a5c:	00 97       	sbiw	r24, 0x00	; 0
    3a5e:	11 f4       	brne	.+4      	; 0x3a64 <vTaskDelete+0xb4>
			{
				portYIELD_WITHIN_API();
    3a60:	0e 94 57 16 	call	0x2cae	; 0x2cae <vPortYield>
			}
		}
	}
    3a64:	26 96       	adiw	r28, 0x06	; 6
    3a66:	0f b6       	in	r0, 0x3f	; 63
    3a68:	f8 94       	cli
    3a6a:	de bf       	out	0x3e, r29	; 62
    3a6c:	0f be       	out	0x3f, r0	; 63
    3a6e:	cd bf       	out	0x3d, r28	; 61
    3a70:	cf 91       	pop	r28
    3a72:	df 91       	pop	r29
    3a74:	08 95       	ret

00003a76 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
    3a76:	df 93       	push	r29
    3a78:	cf 93       	push	r28
    3a7a:	cd b7       	in	r28, 0x3d	; 61
    3a7c:	de b7       	in	r29, 0x3e	; 62
    3a7e:	28 97       	sbiw	r28, 0x08	; 8
    3a80:	0f b6       	in	r0, 0x3f	; 63
    3a82:	f8 94       	cli
    3a84:	de bf       	out	0x3e, r29	; 62
    3a86:	0f be       	out	0x3f, r0	; 63
    3a88:	cd bf       	out	0x3d, r28	; 61
    3a8a:	9e 83       	std	Y+6, r25	; 0x06
    3a8c:	8d 83       	std	Y+5, r24	; 0x05
    3a8e:	78 87       	std	Y+8, r23	; 0x08
    3a90:	6f 83       	std	Y+7, r22	; 0x07
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
    3a92:	19 82       	std	Y+1, r1	; 0x01

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
    3a94:	0e 94 27 1e 	call	0x3c4e	; 0x3c4e <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    3a98:	ed 81       	ldd	r30, Y+5	; 0x05
    3a9a:	fe 81       	ldd	r31, Y+6	; 0x06
    3a9c:	20 81       	ld	r18, Z
    3a9e:	31 81       	ldd	r19, Z+1	; 0x01
    3aa0:	8f 81       	ldd	r24, Y+7	; 0x07
    3aa2:	98 85       	ldd	r25, Y+8	; 0x08
    3aa4:	82 0f       	add	r24, r18
    3aa6:	93 1f       	adc	r25, r19
    3aa8:	9c 83       	std	Y+4, r25	; 0x04
    3aaa:	8b 83       	std	Y+3, r24	; 0x03

			if( xTickCount < *pxPreviousWakeTime )
    3aac:	ed 81       	ldd	r30, Y+5	; 0x05
    3aae:	fe 81       	ldd	r31, Y+6	; 0x06
    3ab0:	20 81       	ld	r18, Z
    3ab2:	31 81       	ldd	r19, Z+1	; 0x01
    3ab4:	80 91 ac 05 	lds	r24, 0x05AC
    3ab8:	90 91 ad 05 	lds	r25, 0x05AD
    3abc:	82 17       	cp	r24, r18
    3abe:	93 07       	cpc	r25, r19
    3ac0:	a8 f4       	brcc	.+42     	; 0x3aec <vTaskDelayUntil+0x76>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
    3ac2:	ed 81       	ldd	r30, Y+5	; 0x05
    3ac4:	fe 81       	ldd	r31, Y+6	; 0x06
    3ac6:	20 81       	ld	r18, Z
    3ac8:	31 81       	ldd	r19, Z+1	; 0x01
    3aca:	8b 81       	ldd	r24, Y+3	; 0x03
    3acc:	9c 81       	ldd	r25, Y+4	; 0x04
    3ace:	82 17       	cp	r24, r18
    3ad0:	93 07       	cpc	r25, r19
    3ad2:	00 f5       	brcc	.+64     	; 0x3b14 <vTaskDelayUntil+0x9e>
    3ad4:	20 91 ac 05 	lds	r18, 0x05AC
    3ad8:	30 91 ad 05 	lds	r19, 0x05AD
    3adc:	8b 81       	ldd	r24, Y+3	; 0x03
    3ade:	9c 81       	ldd	r25, Y+4	; 0x04
    3ae0:	28 17       	cp	r18, r24
    3ae2:	39 07       	cpc	r19, r25
    3ae4:	b8 f4       	brcc	.+46     	; 0x3b14 <vTaskDelayUntil+0x9e>
				{
					xShouldDelay = pdTRUE;
    3ae6:	81 e0       	ldi	r24, 0x01	; 1
    3ae8:	89 83       	std	Y+1, r24	; 0x01
    3aea:	14 c0       	rjmp	.+40     	; 0x3b14 <vTaskDelayUntil+0x9e>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
    3aec:	ed 81       	ldd	r30, Y+5	; 0x05
    3aee:	fe 81       	ldd	r31, Y+6	; 0x06
    3af0:	20 81       	ld	r18, Z
    3af2:	31 81       	ldd	r19, Z+1	; 0x01
    3af4:	8b 81       	ldd	r24, Y+3	; 0x03
    3af6:	9c 81       	ldd	r25, Y+4	; 0x04
    3af8:	82 17       	cp	r24, r18
    3afa:	93 07       	cpc	r25, r19
    3afc:	48 f0       	brcs	.+18     	; 0x3b10 <vTaskDelayUntil+0x9a>
    3afe:	20 91 ac 05 	lds	r18, 0x05AC
    3b02:	30 91 ad 05 	lds	r19, 0x05AD
    3b06:	8b 81       	ldd	r24, Y+3	; 0x03
    3b08:	9c 81       	ldd	r25, Y+4	; 0x04
    3b0a:	28 17       	cp	r18, r24
    3b0c:	39 07       	cpc	r19, r25
    3b0e:	10 f4       	brcc	.+4      	; 0x3b14 <vTaskDelayUntil+0x9e>
				{
					xShouldDelay = pdTRUE;
    3b10:	81 e0       	ldi	r24, 0x01	; 1
    3b12:	89 83       	std	Y+1, r24	; 0x01
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    3b14:	ed 81       	ldd	r30, Y+5	; 0x05
    3b16:	fe 81       	ldd	r31, Y+6	; 0x06
    3b18:	8b 81       	ldd	r24, Y+3	; 0x03
    3b1a:	9c 81       	ldd	r25, Y+4	; 0x04
    3b1c:	91 83       	std	Z+1, r25	; 0x01
    3b1e:	80 83       	st	Z, r24

			if( xShouldDelay != pdFALSE )
    3b20:	89 81       	ldd	r24, Y+1	; 0x01
    3b22:	88 23       	and	r24, r24
    3b24:	59 f0       	breq	.+22     	; 0x3b3c <vTaskDelayUntil+0xc6>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    3b26:	80 91 a8 05 	lds	r24, 0x05A8
    3b2a:	90 91 a9 05 	lds	r25, 0x05A9
    3b2e:	02 96       	adiw	r24, 0x02	; 2
    3b30:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    3b34:	8b 81       	ldd	r24, Y+3	; 0x03
    3b36:	9c 81       	ldd	r25, Y+4	; 0x04
    3b38:	0e 94 27 22 	call	0x444e	; 0x444e <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    3b3c:	0e 94 33 1e 	call	0x3c66	; 0x3c66 <xTaskResumeAll>
    3b40:	8a 83       	std	Y+2, r24	; 0x02

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    3b42:	8a 81       	ldd	r24, Y+2	; 0x02
    3b44:	88 23       	and	r24, r24
    3b46:	11 f4       	brne	.+4      	; 0x3b4c <vTaskDelayUntil+0xd6>
		{
			portYIELD_WITHIN_API();
    3b48:	0e 94 57 16 	call	0x2cae	; 0x2cae <vPortYield>
		}
	}
    3b4c:	28 96       	adiw	r28, 0x08	; 8
    3b4e:	0f b6       	in	r0, 0x3f	; 63
    3b50:	f8 94       	cli
    3b52:	de bf       	out	0x3e, r29	; 62
    3b54:	0f be       	out	0x3f, r0	; 63
    3b56:	cd bf       	out	0x3d, r28	; 61
    3b58:	cf 91       	pop	r28
    3b5a:	df 91       	pop	r29
    3b5c:	08 95       	ret

00003b5e <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    3b5e:	df 93       	push	r29
    3b60:	cf 93       	push	r28
    3b62:	00 d0       	rcall	.+0      	; 0x3b64 <vTaskDelay+0x6>
    3b64:	00 d0       	rcall	.+0      	; 0x3b66 <vTaskDelay+0x8>
    3b66:	0f 92       	push	r0
    3b68:	cd b7       	in	r28, 0x3d	; 61
    3b6a:	de b7       	in	r29, 0x3e	; 62
    3b6c:	9d 83       	std	Y+5, r25	; 0x05
    3b6e:	8c 83       	std	Y+4, r24	; 0x04
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    3b70:	19 82       	std	Y+1, r1	; 0x01

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    3b72:	8c 81       	ldd	r24, Y+4	; 0x04
    3b74:	9d 81       	ldd	r25, Y+5	; 0x05
    3b76:	00 97       	sbiw	r24, 0x00	; 0
    3b78:	d1 f0       	breq	.+52     	; 0x3bae <vTaskDelay+0x50>
		{
			vTaskSuspendAll();
    3b7a:	0e 94 27 1e 	call	0x3c4e	; 0x3c4e <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    3b7e:	20 91 ac 05 	lds	r18, 0x05AC
    3b82:	30 91 ad 05 	lds	r19, 0x05AD
    3b86:	8c 81       	ldd	r24, Y+4	; 0x04
    3b88:	9d 81       	ldd	r25, Y+5	; 0x05
    3b8a:	82 0f       	add	r24, r18
    3b8c:	93 1f       	adc	r25, r19
    3b8e:	9b 83       	std	Y+3, r25	; 0x03
    3b90:	8a 83       	std	Y+2, r24	; 0x02

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    3b92:	80 91 a8 05 	lds	r24, 0x05A8
    3b96:	90 91 a9 05 	lds	r25, 0x05A9
    3b9a:	02 96       	adiw	r24, 0x02	; 2
    3b9c:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    3ba0:	8a 81       	ldd	r24, Y+2	; 0x02
    3ba2:	9b 81       	ldd	r25, Y+3	; 0x03
    3ba4:	0e 94 27 22 	call	0x444e	; 0x444e <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    3ba8:	0e 94 33 1e 	call	0x3c66	; 0x3c66 <xTaskResumeAll>
    3bac:	89 83       	std	Y+1, r24	; 0x01
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    3bae:	89 81       	ldd	r24, Y+1	; 0x01
    3bb0:	88 23       	and	r24, r24
    3bb2:	11 f4       	brne	.+4      	; 0x3bb8 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
    3bb4:	0e 94 57 16 	call	0x2cae	; 0x2cae <vPortYield>
		}
	}
    3bb8:	0f 90       	pop	r0
    3bba:	0f 90       	pop	r0
    3bbc:	0f 90       	pop	r0
    3bbe:	0f 90       	pop	r0
    3bc0:	0f 90       	pop	r0
    3bc2:	cf 91       	pop	r28
    3bc4:	df 91       	pop	r29
    3bc6:	08 95       	ret

00003bc8 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
    3bc8:	af 92       	push	r10
    3bca:	bf 92       	push	r11
    3bcc:	cf 92       	push	r12
    3bce:	df 92       	push	r13
    3bd0:	ef 92       	push	r14
    3bd2:	ff 92       	push	r15
    3bd4:	0f 93       	push	r16
    3bd6:	df 93       	push	r29
    3bd8:	cf 93       	push	r28
    3bda:	0f 92       	push	r0
    3bdc:	cd b7       	in	r28, 0x3d	; 61
    3bde:	de b7       	in	r29, 0x3e	; 62
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
    3be0:	22 e7       	ldi	r18, 0x72	; 114
    3be2:	30 e0       	ldi	r19, 0x00	; 0
    3be4:	8b e4       	ldi	r24, 0x4B	; 75
    3be6:	91 e2       	ldi	r25, 0x21	; 33
    3be8:	b9 01       	movw	r22, r18
    3bea:	4a ef       	ldi	r20, 0xFA	; 250
    3bec:	50 e0       	ldi	r21, 0x00	; 0
    3bee:	20 e0       	ldi	r18, 0x00	; 0
    3bf0:	30 e0       	ldi	r19, 0x00	; 0
    3bf2:	00 e0       	ldi	r16, 0x00	; 0
    3bf4:	ee 24       	eor	r14, r14
    3bf6:	ff 24       	eor	r15, r15
    3bf8:	cc 24       	eor	r12, r12
    3bfa:	dd 24       	eor	r13, r13
    3bfc:	aa 24       	eor	r10, r10
    3bfe:	bb 24       	eor	r11, r11
    3c00:	0e 94 eb 1b 	call	0x37d6	; 0x37d6 <xTaskGenericCreate>
    3c04:	89 83       	std	Y+1, r24	; 0x01
			xReturn = xTimerCreateTimerTask();
		}
	}
	#endif

	if( xReturn == pdPASS )
    3c06:	89 81       	ldd	r24, Y+1	; 0x01
    3c08:	81 30       	cpi	r24, 0x01	; 1
    3c0a:	51 f4       	brne	.+20     	; 0x3c20 <vTaskStartScheduler+0x58>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
    3c0c:	f8 94       	cli

		xSchedulerRunning = pdTRUE;
    3c0e:	81 e0       	ldi	r24, 0x01	; 1
    3c10:	80 93 b0 05 	sts	0x05B0, r24
		xTickCount = ( portTickType ) 0U;
    3c14:	10 92 ad 05 	sts	0x05AD, r1
    3c18:	10 92 ac 05 	sts	0x05AC, r1
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    3c1c:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <xPortStartScheduler>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
    3c20:	0f 90       	pop	r0
    3c22:	cf 91       	pop	r28
    3c24:	df 91       	pop	r29
    3c26:	0f 91       	pop	r16
    3c28:	ff 90       	pop	r15
    3c2a:	ef 90       	pop	r14
    3c2c:	df 90       	pop	r13
    3c2e:	cf 90       	pop	r12
    3c30:	bf 90       	pop	r11
    3c32:	af 90       	pop	r10
    3c34:	08 95       	ret

00003c36 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
    3c36:	df 93       	push	r29
    3c38:	cf 93       	push	r28
    3c3a:	cd b7       	in	r28, 0x3d	; 61
    3c3c:	de b7       	in	r29, 0x3e	; 62
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    3c3e:	f8 94       	cli
	xSchedulerRunning = pdFALSE;
    3c40:	10 92 b0 05 	sts	0x05B0, r1
	vPortEndScheduler();
    3c44:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <vPortEndScheduler>
}
    3c48:	cf 91       	pop	r28
    3c4a:	df 91       	pop	r29
    3c4c:	08 95       	ret

00003c4e <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    3c4e:	df 93       	push	r29
    3c50:	cf 93       	push	r28
    3c52:	cd b7       	in	r28, 0x3d	; 61
    3c54:	de b7       	in	r29, 0x3e	; 62
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    3c56:	80 91 b1 05 	lds	r24, 0x05B1
    3c5a:	8f 5f       	subi	r24, 0xFF	; 255
    3c5c:	80 93 b1 05 	sts	0x05B1, r24
}
    3c60:	cf 91       	pop	r28
    3c62:	df 91       	pop	r29
    3c64:	08 95       	ret

00003c66 <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
    3c66:	df 93       	push	r29
    3c68:	cf 93       	push	r28
    3c6a:	00 d0       	rcall	.+0      	; 0x3c6c <xTaskResumeAll+0x6>
    3c6c:	00 d0       	rcall	.+0      	; 0x3c6e <xTaskResumeAll+0x8>
    3c6e:	cd b7       	in	r28, 0x3d	; 61
    3c70:	de b7       	in	r29, 0x3e	; 62
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    3c72:	1a 82       	std	Y+2, r1	; 0x02
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    3c74:	0f b6       	in	r0, 0x3f	; 63
    3c76:	f8 94       	cli
    3c78:	0f 92       	push	r0
	{
		--uxSchedulerSuspended;
    3c7a:	80 91 b1 05 	lds	r24, 0x05B1
    3c7e:	81 50       	subi	r24, 0x01	; 1
    3c80:	80 93 b1 05 	sts	0x05B1, r24

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    3c84:	80 91 b1 05 	lds	r24, 0x05B1
    3c88:	88 23       	and	r24, r24
    3c8a:	09 f0       	breq	.+2      	; 0x3c8e <xTaskResumeAll+0x28>
    3c8c:	6c c0       	rjmp	.+216    	; 0x3d66 <xTaskResumeAll+0x100>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
    3c8e:	80 91 ab 05 	lds	r24, 0x05AB
    3c92:	88 23       	and	r24, r24
    3c94:	09 f4       	brne	.+2      	; 0x3c98 <xTaskResumeAll+0x32>
    3c96:	67 c0       	rjmp	.+206    	; 0x3d66 <xTaskResumeAll+0x100>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
    3c98:	19 82       	std	Y+1, r1	; 0x01
    3c9a:	41 c0       	rjmp	.+130    	; 0x3d1e <xTaskResumeAll+0xb8>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
    3c9c:	e0 91 f5 05 	lds	r30, 0x05F5
    3ca0:	f0 91 f6 05 	lds	r31, 0x05F6
    3ca4:	86 81       	ldd	r24, Z+6	; 0x06
    3ca6:	97 81       	ldd	r25, Z+7	; 0x07
    3ca8:	9c 83       	std	Y+4, r25	; 0x04
    3caa:	8b 83       	std	Y+3, r24	; 0x03
					vListRemove( &( pxTCB->xEventListItem ) );
    3cac:	8b 81       	ldd	r24, Y+3	; 0x03
    3cae:	9c 81       	ldd	r25, Y+4	; 0x04
    3cb0:	0c 96       	adiw	r24, 0x0c	; 12
    3cb2:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
    3cb6:	8b 81       	ldd	r24, Y+3	; 0x03
    3cb8:	9c 81       	ldd	r25, Y+4	; 0x04
    3cba:	02 96       	adiw	r24, 0x02	; 2
    3cbc:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    3cc0:	eb 81       	ldd	r30, Y+3	; 0x03
    3cc2:	fc 81       	ldd	r31, Y+4	; 0x04
    3cc4:	96 89       	ldd	r25, Z+22	; 0x16
    3cc6:	80 91 af 05 	lds	r24, 0x05AF
    3cca:	89 17       	cp	r24, r25
    3ccc:	28 f4       	brcc	.+10     	; 0x3cd8 <xTaskResumeAll+0x72>
    3cce:	eb 81       	ldd	r30, Y+3	; 0x03
    3cd0:	fc 81       	ldd	r31, Y+4	; 0x04
    3cd2:	86 89       	ldd	r24, Z+22	; 0x16
    3cd4:	80 93 af 05 	sts	0x05AF, r24
    3cd8:	eb 81       	ldd	r30, Y+3	; 0x03
    3cda:	fc 81       	ldd	r31, Y+4	; 0x04
    3cdc:	86 89       	ldd	r24, Z+22	; 0x16
    3cde:	28 2f       	mov	r18, r24
    3ce0:	30 e0       	ldi	r19, 0x00	; 0
    3ce2:	c9 01       	movw	r24, r18
    3ce4:	88 0f       	add	r24, r24
    3ce6:	99 1f       	adc	r25, r25
    3ce8:	88 0f       	add	r24, r24
    3cea:	99 1f       	adc	r25, r25
    3cec:	88 0f       	add	r24, r24
    3cee:	99 1f       	adc	r25, r25
    3cf0:	82 0f       	add	r24, r18
    3cf2:	93 1f       	adc	r25, r19
    3cf4:	8a 54       	subi	r24, 0x4A	; 74
    3cf6:	9a 4f       	sbci	r25, 0xFA	; 250
    3cf8:	2b 81       	ldd	r18, Y+3	; 0x03
    3cfa:	3c 81       	ldd	r19, Y+4	; 0x04
    3cfc:	2e 5f       	subi	r18, 0xFE	; 254
    3cfe:	3f 4f       	sbci	r19, 0xFF	; 255
    3d00:	b9 01       	movw	r22, r18
    3d02:	0e 94 43 13 	call	0x2686	; 0x2686 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    3d06:	eb 81       	ldd	r30, Y+3	; 0x03
    3d08:	fc 81       	ldd	r31, Y+4	; 0x04
    3d0a:	96 89       	ldd	r25, Z+22	; 0x16
    3d0c:	e0 91 a8 05 	lds	r30, 0x05A8
    3d10:	f0 91 a9 05 	lds	r31, 0x05A9
    3d14:	86 89       	ldd	r24, Z+22	; 0x16
    3d16:	98 17       	cp	r25, r24
    3d18:	10 f0       	brcs	.+4      	; 0x3d1e <xTaskResumeAll+0xb8>
					{
						xYieldRequired = pdTRUE;
    3d1a:	81 e0       	ldi	r24, 0x01	; 1
    3d1c:	89 83       	std	Y+1, r24	; 0x01
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    3d1e:	80 91 f0 05 	lds	r24, 0x05F0
    3d22:	88 23       	and	r24, r24
    3d24:	09 f0       	breq	.+2      	; 0x3d28 <xTaskResumeAll+0xc2>
    3d26:	ba cf       	rjmp	.-140    	; 0x3c9c <xTaskResumeAll+0x36>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    3d28:	80 91 b2 05 	lds	r24, 0x05B2
    3d2c:	88 23       	and	r24, r24
    3d2e:	71 f0       	breq	.+28     	; 0x3d4c <xTaskResumeAll+0xe6>
    3d30:	07 c0       	rjmp	.+14     	; 0x3d40 <xTaskResumeAll+0xda>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
					{
						vTaskIncrementTick();
    3d32:	0e 94 f2 1e 	call	0x3de4	; 0x3de4 <vTaskIncrementTick>
						--uxMissedTicks;
    3d36:	80 91 b2 05 	lds	r24, 0x05B2
    3d3a:	81 50       	subi	r24, 0x01	; 1
    3d3c:	80 93 b2 05 	sts	0x05B2, r24
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    3d40:	80 91 b2 05 	lds	r24, 0x05B2
    3d44:	88 23       	and	r24, r24
    3d46:	a9 f7       	brne	.-22     	; 0x3d32 <xTaskResumeAll+0xcc>
					/* As we have processed some ticks it is appropriate to yield
					to ensure the highest priority task that is ready to run is
					the task actually running. */
					#if configUSE_PREEMPTION == 1
					{
						xYieldRequired = pdTRUE;
    3d48:	81 e0       	ldi	r24, 0x01	; 1
    3d4a:	89 83       	std	Y+1, r24	; 0x01
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    3d4c:	89 81       	ldd	r24, Y+1	; 0x01
    3d4e:	81 30       	cpi	r24, 0x01	; 1
    3d50:	21 f0       	breq	.+8      	; 0x3d5a <xTaskResumeAll+0xf4>
    3d52:	80 91 b3 05 	lds	r24, 0x05B3
    3d56:	81 30       	cpi	r24, 0x01	; 1
    3d58:	31 f4       	brne	.+12     	; 0x3d66 <xTaskResumeAll+0x100>
				{
					xAlreadyYielded = pdTRUE;
    3d5a:	81 e0       	ldi	r24, 0x01	; 1
    3d5c:	8a 83       	std	Y+2, r24	; 0x02
					xMissedYield = pdFALSE;
    3d5e:	10 92 b3 05 	sts	0x05B3, r1
					portYIELD_WITHIN_API();
    3d62:	0e 94 57 16 	call	0x2cae	; 0x2cae <vPortYield>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
    3d66:	0f 90       	pop	r0
    3d68:	0f be       	out	0x3f, r0	; 63

	return xAlreadyYielded;
    3d6a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3d6c:	0f 90       	pop	r0
    3d6e:	0f 90       	pop	r0
    3d70:	0f 90       	pop	r0
    3d72:	0f 90       	pop	r0
    3d74:	cf 91       	pop	r28
    3d76:	df 91       	pop	r29
    3d78:	08 95       	ret

00003d7a <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
    3d7a:	df 93       	push	r29
    3d7c:	cf 93       	push	r28
    3d7e:	00 d0       	rcall	.+0      	; 0x3d80 <xTaskGetTickCount+0x6>
    3d80:	cd b7       	in	r28, 0x3d	; 61
    3d82:	de b7       	in	r29, 0x3e	; 62
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
    3d84:	0f b6       	in	r0, 0x3f	; 63
    3d86:	f8 94       	cli
    3d88:	0f 92       	push	r0
	{
		xTicks = xTickCount;
    3d8a:	80 91 ac 05 	lds	r24, 0x05AC
    3d8e:	90 91 ad 05 	lds	r25, 0x05AD
    3d92:	9a 83       	std	Y+2, r25	; 0x02
    3d94:	89 83       	std	Y+1, r24	; 0x01
	}
	taskEXIT_CRITICAL();
    3d96:	0f 90       	pop	r0
    3d98:	0f be       	out	0x3f, r0	; 63

	return xTicks;
    3d9a:	89 81       	ldd	r24, Y+1	; 0x01
    3d9c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3d9e:	0f 90       	pop	r0
    3da0:	0f 90       	pop	r0
    3da2:	cf 91       	pop	r28
    3da4:	df 91       	pop	r29
    3da6:	08 95       	ret

00003da8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
    3da8:	df 93       	push	r29
    3daa:	cf 93       	push	r28
    3dac:	00 d0       	rcall	.+0      	; 0x3dae <xTaskGetTickCountFromISR+0x6>
    3dae:	0f 92       	push	r0
    3db0:	cd b7       	in	r28, 0x3d	; 61
    3db2:	de b7       	in	r29, 0x3e	; 62
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    3db4:	19 82       	std	Y+1, r1	; 0x01
	xReturn = xTickCount;
    3db6:	80 91 ac 05 	lds	r24, 0x05AC
    3dba:	90 91 ad 05 	lds	r25, 0x05AD
    3dbe:	9b 83       	std	Y+3, r25	; 0x03
    3dc0:	8a 83       	std	Y+2, r24	; 0x02
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    3dc2:	8a 81       	ldd	r24, Y+2	; 0x02
    3dc4:	9b 81       	ldd	r25, Y+3	; 0x03
}
    3dc6:	0f 90       	pop	r0
    3dc8:	0f 90       	pop	r0
    3dca:	0f 90       	pop	r0
    3dcc:	cf 91       	pop	r28
    3dce:	df 91       	pop	r29
    3dd0:	08 95       	ret

00003dd2 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
    3dd2:	df 93       	push	r29
    3dd4:	cf 93       	push	r28
    3dd6:	cd b7       	in	r28, 0x3d	; 61
    3dd8:	de b7       	in	r29, 0x3e	; 62
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
    3dda:	80 91 ab 05 	lds	r24, 0x05AB
}
    3dde:	cf 91       	pop	r28
    3de0:	df 91       	pop	r29
    3de2:	08 95       	ret

00003de4 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
    3de4:	df 93       	push	r29
    3de6:	cf 93       	push	r28
    3de8:	00 d0       	rcall	.+0      	; 0x3dea <vTaskIncrementTick+0x6>
    3dea:	00 d0       	rcall	.+0      	; 0x3dec <vTaskIncrementTick+0x8>
    3dec:	00 d0       	rcall	.+0      	; 0x3dee <vTaskIncrementTick+0xa>
    3dee:	cd b7       	in	r28, 0x3d	; 61
    3df0:	de b7       	in	r29, 0x3e	; 62
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    3df2:	80 91 b1 05 	lds	r24, 0x05B1
    3df6:	88 23       	and	r24, r24
    3df8:	09 f0       	breq	.+2      	; 0x3dfc <vTaskIncrementTick+0x18>
    3dfa:	bb c0       	rjmp	.+374    	; 0x3f72 <vTaskIncrementTick+0x18e>
	{
		++xTickCount;
    3dfc:	80 91 ac 05 	lds	r24, 0x05AC
    3e00:	90 91 ad 05 	lds	r25, 0x05AD
    3e04:	01 96       	adiw	r24, 0x01	; 1
    3e06:	90 93 ad 05 	sts	0x05AD, r25
    3e0a:	80 93 ac 05 	sts	0x05AC, r24
		if( xTickCount == ( portTickType ) 0U )
    3e0e:	80 91 ac 05 	lds	r24, 0x05AC
    3e12:	90 91 ad 05 	lds	r25, 0x05AD
    3e16:	00 97       	sbiw	r24, 0x00	; 0
    3e18:	d1 f5       	brne	.+116    	; 0x3e8e <vTaskIncrementTick+0xaa>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
    3e1a:	80 91 ec 05 	lds	r24, 0x05EC
    3e1e:	90 91 ed 05 	lds	r25, 0x05ED
    3e22:	9c 83       	std	Y+4, r25	; 0x04
    3e24:	8b 83       	std	Y+3, r24	; 0x03
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    3e26:	80 91 ee 05 	lds	r24, 0x05EE
    3e2a:	90 91 ef 05 	lds	r25, 0x05EF
    3e2e:	90 93 ed 05 	sts	0x05ED, r25
    3e32:	80 93 ec 05 	sts	0x05EC, r24
			pxOverflowDelayedTaskList = pxTemp;
    3e36:	8b 81       	ldd	r24, Y+3	; 0x03
    3e38:	9c 81       	ldd	r25, Y+4	; 0x04
    3e3a:	90 93 ef 05 	sts	0x05EF, r25
    3e3e:	80 93 ee 05 	sts	0x05EE, r24
			xNumOfOverflows++;
    3e42:	80 91 b4 05 	lds	r24, 0x05B4
    3e46:	8f 5f       	subi	r24, 0xFF	; 255
    3e48:	80 93 b4 05 	sts	0x05B4, r24
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    3e4c:	e0 91 ec 05 	lds	r30, 0x05EC
    3e50:	f0 91 ed 05 	lds	r31, 0x05ED
    3e54:	80 81       	ld	r24, Z
    3e56:	88 23       	and	r24, r24
    3e58:	39 f4       	brne	.+14     	; 0x3e68 <vTaskIncrementTick+0x84>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
    3e5a:	8f ef       	ldi	r24, 0xFF	; 255
    3e5c:	9f ef       	ldi	r25, 0xFF	; 255
    3e5e:	90 93 80 01 	sts	0x0180, r25
    3e62:	80 93 7f 01 	sts	0x017F, r24
    3e66:	13 c0       	rjmp	.+38     	; 0x3e8e <vTaskIncrementTick+0xaa>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    3e68:	e0 91 ec 05 	lds	r30, 0x05EC
    3e6c:	f0 91 ed 05 	lds	r31, 0x05ED
    3e70:	05 80       	ldd	r0, Z+5	; 0x05
    3e72:	f6 81       	ldd	r31, Z+6	; 0x06
    3e74:	e0 2d       	mov	r30, r0
    3e76:	86 81       	ldd	r24, Z+6	; 0x06
    3e78:	97 81       	ldd	r25, Z+7	; 0x07
    3e7a:	9e 83       	std	Y+6, r25	; 0x06
    3e7c:	8d 83       	std	Y+5, r24	; 0x05
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    3e7e:	ed 81       	ldd	r30, Y+5	; 0x05
    3e80:	fe 81       	ldd	r31, Y+6	; 0x06
    3e82:	82 81       	ldd	r24, Z+2	; 0x02
    3e84:	93 81       	ldd	r25, Z+3	; 0x03
    3e86:	90 93 80 01 	sts	0x0180, r25
    3e8a:	80 93 7f 01 	sts	0x017F, r24
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
    3e8e:	20 91 ac 05 	lds	r18, 0x05AC
    3e92:	30 91 ad 05 	lds	r19, 0x05AD
    3e96:	80 91 7f 01 	lds	r24, 0x017F
    3e9a:	90 91 80 01 	lds	r25, 0x0180
    3e9e:	28 17       	cp	r18, r24
    3ea0:	39 07       	cpc	r19, r25
    3ea2:	08 f4       	brcc	.+2      	; 0x3ea6 <vTaskIncrementTick+0xc2>
    3ea4:	6b c0       	rjmp	.+214    	; 0x3f7c <vTaskIncrementTick+0x198>
    3ea6:	e0 91 ec 05 	lds	r30, 0x05EC
    3eaa:	f0 91 ed 05 	lds	r31, 0x05ED
    3eae:	80 81       	ld	r24, Z
    3eb0:	88 23       	and	r24, r24
    3eb2:	39 f4       	brne	.+14     	; 0x3ec2 <vTaskIncrementTick+0xde>
    3eb4:	8f ef       	ldi	r24, 0xFF	; 255
    3eb6:	9f ef       	ldi	r25, 0xFF	; 255
    3eb8:	90 93 80 01 	sts	0x0180, r25
    3ebc:	80 93 7f 01 	sts	0x017F, r24
    3ec0:	5d c0       	rjmp	.+186    	; 0x3f7c <vTaskIncrementTick+0x198>
    3ec2:	e0 91 ec 05 	lds	r30, 0x05EC
    3ec6:	f0 91 ed 05 	lds	r31, 0x05ED
    3eca:	05 80       	ldd	r0, Z+5	; 0x05
    3ecc:	f6 81       	ldd	r31, Z+6	; 0x06
    3ece:	e0 2d       	mov	r30, r0
    3ed0:	86 81       	ldd	r24, Z+6	; 0x06
    3ed2:	97 81       	ldd	r25, Z+7	; 0x07
    3ed4:	9e 83       	std	Y+6, r25	; 0x06
    3ed6:	8d 83       	std	Y+5, r24	; 0x05
    3ed8:	ed 81       	ldd	r30, Y+5	; 0x05
    3eda:	fe 81       	ldd	r31, Y+6	; 0x06
    3edc:	82 81       	ldd	r24, Z+2	; 0x02
    3ede:	93 81       	ldd	r25, Z+3	; 0x03
    3ee0:	9a 83       	std	Y+2, r25	; 0x02
    3ee2:	89 83       	std	Y+1, r24	; 0x01
    3ee4:	20 91 ac 05 	lds	r18, 0x05AC
    3ee8:	30 91 ad 05 	lds	r19, 0x05AD
    3eec:	89 81       	ldd	r24, Y+1	; 0x01
    3eee:	9a 81       	ldd	r25, Y+2	; 0x02
    3ef0:	28 17       	cp	r18, r24
    3ef2:	39 07       	cpc	r19, r25
    3ef4:	38 f4       	brcc	.+14     	; 0x3f04 <vTaskIncrementTick+0x120>
    3ef6:	89 81       	ldd	r24, Y+1	; 0x01
    3ef8:	9a 81       	ldd	r25, Y+2	; 0x02
    3efa:	90 93 80 01 	sts	0x0180, r25
    3efe:	80 93 7f 01 	sts	0x017F, r24
    3f02:	3c c0       	rjmp	.+120    	; 0x3f7c <vTaskIncrementTick+0x198>
    3f04:	8d 81       	ldd	r24, Y+5	; 0x05
    3f06:	9e 81       	ldd	r25, Y+6	; 0x06
    3f08:	02 96       	adiw	r24, 0x02	; 2
    3f0a:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <vListRemove>
    3f0e:	ed 81       	ldd	r30, Y+5	; 0x05
    3f10:	fe 81       	ldd	r31, Y+6	; 0x06
    3f12:	84 89       	ldd	r24, Z+20	; 0x14
    3f14:	95 89       	ldd	r25, Z+21	; 0x15
    3f16:	00 97       	sbiw	r24, 0x00	; 0
    3f18:	29 f0       	breq	.+10     	; 0x3f24 <vTaskIncrementTick+0x140>
    3f1a:	8d 81       	ldd	r24, Y+5	; 0x05
    3f1c:	9e 81       	ldd	r25, Y+6	; 0x06
    3f1e:	0c 96       	adiw	r24, 0x0c	; 12
    3f20:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <vListRemove>
    3f24:	ed 81       	ldd	r30, Y+5	; 0x05
    3f26:	fe 81       	ldd	r31, Y+6	; 0x06
    3f28:	96 89       	ldd	r25, Z+22	; 0x16
    3f2a:	80 91 af 05 	lds	r24, 0x05AF
    3f2e:	89 17       	cp	r24, r25
    3f30:	28 f4       	brcc	.+10     	; 0x3f3c <vTaskIncrementTick+0x158>
    3f32:	ed 81       	ldd	r30, Y+5	; 0x05
    3f34:	fe 81       	ldd	r31, Y+6	; 0x06
    3f36:	86 89       	ldd	r24, Z+22	; 0x16
    3f38:	80 93 af 05 	sts	0x05AF, r24
    3f3c:	ed 81       	ldd	r30, Y+5	; 0x05
    3f3e:	fe 81       	ldd	r31, Y+6	; 0x06
    3f40:	86 89       	ldd	r24, Z+22	; 0x16
    3f42:	28 2f       	mov	r18, r24
    3f44:	30 e0       	ldi	r19, 0x00	; 0
    3f46:	c9 01       	movw	r24, r18
    3f48:	88 0f       	add	r24, r24
    3f4a:	99 1f       	adc	r25, r25
    3f4c:	88 0f       	add	r24, r24
    3f4e:	99 1f       	adc	r25, r25
    3f50:	88 0f       	add	r24, r24
    3f52:	99 1f       	adc	r25, r25
    3f54:	82 0f       	add	r24, r18
    3f56:	93 1f       	adc	r25, r19
    3f58:	ac 01       	movw	r20, r24
    3f5a:	4a 54       	subi	r20, 0x4A	; 74
    3f5c:	5a 4f       	sbci	r21, 0xFA	; 250
    3f5e:	8d 81       	ldd	r24, Y+5	; 0x05
    3f60:	9e 81       	ldd	r25, Y+6	; 0x06
    3f62:	9c 01       	movw	r18, r24
    3f64:	2e 5f       	subi	r18, 0xFE	; 254
    3f66:	3f 4f       	sbci	r19, 0xFF	; 255
    3f68:	ca 01       	movw	r24, r20
    3f6a:	b9 01       	movw	r22, r18
    3f6c:	0e 94 43 13 	call	0x2686	; 0x2686 <vListInsertEnd>
    3f70:	9a cf       	rjmp	.-204    	; 0x3ea6 <vTaskIncrementTick+0xc2>
	}
	else
	{
		++uxMissedTicks;
    3f72:	80 91 b2 05 	lds	r24, 0x05B2
    3f76:	8f 5f       	subi	r24, 0xFF	; 255
    3f78:	80 93 b2 05 	sts	0x05B2, r24
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
    3f7c:	26 96       	adiw	r28, 0x06	; 6
    3f7e:	0f b6       	in	r0, 0x3f	; 63
    3f80:	f8 94       	cli
    3f82:	de bf       	out	0x3e, r29	; 62
    3f84:	0f be       	out	0x3f, r0	; 63
    3f86:	cd bf       	out	0x3d, r28	; 61
    3f88:	cf 91       	pop	r28
    3f8a:	df 91       	pop	r29
    3f8c:	08 95       	ret

00003f8e <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    3f8e:	df 93       	push	r29
    3f90:	cf 93       	push	r28
    3f92:	00 d0       	rcall	.+0      	; 0x3f94 <vTaskSwitchContext+0x6>
    3f94:	cd b7       	in	r28, 0x3d	; 61
    3f96:	de b7       	in	r29, 0x3e	; 62
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    3f98:	80 91 b1 05 	lds	r24, 0x05B1
    3f9c:	88 23       	and	r24, r24
    3f9e:	49 f0       	breq	.+18     	; 0x3fb2 <vTaskSwitchContext+0x24>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    3fa0:	81 e0       	ldi	r24, 0x01	; 1
    3fa2:	80 93 b3 05 	sts	0x05B3, r24
    3fa6:	54 c0       	rjmp	.+168    	; 0x4050 <vTaskSwitchContext+0xc2>
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    3fa8:	80 91 af 05 	lds	r24, 0x05AF
    3fac:	81 50       	subi	r24, 0x01	; 1
    3fae:	80 93 af 05 	sts	0x05AF, r24
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    3fb2:	80 91 af 05 	lds	r24, 0x05AF
    3fb6:	28 2f       	mov	r18, r24
    3fb8:	30 e0       	ldi	r19, 0x00	; 0
    3fba:	c9 01       	movw	r24, r18
    3fbc:	88 0f       	add	r24, r24
    3fbe:	99 1f       	adc	r25, r25
    3fc0:	88 0f       	add	r24, r24
    3fc2:	99 1f       	adc	r25, r25
    3fc4:	88 0f       	add	r24, r24
    3fc6:	99 1f       	adc	r25, r25
    3fc8:	82 0f       	add	r24, r18
    3fca:	93 1f       	adc	r25, r19
    3fcc:	fc 01       	movw	r30, r24
    3fce:	ea 54       	subi	r30, 0x4A	; 74
    3fd0:	fa 4f       	sbci	r31, 0xFA	; 250
    3fd2:	80 81       	ld	r24, Z
    3fd4:	88 23       	and	r24, r24
    3fd6:	41 f3       	breq	.-48     	; 0x3fa8 <vTaskSwitchContext+0x1a>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    3fd8:	80 91 af 05 	lds	r24, 0x05AF
    3fdc:	28 2f       	mov	r18, r24
    3fde:	30 e0       	ldi	r19, 0x00	; 0
    3fe0:	c9 01       	movw	r24, r18
    3fe2:	88 0f       	add	r24, r24
    3fe4:	99 1f       	adc	r25, r25
    3fe6:	88 0f       	add	r24, r24
    3fe8:	99 1f       	adc	r25, r25
    3fea:	88 0f       	add	r24, r24
    3fec:	99 1f       	adc	r25, r25
    3fee:	82 0f       	add	r24, r18
    3ff0:	93 1f       	adc	r25, r19
    3ff2:	8a 54       	subi	r24, 0x4A	; 74
    3ff4:	9a 4f       	sbci	r25, 0xFA	; 250
    3ff6:	9a 83       	std	Y+2, r25	; 0x02
    3ff8:	89 83       	std	Y+1, r24	; 0x01
    3ffa:	e9 81       	ldd	r30, Y+1	; 0x01
    3ffc:	fa 81       	ldd	r31, Y+2	; 0x02
    3ffe:	01 80       	ldd	r0, Z+1	; 0x01
    4000:	f2 81       	ldd	r31, Z+2	; 0x02
    4002:	e0 2d       	mov	r30, r0
    4004:	82 81       	ldd	r24, Z+2	; 0x02
    4006:	93 81       	ldd	r25, Z+3	; 0x03
    4008:	e9 81       	ldd	r30, Y+1	; 0x01
    400a:	fa 81       	ldd	r31, Y+2	; 0x02
    400c:	92 83       	std	Z+2, r25	; 0x02
    400e:	81 83       	std	Z+1, r24	; 0x01
    4010:	e9 81       	ldd	r30, Y+1	; 0x01
    4012:	fa 81       	ldd	r31, Y+2	; 0x02
    4014:	21 81       	ldd	r18, Z+1	; 0x01
    4016:	32 81       	ldd	r19, Z+2	; 0x02
    4018:	89 81       	ldd	r24, Y+1	; 0x01
    401a:	9a 81       	ldd	r25, Y+2	; 0x02
    401c:	03 96       	adiw	r24, 0x03	; 3
    401e:	28 17       	cp	r18, r24
    4020:	39 07       	cpc	r19, r25
    4022:	59 f4       	brne	.+22     	; 0x403a <vTaskSwitchContext+0xac>
    4024:	e9 81       	ldd	r30, Y+1	; 0x01
    4026:	fa 81       	ldd	r31, Y+2	; 0x02
    4028:	01 80       	ldd	r0, Z+1	; 0x01
    402a:	f2 81       	ldd	r31, Z+2	; 0x02
    402c:	e0 2d       	mov	r30, r0
    402e:	82 81       	ldd	r24, Z+2	; 0x02
    4030:	93 81       	ldd	r25, Z+3	; 0x03
    4032:	e9 81       	ldd	r30, Y+1	; 0x01
    4034:	fa 81       	ldd	r31, Y+2	; 0x02
    4036:	92 83       	std	Z+2, r25	; 0x02
    4038:	81 83       	std	Z+1, r24	; 0x01
    403a:	e9 81       	ldd	r30, Y+1	; 0x01
    403c:	fa 81       	ldd	r31, Y+2	; 0x02
    403e:	01 80       	ldd	r0, Z+1	; 0x01
    4040:	f2 81       	ldd	r31, Z+2	; 0x02
    4042:	e0 2d       	mov	r30, r0
    4044:	86 81       	ldd	r24, Z+6	; 0x06
    4046:	97 81       	ldd	r25, Z+7	; 0x07
    4048:	90 93 a9 05 	sts	0x05A9, r25
    404c:	80 93 a8 05 	sts	0x05A8, r24
	
		traceTASK_SWITCHED_IN();
		vWriteTraceToBuffer();
	}
}
    4050:	0f 90       	pop	r0
    4052:	0f 90       	pop	r0
    4054:	cf 91       	pop	r28
    4056:	df 91       	pop	r29
    4058:	08 95       	ret

0000405a <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    405a:	df 93       	push	r29
    405c:	cf 93       	push	r28
    405e:	00 d0       	rcall	.+0      	; 0x4060 <vTaskPlaceOnEventList+0x6>
    4060:	00 d0       	rcall	.+0      	; 0x4062 <vTaskPlaceOnEventList+0x8>
    4062:	00 d0       	rcall	.+0      	; 0x4064 <vTaskPlaceOnEventList+0xa>
    4064:	cd b7       	in	r28, 0x3d	; 61
    4066:	de b7       	in	r29, 0x3e	; 62
    4068:	9c 83       	std	Y+4, r25	; 0x04
    406a:	8b 83       	std	Y+3, r24	; 0x03
    406c:	7e 83       	std	Y+6, r23	; 0x06
    406e:	6d 83       	std	Y+5, r22	; 0x05
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    4070:	4b 81       	ldd	r20, Y+3	; 0x03
    4072:	5c 81       	ldd	r21, Y+4	; 0x04
    4074:	80 91 a8 05 	lds	r24, 0x05A8
    4078:	90 91 a9 05 	lds	r25, 0x05A9
    407c:	9c 01       	movw	r18, r24
    407e:	24 5f       	subi	r18, 0xF4	; 244
    4080:	3f 4f       	sbci	r19, 0xFF	; 255
    4082:	ca 01       	movw	r24, r20
    4084:	b9 01       	movw	r22, r18
    4086:	0e 94 8f 13 	call	0x271e	; 0x271e <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    408a:	80 91 a8 05 	lds	r24, 0x05A8
    408e:	90 91 a9 05 	lds	r25, 0x05A9
    4092:	02 96       	adiw	r24, 0x02	; 2
    4094:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <vListRemove>
	}
	#else
	{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    4098:	20 91 ac 05 	lds	r18, 0x05AC
    409c:	30 91 ad 05 	lds	r19, 0x05AD
    40a0:	8d 81       	ldd	r24, Y+5	; 0x05
    40a2:	9e 81       	ldd	r25, Y+6	; 0x06
    40a4:	82 0f       	add	r24, r18
    40a6:	93 1f       	adc	r25, r19
    40a8:	9a 83       	std	Y+2, r25	; 0x02
    40aa:	89 83       	std	Y+1, r24	; 0x01
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    40ac:	89 81       	ldd	r24, Y+1	; 0x01
    40ae:	9a 81       	ldd	r25, Y+2	; 0x02
    40b0:	0e 94 27 22 	call	0x444e	; 0x444e <prvAddCurrentTaskToDelayedList>
	}
	#endif
}
    40b4:	26 96       	adiw	r28, 0x06	; 6
    40b6:	0f b6       	in	r0, 0x3f	; 63
    40b8:	f8 94       	cli
    40ba:	de bf       	out	0x3e, r29	; 62
    40bc:	0f be       	out	0x3f, r0	; 63
    40be:	cd bf       	out	0x3d, r28	; 61
    40c0:	cf 91       	pop	r28
    40c2:	df 91       	pop	r29
    40c4:	08 95       	ret

000040c6 <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    40c6:	df 93       	push	r29
    40c8:	cf 93       	push	r28
    40ca:	00 d0       	rcall	.+0      	; 0x40cc <xTaskRemoveFromEventList+0x6>
    40cc:	00 d0       	rcall	.+0      	; 0x40ce <xTaskRemoveFromEventList+0x8>
    40ce:	0f 92       	push	r0
    40d0:	cd b7       	in	r28, 0x3d	; 61
    40d2:	de b7       	in	r29, 0x3e	; 62
    40d4:	9d 83       	std	Y+5, r25	; 0x05
    40d6:	8c 83       	std	Y+4, r24	; 0x04
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    40d8:	ec 81       	ldd	r30, Y+4	; 0x04
    40da:	fd 81       	ldd	r31, Y+5	; 0x05
    40dc:	05 80       	ldd	r0, Z+5	; 0x05
    40de:	f6 81       	ldd	r31, Z+6	; 0x06
    40e0:	e0 2d       	mov	r30, r0
    40e2:	86 81       	ldd	r24, Z+6	; 0x06
    40e4:	97 81       	ldd	r25, Z+7	; 0x07
    40e6:	9b 83       	std	Y+3, r25	; 0x03
    40e8:	8a 83       	std	Y+2, r24	; 0x02
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
    40ea:	8a 81       	ldd	r24, Y+2	; 0x02
    40ec:	9b 81       	ldd	r25, Y+3	; 0x03
    40ee:	0c 96       	adiw	r24, 0x0c	; 12
    40f0:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    40f4:	80 91 b1 05 	lds	r24, 0x05B1
    40f8:	88 23       	and	r24, r24
    40fa:	61 f5       	brne	.+88     	; 0x4154 <xTaskRemoveFromEventList+0x8e>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    40fc:	8a 81       	ldd	r24, Y+2	; 0x02
    40fe:	9b 81       	ldd	r25, Y+3	; 0x03
    4100:	02 96       	adiw	r24, 0x02	; 2
    4102:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    4106:	ea 81       	ldd	r30, Y+2	; 0x02
    4108:	fb 81       	ldd	r31, Y+3	; 0x03
    410a:	96 89       	ldd	r25, Z+22	; 0x16
    410c:	80 91 af 05 	lds	r24, 0x05AF
    4110:	89 17       	cp	r24, r25
    4112:	28 f4       	brcc	.+10     	; 0x411e <xTaskRemoveFromEventList+0x58>
    4114:	ea 81       	ldd	r30, Y+2	; 0x02
    4116:	fb 81       	ldd	r31, Y+3	; 0x03
    4118:	86 89       	ldd	r24, Z+22	; 0x16
    411a:	80 93 af 05 	sts	0x05AF, r24
    411e:	ea 81       	ldd	r30, Y+2	; 0x02
    4120:	fb 81       	ldd	r31, Y+3	; 0x03
    4122:	86 89       	ldd	r24, Z+22	; 0x16
    4124:	28 2f       	mov	r18, r24
    4126:	30 e0       	ldi	r19, 0x00	; 0
    4128:	c9 01       	movw	r24, r18
    412a:	88 0f       	add	r24, r24
    412c:	99 1f       	adc	r25, r25
    412e:	88 0f       	add	r24, r24
    4130:	99 1f       	adc	r25, r25
    4132:	88 0f       	add	r24, r24
    4134:	99 1f       	adc	r25, r25
    4136:	82 0f       	add	r24, r18
    4138:	93 1f       	adc	r25, r19
    413a:	ac 01       	movw	r20, r24
    413c:	4a 54       	subi	r20, 0x4A	; 74
    413e:	5a 4f       	sbci	r21, 0xFA	; 250
    4140:	8a 81       	ldd	r24, Y+2	; 0x02
    4142:	9b 81       	ldd	r25, Y+3	; 0x03
    4144:	9c 01       	movw	r18, r24
    4146:	2e 5f       	subi	r18, 0xFE	; 254
    4148:	3f 4f       	sbci	r19, 0xFF	; 255
    414a:	ca 01       	movw	r24, r20
    414c:	b9 01       	movw	r22, r18
    414e:	0e 94 43 13 	call	0x2686	; 0x2686 <vListInsertEnd>
    4152:	0a c0       	rjmp	.+20     	; 0x4168 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    4154:	8a 81       	ldd	r24, Y+2	; 0x02
    4156:	9b 81       	ldd	r25, Y+3	; 0x03
    4158:	9c 01       	movw	r18, r24
    415a:	24 5f       	subi	r18, 0xF4	; 244
    415c:	3f 4f       	sbci	r19, 0xFF	; 255
    415e:	80 ef       	ldi	r24, 0xF0	; 240
    4160:	95 e0       	ldi	r25, 0x05	; 5
    4162:	b9 01       	movw	r22, r18
    4164:	0e 94 43 13 	call	0x2686	; 0x2686 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    4168:	ea 81       	ldd	r30, Y+2	; 0x02
    416a:	fb 81       	ldd	r31, Y+3	; 0x03
    416c:	96 89       	ldd	r25, Z+22	; 0x16
    416e:	e0 91 a8 05 	lds	r30, 0x05A8
    4172:	f0 91 a9 05 	lds	r31, 0x05A9
    4176:	86 89       	ldd	r24, Z+22	; 0x16
    4178:	98 17       	cp	r25, r24
    417a:	18 f0       	brcs	.+6      	; 0x4182 <xTaskRemoveFromEventList+0xbc>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
    417c:	81 e0       	ldi	r24, 0x01	; 1
    417e:	89 83       	std	Y+1, r24	; 0x01
    4180:	01 c0       	rjmp	.+2      	; 0x4184 <xTaskRemoveFromEventList+0xbe>
	}
	else
	{
		xReturn = pdFALSE;
    4182:	19 82       	std	Y+1, r1	; 0x01
	}

	return xReturn;
    4184:	89 81       	ldd	r24, Y+1	; 0x01
}
    4186:	0f 90       	pop	r0
    4188:	0f 90       	pop	r0
    418a:	0f 90       	pop	r0
    418c:	0f 90       	pop	r0
    418e:	0f 90       	pop	r0
    4190:	cf 91       	pop	r28
    4192:	df 91       	pop	r29
    4194:	08 95       	ret

00004196 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
    4196:	df 93       	push	r29
    4198:	cf 93       	push	r28
    419a:	00 d0       	rcall	.+0      	; 0x419c <vTaskSetTimeOutState+0x6>
    419c:	cd b7       	in	r28, 0x3d	; 61
    419e:	de b7       	in	r29, 0x3e	; 62
    41a0:	9a 83       	std	Y+2, r25	; 0x02
    41a2:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    41a4:	80 91 b4 05 	lds	r24, 0x05B4
    41a8:	e9 81       	ldd	r30, Y+1	; 0x01
    41aa:	fa 81       	ldd	r31, Y+2	; 0x02
    41ac:	80 83       	st	Z, r24
	pxTimeOut->xTimeOnEntering = xTickCount;
    41ae:	80 91 ac 05 	lds	r24, 0x05AC
    41b2:	90 91 ad 05 	lds	r25, 0x05AD
    41b6:	e9 81       	ldd	r30, Y+1	; 0x01
    41b8:	fa 81       	ldd	r31, Y+2	; 0x02
    41ba:	92 83       	std	Z+2, r25	; 0x02
    41bc:	81 83       	std	Z+1, r24	; 0x01
}
    41be:	0f 90       	pop	r0
    41c0:	0f 90       	pop	r0
    41c2:	cf 91       	pop	r28
    41c4:	df 91       	pop	r29
    41c6:	08 95       	ret

000041c8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    41c8:	df 93       	push	r29
    41ca:	cf 93       	push	r28
    41cc:	00 d0       	rcall	.+0      	; 0x41ce <xTaskCheckForTimeOut+0x6>
    41ce:	00 d0       	rcall	.+0      	; 0x41d0 <xTaskCheckForTimeOut+0x8>
    41d0:	0f 92       	push	r0
    41d2:	cd b7       	in	r28, 0x3d	; 61
    41d4:	de b7       	in	r29, 0x3e	; 62
    41d6:	9b 83       	std	Y+3, r25	; 0x03
    41d8:	8a 83       	std	Y+2, r24	; 0x02
    41da:	7d 83       	std	Y+5, r23	; 0x05
    41dc:	6c 83       	std	Y+4, r22	; 0x04
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    41de:	0f b6       	in	r0, 0x3f	; 63
    41e0:	f8 94       	cli
    41e2:	0f 92       	push	r0
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    41e4:	ea 81       	ldd	r30, Y+2	; 0x02
    41e6:	fb 81       	ldd	r31, Y+3	; 0x03
    41e8:	90 81       	ld	r25, Z
    41ea:	80 91 b4 05 	lds	r24, 0x05B4
    41ee:	98 17       	cp	r25, r24
    41f0:	71 f0       	breq	.+28     	; 0x420e <xTaskCheckForTimeOut+0x46>
    41f2:	ea 81       	ldd	r30, Y+2	; 0x02
    41f4:	fb 81       	ldd	r31, Y+3	; 0x03
    41f6:	21 81       	ldd	r18, Z+1	; 0x01
    41f8:	32 81       	ldd	r19, Z+2	; 0x02
    41fa:	80 91 ac 05 	lds	r24, 0x05AC
    41fe:	90 91 ad 05 	lds	r25, 0x05AD
    4202:	82 17       	cp	r24, r18
    4204:	93 07       	cpc	r25, r19
    4206:	18 f0       	brcs	.+6      	; 0x420e <xTaskCheckForTimeOut+0x46>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    4208:	81 e0       	ldi	r24, 0x01	; 1
    420a:	89 83       	std	Y+1, r24	; 0x01
    420c:	2f c0       	rjmp	.+94     	; 0x426c <xTaskCheckForTimeOut+0xa4>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    420e:	20 91 ac 05 	lds	r18, 0x05AC
    4212:	30 91 ad 05 	lds	r19, 0x05AD
    4216:	ea 81       	ldd	r30, Y+2	; 0x02
    4218:	fb 81       	ldd	r31, Y+3	; 0x03
    421a:	81 81       	ldd	r24, Z+1	; 0x01
    421c:	92 81       	ldd	r25, Z+2	; 0x02
    421e:	28 1b       	sub	r18, r24
    4220:	39 0b       	sbc	r19, r25
    4222:	ec 81       	ldd	r30, Y+4	; 0x04
    4224:	fd 81       	ldd	r31, Y+5	; 0x05
    4226:	80 81       	ld	r24, Z
    4228:	91 81       	ldd	r25, Z+1	; 0x01
    422a:	28 17       	cp	r18, r24
    422c:	39 07       	cpc	r19, r25
    422e:	e0 f4       	brcc	.+56     	; 0x4268 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    4230:	ec 81       	ldd	r30, Y+4	; 0x04
    4232:	fd 81       	ldd	r31, Y+5	; 0x05
    4234:	40 81       	ld	r20, Z
    4236:	51 81       	ldd	r21, Z+1	; 0x01
    4238:	ea 81       	ldd	r30, Y+2	; 0x02
    423a:	fb 81       	ldd	r31, Y+3	; 0x03
    423c:	21 81       	ldd	r18, Z+1	; 0x01
    423e:	32 81       	ldd	r19, Z+2	; 0x02
    4240:	80 91 ac 05 	lds	r24, 0x05AC
    4244:	90 91 ad 05 	lds	r25, 0x05AD
    4248:	b9 01       	movw	r22, r18
    424a:	68 1b       	sub	r22, r24
    424c:	79 0b       	sbc	r23, r25
    424e:	cb 01       	movw	r24, r22
    4250:	84 0f       	add	r24, r20
    4252:	95 1f       	adc	r25, r21
    4254:	ec 81       	ldd	r30, Y+4	; 0x04
    4256:	fd 81       	ldd	r31, Y+5	; 0x05
    4258:	91 83       	std	Z+1, r25	; 0x01
    425a:	80 83       	st	Z, r24
			vTaskSetTimeOutState( pxTimeOut );
    425c:	8a 81       	ldd	r24, Y+2	; 0x02
    425e:	9b 81       	ldd	r25, Y+3	; 0x03
    4260:	0e 94 cb 20 	call	0x4196	; 0x4196 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    4264:	19 82       	std	Y+1, r1	; 0x01
    4266:	02 c0       	rjmp	.+4      	; 0x426c <xTaskCheckForTimeOut+0xa4>
		}
		else
		{
			xReturn = pdTRUE;
    4268:	81 e0       	ldi	r24, 0x01	; 1
    426a:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	taskEXIT_CRITICAL();
    426c:	0f 90       	pop	r0
    426e:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    4270:	89 81       	ldd	r24, Y+1	; 0x01
}
    4272:	0f 90       	pop	r0
    4274:	0f 90       	pop	r0
    4276:	0f 90       	pop	r0
    4278:	0f 90       	pop	r0
    427a:	0f 90       	pop	r0
    427c:	cf 91       	pop	r28
    427e:	df 91       	pop	r29
    4280:	08 95       	ret

00004282 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    4282:	df 93       	push	r29
    4284:	cf 93       	push	r28
    4286:	cd b7       	in	r28, 0x3d	; 61
    4288:	de b7       	in	r29, 0x3e	; 62
	xMissedYield = pdTRUE;
    428a:	81 e0       	ldi	r24, 0x01	; 1
    428c:	80 93 b3 05 	sts	0x05B3, r24
}
    4290:	cf 91       	pop	r28
    4292:	df 91       	pop	r29
    4294:	08 95       	ret

00004296 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    4296:	df 93       	push	r29
    4298:	cf 93       	push	r28
    429a:	00 d0       	rcall	.+0      	; 0x429c <prvIdleTask+0x6>
    429c:	cd b7       	in	r28, 0x3d	; 61
    429e:	de b7       	in	r29, 0x3e	; 62
    42a0:	9a 83       	std	Y+2, r25	; 0x02
    42a2:	89 83       	std	Y+1, r24	; 0x01
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
    42a4:	0e 94 e9 21 	call	0x43d2	; 0x43d2 <prvCheckTasksWaitingTermination>
    42a8:	fd cf       	rjmp	.-6      	; 0x42a4 <prvIdleTask+0xe>

000042aa <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
    42aa:	0f 93       	push	r16
    42ac:	1f 93       	push	r17
    42ae:	df 93       	push	r29
    42b0:	cf 93       	push	r28
    42b2:	cd b7       	in	r28, 0x3d	; 61
    42b4:	de b7       	in	r29, 0x3e	; 62
    42b6:	29 97       	sbiw	r28, 0x09	; 9
    42b8:	0f b6       	in	r0, 0x3f	; 63
    42ba:	f8 94       	cli
    42bc:	de bf       	out	0x3e, r29	; 62
    42be:	0f be       	out	0x3f, r0	; 63
    42c0:	cd bf       	out	0x3d, r28	; 61
    42c2:	9a 83       	std	Y+2, r25	; 0x02
    42c4:	89 83       	std	Y+1, r24	; 0x01
    42c6:	7c 83       	std	Y+4, r23	; 0x04
    42c8:	6b 83       	std	Y+3, r22	; 0x03
    42ca:	4d 83       	std	Y+5, r20	; 0x05
    42cc:	3f 83       	std	Y+7, r19	; 0x07
    42ce:	2e 83       	std	Y+6, r18	; 0x06
    42d0:	19 87       	std	Y+9, r17	; 0x09
    42d2:	08 87       	std	Y+8, r16	; 0x08
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
    42d4:	89 81       	ldd	r24, Y+1	; 0x01
    42d6:	9a 81       	ldd	r25, Y+2	; 0x02
    42d8:	49 96       	adiw	r24, 0x19	; 25
    42da:	2b 81       	ldd	r18, Y+3	; 0x03
    42dc:	3c 81       	ldd	r19, Y+4	; 0x04
    42de:	b9 01       	movw	r22, r18
    42e0:	48 e0       	ldi	r20, 0x08	; 8
    42e2:	50 e0       	ldi	r21, 0x00	; 0
    42e4:	0e 94 5a 23 	call	0x46b4	; 0x46b4 <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
    42e8:	e9 81       	ldd	r30, Y+1	; 0x01
    42ea:	fa 81       	ldd	r31, Y+2	; 0x02
    42ec:	10 a2       	std	Z+32, r1	; 0x20

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
    42ee:	8d 81       	ldd	r24, Y+5	; 0x05
    42f0:	84 30       	cpi	r24, 0x04	; 4
    42f2:	10 f0       	brcs	.+4      	; 0x42f8 <prvInitialiseTCBVariables+0x4e>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    42f4:	83 e0       	ldi	r24, 0x03	; 3
    42f6:	8d 83       	std	Y+5, r24	; 0x05
	}

	pxTCB->uxPriority = uxPriority;
    42f8:	e9 81       	ldd	r30, Y+1	; 0x01
    42fa:	fa 81       	ldd	r31, Y+2	; 0x02
    42fc:	8d 81       	ldd	r24, Y+5	; 0x05
    42fe:	86 8b       	std	Z+22, r24	; 0x16
	{
		pxTCB->uxBasePriority = uxPriority;
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    4300:	89 81       	ldd	r24, Y+1	; 0x01
    4302:	9a 81       	ldd	r25, Y+2	; 0x02
    4304:	02 96       	adiw	r24, 0x02	; 2
    4306:	0e 94 33 13 	call	0x2666	; 0x2666 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    430a:	89 81       	ldd	r24, Y+1	; 0x01
    430c:	9a 81       	ldd	r25, Y+2	; 0x02
    430e:	0c 96       	adiw	r24, 0x0c	; 12
    4310:	0e 94 33 13 	call	0x2666	; 0x2666 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    4314:	e9 81       	ldd	r30, Y+1	; 0x01
    4316:	fa 81       	ldd	r31, Y+2	; 0x02
    4318:	89 81       	ldd	r24, Y+1	; 0x01
    431a:	9a 81       	ldd	r25, Y+2	; 0x02
    431c:	91 87       	std	Z+9, r25	; 0x09
    431e:	80 87       	std	Z+8, r24	; 0x08

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    4320:	8d 81       	ldd	r24, Y+5	; 0x05
    4322:	28 2f       	mov	r18, r24
    4324:	30 e0       	ldi	r19, 0x00	; 0
    4326:	84 e0       	ldi	r24, 0x04	; 4
    4328:	90 e0       	ldi	r25, 0x00	; 0
    432a:	82 1b       	sub	r24, r18
    432c:	93 0b       	sbc	r25, r19
    432e:	e9 81       	ldd	r30, Y+1	; 0x01
    4330:	fa 81       	ldd	r31, Y+2	; 0x02
    4332:	95 87       	std	Z+13, r25	; 0x0d
    4334:	84 87       	std	Z+12, r24	; 0x0c
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    4336:	e9 81       	ldd	r30, Y+1	; 0x01
    4338:	fa 81       	ldd	r31, Y+2	; 0x02
    433a:	89 81       	ldd	r24, Y+1	; 0x01
    433c:	9a 81       	ldd	r25, Y+2	; 0x02
    433e:	93 8b       	std	Z+19, r25	; 0x13
    4340:	82 8b       	std	Z+18, r24	; 0x12
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
    4342:	29 96       	adiw	r28, 0x09	; 9
    4344:	0f b6       	in	r0, 0x3f	; 63
    4346:	f8 94       	cli
    4348:	de bf       	out	0x3e, r29	; 62
    434a:	0f be       	out	0x3f, r0	; 63
    434c:	cd bf       	out	0x3d, r28	; 61
    434e:	cf 91       	pop	r28
    4350:	df 91       	pop	r29
    4352:	1f 91       	pop	r17
    4354:	0f 91       	pop	r16
    4356:	08 95       	ret

00004358 <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
    4358:	df 93       	push	r29
    435a:	cf 93       	push	r28
    435c:	0f 92       	push	r0
    435e:	cd b7       	in	r28, 0x3d	; 61
    4360:	de b7       	in	r29, 0x3e	; 62
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    4362:	19 82       	std	Y+1, r1	; 0x01
    4364:	13 c0       	rjmp	.+38     	; 0x438c <prvInitialiseTaskLists+0x34>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
    4366:	89 81       	ldd	r24, Y+1	; 0x01
    4368:	28 2f       	mov	r18, r24
    436a:	30 e0       	ldi	r19, 0x00	; 0
    436c:	c9 01       	movw	r24, r18
    436e:	88 0f       	add	r24, r24
    4370:	99 1f       	adc	r25, r25
    4372:	88 0f       	add	r24, r24
    4374:	99 1f       	adc	r25, r25
    4376:	88 0f       	add	r24, r24
    4378:	99 1f       	adc	r25, r25
    437a:	82 0f       	add	r24, r18
    437c:	93 1f       	adc	r25, r19
    437e:	8a 54       	subi	r24, 0x4A	; 74
    4380:	9a 4f       	sbci	r25, 0xFA	; 250
    4382:	0e 94 09 13 	call	0x2612	; 0x2612 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    4386:	89 81       	ldd	r24, Y+1	; 0x01
    4388:	8f 5f       	subi	r24, 0xFF	; 255
    438a:	89 83       	std	Y+1, r24	; 0x01
    438c:	89 81       	ldd	r24, Y+1	; 0x01
    438e:	84 30       	cpi	r24, 0x04	; 4
    4390:	50 f3       	brcs	.-44     	; 0x4366 <prvInitialiseTaskLists+0xe>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
    4392:	8a ed       	ldi	r24, 0xDA	; 218
    4394:	95 e0       	ldi	r25, 0x05	; 5
    4396:	0e 94 09 13 	call	0x2612	; 0x2612 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
    439a:	83 ee       	ldi	r24, 0xE3	; 227
    439c:	95 e0       	ldi	r25, 0x05	; 5
    439e:	0e 94 09 13 	call	0x2612	; 0x2612 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
    43a2:	80 ef       	ldi	r24, 0xF0	; 240
    43a4:	95 e0       	ldi	r25, 0x05	; 5
    43a6:	0e 94 09 13 	call	0x2612	; 0x2612 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
    43aa:	89 ef       	ldi	r24, 0xF9	; 249
    43ac:	95 e0       	ldi	r25, 0x05	; 5
    43ae:	0e 94 09 13 	call	0x2612	; 0x2612 <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    43b2:	8a ed       	ldi	r24, 0xDA	; 218
    43b4:	95 e0       	ldi	r25, 0x05	; 5
    43b6:	90 93 ed 05 	sts	0x05ED, r25
    43ba:	80 93 ec 05 	sts	0x05EC, r24
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    43be:	83 ee       	ldi	r24, 0xE3	; 227
    43c0:	95 e0       	ldi	r25, 0x05	; 5
    43c2:	90 93 ef 05 	sts	0x05EF, r25
    43c6:	80 93 ee 05 	sts	0x05EE, r24
}
    43ca:	0f 90       	pop	r0
    43cc:	cf 91       	pop	r28
    43ce:	df 91       	pop	r29
    43d0:	08 95       	ret

000043d2 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    43d2:	df 93       	push	r29
    43d4:	cf 93       	push	r28
    43d6:	00 d0       	rcall	.+0      	; 0x43d8 <prvCheckTasksWaitingTermination+0x6>
    43d8:	0f 92       	push	r0
    43da:	cd b7       	in	r28, 0x3d	; 61
    43dc:	de b7       	in	r29, 0x3e	; 62
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    43de:	80 91 aa 05 	lds	r24, 0x05AA
    43e2:	88 23       	and	r24, r24
    43e4:	71 f1       	breq	.+92     	; 0x4442 <prvCheckTasksWaitingTermination+0x70>
		{
			vTaskSuspendAll();
    43e6:	0e 94 27 1e 	call	0x3c4e	; 0x3c4e <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    43ea:	80 91 f9 05 	lds	r24, 0x05F9
    43ee:	1b 82       	std	Y+3, r1	; 0x03
    43f0:	88 23       	and	r24, r24
    43f2:	11 f4       	brne	.+4      	; 0x43f8 <prvCheckTasksWaitingTermination+0x26>
    43f4:	81 e0       	ldi	r24, 0x01	; 1
    43f6:	8b 83       	std	Y+3, r24	; 0x03
			xTaskResumeAll();
    43f8:	0e 94 33 1e 	call	0x3c66	; 0x3c66 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    43fc:	8b 81       	ldd	r24, Y+3	; 0x03
    43fe:	88 23       	and	r24, r24
    4400:	01 f5       	brne	.+64     	; 0x4442 <prvCheckTasksWaitingTermination+0x70>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
    4402:	0f b6       	in	r0, 0x3f	; 63
    4404:	f8 94       	cli
    4406:	0f 92       	push	r0
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    4408:	e0 91 fe 05 	lds	r30, 0x05FE
    440c:	f0 91 ff 05 	lds	r31, 0x05FF
    4410:	86 81       	ldd	r24, Z+6	; 0x06
    4412:	97 81       	ldd	r25, Z+7	; 0x07
    4414:	9a 83       	std	Y+2, r25	; 0x02
    4416:	89 83       	std	Y+1, r24	; 0x01
					vListRemove( &( pxTCB->xGenericListItem ) );
    4418:	89 81       	ldd	r24, Y+1	; 0x01
    441a:	9a 81       	ldd	r25, Y+2	; 0x02
    441c:	02 96       	adiw	r24, 0x02	; 2
    441e:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <vListRemove>
					--uxCurrentNumberOfTasks;
    4422:	80 91 ab 05 	lds	r24, 0x05AB
    4426:	81 50       	subi	r24, 0x01	; 1
    4428:	80 93 ab 05 	sts	0x05AB, r24
					--uxTasksDeleted;
    442c:	80 91 aa 05 	lds	r24, 0x05AA
    4430:	81 50       	subi	r24, 0x01	; 1
    4432:	80 93 aa 05 	sts	0x05AA, r24
				}
				taskEXIT_CRITICAL();
    4436:	0f 90       	pop	r0
    4438:	0f be       	out	0x3f, r0	; 63

				prvDeleteTCB( pxTCB );
    443a:	89 81       	ldd	r24, Y+1	; 0x01
    443c:	9a 81       	ldd	r25, Y+2	; 0x02
    443e:	0e 94 c0 22 	call	0x4580	; 0x4580 <prvDeleteTCB>
			}
		}
	}
	#endif
}
    4442:	0f 90       	pop	r0
    4444:	0f 90       	pop	r0
    4446:	0f 90       	pop	r0
    4448:	cf 91       	pop	r28
    444a:	df 91       	pop	r29
    444c:	08 95       	ret

0000444e <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
    444e:	df 93       	push	r29
    4450:	cf 93       	push	r28
    4452:	00 d0       	rcall	.+0      	; 0x4454 <prvAddCurrentTaskToDelayedList+0x6>
    4454:	cd b7       	in	r28, 0x3d	; 61
    4456:	de b7       	in	r29, 0x3e	; 62
    4458:	9a 83       	std	Y+2, r25	; 0x02
    445a:	89 83       	std	Y+1, r24	; 0x01
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    445c:	e0 91 a8 05 	lds	r30, 0x05A8
    4460:	f0 91 a9 05 	lds	r31, 0x05A9
    4464:	89 81       	ldd	r24, Y+1	; 0x01
    4466:	9a 81       	ldd	r25, Y+2	; 0x02
    4468:	93 83       	std	Z+3, r25	; 0x03
    446a:	82 83       	std	Z+2, r24	; 0x02

	if( xTimeToWake < xTickCount )
    446c:	20 91 ac 05 	lds	r18, 0x05AC
    4470:	30 91 ad 05 	lds	r19, 0x05AD
    4474:	89 81       	ldd	r24, Y+1	; 0x01
    4476:	9a 81       	ldd	r25, Y+2	; 0x02
    4478:	82 17       	cp	r24, r18
    447a:	93 07       	cpc	r25, r19
    447c:	70 f4       	brcc	.+28     	; 0x449a <prvAddCurrentTaskToDelayedList+0x4c>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    447e:	80 91 ee 05 	lds	r24, 0x05EE
    4482:	90 91 ef 05 	lds	r25, 0x05EF
    4486:	20 91 a8 05 	lds	r18, 0x05A8
    448a:	30 91 a9 05 	lds	r19, 0x05A9
    448e:	2e 5f       	subi	r18, 0xFE	; 254
    4490:	3f 4f       	sbci	r19, 0xFF	; 255
    4492:	b9 01       	movw	r22, r18
    4494:	0e 94 8f 13 	call	0x271e	; 0x271e <vListInsert>
    4498:	1e c0       	rjmp	.+60     	; 0x44d6 <prvAddCurrentTaskToDelayedList+0x88>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    449a:	40 91 ec 05 	lds	r20, 0x05EC
    449e:	50 91 ed 05 	lds	r21, 0x05ED
    44a2:	80 91 a8 05 	lds	r24, 0x05A8
    44a6:	90 91 a9 05 	lds	r25, 0x05A9
    44aa:	9c 01       	movw	r18, r24
    44ac:	2e 5f       	subi	r18, 0xFE	; 254
    44ae:	3f 4f       	sbci	r19, 0xFF	; 255
    44b0:	ca 01       	movw	r24, r20
    44b2:	b9 01       	movw	r22, r18
    44b4:	0e 94 8f 13 	call	0x271e	; 0x271e <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    44b8:	20 91 7f 01 	lds	r18, 0x017F
    44bc:	30 91 80 01 	lds	r19, 0x0180
    44c0:	89 81       	ldd	r24, Y+1	; 0x01
    44c2:	9a 81       	ldd	r25, Y+2	; 0x02
    44c4:	82 17       	cp	r24, r18
    44c6:	93 07       	cpc	r25, r19
    44c8:	30 f4       	brcc	.+12     	; 0x44d6 <prvAddCurrentTaskToDelayedList+0x88>
		{
			xNextTaskUnblockTime = xTimeToWake;
    44ca:	89 81       	ldd	r24, Y+1	; 0x01
    44cc:	9a 81       	ldd	r25, Y+2	; 0x02
    44ce:	90 93 80 01 	sts	0x0180, r25
    44d2:	80 93 7f 01 	sts	0x017F, r24
		}
	}
}
    44d6:	0f 90       	pop	r0
    44d8:	0f 90       	pop	r0
    44da:	cf 91       	pop	r28
    44dc:	df 91       	pop	r29
    44de:	08 95       	ret

000044e0 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
    44e0:	df 93       	push	r29
    44e2:	cf 93       	push	r28
    44e4:	cd b7       	in	r28, 0x3d	; 61
    44e6:	de b7       	in	r29, 0x3e	; 62
    44e8:	28 97       	sbiw	r28, 0x08	; 8
    44ea:	0f b6       	in	r0, 0x3f	; 63
    44ec:	f8 94       	cli
    44ee:	de bf       	out	0x3e, r29	; 62
    44f0:	0f be       	out	0x3f, r0	; 63
    44f2:	cd bf       	out	0x3d, r28	; 61
    44f4:	9c 83       	std	Y+4, r25	; 0x04
    44f6:	8b 83       	std	Y+3, r24	; 0x03
    44f8:	7e 83       	std	Y+6, r23	; 0x06
    44fa:	6d 83       	std	Y+5, r22	; 0x05
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
    44fc:	81 e2       	ldi	r24, 0x21	; 33
    44fe:	90 e0       	ldi	r25, 0x00	; 0
    4500:	0e 94 9d 12 	call	0x253a	; 0x253a <pvPortMalloc>
    4504:	9a 83       	std	Y+2, r25	; 0x02
    4506:	89 83       	std	Y+1, r24	; 0x01

	if( pxNewTCB != NULL )
    4508:	89 81       	ldd	r24, Y+1	; 0x01
    450a:	9a 81       	ldd	r25, Y+2	; 0x02
    450c:	00 97       	sbiw	r24, 0x00	; 0
    450e:	69 f1       	breq	.+90     	; 0x456a <prvAllocateTCBAndStack+0x8a>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
    4510:	8d 81       	ldd	r24, Y+5	; 0x05
    4512:	9e 81       	ldd	r25, Y+6	; 0x06
    4514:	00 97       	sbiw	r24, 0x00	; 0
    4516:	39 f4       	brne	.+14     	; 0x4526 <prvAllocateTCBAndStack+0x46>
    4518:	8b 81       	ldd	r24, Y+3	; 0x03
    451a:	9c 81       	ldd	r25, Y+4	; 0x04
    451c:	0e 94 9d 12 	call	0x253a	; 0x253a <pvPortMalloc>
    4520:	98 87       	std	Y+8, r25	; 0x08
    4522:	8f 83       	std	Y+7, r24	; 0x07
    4524:	04 c0       	rjmp	.+8      	; 0x452e <prvAllocateTCBAndStack+0x4e>
    4526:	8d 81       	ldd	r24, Y+5	; 0x05
    4528:	9e 81       	ldd	r25, Y+6	; 0x06
    452a:	98 87       	std	Y+8, r25	; 0x08
    452c:	8f 83       	std	Y+7, r24	; 0x07
    452e:	e9 81       	ldd	r30, Y+1	; 0x01
    4530:	fa 81       	ldd	r31, Y+2	; 0x02
    4532:	8f 81       	ldd	r24, Y+7	; 0x07
    4534:	98 85       	ldd	r25, Y+8	; 0x08
    4536:	90 8f       	std	Z+24, r25	; 0x18
    4538:	87 8b       	std	Z+23, r24	; 0x17

		if( pxNewTCB->pxStack == NULL )
    453a:	e9 81       	ldd	r30, Y+1	; 0x01
    453c:	fa 81       	ldd	r31, Y+2	; 0x02
    453e:	87 89       	ldd	r24, Z+23	; 0x17
    4540:	90 8d       	ldd	r25, Z+24	; 0x18
    4542:	00 97       	sbiw	r24, 0x00	; 0
    4544:	39 f4       	brne	.+14     	; 0x4554 <prvAllocateTCBAndStack+0x74>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    4546:	89 81       	ldd	r24, Y+1	; 0x01
    4548:	9a 81       	ldd	r25, Y+2	; 0x02
    454a:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <vPortFree>
			pxNewTCB = NULL;
    454e:	1a 82       	std	Y+2, r1	; 0x02
    4550:	19 82       	std	Y+1, r1	; 0x01
    4552:	0b c0       	rjmp	.+22     	; 0x456a <prvAllocateTCBAndStack+0x8a>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
    4554:	e9 81       	ldd	r30, Y+1	; 0x01
    4556:	fa 81       	ldd	r31, Y+2	; 0x02
    4558:	87 89       	ldd	r24, Z+23	; 0x17
    455a:	90 8d       	ldd	r25, Z+24	; 0x18
    455c:	2b 81       	ldd	r18, Y+3	; 0x03
    455e:	3c 81       	ldd	r19, Y+4	; 0x04
    4560:	65 ea       	ldi	r22, 0xA5	; 165
    4562:	70 e0       	ldi	r23, 0x00	; 0
    4564:	a9 01       	movw	r20, r18
    4566:	0e 94 53 23 	call	0x46a6	; 0x46a6 <memset>
		}
	}

	return pxNewTCB;
    456a:	89 81       	ldd	r24, Y+1	; 0x01
    456c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    456e:	28 96       	adiw	r28, 0x08	; 8
    4570:	0f b6       	in	r0, 0x3f	; 63
    4572:	f8 94       	cli
    4574:	de bf       	out	0x3e, r29	; 62
    4576:	0f be       	out	0x3f, r0	; 63
    4578:	cd bf       	out	0x3d, r28	; 61
    457a:	cf 91       	pop	r28
    457c:	df 91       	pop	r29
    457e:	08 95       	ret

00004580 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
    4580:	df 93       	push	r29
    4582:	cf 93       	push	r28
    4584:	00 d0       	rcall	.+0      	; 0x4586 <prvDeleteTCB+0x6>
    4586:	cd b7       	in	r28, 0x3d	; 61
    4588:	de b7       	in	r29, 0x3e	; 62
    458a:	9a 83       	std	Y+2, r25	; 0x02
    458c:	89 83       	std	Y+1, r24	; 0x01
		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    458e:	e9 81       	ldd	r30, Y+1	; 0x01
    4590:	fa 81       	ldd	r31, Y+2	; 0x02
    4592:	87 89       	ldd	r24, Z+23	; 0x17
    4594:	90 8d       	ldd	r25, Z+24	; 0x18
    4596:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <vPortFree>
		vPortFree( pxTCB );
    459a:	89 81       	ldd	r24, Y+1	; 0x01
    459c:	9a 81       	ldd	r25, Y+2	; 0x02
    459e:	0e 94 e3 12 	call	0x25c6	; 0x25c6 <vPortFree>
	}
    45a2:	0f 90       	pop	r0
    45a4:	0f 90       	pop	r0
    45a6:	cf 91       	pop	r28
    45a8:	df 91       	pop	r29
    45aa:	08 95       	ret

000045ac <__divmodsi4>:
    45ac:	97 fb       	bst	r25, 7
    45ae:	09 2e       	mov	r0, r25
    45b0:	05 26       	eor	r0, r21
    45b2:	0e d0       	rcall	.+28     	; 0x45d0 <__divmodsi4_neg1>
    45b4:	57 fd       	sbrc	r21, 7
    45b6:	04 d0       	rcall	.+8      	; 0x45c0 <__divmodsi4_neg2>
    45b8:	14 d0       	rcall	.+40     	; 0x45e2 <__udivmodsi4>
    45ba:	0a d0       	rcall	.+20     	; 0x45d0 <__divmodsi4_neg1>
    45bc:	00 1c       	adc	r0, r0
    45be:	38 f4       	brcc	.+14     	; 0x45ce <__divmodsi4_exit>

000045c0 <__divmodsi4_neg2>:
    45c0:	50 95       	com	r21
    45c2:	40 95       	com	r20
    45c4:	30 95       	com	r19
    45c6:	21 95       	neg	r18
    45c8:	3f 4f       	sbci	r19, 0xFF	; 255
    45ca:	4f 4f       	sbci	r20, 0xFF	; 255
    45cc:	5f 4f       	sbci	r21, 0xFF	; 255

000045ce <__divmodsi4_exit>:
    45ce:	08 95       	ret

000045d0 <__divmodsi4_neg1>:
    45d0:	f6 f7       	brtc	.-4      	; 0x45ce <__divmodsi4_exit>
    45d2:	90 95       	com	r25
    45d4:	80 95       	com	r24
    45d6:	70 95       	com	r23
    45d8:	61 95       	neg	r22
    45da:	7f 4f       	sbci	r23, 0xFF	; 255
    45dc:	8f 4f       	sbci	r24, 0xFF	; 255
    45de:	9f 4f       	sbci	r25, 0xFF	; 255
    45e0:	08 95       	ret

000045e2 <__udivmodsi4>:
    45e2:	a1 e2       	ldi	r26, 0x21	; 33
    45e4:	1a 2e       	mov	r1, r26
    45e6:	aa 1b       	sub	r26, r26
    45e8:	bb 1b       	sub	r27, r27
    45ea:	fd 01       	movw	r30, r26
    45ec:	0d c0       	rjmp	.+26     	; 0x4608 <__udivmodsi4_ep>

000045ee <__udivmodsi4_loop>:
    45ee:	aa 1f       	adc	r26, r26
    45f0:	bb 1f       	adc	r27, r27
    45f2:	ee 1f       	adc	r30, r30
    45f4:	ff 1f       	adc	r31, r31
    45f6:	a2 17       	cp	r26, r18
    45f8:	b3 07       	cpc	r27, r19
    45fa:	e4 07       	cpc	r30, r20
    45fc:	f5 07       	cpc	r31, r21
    45fe:	20 f0       	brcs	.+8      	; 0x4608 <__udivmodsi4_ep>
    4600:	a2 1b       	sub	r26, r18
    4602:	b3 0b       	sbc	r27, r19
    4604:	e4 0b       	sbc	r30, r20
    4606:	f5 0b       	sbc	r31, r21

00004608 <__udivmodsi4_ep>:
    4608:	66 1f       	adc	r22, r22
    460a:	77 1f       	adc	r23, r23
    460c:	88 1f       	adc	r24, r24
    460e:	99 1f       	adc	r25, r25
    4610:	1a 94       	dec	r1
    4612:	69 f7       	brne	.-38     	; 0x45ee <__udivmodsi4_loop>
    4614:	60 95       	com	r22
    4616:	70 95       	com	r23
    4618:	80 95       	com	r24
    461a:	90 95       	com	r25
    461c:	9b 01       	movw	r18, r22
    461e:	ac 01       	movw	r20, r24
    4620:	bd 01       	movw	r22, r26
    4622:	cf 01       	movw	r24, r30
    4624:	08 95       	ret

00004626 <__prologue_saves__>:
    4626:	2f 92       	push	r2
    4628:	3f 92       	push	r3
    462a:	4f 92       	push	r4
    462c:	5f 92       	push	r5
    462e:	6f 92       	push	r6
    4630:	7f 92       	push	r7
    4632:	8f 92       	push	r8
    4634:	9f 92       	push	r9
    4636:	af 92       	push	r10
    4638:	bf 92       	push	r11
    463a:	cf 92       	push	r12
    463c:	df 92       	push	r13
    463e:	ef 92       	push	r14
    4640:	ff 92       	push	r15
    4642:	0f 93       	push	r16
    4644:	1f 93       	push	r17
    4646:	cf 93       	push	r28
    4648:	df 93       	push	r29
    464a:	cd b7       	in	r28, 0x3d	; 61
    464c:	de b7       	in	r29, 0x3e	; 62
    464e:	ca 1b       	sub	r28, r26
    4650:	db 0b       	sbc	r29, r27
    4652:	0f b6       	in	r0, 0x3f	; 63
    4654:	f8 94       	cli
    4656:	de bf       	out	0x3e, r29	; 62
    4658:	0f be       	out	0x3f, r0	; 63
    465a:	cd bf       	out	0x3d, r28	; 61
    465c:	09 94       	ijmp

0000465e <__epilogue_restores__>:
    465e:	2a 88       	ldd	r2, Y+18	; 0x12
    4660:	39 88       	ldd	r3, Y+17	; 0x11
    4662:	48 88       	ldd	r4, Y+16	; 0x10
    4664:	5f 84       	ldd	r5, Y+15	; 0x0f
    4666:	6e 84       	ldd	r6, Y+14	; 0x0e
    4668:	7d 84       	ldd	r7, Y+13	; 0x0d
    466a:	8c 84       	ldd	r8, Y+12	; 0x0c
    466c:	9b 84       	ldd	r9, Y+11	; 0x0b
    466e:	aa 84       	ldd	r10, Y+10	; 0x0a
    4670:	b9 84       	ldd	r11, Y+9	; 0x09
    4672:	c8 84       	ldd	r12, Y+8	; 0x08
    4674:	df 80       	ldd	r13, Y+7	; 0x07
    4676:	ee 80       	ldd	r14, Y+6	; 0x06
    4678:	fd 80       	ldd	r15, Y+5	; 0x05
    467a:	0c 81       	ldd	r16, Y+4	; 0x04
    467c:	1b 81       	ldd	r17, Y+3	; 0x03
    467e:	aa 81       	ldd	r26, Y+2	; 0x02
    4680:	b9 81       	ldd	r27, Y+1	; 0x01
    4682:	ce 0f       	add	r28, r30
    4684:	d1 1d       	adc	r29, r1
    4686:	0f b6       	in	r0, 0x3f	; 63
    4688:	f8 94       	cli
    468a:	de bf       	out	0x3e, r29	; 62
    468c:	0f be       	out	0x3f, r0	; 63
    468e:	cd bf       	out	0x3d, r28	; 61
    4690:	ed 01       	movw	r28, r26
    4692:	08 95       	ret

00004694 <memcpy>:
    4694:	fb 01       	movw	r30, r22
    4696:	dc 01       	movw	r26, r24
    4698:	02 c0       	rjmp	.+4      	; 0x469e <memcpy+0xa>
    469a:	01 90       	ld	r0, Z+
    469c:	0d 92       	st	X+, r0
    469e:	41 50       	subi	r20, 0x01	; 1
    46a0:	50 40       	sbci	r21, 0x00	; 0
    46a2:	d8 f7       	brcc	.-10     	; 0x469a <memcpy+0x6>
    46a4:	08 95       	ret

000046a6 <memset>:
    46a6:	dc 01       	movw	r26, r24
    46a8:	01 c0       	rjmp	.+2      	; 0x46ac <memset+0x6>
    46aa:	6d 93       	st	X+, r22
    46ac:	41 50       	subi	r20, 0x01	; 1
    46ae:	50 40       	sbci	r21, 0x00	; 0
    46b0:	e0 f7       	brcc	.-8      	; 0x46aa <memset+0x4>
    46b2:	08 95       	ret

000046b4 <strncpy>:
    46b4:	fb 01       	movw	r30, r22
    46b6:	dc 01       	movw	r26, r24
    46b8:	41 50       	subi	r20, 0x01	; 1
    46ba:	50 40       	sbci	r21, 0x00	; 0
    46bc:	48 f0       	brcs	.+18     	; 0x46d0 <strncpy+0x1c>
    46be:	01 90       	ld	r0, Z+
    46c0:	0d 92       	st	X+, r0
    46c2:	00 20       	and	r0, r0
    46c4:	c9 f7       	brne	.-14     	; 0x46b8 <strncpy+0x4>
    46c6:	01 c0       	rjmp	.+2      	; 0x46ca <strncpy+0x16>
    46c8:	1d 92       	st	X+, r1
    46ca:	41 50       	subi	r20, 0x01	; 1
    46cc:	50 40       	sbci	r21, 0x00	; 0
    46ce:	e0 f7       	brcc	.-8      	; 0x46c8 <strncpy+0x14>
    46d0:	08 95       	ret

000046d2 <_exit>:
    46d2:	f8 94       	cli

000046d4 <__stop_program>:
    46d4:	ff cf       	rjmp	.-2      	; 0x46d4 <__stop_program>
