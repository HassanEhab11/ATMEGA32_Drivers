
ULTRASONIC_EDIT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004cd8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000160  00800060  00004cd8  00004d6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000038  008001c0  008001c0  00004ecc  2**0
                  ALLOC
  3 .stab         00006390  00000000  00000000  00004ecc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002e02  00000000  00000000  0000b25c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001e0  00000000  00000000  0000e05e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000232  00000000  00000000  0000e23e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002891  00000000  00000000  0000e470  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001628  00000000  00000000  00010d01  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000013de  00000000  00000000  00012329  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000200  00000000  00000000  00013708  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000030f  00000000  00000000  00013908  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a56  00000000  00000000  00013c17  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0001466d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 b3 0e 	jmp	0x1d66	; 0x1d66 <__vector_1>
       8:	0c 94 e6 0e 	jmp	0x1dcc	; 0x1dcc <__vector_2>
       c:	0c 94 19 0f 	jmp	0x1e32	; 0x1e32 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 eb 0a 	jmp	0x15d6	; 0x15d6 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 71 0a 	jmp	0x14e2	; 0x14e2 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 74 15 	jmp	0x2ae8	; 0x2ae8 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ed       	ldi	r30, 0xD8	; 216
      68:	fc e4       	ldi	r31, 0x4C	; 76
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3c       	cpi	r26, 0xC0	; 192
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 ec       	ldi	r26, 0xC0	; 192
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 3f       	cpi	r26, 0xF8	; 248
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f1 23 	call	0x47e2	; 0x47e2 <main>
      8a:	0c 94 6a 26 	jmp	0x4cd4	; 0x4cd4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 25 04 	call	0x84a	; 0x84a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 33 26 	jmp	0x4c66	; 0x4c66 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa e7       	ldi	r26, 0x7A	; 122
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 4f 26 	jmp	0x4c9e	; 0x4c9e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 3f 26 	jmp	0x4c7e	; 0x4c7e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 5b 26 	jmp	0x4cb6	; 0x4cb6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 3f 26 	jmp	0x4c7e	; 0x4c7e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 5b 26 	jmp	0x4cb6	; 0x4cb6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 33 26 	jmp	0x4c66	; 0x4c66 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8a e7       	ldi	r24, 0x7A	; 122
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 4f 26 	jmp	0x4c9e	; 0x4c9e <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 3b 26 	jmp	0x4c76	; 0x4c76 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6a e7       	ldi	r22, 0x7A	; 122
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 57 26 	jmp	0x4cae	; 0x4cae <__epilogue_restores__+0x10>

0000078a <__eqsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 3f 26 	jmp	0x4c7e	; 0x4c7e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__eqsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__eqsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__eqsf2+0x58>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 5b 26 	jmp	0x4cb6	; 0x4cb6 <__epilogue_restores__+0x18>

000007ea <__gtsf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 3f 26 	jmp	0x4c7e	; 0x4c7e <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gtsf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gtsf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gtsf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 5b 26 	jmp	0x4cb6	; 0x4cb6 <__epilogue_restores__+0x18>

0000084a <__gesf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 3f 26 	jmp	0x4c7e	; 0x4c7e <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	8f ef       	ldi	r24, 0xFF	; 255
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 5b 26 	jmp	0x4cb6	; 0x4cb6 <__epilogue_restores__+0x18>

000008aa <__ltsf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 3f 26 	jmp	0x4c7e	; 0x4c7e <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__ltsf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__ltsf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__ltsf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 5b 26 	jmp	0x4cb6	; 0x4cb6 <__epilogue_restores__+0x18>

0000090a <__floatsisf>:
     90a:	a8 e0       	ldi	r26, 0x08	; 8
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 3c 26 	jmp	0x4c78	; 0x4c78 <__prologue_saves__+0x12>
     916:	9b 01       	movw	r18, r22
     918:	ac 01       	movw	r20, r24
     91a:	83 e0       	ldi	r24, 0x03	; 3
     91c:	89 83       	std	Y+1, r24	; 0x01
     91e:	da 01       	movw	r26, r20
     920:	c9 01       	movw	r24, r18
     922:	88 27       	eor	r24, r24
     924:	b7 fd       	sbrc	r27, 7
     926:	83 95       	inc	r24
     928:	99 27       	eor	r25, r25
     92a:	aa 27       	eor	r26, r26
     92c:	bb 27       	eor	r27, r27
     92e:	b8 2e       	mov	r11, r24
     930:	21 15       	cp	r18, r1
     932:	31 05       	cpc	r19, r1
     934:	41 05       	cpc	r20, r1
     936:	51 05       	cpc	r21, r1
     938:	19 f4       	brne	.+6      	; 0x940 <__floatsisf+0x36>
     93a:	82 e0       	ldi	r24, 0x02	; 2
     93c:	89 83       	std	Y+1, r24	; 0x01
     93e:	3a c0       	rjmp	.+116    	; 0x9b4 <__floatsisf+0xaa>
     940:	88 23       	and	r24, r24
     942:	a9 f0       	breq	.+42     	; 0x96e <__floatsisf+0x64>
     944:	20 30       	cpi	r18, 0x00	; 0
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	38 07       	cpc	r19, r24
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	48 07       	cpc	r20, r24
     94e:	80 e8       	ldi	r24, 0x80	; 128
     950:	58 07       	cpc	r21, r24
     952:	29 f4       	brne	.+10     	; 0x95e <__floatsisf+0x54>
     954:	60 e0       	ldi	r22, 0x00	; 0
     956:	70 e0       	ldi	r23, 0x00	; 0
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	9f ec       	ldi	r25, 0xCF	; 207
     95c:	30 c0       	rjmp	.+96     	; 0x9be <__floatsisf+0xb4>
     95e:	ee 24       	eor	r14, r14
     960:	ff 24       	eor	r15, r15
     962:	87 01       	movw	r16, r14
     964:	e2 1a       	sub	r14, r18
     966:	f3 0a       	sbc	r15, r19
     968:	04 0b       	sbc	r16, r20
     96a:	15 0b       	sbc	r17, r21
     96c:	02 c0       	rjmp	.+4      	; 0x972 <__floatsisf+0x68>
     96e:	79 01       	movw	r14, r18
     970:	8a 01       	movw	r16, r20
     972:	8e e1       	ldi	r24, 0x1E	; 30
     974:	c8 2e       	mov	r12, r24
     976:	d1 2c       	mov	r13, r1
     978:	dc 82       	std	Y+4, r13	; 0x04
     97a:	cb 82       	std	Y+3, r12	; 0x03
     97c:	ed 82       	std	Y+5, r14	; 0x05
     97e:	fe 82       	std	Y+6, r15	; 0x06
     980:	0f 83       	std	Y+7, r16	; 0x07
     982:	18 87       	std	Y+8, r17	; 0x08
     984:	c8 01       	movw	r24, r16
     986:	b7 01       	movw	r22, r14
     988:	0e 94 b0 05 	call	0xb60	; 0xb60 <__clzsi2>
     98c:	01 97       	sbiw	r24, 0x01	; 1
     98e:	18 16       	cp	r1, r24
     990:	19 06       	cpc	r1, r25
     992:	84 f4       	brge	.+32     	; 0x9b4 <__floatsisf+0xaa>
     994:	08 2e       	mov	r0, r24
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatsisf+0x96>
     998:	ee 0c       	add	r14, r14
     99a:	ff 1c       	adc	r15, r15
     99c:	00 1f       	adc	r16, r16
     99e:	11 1f       	adc	r17, r17
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatsisf+0x8e>
     9a4:	ed 82       	std	Y+5, r14	; 0x05
     9a6:	fe 82       	std	Y+6, r15	; 0x06
     9a8:	0f 83       	std	Y+7, r16	; 0x07
     9aa:	18 87       	std	Y+8, r17	; 0x08
     9ac:	c8 1a       	sub	r12, r24
     9ae:	d9 0a       	sbc	r13, r25
     9b0:	dc 82       	std	Y+4, r13	; 0x04
     9b2:	cb 82       	std	Y+3, r12	; 0x03
     9b4:	ba 82       	std	Y+2, r11	; 0x02
     9b6:	ce 01       	movw	r24, r28
     9b8:	01 96       	adiw	r24, 0x01	; 1
     9ba:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     9be:	28 96       	adiw	r28, 0x08	; 8
     9c0:	e9 e0       	ldi	r30, 0x09	; 9
     9c2:	0c 94 58 26 	jmp	0x4cb0	; 0x4cb0 <__epilogue_restores__+0x12>

000009c6 <__fixsfsi>:
     9c6:	ac e0       	ldi	r26, 0x0C	; 12
     9c8:	b0 e0       	ldi	r27, 0x00	; 0
     9ca:	e9 ee       	ldi	r30, 0xE9	; 233
     9cc:	f4 e0       	ldi	r31, 0x04	; 4
     9ce:	0c 94 43 26 	jmp	0x4c86	; 0x4c86 <__prologue_saves__+0x20>
     9d2:	69 83       	std	Y+1, r22	; 0x01
     9d4:	7a 83       	std	Y+2, r23	; 0x02
     9d6:	8b 83       	std	Y+3, r24	; 0x03
     9d8:	9c 83       	std	Y+4, r25	; 0x04
     9da:	ce 01       	movw	r24, r28
     9dc:	01 96       	adiw	r24, 0x01	; 1
     9de:	be 01       	movw	r22, r28
     9e0:	6b 5f       	subi	r22, 0xFB	; 251
     9e2:	7f 4f       	sbci	r23, 0xFF	; 255
     9e4:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     9e8:	8d 81       	ldd	r24, Y+5	; 0x05
     9ea:	82 30       	cpi	r24, 0x02	; 2
     9ec:	61 f1       	breq	.+88     	; 0xa46 <__fixsfsi+0x80>
     9ee:	82 30       	cpi	r24, 0x02	; 2
     9f0:	50 f1       	brcs	.+84     	; 0xa46 <__fixsfsi+0x80>
     9f2:	84 30       	cpi	r24, 0x04	; 4
     9f4:	21 f4       	brne	.+8      	; 0x9fe <__fixsfsi+0x38>
     9f6:	8e 81       	ldd	r24, Y+6	; 0x06
     9f8:	88 23       	and	r24, r24
     9fa:	51 f1       	breq	.+84     	; 0xa50 <__fixsfsi+0x8a>
     9fc:	2e c0       	rjmp	.+92     	; 0xa5a <__fixsfsi+0x94>
     9fe:	2f 81       	ldd	r18, Y+7	; 0x07
     a00:	38 85       	ldd	r19, Y+8	; 0x08
     a02:	37 fd       	sbrc	r19, 7
     a04:	20 c0       	rjmp	.+64     	; 0xa46 <__fixsfsi+0x80>
     a06:	6e 81       	ldd	r22, Y+6	; 0x06
     a08:	2f 31       	cpi	r18, 0x1F	; 31
     a0a:	31 05       	cpc	r19, r1
     a0c:	1c f0       	brlt	.+6      	; 0xa14 <__fixsfsi+0x4e>
     a0e:	66 23       	and	r22, r22
     a10:	f9 f0       	breq	.+62     	; 0xa50 <__fixsfsi+0x8a>
     a12:	23 c0       	rjmp	.+70     	; 0xa5a <__fixsfsi+0x94>
     a14:	8e e1       	ldi	r24, 0x1E	; 30
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	82 1b       	sub	r24, r18
     a1a:	93 0b       	sbc	r25, r19
     a1c:	29 85       	ldd	r18, Y+9	; 0x09
     a1e:	3a 85       	ldd	r19, Y+10	; 0x0a
     a20:	4b 85       	ldd	r20, Y+11	; 0x0b
     a22:	5c 85       	ldd	r21, Y+12	; 0x0c
     a24:	04 c0       	rjmp	.+8      	; 0xa2e <__fixsfsi+0x68>
     a26:	56 95       	lsr	r21
     a28:	47 95       	ror	r20
     a2a:	37 95       	ror	r19
     a2c:	27 95       	ror	r18
     a2e:	8a 95       	dec	r24
     a30:	d2 f7       	brpl	.-12     	; 0xa26 <__fixsfsi+0x60>
     a32:	66 23       	and	r22, r22
     a34:	b1 f0       	breq	.+44     	; 0xa62 <__fixsfsi+0x9c>
     a36:	50 95       	com	r21
     a38:	40 95       	com	r20
     a3a:	30 95       	com	r19
     a3c:	21 95       	neg	r18
     a3e:	3f 4f       	sbci	r19, 0xFF	; 255
     a40:	4f 4f       	sbci	r20, 0xFF	; 255
     a42:	5f 4f       	sbci	r21, 0xFF	; 255
     a44:	0e c0       	rjmp	.+28     	; 0xa62 <__fixsfsi+0x9c>
     a46:	20 e0       	ldi	r18, 0x00	; 0
     a48:	30 e0       	ldi	r19, 0x00	; 0
     a4a:	40 e0       	ldi	r20, 0x00	; 0
     a4c:	50 e0       	ldi	r21, 0x00	; 0
     a4e:	09 c0       	rjmp	.+18     	; 0xa62 <__fixsfsi+0x9c>
     a50:	2f ef       	ldi	r18, 0xFF	; 255
     a52:	3f ef       	ldi	r19, 0xFF	; 255
     a54:	4f ef       	ldi	r20, 0xFF	; 255
     a56:	5f e7       	ldi	r21, 0x7F	; 127
     a58:	04 c0       	rjmp	.+8      	; 0xa62 <__fixsfsi+0x9c>
     a5a:	20 e0       	ldi	r18, 0x00	; 0
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	40 e0       	ldi	r20, 0x00	; 0
     a60:	50 e8       	ldi	r21, 0x80	; 128
     a62:	b9 01       	movw	r22, r18
     a64:	ca 01       	movw	r24, r20
     a66:	2c 96       	adiw	r28, 0x0c	; 12
     a68:	e2 e0       	ldi	r30, 0x02	; 2
     a6a:	0c 94 5f 26 	jmp	0x4cbe	; 0x4cbe <__epilogue_restores__+0x20>

00000a6e <__floatunsisf>:
     a6e:	a8 e0       	ldi	r26, 0x08	; 8
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	ed e3       	ldi	r30, 0x3D	; 61
     a74:	f5 e0       	ldi	r31, 0x05	; 5
     a76:	0c 94 3b 26 	jmp	0x4c76	; 0x4c76 <__prologue_saves__+0x10>
     a7a:	7b 01       	movw	r14, r22
     a7c:	8c 01       	movw	r16, r24
     a7e:	61 15       	cp	r22, r1
     a80:	71 05       	cpc	r23, r1
     a82:	81 05       	cpc	r24, r1
     a84:	91 05       	cpc	r25, r1
     a86:	19 f4       	brne	.+6      	; 0xa8e <__floatunsisf+0x20>
     a88:	82 e0       	ldi	r24, 0x02	; 2
     a8a:	89 83       	std	Y+1, r24	; 0x01
     a8c:	60 c0       	rjmp	.+192    	; 0xb4e <__floatunsisf+0xe0>
     a8e:	83 e0       	ldi	r24, 0x03	; 3
     a90:	89 83       	std	Y+1, r24	; 0x01
     a92:	8e e1       	ldi	r24, 0x1E	; 30
     a94:	c8 2e       	mov	r12, r24
     a96:	d1 2c       	mov	r13, r1
     a98:	dc 82       	std	Y+4, r13	; 0x04
     a9a:	cb 82       	std	Y+3, r12	; 0x03
     a9c:	ed 82       	std	Y+5, r14	; 0x05
     a9e:	fe 82       	std	Y+6, r15	; 0x06
     aa0:	0f 83       	std	Y+7, r16	; 0x07
     aa2:	18 87       	std	Y+8, r17	; 0x08
     aa4:	c8 01       	movw	r24, r16
     aa6:	b7 01       	movw	r22, r14
     aa8:	0e 94 b0 05 	call	0xb60	; 0xb60 <__clzsi2>
     aac:	fc 01       	movw	r30, r24
     aae:	31 97       	sbiw	r30, 0x01	; 1
     ab0:	f7 ff       	sbrs	r31, 7
     ab2:	3b c0       	rjmp	.+118    	; 0xb2a <__floatunsisf+0xbc>
     ab4:	22 27       	eor	r18, r18
     ab6:	33 27       	eor	r19, r19
     ab8:	2e 1b       	sub	r18, r30
     aba:	3f 0b       	sbc	r19, r31
     abc:	57 01       	movw	r10, r14
     abe:	68 01       	movw	r12, r16
     ac0:	02 2e       	mov	r0, r18
     ac2:	04 c0       	rjmp	.+8      	; 0xacc <__floatunsisf+0x5e>
     ac4:	d6 94       	lsr	r13
     ac6:	c7 94       	ror	r12
     ac8:	b7 94       	ror	r11
     aca:	a7 94       	ror	r10
     acc:	0a 94       	dec	r0
     ace:	d2 f7       	brpl	.-12     	; 0xac4 <__floatunsisf+0x56>
     ad0:	40 e0       	ldi	r20, 0x00	; 0
     ad2:	50 e0       	ldi	r21, 0x00	; 0
     ad4:	60 e0       	ldi	r22, 0x00	; 0
     ad6:	70 e0       	ldi	r23, 0x00	; 0
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	a0 e0       	ldi	r26, 0x00	; 0
     ade:	b0 e0       	ldi	r27, 0x00	; 0
     ae0:	04 c0       	rjmp	.+8      	; 0xaea <__floatunsisf+0x7c>
     ae2:	88 0f       	add	r24, r24
     ae4:	99 1f       	adc	r25, r25
     ae6:	aa 1f       	adc	r26, r26
     ae8:	bb 1f       	adc	r27, r27
     aea:	2a 95       	dec	r18
     aec:	d2 f7       	brpl	.-12     	; 0xae2 <__floatunsisf+0x74>
     aee:	01 97       	sbiw	r24, 0x01	; 1
     af0:	a1 09       	sbc	r26, r1
     af2:	b1 09       	sbc	r27, r1
     af4:	8e 21       	and	r24, r14
     af6:	9f 21       	and	r25, r15
     af8:	a0 23       	and	r26, r16
     afa:	b1 23       	and	r27, r17
     afc:	00 97       	sbiw	r24, 0x00	; 0
     afe:	a1 05       	cpc	r26, r1
     b00:	b1 05       	cpc	r27, r1
     b02:	21 f0       	breq	.+8      	; 0xb0c <__floatunsisf+0x9e>
     b04:	41 e0       	ldi	r20, 0x01	; 1
     b06:	50 e0       	ldi	r21, 0x00	; 0
     b08:	60 e0       	ldi	r22, 0x00	; 0
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	4a 29       	or	r20, r10
     b0e:	5b 29       	or	r21, r11
     b10:	6c 29       	or	r22, r12
     b12:	7d 29       	or	r23, r13
     b14:	4d 83       	std	Y+5, r20	; 0x05
     b16:	5e 83       	std	Y+6, r21	; 0x06
     b18:	6f 83       	std	Y+7, r22	; 0x07
     b1a:	78 87       	std	Y+8, r23	; 0x08
     b1c:	8e e1       	ldi	r24, 0x1E	; 30
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	8e 1b       	sub	r24, r30
     b22:	9f 0b       	sbc	r25, r31
     b24:	9c 83       	std	Y+4, r25	; 0x04
     b26:	8b 83       	std	Y+3, r24	; 0x03
     b28:	12 c0       	rjmp	.+36     	; 0xb4e <__floatunsisf+0xe0>
     b2a:	30 97       	sbiw	r30, 0x00	; 0
     b2c:	81 f0       	breq	.+32     	; 0xb4e <__floatunsisf+0xe0>
     b2e:	0e 2e       	mov	r0, r30
     b30:	04 c0       	rjmp	.+8      	; 0xb3a <__floatunsisf+0xcc>
     b32:	ee 0c       	add	r14, r14
     b34:	ff 1c       	adc	r15, r15
     b36:	00 1f       	adc	r16, r16
     b38:	11 1f       	adc	r17, r17
     b3a:	0a 94       	dec	r0
     b3c:	d2 f7       	brpl	.-12     	; 0xb32 <__floatunsisf+0xc4>
     b3e:	ed 82       	std	Y+5, r14	; 0x05
     b40:	fe 82       	std	Y+6, r15	; 0x06
     b42:	0f 83       	std	Y+7, r16	; 0x07
     b44:	18 87       	std	Y+8, r17	; 0x08
     b46:	ce 1a       	sub	r12, r30
     b48:	df 0a       	sbc	r13, r31
     b4a:	dc 82       	std	Y+4, r13	; 0x04
     b4c:	cb 82       	std	Y+3, r12	; 0x03
     b4e:	1a 82       	std	Y+2, r1	; 0x02
     b50:	ce 01       	movw	r24, r28
     b52:	01 96       	adiw	r24, 0x01	; 1
     b54:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     b58:	28 96       	adiw	r28, 0x08	; 8
     b5a:	ea e0       	ldi	r30, 0x0A	; 10
     b5c:	0c 94 57 26 	jmp	0x4cae	; 0x4cae <__epilogue_restores__+0x10>

00000b60 <__clzsi2>:
     b60:	ef 92       	push	r14
     b62:	ff 92       	push	r15
     b64:	0f 93       	push	r16
     b66:	1f 93       	push	r17
     b68:	7b 01       	movw	r14, r22
     b6a:	8c 01       	movw	r16, r24
     b6c:	80 e0       	ldi	r24, 0x00	; 0
     b6e:	e8 16       	cp	r14, r24
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	f8 06       	cpc	r15, r24
     b74:	81 e0       	ldi	r24, 0x01	; 1
     b76:	08 07       	cpc	r16, r24
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	18 07       	cpc	r17, r24
     b7c:	88 f4       	brcc	.+34     	; 0xba0 <__clzsi2+0x40>
     b7e:	8f ef       	ldi	r24, 0xFF	; 255
     b80:	e8 16       	cp	r14, r24
     b82:	f1 04       	cpc	r15, r1
     b84:	01 05       	cpc	r16, r1
     b86:	11 05       	cpc	r17, r1
     b88:	31 f0       	breq	.+12     	; 0xb96 <__clzsi2+0x36>
     b8a:	28 f0       	brcs	.+10     	; 0xb96 <__clzsi2+0x36>
     b8c:	88 e0       	ldi	r24, 0x08	; 8
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	a0 e0       	ldi	r26, 0x00	; 0
     b92:	b0 e0       	ldi	r27, 0x00	; 0
     b94:	17 c0       	rjmp	.+46     	; 0xbc4 <__clzsi2+0x64>
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	a0 e0       	ldi	r26, 0x00	; 0
     b9c:	b0 e0       	ldi	r27, 0x00	; 0
     b9e:	12 c0       	rjmp	.+36     	; 0xbc4 <__clzsi2+0x64>
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	e8 16       	cp	r14, r24
     ba4:	80 e0       	ldi	r24, 0x00	; 0
     ba6:	f8 06       	cpc	r15, r24
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	08 07       	cpc	r16, r24
     bac:	81 e0       	ldi	r24, 0x01	; 1
     bae:	18 07       	cpc	r17, r24
     bb0:	28 f0       	brcs	.+10     	; 0xbbc <__clzsi2+0x5c>
     bb2:	88 e1       	ldi	r24, 0x18	; 24
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	a0 e0       	ldi	r26, 0x00	; 0
     bb8:	b0 e0       	ldi	r27, 0x00	; 0
     bba:	04 c0       	rjmp	.+8      	; 0xbc4 <__clzsi2+0x64>
     bbc:	80 e1       	ldi	r24, 0x10	; 16
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	a0 e0       	ldi	r26, 0x00	; 0
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	20 e2       	ldi	r18, 0x20	; 32
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	40 e0       	ldi	r20, 0x00	; 0
     bca:	50 e0       	ldi	r21, 0x00	; 0
     bcc:	28 1b       	sub	r18, r24
     bce:	39 0b       	sbc	r19, r25
     bd0:	4a 0b       	sbc	r20, r26
     bd2:	5b 0b       	sbc	r21, r27
     bd4:	04 c0       	rjmp	.+8      	; 0xbde <__clzsi2+0x7e>
     bd6:	16 95       	lsr	r17
     bd8:	07 95       	ror	r16
     bda:	f7 94       	ror	r15
     bdc:	e7 94       	ror	r14
     bde:	8a 95       	dec	r24
     be0:	d2 f7       	brpl	.-12     	; 0xbd6 <__clzsi2+0x76>
     be2:	f7 01       	movw	r30, r14
     be4:	ee 57       	subi	r30, 0x7E	; 126
     be6:	ff 4f       	sbci	r31, 0xFF	; 255
     be8:	80 81       	ld	r24, Z
     bea:	28 1b       	sub	r18, r24
     bec:	31 09       	sbc	r19, r1
     bee:	41 09       	sbc	r20, r1
     bf0:	51 09       	sbc	r21, r1
     bf2:	c9 01       	movw	r24, r18
     bf4:	1f 91       	pop	r17
     bf6:	0f 91       	pop	r16
     bf8:	ff 90       	pop	r15
     bfa:	ef 90       	pop	r14
     bfc:	08 95       	ret

00000bfe <__pack_f>:
     bfe:	df 92       	push	r13
     c00:	ef 92       	push	r14
     c02:	ff 92       	push	r15
     c04:	0f 93       	push	r16
     c06:	1f 93       	push	r17
     c08:	fc 01       	movw	r30, r24
     c0a:	e4 80       	ldd	r14, Z+4	; 0x04
     c0c:	f5 80       	ldd	r15, Z+5	; 0x05
     c0e:	06 81       	ldd	r16, Z+6	; 0x06
     c10:	17 81       	ldd	r17, Z+7	; 0x07
     c12:	d1 80       	ldd	r13, Z+1	; 0x01
     c14:	80 81       	ld	r24, Z
     c16:	82 30       	cpi	r24, 0x02	; 2
     c18:	48 f4       	brcc	.+18     	; 0xc2c <__pack_f+0x2e>
     c1a:	80 e0       	ldi	r24, 0x00	; 0
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	a0 e1       	ldi	r26, 0x10	; 16
     c20:	b0 e0       	ldi	r27, 0x00	; 0
     c22:	e8 2a       	or	r14, r24
     c24:	f9 2a       	or	r15, r25
     c26:	0a 2b       	or	r16, r26
     c28:	1b 2b       	or	r17, r27
     c2a:	a5 c0       	rjmp	.+330    	; 0xd76 <__pack_f+0x178>
     c2c:	84 30       	cpi	r24, 0x04	; 4
     c2e:	09 f4       	brne	.+2      	; 0xc32 <__pack_f+0x34>
     c30:	9f c0       	rjmp	.+318    	; 0xd70 <__pack_f+0x172>
     c32:	82 30       	cpi	r24, 0x02	; 2
     c34:	21 f4       	brne	.+8      	; 0xc3e <__pack_f+0x40>
     c36:	ee 24       	eor	r14, r14
     c38:	ff 24       	eor	r15, r15
     c3a:	87 01       	movw	r16, r14
     c3c:	05 c0       	rjmp	.+10     	; 0xc48 <__pack_f+0x4a>
     c3e:	e1 14       	cp	r14, r1
     c40:	f1 04       	cpc	r15, r1
     c42:	01 05       	cpc	r16, r1
     c44:	11 05       	cpc	r17, r1
     c46:	19 f4       	brne	.+6      	; 0xc4e <__pack_f+0x50>
     c48:	e0 e0       	ldi	r30, 0x00	; 0
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	96 c0       	rjmp	.+300    	; 0xd7a <__pack_f+0x17c>
     c4e:	62 81       	ldd	r22, Z+2	; 0x02
     c50:	73 81       	ldd	r23, Z+3	; 0x03
     c52:	9f ef       	ldi	r25, 0xFF	; 255
     c54:	62 38       	cpi	r22, 0x82	; 130
     c56:	79 07       	cpc	r23, r25
     c58:	0c f0       	brlt	.+2      	; 0xc5c <__pack_f+0x5e>
     c5a:	5b c0       	rjmp	.+182    	; 0xd12 <__pack_f+0x114>
     c5c:	22 e8       	ldi	r18, 0x82	; 130
     c5e:	3f ef       	ldi	r19, 0xFF	; 255
     c60:	26 1b       	sub	r18, r22
     c62:	37 0b       	sbc	r19, r23
     c64:	2a 31       	cpi	r18, 0x1A	; 26
     c66:	31 05       	cpc	r19, r1
     c68:	2c f0       	brlt	.+10     	; 0xc74 <__pack_f+0x76>
     c6a:	20 e0       	ldi	r18, 0x00	; 0
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	40 e0       	ldi	r20, 0x00	; 0
     c70:	50 e0       	ldi	r21, 0x00	; 0
     c72:	2a c0       	rjmp	.+84     	; 0xcc8 <__pack_f+0xca>
     c74:	b8 01       	movw	r22, r16
     c76:	a7 01       	movw	r20, r14
     c78:	02 2e       	mov	r0, r18
     c7a:	04 c0       	rjmp	.+8      	; 0xc84 <__pack_f+0x86>
     c7c:	76 95       	lsr	r23
     c7e:	67 95       	ror	r22
     c80:	57 95       	ror	r21
     c82:	47 95       	ror	r20
     c84:	0a 94       	dec	r0
     c86:	d2 f7       	brpl	.-12     	; 0xc7c <__pack_f+0x7e>
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	a0 e0       	ldi	r26, 0x00	; 0
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	04 c0       	rjmp	.+8      	; 0xc9a <__pack_f+0x9c>
     c92:	88 0f       	add	r24, r24
     c94:	99 1f       	adc	r25, r25
     c96:	aa 1f       	adc	r26, r26
     c98:	bb 1f       	adc	r27, r27
     c9a:	2a 95       	dec	r18
     c9c:	d2 f7       	brpl	.-12     	; 0xc92 <__pack_f+0x94>
     c9e:	01 97       	sbiw	r24, 0x01	; 1
     ca0:	a1 09       	sbc	r26, r1
     ca2:	b1 09       	sbc	r27, r1
     ca4:	8e 21       	and	r24, r14
     ca6:	9f 21       	and	r25, r15
     ca8:	a0 23       	and	r26, r16
     caa:	b1 23       	and	r27, r17
     cac:	00 97       	sbiw	r24, 0x00	; 0
     cae:	a1 05       	cpc	r26, r1
     cb0:	b1 05       	cpc	r27, r1
     cb2:	21 f0       	breq	.+8      	; 0xcbc <__pack_f+0xbe>
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	a0 e0       	ldi	r26, 0x00	; 0
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	9a 01       	movw	r18, r20
     cbe:	ab 01       	movw	r20, r22
     cc0:	28 2b       	or	r18, r24
     cc2:	39 2b       	or	r19, r25
     cc4:	4a 2b       	or	r20, r26
     cc6:	5b 2b       	or	r21, r27
     cc8:	da 01       	movw	r26, r20
     cca:	c9 01       	movw	r24, r18
     ccc:	8f 77       	andi	r24, 0x7F	; 127
     cce:	90 70       	andi	r25, 0x00	; 0
     cd0:	a0 70       	andi	r26, 0x00	; 0
     cd2:	b0 70       	andi	r27, 0x00	; 0
     cd4:	80 34       	cpi	r24, 0x40	; 64
     cd6:	91 05       	cpc	r25, r1
     cd8:	a1 05       	cpc	r26, r1
     cda:	b1 05       	cpc	r27, r1
     cdc:	39 f4       	brne	.+14     	; 0xcec <__pack_f+0xee>
     cde:	27 ff       	sbrs	r18, 7
     ce0:	09 c0       	rjmp	.+18     	; 0xcf4 <__pack_f+0xf6>
     ce2:	20 5c       	subi	r18, 0xC0	; 192
     ce4:	3f 4f       	sbci	r19, 0xFF	; 255
     ce6:	4f 4f       	sbci	r20, 0xFF	; 255
     ce8:	5f 4f       	sbci	r21, 0xFF	; 255
     cea:	04 c0       	rjmp	.+8      	; 0xcf4 <__pack_f+0xf6>
     cec:	21 5c       	subi	r18, 0xC1	; 193
     cee:	3f 4f       	sbci	r19, 0xFF	; 255
     cf0:	4f 4f       	sbci	r20, 0xFF	; 255
     cf2:	5f 4f       	sbci	r21, 0xFF	; 255
     cf4:	e0 e0       	ldi	r30, 0x00	; 0
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	20 30       	cpi	r18, 0x00	; 0
     cfa:	a0 e0       	ldi	r26, 0x00	; 0
     cfc:	3a 07       	cpc	r19, r26
     cfe:	a0 e0       	ldi	r26, 0x00	; 0
     d00:	4a 07       	cpc	r20, r26
     d02:	a0 e4       	ldi	r26, 0x40	; 64
     d04:	5a 07       	cpc	r21, r26
     d06:	10 f0       	brcs	.+4      	; 0xd0c <__pack_f+0x10e>
     d08:	e1 e0       	ldi	r30, 0x01	; 1
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	79 01       	movw	r14, r18
     d0e:	8a 01       	movw	r16, r20
     d10:	27 c0       	rjmp	.+78     	; 0xd60 <__pack_f+0x162>
     d12:	60 38       	cpi	r22, 0x80	; 128
     d14:	71 05       	cpc	r23, r1
     d16:	64 f5       	brge	.+88     	; 0xd70 <__pack_f+0x172>
     d18:	fb 01       	movw	r30, r22
     d1a:	e1 58       	subi	r30, 0x81	; 129
     d1c:	ff 4f       	sbci	r31, 0xFF	; 255
     d1e:	d8 01       	movw	r26, r16
     d20:	c7 01       	movw	r24, r14
     d22:	8f 77       	andi	r24, 0x7F	; 127
     d24:	90 70       	andi	r25, 0x00	; 0
     d26:	a0 70       	andi	r26, 0x00	; 0
     d28:	b0 70       	andi	r27, 0x00	; 0
     d2a:	80 34       	cpi	r24, 0x40	; 64
     d2c:	91 05       	cpc	r25, r1
     d2e:	a1 05       	cpc	r26, r1
     d30:	b1 05       	cpc	r27, r1
     d32:	39 f4       	brne	.+14     	; 0xd42 <__pack_f+0x144>
     d34:	e7 fe       	sbrs	r14, 7
     d36:	0d c0       	rjmp	.+26     	; 0xd52 <__pack_f+0x154>
     d38:	80 e4       	ldi	r24, 0x40	; 64
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	a0 e0       	ldi	r26, 0x00	; 0
     d3e:	b0 e0       	ldi	r27, 0x00	; 0
     d40:	04 c0       	rjmp	.+8      	; 0xd4a <__pack_f+0x14c>
     d42:	8f e3       	ldi	r24, 0x3F	; 63
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	a0 e0       	ldi	r26, 0x00	; 0
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	e8 0e       	add	r14, r24
     d4c:	f9 1e       	adc	r15, r25
     d4e:	0a 1f       	adc	r16, r26
     d50:	1b 1f       	adc	r17, r27
     d52:	17 ff       	sbrs	r17, 7
     d54:	05 c0       	rjmp	.+10     	; 0xd60 <__pack_f+0x162>
     d56:	16 95       	lsr	r17
     d58:	07 95       	ror	r16
     d5a:	f7 94       	ror	r15
     d5c:	e7 94       	ror	r14
     d5e:	31 96       	adiw	r30, 0x01	; 1
     d60:	87 e0       	ldi	r24, 0x07	; 7
     d62:	16 95       	lsr	r17
     d64:	07 95       	ror	r16
     d66:	f7 94       	ror	r15
     d68:	e7 94       	ror	r14
     d6a:	8a 95       	dec	r24
     d6c:	d1 f7       	brne	.-12     	; 0xd62 <__pack_f+0x164>
     d6e:	05 c0       	rjmp	.+10     	; 0xd7a <__pack_f+0x17c>
     d70:	ee 24       	eor	r14, r14
     d72:	ff 24       	eor	r15, r15
     d74:	87 01       	movw	r16, r14
     d76:	ef ef       	ldi	r30, 0xFF	; 255
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	6e 2f       	mov	r22, r30
     d7c:	67 95       	ror	r22
     d7e:	66 27       	eor	r22, r22
     d80:	67 95       	ror	r22
     d82:	90 2f       	mov	r25, r16
     d84:	9f 77       	andi	r25, 0x7F	; 127
     d86:	d7 94       	ror	r13
     d88:	dd 24       	eor	r13, r13
     d8a:	d7 94       	ror	r13
     d8c:	8e 2f       	mov	r24, r30
     d8e:	86 95       	lsr	r24
     d90:	49 2f       	mov	r20, r25
     d92:	46 2b       	or	r20, r22
     d94:	58 2f       	mov	r21, r24
     d96:	5d 29       	or	r21, r13
     d98:	b7 01       	movw	r22, r14
     d9a:	ca 01       	movw	r24, r20
     d9c:	1f 91       	pop	r17
     d9e:	0f 91       	pop	r16
     da0:	ff 90       	pop	r15
     da2:	ef 90       	pop	r14
     da4:	df 90       	pop	r13
     da6:	08 95       	ret

00000da8 <__unpack_f>:
     da8:	fc 01       	movw	r30, r24
     daa:	db 01       	movw	r26, r22
     dac:	40 81       	ld	r20, Z
     dae:	51 81       	ldd	r21, Z+1	; 0x01
     db0:	22 81       	ldd	r18, Z+2	; 0x02
     db2:	62 2f       	mov	r22, r18
     db4:	6f 77       	andi	r22, 0x7F	; 127
     db6:	70 e0       	ldi	r23, 0x00	; 0
     db8:	22 1f       	adc	r18, r18
     dba:	22 27       	eor	r18, r18
     dbc:	22 1f       	adc	r18, r18
     dbe:	93 81       	ldd	r25, Z+3	; 0x03
     dc0:	89 2f       	mov	r24, r25
     dc2:	88 0f       	add	r24, r24
     dc4:	82 2b       	or	r24, r18
     dc6:	28 2f       	mov	r18, r24
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	99 1f       	adc	r25, r25
     dcc:	99 27       	eor	r25, r25
     dce:	99 1f       	adc	r25, r25
     dd0:	11 96       	adiw	r26, 0x01	; 1
     dd2:	9c 93       	st	X, r25
     dd4:	11 97       	sbiw	r26, 0x01	; 1
     dd6:	21 15       	cp	r18, r1
     dd8:	31 05       	cpc	r19, r1
     dda:	a9 f5       	brne	.+106    	; 0xe46 <__unpack_f+0x9e>
     ddc:	41 15       	cp	r20, r1
     dde:	51 05       	cpc	r21, r1
     de0:	61 05       	cpc	r22, r1
     de2:	71 05       	cpc	r23, r1
     de4:	11 f4       	brne	.+4      	; 0xdea <__unpack_f+0x42>
     de6:	82 e0       	ldi	r24, 0x02	; 2
     de8:	37 c0       	rjmp	.+110    	; 0xe58 <__unpack_f+0xb0>
     dea:	82 e8       	ldi	r24, 0x82	; 130
     dec:	9f ef       	ldi	r25, 0xFF	; 255
     dee:	13 96       	adiw	r26, 0x03	; 3
     df0:	9c 93       	st	X, r25
     df2:	8e 93       	st	-X, r24
     df4:	12 97       	sbiw	r26, 0x02	; 2
     df6:	9a 01       	movw	r18, r20
     df8:	ab 01       	movw	r20, r22
     dfa:	67 e0       	ldi	r22, 0x07	; 7
     dfc:	22 0f       	add	r18, r18
     dfe:	33 1f       	adc	r19, r19
     e00:	44 1f       	adc	r20, r20
     e02:	55 1f       	adc	r21, r21
     e04:	6a 95       	dec	r22
     e06:	d1 f7       	brne	.-12     	; 0xdfc <__unpack_f+0x54>
     e08:	83 e0       	ldi	r24, 0x03	; 3
     e0a:	8c 93       	st	X, r24
     e0c:	0d c0       	rjmp	.+26     	; 0xe28 <__unpack_f+0x80>
     e0e:	22 0f       	add	r18, r18
     e10:	33 1f       	adc	r19, r19
     e12:	44 1f       	adc	r20, r20
     e14:	55 1f       	adc	r21, r21
     e16:	12 96       	adiw	r26, 0x02	; 2
     e18:	8d 91       	ld	r24, X+
     e1a:	9c 91       	ld	r25, X
     e1c:	13 97       	sbiw	r26, 0x03	; 3
     e1e:	01 97       	sbiw	r24, 0x01	; 1
     e20:	13 96       	adiw	r26, 0x03	; 3
     e22:	9c 93       	st	X, r25
     e24:	8e 93       	st	-X, r24
     e26:	12 97       	sbiw	r26, 0x02	; 2
     e28:	20 30       	cpi	r18, 0x00	; 0
     e2a:	80 e0       	ldi	r24, 0x00	; 0
     e2c:	38 07       	cpc	r19, r24
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	48 07       	cpc	r20, r24
     e32:	80 e4       	ldi	r24, 0x40	; 64
     e34:	58 07       	cpc	r21, r24
     e36:	58 f3       	brcs	.-42     	; 0xe0e <__unpack_f+0x66>
     e38:	14 96       	adiw	r26, 0x04	; 4
     e3a:	2d 93       	st	X+, r18
     e3c:	3d 93       	st	X+, r19
     e3e:	4d 93       	st	X+, r20
     e40:	5c 93       	st	X, r21
     e42:	17 97       	sbiw	r26, 0x07	; 7
     e44:	08 95       	ret
     e46:	2f 3f       	cpi	r18, 0xFF	; 255
     e48:	31 05       	cpc	r19, r1
     e4a:	79 f4       	brne	.+30     	; 0xe6a <__unpack_f+0xc2>
     e4c:	41 15       	cp	r20, r1
     e4e:	51 05       	cpc	r21, r1
     e50:	61 05       	cpc	r22, r1
     e52:	71 05       	cpc	r23, r1
     e54:	19 f4       	brne	.+6      	; 0xe5c <__unpack_f+0xb4>
     e56:	84 e0       	ldi	r24, 0x04	; 4
     e58:	8c 93       	st	X, r24
     e5a:	08 95       	ret
     e5c:	64 ff       	sbrs	r22, 4
     e5e:	03 c0       	rjmp	.+6      	; 0xe66 <__unpack_f+0xbe>
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	8c 93       	st	X, r24
     e64:	12 c0       	rjmp	.+36     	; 0xe8a <__unpack_f+0xe2>
     e66:	1c 92       	st	X, r1
     e68:	10 c0       	rjmp	.+32     	; 0xe8a <__unpack_f+0xe2>
     e6a:	2f 57       	subi	r18, 0x7F	; 127
     e6c:	30 40       	sbci	r19, 0x00	; 0
     e6e:	13 96       	adiw	r26, 0x03	; 3
     e70:	3c 93       	st	X, r19
     e72:	2e 93       	st	-X, r18
     e74:	12 97       	sbiw	r26, 0x02	; 2
     e76:	83 e0       	ldi	r24, 0x03	; 3
     e78:	8c 93       	st	X, r24
     e7a:	87 e0       	ldi	r24, 0x07	; 7
     e7c:	44 0f       	add	r20, r20
     e7e:	55 1f       	adc	r21, r21
     e80:	66 1f       	adc	r22, r22
     e82:	77 1f       	adc	r23, r23
     e84:	8a 95       	dec	r24
     e86:	d1 f7       	brne	.-12     	; 0xe7c <__unpack_f+0xd4>
     e88:	70 64       	ori	r23, 0x40	; 64
     e8a:	14 96       	adiw	r26, 0x04	; 4
     e8c:	4d 93       	st	X+, r20
     e8e:	5d 93       	st	X+, r21
     e90:	6d 93       	st	X+, r22
     e92:	7c 93       	st	X, r23
     e94:	17 97       	sbiw	r26, 0x07	; 7
     e96:	08 95       	ret

00000e98 <__fpcmp_parts_f>:
     e98:	1f 93       	push	r17
     e9a:	dc 01       	movw	r26, r24
     e9c:	fb 01       	movw	r30, r22
     e9e:	9c 91       	ld	r25, X
     ea0:	92 30       	cpi	r25, 0x02	; 2
     ea2:	08 f4       	brcc	.+2      	; 0xea6 <__fpcmp_parts_f+0xe>
     ea4:	47 c0       	rjmp	.+142    	; 0xf34 <__fpcmp_parts_f+0x9c>
     ea6:	80 81       	ld	r24, Z
     ea8:	82 30       	cpi	r24, 0x02	; 2
     eaa:	08 f4       	brcc	.+2      	; 0xeae <__fpcmp_parts_f+0x16>
     eac:	43 c0       	rjmp	.+134    	; 0xf34 <__fpcmp_parts_f+0x9c>
     eae:	94 30       	cpi	r25, 0x04	; 4
     eb0:	51 f4       	brne	.+20     	; 0xec6 <__fpcmp_parts_f+0x2e>
     eb2:	11 96       	adiw	r26, 0x01	; 1
     eb4:	1c 91       	ld	r17, X
     eb6:	84 30       	cpi	r24, 0x04	; 4
     eb8:	99 f5       	brne	.+102    	; 0xf20 <__fpcmp_parts_f+0x88>
     eba:	81 81       	ldd	r24, Z+1	; 0x01
     ebc:	68 2f       	mov	r22, r24
     ebe:	70 e0       	ldi	r23, 0x00	; 0
     ec0:	61 1b       	sub	r22, r17
     ec2:	71 09       	sbc	r23, r1
     ec4:	3f c0       	rjmp	.+126    	; 0xf44 <__fpcmp_parts_f+0xac>
     ec6:	84 30       	cpi	r24, 0x04	; 4
     ec8:	21 f0       	breq	.+8      	; 0xed2 <__fpcmp_parts_f+0x3a>
     eca:	92 30       	cpi	r25, 0x02	; 2
     ecc:	31 f4       	brne	.+12     	; 0xeda <__fpcmp_parts_f+0x42>
     ece:	82 30       	cpi	r24, 0x02	; 2
     ed0:	b9 f1       	breq	.+110    	; 0xf40 <__fpcmp_parts_f+0xa8>
     ed2:	81 81       	ldd	r24, Z+1	; 0x01
     ed4:	88 23       	and	r24, r24
     ed6:	89 f1       	breq	.+98     	; 0xf3a <__fpcmp_parts_f+0xa2>
     ed8:	2d c0       	rjmp	.+90     	; 0xf34 <__fpcmp_parts_f+0x9c>
     eda:	11 96       	adiw	r26, 0x01	; 1
     edc:	1c 91       	ld	r17, X
     ede:	11 97       	sbiw	r26, 0x01	; 1
     ee0:	82 30       	cpi	r24, 0x02	; 2
     ee2:	f1 f0       	breq	.+60     	; 0xf20 <__fpcmp_parts_f+0x88>
     ee4:	81 81       	ldd	r24, Z+1	; 0x01
     ee6:	18 17       	cp	r17, r24
     ee8:	d9 f4       	brne	.+54     	; 0xf20 <__fpcmp_parts_f+0x88>
     eea:	12 96       	adiw	r26, 0x02	; 2
     eec:	2d 91       	ld	r18, X+
     eee:	3c 91       	ld	r19, X
     ef0:	13 97       	sbiw	r26, 0x03	; 3
     ef2:	82 81       	ldd	r24, Z+2	; 0x02
     ef4:	93 81       	ldd	r25, Z+3	; 0x03
     ef6:	82 17       	cp	r24, r18
     ef8:	93 07       	cpc	r25, r19
     efa:	94 f0       	brlt	.+36     	; 0xf20 <__fpcmp_parts_f+0x88>
     efc:	28 17       	cp	r18, r24
     efe:	39 07       	cpc	r19, r25
     f00:	bc f0       	brlt	.+46     	; 0xf30 <__fpcmp_parts_f+0x98>
     f02:	14 96       	adiw	r26, 0x04	; 4
     f04:	8d 91       	ld	r24, X+
     f06:	9d 91       	ld	r25, X+
     f08:	0d 90       	ld	r0, X+
     f0a:	bc 91       	ld	r27, X
     f0c:	a0 2d       	mov	r26, r0
     f0e:	24 81       	ldd	r18, Z+4	; 0x04
     f10:	35 81       	ldd	r19, Z+5	; 0x05
     f12:	46 81       	ldd	r20, Z+6	; 0x06
     f14:	57 81       	ldd	r21, Z+7	; 0x07
     f16:	28 17       	cp	r18, r24
     f18:	39 07       	cpc	r19, r25
     f1a:	4a 07       	cpc	r20, r26
     f1c:	5b 07       	cpc	r21, r27
     f1e:	18 f4       	brcc	.+6      	; 0xf26 <__fpcmp_parts_f+0x8e>
     f20:	11 23       	and	r17, r17
     f22:	41 f0       	breq	.+16     	; 0xf34 <__fpcmp_parts_f+0x9c>
     f24:	0a c0       	rjmp	.+20     	; 0xf3a <__fpcmp_parts_f+0xa2>
     f26:	82 17       	cp	r24, r18
     f28:	93 07       	cpc	r25, r19
     f2a:	a4 07       	cpc	r26, r20
     f2c:	b5 07       	cpc	r27, r21
     f2e:	40 f4       	brcc	.+16     	; 0xf40 <__fpcmp_parts_f+0xa8>
     f30:	11 23       	and	r17, r17
     f32:	19 f0       	breq	.+6      	; 0xf3a <__fpcmp_parts_f+0xa2>
     f34:	61 e0       	ldi	r22, 0x01	; 1
     f36:	70 e0       	ldi	r23, 0x00	; 0
     f38:	05 c0       	rjmp	.+10     	; 0xf44 <__fpcmp_parts_f+0xac>
     f3a:	6f ef       	ldi	r22, 0xFF	; 255
     f3c:	7f ef       	ldi	r23, 0xFF	; 255
     f3e:	02 c0       	rjmp	.+4      	; 0xf44 <__fpcmp_parts_f+0xac>
     f40:	60 e0       	ldi	r22, 0x00	; 0
     f42:	70 e0       	ldi	r23, 0x00	; 0
     f44:	cb 01       	movw	r24, r22
     f46:	1f 91       	pop	r17
     f48:	08 95       	ret

00000f4a <MTIMER1_voidInit>:
#endif


/**************************** Timer1 Init *****************************/
void MTIMER1_voidInit(void)
{
     f4a:	df 93       	push	r29
     f4c:	cf 93       	push	r28
     f4e:	cd b7       	in	r28, 0x3d	; 61
     f50:	de b7       	in	r29, 0x3e	; 62
    #if TIMER1_MODE == TIMER1_NORMAL_MODE
    CLR_BIT(TCCR1A, TCCR1A_WGM10);
     f52:	af e4       	ldi	r26, 0x4F	; 79
     f54:	b0 e0       	ldi	r27, 0x00	; 0
     f56:	ef e4       	ldi	r30, 0x4F	; 79
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	8e 7f       	andi	r24, 0xFE	; 254
     f5e:	8c 93       	st	X, r24
    CLR_BIT(TCCR1A, TCCR1A_WGM11);
     f60:	af e4       	ldi	r26, 0x4F	; 79
     f62:	b0 e0       	ldi	r27, 0x00	; 0
     f64:	ef e4       	ldi	r30, 0x4F	; 79
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	80 81       	ld	r24, Z
     f6a:	8d 7f       	andi	r24, 0xFD	; 253
     f6c:	8c 93       	st	X, r24
    CLR_BIT(TCCR1B, TCCR1B_WGM12);
     f6e:	ae e4       	ldi	r26, 0x4E	; 78
     f70:	b0 e0       	ldi	r27, 0x00	; 0
     f72:	ee e4       	ldi	r30, 0x4E	; 78
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	80 81       	ld	r24, Z
     f78:	87 7f       	andi	r24, 0xF7	; 247
     f7a:	8c 93       	st	X, r24
    CLR_BIT(TCCR1B, TCCR1B_WGM13);
     f7c:	ae e4       	ldi	r26, 0x4E	; 78
     f7e:	b0 e0       	ldi	r27, 0x00	; 0
     f80:	ee e4       	ldi	r30, 0x4E	; 78
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	80 81       	ld	r24, Z
     f86:	8f 7e       	andi	r24, 0xEF	; 239
     f88:	8c 93       	st	X, r24


    /* Enable Overflow INT */
    SET_BIT(TIMSK, TIMSK_TOIE1);
     f8a:	a9 e5       	ldi	r26, 0x59	; 89
     f8c:	b0 e0       	ldi	r27, 0x00	; 0
     f8e:	e9 e5       	ldi	r30, 0x59	; 89
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	80 81       	ld	r24, Z
     f94:	84 60       	ori	r24, 0x04	; 4
     f96:	8c 93       	st	X, r24

    /* Enable CTC INT */
    SET_BIT(TIMSK, TIMSK_OCIE1A);

    #endif
}
     f98:	cf 91       	pop	r28
     f9a:	df 91       	pop	r29
     f9c:	08 95       	ret

00000f9e <MTIMER1_enumSetTime_ms>:

/********************** Timer1 Set Time in ms *****************************/
error_state_t MTIMER1_enumSetTime_ms(u32 Copy_u32DesiredTime, void (*Copy_pvCallBackFunc)(void))
{
     f9e:	df 93       	push	r29
     fa0:	cf 93       	push	r28
     fa2:	cd b7       	in	r28, 0x3d	; 61
     fa4:	de b7       	in	r29, 0x3e	; 62
     fa6:	63 97       	sbiw	r28, 0x13	; 19
     fa8:	0f b6       	in	r0, 0x3f	; 63
     faa:	f8 94       	cli
     fac:	de bf       	out	0x3e, r29	; 62
     fae:	0f be       	out	0x3f, r0	; 63
     fb0:	cd bf       	out	0x3d, r28	; 61
     fb2:	6e 87       	std	Y+14, r22	; 0x0e
     fb4:	7f 87       	std	Y+15, r23	; 0x0f
     fb6:	88 8b       	std	Y+16, r24	; 0x10
     fb8:	99 8b       	std	Y+17, r25	; 0x11
     fba:	5b 8b       	std	Y+19, r21	; 0x13
     fbc:	4a 8b       	std	Y+18, r20	; 0x12
    error_state_t Local_ErrorState = TIMER1_OK;
     fbe:	8a e0       	ldi	r24, 0x0A	; 10
     fc0:	8d 87       	std	Y+13, r24	; 0x0d

    // Initialize callback function globally
    TIMER1_pvCallBackNotificationFunc = Copy_pvCallBackFunc;
     fc2:	8a 89       	ldd	r24, Y+18	; 0x12
     fc4:	9b 89       	ldd	r25, Y+19	; 0x13
     fc6:	90 93 c3 01 	sts	0x01C3, r25
     fca:	80 93 c2 01 	sts	0x01C2, r24

    /* Get prescaler value */
    f32 Local_u32PrescDivFact = (f32)TIMER1_PRESCALLER_ARR[TIMER1_PRESCALLER_SELEC - 1];
     fce:	80 91 86 01 	lds	r24, 0x0186
     fd2:	90 91 87 01 	lds	r25, 0x0187
     fd6:	cc 01       	movw	r24, r24
     fd8:	a0 e0       	ldi	r26, 0x00	; 0
     fda:	b0 e0       	ldi	r27, 0x00	; 0
     fdc:	bc 01       	movw	r22, r24
     fde:	cd 01       	movw	r24, r26
     fe0:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
     fe4:	dc 01       	movw	r26, r24
     fe6:	cb 01       	movw	r24, r22
     fe8:	89 87       	std	Y+9, r24	; 0x09
     fea:	9a 87       	std	Y+10, r25	; 0x0a
     fec:	ab 87       	std	Y+11, r26	; 0x0b
     fee:	bc 87       	std	Y+12, r27	; 0x0c

    // Calculate total tick time in Microseconds
    f32 Local_u32TickTime = Local_u32PrescDivFact / CRYSTAL_FREQ;
     ff0:	69 85       	ldd	r22, Y+9	; 0x09
     ff2:	7a 85       	ldd	r23, Y+10	; 0x0a
     ff4:	8b 85       	ldd	r24, Y+11	; 0x0b
     ff6:	9c 85       	ldd	r25, Y+12	; 0x0c
     ff8:	20 e0       	ldi	r18, 0x00	; 0
     ffa:	30 e0       	ldi	r19, 0x00	; 0
     ffc:	40 e8       	ldi	r20, 0x80	; 128
     ffe:	51 e4       	ldi	r21, 0x41	; 65
    1000:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1004:	dc 01       	movw	r26, r24
    1006:	cb 01       	movw	r24, r22
    1008:	8d 83       	std	Y+5, r24	; 0x05
    100a:	9e 83       	std	Y+6, r25	; 0x06
    100c:	af 83       	std	Y+7, r26	; 0x07
    100e:	b8 87       	std	Y+8, r27	; 0x08

    // Calculate total tick number
    u32 Local_u32TotalTicks = (Copy_u32DesiredTime * 1000) / Local_u32TickTime;
    1010:	8e 85       	ldd	r24, Y+14	; 0x0e
    1012:	9f 85       	ldd	r25, Y+15	; 0x0f
    1014:	a8 89       	ldd	r26, Y+16	; 0x10
    1016:	b9 89       	ldd	r27, Y+17	; 0x11
    1018:	28 ee       	ldi	r18, 0xE8	; 232
    101a:	33 e0       	ldi	r19, 0x03	; 3
    101c:	40 e0       	ldi	r20, 0x00	; 0
    101e:	50 e0       	ldi	r21, 0x00	; 0
    1020:	bc 01       	movw	r22, r24
    1022:	cd 01       	movw	r24, r26
    1024:	0e 94 b0 25 	call	0x4b60	; 0x4b60 <__mulsi3>
    1028:	dc 01       	movw	r26, r24
    102a:	cb 01       	movw	r24, r22
    102c:	bc 01       	movw	r22, r24
    102e:	cd 01       	movw	r24, r26
    1030:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    1034:	dc 01       	movw	r26, r24
    1036:	cb 01       	movw	r24, r22
    1038:	bc 01       	movw	r22, r24
    103a:	cd 01       	movw	r24, r26
    103c:	2d 81       	ldd	r18, Y+5	; 0x05
    103e:	3e 81       	ldd	r19, Y+6	; 0x06
    1040:	4f 81       	ldd	r20, Y+7	; 0x07
    1042:	58 85       	ldd	r21, Y+8	; 0x08
    1044:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1048:	dc 01       	movw	r26, r24
    104a:	cb 01       	movw	r24, r22
    104c:	bc 01       	movw	r22, r24
    104e:	cd 01       	movw	r24, r26
    1050:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1054:	dc 01       	movw	r26, r24
    1056:	cb 01       	movw	r24, r22
    1058:	89 83       	std	Y+1, r24	; 0x01
    105a:	9a 83       	std	Y+2, r25	; 0x02
    105c:	ab 83       	std	Y+3, r26	; 0x03
    105e:	bc 83       	std	Y+4, r27	; 0x04

    #if TIMER1_MODE == TIMER1_NORMAL_MODE
    NORMAL_u32NoOfOverFlow = Local_u32TotalTicks / TIMER1_MAX_TICK;
    1060:	89 81       	ldd	r24, Y+1	; 0x01
    1062:	9a 81       	ldd	r25, Y+2	; 0x02
    1064:	ab 81       	ldd	r26, Y+3	; 0x03
    1066:	bc 81       	ldd	r27, Y+4	; 0x04
    1068:	2f ef       	ldi	r18, 0xFF	; 255
    106a:	3f ef       	ldi	r19, 0xFF	; 255
    106c:	40 e0       	ldi	r20, 0x00	; 0
    106e:	50 e0       	ldi	r21, 0x00	; 0
    1070:	bc 01       	movw	r22, r24
    1072:	cd 01       	movw	r24, r26
    1074:	0e 94 e2 25 	call	0x4bc4	; 0x4bc4 <__udivmodsi4>
    1078:	da 01       	movw	r26, r20
    107a:	c9 01       	movw	r24, r18
    107c:	80 93 c4 01 	sts	0x01C4, r24
    1080:	90 93 c5 01 	sts	0x01C5, r25
    1084:	a0 93 c6 01 	sts	0x01C6, r26
    1088:	b0 93 c7 01 	sts	0x01C7, r27
    NORMAL_u16NoOfRemTicks = Local_u32TotalTicks % TIMER1_MAX_TICK;
    108c:	89 81       	ldd	r24, Y+1	; 0x01
    108e:	9a 81       	ldd	r25, Y+2	; 0x02
    1090:	ab 81       	ldd	r26, Y+3	; 0x03
    1092:	bc 81       	ldd	r27, Y+4	; 0x04
    1094:	2f ef       	ldi	r18, 0xFF	; 255
    1096:	3f ef       	ldi	r19, 0xFF	; 255
    1098:	40 e0       	ldi	r20, 0x00	; 0
    109a:	50 e0       	ldi	r21, 0x00	; 0
    109c:	bc 01       	movw	r22, r24
    109e:	cd 01       	movw	r24, r26
    10a0:	0e 94 e2 25 	call	0x4bc4	; 0x4bc4 <__udivmodsi4>
    10a4:	dc 01       	movw	r26, r24
    10a6:	cb 01       	movw	r24, r22
    10a8:	90 93 c9 01 	sts	0x01C9, r25
    10ac:	80 93 c8 01 	sts	0x01C8, r24
    if (NORMAL_u16NoOfRemTicks != 0)
    10b0:	80 91 c8 01 	lds	r24, 0x01C8
    10b4:	90 91 c9 01 	lds	r25, 0x01C9
    10b8:	00 97       	sbiw	r24, 0x00	; 0
    10ba:	29 f1       	breq	.+74     	; 0x1106 <MTIMER1_enumSetTime_ms+0x168>
    {
        NORMAL_u16NoOfRemTicks = TIMER1_MAX_TICK - NORMAL_u16NoOfRemTicks;
    10bc:	80 91 c8 01 	lds	r24, 0x01C8
    10c0:	90 91 c9 01 	lds	r25, 0x01C9
    10c4:	80 95       	com	r24
    10c6:	90 95       	com	r25
    10c8:	90 93 c9 01 	sts	0x01C9, r25
    10cc:	80 93 c8 01 	sts	0x01C8, r24
        TCNT1 = NORMAL_u16NoOfRemTicks ;
    10d0:	ec e4       	ldi	r30, 0x4C	; 76
    10d2:	f0 e0       	ldi	r31, 0x00	; 0
    10d4:	80 91 c8 01 	lds	r24, 0x01C8
    10d8:	90 91 c9 01 	lds	r25, 0x01C9
    10dc:	91 83       	std	Z+1, r25	; 0x01
    10de:	80 83       	st	Z, r24

        NORMAL_u32NoOfOverFlow++;
    10e0:	80 91 c4 01 	lds	r24, 0x01C4
    10e4:	90 91 c5 01 	lds	r25, 0x01C5
    10e8:	a0 91 c6 01 	lds	r26, 0x01C6
    10ec:	b0 91 c7 01 	lds	r27, 0x01C7
    10f0:	01 96       	adiw	r24, 0x01	; 1
    10f2:	a1 1d       	adc	r26, r1
    10f4:	b1 1d       	adc	r27, r1
    10f6:	80 93 c4 01 	sts	0x01C4, r24
    10fa:	90 93 c5 01 	sts	0x01C5, r25
    10fe:	a0 93 c6 01 	sts	0x01C6, r26
    1102:	b0 93 c7 01 	sts	0x01C7, r27
    OCR1AH = (u8)(Local_u16DivisionValue >> 8);
    OCR1AL = (u8)(Local_u16DivisionValue & 0xFF);

    #endif

    return Local_ErrorState;
    1106:	8d 85       	ldd	r24, Y+13	; 0x0d
}
    1108:	63 96       	adiw	r28, 0x13	; 19
    110a:	0f b6       	in	r0, 0x3f	; 63
    110c:	f8 94       	cli
    110e:	de bf       	out	0x3e, r29	; 62
    1110:	0f be       	out	0x3f, r0	; 63
    1112:	cd bf       	out	0x3d, r28	; 61
    1114:	cf 91       	pop	r28
    1116:	df 91       	pop	r29
    1118:	08 95       	ret

0000111a <MTIMER1_enumStart>:

/********************* Timer1 Start **************************/
error_state_t MTIMER1_enumStart(void)
{
    111a:	df 93       	push	r29
    111c:	cf 93       	push	r28
    111e:	0f 92       	push	r0
    1120:	cd b7       	in	r28, 0x3d	; 61
    1122:	de b7       	in	r29, 0x3e	; 62
    error_state_t Local_ErrorState = TIMER1_OK;
    1124:	8a e0       	ldi	r24, 0x0A	; 10
    1126:	89 83       	std	Y+1, r24	; 0x01
    TCCR1B &= TIMER1_PRESCALLER_MASK;
    1128:	ae e4       	ldi	r26, 0x4E	; 78
    112a:	b0 e0       	ldi	r27, 0x00	; 0
    112c:	ee e4       	ldi	r30, 0x4E	; 78
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	80 81       	ld	r24, Z
    1132:	88 7f       	andi	r24, 0xF8	; 248
    1134:	8c 93       	st	X, r24
    TCCR1B |= TIMER1_PRESCALLER_SELEC;
    1136:	ae e4       	ldi	r26, 0x4E	; 78
    1138:	b0 e0       	ldi	r27, 0x00	; 0
    113a:	ee e4       	ldi	r30, 0x4E	; 78
    113c:	f0 e0       	ldi	r31, 0x00	; 0
    113e:	80 81       	ld	r24, Z
    1140:	83 60       	ori	r24, 0x03	; 3
    1142:	8c 93       	st	X, r24

    return Local_ErrorState;
    1144:	89 81       	ldd	r24, Y+1	; 0x01
}
    1146:	0f 90       	pop	r0
    1148:	cf 91       	pop	r28
    114a:	df 91       	pop	r29
    114c:	08 95       	ret

0000114e <MTIMER1_enumStop>:

/********************* Timer1 Stop **************************/
error_state_t MTIMER1_enumStop(void)
{
    114e:	df 93       	push	r29
    1150:	cf 93       	push	r28
    1152:	0f 92       	push	r0
    1154:	cd b7       	in	r28, 0x3d	; 61
    1156:	de b7       	in	r29, 0x3e	; 62
    error_state_t Local_ErrorState = TIMER1_OK;
    1158:	8a e0       	ldi	r24, 0x0A	; 10
    115a:	89 83       	std	Y+1, r24	; 0x01
    TCCR1B &= TIMER1_PRESCALLER_MASK;
    115c:	ae e4       	ldi	r26, 0x4E	; 78
    115e:	b0 e0       	ldi	r27, 0x00	; 0
    1160:	ee e4       	ldi	r30, 0x4E	; 78
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	80 81       	ld	r24, Z
    1166:	88 7f       	andi	r24, 0xF8	; 248
    1168:	8c 93       	st	X, r24
    return Local_ErrorState;
    116a:	89 81       	ldd	r24, Y+1	; 0x01
}
    116c:	0f 90       	pop	r0
    116e:	cf 91       	pop	r28
    1170:	df 91       	pop	r29
    1172:	08 95       	ret

00001174 <MTIMER1_u8SetCallBack>:

error_state_t MTIMER1_u8SetCallBack(void (*Copy_pvCallBackFunc)(void))
{
    1174:	df 93       	push	r29
    1176:	cf 93       	push	r28
    1178:	00 d0       	rcall	.+0      	; 0x117a <MTIMER1_u8SetCallBack+0x6>
    117a:	0f 92       	push	r0
    117c:	cd b7       	in	r28, 0x3d	; 61
    117e:	de b7       	in	r29, 0x3e	; 62
    1180:	9a 83       	std	Y+2, r25	; 0x02
    1182:	89 83       	std	Y+1, r24	; 0x01
    if (Copy_pvCallBackFunc != NULL)
    1184:	89 81       	ldd	r24, Y+1	; 0x01
    1186:	9a 81       	ldd	r25, Y+2	; 0x02
    1188:	00 97       	sbiw	r24, 0x00	; 0
    118a:	49 f0       	breq	.+18     	; 0x119e <MTIMER1_u8SetCallBack+0x2a>
    {
        TIMER1_pvCallBackNotificationFunc = Copy_pvCallBackFunc;
    118c:	89 81       	ldd	r24, Y+1	; 0x01
    118e:	9a 81       	ldd	r25, Y+2	; 0x02
    1190:	90 93 c3 01 	sts	0x01C3, r25
    1194:	80 93 c2 01 	sts	0x01C2, r24
        return TIMER1_OK;
    1198:	8a e0       	ldi	r24, 0x0A	; 10
    119a:	8b 83       	std	Y+3, r24	; 0x03
    119c:	02 c0       	rjmp	.+4      	; 0x11a2 <MTIMER1_u8SetCallBack+0x2e>
    }
    else
    {
        return TIMER1_NOK;
    119e:	8b e0       	ldi	r24, 0x0B	; 11
    11a0:	8b 83       	std	Y+3, r24	; 0x03
    11a2:	8b 81       	ldd	r24, Y+3	; 0x03
    }
}
    11a4:	0f 90       	pop	r0
    11a6:	0f 90       	pop	r0
    11a8:	0f 90       	pop	r0
    11aa:	cf 91       	pop	r28
    11ac:	df 91       	pop	r29
    11ae:	08 95       	ret

000011b0 <MTIMER1_voidNoPrescaler>:

/******************************************************************************/

void MTIMER1_voidNoPrescaler(void)
{
    11b0:	df 93       	push	r29
    11b2:	cf 93       	push	r28
    11b4:	cd b7       	in	r28, 0x3d	; 61
    11b6:	de b7       	in	r29, 0x3e	; 62
	TCCR1B &= TIMER1_PRESCALLER_MASK;
    11b8:	ae e4       	ldi	r26, 0x4E	; 78
    11ba:	b0 e0       	ldi	r27, 0x00	; 0
    11bc:	ee e4       	ldi	r30, 0x4E	; 78
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	80 81       	ld	r24, Z
    11c2:	88 7f       	andi	r24, 0xF8	; 248
    11c4:	8c 93       	st	X, r24
	TCCR1B |= TIMER1_NO_PRESCALER;
    11c6:	ae e4       	ldi	r26, 0x4E	; 78
    11c8:	b0 e0       	ldi	r27, 0x00	; 0
    11ca:	ee e4       	ldi	r30, 0x4E	; 78
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	80 81       	ld	r24, Z
    11d0:	81 60       	ori	r24, 0x01	; 1
    11d2:	8c 93       	st	X, r24
}
    11d4:	cf 91       	pop	r28
    11d6:	df 91       	pop	r29
    11d8:	08 95       	ret

000011da <MTIMER1_SetChannelAComMatchValue>:



void MTIMER1_SetChannelAComMatchValue(u16 Copy_u16CompareMatch)
{
    11da:	df 93       	push	r29
    11dc:	cf 93       	push	r28
    11de:	00 d0       	rcall	.+0      	; 0x11e0 <MTIMER1_SetChannelAComMatchValue+0x6>
    11e0:	cd b7       	in	r28, 0x3d	; 61
    11e2:	de b7       	in	r29, 0x3e	; 62
    11e4:	9a 83       	std	Y+2, r25	; 0x02
    11e6:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = Copy_u16CompareMatch;
    11e8:	ea e4       	ldi	r30, 0x4A	; 74
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	89 81       	ldd	r24, Y+1	; 0x01
    11ee:	9a 81       	ldd	r25, Y+2	; 0x02
    11f0:	91 83       	std	Z+1, r25	; 0x01
    11f2:	80 83       	st	Z, r24

}
    11f4:	0f 90       	pop	r0
    11f6:	0f 90       	pop	r0
    11f8:	cf 91       	pop	r28
    11fa:	df 91       	pop	r29
    11fc:	08 95       	ret

000011fe <MPWM1_enumInit>:


/********************* Initialization PWM1 **************************/
error_state_t MPWM1_enumInit(void)
{
    11fe:	df 93       	push	r29
    1200:	cf 93       	push	r28
    1202:	0f 92       	push	r0
    1204:	cd b7       	in	r28, 0x3d	; 61
    1206:	de b7       	in	r29, 0x3e	; 62
    error_state_t Local_ErrorState = TIMER1_OK;
    1208:	8a e0       	ldi	r24, 0x0A	; 10
    120a:	89 83       	std	Y+1, r24	; 0x01
        CLR_BIT(TCCR1A, TCCR1A_COM1A0);
        SET_BIT(TCCR1A, TCCR1A_COM1A1);
    }
    #endif

    return Local_ErrorState;
    120c:	89 81       	ldd	r24, Y+1	; 0x01
}
    120e:	0f 90       	pop	r0
    1210:	cf 91       	pop	r28
    1212:	df 91       	pop	r29
    1214:	08 95       	ret

00001216 <MPWM1_enumSetDutyCycle>:

error_state_t MPWM1_enumSetDutyCycle(u8 Copy_u8DutyCycle)
{
    1216:	df 93       	push	r29
    1218:	cf 93       	push	r28
    121a:	00 d0       	rcall	.+0      	; 0x121c <MPWM1_enumSetDutyCycle+0x6>
    121c:	cd b7       	in	r28, 0x3d	; 61
    121e:	de b7       	in	r29, 0x3e	; 62
    1220:	8a 83       	std	Y+2, r24	; 0x02
    error_state_t Local_ErrorState = TIMER1_OK;
    1222:	8a e0       	ldi	r24, 0x0A	; 10
    1224:	89 83       	std	Y+1, r24	; 0x01
        OCR1AH = (u8)(((Copy_u8DutyCycle * TIMER1_MAX_TICK) / 100) >> 8);
        OCR1AL = (u8)(((Copy_u8DutyCycle * TIMER1_MAX_TICK) / 100) & 0xFF);
    }
    #endif

    return Local_ErrorState;
    1226:	89 81       	ldd	r24, Y+1	; 0x01
}
    1228:	0f 90       	pop	r0
    122a:	0f 90       	pop	r0
    122c:	cf 91       	pop	r28
    122e:	df 91       	pop	r29
    1230:	08 95       	ret

00001232 <MPWM1_enumStart>:

error_state_t MPWM1_enumStart(void)
{
    1232:	df 93       	push	r29
    1234:	cf 93       	push	r28
    1236:	0f 92       	push	r0
    1238:	cd b7       	in	r28, 0x3d	; 61
    123a:	de b7       	in	r29, 0x3e	; 62
    error_state_t Local_ErrorState = TIMER1_OK;
    123c:	8a e0       	ldi	r24, 0x0A	; 10
    123e:	89 83       	std	Y+1, r24	; 0x01
    TCCR1B &= TIMER1_PRESCALLER_MASK;
    1240:	ae e4       	ldi	r26, 0x4E	; 78
    1242:	b0 e0       	ldi	r27, 0x00	; 0
    1244:	ee e4       	ldi	r30, 0x4E	; 78
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	80 81       	ld	r24, Z
    124a:	88 7f       	andi	r24, 0xF8	; 248
    124c:	8c 93       	st	X, r24
    TCCR1B |= TIMER1_PRESCALLER_SELEC;
    124e:	ae e4       	ldi	r26, 0x4E	; 78
    1250:	b0 e0       	ldi	r27, 0x00	; 0
    1252:	ee e4       	ldi	r30, 0x4E	; 78
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	80 81       	ld	r24, Z
    1258:	83 60       	ori	r24, 0x03	; 3
    125a:	8c 93       	st	X, r24
    return Local_ErrorState;
    125c:	89 81       	ldd	r24, Y+1	; 0x01
}
    125e:	0f 90       	pop	r0
    1260:	cf 91       	pop	r28
    1262:	df 91       	pop	r29
    1264:	08 95       	ret

00001266 <MPWM1_enumStop>:

error_state_t MPWM1_enumStop(void)
{
    1266:	df 93       	push	r29
    1268:	cf 93       	push	r28
    126a:	0f 92       	push	r0
    126c:	cd b7       	in	r28, 0x3d	; 61
    126e:	de b7       	in	r29, 0x3e	; 62
    error_state_t Local_ErrorState = TIMER1_OK;
    1270:	8a e0       	ldi	r24, 0x0A	; 10
    1272:	89 83       	std	Y+1, r24	; 0x01
    TCCR1B &= TIMER1_PRESCALLER_MASK;
    1274:	ae e4       	ldi	r26, 0x4E	; 78
    1276:	b0 e0       	ldi	r27, 0x00	; 0
    1278:	ee e4       	ldi	r30, 0x4E	; 78
    127a:	f0 e0       	ldi	r31, 0x00	; 0
    127c:	80 81       	ld	r24, Z
    127e:	88 7f       	andi	r24, 0xF8	; 248
    1280:	8c 93       	st	X, r24
    return Local_ErrorState;
    1282:	89 81       	ldd	r24, Y+1	; 0x01
}
    1284:	0f 90       	pop	r0
    1286:	cf 91       	pop	r28
    1288:	df 91       	pop	r29
    128a:	08 95       	ret

0000128c <MTIMER1_u32GetCounts>:

u32 MTIMER1_u32GetCounts(void)
{
    128c:	df 93       	push	r29
    128e:	cf 93       	push	r28
    1290:	00 d0       	rcall	.+0      	; 0x1292 <MTIMER1_u32GetCounts+0x6>
    1292:	00 d0       	rcall	.+0      	; 0x1294 <MTIMER1_u32GetCounts+0x8>
    1294:	cd b7       	in	r28, 0x3d	; 61
    1296:	de b7       	in	r29, 0x3e	; 62
    TCNT1 = 0;
    1298:	ec e4       	ldi	r30, 0x4C	; 76
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	11 82       	std	Z+1, r1	; 0x01
    129e:	10 82       	st	Z, r1
    u32 count = TCNT1 + (current_ov_count * 65536UL);
    12a0:	ec e4       	ldi	r30, 0x4C	; 76
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	80 81       	ld	r24, Z
    12a6:	91 81       	ldd	r25, Z+1	; 0x01
    12a8:	9c 01       	movw	r18, r24
    12aa:	40 e0       	ldi	r20, 0x00	; 0
    12ac:	50 e0       	ldi	r21, 0x00	; 0
    12ae:	80 91 ce 01 	lds	r24, 0x01CE
    12b2:	90 91 cf 01 	lds	r25, 0x01CF
    12b6:	a0 91 d0 01 	lds	r26, 0x01D0
    12ba:	b0 91 d1 01 	lds	r27, 0x01D1
    12be:	dc 01       	movw	r26, r24
    12c0:	99 27       	eor	r25, r25
    12c2:	88 27       	eor	r24, r24
    12c4:	82 0f       	add	r24, r18
    12c6:	93 1f       	adc	r25, r19
    12c8:	a4 1f       	adc	r26, r20
    12ca:	b5 1f       	adc	r27, r21
    12cc:	89 83       	std	Y+1, r24	; 0x01
    12ce:	9a 83       	std	Y+2, r25	; 0x02
    12d0:	ab 83       	std	Y+3, r26	; 0x03
    12d2:	bc 83       	std	Y+4, r27	; 0x04
    return count;
    12d4:	89 81       	ldd	r24, Y+1	; 0x01
    12d6:	9a 81       	ldd	r25, Y+2	; 0x02
    12d8:	ab 81       	ldd	r26, Y+3	; 0x03
    12da:	bc 81       	ldd	r27, Y+4	; 0x04
}
    12dc:	bc 01       	movw	r22, r24
    12de:	cd 01       	movw	r24, r26
    12e0:	0f 90       	pop	r0
    12e2:	0f 90       	pop	r0
    12e4:	0f 90       	pop	r0
    12e6:	0f 90       	pop	r0
    12e8:	cf 91       	pop	r28
    12ea:	df 91       	pop	r29
    12ec:	08 95       	ret

000012ee <MTIMER1_voidSetTimerValue>:

/************************ Timer 1 ************************/
void MTIMER1_voidSetTimerValue(u16 Copy_u16TimerValue)
{
    12ee:	df 93       	push	r29
    12f0:	cf 93       	push	r28
    12f2:	00 d0       	rcall	.+0      	; 0x12f4 <MTIMER1_voidSetTimerValue+0x6>
    12f4:	cd b7       	in	r28, 0x3d	; 61
    12f6:	de b7       	in	r29, 0x3e	; 62
    12f8:	9a 83       	std	Y+2, r25	; 0x02
    12fa:	89 83       	std	Y+1, r24	; 0x01
    TCNT1 = Copy_u16TimerValue;
    12fc:	ec e4       	ldi	r30, 0x4C	; 76
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	89 81       	ldd	r24, Y+1	; 0x01
    1302:	9a 81       	ldd	r25, Y+2	; 0x02
    1304:	91 83       	std	Z+1, r25	; 0x01
    1306:	80 83       	st	Z, r24
}
    1308:	0f 90       	pop	r0
    130a:	0f 90       	pop	r0
    130c:	cf 91       	pop	r28
    130e:	df 91       	pop	r29
    1310:	08 95       	ret

00001312 <MTIMER1__u16ReadTimerValue>:


u16 MTIMER1__u16ReadTimerValue(void)
{
    1312:	df 93       	push	r29
    1314:	cf 93       	push	r28
    1316:	00 d0       	rcall	.+0      	; 0x1318 <MTIMER1__u16ReadTimerValue+0x6>
    1318:	cd b7       	in	r28, 0x3d	; 61
    131a:	de b7       	in	r29, 0x3e	; 62
    // Read the current Timer1 value
    u16 timerValue = TCNT1;
    131c:	ec e4       	ldi	r30, 0x4C	; 76
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	80 81       	ld	r24, Z
    1322:	91 81       	ldd	r25, Z+1	; 0x01
    1324:	9a 83       	std	Y+2, r25	; 0x02
    1326:	89 83       	std	Y+1, r24	; 0x01
    return timerValue;
    1328:	89 81       	ldd	r24, Y+1	; 0x01
    132a:	9a 81       	ldd	r25, Y+2	; 0x02
}
    132c:	0f 90       	pop	r0
    132e:	0f 90       	pop	r0
    1330:	cf 91       	pop	r28
    1332:	df 91       	pop	r29
    1334:	08 95       	ret

00001336 <MCOUNTER1_voidCounterInit>:

/************************ Counter 1 ************************/
void MCOUNTER1_voidCounterInit(void)
{
    1336:	df 93       	push	r29
    1338:	cf 93       	push	r28
    133a:	cd b7       	in	r28, 0x3d	; 61
    133c:	de b7       	in	r29, 0x3e	; 62
    // Configure Timer1 for counter mode with desired edge mode (you need to define the edge mode)
    TCCR1B &= TIMER1_PRESCALLER_MASK;
    133e:	ae e4       	ldi	r26, 0x4E	; 78
    1340:	b0 e0       	ldi	r27, 0x00	; 0
    1342:	ee e4       	ldi	r30, 0x4E	; 78
    1344:	f0 e0       	ldi	r31, 0x00	; 0
    1346:	80 81       	ld	r24, Z
    1348:	88 7f       	andi	r24, 0xF8	; 248
    134a:	8c 93       	st	X, r24
    TCCR1B |= COUNTER_EDGE_MODE;
    134c:	ae e4       	ldi	r26, 0x4E	; 78
    134e:	b0 e0       	ldi	r27, 0x00	; 0
    1350:	ee e4       	ldi	r30, 0x4E	; 78
    1352:	f0 e0       	ldi	r31, 0x00	; 0
    1354:	80 81       	ld	r24, Z
    1356:	80 61       	ori	r24, 0x10	; 16
    1358:	8c 93       	st	X, r24
}
    135a:	cf 91       	pop	r28
    135c:	df 91       	pop	r29
    135e:	08 95       	ret

00001360 <MCOUNTER1_u8GetCounterValue>:

u8 MCOUNTER1_u8GetCounterValue(void)
{
    1360:	df 93       	push	r29
    1362:	cf 93       	push	r28
    1364:	cd b7       	in	r28, 0x3d	; 61
    1366:	de b7       	in	r29, 0x3e	; 62
    return TCNT1;
    1368:	ec e4       	ldi	r30, 0x4C	; 76
    136a:	f0 e0       	ldi	r31, 0x00	; 0
    136c:	80 81       	ld	r24, Z
    136e:	91 81       	ldd	r25, Z+1	; 0x01
}
    1370:	cf 91       	pop	r28
    1372:	df 91       	pop	r29
    1374:	08 95       	ret

00001376 <ICU_voidInit>:
/******************************* TIMER 1 ICU ********************/

void ICU_voidInit(void)
{
    1376:	df 93       	push	r29
    1378:	cf 93       	push	r28
    137a:	cd b7       	in	r28, 0x3d	; 61
    137c:	de b7       	in	r29, 0x3e	; 62
    // Configure Timer1 for Input Capture Mode
    TCCR1A = 0;  // Clear TCCR1A register
    137e:	ef e4       	ldi	r30, 0x4F	; 79
    1380:	f0 e0       	ldi	r31, 0x00	; 0
    1382:	10 82       	st	Z, r1
    TCCR1B = 0;  // Clear TCCR1B register
    1384:	ee e4       	ldi	r30, 0x4E	; 78
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	10 82       	st	Z, r1

    // Configure the Input Capture Edge (Rising/Falling)
	/* Set trigger source to rising edge initially */
	SET_BIT(TCCR1B,TCCR1B_ICES1);
    138a:	ae e4       	ldi	r26, 0x4E	; 78
    138c:	b0 e0       	ldi	r27, 0x00	; 0
    138e:	ee e4       	ldi	r30, 0x4E	; 78
    1390:	f0 e0       	ldi	r31, 0x00	; 0
    1392:	80 81       	ld	r24, Z
    1394:	80 64       	ori	r24, 0x40	; 64
    1396:	8c 93       	st	X, r24

    // Enable the Input Capture Interrupt
	SET_BIT(TIMSK,TIMSK_TICIE1);
    1398:	a9 e5       	ldi	r26, 0x59	; 89
    139a:	b0 e0       	ldi	r27, 0x00	; 0
    139c:	e9 e5       	ldi	r30, 0x59	; 89
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	80 81       	ld	r24, Z
    13a2:	80 62       	ori	r24, 0x20	; 32
    13a4:	8c 93       	st	X, r24
}
    13a6:	cf 91       	pop	r28
    13a8:	df 91       	pop	r29
    13aa:	08 95       	ret

000013ac <ICU_u8SetTriggerEdge>:

error_state_t ICU_u8SetTriggerEdge(u8 Copy_u8Edge)
{
    13ac:	df 93       	push	r29
    13ae:	cf 93       	push	r28
    13b0:	00 d0       	rcall	.+0      	; 0x13b2 <ICU_u8SetTriggerEdge+0x6>
    13b2:	cd b7       	in	r28, 0x3d	; 61
    13b4:	de b7       	in	r29, 0x3e	; 62
    13b6:	8a 83       	std	Y+2, r24	; 0x02
	error_state_t Local_u8ErrorState = R_OK;
    13b8:	81 e0       	ldi	r24, 0x01	; 1
    13ba:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8Edge == ICU_RISING_EDGE)
    13bc:	8a 81       	ldd	r24, Y+2	; 0x02
    13be:	81 30       	cpi	r24, 0x01	; 1
    13c0:	41 f4       	brne	.+16     	; 0x13d2 <ICU_u8SetTriggerEdge+0x26>
	{
		SET_BIT(TCCR1B,TCCR1B_ICES1);
    13c2:	ae e4       	ldi	r26, 0x4E	; 78
    13c4:	b0 e0       	ldi	r27, 0x00	; 0
    13c6:	ee e4       	ldi	r30, 0x4E	; 78
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	80 81       	ld	r24, Z
    13cc:	80 64       	ori	r24, 0x40	; 64
    13ce:	8c 93       	st	X, r24
    13d0:	0c c0       	rjmp	.+24     	; 0x13ea <ICU_u8SetTriggerEdge+0x3e>
	}
	else if (Copy_u8Edge == ICU_FALLING_EDGE)
    13d2:	8a 81       	ldd	r24, Y+2	; 0x02
    13d4:	88 23       	and	r24, r24
    13d6:	41 f4       	brne	.+16     	; 0x13e8 <ICU_u8SetTriggerEdge+0x3c>
	{
		CLR_BIT(TCCR1B,TCCR1B_ICES1);
    13d8:	ae e4       	ldi	r26, 0x4E	; 78
    13da:	b0 e0       	ldi	r27, 0x00	; 0
    13dc:	ee e4       	ldi	r30, 0x4E	; 78
    13de:	f0 e0       	ldi	r31, 0x00	; 0
    13e0:	80 81       	ld	r24, Z
    13e2:	8f 7b       	andi	r24, 0xBF	; 191
    13e4:	8c 93       	st	X, r24
    13e6:	01 c0       	rjmp	.+2      	; 0x13ea <ICU_u8SetTriggerEdge+0x3e>
	}
	else
	{
		Local_u8ErrorState = R_NOK;
    13e8:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    13ea:	89 81       	ldd	r24, Y+1	; 0x01
}
    13ec:	0f 90       	pop	r0
    13ee:	0f 90       	pop	r0
    13f0:	cf 91       	pop	r28
    13f2:	df 91       	pop	r29
    13f4:	08 95       	ret

000013f6 <ICU_voidEnableInterrupt>:


void ICU_voidEnableInterrupt(void)
{
    13f6:	df 93       	push	r29
    13f8:	cf 93       	push	r28
    13fa:	cd b7       	in	r28, 0x3d	; 61
    13fc:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(TIMSK, TIMSK_TICIE1); // Enable the Timer1 Input Capture interrupt
    13fe:	a9 e5       	ldi	r26, 0x59	; 89
    1400:	b0 e0       	ldi	r27, 0x00	; 0
    1402:	e9 e5       	ldi	r30, 0x59	; 89
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	80 81       	ld	r24, Z
    1408:	80 62       	ori	r24, 0x20	; 32
    140a:	8c 93       	st	X, r24
}
    140c:	cf 91       	pop	r28
    140e:	df 91       	pop	r29
    1410:	08 95       	ret

00001412 <ICU_voidDisableInterrupt>:

void ICU_voidDisableInterrupt(void)
{
    1412:	df 93       	push	r29
    1414:	cf 93       	push	r28
    1416:	cd b7       	in	r28, 0x3d	; 61
    1418:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(TIMSK, TIMSK_TICIE1); // Disable the Timer1 Input Capture interrupt
    141a:	a9 e5       	ldi	r26, 0x59	; 89
    141c:	b0 e0       	ldi	r27, 0x00	; 0
    141e:	e9 e5       	ldi	r30, 0x59	; 89
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	80 81       	ld	r24, Z
    1424:	8f 7d       	andi	r24, 0xDF	; 223
    1426:	8c 93       	st	X, r24
}
    1428:	cf 91       	pop	r28
    142a:	df 91       	pop	r29
    142c:	08 95       	ret

0000142e <ICU_u16ReadInputCapture>:

u16 ICU_u16ReadInputCapture(void)
{
    142e:	df 93       	push	r29
    1430:	cf 93       	push	r28
    1432:	00 d0       	rcall	.+0      	; 0x1434 <ICU_u16ReadInputCapture+0x6>
    1434:	cd b7       	in	r28, 0x3d	; 61
    1436:	de b7       	in	r29, 0x3e	; 62
    u16 capturedValue;

    // Read the Input Capture Register ICR1
    capturedValue = ICR1;
    1438:	e6 e4       	ldi	r30, 0x46	; 70
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	80 81       	ld	r24, Z
    143e:	91 81       	ldd	r25, Z+1	; 0x01
    1440:	9a 83       	std	Y+2, r25	; 0x02
    1442:	89 83       	std	Y+1, r24	; 0x01

    return capturedValue;
    1444:	89 81       	ldd	r24, Y+1	; 0x01
    1446:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1448:	0f 90       	pop	r0
    144a:	0f 90       	pop	r0
    144c:	cf 91       	pop	r28
    144e:	df 91       	pop	r29
    1450:	08 95       	ret

00001452 <ICU_u8GetInputCaptureFlag>:

u8 ICU_u8GetInputCaptureFlag (void)
{
    1452:	df 93       	push	r29
    1454:	cf 93       	push	r28
    1456:	cd b7       	in	r28, 0x3d	; 61
    1458:	de b7       	in	r29, 0x3e	; 62
	return 	GET_BIT(TIFR, TIFR_ICF1);
    145a:	e8 e5       	ldi	r30, 0x58	; 88
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	80 81       	ld	r24, Z
    1460:	82 95       	swap	r24
    1462:	86 95       	lsr	r24
    1464:	87 70       	andi	r24, 0x07	; 7
    1466:	81 70       	andi	r24, 0x01	; 1

}
    1468:	cf 91       	pop	r28
    146a:	df 91       	pop	r29
    146c:	08 95       	ret

0000146e <ICU_u8ClearInputCaptureFlag>:
void ICU_u8ClearInputCaptureFlag (void)
{
    146e:	df 93       	push	r29
    1470:	cf 93       	push	r28
    1472:	cd b7       	in	r28, 0x3d	; 61
    1474:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIFR, TIFR_ICF1);
    1476:	a8 e5       	ldi	r26, 0x58	; 88
    1478:	b0 e0       	ldi	r27, 0x00	; 0
    147a:	e8 e5       	ldi	r30, 0x58	; 88
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	80 81       	ld	r24, Z
    1480:	80 62       	ori	r24, 0x20	; 32
    1482:	8c 93       	st	X, r24
}
    1484:	cf 91       	pop	r28
    1486:	df 91       	pop	r29
    1488:	08 95       	ret

0000148a <ICU_voidNoiseCanceler>:

void ICU_voidNoiseCanceler(void)
{
    148a:	df 93       	push	r29
    148c:	cf 93       	push	r28
    148e:	cd b7       	in	r28, 0x3d	; 61
    1490:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR1B, TCCR1B_ICNC1);
    1492:	ae e4       	ldi	r26, 0x4E	; 78
    1494:	b0 e0       	ldi	r27, 0x00	; 0
    1496:	ee e4       	ldi	r30, 0x4E	; 78
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	80 81       	ld	r24, Z
    149c:	80 68       	ori	r24, 0x80	; 128
    149e:	8c 93       	st	X, r24
}
    14a0:	cf 91       	pop	r28
    14a2:	df 91       	pop	r29
    14a4:	08 95       	ret

000014a6 <ICU_u8SetCallBack>:

error_state_t ICU_u8SetCallBack(void (*Copy_pvCallBackFunc)(void))
{
    14a6:	df 93       	push	r29
    14a8:	cf 93       	push	r28
    14aa:	00 d0       	rcall	.+0      	; 0x14ac <ICU_u8SetCallBack+0x6>
    14ac:	0f 92       	push	r0
    14ae:	cd b7       	in	r28, 0x3d	; 61
    14b0:	de b7       	in	r29, 0x3e	; 62
    14b2:	9b 83       	std	Y+3, r25	; 0x03
    14b4:	8a 83       	std	Y+2, r24	; 0x02
    error_state_t Local_u8ErrorState = TIMER1_OK;
    14b6:	8a e0       	ldi	r24, 0x0A	; 10
    14b8:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_pvCallBackFunc != NULL)
    14ba:	8a 81       	ldd	r24, Y+2	; 0x02
    14bc:	9b 81       	ldd	r25, Y+3	; 0x03
    14be:	00 97       	sbiw	r24, 0x00	; 0
    14c0:	39 f0       	breq	.+14     	; 0x14d0 <ICU_u8SetCallBack+0x2a>
	{
		ICU_pvCallBackFunc = Copy_pvCallBackFunc;
    14c2:	8a 81       	ldd	r24, Y+2	; 0x02
    14c4:	9b 81       	ldd	r25, Y+3	; 0x03
    14c6:	90 93 c1 01 	sts	0x01C1, r25
    14ca:	80 93 c0 01 	sts	0x01C0, r24
    14ce:	02 c0       	rjmp	.+4      	; 0x14d4 <ICU_u8SetCallBack+0x2e>
	}
	else
	{
		Local_u8ErrorState = NULL_POINTER;
    14d0:	86 e0       	ldi	r24, 0x06	; 6
    14d2:	89 83       	std	Y+1, r24	; 0x01
	}



    return Local_u8ErrorState;
    14d4:	89 81       	ldd	r24, Y+1	; 0x01
}
    14d6:	0f 90       	pop	r0
    14d8:	0f 90       	pop	r0
    14da:	0f 90       	pop	r0
    14dc:	cf 91       	pop	r28
    14de:	df 91       	pop	r29
    14e0:	08 95       	ret

000014e2 <__vector_9>:


/********************************* ISR Timer/Counter1 Overflow  ***********************************/
#if TIMER1_MODE == TIMER1_NORMAL_MODE
ISR_ST(TIMER1_OVF_VECTOR)
{
    14e2:	1f 92       	push	r1
    14e4:	0f 92       	push	r0
    14e6:	0f b6       	in	r0, 0x3f	; 63
    14e8:	0f 92       	push	r0
    14ea:	11 24       	eor	r1, r1
    14ec:	2f 93       	push	r18
    14ee:	3f 93       	push	r19
    14f0:	4f 93       	push	r20
    14f2:	5f 93       	push	r21
    14f4:	6f 93       	push	r22
    14f6:	7f 93       	push	r23
    14f8:	8f 93       	push	r24
    14fa:	9f 93       	push	r25
    14fc:	af 93       	push	r26
    14fe:	bf 93       	push	r27
    1500:	ef 93       	push	r30
    1502:	ff 93       	push	r31
    1504:	df 93       	push	r29
    1506:	cf 93       	push	r28
    1508:	cd b7       	in	r28, 0x3d	; 61
    150a:	de b7       	in	r29, 0x3e	; 62
	MDIO_SetPinValue(DIO_u8PORTB, DIO_u8PIN7, DIO_u8PIN_HIGH); // for Debugging
    150c:	81 e0       	ldi	r24, 0x01	; 1
    150e:	67 e0       	ldi	r22, 0x07	; 7
    1510:	41 e0       	ldi	r20, 0x01	; 1
    1512:	0e 94 a8 10 	call	0x2150	; 0x2150 <MDIO_SetPinValue>

    static u32 Local_u32Counter = 0;
    Local_u32Counter++;
    1516:	80 91 ca 01 	lds	r24, 0x01CA
    151a:	90 91 cb 01 	lds	r25, 0x01CB
    151e:	a0 91 cc 01 	lds	r26, 0x01CC
    1522:	b0 91 cd 01 	lds	r27, 0x01CD
    1526:	01 96       	adiw	r24, 0x01	; 1
    1528:	a1 1d       	adc	r26, r1
    152a:	b1 1d       	adc	r27, r1
    152c:	80 93 ca 01 	sts	0x01CA, r24
    1530:	90 93 cb 01 	sts	0x01CB, r25
    1534:	a0 93 cc 01 	sts	0x01CC, r26
    1538:	b0 93 cd 01 	sts	0x01CD, r27
    current_ov_count = Local_u32Counter;
    153c:	80 91 ca 01 	lds	r24, 0x01CA
    1540:	90 91 cb 01 	lds	r25, 0x01CB
    1544:	a0 91 cc 01 	lds	r26, 0x01CC
    1548:	b0 91 cd 01 	lds	r27, 0x01CD
    154c:	80 93 ce 01 	sts	0x01CE, r24
    1550:	90 93 cf 01 	sts	0x01CF, r25
    1554:	a0 93 d0 01 	sts	0x01D0, r26
    1558:	b0 93 d1 01 	sts	0x01D1, r27

    if (Local_u32Counter == NORMAL_u32NoOfOverFlow)
    155c:	20 91 ca 01 	lds	r18, 0x01CA
    1560:	30 91 cb 01 	lds	r19, 0x01CB
    1564:	40 91 cc 01 	lds	r20, 0x01CC
    1568:	50 91 cd 01 	lds	r21, 0x01CD
    156c:	80 91 c4 01 	lds	r24, 0x01C4
    1570:	90 91 c5 01 	lds	r25, 0x01C5
    1574:	a0 91 c6 01 	lds	r26, 0x01C6
    1578:	b0 91 c7 01 	lds	r27, 0x01C7
    157c:	28 17       	cp	r18, r24
    157e:	39 07       	cpc	r19, r25
    1580:	4a 07       	cpc	r20, r26
    1582:	5b 07       	cpc	r21, r27
    1584:	a9 f4       	brne	.+42     	; 0x15b0 <__vector_9+0xce>
    {

        TCNT1 = NORMAL_u16NoOfRemTicks;
    1586:	ec e4       	ldi	r30, 0x4C	; 76
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	80 91 c8 01 	lds	r24, 0x01C8
    158e:	90 91 c9 01 	lds	r25, 0x01C9
    1592:	91 83       	std	Z+1, r25	; 0x01
    1594:	80 83       	st	Z, r24
        TIMER1_pvCallBackNotificationFunc();
    1596:	e0 91 c2 01 	lds	r30, 0x01C2
    159a:	f0 91 c3 01 	lds	r31, 0x01C3
    159e:	09 95       	icall
        Local_u32Counter = 0;
    15a0:	10 92 ca 01 	sts	0x01CA, r1
    15a4:	10 92 cb 01 	sts	0x01CB, r1
    15a8:	10 92 cc 01 	sts	0x01CC, r1
    15ac:	10 92 cd 01 	sts	0x01CD, r1
    }
}
    15b0:	cf 91       	pop	r28
    15b2:	df 91       	pop	r29
    15b4:	ff 91       	pop	r31
    15b6:	ef 91       	pop	r30
    15b8:	bf 91       	pop	r27
    15ba:	af 91       	pop	r26
    15bc:	9f 91       	pop	r25
    15be:	8f 91       	pop	r24
    15c0:	7f 91       	pop	r23
    15c2:	6f 91       	pop	r22
    15c4:	5f 91       	pop	r21
    15c6:	4f 91       	pop	r20
    15c8:	3f 91       	pop	r19
    15ca:	2f 91       	pop	r18
    15cc:	0f 90       	pop	r0
    15ce:	0f be       	out	0x3f, r0	; 63
    15d0:	0f 90       	pop	r0
    15d2:	1f 90       	pop	r1
    15d4:	18 95       	reti

000015d6 <__vector_6>:
    }
}
#endif
/********************************* ICU_ISR  ***********************************/
ISR_ST(TIMER1_CAPT_VECTOR)
{
    15d6:	1f 92       	push	r1
    15d8:	0f 92       	push	r0
    15da:	0f b6       	in	r0, 0x3f	; 63
    15dc:	0f 92       	push	r0
    15de:	11 24       	eor	r1, r1
    15e0:	2f 93       	push	r18
    15e2:	3f 93       	push	r19
    15e4:	4f 93       	push	r20
    15e6:	5f 93       	push	r21
    15e8:	6f 93       	push	r22
    15ea:	7f 93       	push	r23
    15ec:	8f 93       	push	r24
    15ee:	9f 93       	push	r25
    15f0:	af 93       	push	r26
    15f2:	bf 93       	push	r27
    15f4:	ef 93       	push	r30
    15f6:	ff 93       	push	r31
    15f8:	df 93       	push	r29
    15fa:	cf 93       	push	r28
    15fc:	cd b7       	in	r28, 0x3d	; 61
    15fe:	de b7       	in	r29, 0x3e	; 62

	if(ICU_pvCallBackFunc != NULL)
    1600:	80 91 c0 01 	lds	r24, 0x01C0
    1604:	90 91 c1 01 	lds	r25, 0x01C1
    1608:	00 97       	sbiw	r24, 0x00	; 0
    160a:	29 f0       	breq	.+10     	; 0x1616 <__vector_6+0x40>
	{
		ICU_pvCallBackFunc();
    160c:	e0 91 c0 01 	lds	r30, 0x01C0
    1610:	f0 91 c1 01 	lds	r31, 0x01C1
    1614:	09 95       	icall
	}
}
    1616:	cf 91       	pop	r28
    1618:	df 91       	pop	r29
    161a:	ff 91       	pop	r31
    161c:	ef 91       	pop	r30
    161e:	bf 91       	pop	r27
    1620:	af 91       	pop	r26
    1622:	9f 91       	pop	r25
    1624:	8f 91       	pop	r24
    1626:	7f 91       	pop	r23
    1628:	6f 91       	pop	r22
    162a:	5f 91       	pop	r21
    162c:	4f 91       	pop	r20
    162e:	3f 91       	pop	r19
    1630:	2f 91       	pop	r18
    1632:	0f 90       	pop	r0
    1634:	0f be       	out	0x3f, r0	; 63
    1636:	0f 90       	pop	r0
    1638:	1f 90       	pop	r1
    163a:	18 95       	reti

0000163c <MTIMER0_voidInit>:
#elif TIMER0_MODE == TIMER0_CTC_MODE
static u32 	CTC_u32NoOfCompMatch;
#endif
/**************************** Timer0 Init *****************************/
void MTIMER0_voidInit(void)
{
    163c:	df 93       	push	r29
    163e:	cf 93       	push	r28
    1640:	cd b7       	in	r28, 0x3d	; 61
    1642:	de b7       	in	r29, 0x3e	; 62
	/* Enable CTC INT */
	SET_BIT(TIMSK,TIMSK_OCIE0);

	#endif

}
    1644:	cf 91       	pop	r28
    1646:	df 91       	pop	r29
    1648:	08 95       	ret

0000164a <MTIMER0_enumSetTime_ms>:

/**************************** End Timer0 Init *****************************/

/********************** Timer0 Set Time in ms *****************************/
error_state_t MTIMER0_enumSetTime_ms(u32 Copy_u32DesiredTime, void(*Copy_pvCallBackFunc)(void))
{
    164a:	df 93       	push	r29
    164c:	cf 93       	push	r28
    164e:	cd b7       	in	r28, 0x3d	; 61
    1650:	de b7       	in	r29, 0x3e	; 62
    1652:	63 97       	sbiw	r28, 0x13	; 19
    1654:	0f b6       	in	r0, 0x3f	; 63
    1656:	f8 94       	cli
    1658:	de bf       	out	0x3e, r29	; 62
    165a:	0f be       	out	0x3f, r0	; 63
    165c:	cd bf       	out	0x3d, r28	; 61
    165e:	6e 87       	std	Y+14, r22	; 0x0e
    1660:	7f 87       	std	Y+15, r23	; 0x0f
    1662:	88 8b       	std	Y+16, r24	; 0x10
    1664:	99 8b       	std	Y+17, r25	; 0x11
    1666:	5b 8b       	std	Y+19, r21	; 0x13
    1668:	4a 8b       	std	Y+18, r20	; 0x12
	error_state_t Local_ErrorState = TIMER0_OK;
    166a:	82 e0       	ldi	r24, 0x02	; 2
    166c:	8d 87       	std	Y+13, r24	; 0x0d

	//initialize callback function globally
	TIMER0_pvCallBackNotificationFunc = Copy_pvCallBackFunc;
    166e:	8a 89       	ldd	r24, Y+18	; 0x12
    1670:	9b 89       	ldd	r25, Y+19	; 0x13
    1672:	90 93 d3 01 	sts	0x01D3, r25
    1676:	80 93 d2 01 	sts	0x01D2, r24
	/* Get prescaller value */
	f32 Local_u32PrescDivFact = (f32)TIMER0_PRESCALLER_ARR[TIMER0_PRESCALLER_SELEC - 1];
    167a:	80 91 90 01 	lds	r24, 0x0190
    167e:	90 91 91 01 	lds	r25, 0x0191
    1682:	cc 01       	movw	r24, r24
    1684:	a0 e0       	ldi	r26, 0x00	; 0
    1686:	b0 e0       	ldi	r27, 0x00	; 0
    1688:	bc 01       	movw	r22, r24
    168a:	cd 01       	movw	r24, r26
    168c:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    1690:	dc 01       	movw	r26, r24
    1692:	cb 01       	movw	r24, r22
    1694:	89 87       	std	Y+9, r24	; 0x09
    1696:	9a 87       	std	Y+10, r25	; 0x0a
    1698:	ab 87       	std	Y+11, r26	; 0x0b
    169a:	bc 87       	std	Y+12, r27	; 0x0c
	// calculate total tick time in Micro Second
	f32 Local_u32TickTime = Local_u32PrescDivFact / CRYSTAL_FREQ;
    169c:	69 85       	ldd	r22, Y+9	; 0x09
    169e:	7a 85       	ldd	r23, Y+10	; 0x0a
    16a0:	8b 85       	ldd	r24, Y+11	; 0x0b
    16a2:	9c 85       	ldd	r25, Y+12	; 0x0c
    16a4:	20 e0       	ldi	r18, 0x00	; 0
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	40 e8       	ldi	r20, 0x80	; 128
    16aa:	51 e4       	ldi	r21, 0x41	; 65
    16ac:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    16b0:	dc 01       	movw	r26, r24
    16b2:	cb 01       	movw	r24, r22
    16b4:	8d 83       	std	Y+5, r24	; 0x05
    16b6:	9e 83       	std	Y+6, r25	; 0x06
    16b8:	af 83       	std	Y+7, r26	; 0x07
    16ba:	b8 87       	std	Y+8, r27	; 0x08
	// Calculate total tick number
	u32 Local_u32TotalTicks = (Copy_u32DesiredTime *1000 ) / Local_u32TickTime;
    16bc:	8e 85       	ldd	r24, Y+14	; 0x0e
    16be:	9f 85       	ldd	r25, Y+15	; 0x0f
    16c0:	a8 89       	ldd	r26, Y+16	; 0x10
    16c2:	b9 89       	ldd	r27, Y+17	; 0x11
    16c4:	28 ee       	ldi	r18, 0xE8	; 232
    16c6:	33 e0       	ldi	r19, 0x03	; 3
    16c8:	40 e0       	ldi	r20, 0x00	; 0
    16ca:	50 e0       	ldi	r21, 0x00	; 0
    16cc:	bc 01       	movw	r22, r24
    16ce:	cd 01       	movw	r24, r26
    16d0:	0e 94 b0 25 	call	0x4b60	; 0x4b60 <__mulsi3>
    16d4:	dc 01       	movw	r26, r24
    16d6:	cb 01       	movw	r24, r22
    16d8:	bc 01       	movw	r22, r24
    16da:	cd 01       	movw	r24, r26
    16dc:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    16e0:	dc 01       	movw	r26, r24
    16e2:	cb 01       	movw	r24, r22
    16e4:	bc 01       	movw	r22, r24
    16e6:	cd 01       	movw	r24, r26
    16e8:	2d 81       	ldd	r18, Y+5	; 0x05
    16ea:	3e 81       	ldd	r19, Y+6	; 0x06
    16ec:	4f 81       	ldd	r20, Y+7	; 0x07
    16ee:	58 85       	ldd	r21, Y+8	; 0x08
    16f0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    16f4:	dc 01       	movw	r26, r24
    16f6:	cb 01       	movw	r24, r22
    16f8:	bc 01       	movw	r22, r24
    16fa:	cd 01       	movw	r24, r26
    16fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1700:	dc 01       	movw	r26, r24
    1702:	cb 01       	movw	r24, r22
    1704:	89 83       	std	Y+1, r24	; 0x01
    1706:	9a 83       	std	Y+2, r25	; 0x02
    1708:	ab 83       	std	Y+3, r26	; 0x03
    170a:	bc 83       	std	Y+4, r27	; 0x04
	CTC_u32NoOfCompMatch = Local_u32TotalTicks /Local_u8DivisionValue;
	OCR0 = Local_u8DivisionValue ;

	#endif
	
	return Local_ErrorState;
    170c:	8d 85       	ldd	r24, Y+13	; 0x0d
}
    170e:	63 96       	adiw	r28, 0x13	; 19
    1710:	0f b6       	in	r0, 0x3f	; 63
    1712:	f8 94       	cli
    1714:	de bf       	out	0x3e, r29	; 62
    1716:	0f be       	out	0x3f, r0	; 63
    1718:	cd bf       	out	0x3d, r28	; 61
    171a:	cf 91       	pop	r28
    171c:	df 91       	pop	r29
    171e:	08 95       	ret

00001720 <MTIMER0_enumStart>:

/********************* End Timer0 Set Time in ms **************************/

/*********************   Timer0 Start   **************************/
error_state_t MTIMER0_enumStart(void)
{
    1720:	df 93       	push	r29
    1722:	cf 93       	push	r28
    1724:	0f 92       	push	r0
    1726:	cd b7       	in	r28, 0x3d	; 61
    1728:	de b7       	in	r29, 0x3e	; 62
	error_state_t Local_ErrorState = TIMER0_OK;
    172a:	82 e0       	ldi	r24, 0x02	; 2
    172c:	89 83       	std	Y+1, r24	; 0x01
	TCCR0 &= TIMER0_PRESCALLER_MASK;
    172e:	a3 e5       	ldi	r26, 0x53	; 83
    1730:	b0 e0       	ldi	r27, 0x00	; 0
    1732:	e3 e5       	ldi	r30, 0x53	; 83
    1734:	f0 e0       	ldi	r31, 0x00	; 0
    1736:	80 81       	ld	r24, Z
    1738:	88 7f       	andi	r24, 0xF8	; 248
    173a:	8c 93       	st	X, r24
	TCCR0 |= TIMER0_PRESCALLER_SELEC;
    173c:	a3 e5       	ldi	r26, 0x53	; 83
    173e:	b0 e0       	ldi	r27, 0x00	; 0
    1740:	e3 e5       	ldi	r30, 0x53	; 83
    1742:	f0 e0       	ldi	r31, 0x00	; 0
    1744:	80 81       	ld	r24, Z
    1746:	83 60       	ori	r24, 0x03	; 3
    1748:	8c 93       	st	X, r24
	return Local_ErrorState;
    174a:	89 81       	ldd	r24, Y+1	; 0x01
}
    174c:	0f 90       	pop	r0
    174e:	cf 91       	pop	r28
    1750:	df 91       	pop	r29
    1752:	08 95       	ret

00001754 <MTIMER0_enumStop>:
/********************* End Timer0 Start **************************/

/*********************   Timer0 Stop   **************************/
error_state_t MTIMER0_enumStop(void)
{
    1754:	df 93       	push	r29
    1756:	cf 93       	push	r28
    1758:	0f 92       	push	r0
    175a:	cd b7       	in	r28, 0x3d	; 61
    175c:	de b7       	in	r29, 0x3e	; 62
	error_state_t Local_ErrorState = TIMER0_OK;
    175e:	82 e0       	ldi	r24, 0x02	; 2
    1760:	89 83       	std	Y+1, r24	; 0x01
	TCCR0 &= TIMER0_PRESCALLER_MASK;
    1762:	a3 e5       	ldi	r26, 0x53	; 83
    1764:	b0 e0       	ldi	r27, 0x00	; 0
    1766:	e3 e5       	ldi	r30, 0x53	; 83
    1768:	f0 e0       	ldi	r31, 0x00	; 0
    176a:	80 81       	ld	r24, Z
    176c:	88 7f       	andi	r24, 0xF8	; 248
    176e:	8c 93       	st	X, r24
	return Local_ErrorState;
    1770:	89 81       	ldd	r24, Y+1	; 0x01
}
    1772:	0f 90       	pop	r0
    1774:	cf 91       	pop	r28
    1776:	df 91       	pop	r29
    1778:	08 95       	ret

0000177a <MCOUNTER0_voidCounterInit>:
/********************* End Timer0 Stop **************************/

/************************ Counter 0 ****************************/
void MCOUNTER0_voidCounterInit(void)
{
    177a:	df 93       	push	r29
    177c:	cf 93       	push	r28
    177e:	cd b7       	in	r28, 0x3d	; 61
    1780:	de b7       	in	r29, 0x3e	; 62
	#if   COUNTER_0_MODE == COUNTER_0_FALLING_EDGE_MODE
		TCCR0 &= TIMER0_PRESCALLER_MASK;
    1782:	a3 e5       	ldi	r26, 0x53	; 83
    1784:	b0 e0       	ldi	r27, 0x00	; 0
    1786:	e3 e5       	ldi	r30, 0x53	; 83
    1788:	f0 e0       	ldi	r31, 0x00	; 0
    178a:	80 81       	ld	r24, Z
    178c:	88 7f       	andi	r24, 0xF8	; 248
    178e:	8c 93       	st	X, r24
		TCCR0 |= COUNTER_FALLING_EDGE;						
    1790:	a3 e5       	ldi	r26, 0x53	; 83
    1792:	b0 e0       	ldi	r27, 0x00	; 0
    1794:	e3 e5       	ldi	r30, 0x53	; 83
    1796:	f0 e0       	ldi	r31, 0x00	; 0
    1798:	80 81       	ld	r24, Z
    179a:	86 60       	ori	r24, 0x06	; 6
    179c:	8c 93       	st	X, r24
	#elif COUNTER_0_MODE == COUNTER_0_RISING_EDGE_MODE
		TCCR0 &= TIMER0_PRESCALLER_MASK;
		TCCR0 |= COUNTER_RISING_EDGE;
	#endif
}
    179e:	cf 91       	pop	r28
    17a0:	df 91       	pop	r29
    17a2:	08 95       	ret

000017a4 <MCOUNTER0_u8GetCounterValue>:

u8 MCOUNTER0_u8GetCounterValue(void){
    17a4:	df 93       	push	r29
    17a6:	cf 93       	push	r28
    17a8:	cd b7       	in	r28, 0x3d	; 61
    17aa:	de b7       	in	r29, 0x3e	; 62

	return TCNT0;
    17ac:	e2 e5       	ldi	r30, 0x52	; 82
    17ae:	f0 e0       	ldi	r31, 0x00	; 0
    17b0:	80 81       	ld	r24, Z
}
    17b2:	cf 91       	pop	r28
    17b4:	df 91       	pop	r29
    17b6:	08 95       	ret

000017b8 <MTIMER0_u8GetTimerValue>:


u8   MTIMER0_u8GetTimerValue(void)
{
    17b8:	df 93       	push	r29
    17ba:	cf 93       	push	r28
    17bc:	cd b7       	in	r28, 0x3d	; 61
    17be:	de b7       	in	r29, 0x3e	; 62
	return TCNT0;
    17c0:	e2 e5       	ldi	r30, 0x52	; 82
    17c2:	f0 e0       	ldi	r31, 0x00	; 0
    17c4:	80 81       	ld	r24, Z
}
    17c6:	cf 91       	pop	r28
    17c8:	df 91       	pop	r29
    17ca:	08 95       	ret

000017cc <MTIMER0_voidSetTimerValue>:
void MTIMER0_voidSetTimerValue(u8 Copy_u8TimerValue)
{
    17cc:	df 93       	push	r29
    17ce:	cf 93       	push	r28
    17d0:	0f 92       	push	r0
    17d2:	cd b7       	in	r28, 0x3d	; 61
    17d4:	de b7       	in	r29, 0x3e	; 62
    17d6:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Copy_u8TimerValue;
    17d8:	e2 e5       	ldi	r30, 0x52	; 82
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	89 81       	ldd	r24, Y+1	; 0x01
    17de:	80 83       	st	Z, r24
}
    17e0:	0f 90       	pop	r0
    17e2:	cf 91       	pop	r28
    17e4:	df 91       	pop	r29
    17e6:	08 95       	ret

000017e8 <MTIMER0_u32GetCounts>:

u32 MTIMER0_u32GetCounts(void)
{
    17e8:	df 93       	push	r29
    17ea:	cf 93       	push	r28
    17ec:	00 d0       	rcall	.+0      	; 0x17ee <MTIMER0_u32GetCounts+0x6>
    17ee:	00 d0       	rcall	.+0      	; 0x17f0 <MTIMER0_u32GetCounts+0x8>
    17f0:	cd b7       	in	r28, 0x3d	; 61
    17f2:	de b7       	in	r29, 0x3e	; 62
	TCNT0 =0;
    17f4:	e2 e5       	ldi	r30, 0x52	; 82
    17f6:	f0 e0       	ldi	r31, 0x00	; 0
    17f8:	10 82       	st	Z, r1
	u32 count = TCNT0 + current_ov_count*256;
    17fa:	e2 e5       	ldi	r30, 0x52	; 82
    17fc:	f0 e0       	ldi	r31, 0x00	; 0
    17fe:	80 81       	ld	r24, Z
    1800:	28 2f       	mov	r18, r24
    1802:	30 e0       	ldi	r19, 0x00	; 0
    1804:	40 e0       	ldi	r20, 0x00	; 0
    1806:	50 e0       	ldi	r21, 0x00	; 0
    1808:	80 91 d4 01 	lds	r24, 0x01D4
    180c:	90 91 d5 01 	lds	r25, 0x01D5
    1810:	a0 91 d6 01 	lds	r26, 0x01D6
    1814:	b0 91 d7 01 	lds	r27, 0x01D7
    1818:	ba 2f       	mov	r27, r26
    181a:	a9 2f       	mov	r26, r25
    181c:	98 2f       	mov	r25, r24
    181e:	88 27       	eor	r24, r24
    1820:	82 0f       	add	r24, r18
    1822:	93 1f       	adc	r25, r19
    1824:	a4 1f       	adc	r26, r20
    1826:	b5 1f       	adc	r27, r21
    1828:	89 83       	std	Y+1, r24	; 0x01
    182a:	9a 83       	std	Y+2, r25	; 0x02
    182c:	ab 83       	std	Y+3, r26	; 0x03
    182e:	bc 83       	std	Y+4, r27	; 0x04
	return count;
    1830:	89 81       	ldd	r24, Y+1	; 0x01
    1832:	9a 81       	ldd	r25, Y+2	; 0x02
    1834:	ab 81       	ldd	r26, Y+3	; 0x03
    1836:	bc 81       	ldd	r27, Y+4	; 0x04

}
    1838:	bc 01       	movw	r22, r24
    183a:	cd 01       	movw	r24, r26
    183c:	0f 90       	pop	r0
    183e:	0f 90       	pop	r0
    1840:	0f 90       	pop	r0
    1842:	0f 90       	pop	r0
    1844:	cf 91       	pop	r28
    1846:	df 91       	pop	r29
    1848:	08 95       	ret

0000184a <MTimer0_voidEnableInt>:

void MTimer0_voidEnableInt(u8 INT_ID)
{
    184a:	df 93       	push	r29
    184c:	cf 93       	push	r28
    184e:	00 d0       	rcall	.+0      	; 0x1850 <MTimer0_voidEnableInt+0x6>
    1850:	0f 92       	push	r0
    1852:	cd b7       	in	r28, 0x3d	; 61
    1854:	de b7       	in	r29, 0x3e	; 62
    1856:	89 83       	std	Y+1, r24	; 0x01
	switch(INT_ID)
    1858:	89 81       	ldd	r24, Y+1	; 0x01
    185a:	28 2f       	mov	r18, r24
    185c:	30 e0       	ldi	r19, 0x00	; 0
    185e:	3b 83       	std	Y+3, r19	; 0x03
    1860:	2a 83       	std	Y+2, r18	; 0x02
    1862:	8a 81       	ldd	r24, Y+2	; 0x02
    1864:	9b 81       	ldd	r25, Y+3	; 0x03
    1866:	00 97       	sbiw	r24, 0x00	; 0
    1868:	31 f0       	breq	.+12     	; 0x1876 <MTimer0_voidEnableInt+0x2c>
    186a:	2a 81       	ldd	r18, Y+2	; 0x02
    186c:	3b 81       	ldd	r19, Y+3	; 0x03
    186e:	21 30       	cpi	r18, 0x01	; 1
    1870:	31 05       	cpc	r19, r1
    1872:	49 f0       	breq	.+18     	; 0x1886 <MTimer0_voidEnableInt+0x3c>
    1874:	0f c0       	rjmp	.+30     	; 0x1894 <MTimer0_voidEnableInt+0x4a>
	{
	case INT_OV_MODE:
		SET_BIT(TIMSK, TIMSK_TOIE0);
    1876:	a9 e5       	ldi	r26, 0x59	; 89
    1878:	b0 e0       	ldi	r27, 0x00	; 0
    187a:	e9 e5       	ldi	r30, 0x59	; 89
    187c:	f0 e0       	ldi	r31, 0x00	; 0
    187e:	80 81       	ld	r24, Z
    1880:	81 60       	ori	r24, 0x01	; 1
    1882:	8c 93       	st	X, r24
    1884:	07 c0       	rjmp	.+14     	; 0x1894 <MTimer0_voidEnableInt+0x4a>

		break;
	case INT_COMP_MODE:
		SET_BIT(TIMSK, TIMSK_OCIE0);
    1886:	a9 e5       	ldi	r26, 0x59	; 89
    1888:	b0 e0       	ldi	r27, 0x00	; 0
    188a:	e9 e5       	ldi	r30, 0x59	; 89
    188c:	f0 e0       	ldi	r31, 0x00	; 0
    188e:	80 81       	ld	r24, Z
    1890:	82 60       	ori	r24, 0x02	; 2
    1892:	8c 93       	st	X, r24
		break;

	}
}
    1894:	0f 90       	pop	r0
    1896:	0f 90       	pop	r0
    1898:	0f 90       	pop	r0
    189a:	cf 91       	pop	r28
    189c:	df 91       	pop	r29
    189e:	08 95       	ret

000018a0 <MTimer0_voidDisableInt>:


void MTimer0_voidDisableInt(u8 INT_ID)
{
    18a0:	df 93       	push	r29
    18a2:	cf 93       	push	r28
    18a4:	00 d0       	rcall	.+0      	; 0x18a6 <MTimer0_voidDisableInt+0x6>
    18a6:	0f 92       	push	r0
    18a8:	cd b7       	in	r28, 0x3d	; 61
    18aa:	de b7       	in	r29, 0x3e	; 62
    18ac:	89 83       	std	Y+1, r24	; 0x01
	switch(INT_ID)
    18ae:	89 81       	ldd	r24, Y+1	; 0x01
    18b0:	28 2f       	mov	r18, r24
    18b2:	30 e0       	ldi	r19, 0x00	; 0
    18b4:	3b 83       	std	Y+3, r19	; 0x03
    18b6:	2a 83       	std	Y+2, r18	; 0x02
    18b8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ba:	9b 81       	ldd	r25, Y+3	; 0x03
    18bc:	00 97       	sbiw	r24, 0x00	; 0
    18be:	31 f0       	breq	.+12     	; 0x18cc <MTimer0_voidDisableInt+0x2c>
    18c0:	2a 81       	ldd	r18, Y+2	; 0x02
    18c2:	3b 81       	ldd	r19, Y+3	; 0x03
    18c4:	21 30       	cpi	r18, 0x01	; 1
    18c6:	31 05       	cpc	r19, r1
    18c8:	49 f0       	breq	.+18     	; 0x18dc <MTimer0_voidDisableInt+0x3c>
    18ca:	0f c0       	rjmp	.+30     	; 0x18ea <MTimer0_voidDisableInt+0x4a>
	{
	case INT_OV_MODE:
		CLR_BIT(TIMSK, TIMSK_TOIE0);
    18cc:	a9 e5       	ldi	r26, 0x59	; 89
    18ce:	b0 e0       	ldi	r27, 0x00	; 0
    18d0:	e9 e5       	ldi	r30, 0x59	; 89
    18d2:	f0 e0       	ldi	r31, 0x00	; 0
    18d4:	80 81       	ld	r24, Z
    18d6:	8e 7f       	andi	r24, 0xFE	; 254
    18d8:	8c 93       	st	X, r24
    18da:	07 c0       	rjmp	.+14     	; 0x18ea <MTimer0_voidDisableInt+0x4a>

		break;
	case INT_COMP_MODE:
		CLR_BIT(TIMSK, TIMSK_OCIE0);
    18dc:	a9 e5       	ldi	r26, 0x59	; 89
    18de:	b0 e0       	ldi	r27, 0x00	; 0
    18e0:	e9 e5       	ldi	r30, 0x59	; 89
    18e2:	f0 e0       	ldi	r31, 0x00	; 0
    18e4:	80 81       	ld	r24, Z
    18e6:	8d 7f       	andi	r24, 0xFD	; 253
    18e8:	8c 93       	st	X, r24
		break;

	}
}
    18ea:	0f 90       	pop	r0
    18ec:	0f 90       	pop	r0
    18ee:	0f 90       	pop	r0
    18f0:	cf 91       	pop	r28
    18f2:	df 91       	pop	r29
    18f4:	08 95       	ret

000018f6 <MPWM0_enumInit>:
/******************************************************************************************/
/*************************************** PWM FUNCTION *************************************/
/******************************************************************************************/

error_state_t MPWM0_enumInit(void)
{
    18f6:	df 93       	push	r29
    18f8:	cf 93       	push	r28
    18fa:	0f 92       	push	r0
    18fc:	cd b7       	in	r28, 0x3d	; 61
    18fe:	de b7       	in	r29, 0x3e	; 62
	error_state_t Local_ErrorState = TIMER0_OK;
    1900:	82 e0       	ldi	r24, 0x02	; 2
    1902:	89 83       	std	Y+1, r24	; 0x01
	#if TIMER0_MODE == TIMER0_FAST_PWM
	SET_BIT(TCCR0,TCCR0_WGM00);
    1904:	a3 e5       	ldi	r26, 0x53	; 83
    1906:	b0 e0       	ldi	r27, 0x00	; 0
    1908:	e3 e5       	ldi	r30, 0x53	; 83
    190a:	f0 e0       	ldi	r31, 0x00	; 0
    190c:	80 81       	ld	r24, Z
    190e:	80 64       	ori	r24, 0x40	; 64
    1910:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_WGM01);
    1912:	a3 e5       	ldi	r26, 0x53	; 83
    1914:	b0 e0       	ldi	r27, 0x00	; 0
    1916:	e3 e5       	ldi	r30, 0x53	; 83
    1918:	f0 e0       	ldi	r31, 0x00	; 0
    191a:	80 81       	ld	r24, Z
    191c:	88 60       	ori	r24, 0x08	; 8
    191e:	8c 93       	st	X, r24

	switch (OC0_MODE)
		{
			case OC0_DISCONNECTED:
			CLR_BIT(TCCR0,TCCR0_COM00);
    1920:	a3 e5       	ldi	r26, 0x53	; 83
    1922:	b0 e0       	ldi	r27, 0x00	; 0
    1924:	e3 e5       	ldi	r30, 0x53	; 83
    1926:	f0 e0       	ldi	r31, 0x00	; 0
    1928:	80 81       	ld	r24, Z
    192a:	8f 7e       	andi	r24, 0xEF	; 239
    192c:	8c 93       	st	X, r24
			CLR_BIT(TCCR0,TCCR0_COM01);
    192e:	a3 e5       	ldi	r26, 0x53	; 83
    1930:	b0 e0       	ldi	r27, 0x00	; 0
    1932:	e3 e5       	ldi	r30, 0x53	; 83
    1934:	f0 e0       	ldi	r31, 0x00	; 0
    1936:	80 81       	ld	r24, Z
    1938:	8f 7d       	andi	r24, 0xDF	; 223
    193a:	8c 93       	st	X, r24
		SET_BIT(TCCR0,TCCR0_COM00);
		SET_BIT(TCCR0,TCCR0_COM01);
	}
	else if (FAST_PWM_MODE == FAST_PWM_NON_INVERTED_MODE)
	{
		CLR_BIT(TCCR0,TCCR0_COM00);
    193c:	a3 e5       	ldi	r26, 0x53	; 83
    193e:	b0 e0       	ldi	r27, 0x00	; 0
    1940:	e3 e5       	ldi	r30, 0x53	; 83
    1942:	f0 e0       	ldi	r31, 0x00	; 0
    1944:	80 81       	ld	r24, Z
    1946:	8f 7e       	andi	r24, 0xEF	; 239
    1948:	8c 93       	st	X, r24
		SET_BIT(TCCR0,TCCR0_COM01);
    194a:	a3 e5       	ldi	r26, 0x53	; 83
    194c:	b0 e0       	ldi	r27, 0x00	; 0
    194e:	e3 e5       	ldi	r30, 0x53	; 83
    1950:	f0 e0       	ldi	r31, 0x00	; 0
    1952:	80 81       	ld	r24, Z
    1954:	80 62       	ori	r24, 0x20	; 32
    1956:	8c 93       	st	X, r24
		SET_BIT(TCCR0,TCCR0_COM01);
	}

	#endif

	return Local_ErrorState;
    1958:	89 81       	ldd	r24, Y+1	; 0x01
}
    195a:	0f 90       	pop	r0
    195c:	cf 91       	pop	r28
    195e:	df 91       	pop	r29
    1960:	08 95       	ret

00001962 <MPWM0_enumSetDutyCycle>:
error_state_t MPWM0_enumSetDutyCycle(u8 Copy_u8DutyCycle)
{
    1962:	df 93       	push	r29
    1964:	cf 93       	push	r28
    1966:	00 d0       	rcall	.+0      	; 0x1968 <MPWM0_enumSetDutyCycle+0x6>
    1968:	cd b7       	in	r28, 0x3d	; 61
    196a:	de b7       	in	r29, 0x3e	; 62
    196c:	8a 83       	std	Y+2, r24	; 0x02
	error_state_t Local_ErrorState = TIMER0_OK;
    196e:	82 e0       	ldi	r24, 0x02	; 2
    1970:	89 83       	std	Y+1, r24	; 0x01
	{
		OCR0 = (((100 - Copy_u8DutyCycle) * TIMER0_MAX_TICK ) / 100) -  1 ;
	}
	else if (FAST_PWM_MODE == FAST_PWM_NON_INVERTED_MODE)
	{
		OCR0 = (u8)(((Copy_u8DutyCycle * TIMER0_MAX_TICK ) / 100) -1);
    1972:	ec e5       	ldi	r30, 0x5C	; 92
    1974:	f0 e0       	ldi	r31, 0x00	; 0
    1976:	8a 81       	ldd	r24, Y+2	; 0x02
    1978:	88 2f       	mov	r24, r24
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	98 2f       	mov	r25, r24
    197e:	88 27       	eor	r24, r24
    1980:	24 e6       	ldi	r18, 0x64	; 100
    1982:	30 e0       	ldi	r19, 0x00	; 0
    1984:	b9 01       	movw	r22, r18
    1986:	0e 94 cf 25 	call	0x4b9e	; 0x4b9e <__divmodhi4>
    198a:	cb 01       	movw	r24, r22
    198c:	81 50       	subi	r24, 0x01	; 1
    198e:	80 83       	st	Z, r24
	{
		OCR0 = ((Copy_u8DutyCycle * (TIMER0_MAX_TICK -1 ) ) / 100) ;
	}
	#endif

	return Local_ErrorState;
    1990:	89 81       	ldd	r24, Y+1	; 0x01
}
    1992:	0f 90       	pop	r0
    1994:	0f 90       	pop	r0
    1996:	cf 91       	pop	r28
    1998:	df 91       	pop	r29
    199a:	08 95       	ret

0000199c <MPWM0_enumStart>:
error_state_t MPWM0_enumStart(void)
{
    199c:	df 93       	push	r29
    199e:	cf 93       	push	r28
    19a0:	0f 92       	push	r0
    19a2:	cd b7       	in	r28, 0x3d	; 61
    19a4:	de b7       	in	r29, 0x3e	; 62
	error_state_t Local_ErrorState = TIMER0_OK;
    19a6:	82 e0       	ldi	r24, 0x02	; 2
    19a8:	89 83       	std	Y+1, r24	; 0x01
	TCCR0 &= TIMER0_PRESCALLER_MASK;
    19aa:	a3 e5       	ldi	r26, 0x53	; 83
    19ac:	b0 e0       	ldi	r27, 0x00	; 0
    19ae:	e3 e5       	ldi	r30, 0x53	; 83
    19b0:	f0 e0       	ldi	r31, 0x00	; 0
    19b2:	80 81       	ld	r24, Z
    19b4:	88 7f       	andi	r24, 0xF8	; 248
    19b6:	8c 93       	st	X, r24
	TCCR0 |= TIMER0_PRESCALLER_SELEC;
    19b8:	a3 e5       	ldi	r26, 0x53	; 83
    19ba:	b0 e0       	ldi	r27, 0x00	; 0
    19bc:	e3 e5       	ldi	r30, 0x53	; 83
    19be:	f0 e0       	ldi	r31, 0x00	; 0
    19c0:	80 81       	ld	r24, Z
    19c2:	83 60       	ori	r24, 0x03	; 3
    19c4:	8c 93       	st	X, r24

	return Local_ErrorState;
    19c6:	89 81       	ldd	r24, Y+1	; 0x01
}
    19c8:	0f 90       	pop	r0
    19ca:	cf 91       	pop	r28
    19cc:	df 91       	pop	r29
    19ce:	08 95       	ret

000019d0 <MPWM0_enumStop>:
error_state_t MPWM0_enumStop(void)
{
    19d0:	df 93       	push	r29
    19d2:	cf 93       	push	r28
    19d4:	0f 92       	push	r0
    19d6:	cd b7       	in	r28, 0x3d	; 61
    19d8:	de b7       	in	r29, 0x3e	; 62
	error_state_t Local_ErrorState = TIMER0_OK;
    19da:	82 e0       	ldi	r24, 0x02	; 2
    19dc:	89 83       	std	Y+1, r24	; 0x01
	TCCR0 &= TIMER0_PRESCALLER_MASK;
    19de:	a3 e5       	ldi	r26, 0x53	; 83
    19e0:	b0 e0       	ldi	r27, 0x00	; 0
    19e2:	e3 e5       	ldi	r30, 0x53	; 83
    19e4:	f0 e0       	ldi	r31, 0x00	; 0
    19e6:	80 81       	ld	r24, Z
    19e8:	88 7f       	andi	r24, 0xF8	; 248
    19ea:	8c 93       	st	X, r24
	return Local_ErrorState;
    19ec:	89 81       	ldd	r24, Y+1	; 0x01
}
    19ee:	0f 90       	pop	r0
    19f0:	cf 91       	pop	r28
    19f2:	df 91       	pop	r29
    19f4:	08 95       	ret

000019f6 <MGIE_VoidEnable>:

#include "MGIE_interface.h"
#include "MGIE_private.h"

void MGIE_VoidEnable(void)
{
    19f6:	df 93       	push	r29
    19f8:	cf 93       	push	r28
    19fa:	cd b7       	in	r28, 0x3d	; 61
    19fc:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
    19fe:	af e5       	ldi	r26, 0x5F	; 95
    1a00:	b0 e0       	ldi	r27, 0x00	; 0
    1a02:	ef e5       	ldi	r30, 0x5F	; 95
    1a04:	f0 e0       	ldi	r31, 0x00	; 0
    1a06:	80 81       	ld	r24, Z
    1a08:	80 68       	ori	r24, 0x80	; 128
    1a0a:	8c 93       	st	X, r24
}
    1a0c:	cf 91       	pop	r28
    1a0e:	df 91       	pop	r29
    1a10:	08 95       	ret

00001a12 <MGIE_VoidDisable>:
void MGIE_VoidDisable(void)
{
    1a12:	df 93       	push	r29
    1a14:	cf 93       	push	r28
    1a16:	cd b7       	in	r28, 0x3d	; 61
    1a18:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,SREG_I);
    1a1a:	af e5       	ldi	r26, 0x5F	; 95
    1a1c:	b0 e0       	ldi	r27, 0x00	; 0
    1a1e:	ef e5       	ldi	r30, 0x5F	; 95
    1a20:	f0 e0       	ldi	r31, 0x00	; 0
    1a22:	80 81       	ld	r24, Z
    1a24:	8f 77       	andi	r24, 0x7F	; 127
    1a26:	8c 93       	st	X, r24
}
    1a28:	cf 91       	pop	r28
    1a2a:	df 91       	pop	r29
    1a2c:	08 95       	ret

00001a2e <MEXTI_Enable>:
void (*INT1_pvFunc)(void) = NULL;
void (*INT2_pvFunc)(void) = NULL;


error_state_t MEXTI_Enable(exti_t Copy_u8EXTIx, exti_sense_control_t Copy_u8EXTIxSense, void(*Copy_pvEXTIxFunc)(void))
{
    1a2e:	df 93       	push	r29
    1a30:	cf 93       	push	r28
    1a32:	cd b7       	in	r28, 0x3d	; 61
    1a34:	de b7       	in	r29, 0x3e	; 62
    1a36:	2d 97       	sbiw	r28, 0x0d	; 13
    1a38:	0f b6       	in	r0, 0x3f	; 63
    1a3a:	f8 94       	cli
    1a3c:	de bf       	out	0x3e, r29	; 62
    1a3e:	0f be       	out	0x3f, r0	; 63
    1a40:	cd bf       	out	0x3d, r28	; 61
    1a42:	8a 83       	std	Y+2, r24	; 0x02
    1a44:	6b 83       	std	Y+3, r22	; 0x03
    1a46:	5d 83       	std	Y+5, r21	; 0x05
    1a48:	4c 83       	std	Y+4, r20	; 0x04
	error_state_t Local_ErrorState = R_OK;
    1a4a:	81 e0       	ldi	r24, 0x01	; 1
    1a4c:	89 83       	std	Y+1, r24	; 0x01
	
	switch(Copy_u8EXTIx)
    1a4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a50:	28 2f       	mov	r18, r24
    1a52:	30 e0       	ldi	r19, 0x00	; 0
    1a54:	3d 87       	std	Y+13, r19	; 0x0d
    1a56:	2c 87       	std	Y+12, r18	; 0x0c
    1a58:	8c 85       	ldd	r24, Y+12	; 0x0c
    1a5a:	9d 85       	ldd	r25, Y+13	; 0x0d
    1a5c:	82 30       	cpi	r24, 0x02	; 2
    1a5e:	91 05       	cpc	r25, r1
    1a60:	09 f4       	brne	.+2      	; 0x1a64 <MEXTI_Enable+0x36>
    1a62:	7e c0       	rjmp	.+252    	; 0x1b60 <MEXTI_Enable+0x132>
    1a64:	2c 85       	ldd	r18, Y+12	; 0x0c
    1a66:	3d 85       	ldd	r19, Y+13	; 0x0d
    1a68:	23 30       	cpi	r18, 0x03	; 3
    1a6a:	31 05       	cpc	r19, r1
    1a6c:	09 f4       	brne	.+2      	; 0x1a70 <MEXTI_Enable+0x42>
    1a6e:	ea c0       	rjmp	.+468    	; 0x1c44 <MEXTI_Enable+0x216>
    1a70:	8c 85       	ldd	r24, Y+12	; 0x0c
    1a72:	9d 85       	ldd	r25, Y+13	; 0x0d
    1a74:	81 30       	cpi	r24, 0x01	; 1
    1a76:	91 05       	cpc	r25, r1
    1a78:	09 f0       	breq	.+2      	; 0x1a7c <MEXTI_Enable+0x4e>
    1a7a:	1a c1       	rjmp	.+564    	; 0x1cb0 <MEXTI_Enable+0x282>
	{
		/********** INT0 **********/
		case INT0 :
		/* Initialize the INT0 callback notification function globally */
		if (Copy_pvEXTIxFunc != NULL)
    1a7c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a7e:	9d 81       	ldd	r25, Y+5	; 0x05
    1a80:	00 97       	sbiw	r24, 0x00	; 0
    1a82:	39 f0       	breq	.+14     	; 0x1a92 <MEXTI_Enable+0x64>
		{
			INT0_pvFunc = Copy_pvEXTIxFunc;
    1a84:	8c 81       	ldd	r24, Y+4	; 0x04
    1a86:	9d 81       	ldd	r25, Y+5	; 0x05
    1a88:	90 93 d9 01 	sts	0x01D9, r25
    1a8c:	80 93 d8 01 	sts	0x01D8, r24
    1a90:	02 c0       	rjmp	.+4      	; 0x1a96 <MEXTI_Enable+0x68>
		} 
		else
		{
			Local_ErrorState = NULL_POINTER;
    1a92:	86 e0       	ldi	r24, 0x06	; 6
    1a94:	89 83       	std	Y+1, r24	; 0x01
		}
		/* SET INT0 Sense Control */
		switch (Copy_u8EXTIxSense)
    1a96:	8b 81       	ldd	r24, Y+3	; 0x03
    1a98:	28 2f       	mov	r18, r24
    1a9a:	30 e0       	ldi	r19, 0x00	; 0
    1a9c:	3b 87       	std	Y+11, r19	; 0x0b
    1a9e:	2a 87       	std	Y+10, r18	; 0x0a
    1aa0:	8a 85       	ldd	r24, Y+10	; 0x0a
    1aa2:	9b 85       	ldd	r25, Y+11	; 0x0b
    1aa4:	82 30       	cpi	r24, 0x02	; 2
    1aa6:	91 05       	cpc	r25, r1
    1aa8:	29 f1       	breq	.+74     	; 0x1af4 <MEXTI_Enable+0xc6>
    1aaa:	2a 85       	ldd	r18, Y+10	; 0x0a
    1aac:	3b 85       	ldd	r19, Y+11	; 0x0b
    1aae:	23 30       	cpi	r18, 0x03	; 3
    1ab0:	31 05       	cpc	r19, r1
    1ab2:	34 f4       	brge	.+12     	; 0x1ac0 <MEXTI_Enable+0x92>
    1ab4:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ab6:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ab8:	81 30       	cpi	r24, 0x01	; 1
    1aba:	91 05       	cpc	r25, r1
    1abc:	61 f0       	breq	.+24     	; 0x1ad6 <MEXTI_Enable+0xa8>
    1abe:	47 c0       	rjmp	.+142    	; 0x1b4e <MEXTI_Enable+0x120>
    1ac0:	2a 85       	ldd	r18, Y+10	; 0x0a
    1ac2:	3b 85       	ldd	r19, Y+11	; 0x0b
    1ac4:	23 30       	cpi	r18, 0x03	; 3
    1ac6:	31 05       	cpc	r19, r1
    1ac8:	21 f1       	breq	.+72     	; 0x1b12 <MEXTI_Enable+0xe4>
    1aca:	8a 85       	ldd	r24, Y+10	; 0x0a
    1acc:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ace:	84 30       	cpi	r24, 0x04	; 4
    1ad0:	91 05       	cpc	r25, r1
    1ad2:	71 f1       	breq	.+92     	; 0x1b30 <MEXTI_Enable+0x102>
    1ad4:	3c c0       	rjmp	.+120    	; 0x1b4e <MEXTI_Enable+0x120>
		{
			case LOW_LEVEL    : CLR_BIT(MCUCR,MCUCR_ISC00);    CLR_BIT(MCUCR,MCUCR_ISC01);    break;
    1ad6:	a5 e5       	ldi	r26, 0x55	; 85
    1ad8:	b0 e0       	ldi	r27, 0x00	; 0
    1ada:	e5 e5       	ldi	r30, 0x55	; 85
    1adc:	f0 e0       	ldi	r31, 0x00	; 0
    1ade:	80 81       	ld	r24, Z
    1ae0:	8e 7f       	andi	r24, 0xFE	; 254
    1ae2:	8c 93       	st	X, r24
    1ae4:	a5 e5       	ldi	r26, 0x55	; 85
    1ae6:	b0 e0       	ldi	r27, 0x00	; 0
    1ae8:	e5 e5       	ldi	r30, 0x55	; 85
    1aea:	f0 e0       	ldi	r31, 0x00	; 0
    1aec:	80 81       	ld	r24, Z
    1aee:	8d 7f       	andi	r24, 0xFD	; 253
    1af0:	8c 93       	st	X, r24
    1af2:	2e c0       	rjmp	.+92     	; 0x1b50 <MEXTI_Enable+0x122>
			case ON_CHANGE    : SET_BIT(MCUCR,MCUCR_ISC00);    CLR_BIT(MCUCR,MCUCR_ISC01);    break;
    1af4:	a5 e5       	ldi	r26, 0x55	; 85
    1af6:	b0 e0       	ldi	r27, 0x00	; 0
    1af8:	e5 e5       	ldi	r30, 0x55	; 85
    1afa:	f0 e0       	ldi	r31, 0x00	; 0
    1afc:	80 81       	ld	r24, Z
    1afe:	81 60       	ori	r24, 0x01	; 1
    1b00:	8c 93       	st	X, r24
    1b02:	a5 e5       	ldi	r26, 0x55	; 85
    1b04:	b0 e0       	ldi	r27, 0x00	; 0
    1b06:	e5 e5       	ldi	r30, 0x55	; 85
    1b08:	f0 e0       	ldi	r31, 0x00	; 0
    1b0a:	80 81       	ld	r24, Z
    1b0c:	8d 7f       	andi	r24, 0xFD	; 253
    1b0e:	8c 93       	st	X, r24
    1b10:	1f c0       	rjmp	.+62     	; 0x1b50 <MEXTI_Enable+0x122>
			case FALLING_EDGE : SET_BIT(MCUCR,MCUCR_ISC01);    CLR_BIT(MCUCR,MCUCR_ISC00);    break;
    1b12:	a5 e5       	ldi	r26, 0x55	; 85
    1b14:	b0 e0       	ldi	r27, 0x00	; 0
    1b16:	e5 e5       	ldi	r30, 0x55	; 85
    1b18:	f0 e0       	ldi	r31, 0x00	; 0
    1b1a:	80 81       	ld	r24, Z
    1b1c:	82 60       	ori	r24, 0x02	; 2
    1b1e:	8c 93       	st	X, r24
    1b20:	a5 e5       	ldi	r26, 0x55	; 85
    1b22:	b0 e0       	ldi	r27, 0x00	; 0
    1b24:	e5 e5       	ldi	r30, 0x55	; 85
    1b26:	f0 e0       	ldi	r31, 0x00	; 0
    1b28:	80 81       	ld	r24, Z
    1b2a:	8e 7f       	andi	r24, 0xFE	; 254
    1b2c:	8c 93       	st	X, r24
    1b2e:	10 c0       	rjmp	.+32     	; 0x1b50 <MEXTI_Enable+0x122>
			case RISING_EDGE  : SET_BIT(MCUCR,MCUCR_ISC01);    SET_BIT(MCUCR,MCUCR_ISC00);    break;
    1b30:	a5 e5       	ldi	r26, 0x55	; 85
    1b32:	b0 e0       	ldi	r27, 0x00	; 0
    1b34:	e5 e5       	ldi	r30, 0x55	; 85
    1b36:	f0 e0       	ldi	r31, 0x00	; 0
    1b38:	80 81       	ld	r24, Z
    1b3a:	82 60       	ori	r24, 0x02	; 2
    1b3c:	8c 93       	st	X, r24
    1b3e:	a5 e5       	ldi	r26, 0x55	; 85
    1b40:	b0 e0       	ldi	r27, 0x00	; 0
    1b42:	e5 e5       	ldi	r30, 0x55	; 85
    1b44:	f0 e0       	ldi	r31, 0x00	; 0
    1b46:	80 81       	ld	r24, Z
    1b48:	81 60       	ori	r24, 0x01	; 1
    1b4a:	8c 93       	st	X, r24
    1b4c:	01 c0       	rjmp	.+2      	; 0x1b50 <MEXTI_Enable+0x122>
			default:           Local_ErrorState = R_NOK;                                      break;
    1b4e:	19 82       	std	Y+1, r1	; 0x01
	    }
		/* Enable INT0 */
		SET_BIT(GICR,GICR_INT0);
    1b50:	ab e5       	ldi	r26, 0x5B	; 91
    1b52:	b0 e0       	ldi	r27, 0x00	; 0
    1b54:	eb e5       	ldi	r30, 0x5B	; 91
    1b56:	f0 e0       	ldi	r31, 0x00	; 0
    1b58:	80 81       	ld	r24, Z
    1b5a:	80 64       	ori	r24, 0x40	; 64
    1b5c:	8c 93       	st	X, r24
    1b5e:	a9 c0       	rjmp	.+338    	; 0x1cb2 <MEXTI_Enable+0x284>
		break;
		/********** INT1 **********/
		case INT1 :
		/* Initialize the INT1 callback notification function globally */
        if (Copy_pvEXTIxFunc != NULL)
    1b60:	8c 81       	ldd	r24, Y+4	; 0x04
    1b62:	9d 81       	ldd	r25, Y+5	; 0x05
    1b64:	00 97       	sbiw	r24, 0x00	; 0
    1b66:	39 f0       	breq	.+14     	; 0x1b76 <MEXTI_Enable+0x148>
        {
        	INT1_pvFunc = Copy_pvEXTIxFunc;
    1b68:	8c 81       	ldd	r24, Y+4	; 0x04
    1b6a:	9d 81       	ldd	r25, Y+5	; 0x05
    1b6c:	90 93 dd 01 	sts	0x01DD, r25
    1b70:	80 93 dc 01 	sts	0x01DC, r24
    1b74:	02 c0       	rjmp	.+4      	; 0x1b7a <MEXTI_Enable+0x14c>
        }
        else
        {
        	Local_ErrorState = NULL_POINTER;
    1b76:	86 e0       	ldi	r24, 0x06	; 6
    1b78:	89 83       	std	Y+1, r24	; 0x01
        }		
		/* SET INT1 Sense Control */
		switch (Copy_u8EXTIxSense)
    1b7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7c:	28 2f       	mov	r18, r24
    1b7e:	30 e0       	ldi	r19, 0x00	; 0
    1b80:	39 87       	std	Y+9, r19	; 0x09
    1b82:	28 87       	std	Y+8, r18	; 0x08
    1b84:	88 85       	ldd	r24, Y+8	; 0x08
    1b86:	99 85       	ldd	r25, Y+9	; 0x09
    1b88:	82 30       	cpi	r24, 0x02	; 2
    1b8a:	91 05       	cpc	r25, r1
    1b8c:	29 f1       	breq	.+74     	; 0x1bd8 <MEXTI_Enable+0x1aa>
    1b8e:	28 85       	ldd	r18, Y+8	; 0x08
    1b90:	39 85       	ldd	r19, Y+9	; 0x09
    1b92:	23 30       	cpi	r18, 0x03	; 3
    1b94:	31 05       	cpc	r19, r1
    1b96:	34 f4       	brge	.+12     	; 0x1ba4 <MEXTI_Enable+0x176>
    1b98:	88 85       	ldd	r24, Y+8	; 0x08
    1b9a:	99 85       	ldd	r25, Y+9	; 0x09
    1b9c:	81 30       	cpi	r24, 0x01	; 1
    1b9e:	91 05       	cpc	r25, r1
    1ba0:	61 f0       	breq	.+24     	; 0x1bba <MEXTI_Enable+0x18c>
    1ba2:	47 c0       	rjmp	.+142    	; 0x1c32 <MEXTI_Enable+0x204>
    1ba4:	28 85       	ldd	r18, Y+8	; 0x08
    1ba6:	39 85       	ldd	r19, Y+9	; 0x09
    1ba8:	23 30       	cpi	r18, 0x03	; 3
    1baa:	31 05       	cpc	r19, r1
    1bac:	21 f1       	breq	.+72     	; 0x1bf6 <MEXTI_Enable+0x1c8>
    1bae:	88 85       	ldd	r24, Y+8	; 0x08
    1bb0:	99 85       	ldd	r25, Y+9	; 0x09
    1bb2:	84 30       	cpi	r24, 0x04	; 4
    1bb4:	91 05       	cpc	r25, r1
    1bb6:	71 f1       	breq	.+92     	; 0x1c14 <MEXTI_Enable+0x1e6>
    1bb8:	3c c0       	rjmp	.+120    	; 0x1c32 <MEXTI_Enable+0x204>
		{
			case LOW_LEVEL    : CLR_BIT(MCUCR,MCUCR_ISC10);    CLR_BIT(MCUCR,MCUCR_ISC11);    break;
    1bba:	a5 e5       	ldi	r26, 0x55	; 85
    1bbc:	b0 e0       	ldi	r27, 0x00	; 0
    1bbe:	e5 e5       	ldi	r30, 0x55	; 85
    1bc0:	f0 e0       	ldi	r31, 0x00	; 0
    1bc2:	80 81       	ld	r24, Z
    1bc4:	8b 7f       	andi	r24, 0xFB	; 251
    1bc6:	8c 93       	st	X, r24
    1bc8:	a5 e5       	ldi	r26, 0x55	; 85
    1bca:	b0 e0       	ldi	r27, 0x00	; 0
    1bcc:	e5 e5       	ldi	r30, 0x55	; 85
    1bce:	f0 e0       	ldi	r31, 0x00	; 0
    1bd0:	80 81       	ld	r24, Z
    1bd2:	87 7f       	andi	r24, 0xF7	; 247
    1bd4:	8c 93       	st	X, r24
    1bd6:	2e c0       	rjmp	.+92     	; 0x1c34 <MEXTI_Enable+0x206>
			case ON_CHANGE    : SET_BIT(MCUCR,MCUCR_ISC10);    CLR_BIT(MCUCR,MCUCR_ISC11);    break;
    1bd8:	a5 e5       	ldi	r26, 0x55	; 85
    1bda:	b0 e0       	ldi	r27, 0x00	; 0
    1bdc:	e5 e5       	ldi	r30, 0x55	; 85
    1bde:	f0 e0       	ldi	r31, 0x00	; 0
    1be0:	80 81       	ld	r24, Z
    1be2:	84 60       	ori	r24, 0x04	; 4
    1be4:	8c 93       	st	X, r24
    1be6:	a5 e5       	ldi	r26, 0x55	; 85
    1be8:	b0 e0       	ldi	r27, 0x00	; 0
    1bea:	e5 e5       	ldi	r30, 0x55	; 85
    1bec:	f0 e0       	ldi	r31, 0x00	; 0
    1bee:	80 81       	ld	r24, Z
    1bf0:	87 7f       	andi	r24, 0xF7	; 247
    1bf2:	8c 93       	st	X, r24
    1bf4:	1f c0       	rjmp	.+62     	; 0x1c34 <MEXTI_Enable+0x206>
			case FALLING_EDGE : SET_BIT(MCUCR,MCUCR_ISC11);    CLR_BIT(MCUCR,MCUCR_ISC10);    break;
    1bf6:	a5 e5       	ldi	r26, 0x55	; 85
    1bf8:	b0 e0       	ldi	r27, 0x00	; 0
    1bfa:	e5 e5       	ldi	r30, 0x55	; 85
    1bfc:	f0 e0       	ldi	r31, 0x00	; 0
    1bfe:	80 81       	ld	r24, Z
    1c00:	88 60       	ori	r24, 0x08	; 8
    1c02:	8c 93       	st	X, r24
    1c04:	a5 e5       	ldi	r26, 0x55	; 85
    1c06:	b0 e0       	ldi	r27, 0x00	; 0
    1c08:	e5 e5       	ldi	r30, 0x55	; 85
    1c0a:	f0 e0       	ldi	r31, 0x00	; 0
    1c0c:	80 81       	ld	r24, Z
    1c0e:	8b 7f       	andi	r24, 0xFB	; 251
    1c10:	8c 93       	st	X, r24
    1c12:	10 c0       	rjmp	.+32     	; 0x1c34 <MEXTI_Enable+0x206>
			case RISING_EDGE  : SET_BIT(MCUCR,MCUCR_ISC11);    SET_BIT(MCUCR,MCUCR_ISC10);    break;
    1c14:	a5 e5       	ldi	r26, 0x55	; 85
    1c16:	b0 e0       	ldi	r27, 0x00	; 0
    1c18:	e5 e5       	ldi	r30, 0x55	; 85
    1c1a:	f0 e0       	ldi	r31, 0x00	; 0
    1c1c:	80 81       	ld	r24, Z
    1c1e:	88 60       	ori	r24, 0x08	; 8
    1c20:	8c 93       	st	X, r24
    1c22:	a5 e5       	ldi	r26, 0x55	; 85
    1c24:	b0 e0       	ldi	r27, 0x00	; 0
    1c26:	e5 e5       	ldi	r30, 0x55	; 85
    1c28:	f0 e0       	ldi	r31, 0x00	; 0
    1c2a:	80 81       	ld	r24, Z
    1c2c:	84 60       	ori	r24, 0x04	; 4
    1c2e:	8c 93       	st	X, r24
    1c30:	01 c0       	rjmp	.+2      	; 0x1c34 <MEXTI_Enable+0x206>
			default:           Local_ErrorState = R_NOK;                                      break;
    1c32:	19 82       	std	Y+1, r1	; 0x01
		}
		/* Enable INT1 */
		SET_BIT(GICR,GICR_INT1);
    1c34:	ab e5       	ldi	r26, 0x5B	; 91
    1c36:	b0 e0       	ldi	r27, 0x00	; 0
    1c38:	eb e5       	ldi	r30, 0x5B	; 91
    1c3a:	f0 e0       	ldi	r31, 0x00	; 0
    1c3c:	80 81       	ld	r24, Z
    1c3e:	80 68       	ori	r24, 0x80	; 128
    1c40:	8c 93       	st	X, r24
    1c42:	37 c0       	rjmp	.+110    	; 0x1cb2 <MEXTI_Enable+0x284>
		break;
		
		/********** INT2 **********/
		case INT2 :
		/* Initialize the INT2 callback notification function globally */
        if (Copy_pvEXTIxFunc != NULL)
    1c44:	8c 81       	ldd	r24, Y+4	; 0x04
    1c46:	9d 81       	ldd	r25, Y+5	; 0x05
    1c48:	00 97       	sbiw	r24, 0x00	; 0
    1c4a:	39 f0       	breq	.+14     	; 0x1c5a <MEXTI_Enable+0x22c>
        {
        	INT2_pvFunc = Copy_pvEXTIxFunc;
    1c4c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c4e:	9d 81       	ldd	r25, Y+5	; 0x05
    1c50:	90 93 df 01 	sts	0x01DF, r25
    1c54:	80 93 de 01 	sts	0x01DE, r24
    1c58:	02 c0       	rjmp	.+4      	; 0x1c5e <MEXTI_Enable+0x230>
        }
        else
        {
        	Local_ErrorState = NULL_POINTER;
    1c5a:	86 e0       	ldi	r24, 0x06	; 6
    1c5c:	89 83       	std	Y+1, r24	; 0x01
        }
		/* SET INT2 Sense Control */
		switch (Copy_u8EXTIxSense)
    1c5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c60:	28 2f       	mov	r18, r24
    1c62:	30 e0       	ldi	r19, 0x00	; 0
    1c64:	3f 83       	std	Y+7, r19	; 0x07
    1c66:	2e 83       	std	Y+6, r18	; 0x06
    1c68:	8e 81       	ldd	r24, Y+6	; 0x06
    1c6a:	9f 81       	ldd	r25, Y+7	; 0x07
    1c6c:	83 30       	cpi	r24, 0x03	; 3
    1c6e:	91 05       	cpc	r25, r1
    1c70:	31 f0       	breq	.+12     	; 0x1c7e <MEXTI_Enable+0x250>
    1c72:	2e 81       	ldd	r18, Y+6	; 0x06
    1c74:	3f 81       	ldd	r19, Y+7	; 0x07
    1c76:	24 30       	cpi	r18, 0x04	; 4
    1c78:	31 05       	cpc	r19, r1
    1c7a:	49 f0       	breq	.+18     	; 0x1c8e <MEXTI_Enable+0x260>
    1c7c:	10 c0       	rjmp	.+32     	; 0x1c9e <MEXTI_Enable+0x270>
		{
			case FALLING_EDGE: CLR_BIT(MCUCSR,MCUCSR_ISC2);    break;
    1c7e:	a4 e5       	ldi	r26, 0x54	; 84
    1c80:	b0 e0       	ldi	r27, 0x00	; 0
    1c82:	e4 e5       	ldi	r30, 0x54	; 84
    1c84:	f0 e0       	ldi	r31, 0x00	; 0
    1c86:	80 81       	ld	r24, Z
    1c88:	8f 7b       	andi	r24, 0xBF	; 191
    1c8a:	8c 93       	st	X, r24
    1c8c:	09 c0       	rjmp	.+18     	; 0x1ca0 <MEXTI_Enable+0x272>
			case RISING_EDGE : SET_BIT(MCUCSR,MCUCSR_ISC2);    break;
    1c8e:	a4 e5       	ldi	r26, 0x54	; 84
    1c90:	b0 e0       	ldi	r27, 0x00	; 0
    1c92:	e4 e5       	ldi	r30, 0x54	; 84
    1c94:	f0 e0       	ldi	r31, 0x00	; 0
    1c96:	80 81       	ld	r24, Z
    1c98:	80 64       	ori	r24, 0x40	; 64
    1c9a:	8c 93       	st	X, r24
    1c9c:	01 c0       	rjmp	.+2      	; 0x1ca0 <MEXTI_Enable+0x272>
			default:           Local_ErrorState = R_NOK;       break;
    1c9e:	19 82       	std	Y+1, r1	; 0x01
		}
		/* Enable INT2 */
		SET_BIT(GICR,GICR_INT2);
    1ca0:	ab e5       	ldi	r26, 0x5B	; 91
    1ca2:	b0 e0       	ldi	r27, 0x00	; 0
    1ca4:	eb e5       	ldi	r30, 0x5B	; 91
    1ca6:	f0 e0       	ldi	r31, 0x00	; 0
    1ca8:	80 81       	ld	r24, Z
    1caa:	80 62       	ori	r24, 0x20	; 32
    1cac:	8c 93       	st	X, r24
    1cae:	01 c0       	rjmp	.+2      	; 0x1cb2 <MEXTI_Enable+0x284>
		break;
		
		default: Local_ErrorState = R_NOK;
    1cb0:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return Local_ErrorState;
    1cb2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cb4:	2d 96       	adiw	r28, 0x0d	; 13
    1cb6:	0f b6       	in	r0, 0x3f	; 63
    1cb8:	f8 94       	cli
    1cba:	de bf       	out	0x3e, r29	; 62
    1cbc:	0f be       	out	0x3f, r0	; 63
    1cbe:	cd bf       	out	0x3d, r28	; 61
    1cc0:	cf 91       	pop	r28
    1cc2:	df 91       	pop	r29
    1cc4:	08 95       	ret

00001cc6 <MEXTI_Disable>:

error_state_t MEXTI_Disable(exti_t Copy_u8EXTIx)
{
    1cc6:	df 93       	push	r29
    1cc8:	cf 93       	push	r28
    1cca:	00 d0       	rcall	.+0      	; 0x1ccc <MEXTI_Disable+0x6>
    1ccc:	00 d0       	rcall	.+0      	; 0x1cce <MEXTI_Disable+0x8>
    1cce:	cd b7       	in	r28, 0x3d	; 61
    1cd0:	de b7       	in	r29, 0x3e	; 62
    1cd2:	8a 83       	std	Y+2, r24	; 0x02
	error_state_t Local_ErrorState = R_OK;
    1cd4:	81 e0       	ldi	r24, 0x01	; 1
    1cd6:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8EXTIx)
    1cd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cda:	28 2f       	mov	r18, r24
    1cdc:	30 e0       	ldi	r19, 0x00	; 0
    1cde:	3c 83       	std	Y+4, r19	; 0x04
    1ce0:	2b 83       	std	Y+3, r18	; 0x03
    1ce2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ce6:	82 30       	cpi	r24, 0x02	; 2
    1ce8:	91 05       	cpc	r25, r1
    1cea:	91 f0       	breq	.+36     	; 0x1d10 <MEXTI_Disable+0x4a>
    1cec:	2b 81       	ldd	r18, Y+3	; 0x03
    1cee:	3c 81       	ldd	r19, Y+4	; 0x04
    1cf0:	23 30       	cpi	r18, 0x03	; 3
    1cf2:	31 05       	cpc	r19, r1
    1cf4:	a9 f0       	breq	.+42     	; 0x1d20 <MEXTI_Disable+0x5a>
    1cf6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf8:	9c 81       	ldd	r25, Y+4	; 0x04
    1cfa:	81 30       	cpi	r24, 0x01	; 1
    1cfc:	91 05       	cpc	r25, r1
    1cfe:	c1 f4       	brne	.+48     	; 0x1d30 <MEXTI_Disable+0x6a>
	{
		case INT0:  CLR_BIT(GICR,GICR_INT0);  break;
    1d00:	ab e5       	ldi	r26, 0x5B	; 91
    1d02:	b0 e0       	ldi	r27, 0x00	; 0
    1d04:	eb e5       	ldi	r30, 0x5B	; 91
    1d06:	f0 e0       	ldi	r31, 0x00	; 0
    1d08:	80 81       	ld	r24, Z
    1d0a:	8f 7b       	andi	r24, 0xBF	; 191
    1d0c:	8c 93       	st	X, r24
    1d0e:	11 c0       	rjmp	.+34     	; 0x1d32 <MEXTI_Disable+0x6c>
		case INT1:  CLR_BIT(GICR,GICR_INT1);  break;
    1d10:	ab e5       	ldi	r26, 0x5B	; 91
    1d12:	b0 e0       	ldi	r27, 0x00	; 0
    1d14:	eb e5       	ldi	r30, 0x5B	; 91
    1d16:	f0 e0       	ldi	r31, 0x00	; 0
    1d18:	80 81       	ld	r24, Z
    1d1a:	8f 77       	andi	r24, 0x7F	; 127
    1d1c:	8c 93       	st	X, r24
    1d1e:	09 c0       	rjmp	.+18     	; 0x1d32 <MEXTI_Disable+0x6c>
		case INT2:  CLR_BIT(GICR,GICR_INT2);  break;
    1d20:	ab e5       	ldi	r26, 0x5B	; 91
    1d22:	b0 e0       	ldi	r27, 0x00	; 0
    1d24:	eb e5       	ldi	r30, 0x5B	; 91
    1d26:	f0 e0       	ldi	r31, 0x00	; 0
    1d28:	80 81       	ld	r24, Z
    1d2a:	8f 7d       	andi	r24, 0xDF	; 223
    1d2c:	8c 93       	st	X, r24
    1d2e:	01 c0       	rjmp	.+2      	; 0x1d32 <MEXTI_Disable+0x6c>
		default:    Local_ErrorState = R_NOK; break;
    1d30:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return Local_ErrorState;
    1d32:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d34:	0f 90       	pop	r0
    1d36:	0f 90       	pop	r0
    1d38:	0f 90       	pop	r0
    1d3a:	0f 90       	pop	r0
    1d3c:	cf 91       	pop	r28
    1d3e:	df 91       	pop	r29
    1d40:	08 95       	ret

00001d42 <MEXTI_FUNC>:

void MEXTI_FUNC( void(*Copy_pvEXTIxFunc)(void))
{
    1d42:	df 93       	push	r29
    1d44:	cf 93       	push	r28
    1d46:	00 d0       	rcall	.+0      	; 0x1d48 <MEXTI_FUNC+0x6>
    1d48:	cd b7       	in	r28, 0x3d	; 61
    1d4a:	de b7       	in	r29, 0x3e	; 62
    1d4c:	9a 83       	std	Y+2, r25	; 0x02
    1d4e:	89 83       	std	Y+1, r24	; 0x01
	INT_pvFunc = Copy_pvEXTIxFunc;
    1d50:	89 81       	ldd	r24, Y+1	; 0x01
    1d52:	9a 81       	ldd	r25, Y+2	; 0x02
    1d54:	90 93 db 01 	sts	0x01DB, r25
    1d58:	80 93 da 01 	sts	0x01DA, r24
}
    1d5c:	0f 90       	pop	r0
    1d5e:	0f 90       	pop	r0
    1d60:	cf 91       	pop	r28
    1d62:	df 91       	pop	r29
    1d64:	08 95       	ret

00001d66 <__vector_1>:


/*************** ISR Functions **************/
/******** INT0 ********/
ISR_ST(INT0_VECTOR)
{
    1d66:	1f 92       	push	r1
    1d68:	0f 92       	push	r0
    1d6a:	0f b6       	in	r0, 0x3f	; 63
    1d6c:	0f 92       	push	r0
    1d6e:	11 24       	eor	r1, r1
    1d70:	2f 93       	push	r18
    1d72:	3f 93       	push	r19
    1d74:	4f 93       	push	r20
    1d76:	5f 93       	push	r21
    1d78:	6f 93       	push	r22
    1d7a:	7f 93       	push	r23
    1d7c:	8f 93       	push	r24
    1d7e:	9f 93       	push	r25
    1d80:	af 93       	push	r26
    1d82:	bf 93       	push	r27
    1d84:	ef 93       	push	r30
    1d86:	ff 93       	push	r31
    1d88:	df 93       	push	r29
    1d8a:	cf 93       	push	r28
    1d8c:	cd b7       	in	r28, 0x3d	; 61
    1d8e:	de b7       	in	r29, 0x3e	; 62
	//if (INT_pvFunc != NULL)
	if (INT0_pvFunc != NULL)
    1d90:	80 91 d8 01 	lds	r24, 0x01D8
    1d94:	90 91 d9 01 	lds	r25, 0x01D9
    1d98:	00 97       	sbiw	r24, 0x00	; 0
    1d9a:	29 f0       	breq	.+10     	; 0x1da6 <__vector_1+0x40>
	{
		INT0_pvFunc();
    1d9c:	e0 91 d8 01 	lds	r30, 0x01D8
    1da0:	f0 91 d9 01 	lds	r31, 0x01D9
    1da4:	09 95       	icall
	} 
	else
	{
		/* Do No Thing */
	}
}
    1da6:	cf 91       	pop	r28
    1da8:	df 91       	pop	r29
    1daa:	ff 91       	pop	r31
    1dac:	ef 91       	pop	r30
    1dae:	bf 91       	pop	r27
    1db0:	af 91       	pop	r26
    1db2:	9f 91       	pop	r25
    1db4:	8f 91       	pop	r24
    1db6:	7f 91       	pop	r23
    1db8:	6f 91       	pop	r22
    1dba:	5f 91       	pop	r21
    1dbc:	4f 91       	pop	r20
    1dbe:	3f 91       	pop	r19
    1dc0:	2f 91       	pop	r18
    1dc2:	0f 90       	pop	r0
    1dc4:	0f be       	out	0x3f, r0	; 63
    1dc6:	0f 90       	pop	r0
    1dc8:	1f 90       	pop	r1
    1dca:	18 95       	reti

00001dcc <__vector_2>:
/******** INT1 ********/
ISR_ST(INT1_VECTOR)
{
    1dcc:	1f 92       	push	r1
    1dce:	0f 92       	push	r0
    1dd0:	0f b6       	in	r0, 0x3f	; 63
    1dd2:	0f 92       	push	r0
    1dd4:	11 24       	eor	r1, r1
    1dd6:	2f 93       	push	r18
    1dd8:	3f 93       	push	r19
    1dda:	4f 93       	push	r20
    1ddc:	5f 93       	push	r21
    1dde:	6f 93       	push	r22
    1de0:	7f 93       	push	r23
    1de2:	8f 93       	push	r24
    1de4:	9f 93       	push	r25
    1de6:	af 93       	push	r26
    1de8:	bf 93       	push	r27
    1dea:	ef 93       	push	r30
    1dec:	ff 93       	push	r31
    1dee:	df 93       	push	r29
    1df0:	cf 93       	push	r28
    1df2:	cd b7       	in	r28, 0x3d	; 61
    1df4:	de b7       	in	r29, 0x3e	; 62
	if (INT1_pvFunc != NULL)
    1df6:	80 91 dc 01 	lds	r24, 0x01DC
    1dfa:	90 91 dd 01 	lds	r25, 0x01DD
    1dfe:	00 97       	sbiw	r24, 0x00	; 0
    1e00:	29 f0       	breq	.+10     	; 0x1e0c <__vector_2+0x40>
	{
		INT1_pvFunc();
    1e02:	e0 91 dc 01 	lds	r30, 0x01DC
    1e06:	f0 91 dd 01 	lds	r31, 0x01DD
    1e0a:	09 95       	icall
	}
	else
	{
		/* Do No Thing */
	}
}
    1e0c:	cf 91       	pop	r28
    1e0e:	df 91       	pop	r29
    1e10:	ff 91       	pop	r31
    1e12:	ef 91       	pop	r30
    1e14:	bf 91       	pop	r27
    1e16:	af 91       	pop	r26
    1e18:	9f 91       	pop	r25
    1e1a:	8f 91       	pop	r24
    1e1c:	7f 91       	pop	r23
    1e1e:	6f 91       	pop	r22
    1e20:	5f 91       	pop	r21
    1e22:	4f 91       	pop	r20
    1e24:	3f 91       	pop	r19
    1e26:	2f 91       	pop	r18
    1e28:	0f 90       	pop	r0
    1e2a:	0f be       	out	0x3f, r0	; 63
    1e2c:	0f 90       	pop	r0
    1e2e:	1f 90       	pop	r1
    1e30:	18 95       	reti

00001e32 <__vector_3>:
/******** INT2 ********/
ISR_ST(INT2_VECTOR)
{
    1e32:	1f 92       	push	r1
    1e34:	0f 92       	push	r0
    1e36:	0f b6       	in	r0, 0x3f	; 63
    1e38:	0f 92       	push	r0
    1e3a:	11 24       	eor	r1, r1
    1e3c:	2f 93       	push	r18
    1e3e:	3f 93       	push	r19
    1e40:	4f 93       	push	r20
    1e42:	5f 93       	push	r21
    1e44:	6f 93       	push	r22
    1e46:	7f 93       	push	r23
    1e48:	8f 93       	push	r24
    1e4a:	9f 93       	push	r25
    1e4c:	af 93       	push	r26
    1e4e:	bf 93       	push	r27
    1e50:	ef 93       	push	r30
    1e52:	ff 93       	push	r31
    1e54:	df 93       	push	r29
    1e56:	cf 93       	push	r28
    1e58:	cd b7       	in	r28, 0x3d	; 61
    1e5a:	de b7       	in	r29, 0x3e	; 62
	if (INT2_pvFunc != NULL)
    1e5c:	80 91 de 01 	lds	r24, 0x01DE
    1e60:	90 91 df 01 	lds	r25, 0x01DF
    1e64:	00 97       	sbiw	r24, 0x00	; 0
    1e66:	29 f0       	breq	.+10     	; 0x1e72 <__vector_3+0x40>
	{
		INT2_pvFunc();
    1e68:	e0 91 de 01 	lds	r30, 0x01DE
    1e6c:	f0 91 df 01 	lds	r31, 0x01DF
    1e70:	09 95       	icall
	}
	else
	{
		/* Do No Thing */
	}
}
    1e72:	cf 91       	pop	r28
    1e74:	df 91       	pop	r29
    1e76:	ff 91       	pop	r31
    1e78:	ef 91       	pop	r30
    1e7a:	bf 91       	pop	r27
    1e7c:	af 91       	pop	r26
    1e7e:	9f 91       	pop	r25
    1e80:	8f 91       	pop	r24
    1e82:	7f 91       	pop	r23
    1e84:	6f 91       	pop	r22
    1e86:	5f 91       	pop	r21
    1e88:	4f 91       	pop	r20
    1e8a:	3f 91       	pop	r19
    1e8c:	2f 91       	pop	r18
    1e8e:	0f 90       	pop	r0
    1e90:	0f be       	out	0x3f, r0	; 63
    1e92:	0f 90       	pop	r0
    1e94:	1f 90       	pop	r1
    1e96:	18 95       	reti

00001e98 <MDIO_SetPinDirection>:
#include "MDIO_private.h"
#include "MDIO_config.h"


error_state_t	MDIO_SetPinDirection (dio_u8port_t Copy_u8Port, dio_u8pin_t Copy_u8Pin, dio_direc_t Copy_Direction)
{
    1e98:	df 93       	push	r29
    1e9a:	cf 93       	push	r28
    1e9c:	cd b7       	in	r28, 0x3d	; 61
    1e9e:	de b7       	in	r29, 0x3e	; 62
    1ea0:	28 97       	sbiw	r28, 0x08	; 8
    1ea2:	0f b6       	in	r0, 0x3f	; 63
    1ea4:	f8 94       	cli
    1ea6:	de bf       	out	0x3e, r29	; 62
    1ea8:	0f be       	out	0x3f, r0	; 63
    1eaa:	cd bf       	out	0x3d, r28	; 61
    1eac:	8a 83       	std	Y+2, r24	; 0x02
    1eae:	6b 83       	std	Y+3, r22	; 0x03
    1eb0:	4c 83       	std	Y+4, r20	; 0x04
	error_state_t Local_ErrorState = R_OK;
    1eb2:	81 e0       	ldi	r24, 0x01	; 1
    1eb4:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8Pin <= DIO_u8PIN7)
    1eb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb8:	88 30       	cpi	r24, 0x08	; 8
    1eba:	08 f0       	brcs	.+2      	; 0x1ebe <MDIO_SetPinDirection+0x26>
    1ebc:	f1 c0       	rjmp	.+482    	; 0x20a0 <MDIO_SetPinDirection+0x208>
	{
		if (Copy_Direction == DIO_u8PIN_INPUT)
    1ebe:	8c 81       	ldd	r24, Y+4	; 0x04
    1ec0:	88 23       	and	r24, r24
    1ec2:	09 f0       	breq	.+2      	; 0x1ec6 <MDIO_SetPinDirection+0x2e>
    1ec4:	76 c0       	rjmp	.+236    	; 0x1fb2 <MDIO_SetPinDirection+0x11a>
		{
			switch (Copy_u8Port)
    1ec6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec8:	28 2f       	mov	r18, r24
    1eca:	30 e0       	ldi	r19, 0x00	; 0
    1ecc:	38 87       	std	Y+8, r19	; 0x08
    1ece:	2f 83       	std	Y+7, r18	; 0x07
    1ed0:	8f 81       	ldd	r24, Y+7	; 0x07
    1ed2:	98 85       	ldd	r25, Y+8	; 0x08
    1ed4:	81 30       	cpi	r24, 0x01	; 1
    1ed6:	91 05       	cpc	r25, r1
    1ed8:	59 f1       	breq	.+86     	; 0x1f30 <MDIO_SetPinDirection+0x98>
    1eda:	2f 81       	ldd	r18, Y+7	; 0x07
    1edc:	38 85       	ldd	r19, Y+8	; 0x08
    1ede:	22 30       	cpi	r18, 0x02	; 2
    1ee0:	31 05       	cpc	r19, r1
    1ee2:	2c f4       	brge	.+10     	; 0x1eee <MDIO_SetPinDirection+0x56>
    1ee4:	8f 81       	ldd	r24, Y+7	; 0x07
    1ee6:	98 85       	ldd	r25, Y+8	; 0x08
    1ee8:	00 97       	sbiw	r24, 0x00	; 0
    1eea:	69 f0       	breq	.+26     	; 0x1f06 <MDIO_SetPinDirection+0x6e>
    1eec:	60 c0       	rjmp	.+192    	; 0x1fae <MDIO_SetPinDirection+0x116>
    1eee:	2f 81       	ldd	r18, Y+7	; 0x07
    1ef0:	38 85       	ldd	r19, Y+8	; 0x08
    1ef2:	22 30       	cpi	r18, 0x02	; 2
    1ef4:	31 05       	cpc	r19, r1
    1ef6:	89 f1       	breq	.+98     	; 0x1f5a <MDIO_SetPinDirection+0xc2>
    1ef8:	8f 81       	ldd	r24, Y+7	; 0x07
    1efa:	98 85       	ldd	r25, Y+8	; 0x08
    1efc:	83 30       	cpi	r24, 0x03	; 3
    1efe:	91 05       	cpc	r25, r1
    1f00:	09 f4       	brne	.+2      	; 0x1f04 <MDIO_SetPinDirection+0x6c>
    1f02:	40 c0       	rjmp	.+128    	; 0x1f84 <MDIO_SetPinDirection+0xec>
    1f04:	54 c0       	rjmp	.+168    	; 0x1fae <MDIO_SetPinDirection+0x116>
			{
				case DIO_u8PORTA : CLR_BIT(DDRA,Copy_u8Pin); break;
    1f06:	aa e3       	ldi	r26, 0x3A	; 58
    1f08:	b0 e0       	ldi	r27, 0x00	; 0
    1f0a:	ea e3       	ldi	r30, 0x3A	; 58
    1f0c:	f0 e0       	ldi	r31, 0x00	; 0
    1f0e:	80 81       	ld	r24, Z
    1f10:	48 2f       	mov	r20, r24
    1f12:	8b 81       	ldd	r24, Y+3	; 0x03
    1f14:	28 2f       	mov	r18, r24
    1f16:	30 e0       	ldi	r19, 0x00	; 0
    1f18:	81 e0       	ldi	r24, 0x01	; 1
    1f1a:	90 e0       	ldi	r25, 0x00	; 0
    1f1c:	02 2e       	mov	r0, r18
    1f1e:	02 c0       	rjmp	.+4      	; 0x1f24 <MDIO_SetPinDirection+0x8c>
    1f20:	88 0f       	add	r24, r24
    1f22:	99 1f       	adc	r25, r25
    1f24:	0a 94       	dec	r0
    1f26:	e2 f7       	brpl	.-8      	; 0x1f20 <MDIO_SetPinDirection+0x88>
    1f28:	80 95       	com	r24
    1f2a:	84 23       	and	r24, r20
    1f2c:	8c 93       	st	X, r24
    1f2e:	b9 c0       	rjmp	.+370    	; 0x20a2 <MDIO_SetPinDirection+0x20a>
				case DIO_u8PORTB : CLR_BIT(DDRB,Copy_u8Pin); break;
    1f30:	a7 e3       	ldi	r26, 0x37	; 55
    1f32:	b0 e0       	ldi	r27, 0x00	; 0
    1f34:	e7 e3       	ldi	r30, 0x37	; 55
    1f36:	f0 e0       	ldi	r31, 0x00	; 0
    1f38:	80 81       	ld	r24, Z
    1f3a:	48 2f       	mov	r20, r24
    1f3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f3e:	28 2f       	mov	r18, r24
    1f40:	30 e0       	ldi	r19, 0x00	; 0
    1f42:	81 e0       	ldi	r24, 0x01	; 1
    1f44:	90 e0       	ldi	r25, 0x00	; 0
    1f46:	02 2e       	mov	r0, r18
    1f48:	02 c0       	rjmp	.+4      	; 0x1f4e <MDIO_SetPinDirection+0xb6>
    1f4a:	88 0f       	add	r24, r24
    1f4c:	99 1f       	adc	r25, r25
    1f4e:	0a 94       	dec	r0
    1f50:	e2 f7       	brpl	.-8      	; 0x1f4a <MDIO_SetPinDirection+0xb2>
    1f52:	80 95       	com	r24
    1f54:	84 23       	and	r24, r20
    1f56:	8c 93       	st	X, r24
    1f58:	a4 c0       	rjmp	.+328    	; 0x20a2 <MDIO_SetPinDirection+0x20a>
				case DIO_u8PORTC : CLR_BIT(DDRC,Copy_u8Pin); break;
    1f5a:	a4 e3       	ldi	r26, 0x34	; 52
    1f5c:	b0 e0       	ldi	r27, 0x00	; 0
    1f5e:	e4 e3       	ldi	r30, 0x34	; 52
    1f60:	f0 e0       	ldi	r31, 0x00	; 0
    1f62:	80 81       	ld	r24, Z
    1f64:	48 2f       	mov	r20, r24
    1f66:	8b 81       	ldd	r24, Y+3	; 0x03
    1f68:	28 2f       	mov	r18, r24
    1f6a:	30 e0       	ldi	r19, 0x00	; 0
    1f6c:	81 e0       	ldi	r24, 0x01	; 1
    1f6e:	90 e0       	ldi	r25, 0x00	; 0
    1f70:	02 2e       	mov	r0, r18
    1f72:	02 c0       	rjmp	.+4      	; 0x1f78 <MDIO_SetPinDirection+0xe0>
    1f74:	88 0f       	add	r24, r24
    1f76:	99 1f       	adc	r25, r25
    1f78:	0a 94       	dec	r0
    1f7a:	e2 f7       	brpl	.-8      	; 0x1f74 <MDIO_SetPinDirection+0xdc>
    1f7c:	80 95       	com	r24
    1f7e:	84 23       	and	r24, r20
    1f80:	8c 93       	st	X, r24
    1f82:	8f c0       	rjmp	.+286    	; 0x20a2 <MDIO_SetPinDirection+0x20a>
				case DIO_u8PORTD : CLR_BIT(DDRD,Copy_u8Pin); break;
    1f84:	a1 e3       	ldi	r26, 0x31	; 49
    1f86:	b0 e0       	ldi	r27, 0x00	; 0
    1f88:	e1 e3       	ldi	r30, 0x31	; 49
    1f8a:	f0 e0       	ldi	r31, 0x00	; 0
    1f8c:	80 81       	ld	r24, Z
    1f8e:	48 2f       	mov	r20, r24
    1f90:	8b 81       	ldd	r24, Y+3	; 0x03
    1f92:	28 2f       	mov	r18, r24
    1f94:	30 e0       	ldi	r19, 0x00	; 0
    1f96:	81 e0       	ldi	r24, 0x01	; 1
    1f98:	90 e0       	ldi	r25, 0x00	; 0
    1f9a:	02 2e       	mov	r0, r18
    1f9c:	02 c0       	rjmp	.+4      	; 0x1fa2 <MDIO_SetPinDirection+0x10a>
    1f9e:	88 0f       	add	r24, r24
    1fa0:	99 1f       	adc	r25, r25
    1fa2:	0a 94       	dec	r0
    1fa4:	e2 f7       	brpl	.-8      	; 0x1f9e <MDIO_SetPinDirection+0x106>
    1fa6:	80 95       	com	r24
    1fa8:	84 23       	and	r24, r20
    1faa:	8c 93       	st	X, r24
    1fac:	7a c0       	rjmp	.+244    	; 0x20a2 <MDIO_SetPinDirection+0x20a>
		        default: Local_ErrorState = R_NOK; break;
    1fae:	19 82       	std	Y+1, r1	; 0x01
    1fb0:	78 c0       	rjmp	.+240    	; 0x20a2 <MDIO_SetPinDirection+0x20a>
			}

		}
		else if (Copy_Direction == DIO_u8PIN_OUTPUT)
    1fb2:	8c 81       	ldd	r24, Y+4	; 0x04
    1fb4:	81 30       	cpi	r24, 0x01	; 1
    1fb6:	09 f0       	breq	.+2      	; 0x1fba <MDIO_SetPinDirection+0x122>
    1fb8:	71 c0       	rjmp	.+226    	; 0x209c <MDIO_SetPinDirection+0x204>
		{
			switch (Copy_u8Port)
    1fba:	8a 81       	ldd	r24, Y+2	; 0x02
    1fbc:	28 2f       	mov	r18, r24
    1fbe:	30 e0       	ldi	r19, 0x00	; 0
    1fc0:	3e 83       	std	Y+6, r19	; 0x06
    1fc2:	2d 83       	std	Y+5, r18	; 0x05
    1fc4:	8d 81       	ldd	r24, Y+5	; 0x05
    1fc6:	9e 81       	ldd	r25, Y+6	; 0x06
    1fc8:	81 30       	cpi	r24, 0x01	; 1
    1fca:	91 05       	cpc	r25, r1
    1fcc:	49 f1       	breq	.+82     	; 0x2020 <MDIO_SetPinDirection+0x188>
    1fce:	2d 81       	ldd	r18, Y+5	; 0x05
    1fd0:	3e 81       	ldd	r19, Y+6	; 0x06
    1fd2:	22 30       	cpi	r18, 0x02	; 2
    1fd4:	31 05       	cpc	r19, r1
    1fd6:	2c f4       	brge	.+10     	; 0x1fe2 <MDIO_SetPinDirection+0x14a>
    1fd8:	8d 81       	ldd	r24, Y+5	; 0x05
    1fda:	9e 81       	ldd	r25, Y+6	; 0x06
    1fdc:	00 97       	sbiw	r24, 0x00	; 0
    1fde:	61 f0       	breq	.+24     	; 0x1ff8 <MDIO_SetPinDirection+0x160>
    1fe0:	5b c0       	rjmp	.+182    	; 0x2098 <MDIO_SetPinDirection+0x200>
    1fe2:	2d 81       	ldd	r18, Y+5	; 0x05
    1fe4:	3e 81       	ldd	r19, Y+6	; 0x06
    1fe6:	22 30       	cpi	r18, 0x02	; 2
    1fe8:	31 05       	cpc	r19, r1
    1fea:	71 f1       	breq	.+92     	; 0x2048 <MDIO_SetPinDirection+0x1b0>
    1fec:	8d 81       	ldd	r24, Y+5	; 0x05
    1fee:	9e 81       	ldd	r25, Y+6	; 0x06
    1ff0:	83 30       	cpi	r24, 0x03	; 3
    1ff2:	91 05       	cpc	r25, r1
    1ff4:	e9 f1       	breq	.+122    	; 0x2070 <MDIO_SetPinDirection+0x1d8>
    1ff6:	50 c0       	rjmp	.+160    	; 0x2098 <MDIO_SetPinDirection+0x200>
			{
				case DIO_u8PORTA : SET_BIT(DDRA,Copy_u8Pin); break;
    1ff8:	aa e3       	ldi	r26, 0x3A	; 58
    1ffa:	b0 e0       	ldi	r27, 0x00	; 0
    1ffc:	ea e3       	ldi	r30, 0x3A	; 58
    1ffe:	f0 e0       	ldi	r31, 0x00	; 0
    2000:	80 81       	ld	r24, Z
    2002:	48 2f       	mov	r20, r24
    2004:	8b 81       	ldd	r24, Y+3	; 0x03
    2006:	28 2f       	mov	r18, r24
    2008:	30 e0       	ldi	r19, 0x00	; 0
    200a:	81 e0       	ldi	r24, 0x01	; 1
    200c:	90 e0       	ldi	r25, 0x00	; 0
    200e:	02 2e       	mov	r0, r18
    2010:	02 c0       	rjmp	.+4      	; 0x2016 <MDIO_SetPinDirection+0x17e>
    2012:	88 0f       	add	r24, r24
    2014:	99 1f       	adc	r25, r25
    2016:	0a 94       	dec	r0
    2018:	e2 f7       	brpl	.-8      	; 0x2012 <MDIO_SetPinDirection+0x17a>
    201a:	84 2b       	or	r24, r20
    201c:	8c 93       	st	X, r24
    201e:	41 c0       	rjmp	.+130    	; 0x20a2 <MDIO_SetPinDirection+0x20a>
				case DIO_u8PORTB : SET_BIT(DDRB,Copy_u8Pin); break;
    2020:	a7 e3       	ldi	r26, 0x37	; 55
    2022:	b0 e0       	ldi	r27, 0x00	; 0
    2024:	e7 e3       	ldi	r30, 0x37	; 55
    2026:	f0 e0       	ldi	r31, 0x00	; 0
    2028:	80 81       	ld	r24, Z
    202a:	48 2f       	mov	r20, r24
    202c:	8b 81       	ldd	r24, Y+3	; 0x03
    202e:	28 2f       	mov	r18, r24
    2030:	30 e0       	ldi	r19, 0x00	; 0
    2032:	81 e0       	ldi	r24, 0x01	; 1
    2034:	90 e0       	ldi	r25, 0x00	; 0
    2036:	02 2e       	mov	r0, r18
    2038:	02 c0       	rjmp	.+4      	; 0x203e <MDIO_SetPinDirection+0x1a6>
    203a:	88 0f       	add	r24, r24
    203c:	99 1f       	adc	r25, r25
    203e:	0a 94       	dec	r0
    2040:	e2 f7       	brpl	.-8      	; 0x203a <MDIO_SetPinDirection+0x1a2>
    2042:	84 2b       	or	r24, r20
    2044:	8c 93       	st	X, r24
    2046:	2d c0       	rjmp	.+90     	; 0x20a2 <MDIO_SetPinDirection+0x20a>
				case DIO_u8PORTC : SET_BIT(DDRC,Copy_u8Pin); break;
    2048:	a4 e3       	ldi	r26, 0x34	; 52
    204a:	b0 e0       	ldi	r27, 0x00	; 0
    204c:	e4 e3       	ldi	r30, 0x34	; 52
    204e:	f0 e0       	ldi	r31, 0x00	; 0
    2050:	80 81       	ld	r24, Z
    2052:	48 2f       	mov	r20, r24
    2054:	8b 81       	ldd	r24, Y+3	; 0x03
    2056:	28 2f       	mov	r18, r24
    2058:	30 e0       	ldi	r19, 0x00	; 0
    205a:	81 e0       	ldi	r24, 0x01	; 1
    205c:	90 e0       	ldi	r25, 0x00	; 0
    205e:	02 2e       	mov	r0, r18
    2060:	02 c0       	rjmp	.+4      	; 0x2066 <MDIO_SetPinDirection+0x1ce>
    2062:	88 0f       	add	r24, r24
    2064:	99 1f       	adc	r25, r25
    2066:	0a 94       	dec	r0
    2068:	e2 f7       	brpl	.-8      	; 0x2062 <MDIO_SetPinDirection+0x1ca>
    206a:	84 2b       	or	r24, r20
    206c:	8c 93       	st	X, r24
    206e:	19 c0       	rjmp	.+50     	; 0x20a2 <MDIO_SetPinDirection+0x20a>
				case DIO_u8PORTD : SET_BIT(DDRD,Copy_u8Pin); break;
    2070:	a1 e3       	ldi	r26, 0x31	; 49
    2072:	b0 e0       	ldi	r27, 0x00	; 0
    2074:	e1 e3       	ldi	r30, 0x31	; 49
    2076:	f0 e0       	ldi	r31, 0x00	; 0
    2078:	80 81       	ld	r24, Z
    207a:	48 2f       	mov	r20, r24
    207c:	8b 81       	ldd	r24, Y+3	; 0x03
    207e:	28 2f       	mov	r18, r24
    2080:	30 e0       	ldi	r19, 0x00	; 0
    2082:	81 e0       	ldi	r24, 0x01	; 1
    2084:	90 e0       	ldi	r25, 0x00	; 0
    2086:	02 2e       	mov	r0, r18
    2088:	02 c0       	rjmp	.+4      	; 0x208e <MDIO_SetPinDirection+0x1f6>
    208a:	88 0f       	add	r24, r24
    208c:	99 1f       	adc	r25, r25
    208e:	0a 94       	dec	r0
    2090:	e2 f7       	brpl	.-8      	; 0x208a <MDIO_SetPinDirection+0x1f2>
    2092:	84 2b       	or	r24, r20
    2094:	8c 93       	st	X, r24
    2096:	05 c0       	rjmp	.+10     	; 0x20a2 <MDIO_SetPinDirection+0x20a>
				default: Local_ErrorState = R_NOK; break;
    2098:	19 82       	std	Y+1, r1	; 0x01
    209a:	03 c0       	rjmp	.+6      	; 0x20a2 <MDIO_SetPinDirection+0x20a>
			}

		}
		else
		{
			Local_ErrorState = R_NOK;
    209c:	19 82       	std	Y+1, r1	; 0x01
    209e:	01 c0       	rjmp	.+2      	; 0x20a2 <MDIO_SetPinDirection+0x20a>
		}
	}
	else
	{
		Local_ErrorState = R_NOK;
    20a0:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_ErrorState;
    20a2:	89 81       	ldd	r24, Y+1	; 0x01
}
    20a4:	28 96       	adiw	r28, 0x08	; 8
    20a6:	0f b6       	in	r0, 0x3f	; 63
    20a8:	f8 94       	cli
    20aa:	de bf       	out	0x3e, r29	; 62
    20ac:	0f be       	out	0x3f, r0	; 63
    20ae:	cd bf       	out	0x3d, r28	; 61
    20b0:	cf 91       	pop	r28
    20b2:	df 91       	pop	r29
    20b4:	08 95       	ret

000020b6 <MDIO_SetPortDirection>:

error_state_t	MDIO_SetPortDirection (dio_u8port_t Copy_u8Port, dio_u8portdirec_t Copy_Direction)
{
    20b6:	df 93       	push	r29
    20b8:	cf 93       	push	r28
    20ba:	00 d0       	rcall	.+0      	; 0x20bc <MDIO_SetPortDirection+0x6>
    20bc:	00 d0       	rcall	.+0      	; 0x20be <MDIO_SetPortDirection+0x8>
    20be:	0f 92       	push	r0
    20c0:	cd b7       	in	r28, 0x3d	; 61
    20c2:	de b7       	in	r29, 0x3e	; 62
    20c4:	8a 83       	std	Y+2, r24	; 0x02
    20c6:	6b 83       	std	Y+3, r22	; 0x03
	error_state_t Local_ErrorState = R_OK;
    20c8:	81 e0       	ldi	r24, 0x01	; 1
    20ca:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8Port <= DIO_u8PORTD)
    20cc:	8a 81       	ldd	r24, Y+2	; 0x02
    20ce:	84 30       	cpi	r24, 0x04	; 4
    20d0:	a8 f5       	brcc	.+106    	; 0x213c <MDIO_SetPortDirection+0x86>
	{
		switch (Copy_u8Port)
    20d2:	8a 81       	ldd	r24, Y+2	; 0x02
    20d4:	28 2f       	mov	r18, r24
    20d6:	30 e0       	ldi	r19, 0x00	; 0
    20d8:	3d 83       	std	Y+5, r19	; 0x05
    20da:	2c 83       	std	Y+4, r18	; 0x04
    20dc:	8c 81       	ldd	r24, Y+4	; 0x04
    20de:	9d 81       	ldd	r25, Y+5	; 0x05
    20e0:	81 30       	cpi	r24, 0x01	; 1
    20e2:	91 05       	cpc	r25, r1
    20e4:	d1 f0       	breq	.+52     	; 0x211a <MDIO_SetPortDirection+0x64>
    20e6:	2c 81       	ldd	r18, Y+4	; 0x04
    20e8:	3d 81       	ldd	r19, Y+5	; 0x05
    20ea:	22 30       	cpi	r18, 0x02	; 2
    20ec:	31 05       	cpc	r19, r1
    20ee:	2c f4       	brge	.+10     	; 0x20fa <MDIO_SetPortDirection+0x44>
    20f0:	8c 81       	ldd	r24, Y+4	; 0x04
    20f2:	9d 81       	ldd	r25, Y+5	; 0x05
    20f4:	00 97       	sbiw	r24, 0x00	; 0
    20f6:	61 f0       	breq	.+24     	; 0x2110 <MDIO_SetPortDirection+0x5a>
    20f8:	1f c0       	rjmp	.+62     	; 0x2138 <MDIO_SetPortDirection+0x82>
    20fa:	2c 81       	ldd	r18, Y+4	; 0x04
    20fc:	3d 81       	ldd	r19, Y+5	; 0x05
    20fe:	22 30       	cpi	r18, 0x02	; 2
    2100:	31 05       	cpc	r19, r1
    2102:	81 f0       	breq	.+32     	; 0x2124 <MDIO_SetPortDirection+0x6e>
    2104:	8c 81       	ldd	r24, Y+4	; 0x04
    2106:	9d 81       	ldd	r25, Y+5	; 0x05
    2108:	83 30       	cpi	r24, 0x03	; 3
    210a:	91 05       	cpc	r25, r1
    210c:	81 f0       	breq	.+32     	; 0x212e <MDIO_SetPortDirection+0x78>
    210e:	14 c0       	rjmp	.+40     	; 0x2138 <MDIO_SetPortDirection+0x82>
		{
			case DIO_u8PORTA : DDRA = Copy_Direction; break;
    2110:	ea e3       	ldi	r30, 0x3A	; 58
    2112:	f0 e0       	ldi	r31, 0x00	; 0
    2114:	8b 81       	ldd	r24, Y+3	; 0x03
    2116:	80 83       	st	Z, r24
    2118:	12 c0       	rjmp	.+36     	; 0x213e <MDIO_SetPortDirection+0x88>
			case DIO_u8PORTB : DDRB = Copy_Direction; break;
    211a:	e7 e3       	ldi	r30, 0x37	; 55
    211c:	f0 e0       	ldi	r31, 0x00	; 0
    211e:	8b 81       	ldd	r24, Y+3	; 0x03
    2120:	80 83       	st	Z, r24
    2122:	0d c0       	rjmp	.+26     	; 0x213e <MDIO_SetPortDirection+0x88>
			case DIO_u8PORTC : DDRC = Copy_Direction; break;
    2124:	e4 e3       	ldi	r30, 0x34	; 52
    2126:	f0 e0       	ldi	r31, 0x00	; 0
    2128:	8b 81       	ldd	r24, Y+3	; 0x03
    212a:	80 83       	st	Z, r24
    212c:	08 c0       	rjmp	.+16     	; 0x213e <MDIO_SetPortDirection+0x88>
			case DIO_u8PORTD : DDRD = Copy_Direction; break;
    212e:	e1 e3       	ldi	r30, 0x31	; 49
    2130:	f0 e0       	ldi	r31, 0x00	; 0
    2132:	8b 81       	ldd	r24, Y+3	; 0x03
    2134:	80 83       	st	Z, r24
    2136:	03 c0       	rjmp	.+6      	; 0x213e <MDIO_SetPortDirection+0x88>
			default: Local_ErrorState = R_NOK; break;
    2138:	19 82       	std	Y+1, r1	; 0x01
    213a:	01 c0       	rjmp	.+2      	; 0x213e <MDIO_SetPortDirection+0x88>
		}
	}
	else
	{
		Local_ErrorState = R_NOK;
    213c:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_ErrorState;
    213e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2140:	0f 90       	pop	r0
    2142:	0f 90       	pop	r0
    2144:	0f 90       	pop	r0
    2146:	0f 90       	pop	r0
    2148:	0f 90       	pop	r0
    214a:	cf 91       	pop	r28
    214c:	df 91       	pop	r29
    214e:	08 95       	ret

00002150 <MDIO_SetPinValue>:


error_state_t	MDIO_SetPinValue (dio_u8port_t Copy_u8Port, dio_u8pin_t Copy_u8Pin, dio_value_t Copy_Value)
{
    2150:	df 93       	push	r29
    2152:	cf 93       	push	r28
    2154:	cd b7       	in	r28, 0x3d	; 61
    2156:	de b7       	in	r29, 0x3e	; 62
    2158:	28 97       	sbiw	r28, 0x08	; 8
    215a:	0f b6       	in	r0, 0x3f	; 63
    215c:	f8 94       	cli
    215e:	de bf       	out	0x3e, r29	; 62
    2160:	0f be       	out	0x3f, r0	; 63
    2162:	cd bf       	out	0x3d, r28	; 61
    2164:	8a 83       	std	Y+2, r24	; 0x02
    2166:	6b 83       	std	Y+3, r22	; 0x03
    2168:	4c 83       	std	Y+4, r20	; 0x04
	error_state_t Local_ErrorState = R_OK;
    216a:	81 e0       	ldi	r24, 0x01	; 1
    216c:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8Pin <= DIO_u8PIN7)
    216e:	8b 81       	ldd	r24, Y+3	; 0x03
    2170:	88 30       	cpi	r24, 0x08	; 8
    2172:	08 f0       	brcs	.+2      	; 0x2176 <MDIO_SetPinValue+0x26>
    2174:	ef c0       	rjmp	.+478    	; 0x2354 <MDIO_SetPinValue+0x204>
	{
		if (Copy_Value == DIO_u8PIN_LOW)
    2176:	8c 81       	ldd	r24, Y+4	; 0x04
    2178:	88 23       	and	r24, r24
    217a:	09 f0       	breq	.+2      	; 0x217e <MDIO_SetPinValue+0x2e>
    217c:	74 c0       	rjmp	.+232    	; 0x2266 <MDIO_SetPinValue+0x116>
		{
			switch (Copy_u8Port)
    217e:	8a 81       	ldd	r24, Y+2	; 0x02
    2180:	28 2f       	mov	r18, r24
    2182:	30 e0       	ldi	r19, 0x00	; 0
    2184:	38 87       	std	Y+8, r19	; 0x08
    2186:	2f 83       	std	Y+7, r18	; 0x07
    2188:	8f 81       	ldd	r24, Y+7	; 0x07
    218a:	98 85       	ldd	r25, Y+8	; 0x08
    218c:	81 30       	cpi	r24, 0x01	; 1
    218e:	91 05       	cpc	r25, r1
    2190:	59 f1       	breq	.+86     	; 0x21e8 <MDIO_SetPinValue+0x98>
    2192:	2f 81       	ldd	r18, Y+7	; 0x07
    2194:	38 85       	ldd	r19, Y+8	; 0x08
    2196:	22 30       	cpi	r18, 0x02	; 2
    2198:	31 05       	cpc	r19, r1
    219a:	2c f4       	brge	.+10     	; 0x21a6 <MDIO_SetPinValue+0x56>
    219c:	8f 81       	ldd	r24, Y+7	; 0x07
    219e:	98 85       	ldd	r25, Y+8	; 0x08
    21a0:	00 97       	sbiw	r24, 0x00	; 0
    21a2:	69 f0       	breq	.+26     	; 0x21be <MDIO_SetPinValue+0x6e>
    21a4:	d8 c0       	rjmp	.+432    	; 0x2356 <MDIO_SetPinValue+0x206>
    21a6:	2f 81       	ldd	r18, Y+7	; 0x07
    21a8:	38 85       	ldd	r19, Y+8	; 0x08
    21aa:	22 30       	cpi	r18, 0x02	; 2
    21ac:	31 05       	cpc	r19, r1
    21ae:	89 f1       	breq	.+98     	; 0x2212 <MDIO_SetPinValue+0xc2>
    21b0:	8f 81       	ldd	r24, Y+7	; 0x07
    21b2:	98 85       	ldd	r25, Y+8	; 0x08
    21b4:	83 30       	cpi	r24, 0x03	; 3
    21b6:	91 05       	cpc	r25, r1
    21b8:	09 f4       	brne	.+2      	; 0x21bc <MDIO_SetPinValue+0x6c>
    21ba:	40 c0       	rjmp	.+128    	; 0x223c <MDIO_SetPinValue+0xec>
    21bc:	cc c0       	rjmp	.+408    	; 0x2356 <MDIO_SetPinValue+0x206>
			{
				case DIO_u8PORTA : CLR_BIT(PORTA,Copy_u8Pin); break;
    21be:	ab e3       	ldi	r26, 0x3B	; 59
    21c0:	b0 e0       	ldi	r27, 0x00	; 0
    21c2:	eb e3       	ldi	r30, 0x3B	; 59
    21c4:	f0 e0       	ldi	r31, 0x00	; 0
    21c6:	80 81       	ld	r24, Z
    21c8:	48 2f       	mov	r20, r24
    21ca:	8b 81       	ldd	r24, Y+3	; 0x03
    21cc:	28 2f       	mov	r18, r24
    21ce:	30 e0       	ldi	r19, 0x00	; 0
    21d0:	81 e0       	ldi	r24, 0x01	; 1
    21d2:	90 e0       	ldi	r25, 0x00	; 0
    21d4:	02 2e       	mov	r0, r18
    21d6:	02 c0       	rjmp	.+4      	; 0x21dc <MDIO_SetPinValue+0x8c>
    21d8:	88 0f       	add	r24, r24
    21da:	99 1f       	adc	r25, r25
    21dc:	0a 94       	dec	r0
    21de:	e2 f7       	brpl	.-8      	; 0x21d8 <MDIO_SetPinValue+0x88>
    21e0:	80 95       	com	r24
    21e2:	84 23       	and	r24, r20
    21e4:	8c 93       	st	X, r24
    21e6:	b7 c0       	rjmp	.+366    	; 0x2356 <MDIO_SetPinValue+0x206>
				case DIO_u8PORTB : CLR_BIT(PORTB,Copy_u8Pin); break;
    21e8:	a8 e3       	ldi	r26, 0x38	; 56
    21ea:	b0 e0       	ldi	r27, 0x00	; 0
    21ec:	e8 e3       	ldi	r30, 0x38	; 56
    21ee:	f0 e0       	ldi	r31, 0x00	; 0
    21f0:	80 81       	ld	r24, Z
    21f2:	48 2f       	mov	r20, r24
    21f4:	8b 81       	ldd	r24, Y+3	; 0x03
    21f6:	28 2f       	mov	r18, r24
    21f8:	30 e0       	ldi	r19, 0x00	; 0
    21fa:	81 e0       	ldi	r24, 0x01	; 1
    21fc:	90 e0       	ldi	r25, 0x00	; 0
    21fe:	02 2e       	mov	r0, r18
    2200:	02 c0       	rjmp	.+4      	; 0x2206 <MDIO_SetPinValue+0xb6>
    2202:	88 0f       	add	r24, r24
    2204:	99 1f       	adc	r25, r25
    2206:	0a 94       	dec	r0
    2208:	e2 f7       	brpl	.-8      	; 0x2202 <MDIO_SetPinValue+0xb2>
    220a:	80 95       	com	r24
    220c:	84 23       	and	r24, r20
    220e:	8c 93       	st	X, r24
    2210:	a2 c0       	rjmp	.+324    	; 0x2356 <MDIO_SetPinValue+0x206>
				case DIO_u8PORTC : CLR_BIT(PORTC,Copy_u8Pin); break;
    2212:	a5 e3       	ldi	r26, 0x35	; 53
    2214:	b0 e0       	ldi	r27, 0x00	; 0
    2216:	e5 e3       	ldi	r30, 0x35	; 53
    2218:	f0 e0       	ldi	r31, 0x00	; 0
    221a:	80 81       	ld	r24, Z
    221c:	48 2f       	mov	r20, r24
    221e:	8b 81       	ldd	r24, Y+3	; 0x03
    2220:	28 2f       	mov	r18, r24
    2222:	30 e0       	ldi	r19, 0x00	; 0
    2224:	81 e0       	ldi	r24, 0x01	; 1
    2226:	90 e0       	ldi	r25, 0x00	; 0
    2228:	02 2e       	mov	r0, r18
    222a:	02 c0       	rjmp	.+4      	; 0x2230 <MDIO_SetPinValue+0xe0>
    222c:	88 0f       	add	r24, r24
    222e:	99 1f       	adc	r25, r25
    2230:	0a 94       	dec	r0
    2232:	e2 f7       	brpl	.-8      	; 0x222c <MDIO_SetPinValue+0xdc>
    2234:	80 95       	com	r24
    2236:	84 23       	and	r24, r20
    2238:	8c 93       	st	X, r24
    223a:	8d c0       	rjmp	.+282    	; 0x2356 <MDIO_SetPinValue+0x206>
				case DIO_u8PORTD : CLR_BIT(PORTD,Copy_u8Pin); break;
    223c:	a2 e3       	ldi	r26, 0x32	; 50
    223e:	b0 e0       	ldi	r27, 0x00	; 0
    2240:	e2 e3       	ldi	r30, 0x32	; 50
    2242:	f0 e0       	ldi	r31, 0x00	; 0
    2244:	80 81       	ld	r24, Z
    2246:	48 2f       	mov	r20, r24
    2248:	8b 81       	ldd	r24, Y+3	; 0x03
    224a:	28 2f       	mov	r18, r24
    224c:	30 e0       	ldi	r19, 0x00	; 0
    224e:	81 e0       	ldi	r24, 0x01	; 1
    2250:	90 e0       	ldi	r25, 0x00	; 0
    2252:	02 2e       	mov	r0, r18
    2254:	02 c0       	rjmp	.+4      	; 0x225a <MDIO_SetPinValue+0x10a>
    2256:	88 0f       	add	r24, r24
    2258:	99 1f       	adc	r25, r25
    225a:	0a 94       	dec	r0
    225c:	e2 f7       	brpl	.-8      	; 0x2256 <MDIO_SetPinValue+0x106>
    225e:	80 95       	com	r24
    2260:	84 23       	and	r24, r20
    2262:	8c 93       	st	X, r24
    2264:	78 c0       	rjmp	.+240    	; 0x2356 <MDIO_SetPinValue+0x206>
			}

		}
		else if (Copy_Value == DIO_u8PIN_HIGH)
    2266:	8c 81       	ldd	r24, Y+4	; 0x04
    2268:	81 30       	cpi	r24, 0x01	; 1
    226a:	09 f0       	breq	.+2      	; 0x226e <MDIO_SetPinValue+0x11e>
    226c:	71 c0       	rjmp	.+226    	; 0x2350 <MDIO_SetPinValue+0x200>
		{
			switch (Copy_u8Port)
    226e:	8a 81       	ldd	r24, Y+2	; 0x02
    2270:	28 2f       	mov	r18, r24
    2272:	30 e0       	ldi	r19, 0x00	; 0
    2274:	3e 83       	std	Y+6, r19	; 0x06
    2276:	2d 83       	std	Y+5, r18	; 0x05
    2278:	8d 81       	ldd	r24, Y+5	; 0x05
    227a:	9e 81       	ldd	r25, Y+6	; 0x06
    227c:	81 30       	cpi	r24, 0x01	; 1
    227e:	91 05       	cpc	r25, r1
    2280:	49 f1       	breq	.+82     	; 0x22d4 <MDIO_SetPinValue+0x184>
    2282:	2d 81       	ldd	r18, Y+5	; 0x05
    2284:	3e 81       	ldd	r19, Y+6	; 0x06
    2286:	22 30       	cpi	r18, 0x02	; 2
    2288:	31 05       	cpc	r19, r1
    228a:	2c f4       	brge	.+10     	; 0x2296 <MDIO_SetPinValue+0x146>
    228c:	8d 81       	ldd	r24, Y+5	; 0x05
    228e:	9e 81       	ldd	r25, Y+6	; 0x06
    2290:	00 97       	sbiw	r24, 0x00	; 0
    2292:	61 f0       	breq	.+24     	; 0x22ac <MDIO_SetPinValue+0x15c>
    2294:	5b c0       	rjmp	.+182    	; 0x234c <MDIO_SetPinValue+0x1fc>
    2296:	2d 81       	ldd	r18, Y+5	; 0x05
    2298:	3e 81       	ldd	r19, Y+6	; 0x06
    229a:	22 30       	cpi	r18, 0x02	; 2
    229c:	31 05       	cpc	r19, r1
    229e:	71 f1       	breq	.+92     	; 0x22fc <MDIO_SetPinValue+0x1ac>
    22a0:	8d 81       	ldd	r24, Y+5	; 0x05
    22a2:	9e 81       	ldd	r25, Y+6	; 0x06
    22a4:	83 30       	cpi	r24, 0x03	; 3
    22a6:	91 05       	cpc	r25, r1
    22a8:	e9 f1       	breq	.+122    	; 0x2324 <MDIO_SetPinValue+0x1d4>
    22aa:	50 c0       	rjmp	.+160    	; 0x234c <MDIO_SetPinValue+0x1fc>
			{
				case DIO_u8PORTA : SET_BIT(PORTA,Copy_u8Pin); break;
    22ac:	ab e3       	ldi	r26, 0x3B	; 59
    22ae:	b0 e0       	ldi	r27, 0x00	; 0
    22b0:	eb e3       	ldi	r30, 0x3B	; 59
    22b2:	f0 e0       	ldi	r31, 0x00	; 0
    22b4:	80 81       	ld	r24, Z
    22b6:	48 2f       	mov	r20, r24
    22b8:	8b 81       	ldd	r24, Y+3	; 0x03
    22ba:	28 2f       	mov	r18, r24
    22bc:	30 e0       	ldi	r19, 0x00	; 0
    22be:	81 e0       	ldi	r24, 0x01	; 1
    22c0:	90 e0       	ldi	r25, 0x00	; 0
    22c2:	02 2e       	mov	r0, r18
    22c4:	02 c0       	rjmp	.+4      	; 0x22ca <MDIO_SetPinValue+0x17a>
    22c6:	88 0f       	add	r24, r24
    22c8:	99 1f       	adc	r25, r25
    22ca:	0a 94       	dec	r0
    22cc:	e2 f7       	brpl	.-8      	; 0x22c6 <MDIO_SetPinValue+0x176>
    22ce:	84 2b       	or	r24, r20
    22d0:	8c 93       	st	X, r24
    22d2:	41 c0       	rjmp	.+130    	; 0x2356 <MDIO_SetPinValue+0x206>
				case DIO_u8PORTB : SET_BIT(PORTB,Copy_u8Pin); break;
    22d4:	a8 e3       	ldi	r26, 0x38	; 56
    22d6:	b0 e0       	ldi	r27, 0x00	; 0
    22d8:	e8 e3       	ldi	r30, 0x38	; 56
    22da:	f0 e0       	ldi	r31, 0x00	; 0
    22dc:	80 81       	ld	r24, Z
    22de:	48 2f       	mov	r20, r24
    22e0:	8b 81       	ldd	r24, Y+3	; 0x03
    22e2:	28 2f       	mov	r18, r24
    22e4:	30 e0       	ldi	r19, 0x00	; 0
    22e6:	81 e0       	ldi	r24, 0x01	; 1
    22e8:	90 e0       	ldi	r25, 0x00	; 0
    22ea:	02 2e       	mov	r0, r18
    22ec:	02 c0       	rjmp	.+4      	; 0x22f2 <MDIO_SetPinValue+0x1a2>
    22ee:	88 0f       	add	r24, r24
    22f0:	99 1f       	adc	r25, r25
    22f2:	0a 94       	dec	r0
    22f4:	e2 f7       	brpl	.-8      	; 0x22ee <MDIO_SetPinValue+0x19e>
    22f6:	84 2b       	or	r24, r20
    22f8:	8c 93       	st	X, r24
    22fa:	2d c0       	rjmp	.+90     	; 0x2356 <MDIO_SetPinValue+0x206>
				case DIO_u8PORTC : SET_BIT(PORTC,Copy_u8Pin); break;
    22fc:	a5 e3       	ldi	r26, 0x35	; 53
    22fe:	b0 e0       	ldi	r27, 0x00	; 0
    2300:	e5 e3       	ldi	r30, 0x35	; 53
    2302:	f0 e0       	ldi	r31, 0x00	; 0
    2304:	80 81       	ld	r24, Z
    2306:	48 2f       	mov	r20, r24
    2308:	8b 81       	ldd	r24, Y+3	; 0x03
    230a:	28 2f       	mov	r18, r24
    230c:	30 e0       	ldi	r19, 0x00	; 0
    230e:	81 e0       	ldi	r24, 0x01	; 1
    2310:	90 e0       	ldi	r25, 0x00	; 0
    2312:	02 2e       	mov	r0, r18
    2314:	02 c0       	rjmp	.+4      	; 0x231a <MDIO_SetPinValue+0x1ca>
    2316:	88 0f       	add	r24, r24
    2318:	99 1f       	adc	r25, r25
    231a:	0a 94       	dec	r0
    231c:	e2 f7       	brpl	.-8      	; 0x2316 <MDIO_SetPinValue+0x1c6>
    231e:	84 2b       	or	r24, r20
    2320:	8c 93       	st	X, r24
    2322:	19 c0       	rjmp	.+50     	; 0x2356 <MDIO_SetPinValue+0x206>
				case DIO_u8PORTD : SET_BIT(PORTD,Copy_u8Pin); break;
    2324:	a2 e3       	ldi	r26, 0x32	; 50
    2326:	b0 e0       	ldi	r27, 0x00	; 0
    2328:	e2 e3       	ldi	r30, 0x32	; 50
    232a:	f0 e0       	ldi	r31, 0x00	; 0
    232c:	80 81       	ld	r24, Z
    232e:	48 2f       	mov	r20, r24
    2330:	8b 81       	ldd	r24, Y+3	; 0x03
    2332:	28 2f       	mov	r18, r24
    2334:	30 e0       	ldi	r19, 0x00	; 0
    2336:	81 e0       	ldi	r24, 0x01	; 1
    2338:	90 e0       	ldi	r25, 0x00	; 0
    233a:	02 2e       	mov	r0, r18
    233c:	02 c0       	rjmp	.+4      	; 0x2342 <MDIO_SetPinValue+0x1f2>
    233e:	88 0f       	add	r24, r24
    2340:	99 1f       	adc	r25, r25
    2342:	0a 94       	dec	r0
    2344:	e2 f7       	brpl	.-8      	; 0x233e <MDIO_SetPinValue+0x1ee>
    2346:	84 2b       	or	r24, r20
    2348:	8c 93       	st	X, r24
    234a:	05 c0       	rjmp	.+10     	; 0x2356 <MDIO_SetPinValue+0x206>
		    	default: Local_ErrorState = R_NOK; break;
    234c:	19 82       	std	Y+1, r1	; 0x01
    234e:	03 c0       	rjmp	.+6      	; 0x2356 <MDIO_SetPinValue+0x206>
			}

		}
		else
		{
			Local_ErrorState = R_NOK;
    2350:	19 82       	std	Y+1, r1	; 0x01
    2352:	01 c0       	rjmp	.+2      	; 0x2356 <MDIO_SetPinValue+0x206>
		}
	}
	else
	{
		Local_ErrorState = R_NOK;
    2354:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_ErrorState;
    2356:	89 81       	ldd	r24, Y+1	; 0x01
}
    2358:	28 96       	adiw	r28, 0x08	; 8
    235a:	0f b6       	in	r0, 0x3f	; 63
    235c:	f8 94       	cli
    235e:	de bf       	out	0x3e, r29	; 62
    2360:	0f be       	out	0x3f, r0	; 63
    2362:	cd bf       	out	0x3d, r28	; 61
    2364:	cf 91       	pop	r28
    2366:	df 91       	pop	r29
    2368:	08 95       	ret

0000236a <MDIO_SetPortValue>:


error_state_t	MDIO_SetPortValue (dio_u8port_t Copy_u8Port, dio_u8portvalue_t Copy_Value)
{
    236a:	df 93       	push	r29
    236c:	cf 93       	push	r28
    236e:	00 d0       	rcall	.+0      	; 0x2370 <MDIO_SetPortValue+0x6>
    2370:	00 d0       	rcall	.+0      	; 0x2372 <MDIO_SetPortValue+0x8>
    2372:	0f 92       	push	r0
    2374:	cd b7       	in	r28, 0x3d	; 61
    2376:	de b7       	in	r29, 0x3e	; 62
    2378:	8a 83       	std	Y+2, r24	; 0x02
    237a:	6b 83       	std	Y+3, r22	; 0x03
	error_state_t Local_ErrorState = R_OK;
    237c:	81 e0       	ldi	r24, 0x01	; 1
    237e:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8Port <= DIO_u8PORTD)
    2380:	8a 81       	ldd	r24, Y+2	; 0x02
    2382:	84 30       	cpi	r24, 0x04	; 4
    2384:	a8 f5       	brcc	.+106    	; 0x23f0 <MDIO_SetPortValue+0x86>
	{
		switch (Copy_u8Port)
    2386:	8a 81       	ldd	r24, Y+2	; 0x02
    2388:	28 2f       	mov	r18, r24
    238a:	30 e0       	ldi	r19, 0x00	; 0
    238c:	3d 83       	std	Y+5, r19	; 0x05
    238e:	2c 83       	std	Y+4, r18	; 0x04
    2390:	8c 81       	ldd	r24, Y+4	; 0x04
    2392:	9d 81       	ldd	r25, Y+5	; 0x05
    2394:	81 30       	cpi	r24, 0x01	; 1
    2396:	91 05       	cpc	r25, r1
    2398:	d1 f0       	breq	.+52     	; 0x23ce <MDIO_SetPortValue+0x64>
    239a:	2c 81       	ldd	r18, Y+4	; 0x04
    239c:	3d 81       	ldd	r19, Y+5	; 0x05
    239e:	22 30       	cpi	r18, 0x02	; 2
    23a0:	31 05       	cpc	r19, r1
    23a2:	2c f4       	brge	.+10     	; 0x23ae <MDIO_SetPortValue+0x44>
    23a4:	8c 81       	ldd	r24, Y+4	; 0x04
    23a6:	9d 81       	ldd	r25, Y+5	; 0x05
    23a8:	00 97       	sbiw	r24, 0x00	; 0
    23aa:	61 f0       	breq	.+24     	; 0x23c4 <MDIO_SetPortValue+0x5a>
    23ac:	1f c0       	rjmp	.+62     	; 0x23ec <MDIO_SetPortValue+0x82>
    23ae:	2c 81       	ldd	r18, Y+4	; 0x04
    23b0:	3d 81       	ldd	r19, Y+5	; 0x05
    23b2:	22 30       	cpi	r18, 0x02	; 2
    23b4:	31 05       	cpc	r19, r1
    23b6:	81 f0       	breq	.+32     	; 0x23d8 <MDIO_SetPortValue+0x6e>
    23b8:	8c 81       	ldd	r24, Y+4	; 0x04
    23ba:	9d 81       	ldd	r25, Y+5	; 0x05
    23bc:	83 30       	cpi	r24, 0x03	; 3
    23be:	91 05       	cpc	r25, r1
    23c0:	81 f0       	breq	.+32     	; 0x23e2 <MDIO_SetPortValue+0x78>
    23c2:	14 c0       	rjmp	.+40     	; 0x23ec <MDIO_SetPortValue+0x82>
		{
			case DIO_u8PORTA : PORTA = Copy_Value; break;
    23c4:	eb e3       	ldi	r30, 0x3B	; 59
    23c6:	f0 e0       	ldi	r31, 0x00	; 0
    23c8:	8b 81       	ldd	r24, Y+3	; 0x03
    23ca:	80 83       	st	Z, r24
    23cc:	12 c0       	rjmp	.+36     	; 0x23f2 <MDIO_SetPortValue+0x88>
			case DIO_u8PORTB : PORTB = Copy_Value; break;
    23ce:	e8 e3       	ldi	r30, 0x38	; 56
    23d0:	f0 e0       	ldi	r31, 0x00	; 0
    23d2:	8b 81       	ldd	r24, Y+3	; 0x03
    23d4:	80 83       	st	Z, r24
    23d6:	0d c0       	rjmp	.+26     	; 0x23f2 <MDIO_SetPortValue+0x88>
			case DIO_u8PORTC : PORTC = Copy_Value; break;
    23d8:	e5 e3       	ldi	r30, 0x35	; 53
    23da:	f0 e0       	ldi	r31, 0x00	; 0
    23dc:	8b 81       	ldd	r24, Y+3	; 0x03
    23de:	80 83       	st	Z, r24
    23e0:	08 c0       	rjmp	.+16     	; 0x23f2 <MDIO_SetPortValue+0x88>
			case DIO_u8PORTD : PORTD = Copy_Value; break;
    23e2:	e2 e3       	ldi	r30, 0x32	; 50
    23e4:	f0 e0       	ldi	r31, 0x00	; 0
    23e6:	8b 81       	ldd	r24, Y+3	; 0x03
    23e8:	80 83       	st	Z, r24
    23ea:	03 c0       	rjmp	.+6      	; 0x23f2 <MDIO_SetPortValue+0x88>
			default: Local_ErrorState = R_NOK; break;
    23ec:	19 82       	std	Y+1, r1	; 0x01
    23ee:	01 c0       	rjmp	.+2      	; 0x23f2 <MDIO_SetPortValue+0x88>
		}
	}
	else
	{
		Local_ErrorState = R_NOK;
    23f0:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_ErrorState;
    23f2:	89 81       	ldd	r24, Y+1	; 0x01
}
    23f4:	0f 90       	pop	r0
    23f6:	0f 90       	pop	r0
    23f8:	0f 90       	pop	r0
    23fa:	0f 90       	pop	r0
    23fc:	0f 90       	pop	r0
    23fe:	cf 91       	pop	r28
    2400:	df 91       	pop	r29
    2402:	08 95       	ret

00002404 <MDIO_GetPinValue>:


error_state_t	MDIO_GetPinValue (dio_u8port_t Copy_u8Port, dio_u8pin_t Copy_u8Pin, u8* Copy_pu8Value)
{
    2404:	df 93       	push	r29
    2406:	cf 93       	push	r28
    2408:	cd b7       	in	r28, 0x3d	; 61
    240a:	de b7       	in	r29, 0x3e	; 62
    240c:	27 97       	sbiw	r28, 0x07	; 7
    240e:	0f b6       	in	r0, 0x3f	; 63
    2410:	f8 94       	cli
    2412:	de bf       	out	0x3e, r29	; 62
    2414:	0f be       	out	0x3f, r0	; 63
    2416:	cd bf       	out	0x3d, r28	; 61
    2418:	8a 83       	std	Y+2, r24	; 0x02
    241a:	6b 83       	std	Y+3, r22	; 0x03
    241c:	5d 83       	std	Y+5, r21	; 0x05
    241e:	4c 83       	std	Y+4, r20	; 0x04
	error_state_t Local_ErrorState = R_OK;
    2420:	81 e0       	ldi	r24, 0x01	; 1
    2422:	89 83       	std	Y+1, r24	; 0x01

	if((Copy_pu8Value != NULL) && (Copy_u8Pin <= DIO_u8PIN7))
    2424:	8c 81       	ldd	r24, Y+4	; 0x04
    2426:	9d 81       	ldd	r25, Y+5	; 0x05
    2428:	00 97       	sbiw	r24, 0x00	; 0
    242a:	09 f4       	brne	.+2      	; 0x242e <MDIO_GetPinValue+0x2a>
    242c:	77 c0       	rjmp	.+238    	; 0x251c <MDIO_GetPinValue+0x118>
    242e:	8b 81       	ldd	r24, Y+3	; 0x03
    2430:	88 30       	cpi	r24, 0x08	; 8
    2432:	08 f0       	brcs	.+2      	; 0x2436 <MDIO_GetPinValue+0x32>
    2434:	73 c0       	rjmp	.+230    	; 0x251c <MDIO_GetPinValue+0x118>
	{
		switch (Copy_u8Port)
    2436:	8a 81       	ldd	r24, Y+2	; 0x02
    2438:	28 2f       	mov	r18, r24
    243a:	30 e0       	ldi	r19, 0x00	; 0
    243c:	3f 83       	std	Y+7, r19	; 0x07
    243e:	2e 83       	std	Y+6, r18	; 0x06
    2440:	4e 81       	ldd	r20, Y+6	; 0x06
    2442:	5f 81       	ldd	r21, Y+7	; 0x07
    2444:	41 30       	cpi	r20, 0x01	; 1
    2446:	51 05       	cpc	r21, r1
    2448:	59 f1       	breq	.+86     	; 0x24a0 <MDIO_GetPinValue+0x9c>
    244a:	8e 81       	ldd	r24, Y+6	; 0x06
    244c:	9f 81       	ldd	r25, Y+7	; 0x07
    244e:	82 30       	cpi	r24, 0x02	; 2
    2450:	91 05       	cpc	r25, r1
    2452:	34 f4       	brge	.+12     	; 0x2460 <MDIO_GetPinValue+0x5c>
    2454:	2e 81       	ldd	r18, Y+6	; 0x06
    2456:	3f 81       	ldd	r19, Y+7	; 0x07
    2458:	21 15       	cp	r18, r1
    245a:	31 05       	cpc	r19, r1
    245c:	69 f0       	breq	.+26     	; 0x2478 <MDIO_GetPinValue+0x74>
    245e:	5c c0       	rjmp	.+184    	; 0x2518 <MDIO_GetPinValue+0x114>
    2460:	4e 81       	ldd	r20, Y+6	; 0x06
    2462:	5f 81       	ldd	r21, Y+7	; 0x07
    2464:	42 30       	cpi	r20, 0x02	; 2
    2466:	51 05       	cpc	r21, r1
    2468:	79 f1       	breq	.+94     	; 0x24c8 <MDIO_GetPinValue+0xc4>
    246a:	8e 81       	ldd	r24, Y+6	; 0x06
    246c:	9f 81       	ldd	r25, Y+7	; 0x07
    246e:	83 30       	cpi	r24, 0x03	; 3
    2470:	91 05       	cpc	r25, r1
    2472:	09 f4       	brne	.+2      	; 0x2476 <MDIO_GetPinValue+0x72>
    2474:	3d c0       	rjmp	.+122    	; 0x24f0 <MDIO_GetPinValue+0xec>
    2476:	50 c0       	rjmp	.+160    	; 0x2518 <MDIO_GetPinValue+0x114>
		{
			case DIO_u8PORTA : * Copy_pu8Value = GET_BIT(PINA, Copy_u8Pin); break;
    2478:	e9 e3       	ldi	r30, 0x39	; 57
    247a:	f0 e0       	ldi	r31, 0x00	; 0
    247c:	80 81       	ld	r24, Z
    247e:	28 2f       	mov	r18, r24
    2480:	30 e0       	ldi	r19, 0x00	; 0
    2482:	8b 81       	ldd	r24, Y+3	; 0x03
    2484:	88 2f       	mov	r24, r24
    2486:	90 e0       	ldi	r25, 0x00	; 0
    2488:	a9 01       	movw	r20, r18
    248a:	02 c0       	rjmp	.+4      	; 0x2490 <MDIO_GetPinValue+0x8c>
    248c:	55 95       	asr	r21
    248e:	47 95       	ror	r20
    2490:	8a 95       	dec	r24
    2492:	e2 f7       	brpl	.-8      	; 0x248c <MDIO_GetPinValue+0x88>
    2494:	ca 01       	movw	r24, r20
    2496:	81 70       	andi	r24, 0x01	; 1
    2498:	ec 81       	ldd	r30, Y+4	; 0x04
    249a:	fd 81       	ldd	r31, Y+5	; 0x05
    249c:	80 83       	st	Z, r24
    249e:	3f c0       	rjmp	.+126    	; 0x251e <MDIO_GetPinValue+0x11a>
			case DIO_u8PORTB : * Copy_pu8Value = GET_BIT(PINB, Copy_u8Pin); break;
    24a0:	e6 e3       	ldi	r30, 0x36	; 54
    24a2:	f0 e0       	ldi	r31, 0x00	; 0
    24a4:	80 81       	ld	r24, Z
    24a6:	28 2f       	mov	r18, r24
    24a8:	30 e0       	ldi	r19, 0x00	; 0
    24aa:	8b 81       	ldd	r24, Y+3	; 0x03
    24ac:	88 2f       	mov	r24, r24
    24ae:	90 e0       	ldi	r25, 0x00	; 0
    24b0:	a9 01       	movw	r20, r18
    24b2:	02 c0       	rjmp	.+4      	; 0x24b8 <MDIO_GetPinValue+0xb4>
    24b4:	55 95       	asr	r21
    24b6:	47 95       	ror	r20
    24b8:	8a 95       	dec	r24
    24ba:	e2 f7       	brpl	.-8      	; 0x24b4 <MDIO_GetPinValue+0xb0>
    24bc:	ca 01       	movw	r24, r20
    24be:	81 70       	andi	r24, 0x01	; 1
    24c0:	ec 81       	ldd	r30, Y+4	; 0x04
    24c2:	fd 81       	ldd	r31, Y+5	; 0x05
    24c4:	80 83       	st	Z, r24
    24c6:	2b c0       	rjmp	.+86     	; 0x251e <MDIO_GetPinValue+0x11a>
			case DIO_u8PORTC : * Copy_pu8Value = GET_BIT(PINC, Copy_u8Pin); break;
    24c8:	e3 e3       	ldi	r30, 0x33	; 51
    24ca:	f0 e0       	ldi	r31, 0x00	; 0
    24cc:	80 81       	ld	r24, Z
    24ce:	28 2f       	mov	r18, r24
    24d0:	30 e0       	ldi	r19, 0x00	; 0
    24d2:	8b 81       	ldd	r24, Y+3	; 0x03
    24d4:	88 2f       	mov	r24, r24
    24d6:	90 e0       	ldi	r25, 0x00	; 0
    24d8:	a9 01       	movw	r20, r18
    24da:	02 c0       	rjmp	.+4      	; 0x24e0 <MDIO_GetPinValue+0xdc>
    24dc:	55 95       	asr	r21
    24de:	47 95       	ror	r20
    24e0:	8a 95       	dec	r24
    24e2:	e2 f7       	brpl	.-8      	; 0x24dc <MDIO_GetPinValue+0xd8>
    24e4:	ca 01       	movw	r24, r20
    24e6:	81 70       	andi	r24, 0x01	; 1
    24e8:	ec 81       	ldd	r30, Y+4	; 0x04
    24ea:	fd 81       	ldd	r31, Y+5	; 0x05
    24ec:	80 83       	st	Z, r24
    24ee:	17 c0       	rjmp	.+46     	; 0x251e <MDIO_GetPinValue+0x11a>
			case DIO_u8PORTD : * Copy_pu8Value = GET_BIT(PIND, Copy_u8Pin); break;
    24f0:	e0 e3       	ldi	r30, 0x30	; 48
    24f2:	f0 e0       	ldi	r31, 0x00	; 0
    24f4:	80 81       	ld	r24, Z
    24f6:	28 2f       	mov	r18, r24
    24f8:	30 e0       	ldi	r19, 0x00	; 0
    24fa:	8b 81       	ldd	r24, Y+3	; 0x03
    24fc:	88 2f       	mov	r24, r24
    24fe:	90 e0       	ldi	r25, 0x00	; 0
    2500:	a9 01       	movw	r20, r18
    2502:	02 c0       	rjmp	.+4      	; 0x2508 <MDIO_GetPinValue+0x104>
    2504:	55 95       	asr	r21
    2506:	47 95       	ror	r20
    2508:	8a 95       	dec	r24
    250a:	e2 f7       	brpl	.-8      	; 0x2504 <MDIO_GetPinValue+0x100>
    250c:	ca 01       	movw	r24, r20
    250e:	81 70       	andi	r24, 0x01	; 1
    2510:	ec 81       	ldd	r30, Y+4	; 0x04
    2512:	fd 81       	ldd	r31, Y+5	; 0x05
    2514:	80 83       	st	Z, r24
    2516:	03 c0       	rjmp	.+6      	; 0x251e <MDIO_GetPinValue+0x11a>
			default: Local_ErrorState = R_NOK; break;
    2518:	19 82       	std	Y+1, r1	; 0x01
    251a:	01 c0       	rjmp	.+2      	; 0x251e <MDIO_GetPinValue+0x11a>
		}
	}
	else
	{
		Local_ErrorState = R_NOK;
    251c:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_ErrorState;
    251e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2520:	27 96       	adiw	r28, 0x07	; 7
    2522:	0f b6       	in	r0, 0x3f	; 63
    2524:	f8 94       	cli
    2526:	de bf       	out	0x3e, r29	; 62
    2528:	0f be       	out	0x3f, r0	; 63
    252a:	cd bf       	out	0x3d, r28	; 61
    252c:	cf 91       	pop	r28
    252e:	df 91       	pop	r29
    2530:	08 95       	ret

00002532 <MDIO_GetPortValue>:
error_state_t	MDIO_GetPortValue (dio_u8port_t Copy_u8Port, u8* Copy_pu8Value)
{
    2532:	df 93       	push	r29
    2534:	cf 93       	push	r28
    2536:	00 d0       	rcall	.+0      	; 0x2538 <MDIO_GetPortValue+0x6>
    2538:	00 d0       	rcall	.+0      	; 0x253a <MDIO_GetPortValue+0x8>
    253a:	00 d0       	rcall	.+0      	; 0x253c <MDIO_GetPortValue+0xa>
    253c:	cd b7       	in	r28, 0x3d	; 61
    253e:	de b7       	in	r29, 0x3e	; 62
    2540:	8a 83       	std	Y+2, r24	; 0x02
    2542:	7c 83       	std	Y+4, r23	; 0x04
    2544:	6b 83       	std	Y+3, r22	; 0x03
	error_state_t Local_ErrorState = R_OK;
    2546:	81 e0       	ldi	r24, 0x01	; 1
    2548:	89 83       	std	Y+1, r24	; 0x01

	if((Copy_pu8Value != NULL) && (Copy_u8Port <= DIO_u8PORTD))
    254a:	8b 81       	ldd	r24, Y+3	; 0x03
    254c:	9c 81       	ldd	r25, Y+4	; 0x04
    254e:	00 97       	sbiw	r24, 0x00	; 0
    2550:	09 f4       	brne	.+2      	; 0x2554 <MDIO_GetPortValue+0x22>
    2552:	40 c0       	rjmp	.+128    	; 0x25d4 <MDIO_GetPortValue+0xa2>
    2554:	8a 81       	ldd	r24, Y+2	; 0x02
    2556:	84 30       	cpi	r24, 0x04	; 4
    2558:	e8 f5       	brcc	.+122    	; 0x25d4 <MDIO_GetPortValue+0xa2>
	{
		switch (Copy_u8Port)
    255a:	8a 81       	ldd	r24, Y+2	; 0x02
    255c:	28 2f       	mov	r18, r24
    255e:	30 e0       	ldi	r19, 0x00	; 0
    2560:	3e 83       	std	Y+6, r19	; 0x06
    2562:	2d 83       	std	Y+5, r18	; 0x05
    2564:	8d 81       	ldd	r24, Y+5	; 0x05
    2566:	9e 81       	ldd	r25, Y+6	; 0x06
    2568:	81 30       	cpi	r24, 0x01	; 1
    256a:	91 05       	cpc	r25, r1
    256c:	e1 f0       	breq	.+56     	; 0x25a6 <MDIO_GetPortValue+0x74>
    256e:	2d 81       	ldd	r18, Y+5	; 0x05
    2570:	3e 81       	ldd	r19, Y+6	; 0x06
    2572:	22 30       	cpi	r18, 0x02	; 2
    2574:	31 05       	cpc	r19, r1
    2576:	2c f4       	brge	.+10     	; 0x2582 <MDIO_GetPortValue+0x50>
    2578:	8d 81       	ldd	r24, Y+5	; 0x05
    257a:	9e 81       	ldd	r25, Y+6	; 0x06
    257c:	00 97       	sbiw	r24, 0x00	; 0
    257e:	61 f0       	breq	.+24     	; 0x2598 <MDIO_GetPortValue+0x66>
    2580:	27 c0       	rjmp	.+78     	; 0x25d0 <MDIO_GetPortValue+0x9e>
    2582:	2d 81       	ldd	r18, Y+5	; 0x05
    2584:	3e 81       	ldd	r19, Y+6	; 0x06
    2586:	22 30       	cpi	r18, 0x02	; 2
    2588:	31 05       	cpc	r19, r1
    258a:	a1 f0       	breq	.+40     	; 0x25b4 <MDIO_GetPortValue+0x82>
    258c:	8d 81       	ldd	r24, Y+5	; 0x05
    258e:	9e 81       	ldd	r25, Y+6	; 0x06
    2590:	83 30       	cpi	r24, 0x03	; 3
    2592:	91 05       	cpc	r25, r1
    2594:	b1 f0       	breq	.+44     	; 0x25c2 <MDIO_GetPortValue+0x90>
    2596:	1c c0       	rjmp	.+56     	; 0x25d0 <MDIO_GetPortValue+0x9e>
		{
			case DIO_u8PORTA : * Copy_pu8Value = PINA; break;
    2598:	e9 e3       	ldi	r30, 0x39	; 57
    259a:	f0 e0       	ldi	r31, 0x00	; 0
    259c:	80 81       	ld	r24, Z
    259e:	eb 81       	ldd	r30, Y+3	; 0x03
    25a0:	fc 81       	ldd	r31, Y+4	; 0x04
    25a2:	80 83       	st	Z, r24
    25a4:	18 c0       	rjmp	.+48     	; 0x25d6 <MDIO_GetPortValue+0xa4>
			case DIO_u8PORTB : * Copy_pu8Value = PINB; break;
    25a6:	e6 e3       	ldi	r30, 0x36	; 54
    25a8:	f0 e0       	ldi	r31, 0x00	; 0
    25aa:	80 81       	ld	r24, Z
    25ac:	eb 81       	ldd	r30, Y+3	; 0x03
    25ae:	fc 81       	ldd	r31, Y+4	; 0x04
    25b0:	80 83       	st	Z, r24
    25b2:	11 c0       	rjmp	.+34     	; 0x25d6 <MDIO_GetPortValue+0xa4>
			case DIO_u8PORTC : * Copy_pu8Value = PINC; break;
    25b4:	e3 e3       	ldi	r30, 0x33	; 51
    25b6:	f0 e0       	ldi	r31, 0x00	; 0
    25b8:	80 81       	ld	r24, Z
    25ba:	eb 81       	ldd	r30, Y+3	; 0x03
    25bc:	fc 81       	ldd	r31, Y+4	; 0x04
    25be:	80 83       	st	Z, r24
    25c0:	0a c0       	rjmp	.+20     	; 0x25d6 <MDIO_GetPortValue+0xa4>
			case DIO_u8PORTD : * Copy_pu8Value = PIND; break;
    25c2:	e0 e3       	ldi	r30, 0x30	; 48
    25c4:	f0 e0       	ldi	r31, 0x00	; 0
    25c6:	80 81       	ld	r24, Z
    25c8:	eb 81       	ldd	r30, Y+3	; 0x03
    25ca:	fc 81       	ldd	r31, Y+4	; 0x04
    25cc:	80 83       	st	Z, r24
    25ce:	03 c0       	rjmp	.+6      	; 0x25d6 <MDIO_GetPortValue+0xa4>
			default: Local_ErrorState = R_NOK; break;
    25d0:	19 82       	std	Y+1, r1	; 0x01
    25d2:	01 c0       	rjmp	.+2      	; 0x25d6 <MDIO_GetPortValue+0xa4>
		}
	}
	else
	{
		Local_ErrorState = R_NOK;
    25d4:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_ErrorState;
    25d6:	89 81       	ldd	r24, Y+1	; 0x01
}
    25d8:	26 96       	adiw	r28, 0x06	; 6
    25da:	0f b6       	in	r0, 0x3f	; 63
    25dc:	f8 94       	cli
    25de:	de bf       	out	0x3e, r29	; 62
    25e0:	0f be       	out	0x3f, r0	; 63
    25e2:	cd bf       	out	0x3d, r28	; 61
    25e4:	cf 91       	pop	r28
    25e6:	df 91       	pop	r29
    25e8:	08 95       	ret

000025ea <MDIO_AndValueWithPort>:
error_state_t	MDIO_AndValueWithPort (dio_u8port_t Copy_u8Port, u8 Copy_u8Value, u8 *Copy_u8Result)
{
    25ea:	df 93       	push	r29
    25ec:	cf 93       	push	r28
    25ee:	cd b7       	in	r28, 0x3d	; 61
    25f0:	de b7       	in	r29, 0x3e	; 62
    25f2:	27 97       	sbiw	r28, 0x07	; 7
    25f4:	0f b6       	in	r0, 0x3f	; 63
    25f6:	f8 94       	cli
    25f8:	de bf       	out	0x3e, r29	; 62
    25fa:	0f be       	out	0x3f, r0	; 63
    25fc:	cd bf       	out	0x3d, r28	; 61
    25fe:	8a 83       	std	Y+2, r24	; 0x02
    2600:	6b 83       	std	Y+3, r22	; 0x03
    2602:	5d 83       	std	Y+5, r21	; 0x05
    2604:	4c 83       	std	Y+4, r20	; 0x04
	error_state_t Local_ErrorState = R_OK;
    2606:	81 e0       	ldi	r24, 0x01	; 1
    2608:	89 83       	std	Y+1, r24	; 0x01

	if((Copy_u8Result != NULL) && (Copy_u8Port <= DIO_u8PORTD))
    260a:	8c 81       	ldd	r24, Y+4	; 0x04
    260c:	9d 81       	ldd	r25, Y+5	; 0x05
    260e:	00 97       	sbiw	r24, 0x00	; 0
    2610:	09 f4       	brne	.+2      	; 0x2614 <MDIO_AndValueWithPort+0x2a>
    2612:	49 c0       	rjmp	.+146    	; 0x26a6 <MDIO_AndValueWithPort+0xbc>
    2614:	8a 81       	ldd	r24, Y+2	; 0x02
    2616:	84 30       	cpi	r24, 0x04	; 4
    2618:	08 f0       	brcs	.+2      	; 0x261c <MDIO_AndValueWithPort+0x32>
    261a:	45 c0       	rjmp	.+138    	; 0x26a6 <MDIO_AndValueWithPort+0xbc>
	{
		switch (Copy_u8Port)
    261c:	8a 81       	ldd	r24, Y+2	; 0x02
    261e:	28 2f       	mov	r18, r24
    2620:	30 e0       	ldi	r19, 0x00	; 0
    2622:	3f 83       	std	Y+7, r19	; 0x07
    2624:	2e 83       	std	Y+6, r18	; 0x06
    2626:	8e 81       	ldd	r24, Y+6	; 0x06
    2628:	9f 81       	ldd	r25, Y+7	; 0x07
    262a:	81 30       	cpi	r24, 0x01	; 1
    262c:	91 05       	cpc	r25, r1
    262e:	f1 f0       	breq	.+60     	; 0x266c <MDIO_AndValueWithPort+0x82>
    2630:	2e 81       	ldd	r18, Y+6	; 0x06
    2632:	3f 81       	ldd	r19, Y+7	; 0x07
    2634:	22 30       	cpi	r18, 0x02	; 2
    2636:	31 05       	cpc	r19, r1
    2638:	2c f4       	brge	.+10     	; 0x2644 <MDIO_AndValueWithPort+0x5a>
    263a:	8e 81       	ldd	r24, Y+6	; 0x06
    263c:	9f 81       	ldd	r25, Y+7	; 0x07
    263e:	00 97       	sbiw	r24, 0x00	; 0
    2640:	61 f0       	breq	.+24     	; 0x265a <MDIO_AndValueWithPort+0x70>
    2642:	2f c0       	rjmp	.+94     	; 0x26a2 <MDIO_AndValueWithPort+0xb8>
    2644:	2e 81       	ldd	r18, Y+6	; 0x06
    2646:	3f 81       	ldd	r19, Y+7	; 0x07
    2648:	22 30       	cpi	r18, 0x02	; 2
    264a:	31 05       	cpc	r19, r1
    264c:	c1 f0       	breq	.+48     	; 0x267e <MDIO_AndValueWithPort+0x94>
    264e:	8e 81       	ldd	r24, Y+6	; 0x06
    2650:	9f 81       	ldd	r25, Y+7	; 0x07
    2652:	83 30       	cpi	r24, 0x03	; 3
    2654:	91 05       	cpc	r25, r1
    2656:	e1 f0       	breq	.+56     	; 0x2690 <MDIO_AndValueWithPort+0xa6>
    2658:	24 c0       	rjmp	.+72     	; 0x26a2 <MDIO_AndValueWithPort+0xb8>
		{
			case DIO_u8PORTA : * Copy_u8Result = PORTA & Copy_u8Value; break;
    265a:	eb e3       	ldi	r30, 0x3B	; 59
    265c:	f0 e0       	ldi	r31, 0x00	; 0
    265e:	90 81       	ld	r25, Z
    2660:	8b 81       	ldd	r24, Y+3	; 0x03
    2662:	89 23       	and	r24, r25
    2664:	ec 81       	ldd	r30, Y+4	; 0x04
    2666:	fd 81       	ldd	r31, Y+5	; 0x05
    2668:	80 83       	st	Z, r24
    266a:	1e c0       	rjmp	.+60     	; 0x26a8 <MDIO_AndValueWithPort+0xbe>
			case DIO_u8PORTB : * Copy_u8Result = PORTB & Copy_u8Value; break;
    266c:	e8 e3       	ldi	r30, 0x38	; 56
    266e:	f0 e0       	ldi	r31, 0x00	; 0
    2670:	90 81       	ld	r25, Z
    2672:	8b 81       	ldd	r24, Y+3	; 0x03
    2674:	89 23       	and	r24, r25
    2676:	ec 81       	ldd	r30, Y+4	; 0x04
    2678:	fd 81       	ldd	r31, Y+5	; 0x05
    267a:	80 83       	st	Z, r24
    267c:	15 c0       	rjmp	.+42     	; 0x26a8 <MDIO_AndValueWithPort+0xbe>
			case DIO_u8PORTC : * Copy_u8Result = PORTC & Copy_u8Value; break;
    267e:	e5 e3       	ldi	r30, 0x35	; 53
    2680:	f0 e0       	ldi	r31, 0x00	; 0
    2682:	90 81       	ld	r25, Z
    2684:	8b 81       	ldd	r24, Y+3	; 0x03
    2686:	89 23       	and	r24, r25
    2688:	ec 81       	ldd	r30, Y+4	; 0x04
    268a:	fd 81       	ldd	r31, Y+5	; 0x05
    268c:	80 83       	st	Z, r24
    268e:	0c c0       	rjmp	.+24     	; 0x26a8 <MDIO_AndValueWithPort+0xbe>
			case DIO_u8PORTD : * Copy_u8Result = PORTD & Copy_u8Value; break;
    2690:	e2 e3       	ldi	r30, 0x32	; 50
    2692:	f0 e0       	ldi	r31, 0x00	; 0
    2694:	90 81       	ld	r25, Z
    2696:	8b 81       	ldd	r24, Y+3	; 0x03
    2698:	89 23       	and	r24, r25
    269a:	ec 81       	ldd	r30, Y+4	; 0x04
    269c:	fd 81       	ldd	r31, Y+5	; 0x05
    269e:	80 83       	st	Z, r24
    26a0:	03 c0       	rjmp	.+6      	; 0x26a8 <MDIO_AndValueWithPort+0xbe>
			default: Local_ErrorState = R_NOK; break;
    26a2:	19 82       	std	Y+1, r1	; 0x01
    26a4:	01 c0       	rjmp	.+2      	; 0x26a8 <MDIO_AndValueWithPort+0xbe>
		}
	}
	else
	{
		Local_ErrorState = R_NOK;
    26a6:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_ErrorState;
    26a8:	89 81       	ldd	r24, Y+1	; 0x01
}
    26aa:	27 96       	adiw	r28, 0x07	; 7
    26ac:	0f b6       	in	r0, 0x3f	; 63
    26ae:	f8 94       	cli
    26b0:	de bf       	out	0x3e, r29	; 62
    26b2:	0f be       	out	0x3f, r0	; 63
    26b4:	cd bf       	out	0x3d, r28	; 61
    26b6:	cf 91       	pop	r28
    26b8:	df 91       	pop	r29
    26ba:	08 95       	ret

000026bc <MDIO_TogglePinValue>:

error_state_t	MDIO_TogglePinValue (dio_u8port_t Copy_u8Port, dio_u8pin_t Copy_u8Pin)
{
    26bc:	df 93       	push	r29
    26be:	cf 93       	push	r28
    26c0:	00 d0       	rcall	.+0      	; 0x26c2 <MDIO_TogglePinValue+0x6>
    26c2:	00 d0       	rcall	.+0      	; 0x26c4 <MDIO_TogglePinValue+0x8>
    26c4:	0f 92       	push	r0
    26c6:	cd b7       	in	r28, 0x3d	; 61
    26c8:	de b7       	in	r29, 0x3e	; 62
    26ca:	8a 83       	std	Y+2, r24	; 0x02
    26cc:	6b 83       	std	Y+3, r22	; 0x03
	error_state_t Local_ErrorState = R_OK;
    26ce:	81 e0       	ldi	r24, 0x01	; 1
    26d0:	89 83       	std	Y+1, r24	; 0x01

	if((Copy_u8Port <= DIO_u8PORTD) && (Copy_u8Pin <= DIO_u8PIN7))
    26d2:	8a 81       	ldd	r24, Y+2	; 0x02
    26d4:	84 30       	cpi	r24, 0x04	; 4
    26d6:	08 f0       	brcs	.+2      	; 0x26da <MDIO_TogglePinValue+0x1e>
    26d8:	75 c0       	rjmp	.+234    	; 0x27c4 <MDIO_TogglePinValue+0x108>
    26da:	8b 81       	ldd	r24, Y+3	; 0x03
    26dc:	88 30       	cpi	r24, 0x08	; 8
    26de:	08 f0       	brcs	.+2      	; 0x26e2 <MDIO_TogglePinValue+0x26>
    26e0:	71 c0       	rjmp	.+226    	; 0x27c4 <MDIO_TogglePinValue+0x108>
	{
		switch (Copy_u8Port)
    26e2:	8a 81       	ldd	r24, Y+2	; 0x02
    26e4:	28 2f       	mov	r18, r24
    26e6:	30 e0       	ldi	r19, 0x00	; 0
    26e8:	3d 83       	std	Y+5, r19	; 0x05
    26ea:	2c 83       	std	Y+4, r18	; 0x04
    26ec:	8c 81       	ldd	r24, Y+4	; 0x04
    26ee:	9d 81       	ldd	r25, Y+5	; 0x05
    26f0:	81 30       	cpi	r24, 0x01	; 1
    26f2:	91 05       	cpc	r25, r1
    26f4:	49 f1       	breq	.+82     	; 0x2748 <MDIO_TogglePinValue+0x8c>
    26f6:	2c 81       	ldd	r18, Y+4	; 0x04
    26f8:	3d 81       	ldd	r19, Y+5	; 0x05
    26fa:	22 30       	cpi	r18, 0x02	; 2
    26fc:	31 05       	cpc	r19, r1
    26fe:	2c f4       	brge	.+10     	; 0x270a <MDIO_TogglePinValue+0x4e>
    2700:	8c 81       	ldd	r24, Y+4	; 0x04
    2702:	9d 81       	ldd	r25, Y+5	; 0x05
    2704:	00 97       	sbiw	r24, 0x00	; 0
    2706:	61 f0       	breq	.+24     	; 0x2720 <MDIO_TogglePinValue+0x64>
    2708:	5b c0       	rjmp	.+182    	; 0x27c0 <MDIO_TogglePinValue+0x104>
    270a:	2c 81       	ldd	r18, Y+4	; 0x04
    270c:	3d 81       	ldd	r19, Y+5	; 0x05
    270e:	22 30       	cpi	r18, 0x02	; 2
    2710:	31 05       	cpc	r19, r1
    2712:	71 f1       	breq	.+92     	; 0x2770 <MDIO_TogglePinValue+0xb4>
    2714:	8c 81       	ldd	r24, Y+4	; 0x04
    2716:	9d 81       	ldd	r25, Y+5	; 0x05
    2718:	83 30       	cpi	r24, 0x03	; 3
    271a:	91 05       	cpc	r25, r1
    271c:	e9 f1       	breq	.+122    	; 0x2798 <MDIO_TogglePinValue+0xdc>
    271e:	50 c0       	rjmp	.+160    	; 0x27c0 <MDIO_TogglePinValue+0x104>
		{
			case DIO_u8PORTA : TOG_BIT(PORTA, Copy_u8Pin); break;
    2720:	ab e3       	ldi	r26, 0x3B	; 59
    2722:	b0 e0       	ldi	r27, 0x00	; 0
    2724:	eb e3       	ldi	r30, 0x3B	; 59
    2726:	f0 e0       	ldi	r31, 0x00	; 0
    2728:	80 81       	ld	r24, Z
    272a:	48 2f       	mov	r20, r24
    272c:	8b 81       	ldd	r24, Y+3	; 0x03
    272e:	28 2f       	mov	r18, r24
    2730:	30 e0       	ldi	r19, 0x00	; 0
    2732:	81 e0       	ldi	r24, 0x01	; 1
    2734:	90 e0       	ldi	r25, 0x00	; 0
    2736:	02 2e       	mov	r0, r18
    2738:	02 c0       	rjmp	.+4      	; 0x273e <MDIO_TogglePinValue+0x82>
    273a:	88 0f       	add	r24, r24
    273c:	99 1f       	adc	r25, r25
    273e:	0a 94       	dec	r0
    2740:	e2 f7       	brpl	.-8      	; 0x273a <MDIO_TogglePinValue+0x7e>
    2742:	84 27       	eor	r24, r20
    2744:	8c 93       	st	X, r24
    2746:	3f c0       	rjmp	.+126    	; 0x27c6 <MDIO_TogglePinValue+0x10a>
			case DIO_u8PORTB : TOG_BIT(PORTB, Copy_u8Pin); break;
    2748:	a8 e3       	ldi	r26, 0x38	; 56
    274a:	b0 e0       	ldi	r27, 0x00	; 0
    274c:	e8 e3       	ldi	r30, 0x38	; 56
    274e:	f0 e0       	ldi	r31, 0x00	; 0
    2750:	80 81       	ld	r24, Z
    2752:	48 2f       	mov	r20, r24
    2754:	8b 81       	ldd	r24, Y+3	; 0x03
    2756:	28 2f       	mov	r18, r24
    2758:	30 e0       	ldi	r19, 0x00	; 0
    275a:	81 e0       	ldi	r24, 0x01	; 1
    275c:	90 e0       	ldi	r25, 0x00	; 0
    275e:	02 2e       	mov	r0, r18
    2760:	02 c0       	rjmp	.+4      	; 0x2766 <MDIO_TogglePinValue+0xaa>
    2762:	88 0f       	add	r24, r24
    2764:	99 1f       	adc	r25, r25
    2766:	0a 94       	dec	r0
    2768:	e2 f7       	brpl	.-8      	; 0x2762 <MDIO_TogglePinValue+0xa6>
    276a:	84 27       	eor	r24, r20
    276c:	8c 93       	st	X, r24
    276e:	2b c0       	rjmp	.+86     	; 0x27c6 <MDIO_TogglePinValue+0x10a>
			case DIO_u8PORTC : TOG_BIT(PORTC, Copy_u8Pin); break;
    2770:	a5 e3       	ldi	r26, 0x35	; 53
    2772:	b0 e0       	ldi	r27, 0x00	; 0
    2774:	e5 e3       	ldi	r30, 0x35	; 53
    2776:	f0 e0       	ldi	r31, 0x00	; 0
    2778:	80 81       	ld	r24, Z
    277a:	48 2f       	mov	r20, r24
    277c:	8b 81       	ldd	r24, Y+3	; 0x03
    277e:	28 2f       	mov	r18, r24
    2780:	30 e0       	ldi	r19, 0x00	; 0
    2782:	81 e0       	ldi	r24, 0x01	; 1
    2784:	90 e0       	ldi	r25, 0x00	; 0
    2786:	02 2e       	mov	r0, r18
    2788:	02 c0       	rjmp	.+4      	; 0x278e <MDIO_TogglePinValue+0xd2>
    278a:	88 0f       	add	r24, r24
    278c:	99 1f       	adc	r25, r25
    278e:	0a 94       	dec	r0
    2790:	e2 f7       	brpl	.-8      	; 0x278a <MDIO_TogglePinValue+0xce>
    2792:	84 27       	eor	r24, r20
    2794:	8c 93       	st	X, r24
    2796:	17 c0       	rjmp	.+46     	; 0x27c6 <MDIO_TogglePinValue+0x10a>
			case DIO_u8PORTD : TOG_BIT(PORTD, Copy_u8Pin); break;
    2798:	a2 e3       	ldi	r26, 0x32	; 50
    279a:	b0 e0       	ldi	r27, 0x00	; 0
    279c:	e2 e3       	ldi	r30, 0x32	; 50
    279e:	f0 e0       	ldi	r31, 0x00	; 0
    27a0:	80 81       	ld	r24, Z
    27a2:	48 2f       	mov	r20, r24
    27a4:	8b 81       	ldd	r24, Y+3	; 0x03
    27a6:	28 2f       	mov	r18, r24
    27a8:	30 e0       	ldi	r19, 0x00	; 0
    27aa:	81 e0       	ldi	r24, 0x01	; 1
    27ac:	90 e0       	ldi	r25, 0x00	; 0
    27ae:	02 2e       	mov	r0, r18
    27b0:	02 c0       	rjmp	.+4      	; 0x27b6 <MDIO_TogglePinValue+0xfa>
    27b2:	88 0f       	add	r24, r24
    27b4:	99 1f       	adc	r25, r25
    27b6:	0a 94       	dec	r0
    27b8:	e2 f7       	brpl	.-8      	; 0x27b2 <MDIO_TogglePinValue+0xf6>
    27ba:	84 27       	eor	r24, r20
    27bc:	8c 93       	st	X, r24
    27be:	03 c0       	rjmp	.+6      	; 0x27c6 <MDIO_TogglePinValue+0x10a>
			default: Local_ErrorState = R_NOK; break;
    27c0:	19 82       	std	Y+1, r1	; 0x01
    27c2:	01 c0       	rjmp	.+2      	; 0x27c6 <MDIO_TogglePinValue+0x10a>
		}
	}
	else
	{
		Local_ErrorState = R_NOK;
    27c4:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_ErrorState;
    27c6:	89 81       	ldd	r24, Y+1	; 0x01
}
    27c8:	0f 90       	pop	r0
    27ca:	0f 90       	pop	r0
    27cc:	0f 90       	pop	r0
    27ce:	0f 90       	pop	r0
    27d0:	0f 90       	pop	r0
    27d2:	cf 91       	pop	r28
    27d4:	df 91       	pop	r29
    27d6:	08 95       	ret

000027d8 <MADC_voidInit>:
/**************************** Function Implementation **************************/
/*******************************************************************************/

/***************************** ADC Initialization ******************************/
void MADC_voidInit(void)
{
    27d8:	df 93       	push	r29
    27da:	cf 93       	push	r28
    27dc:	cd b7       	in	r28, 0x3d	; 61
    27de:	de b7       	in	r29, 0x3e	; 62
	/* 1. Select Voltage Reference */
	ADMUX &= ADC_VOLT_REF_SELEC_MASK;
    27e0:	a7 e2       	ldi	r26, 0x27	; 39
    27e2:	b0 e0       	ldi	r27, 0x00	; 0
    27e4:	e7 e2       	ldi	r30, 0x27	; 39
    27e6:	f0 e0       	ldi	r31, 0x00	; 0
    27e8:	80 81       	ld	r24, Z
    27ea:	8f 73       	andi	r24, 0x3F	; 63
    27ec:	8c 93       	st	X, r24
	ADMUX |= ADC_VOLT_REF_SELEC;
    27ee:	a7 e2       	ldi	r26, 0x27	; 39
    27f0:	b0 e0       	ldi	r27, 0x00	; 0
    27f2:	e7 e2       	ldi	r30, 0x27	; 39
    27f4:	f0 e0       	ldi	r31, 0x00	; 0
    27f6:	80 81       	ld	r24, Z
    27f8:	80 64       	ori	r24, 0x40	; 64
    27fa:	8c 93       	st	X, r24
	/* 2. Select ADC Adjust */
	ADMUX &= ADC_Data_Register_MASK;
    27fc:	a7 e2       	ldi	r26, 0x27	; 39
    27fe:	b0 e0       	ldi	r27, 0x00	; 0
    2800:	e7 e2       	ldi	r30, 0x27	; 39
    2802:	f0 e0       	ldi	r31, 0x00	; 0
    2804:	80 81       	ld	r24, Z
    2806:	8f 7d       	andi	r24, 0xDF	; 223
    2808:	8c 93       	st	X, r24
	ADMUX |= ADC_Data_Register;
    280a:	a7 e2       	ldi	r26, 0x27	; 39
    280c:	b0 e0       	ldi	r27, 0x00	; 0
    280e:	e7 e2       	ldi	r30, 0x27	; 39
    2810:	f0 e0       	ldi	r31, 0x00	; 0
    2812:	80 81       	ld	r24, Z
    2814:	8c 93       	st	X, r24
	/* 3. Single Or Auto Trigger Conversion Mode */
	#if ADC_AUTO_TRIGGER_MODE == AUTO_TRIGGER_ENABLE
	/* Enable Auto Trigger */
	SET_BIT(ADCSRA, ADCSRA_ADATE);
    2816:	a6 e2       	ldi	r26, 0x26	; 38
    2818:	b0 e0       	ldi	r27, 0x00	; 0
    281a:	e6 e2       	ldi	r30, 0x26	; 38
    281c:	f0 e0       	ldi	r31, 0x00	; 0
    281e:	80 81       	ld	r24, Z
    2820:	80 62       	ori	r24, 0x20	; 32
    2822:	8c 93       	st	X, r24
	/* Select ADC Auto Trigger Source */
	SFIOR &= ADC_Auto_Trigger_Source_MASK;
    2824:	a0 e5       	ldi	r26, 0x50	; 80
    2826:	b0 e0       	ldi	r27, 0x00	; 0
    2828:	e0 e5       	ldi	r30, 0x50	; 80
    282a:	f0 e0       	ldi	r31, 0x00	; 0
    282c:	80 81       	ld	r24, Z
    282e:	8f 71       	andi	r24, 0x1F	; 31
    2830:	8c 93       	st	X, r24
	SFIOR |= ADC_Auto_Trigger_Source;
    2832:	a0 e5       	ldi	r26, 0x50	; 80
    2834:	b0 e0       	ldi	r27, 0x00	; 0
    2836:	e0 e5       	ldi	r30, 0x50	; 80
    2838:	f0 e0       	ldi	r31, 0x00	; 0
    283a:	80 81       	ld	r24, Z
    283c:	8c 93       	st	X, r24
	#elif ADC_AUTO_TRIGGER_MODE == AUTO_TRIGGER_DISABLE
	CLR_BIT(ADCSRA, ADCSRA_ADATE);
	#endif
	/* 4. Prescaler Selection*/
	ADCSRA &= ADC_PRESC_MASK;
    283e:	a6 e2       	ldi	r26, 0x26	; 38
    2840:	b0 e0       	ldi	r27, 0x00	; 0
    2842:	e6 e2       	ldi	r30, 0x26	; 38
    2844:	f0 e0       	ldi	r31, 0x00	; 0
    2846:	80 81       	ld	r24, Z
    2848:	88 7f       	andi	r24, 0xF8	; 248
    284a:	8c 93       	st	X, r24
	ADCSRA |= ADC_PRESC_SELEC;
    284c:	a6 e2       	ldi	r26, 0x26	; 38
    284e:	b0 e0       	ldi	r27, 0x00	; 0
    2850:	e6 e2       	ldi	r30, 0x26	; 38
    2852:	f0 e0       	ldi	r31, 0x00	; 0
    2854:	80 81       	ld	r24, Z
    2856:	87 60       	ori	r24, 0x07	; 7
    2858:	8c 93       	st	X, r24
	/* 5. Enable ADC*/
	SET_BIT(ADCSRA,ADCSRA_ADEN);
    285a:	a6 e2       	ldi	r26, 0x26	; 38
    285c:	b0 e0       	ldi	r27, 0x00	; 0
    285e:	e6 e2       	ldi	r30, 0x26	; 38
    2860:	f0 e0       	ldi	r31, 0x00	; 0
    2862:	80 81       	ld	r24, Z
    2864:	80 68       	ori	r24, 0x80	; 128
    2866:	8c 93       	st	X, r24
}
    2868:	cf 91       	pop	r28
    286a:	df 91       	pop	r29
    286c:	08 95       	ret

0000286e <MADC_StartConversionSynch>:
/*************************** End ADC Initialization ****************************/

/********************* ADC Start Conversion Synch ******************************/
error_state_t MADC_StartConversionSynch(Channel_t Copy_Channel, u16 *Copy_pu16Reading)
{
    286e:	df 93       	push	r29
    2870:	cf 93       	push	r28
    2872:	cd b7       	in	r28, 0x3d	; 61
    2874:	de b7       	in	r29, 0x3e	; 62
    2876:	28 97       	sbiw	r28, 0x08	; 8
    2878:	0f b6       	in	r0, 0x3f	; 63
    287a:	f8 94       	cli
    287c:	de bf       	out	0x3e, r29	; 62
    287e:	0f be       	out	0x3f, r0	; 63
    2880:	cd bf       	out	0x3d, r28	; 61
    2882:	8e 83       	std	Y+6, r24	; 0x06
    2884:	78 87       	std	Y+8, r23	; 0x08
    2886:	6f 83       	std	Y+7, r22	; 0x07
	error_state_t Local_ErrorState = R_OK;
    2888:	81 e0       	ldi	r24, 0x01	; 1
    288a:	8d 83       	std	Y+5, r24	; 0x05
	u32 Local_u32TimeOutCounter = 0;
    288c:	19 82       	std	Y+1, r1	; 0x01
    288e:	1a 82       	std	Y+2, r1	; 0x02
    2890:	1b 82       	std	Y+3, r1	; 0x03
    2892:	1c 82       	std	Y+4, r1	; 0x04
	
	if (ADC_u8BusyState == IDLE)
    2894:	80 91 e0 01 	lds	r24, 0x01E0
    2898:	88 23       	and	r24, r24
    289a:	09 f0       	breq	.+2      	; 0x289e <MADC_StartConversionSynch+0x30>
    289c:	54 c0       	rjmp	.+168    	; 0x2946 <MADC_StartConversionSynch+0xd8>
	{
		/* ADC Now Is Busy */
		ADC_u8BusyState = BUSY;
    289e:	81 e0       	ldi	r24, 0x01	; 1
    28a0:	80 93 e0 01 	sts	0x01E0, r24
		/* Select Channel */
		ADMUX &= ADC_SELEC_CHANNEL_MASK; 	/* Clear the MUX bits in ADMUX register*/
    28a4:	a7 e2       	ldi	r26, 0x27	; 39
    28a6:	b0 e0       	ldi	r27, 0x00	; 0
    28a8:	e7 e2       	ldi	r30, 0x27	; 39
    28aa:	f0 e0       	ldi	r31, 0x00	; 0
    28ac:	80 81       	ld	r24, Z
    28ae:	80 7e       	andi	r24, 0xE0	; 224
    28b0:	8c 93       	st	X, r24
		ADMUX |= Copy_Channel;              /*Set the required channel into the MUX bits*/
    28b2:	a7 e2       	ldi	r26, 0x27	; 39
    28b4:	b0 e0       	ldi	r27, 0x00	; 0
    28b6:	e7 e2       	ldi	r30, 0x27	; 39
    28b8:	f0 e0       	ldi	r31, 0x00	; 0
    28ba:	90 81       	ld	r25, Z
    28bc:	8e 81       	ldd	r24, Y+6	; 0x06
    28be:	89 2b       	or	r24, r25
    28c0:	8c 93       	st	X, r24
    28c2:	0b c0       	rjmp	.+22     	; 0x28da <MADC_StartConversionSynch+0x6c>

		 /* Polling (Busy Wait) until the conversion complete flag is set 
		   or counter reaching TimeOut value */
		 while ((GET_BIT(ADCSRA, ADCSRA_ADIF) == 0) && ( Local_u32TimeOutCounter != ADC_u32TIMEOUT))
		 {
			 Local_u32TimeOutCounter ++;
    28c4:	89 81       	ldd	r24, Y+1	; 0x01
    28c6:	9a 81       	ldd	r25, Y+2	; 0x02
    28c8:	ab 81       	ldd	r26, Y+3	; 0x03
    28ca:	bc 81       	ldd	r27, Y+4	; 0x04
    28cc:	01 96       	adiw	r24, 0x01	; 1
    28ce:	a1 1d       	adc	r26, r1
    28d0:	b1 1d       	adc	r27, r1
    28d2:	89 83       	std	Y+1, r24	; 0x01
    28d4:	9a 83       	std	Y+2, r25	; 0x02
    28d6:	ab 83       	std	Y+3, r26	; 0x03
    28d8:	bc 83       	std	Y+4, r27	; 0x04
		SET_BIT(ADCSRA, ADCSRA_ADSC);
		#endif

		 /* Polling (Busy Wait) until the conversion complete flag is set 
		   or counter reaching TimeOut value */
		 while ((GET_BIT(ADCSRA, ADCSRA_ADIF) == 0) && ( Local_u32TimeOutCounter != ADC_u32TIMEOUT))
    28da:	e6 e2       	ldi	r30, 0x26	; 38
    28dc:	f0 e0       	ldi	r31, 0x00	; 0
    28de:	80 81       	ld	r24, Z
    28e0:	82 95       	swap	r24
    28e2:	8f 70       	andi	r24, 0x0F	; 15
    28e4:	88 2f       	mov	r24, r24
    28e6:	90 e0       	ldi	r25, 0x00	; 0
    28e8:	81 70       	andi	r24, 0x01	; 1
    28ea:	90 70       	andi	r25, 0x00	; 0
    28ec:	00 97       	sbiw	r24, 0x00	; 0
    28ee:	61 f4       	brne	.+24     	; 0x2908 <MADC_StartConversionSynch+0x9a>
    28f0:	89 81       	ldd	r24, Y+1	; 0x01
    28f2:	9a 81       	ldd	r25, Y+2	; 0x02
    28f4:	ab 81       	ldd	r26, Y+3	; 0x03
    28f6:	bc 81       	ldd	r27, Y+4	; 0x04
    28f8:	80 35       	cpi	r24, 0x50	; 80
    28fa:	23 ec       	ldi	r18, 0xC3	; 195
    28fc:	92 07       	cpc	r25, r18
    28fe:	20 e0       	ldi	r18, 0x00	; 0
    2900:	a2 07       	cpc	r26, r18
    2902:	20 e0       	ldi	r18, 0x00	; 0
    2904:	b2 07       	cpc	r27, r18
    2906:	f1 f6       	brne	.-68     	; 0x28c4 <MADC_StartConversionSynch+0x56>
		 {
			 Local_u32TimeOutCounter ++;
		 } 
		 if (GET_BIT(ADCSRA, ADCSRA_ADIF) == 1)
    2908:	e6 e2       	ldi	r30, 0x26	; 38
    290a:	f0 e0       	ldi	r31, 0x00	; 0
    290c:	80 81       	ld	r24, Z
    290e:	82 95       	swap	r24
    2910:	8f 70       	andi	r24, 0x0F	; 15
    2912:	88 2f       	mov	r24, r24
    2914:	90 e0       	ldi	r25, 0x00	; 0
    2916:	81 70       	andi	r24, 0x01	; 1
    2918:	90 70       	andi	r25, 0x00	; 0
    291a:	88 23       	and	r24, r24
    291c:	81 f0       	breq	.+32     	; 0x293e <MADC_StartConversionSynch+0xd0>
		 {
			 /* Loop is broken because flag is raised */
			 /* Clear conversion complete Flag */
			 SET_BIT(ADCSRA, ADCSRA_ADIF);
    291e:	a6 e2       	ldi	r26, 0x26	; 38
    2920:	b0 e0       	ldi	r27, 0x00	; 0
    2922:	e6 e2       	ldi	r30, 0x26	; 38
    2924:	f0 e0       	ldi	r31, 0x00	; 0
    2926:	80 81       	ld	r24, Z
    2928:	80 61       	ori	r24, 0x10	; 16
    292a:	8c 93       	st	X, r24
			 
			 /* Return Value Of Conversion */
			 *Copy_pu16Reading = ADC;
    292c:	e4 e2       	ldi	r30, 0x24	; 36
    292e:	f0 e0       	ldi	r31, 0x00	; 0
    2930:	80 81       	ld	r24, Z
    2932:	91 81       	ldd	r25, Z+1	; 0x01
    2934:	ef 81       	ldd	r30, Y+7	; 0x07
    2936:	f8 85       	ldd	r31, Y+8	; 0x08
    2938:	91 83       	std	Z+1, r25	; 0x01
    293a:	80 83       	st	Z, r24
    293c:	01 c0       	rjmp	.+2      	; 0x2940 <MADC_StartConversionSynch+0xd2>
			 
		 } 
		 else
		 {
			 /* Loop is broken because the time out is reached */
			 Local_ErrorState = R_NOK; 
    293e:	1d 82       	std	Y+5, r1	; 0x05
		 }
		ADC_u8BusyState = IDLE;
    2940:	10 92 e0 01 	sts	0x01E0, r1
    2944:	02 c0       	rjmp	.+4      	; 0x294a <MADC_StartConversionSynch+0xdc>
	}
	else
	{
		Local_ErrorState = BUSY_FUNC;
    2946:	87 e0       	ldi	r24, 0x07	; 7
    2948:	8d 83       	std	Y+5, r24	; 0x05
	}
	
	return Local_ErrorState;
    294a:	8d 81       	ldd	r24, Y+5	; 0x05
}
    294c:	28 96       	adiw	r28, 0x08	; 8
    294e:	0f b6       	in	r0, 0x3f	; 63
    2950:	f8 94       	cli
    2952:	de bf       	out	0x3e, r29	; 62
    2954:	0f be       	out	0x3f, r0	; 63
    2956:	cd bf       	out	0x3d, r28	; 61
    2958:	cf 91       	pop	r28
    295a:	df 91       	pop	r29
    295c:	08 95       	ret

0000295e <MADC_StartConversionAsynch>:
/******************** End ADC Start Conversion Synch ***************************/

/************************* ADC Start Conversion Asynch *************************/
error_state_t MADC_StartConversionAsynch(Channel_t Copy_Channel, u16 *Copy_pu16Reading, void(*Copy_pvNotificationFunc)(void))
{
    295e:	df 93       	push	r29
    2960:	cf 93       	push	r28
    2962:	00 d0       	rcall	.+0      	; 0x2964 <MADC_StartConversionAsynch+0x6>
    2964:	00 d0       	rcall	.+0      	; 0x2966 <MADC_StartConversionAsynch+0x8>
    2966:	00 d0       	rcall	.+0      	; 0x2968 <MADC_StartConversionAsynch+0xa>
    2968:	cd b7       	in	r28, 0x3d	; 61
    296a:	de b7       	in	r29, 0x3e	; 62
    296c:	8a 83       	std	Y+2, r24	; 0x02
    296e:	7c 83       	std	Y+4, r23	; 0x04
    2970:	6b 83       	std	Y+3, r22	; 0x03
    2972:	5e 83       	std	Y+6, r21	; 0x06
    2974:	4d 83       	std	Y+5, r20	; 0x05
	error_state_t Local_ErrorState = R_OK;
    2976:	81 e0       	ldi	r24, 0x01	; 1
    2978:	89 83       	std	Y+1, r24	; 0x01
	if(ADC_u8BusyState == IDLE)
    297a:	80 91 e0 01 	lds	r24, 0x01E0
    297e:	88 23       	and	r24, r24
    2980:	51 f5       	brne	.+84     	; 0x29d6 <MADC_StartConversionAsynch+0x78>
	{
		/* make ADC BUSY in order not  work until being idle  */
		ADC_u8BusyState = BUSY;
    2982:	81 e0       	ldi	r24, 0x01	; 1
    2984:	80 93 e0 01 	sts	0x01E0, r24
		
		/* Make ISR source single channel Asynchronous */
		ADC_u8ISRSourse = SINGLE_CHANNEL_ASYNCH;
    2988:	10 92 eb 01 	sts	0x01EB, r1
		
		/* Initialize the reading variable globally */
		ADC_pu16Reading = Copy_pu16Reading;
    298c:	8b 81       	ldd	r24, Y+3	; 0x03
    298e:	9c 81       	ldd	r25, Y+4	; 0x04
    2990:	90 93 e4 01 	sts	0x01E4, r25
    2994:	80 93 e3 01 	sts	0x01E3, r24
		
		/* Initialize The Callback Notification Function Globally*/
		ADC_pvCallBackNotificationFunc = Copy_pvNotificationFunc;
    2998:	8d 81       	ldd	r24, Y+5	; 0x05
    299a:	9e 81       	ldd	r25, Y+6	; 0x06
    299c:	90 93 e2 01 	sts	0x01E2, r25
    29a0:	80 93 e1 01 	sts	0x01E1, r24
		
		/* Select Channel */
		ADMUX &= ADC_SELEC_CHANNEL_MASK; 	/* Clear the MUX bits in ADMUX register*/
    29a4:	a7 e2       	ldi	r26, 0x27	; 39
    29a6:	b0 e0       	ldi	r27, 0x00	; 0
    29a8:	e7 e2       	ldi	r30, 0x27	; 39
    29aa:	f0 e0       	ldi	r31, 0x00	; 0
    29ac:	80 81       	ld	r24, Z
    29ae:	80 7e       	andi	r24, 0xE0	; 224
    29b0:	8c 93       	st	X, r24
		ADMUX |= Copy_Channel;              /*Set the required channel into the MUX bits*/
    29b2:	a7 e2       	ldi	r26, 0x27	; 39
    29b4:	b0 e0       	ldi	r27, 0x00	; 0
    29b6:	e7 e2       	ldi	r30, 0x27	; 39
    29b8:	f0 e0       	ldi	r31, 0x00	; 0
    29ba:	90 81       	ld	r25, Z
    29bc:	8a 81       	ldd	r24, Y+2	; 0x02
    29be:	89 2b       	or	r24, r25
    29c0:	8c 93       	st	X, r24
		#if ADC_AUTO_TRIGGER_MODE == AUTO_TRIGGER_DISABLE 
		/* Start Conversion */
		SET_BIT(ADCSRA, ADCSRA_ADSC);
		#endif		
			
		SET_BIT(ADCSRA, ADCSRA_ADSC);
    29c2:	a6 e2       	ldi	r26, 0x26	; 38
    29c4:	b0 e0       	ldi	r27, 0x00	; 0
    29c6:	e6 e2       	ldi	r30, 0x26	; 38
    29c8:	f0 e0       	ldi	r31, 0x00	; 0
    29ca:	80 81       	ld	r24, Z
    29cc:	80 64       	ori	r24, 0x40	; 64
    29ce:	8c 93       	st	X, r24

		/* Enable INT */
		MADC_voidInterruptEnable();
    29d0:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <MADC_voidInterruptEnable>
    29d4:	02 c0       	rjmp	.+4      	; 0x29da <MADC_StartConversionAsynch+0x7c>

	}
	else
	{
		Local_ErrorState = BUSY_FUNC;
    29d6:	87 e0       	ldi	r24, 0x07	; 7
    29d8:	89 83       	std	Y+1, r24	; 0x01
	}
	
	
	
	return Local_ErrorState;
    29da:	89 81       	ldd	r24, Y+1	; 0x01
}
    29dc:	26 96       	adiw	r28, 0x06	; 6
    29de:	0f b6       	in	r0, 0x3f	; 63
    29e0:	f8 94       	cli
    29e2:	de bf       	out	0x3e, r29	; 62
    29e4:	0f be       	out	0x3f, r0	; 63
    29e6:	cd bf       	out	0x3d, r28	; 61
    29e8:	cf 91       	pop	r28
    29ea:	df 91       	pop	r29
    29ec:	08 95       	ret

000029ee <MADC_StartChainConversionAsynch>:
/*********************** End ADC Start Conversion Asynch ***********************/

/********************** ADC Start Chain Conversion Asynch***********************/
error_state_t MADC_StartChainConversionAsynch(Chain_t *Copy_Chain)
{
    29ee:	df 93       	push	r29
    29f0:	cf 93       	push	r28
    29f2:	00 d0       	rcall	.+0      	; 0x29f4 <MADC_StartChainConversionAsynch+0x6>
    29f4:	0f 92       	push	r0
    29f6:	cd b7       	in	r28, 0x3d	; 61
    29f8:	de b7       	in	r29, 0x3e	; 62
    29fa:	9b 83       	std	Y+3, r25	; 0x03
    29fc:	8a 83       	std	Y+2, r24	; 0x02
	error_state_t Local_ErrorState = R_OK;
    29fe:	81 e0       	ldi	r24, 0x01	; 1
    2a00:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_Chain == NULL)
    2a02:	8a 81       	ldd	r24, Y+2	; 0x02
    2a04:	9b 81       	ldd	r25, Y+3	; 0x03
    2a06:	00 97       	sbiw	r24, 0x00	; 0
    2a08:	19 f4       	brne	.+6      	; 0x2a10 <MADC_StartChainConversionAsynch+0x22>
	{
		Local_ErrorState = NULL_POINTER;
    2a0a:	86 e0       	ldi	r24, 0x06	; 6
    2a0c:	89 83       	std	Y+1, r24	; 0x01
    2a0e:	49 c0       	rjmp	.+146    	; 0x2aa2 <MADC_StartChainConversionAsynch+0xb4>
	} 
	else
	{
		if(ADC_u8BusyState == IDLE)
    2a10:	80 91 e0 01 	lds	r24, 0x01E0
    2a14:	88 23       	and	r24, r24
    2a16:	09 f0       	breq	.+2      	; 0x2a1a <MADC_StartChainConversionAsynch+0x2c>
    2a18:	42 c0       	rjmp	.+132    	; 0x2a9e <MADC_StartChainConversionAsynch+0xb0>
		{
			/* make ADC BUSY in order not  work until being idle  */
			ADC_u8BusyState = BUSY;
    2a1a:	81 e0       	ldi	r24, 0x01	; 1
    2a1c:	80 93 e0 01 	sts	0x01E0, r24
			
			/* Make ISR source Chain channel Asynchronous */
			ADC_u8ISRSourse = CHAIN_ASYNCH;
    2a20:	81 e0       	ldi	r24, 0x01	; 1
    2a22:	80 93 eb 01 	sts	0x01EB, r24
			
			/* initialize Chain Channel array globally  */
			ADC_pu8ChainChannelArr = Copy_Chain->ADC_Channels;
    2a26:	ea 81       	ldd	r30, Y+2	; 0x02
    2a28:	fb 81       	ldd	r31, Y+3	; 0x03
    2a2a:	82 81       	ldd	r24, Z+2	; 0x02
    2a2c:	93 81       	ldd	r25, Z+3	; 0x03
    2a2e:	90 93 e8 01 	sts	0x01E8, r25
    2a32:	80 93 e7 01 	sts	0x01E7, r24
			
			/* Initialize the reading variable globally */
			ADC_pu16ChainResultArr = Copy_Chain->Reading;
    2a36:	ea 81       	ldd	r30, Y+2	; 0x02
    2a38:	fb 81       	ldd	r31, Y+3	; 0x03
    2a3a:	80 81       	ld	r24, Z
    2a3c:	91 81       	ldd	r25, Z+1	; 0x01
    2a3e:	90 93 e6 01 	sts	0x01E6, r25
    2a42:	80 93 e5 01 	sts	0x01E5, r24
			
			/* initialize Chain Size globally */
			ADC_u8ChainSize = Copy_Chain->Size;
    2a46:	ea 81       	ldd	r30, Y+2	; 0x02
    2a48:	fb 81       	ldd	r31, Y+3	; 0x03
    2a4a:	84 81       	ldd	r24, Z+4	; 0x04
    2a4c:	80 93 e9 01 	sts	0x01E9, r24

			/* Initialize The Callback Notification Function Globally*/
			ADC_pvCallBackNotificationFunc = Copy_Chain->ADC_pvNotificationFunc;
    2a50:	ea 81       	ldd	r30, Y+2	; 0x02
    2a52:	fb 81       	ldd	r31, Y+3	; 0x03
    2a54:	85 81       	ldd	r24, Z+5	; 0x05
    2a56:	96 81       	ldd	r25, Z+6	; 0x06
    2a58:	90 93 e2 01 	sts	0x01E2, r25
    2a5c:	80 93 e1 01 	sts	0x01E1, r24
			
			/* Initialize current conversion Index*/
			ADC_u8ChainConversionIndex = 0;
    2a60:	10 92 ea 01 	sts	0x01EA, r1
			
			/* Select Channel */
			ADMUX &= ADC_SELEC_CHANNEL_MASK; 	   /* Clear the MUX bits in ADMUX register*/
    2a64:	a7 e2       	ldi	r26, 0x27	; 39
    2a66:	b0 e0       	ldi	r27, 0x00	; 0
    2a68:	e7 e2       	ldi	r30, 0x27	; 39
    2a6a:	f0 e0       	ldi	r31, 0x00	; 0
    2a6c:	80 81       	ld	r24, Z
    2a6e:	80 7e       	andi	r24, 0xE0	; 224
    2a70:	8c 93       	st	X, r24
			ADMUX |= Copy_Chain->ADC_Channels[ADC_u8ChainConversionIndex];  /*Set the required channel into the MUX bits*/
    2a72:	a7 e2       	ldi	r26, 0x27	; 39
    2a74:	b0 e0       	ldi	r27, 0x00	; 0
    2a76:	e7 e2       	ldi	r30, 0x27	; 39
    2a78:	f0 e0       	ldi	r31, 0x00	; 0
    2a7a:	40 81       	ld	r20, Z
    2a7c:	ea 81       	ldd	r30, Y+2	; 0x02
    2a7e:	fb 81       	ldd	r31, Y+3	; 0x03
    2a80:	22 81       	ldd	r18, Z+2	; 0x02
    2a82:	33 81       	ldd	r19, Z+3	; 0x03
    2a84:	80 91 ea 01 	lds	r24, 0x01EA
    2a88:	88 2f       	mov	r24, r24
    2a8a:	90 e0       	ldi	r25, 0x00	; 0
    2a8c:	f9 01       	movw	r30, r18
    2a8e:	e8 0f       	add	r30, r24
    2a90:	f9 1f       	adc	r31, r25
    2a92:	80 81       	ld	r24, Z
    2a94:	84 2b       	or	r24, r20
    2a96:	8c 93       	st	X, r24
			/* Start Conversion */
			SET_BIT(ADCSRA, ADCSRA_ADSC);
			#endif

			/* Enable INT */
			MADC_voidInterruptEnable();
    2a98:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <MADC_voidInterruptEnable>
    2a9c:	02 c0       	rjmp	.+4      	; 0x2aa2 <MADC_StartChainConversionAsynch+0xb4>
		}
		else
		{
			Local_ErrorState = BUSY_FUNC;
    2a9e:	87 e0       	ldi	r24, 0x07	; 7
    2aa0:	89 83       	std	Y+1, r24	; 0x01
		}
	}

	return Local_ErrorState;
    2aa2:	89 81       	ldd	r24, Y+1	; 0x01
}
    2aa4:	0f 90       	pop	r0
    2aa6:	0f 90       	pop	r0
    2aa8:	0f 90       	pop	r0
    2aaa:	cf 91       	pop	r28
    2aac:	df 91       	pop	r29
    2aae:	08 95       	ret

00002ab0 <MADC_voidInterruptEnable>:
/******************* End ADC Start Chain Conversion Asynch *********************/

/***************************** ADC Interrupt Enable ****************************/
void MADC_voidInterruptEnable(void)
{
    2ab0:	df 93       	push	r29
    2ab2:	cf 93       	push	r28
    2ab4:	cd b7       	in	r28, 0x3d	; 61
    2ab6:	de b7       	in	r29, 0x3e	; 62
	/* Enable INT for ADC  */
	SET_BIT(ADCSRA,ADCSRA_ADIE);
    2ab8:	a6 e2       	ldi	r26, 0x26	; 38
    2aba:	b0 e0       	ldi	r27, 0x00	; 0
    2abc:	e6 e2       	ldi	r30, 0x26	; 38
    2abe:	f0 e0       	ldi	r31, 0x00	; 0
    2ac0:	80 81       	ld	r24, Z
    2ac2:	88 60       	ori	r24, 0x08	; 8
    2ac4:	8c 93       	st	X, r24
}
    2ac6:	cf 91       	pop	r28
    2ac8:	df 91       	pop	r29
    2aca:	08 95       	ret

00002acc <MADC_voidInterruptDisable>:
/************************* End ADC Interrupt Enable ****************************/

/***************************** ADC Interrupt Disable ***************************/
void MADC_voidInterruptDisable(void)
{
    2acc:	df 93       	push	r29
    2ace:	cf 93       	push	r28
    2ad0:	cd b7       	in	r28, 0x3d	; 61
    2ad2:	de b7       	in	r29, 0x3e	; 62
	/* Disable INT for ADC  */
	CLR_BIT(ADCSRA,ADCSRA_ADIE);
    2ad4:	a6 e2       	ldi	r26, 0x26	; 38
    2ad6:	b0 e0       	ldi	r27, 0x00	; 0
    2ad8:	e6 e2       	ldi	r30, 0x26	; 38
    2ada:	f0 e0       	ldi	r31, 0x00	; 0
    2adc:	80 81       	ld	r24, Z
    2ade:	87 7f       	andi	r24, 0xF7	; 247
    2ae0:	8c 93       	st	X, r24
}
    2ae2:	cf 91       	pop	r28
    2ae4:	df 91       	pop	r29
    2ae6:	08 95       	ret

00002ae8 <__vector_16>:



/************** ISR ***************/
ISR_(ADC_VECTOR)
{
    2ae8:	1f 92       	push	r1
    2aea:	0f 92       	push	r0
    2aec:	0f b6       	in	r0, 0x3f	; 63
    2aee:	0f 92       	push	r0
    2af0:	11 24       	eor	r1, r1
    2af2:	2f 93       	push	r18
    2af4:	3f 93       	push	r19
    2af6:	4f 93       	push	r20
    2af8:	5f 93       	push	r21
    2afa:	6f 93       	push	r22
    2afc:	7f 93       	push	r23
    2afe:	8f 93       	push	r24
    2b00:	9f 93       	push	r25
    2b02:	af 93       	push	r26
    2b04:	bf 93       	push	r27
    2b06:	ef 93       	push	r30
    2b08:	ff 93       	push	r31
    2b0a:	df 93       	push	r29
    2b0c:	cf 93       	push	r28
    2b0e:	cd b7       	in	r28, 0x3d	; 61
    2b10:	de b7       	in	r29, 0x3e	; 62
	if (ADC_u8ISRSourse == SINGLE_CHANNEL_ASYNCH)
    2b12:	80 91 eb 01 	lds	r24, 0x01EB
    2b16:	88 23       	and	r24, r24
    2b18:	91 f4       	brne	.+36     	; 0x2b3e <__vector_16+0x56>
	{		
		/* Read ADC Result */
		*ADC_pu16Reading = ADC;
    2b1a:	a0 91 e3 01 	lds	r26, 0x01E3
    2b1e:	b0 91 e4 01 	lds	r27, 0x01E4
    2b22:	e4 e2       	ldi	r30, 0x24	; 36
    2b24:	f0 e0       	ldi	r31, 0x00	; 0
    2b26:	80 81       	ld	r24, Z
    2b28:	91 81       	ldd	r25, Z+1	; 0x01
    2b2a:	8d 93       	st	X+, r24
    2b2c:	9c 93       	st	X, r25
		/* Make ADC state be IDLE because it finished*/
		ADC_u8BusyState = IDLE;
    2b2e:	10 92 e0 01 	sts	0x01E0, r1
		/* Invoke the callback notification function */
		ADC_pvCallBackNotificationFunc();
    2b32:	e0 91 e1 01 	lds	r30, 0x01E1
    2b36:	f0 91 e2 01 	lds	r31, 0x01E2
    2b3a:	09 95       	icall
    2b3c:	4f c0       	rjmp	.+158    	; 0x2bdc <__vector_16+0xf4>
		/* Disable ADC Conversion complete interrupt */
		//MADC_voidInterruptDisable();
		
	} 
	else if (ADC_u8ISRSourse == CHAIN_ASYNCH)
    2b3e:	80 91 eb 01 	lds	r24, 0x01EB
    2b42:	81 30       	cpi	r24, 0x01	; 1
    2b44:	09 f0       	breq	.+2      	; 0x2b48 <__vector_16+0x60>
    2b46:	4a c0       	rjmp	.+148    	; 0x2bdc <__vector_16+0xf4>
	{
		/* Read ADC Result */
		 ADC_pu16Reading[ADC_u8ChainConversionIndex] = ADC;
    2b48:	20 91 e3 01 	lds	r18, 0x01E3
    2b4c:	30 91 e4 01 	lds	r19, 0x01E4
    2b50:	80 91 ea 01 	lds	r24, 0x01EA
    2b54:	88 2f       	mov	r24, r24
    2b56:	90 e0       	ldi	r25, 0x00	; 0
    2b58:	88 0f       	add	r24, r24
    2b5a:	99 1f       	adc	r25, r25
    2b5c:	d9 01       	movw	r26, r18
    2b5e:	a8 0f       	add	r26, r24
    2b60:	b9 1f       	adc	r27, r25
    2b62:	e4 e2       	ldi	r30, 0x24	; 36
    2b64:	f0 e0       	ldi	r31, 0x00	; 0
    2b66:	80 81       	ld	r24, Z
    2b68:	91 81       	ldd	r25, Z+1	; 0x01
    2b6a:	11 96       	adiw	r26, 0x01	; 1
    2b6c:	9c 93       	st	X, r25
    2b6e:	8e 93       	st	-X, r24
		 /* Increment ADC Chain Conversion Index */
		 ADC_u8ChainConversionIndex ++;
    2b70:	80 91 ea 01 	lds	r24, 0x01EA
    2b74:	8f 5f       	subi	r24, 0xFF	; 255
    2b76:	80 93 ea 01 	sts	0x01EA, r24
		
		/* check chain is finished or not */
		if (ADC_u8ChainConversionIndex == ADC_u8ChainSize)
    2b7a:	90 91 ea 01 	lds	r25, 0x01EA
    2b7e:	80 91 e9 01 	lds	r24, 0x01E9
    2b82:	98 17       	cp	r25, r24
    2b84:	51 f4       	brne	.+20     	; 0x2b9a <__vector_16+0xb2>
		{
			/* Make ADC state be IDLE because it finished*/
			ADC_u8BusyState = IDLE;
    2b86:	10 92 e0 01 	sts	0x01E0, r1
			
			/* Invoke the callback notification function */
			ADC_pvCallBackNotificationFunc();
    2b8a:	e0 91 e1 01 	lds	r30, 0x01E1
    2b8e:	f0 91 e2 01 	lds	r31, 0x01E2
    2b92:	09 95       	icall
			
			/* Disable ADC Conversion complete interrupt */
			MADC_voidInterruptDisable();
    2b94:	0e 94 66 15 	call	0x2acc	; 0x2acc <MADC_voidInterruptDisable>
    2b98:	21 c0       	rjmp	.+66     	; 0x2bdc <__vector_16+0xf4>
		} 
		else
		{
			/* Select Channel*/
			ADMUX &= ADC_SELEC_CHANNEL_MASK; 	                          /* Clear the MUX bits in ADMUX register*/
    2b9a:	a7 e2       	ldi	r26, 0x27	; 39
    2b9c:	b0 e0       	ldi	r27, 0x00	; 0
    2b9e:	e7 e2       	ldi	r30, 0x27	; 39
    2ba0:	f0 e0       	ldi	r31, 0x00	; 0
    2ba2:	80 81       	ld	r24, Z
    2ba4:	80 7e       	andi	r24, 0xE0	; 224
    2ba6:	8c 93       	st	X, r24
			ADMUX |= ADC_pu8ChainChannelArr[ADC_u8ChainConversionIndex];  /*Set the required channel into the MUX bits*/
    2ba8:	a7 e2       	ldi	r26, 0x27	; 39
    2baa:	b0 e0       	ldi	r27, 0x00	; 0
    2bac:	e7 e2       	ldi	r30, 0x27	; 39
    2bae:	f0 e0       	ldi	r31, 0x00	; 0
    2bb0:	40 81       	ld	r20, Z
    2bb2:	20 91 e7 01 	lds	r18, 0x01E7
    2bb6:	30 91 e8 01 	lds	r19, 0x01E8
    2bba:	80 91 ea 01 	lds	r24, 0x01EA
    2bbe:	88 2f       	mov	r24, r24
    2bc0:	90 e0       	ldi	r25, 0x00	; 0
    2bc2:	f9 01       	movw	r30, r18
    2bc4:	e8 0f       	add	r30, r24
    2bc6:	f9 1f       	adc	r31, r25
    2bc8:	80 81       	ld	r24, Z
    2bca:	84 2b       	or	r24, r20
    2bcc:	8c 93       	st	X, r24
			
			/* Start Conversion */
			SET_BIT(ADCSRA, ADCSRA_ADSC);
    2bce:	a6 e2       	ldi	r26, 0x26	; 38
    2bd0:	b0 e0       	ldi	r27, 0x00	; 0
    2bd2:	e6 e2       	ldi	r30, 0x26	; 38
    2bd4:	f0 e0       	ldi	r31, 0x00	; 0
    2bd6:	80 81       	ld	r24, Z
    2bd8:	80 64       	ori	r24, 0x40	; 64
    2bda:	8c 93       	st	X, r24
		}
		
		
	}
	
}
    2bdc:	cf 91       	pop	r28
    2bde:	df 91       	pop	r29
    2be0:	ff 91       	pop	r31
    2be2:	ef 91       	pop	r30
    2be4:	bf 91       	pop	r27
    2be6:	af 91       	pop	r26
    2be8:	9f 91       	pop	r25
    2bea:	8f 91       	pop	r24
    2bec:	7f 91       	pop	r23
    2bee:	6f 91       	pop	r22
    2bf0:	5f 91       	pop	r21
    2bf2:	4f 91       	pop	r20
    2bf4:	3f 91       	pop	r19
    2bf6:	2f 91       	pop	r18
    2bf8:	0f 90       	pop	r0
    2bfa:	0f be       	out	0x3f, r0	; 63
    2bfc:	0f 90       	pop	r0
    2bfe:	1f 90       	pop	r1
    2c00:	18 95       	reti

00002c02 <HULTRASONIC_voidInit>:
static u16 u16_global_RissingValue = 0;
static u16 u16_global_FallingValue = 0;

/* Initialize the Ultrasonic sensor */
void HULTRASONIC_voidInit(void)
{
    2c02:	df 93       	push	r29
    2c04:	cf 93       	push	r28
    2c06:	cd b7       	in	r28, 0x3d	; 61
    2c08:	de b7       	in	r29, 0x3e	; 62
    // Set the trigger pin as an output and the echo pin as an input
    MDIO_SetPinDirection(TRIGGER_PORT, TRIGGER_PIN, DIO_u8PIN_OUTPUT);
    2c0a:	83 e0       	ldi	r24, 0x03	; 3
    2c0c:	67 e0       	ldi	r22, 0x07	; 7
    2c0e:	41 e0       	ldi	r20, 0x01	; 1
    2c10:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <MDIO_SetPinDirection>
    MDIO_SetPinDirection(ECHO_PORT, ECHO_PIN, DIO_u8PIN_INPUT);
    2c14:	83 e0       	ldi	r24, 0x03	; 3
    2c16:	66 e0       	ldi	r22, 0x06	; 6
    2c18:	40 e0       	ldi	r20, 0x00	; 0
    2c1a:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <MDIO_SetPinDirection>

    // Clear the Input Capture Flag
    ICU_u8ClearInputCaptureFlag();
    2c1e:	0e 94 37 0a 	call	0x146e	; 0x146e <ICU_u8ClearInputCaptureFlag>
}
    2c22:	cf 91       	pop	r28
    2c24:	df 91       	pop	r29
    2c26:	08 95       	ret

00002c28 <HULTRASONIC_voidTrigger>:

/* Trigger the Ultrasonic sensor to send a pulse */
void HULTRASONIC_voidTrigger(void)
{
    2c28:	df 93       	push	r29
    2c2a:	cf 93       	push	r28
    2c2c:	cd b7       	in	r28, 0x3d	; 61
    2c2e:	de b7       	in	r29, 0x3e	; 62
    2c30:	2e 97       	sbiw	r28, 0x0e	; 14
    2c32:	0f b6       	in	r0, 0x3f	; 63
    2c34:	f8 94       	cli
    2c36:	de bf       	out	0x3e, r29	; 62
    2c38:	0f be       	out	0x3f, r0	; 63
    2c3a:	cd bf       	out	0x3d, r28	; 61
    // Generate a pulse on the trigger pin
    MDIO_SetPinValue(TRIGGER_PORT, TRIGGER_PIN, DIO_u8PIN_HIGH);
    2c3c:	83 e0       	ldi	r24, 0x03	; 3
    2c3e:	67 e0       	ldi	r22, 0x07	; 7
    2c40:	41 e0       	ldi	r20, 0x01	; 1
    2c42:	0e 94 a8 10 	call	0x2150	; 0x2150 <MDIO_SetPinValue>
    2c46:	80 e0       	ldi	r24, 0x00	; 0
    2c48:	90 e0       	ldi	r25, 0x00	; 0
    2c4a:	a8 e4       	ldi	r26, 0x48	; 72
    2c4c:	b2 e4       	ldi	r27, 0x42	; 66
    2c4e:	8b 87       	std	Y+11, r24	; 0x0b
    2c50:	9c 87       	std	Y+12, r25	; 0x0c
    2c52:	ad 87       	std	Y+13, r26	; 0x0d
    2c54:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c56:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c58:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c5a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c5c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c5e:	20 e0       	ldi	r18, 0x00	; 0
    2c60:	30 e0       	ldi	r19, 0x00	; 0
    2c62:	4a e7       	ldi	r20, 0x7A	; 122
    2c64:	55 e4       	ldi	r21, 0x45	; 69
    2c66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c6a:	dc 01       	movw	r26, r24
    2c6c:	cb 01       	movw	r24, r22
    2c6e:	8f 83       	std	Y+7, r24	; 0x07
    2c70:	98 87       	std	Y+8, r25	; 0x08
    2c72:	a9 87       	std	Y+9, r26	; 0x09
    2c74:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c76:	6f 81       	ldd	r22, Y+7	; 0x07
    2c78:	78 85       	ldd	r23, Y+8	; 0x08
    2c7a:	89 85       	ldd	r24, Y+9	; 0x09
    2c7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c7e:	20 e0       	ldi	r18, 0x00	; 0
    2c80:	30 e0       	ldi	r19, 0x00	; 0
    2c82:	40 e8       	ldi	r20, 0x80	; 128
    2c84:	5f e3       	ldi	r21, 0x3F	; 63
    2c86:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2c8a:	88 23       	and	r24, r24
    2c8c:	2c f4       	brge	.+10     	; 0x2c98 <HULTRASONIC_voidTrigger+0x70>
		__ticks = 1;
    2c8e:	81 e0       	ldi	r24, 0x01	; 1
    2c90:	90 e0       	ldi	r25, 0x00	; 0
    2c92:	9e 83       	std	Y+6, r25	; 0x06
    2c94:	8d 83       	std	Y+5, r24	; 0x05
    2c96:	3f c0       	rjmp	.+126    	; 0x2d16 <HULTRASONIC_voidTrigger+0xee>
	else if (__tmp > 65535)
    2c98:	6f 81       	ldd	r22, Y+7	; 0x07
    2c9a:	78 85       	ldd	r23, Y+8	; 0x08
    2c9c:	89 85       	ldd	r24, Y+9	; 0x09
    2c9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ca0:	20 e0       	ldi	r18, 0x00	; 0
    2ca2:	3f ef       	ldi	r19, 0xFF	; 255
    2ca4:	4f e7       	ldi	r20, 0x7F	; 127
    2ca6:	57 e4       	ldi	r21, 0x47	; 71
    2ca8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2cac:	18 16       	cp	r1, r24
    2cae:	4c f5       	brge	.+82     	; 0x2d02 <HULTRASONIC_voidTrigger+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cb0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cb2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cb4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cb6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cb8:	20 e0       	ldi	r18, 0x00	; 0
    2cba:	30 e0       	ldi	r19, 0x00	; 0
    2cbc:	40 e2       	ldi	r20, 0x20	; 32
    2cbe:	51 e4       	ldi	r21, 0x41	; 65
    2cc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cc4:	dc 01       	movw	r26, r24
    2cc6:	cb 01       	movw	r24, r22
    2cc8:	bc 01       	movw	r22, r24
    2cca:	cd 01       	movw	r24, r26
    2ccc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cd0:	dc 01       	movw	r26, r24
    2cd2:	cb 01       	movw	r24, r22
    2cd4:	9e 83       	std	Y+6, r25	; 0x06
    2cd6:	8d 83       	std	Y+5, r24	; 0x05
    2cd8:	0f c0       	rjmp	.+30     	; 0x2cf8 <HULTRASONIC_voidTrigger+0xd0>
    2cda:	80 e9       	ldi	r24, 0x90	; 144
    2cdc:	91 e0       	ldi	r25, 0x01	; 1
    2cde:	9c 83       	std	Y+4, r25	; 0x04
    2ce0:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2ce2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ce4:	9c 81       	ldd	r25, Y+4	; 0x04
    2ce6:	01 97       	sbiw	r24, 0x01	; 1
    2ce8:	f1 f7       	brne	.-4      	; 0x2ce6 <HULTRASONIC_voidTrigger+0xbe>
    2cea:	9c 83       	std	Y+4, r25	; 0x04
    2cec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cee:	8d 81       	ldd	r24, Y+5	; 0x05
    2cf0:	9e 81       	ldd	r25, Y+6	; 0x06
    2cf2:	01 97       	sbiw	r24, 0x01	; 1
    2cf4:	9e 83       	std	Y+6, r25	; 0x06
    2cf6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cf8:	8d 81       	ldd	r24, Y+5	; 0x05
    2cfa:	9e 81       	ldd	r25, Y+6	; 0x06
    2cfc:	00 97       	sbiw	r24, 0x00	; 0
    2cfe:	69 f7       	brne	.-38     	; 0x2cda <HULTRASONIC_voidTrigger+0xb2>
    2d00:	14 c0       	rjmp	.+40     	; 0x2d2a <HULTRASONIC_voidTrigger+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d02:	6f 81       	ldd	r22, Y+7	; 0x07
    2d04:	78 85       	ldd	r23, Y+8	; 0x08
    2d06:	89 85       	ldd	r24, Y+9	; 0x09
    2d08:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d0e:	dc 01       	movw	r26, r24
    2d10:	cb 01       	movw	r24, r22
    2d12:	9e 83       	std	Y+6, r25	; 0x06
    2d14:	8d 83       	std	Y+5, r24	; 0x05
    2d16:	8d 81       	ldd	r24, Y+5	; 0x05
    2d18:	9e 81       	ldd	r25, Y+6	; 0x06
    2d1a:	9a 83       	std	Y+2, r25	; 0x02
    2d1c:	89 83       	std	Y+1, r24	; 0x01
    2d1e:	89 81       	ldd	r24, Y+1	; 0x01
    2d20:	9a 81       	ldd	r25, Y+2	; 0x02
    2d22:	01 97       	sbiw	r24, 0x01	; 1
    2d24:	f1 f7       	brne	.-4      	; 0x2d22 <HULTRASONIC_voidTrigger+0xfa>
    2d26:	9a 83       	std	Y+2, r25	; 0x02
    2d28:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(50); // Delay for 50ms
    MDIO_SetPinValue(TRIGGER_PORT, TRIGGER_PIN, DIO_u8PIN_LOW);
    2d2a:	83 e0       	ldi	r24, 0x03	; 3
    2d2c:	67 e0       	ldi	r22, 0x07	; 7
    2d2e:	40 e0       	ldi	r20, 0x00	; 0
    2d30:	0e 94 a8 10 	call	0x2150	; 0x2150 <MDIO_SetPinValue>
}
    2d34:	2e 96       	adiw	r28, 0x0e	; 14
    2d36:	0f b6       	in	r0, 0x3f	; 63
    2d38:	f8 94       	cli
    2d3a:	de bf       	out	0x3e, r29	; 62
    2d3c:	0f be       	out	0x3f, r0	; 63
    2d3e:	cd bf       	out	0x3d, r28	; 61
    2d40:	cf 91       	pop	r28
    2d42:	df 91       	pop	r29
    2d44:	08 95       	ret

00002d46 <HULTRASONIC_voidRisingEdge>:

/* Handle the rising edge of the echo signal */
void HULTRASONIC_voidRisingEdge(void)
{
    2d46:	df 93       	push	r29
    2d48:	cf 93       	push	r28
    2d4a:	cd b7       	in	r28, 0x3d	; 61
    2d4c:	de b7       	in	r29, 0x3e	; 62
    // Configure for rising edge, no prescaler, and noise canceler
    ICU_u8SetTriggerEdge(ICU_RISING_EDGE);
    2d4e:	81 e0       	ldi	r24, 0x01	; 1
    2d50:	0e 94 d6 09 	call	0x13ac	; 0x13ac <ICU_u8SetTriggerEdge>
    ICU_voidNoiseCanceler();
    2d54:	0e 94 45 0a 	call	0x148a	; 0x148a <ICU_voidNoiseCanceler>
    MTIMER1_voidNoPrescaler();
    2d58:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <MTIMER1_voidNoPrescaler>

    // Wait until the Input Capture Flag is set
    while (ICU_u8GetInputCaptureFlag() == 0);
    2d5c:	0e 94 29 0a 	call	0x1452	; 0x1452 <ICU_u8GetInputCaptureFlag>
    2d60:	88 23       	and	r24, r24
    2d62:	e1 f3       	breq	.-8      	; 0x2d5c <HULTRASONIC_voidRisingEdge+0x16>
    u16_global_RissingValue = ICU_u16ReadInputCapture(); // Read the capture register
    2d64:	0e 94 17 0a 	call	0x142e	; 0x142e <ICU_u16ReadInputCapture>
    2d68:	90 93 ed 01 	sts	0x01ED, r25
    2d6c:	80 93 ec 01 	sts	0x01EC, r24
    ICU_u8ClearInputCaptureFlag();                       // Clear the Input Capture Flag
    2d70:	0e 94 37 0a 	call	0x146e	; 0x146e <ICU_u8ClearInputCaptureFlag>
}
    2d74:	cf 91       	pop	r28
    2d76:	df 91       	pop	r29
    2d78:	08 95       	ret

00002d7a <HULTRASONIC_voidFallingEdge>:

/* Handle the falling edge of the echo signal */
void HULTRASONIC_voidFallingEdge(void)
{
    2d7a:	df 93       	push	r29
    2d7c:	cf 93       	push	r28
    2d7e:	cd b7       	in	r28, 0x3d	; 61
    2d80:	de b7       	in	r29, 0x3e	; 62
    // Configure for falling edge, no prescaler, and noise canceler
    ICU_u8SetTriggerEdge(ICU_FALLING_EDGE);
    2d82:	80 e0       	ldi	r24, 0x00	; 0
    2d84:	0e 94 d6 09 	call	0x13ac	; 0x13ac <ICU_u8SetTriggerEdge>
    ICU_voidNoiseCanceler();
    2d88:	0e 94 45 0a 	call	0x148a	; 0x148a <ICU_voidNoiseCanceler>
    MTIMER1_voidNoPrescaler();
    2d8c:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <MTIMER1_voidNoPrescaler>

    // Wait until the Input Capture Flag is set
    while (ICU_u8GetInputCaptureFlag() == 0);
    2d90:	0e 94 29 0a 	call	0x1452	; 0x1452 <ICU_u8GetInputCaptureFlag>
    2d94:	88 23       	and	r24, r24
    2d96:	e1 f3       	breq	.-8      	; 0x2d90 <HULTRASONIC_voidFallingEdge+0x16>
    u16_global_FallingValue = ICU_u16ReadInputCapture(); // Read the capture register
    2d98:	0e 94 17 0a 	call	0x142e	; 0x142e <ICU_u16ReadInputCapture>
    2d9c:	90 93 ef 01 	sts	0x01EF, r25
    2da0:	80 93 ee 01 	sts	0x01EE, r24
    ICU_u8ClearInputCaptureFlag();                       // Clear the Input Capture Flag
    2da4:	0e 94 37 0a 	call	0x146e	; 0x146e <ICU_u8ClearInputCaptureFlag>

    // Stop the timer
    MTIMER1_voidSetTimerValue(0);
    2da8:	80 e0       	ldi	r24, 0x00	; 0
    2daa:	90 e0       	ldi	r25, 0x00	; 0
    2dac:	0e 94 77 09 	call	0x12ee	; 0x12ee <MTIMER1_voidSetTimerValue>
    MTIMER1_enumStop();
    2db0:	0e 94 a7 08 	call	0x114e	; 0x114e <MTIMER1_enumStop>
}
    2db4:	cf 91       	pop	r28
    2db6:	df 91       	pop	r29
    2db8:	08 95       	ret

00002dba <HULTRASONIC_u32Distance>:

/* Calculate and return the distance measured by the Ultrasonic sensor in centimeters */
u32 HULTRASONIC_u32Distance(void)
{
    2dba:	df 93       	push	r29
    2dbc:	cf 93       	push	r28
    2dbe:	cd b7       	in	r28, 0x3d	; 61
    2dc0:	de b7       	in	r29, 0x3e	; 62
    2dc2:	28 97       	sbiw	r28, 0x08	; 8
    2dc4:	0f b6       	in	r0, 0x3f	; 63
    2dc6:	f8 94       	cli
    2dc8:	de bf       	out	0x3e, r29	; 62
    2dca:	0f be       	out	0x3f, r0	; 63
    2dcc:	cd bf       	out	0x3d, r28	; 61
    HULTRASONIC_voidRisingEdge();
    2dce:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <HULTRASONIC_voidRisingEdge>
    HULTRASONIC_voidFallingEdge();
    2dd2:	0e 94 bd 16 	call	0x2d7a	; 0x2d7a <HULTRASONIC_voidFallingEdge>

    // Calculate the time the echo signal was on
    u32 u32_local_TimeOn = u16_global_FallingValue - u16_global_RissingValue;
    2dd6:	20 91 ee 01 	lds	r18, 0x01EE
    2dda:	30 91 ef 01 	lds	r19, 0x01EF
    2dde:	80 91 ec 01 	lds	r24, 0x01EC
    2de2:	90 91 ed 01 	lds	r25, 0x01ED
    2de6:	a9 01       	movw	r20, r18
    2de8:	48 1b       	sub	r20, r24
    2dea:	59 0b       	sbc	r21, r25
    2dec:	ca 01       	movw	r24, r20
    2dee:	cc 01       	movw	r24, r24
    2df0:	a0 e0       	ldi	r26, 0x00	; 0
    2df2:	b0 e0       	ldi	r27, 0x00	; 0
    2df4:	8d 83       	std	Y+5, r24	; 0x05
    2df6:	9e 83       	std	Y+6, r25	; 0x06
    2df8:	af 83       	std	Y+7, r26	; 0x07
    2dfa:	b8 87       	std	Y+8, r27	; 0x08
    u32 u32_local_Distance = 0;
    2dfc:	19 82       	std	Y+1, r1	; 0x01
    2dfe:	1a 82       	std	Y+2, r1	; 0x02
    2e00:	1b 82       	std	Y+3, r1	; 0x03
    2e02:	1c 82       	std	Y+4, r1	; 0x04

    // Calculate the distance based on the time and the speed of sound
    u32_local_Distance = ((u32_local_TimeOn * 34600) / (F_CPU * 2)); // Speed of sound is approximately 346 m/s
    2e04:	8d 81       	ldd	r24, Y+5	; 0x05
    2e06:	9e 81       	ldd	r25, Y+6	; 0x06
    2e08:	af 81       	ldd	r26, Y+7	; 0x07
    2e0a:	b8 85       	ldd	r27, Y+8	; 0x08
    2e0c:	28 e2       	ldi	r18, 0x28	; 40
    2e0e:	37 e8       	ldi	r19, 0x87	; 135
    2e10:	40 e0       	ldi	r20, 0x00	; 0
    2e12:	50 e0       	ldi	r21, 0x00	; 0
    2e14:	bc 01       	movw	r22, r24
    2e16:	cd 01       	movw	r24, r26
    2e18:	0e 94 b0 25 	call	0x4b60	; 0x4b60 <__mulsi3>
    2e1c:	dc 01       	movw	r26, r24
    2e1e:	cb 01       	movw	r24, r22
    2e20:	20 e0       	ldi	r18, 0x00	; 0
    2e22:	38 e4       	ldi	r19, 0x48	; 72
    2e24:	48 ee       	ldi	r20, 0xE8	; 232
    2e26:	51 e0       	ldi	r21, 0x01	; 1
    2e28:	bc 01       	movw	r22, r24
    2e2a:	cd 01       	movw	r24, r26
    2e2c:	0e 94 e2 25 	call	0x4bc4	; 0x4bc4 <__udivmodsi4>
    2e30:	da 01       	movw	r26, r20
    2e32:	c9 01       	movw	r24, r18
    2e34:	89 83       	std	Y+1, r24	; 0x01
    2e36:	9a 83       	std	Y+2, r25	; 0x02
    2e38:	ab 83       	std	Y+3, r26	; 0x03
    2e3a:	bc 83       	std	Y+4, r27	; 0x04

    return u32_local_Distance;
    2e3c:	89 81       	ldd	r24, Y+1	; 0x01
    2e3e:	9a 81       	ldd	r25, Y+2	; 0x02
    2e40:	ab 81       	ldd	r26, Y+3	; 0x03
    2e42:	bc 81       	ldd	r27, Y+4	; 0x04
}
    2e44:	bc 01       	movw	r22, r24
    2e46:	cd 01       	movw	r24, r26
    2e48:	28 96       	adiw	r28, 0x08	; 8
    2e4a:	0f b6       	in	r0, 0x3f	; 63
    2e4c:	f8 94       	cli
    2e4e:	de bf       	out	0x3e, r29	; 62
    2e50:	0f be       	out	0x3f, r0	; 63
    2e52:	cd bf       	out	0x3d, r28	; 61
    2e54:	cf 91       	pop	r28
    2e56:	df 91       	pop	r29
    2e58:	08 95       	ret

00002e5a <HULTRASONIC_voidStop>:

/* Stop the Ultrasonic sensor (if needed) */
void HULTRASONIC_voidStop(void)
{
    2e5a:	df 93       	push	r29
    2e5c:	cf 93       	push	r28
    2e5e:	cd b7       	in	r28, 0x3d	; 61
    2e60:	de b7       	in	r29, 0x3e	; 62
    // Implement the stop functionality if required
}
    2e62:	cf 91       	pop	r28
    2e64:	df 91       	pop	r29
    2e66:	08 95       	ret

00002e68 <HSSD_Init>:
#include "../HSSD/HSSD_interface.h"
#include "../HSSD/HSSD_config.h"
#include "../HSSD/HSSD_private.h"

error_state_t HSSD_Init(void)
{
    2e68:	df 93       	push	r29
    2e6a:	cf 93       	push	r28
    2e6c:	0f 92       	push	r0
    2e6e:	cd b7       	in	r28, 0x3d	; 61
    2e70:	de b7       	in	r29, 0x3e	; 62
	error_state_t Local_ErrorState = R_OK;
    2e72:	81 e0       	ldi	r24, 0x01	; 1
    2e74:	89 83       	std	Y+1, r24	; 0x01

	MDIO_SetPinDirection(SSD_DATA_PORT,DATA_PIN_A, DIO_u8PIN_OUTPUT);
    2e76:	81 e0       	ldi	r24, 0x01	; 1
    2e78:	60 e0       	ldi	r22, 0x00	; 0
    2e7a:	41 e0       	ldi	r20, 0x01	; 1
    2e7c:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <MDIO_SetPinDirection>
	MDIO_SetPinDirection(SSD_DATA_PORT,DATA_PIN_B, DIO_u8PIN_OUTPUT);
    2e80:	81 e0       	ldi	r24, 0x01	; 1
    2e82:	61 e0       	ldi	r22, 0x01	; 1
    2e84:	41 e0       	ldi	r20, 0x01	; 1
    2e86:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <MDIO_SetPinDirection>
	MDIO_SetPinDirection(SSD_DATA_PORT,DATA_PIN_C, DIO_u8PIN_OUTPUT);
    2e8a:	81 e0       	ldi	r24, 0x01	; 1
    2e8c:	62 e0       	ldi	r22, 0x02	; 2
    2e8e:	41 e0       	ldi	r20, 0x01	; 1
    2e90:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <MDIO_SetPinDirection>
	MDIO_SetPinDirection(SSD_DATA_PORT,DATA_PIN_D, DIO_u8PIN_OUTPUT);
    2e94:	81 e0       	ldi	r24, 0x01	; 1
    2e96:	64 e0       	ldi	r22, 0x04	; 4
    2e98:	41 e0       	ldi	r20, 0x01	; 1
    2e9a:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <MDIO_SetPinDirection>

	MDIO_SetPinDirection(SSD_CTRL_PORT_1, SSD_1_EN_PIN, DIO_u8PIN_OUTPUT);
    2e9e:	80 e0       	ldi	r24, 0x00	; 0
    2ea0:	63 e0       	ldi	r22, 0x03	; 3
    2ea2:	41 e0       	ldi	r20, 0x01	; 1
    2ea4:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <MDIO_SetPinDirection>
	MDIO_SetPinDirection(SSD_CTRL_PORT_1, SSD_2_EN_PIN, DIO_u8PIN_OUTPUT);
    2ea8:	80 e0       	ldi	r24, 0x00	; 0
    2eaa:	62 e0       	ldi	r22, 0x02	; 2
    2eac:	41 e0       	ldi	r20, 0x01	; 1
    2eae:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <MDIO_SetPinDirection>
	MDIO_SetPinDirection(SSD_CTRL_PORT_2, SSD_3_EN_PIN, DIO_u8PIN_OUTPUT);
    2eb2:	81 e0       	ldi	r24, 0x01	; 1
    2eb4:	65 e0       	ldi	r22, 0x05	; 5
    2eb6:	41 e0       	ldi	r20, 0x01	; 1
    2eb8:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <MDIO_SetPinDirection>
	MDIO_SetPinDirection(SSD_CTRL_PORT_2, SSD_4_EN_PIN, DIO_u8PIN_OUTPUT);
    2ebc:	81 e0       	ldi	r24, 0x01	; 1
    2ebe:	66 e0       	ldi	r22, 0x06	; 6
    2ec0:	41 e0       	ldi	r20, 0x01	; 1
    2ec2:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <MDIO_SetPinDirection>


	return Local_ErrorState;
    2ec6:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ec8:	0f 90       	pop	r0
    2eca:	cf 91       	pop	r28
    2ecc:	df 91       	pop	r29
    2ece:	08 95       	ret

00002ed0 <HSSD_WriteData>:
error_state_t HSSD_WriteData(u8 Copy_u8Num)
{
    2ed0:	df 93       	push	r29
    2ed2:	cf 93       	push	r28
    2ed4:	00 d0       	rcall	.+0      	; 0x2ed6 <HSSD_WriteData+0x6>
    2ed6:	cd b7       	in	r28, 0x3d	; 61
    2ed8:	de b7       	in	r29, 0x3e	; 62
    2eda:	8a 83       	std	Y+2, r24	; 0x02
	error_state_t Local_ErrorState = R_OK;
    2edc:	81 e0       	ldi	r24, 0x01	; 1
    2ede:	89 83       	std	Y+1, r24	; 0x01

	MDIO_SetPinValue(SSD_DATA_PORT,DATA_PIN_A,GET_BIT(Copy_u8Num,PIN_0));
    2ee0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ee2:	98 2f       	mov	r25, r24
    2ee4:	91 70       	andi	r25, 0x01	; 1
    2ee6:	81 e0       	ldi	r24, 0x01	; 1
    2ee8:	60 e0       	ldi	r22, 0x00	; 0
    2eea:	49 2f       	mov	r20, r25
    2eec:	0e 94 a8 10 	call	0x2150	; 0x2150 <MDIO_SetPinValue>
	MDIO_SetPinValue(SSD_DATA_PORT,DATA_PIN_B,GET_BIT(Copy_u8Num,PIN_1));
    2ef0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ef2:	86 95       	lsr	r24
    2ef4:	98 2f       	mov	r25, r24
    2ef6:	91 70       	andi	r25, 0x01	; 1
    2ef8:	81 e0       	ldi	r24, 0x01	; 1
    2efa:	61 e0       	ldi	r22, 0x01	; 1
    2efc:	49 2f       	mov	r20, r25
    2efe:	0e 94 a8 10 	call	0x2150	; 0x2150 <MDIO_SetPinValue>
	MDIO_SetPinValue(SSD_DATA_PORT,DATA_PIN_C,GET_BIT(Copy_u8Num,PIN_2));
    2f02:	8a 81       	ldd	r24, Y+2	; 0x02
    2f04:	86 95       	lsr	r24
    2f06:	86 95       	lsr	r24
    2f08:	98 2f       	mov	r25, r24
    2f0a:	91 70       	andi	r25, 0x01	; 1
    2f0c:	81 e0       	ldi	r24, 0x01	; 1
    2f0e:	62 e0       	ldi	r22, 0x02	; 2
    2f10:	49 2f       	mov	r20, r25
    2f12:	0e 94 a8 10 	call	0x2150	; 0x2150 <MDIO_SetPinValue>
	MDIO_SetPinValue(SSD_DATA_PORT,DATA_PIN_D,GET_BIT(Copy_u8Num,PIN_3));
    2f16:	8a 81       	ldd	r24, Y+2	; 0x02
    2f18:	86 95       	lsr	r24
    2f1a:	86 95       	lsr	r24
    2f1c:	86 95       	lsr	r24
    2f1e:	98 2f       	mov	r25, r24
    2f20:	91 70       	andi	r25, 0x01	; 1
    2f22:	81 e0       	ldi	r24, 0x01	; 1
    2f24:	64 e0       	ldi	r22, 0x04	; 4
    2f26:	49 2f       	mov	r20, r25
    2f28:	0e 94 a8 10 	call	0x2150	; 0x2150 <MDIO_SetPinValue>

	return Local_ErrorState;
    2f2c:	89 81       	ldd	r24, Y+1	; 0x01

}
    2f2e:	0f 90       	pop	r0
    2f30:	0f 90       	pop	r0
    2f32:	cf 91       	pop	r28
    2f34:	df 91       	pop	r29
    2f36:	08 95       	ret

00002f38 <HSSD_DisplayBlink>:

error_state_t HSSD_DisplayBlink(u32 Copy_u8Num)
{
    2f38:	0f 93       	push	r16
    2f3a:	1f 93       	push	r17
    2f3c:	df 93       	push	r29
    2f3e:	cf 93       	push	r28
    2f40:	cd b7       	in	r28, 0x3d	; 61
    2f42:	de b7       	in	r29, 0x3e	; 62
    2f44:	c2 54       	subi	r28, 0x42	; 66
    2f46:	d0 40       	sbci	r29, 0x00	; 0
    2f48:	0f b6       	in	r0, 0x3f	; 63
    2f4a:	f8 94       	cli
    2f4c:	de bf       	out	0x3e, r29	; 62
    2f4e:	0f be       	out	0x3f, r0	; 63
    2f50:	cd bf       	out	0x3d, r28	; 61
    2f52:	fe 01       	movw	r30, r28
    2f54:	ff 96       	adiw	r30, 0x3f	; 63
    2f56:	60 83       	st	Z, r22
    2f58:	71 83       	std	Z+1, r23	; 0x01
    2f5a:	82 83       	std	Z+2, r24	; 0x02
    2f5c:	93 83       	std	Z+3, r25	; 0x03
	error_state_t Local_ErrorState = R_OK;
    2f5e:	81 e0       	ldi	r24, 0x01	; 1
    2f60:	8e af       	std	Y+62, r24	; 0x3e
	// there other way to use array instead
	//u8 copy_u8Digit [4];

	u8 Local_u8Ones = Copy_u8Num%10;
    2f62:	fe 01       	movw	r30, r28
    2f64:	ff 96       	adiw	r30, 0x3f	; 63
    2f66:	80 81       	ld	r24, Z
    2f68:	91 81       	ldd	r25, Z+1	; 0x01
    2f6a:	a2 81       	ldd	r26, Z+2	; 0x02
    2f6c:	b3 81       	ldd	r27, Z+3	; 0x03
    2f6e:	2a e0       	ldi	r18, 0x0A	; 10
    2f70:	30 e0       	ldi	r19, 0x00	; 0
    2f72:	40 e0       	ldi	r20, 0x00	; 0
    2f74:	50 e0       	ldi	r21, 0x00	; 0
    2f76:	bc 01       	movw	r22, r24
    2f78:	cd 01       	movw	r24, r26
    2f7a:	0e 94 e2 25 	call	0x4bc4	; 0x4bc4 <__udivmodsi4>
    2f7e:	dc 01       	movw	r26, r24
    2f80:	cb 01       	movw	r24, r22
    2f82:	8d af       	std	Y+61, r24	; 0x3d
	Copy_u8Num/=10;
    2f84:	8e 01       	movw	r16, r28
    2f86:	01 5c       	subi	r16, 0xC1	; 193
    2f88:	1f 4f       	sbci	r17, 0xFF	; 255
    2f8a:	fe 01       	movw	r30, r28
    2f8c:	ff 96       	adiw	r30, 0x3f	; 63
    2f8e:	80 81       	ld	r24, Z
    2f90:	91 81       	ldd	r25, Z+1	; 0x01
    2f92:	a2 81       	ldd	r26, Z+2	; 0x02
    2f94:	b3 81       	ldd	r27, Z+3	; 0x03
    2f96:	2a e0       	ldi	r18, 0x0A	; 10
    2f98:	30 e0       	ldi	r19, 0x00	; 0
    2f9a:	40 e0       	ldi	r20, 0x00	; 0
    2f9c:	50 e0       	ldi	r21, 0x00	; 0
    2f9e:	bc 01       	movw	r22, r24
    2fa0:	cd 01       	movw	r24, r26
    2fa2:	0e 94 e2 25 	call	0x4bc4	; 0x4bc4 <__udivmodsi4>
    2fa6:	da 01       	movw	r26, r20
    2fa8:	c9 01       	movw	r24, r18
    2faa:	f8 01       	movw	r30, r16
    2fac:	80 83       	st	Z, r24
    2fae:	91 83       	std	Z+1, r25	; 0x01
    2fb0:	a2 83       	std	Z+2, r26	; 0x02
    2fb2:	b3 83       	std	Z+3, r27	; 0x03
	u8 Local_u8Tens = Copy_u8Num%10;
    2fb4:	fe 01       	movw	r30, r28
    2fb6:	ff 96       	adiw	r30, 0x3f	; 63
    2fb8:	80 81       	ld	r24, Z
    2fba:	91 81       	ldd	r25, Z+1	; 0x01
    2fbc:	a2 81       	ldd	r26, Z+2	; 0x02
    2fbe:	b3 81       	ldd	r27, Z+3	; 0x03
    2fc0:	2a e0       	ldi	r18, 0x0A	; 10
    2fc2:	30 e0       	ldi	r19, 0x00	; 0
    2fc4:	40 e0       	ldi	r20, 0x00	; 0
    2fc6:	50 e0       	ldi	r21, 0x00	; 0
    2fc8:	bc 01       	movw	r22, r24
    2fca:	cd 01       	movw	r24, r26
    2fcc:	0e 94 e2 25 	call	0x4bc4	; 0x4bc4 <__udivmodsi4>
    2fd0:	dc 01       	movw	r26, r24
    2fd2:	cb 01       	movw	r24, r22
    2fd4:	8c af       	std	Y+60, r24	; 0x3c
	Copy_u8Num/=10;
    2fd6:	8e 01       	movw	r16, r28
    2fd8:	01 5c       	subi	r16, 0xC1	; 193
    2fda:	1f 4f       	sbci	r17, 0xFF	; 255
    2fdc:	fe 01       	movw	r30, r28
    2fde:	ff 96       	adiw	r30, 0x3f	; 63
    2fe0:	80 81       	ld	r24, Z
    2fe2:	91 81       	ldd	r25, Z+1	; 0x01
    2fe4:	a2 81       	ldd	r26, Z+2	; 0x02
    2fe6:	b3 81       	ldd	r27, Z+3	; 0x03
    2fe8:	2a e0       	ldi	r18, 0x0A	; 10
    2fea:	30 e0       	ldi	r19, 0x00	; 0
    2fec:	40 e0       	ldi	r20, 0x00	; 0
    2fee:	50 e0       	ldi	r21, 0x00	; 0
    2ff0:	bc 01       	movw	r22, r24
    2ff2:	cd 01       	movw	r24, r26
    2ff4:	0e 94 e2 25 	call	0x4bc4	; 0x4bc4 <__udivmodsi4>
    2ff8:	da 01       	movw	r26, r20
    2ffa:	c9 01       	movw	r24, r18
    2ffc:	f8 01       	movw	r30, r16
    2ffe:	80 83       	st	Z, r24
    3000:	91 83       	std	Z+1, r25	; 0x01
    3002:	a2 83       	std	Z+2, r26	; 0x02
    3004:	b3 83       	std	Z+3, r27	; 0x03
	u8 Local_u8Hundred = Copy_u8Num%10;
    3006:	fe 01       	movw	r30, r28
    3008:	ff 96       	adiw	r30, 0x3f	; 63
    300a:	80 81       	ld	r24, Z
    300c:	91 81       	ldd	r25, Z+1	; 0x01
    300e:	a2 81       	ldd	r26, Z+2	; 0x02
    3010:	b3 81       	ldd	r27, Z+3	; 0x03
    3012:	2a e0       	ldi	r18, 0x0A	; 10
    3014:	30 e0       	ldi	r19, 0x00	; 0
    3016:	40 e0       	ldi	r20, 0x00	; 0
    3018:	50 e0       	ldi	r21, 0x00	; 0
    301a:	bc 01       	movw	r22, r24
    301c:	cd 01       	movw	r24, r26
    301e:	0e 94 e2 25 	call	0x4bc4	; 0x4bc4 <__udivmodsi4>
    3022:	dc 01       	movw	r26, r24
    3024:	cb 01       	movw	r24, r22
    3026:	8b af       	std	Y+59, r24	; 0x3b
	Copy_u8Num/=10;
    3028:	8e 01       	movw	r16, r28
    302a:	01 5c       	subi	r16, 0xC1	; 193
    302c:	1f 4f       	sbci	r17, 0xFF	; 255
    302e:	fe 01       	movw	r30, r28
    3030:	ff 96       	adiw	r30, 0x3f	; 63
    3032:	80 81       	ld	r24, Z
    3034:	91 81       	ldd	r25, Z+1	; 0x01
    3036:	a2 81       	ldd	r26, Z+2	; 0x02
    3038:	b3 81       	ldd	r27, Z+3	; 0x03
    303a:	2a e0       	ldi	r18, 0x0A	; 10
    303c:	30 e0       	ldi	r19, 0x00	; 0
    303e:	40 e0       	ldi	r20, 0x00	; 0
    3040:	50 e0       	ldi	r21, 0x00	; 0
    3042:	bc 01       	movw	r22, r24
    3044:	cd 01       	movw	r24, r26
    3046:	0e 94 e2 25 	call	0x4bc4	; 0x4bc4 <__udivmodsi4>
    304a:	da 01       	movw	r26, r20
    304c:	c9 01       	movw	r24, r18
    304e:	f8 01       	movw	r30, r16
    3050:	80 83       	st	Z, r24
    3052:	91 83       	std	Z+1, r25	; 0x01
    3054:	a2 83       	std	Z+2, r26	; 0x02
    3056:	b3 83       	std	Z+3, r27	; 0x03
	u8 Local_u8Thousand = Copy_u8Num;
    3058:	fe 01       	movw	r30, r28
    305a:	ff 96       	adiw	r30, 0x3f	; 63
    305c:	80 81       	ld	r24, Z
    305e:	8a af       	std	Y+58, r24	; 0x3a

	u8 Local_u8BlinkCounter = 0;
    3060:	19 ae       	std	Y+57, r1	; 0x39
	for (Local_u8BlinkCounter = 0; Local_u8BlinkCounter<60; Local_u8BlinkCounter++)
    3062:	19 ae       	std	Y+57, r1	; 0x39
    3064:	3b c2       	rjmp	.+1142   	; 0x34dc <HSSD_DisplayBlink+0x5a4>
	{
		MDIO_SetPinValue(SSD_CTRL_PORT_1, SSD_1_EN_PIN, DIO_u8PIN_LOW);
    3066:	80 e0       	ldi	r24, 0x00	; 0
    3068:	63 e0       	ldi	r22, 0x03	; 3
    306a:	40 e0       	ldi	r20, 0x00	; 0
    306c:	0e 94 a8 10 	call	0x2150	; 0x2150 <MDIO_SetPinValue>
		MDIO_SetPinValue(SSD_CTRL_PORT_1, SSD_2_EN_PIN, DIO_u8PIN_HIGH);
    3070:	80 e0       	ldi	r24, 0x00	; 0
    3072:	62 e0       	ldi	r22, 0x02	; 2
    3074:	41 e0       	ldi	r20, 0x01	; 1
    3076:	0e 94 a8 10 	call	0x2150	; 0x2150 <MDIO_SetPinValue>
		MDIO_SetPinValue(SSD_CTRL_PORT_2, SSD_3_EN_PIN, DIO_u8PIN_HIGH);
    307a:	81 e0       	ldi	r24, 0x01	; 1
    307c:	65 e0       	ldi	r22, 0x05	; 5
    307e:	41 e0       	ldi	r20, 0x01	; 1
    3080:	0e 94 a8 10 	call	0x2150	; 0x2150 <MDIO_SetPinValue>
		MDIO_SetPinValue(SSD_CTRL_PORT_2, SSD_4_EN_PIN, DIO_u8PIN_HIGH);
    3084:	81 e0       	ldi	r24, 0x01	; 1
    3086:	66 e0       	ldi	r22, 0x06	; 6
    3088:	41 e0       	ldi	r20, 0x01	; 1
    308a:	0e 94 a8 10 	call	0x2150	; 0x2150 <MDIO_SetPinValue>
		HSSD_WriteData(Local_u8Ones);
    308e:	8d ad       	ldd	r24, Y+61	; 0x3d
    3090:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <HSSD_WriteData>
    3094:	80 e0       	ldi	r24, 0x00	; 0
    3096:	90 e0       	ldi	r25, 0x00	; 0
    3098:	a0 ea       	ldi	r26, 0xA0	; 160
    309a:	b0 e4       	ldi	r27, 0x40	; 64
    309c:	8d ab       	std	Y+53, r24	; 0x35
    309e:	9e ab       	std	Y+54, r25	; 0x36
    30a0:	af ab       	std	Y+55, r26	; 0x37
    30a2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30a4:	6d a9       	ldd	r22, Y+53	; 0x35
    30a6:	7e a9       	ldd	r23, Y+54	; 0x36
    30a8:	8f a9       	ldd	r24, Y+55	; 0x37
    30aa:	98 ad       	ldd	r25, Y+56	; 0x38
    30ac:	20 e0       	ldi	r18, 0x00	; 0
    30ae:	30 e0       	ldi	r19, 0x00	; 0
    30b0:	4a e7       	ldi	r20, 0x7A	; 122
    30b2:	55 e4       	ldi	r21, 0x45	; 69
    30b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30b8:	dc 01       	movw	r26, r24
    30ba:	cb 01       	movw	r24, r22
    30bc:	89 ab       	std	Y+49, r24	; 0x31
    30be:	9a ab       	std	Y+50, r25	; 0x32
    30c0:	ab ab       	std	Y+51, r26	; 0x33
    30c2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    30c4:	69 a9       	ldd	r22, Y+49	; 0x31
    30c6:	7a a9       	ldd	r23, Y+50	; 0x32
    30c8:	8b a9       	ldd	r24, Y+51	; 0x33
    30ca:	9c a9       	ldd	r25, Y+52	; 0x34
    30cc:	20 e0       	ldi	r18, 0x00	; 0
    30ce:	30 e0       	ldi	r19, 0x00	; 0
    30d0:	40 e8       	ldi	r20, 0x80	; 128
    30d2:	5f e3       	ldi	r21, 0x3F	; 63
    30d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    30d8:	88 23       	and	r24, r24
    30da:	2c f4       	brge	.+10     	; 0x30e6 <HSSD_DisplayBlink+0x1ae>
		__ticks = 1;
    30dc:	81 e0       	ldi	r24, 0x01	; 1
    30de:	90 e0       	ldi	r25, 0x00	; 0
    30e0:	98 ab       	std	Y+48, r25	; 0x30
    30e2:	8f a7       	std	Y+47, r24	; 0x2f
    30e4:	3f c0       	rjmp	.+126    	; 0x3164 <HSSD_DisplayBlink+0x22c>
	else if (__tmp > 65535)
    30e6:	69 a9       	ldd	r22, Y+49	; 0x31
    30e8:	7a a9       	ldd	r23, Y+50	; 0x32
    30ea:	8b a9       	ldd	r24, Y+51	; 0x33
    30ec:	9c a9       	ldd	r25, Y+52	; 0x34
    30ee:	20 e0       	ldi	r18, 0x00	; 0
    30f0:	3f ef       	ldi	r19, 0xFF	; 255
    30f2:	4f e7       	ldi	r20, 0x7F	; 127
    30f4:	57 e4       	ldi	r21, 0x47	; 71
    30f6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    30fa:	18 16       	cp	r1, r24
    30fc:	4c f5       	brge	.+82     	; 0x3150 <HSSD_DisplayBlink+0x218>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30fe:	6d a9       	ldd	r22, Y+53	; 0x35
    3100:	7e a9       	ldd	r23, Y+54	; 0x36
    3102:	8f a9       	ldd	r24, Y+55	; 0x37
    3104:	98 ad       	ldd	r25, Y+56	; 0x38
    3106:	20 e0       	ldi	r18, 0x00	; 0
    3108:	30 e0       	ldi	r19, 0x00	; 0
    310a:	40 e2       	ldi	r20, 0x20	; 32
    310c:	51 e4       	ldi	r21, 0x41	; 65
    310e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3112:	dc 01       	movw	r26, r24
    3114:	cb 01       	movw	r24, r22
    3116:	bc 01       	movw	r22, r24
    3118:	cd 01       	movw	r24, r26
    311a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    311e:	dc 01       	movw	r26, r24
    3120:	cb 01       	movw	r24, r22
    3122:	98 ab       	std	Y+48, r25	; 0x30
    3124:	8f a7       	std	Y+47, r24	; 0x2f
    3126:	0f c0       	rjmp	.+30     	; 0x3146 <HSSD_DisplayBlink+0x20e>
    3128:	80 e9       	ldi	r24, 0x90	; 144
    312a:	91 e0       	ldi	r25, 0x01	; 1
    312c:	9e a7       	std	Y+46, r25	; 0x2e
    312e:	8d a7       	std	Y+45, r24	; 0x2d
    3130:	8d a5       	ldd	r24, Y+45	; 0x2d
    3132:	9e a5       	ldd	r25, Y+46	; 0x2e
    3134:	01 97       	sbiw	r24, 0x01	; 1
    3136:	f1 f7       	brne	.-4      	; 0x3134 <HSSD_DisplayBlink+0x1fc>
    3138:	9e a7       	std	Y+46, r25	; 0x2e
    313a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    313c:	8f a5       	ldd	r24, Y+47	; 0x2f
    313e:	98 a9       	ldd	r25, Y+48	; 0x30
    3140:	01 97       	sbiw	r24, 0x01	; 1
    3142:	98 ab       	std	Y+48, r25	; 0x30
    3144:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3146:	8f a5       	ldd	r24, Y+47	; 0x2f
    3148:	98 a9       	ldd	r25, Y+48	; 0x30
    314a:	00 97       	sbiw	r24, 0x00	; 0
    314c:	69 f7       	brne	.-38     	; 0x3128 <HSSD_DisplayBlink+0x1f0>
    314e:	14 c0       	rjmp	.+40     	; 0x3178 <HSSD_DisplayBlink+0x240>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3150:	69 a9       	ldd	r22, Y+49	; 0x31
    3152:	7a a9       	ldd	r23, Y+50	; 0x32
    3154:	8b a9       	ldd	r24, Y+51	; 0x33
    3156:	9c a9       	ldd	r25, Y+52	; 0x34
    3158:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    315c:	dc 01       	movw	r26, r24
    315e:	cb 01       	movw	r24, r22
    3160:	98 ab       	std	Y+48, r25	; 0x30
    3162:	8f a7       	std	Y+47, r24	; 0x2f
    3164:	8f a5       	ldd	r24, Y+47	; 0x2f
    3166:	98 a9       	ldd	r25, Y+48	; 0x30
    3168:	9c a7       	std	Y+44, r25	; 0x2c
    316a:	8b a7       	std	Y+43, r24	; 0x2b
    316c:	8b a5       	ldd	r24, Y+43	; 0x2b
    316e:	9c a5       	ldd	r25, Y+44	; 0x2c
    3170:	01 97       	sbiw	r24, 0x01	; 1
    3172:	f1 f7       	brne	.-4      	; 0x3170 <HSSD_DisplayBlink+0x238>
    3174:	9c a7       	std	Y+44, r25	; 0x2c
    3176:	8b a7       	std	Y+43, r24	; 0x2b

		_delay_ms(5);

		MDIO_SetPinValue(SSD_CTRL_PORT_1, SSD_1_EN_PIN, DIO_u8PIN_HIGH);
    3178:	80 e0       	ldi	r24, 0x00	; 0
    317a:	63 e0       	ldi	r22, 0x03	; 3
    317c:	41 e0       	ldi	r20, 0x01	; 1
    317e:	0e 94 a8 10 	call	0x2150	; 0x2150 <MDIO_SetPinValue>
		MDIO_SetPinValue(SSD_CTRL_PORT_1, SSD_2_EN_PIN, DIO_u8PIN_LOW);
    3182:	80 e0       	ldi	r24, 0x00	; 0
    3184:	62 e0       	ldi	r22, 0x02	; 2
    3186:	40 e0       	ldi	r20, 0x00	; 0
    3188:	0e 94 a8 10 	call	0x2150	; 0x2150 <MDIO_SetPinValue>
		MDIO_SetPinValue(SSD_CTRL_PORT_2, SSD_3_EN_PIN, DIO_u8PIN_HIGH);
    318c:	81 e0       	ldi	r24, 0x01	; 1
    318e:	65 e0       	ldi	r22, 0x05	; 5
    3190:	41 e0       	ldi	r20, 0x01	; 1
    3192:	0e 94 a8 10 	call	0x2150	; 0x2150 <MDIO_SetPinValue>
		MDIO_SetPinValue(SSD_CTRL_PORT_2, SSD_4_EN_PIN, DIO_u8PIN_HIGH);
    3196:	81 e0       	ldi	r24, 0x01	; 1
    3198:	66 e0       	ldi	r22, 0x06	; 6
    319a:	41 e0       	ldi	r20, 0x01	; 1
    319c:	0e 94 a8 10 	call	0x2150	; 0x2150 <MDIO_SetPinValue>
		HSSD_WriteData(Local_u8Tens);
    31a0:	8c ad       	ldd	r24, Y+60	; 0x3c
    31a2:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <HSSD_WriteData>
    31a6:	80 e0       	ldi	r24, 0x00	; 0
    31a8:	90 e0       	ldi	r25, 0x00	; 0
    31aa:	a0 ea       	ldi	r26, 0xA0	; 160
    31ac:	b0 e4       	ldi	r27, 0x40	; 64
    31ae:	8f a3       	std	Y+39, r24	; 0x27
    31b0:	98 a7       	std	Y+40, r25	; 0x28
    31b2:	a9 a7       	std	Y+41, r26	; 0x29
    31b4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31b6:	6f a1       	ldd	r22, Y+39	; 0x27
    31b8:	78 a5       	ldd	r23, Y+40	; 0x28
    31ba:	89 a5       	ldd	r24, Y+41	; 0x29
    31bc:	9a a5       	ldd	r25, Y+42	; 0x2a
    31be:	20 e0       	ldi	r18, 0x00	; 0
    31c0:	30 e0       	ldi	r19, 0x00	; 0
    31c2:	4a e7       	ldi	r20, 0x7A	; 122
    31c4:	55 e4       	ldi	r21, 0x45	; 69
    31c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31ca:	dc 01       	movw	r26, r24
    31cc:	cb 01       	movw	r24, r22
    31ce:	8b a3       	std	Y+35, r24	; 0x23
    31d0:	9c a3       	std	Y+36, r25	; 0x24
    31d2:	ad a3       	std	Y+37, r26	; 0x25
    31d4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    31d6:	6b a1       	ldd	r22, Y+35	; 0x23
    31d8:	7c a1       	ldd	r23, Y+36	; 0x24
    31da:	8d a1       	ldd	r24, Y+37	; 0x25
    31dc:	9e a1       	ldd	r25, Y+38	; 0x26
    31de:	20 e0       	ldi	r18, 0x00	; 0
    31e0:	30 e0       	ldi	r19, 0x00	; 0
    31e2:	40 e8       	ldi	r20, 0x80	; 128
    31e4:	5f e3       	ldi	r21, 0x3F	; 63
    31e6:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    31ea:	88 23       	and	r24, r24
    31ec:	2c f4       	brge	.+10     	; 0x31f8 <HSSD_DisplayBlink+0x2c0>
		__ticks = 1;
    31ee:	81 e0       	ldi	r24, 0x01	; 1
    31f0:	90 e0       	ldi	r25, 0x00	; 0
    31f2:	9a a3       	std	Y+34, r25	; 0x22
    31f4:	89 a3       	std	Y+33, r24	; 0x21
    31f6:	3f c0       	rjmp	.+126    	; 0x3276 <HSSD_DisplayBlink+0x33e>
	else if (__tmp > 65535)
    31f8:	6b a1       	ldd	r22, Y+35	; 0x23
    31fa:	7c a1       	ldd	r23, Y+36	; 0x24
    31fc:	8d a1       	ldd	r24, Y+37	; 0x25
    31fe:	9e a1       	ldd	r25, Y+38	; 0x26
    3200:	20 e0       	ldi	r18, 0x00	; 0
    3202:	3f ef       	ldi	r19, 0xFF	; 255
    3204:	4f e7       	ldi	r20, 0x7F	; 127
    3206:	57 e4       	ldi	r21, 0x47	; 71
    3208:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    320c:	18 16       	cp	r1, r24
    320e:	4c f5       	brge	.+82     	; 0x3262 <HSSD_DisplayBlink+0x32a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3210:	6f a1       	ldd	r22, Y+39	; 0x27
    3212:	78 a5       	ldd	r23, Y+40	; 0x28
    3214:	89 a5       	ldd	r24, Y+41	; 0x29
    3216:	9a a5       	ldd	r25, Y+42	; 0x2a
    3218:	20 e0       	ldi	r18, 0x00	; 0
    321a:	30 e0       	ldi	r19, 0x00	; 0
    321c:	40 e2       	ldi	r20, 0x20	; 32
    321e:	51 e4       	ldi	r21, 0x41	; 65
    3220:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3224:	dc 01       	movw	r26, r24
    3226:	cb 01       	movw	r24, r22
    3228:	bc 01       	movw	r22, r24
    322a:	cd 01       	movw	r24, r26
    322c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3230:	dc 01       	movw	r26, r24
    3232:	cb 01       	movw	r24, r22
    3234:	9a a3       	std	Y+34, r25	; 0x22
    3236:	89 a3       	std	Y+33, r24	; 0x21
    3238:	0f c0       	rjmp	.+30     	; 0x3258 <HSSD_DisplayBlink+0x320>
    323a:	80 e9       	ldi	r24, 0x90	; 144
    323c:	91 e0       	ldi	r25, 0x01	; 1
    323e:	98 a3       	std	Y+32, r25	; 0x20
    3240:	8f 8f       	std	Y+31, r24	; 0x1f
    3242:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3244:	98 a1       	ldd	r25, Y+32	; 0x20
    3246:	01 97       	sbiw	r24, 0x01	; 1
    3248:	f1 f7       	brne	.-4      	; 0x3246 <HSSD_DisplayBlink+0x30e>
    324a:	98 a3       	std	Y+32, r25	; 0x20
    324c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    324e:	89 a1       	ldd	r24, Y+33	; 0x21
    3250:	9a a1       	ldd	r25, Y+34	; 0x22
    3252:	01 97       	sbiw	r24, 0x01	; 1
    3254:	9a a3       	std	Y+34, r25	; 0x22
    3256:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3258:	89 a1       	ldd	r24, Y+33	; 0x21
    325a:	9a a1       	ldd	r25, Y+34	; 0x22
    325c:	00 97       	sbiw	r24, 0x00	; 0
    325e:	69 f7       	brne	.-38     	; 0x323a <HSSD_DisplayBlink+0x302>
    3260:	14 c0       	rjmp	.+40     	; 0x328a <HSSD_DisplayBlink+0x352>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3262:	6b a1       	ldd	r22, Y+35	; 0x23
    3264:	7c a1       	ldd	r23, Y+36	; 0x24
    3266:	8d a1       	ldd	r24, Y+37	; 0x25
    3268:	9e a1       	ldd	r25, Y+38	; 0x26
    326a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    326e:	dc 01       	movw	r26, r24
    3270:	cb 01       	movw	r24, r22
    3272:	9a a3       	std	Y+34, r25	; 0x22
    3274:	89 a3       	std	Y+33, r24	; 0x21
    3276:	89 a1       	ldd	r24, Y+33	; 0x21
    3278:	9a a1       	ldd	r25, Y+34	; 0x22
    327a:	9e 8f       	std	Y+30, r25	; 0x1e
    327c:	8d 8f       	std	Y+29, r24	; 0x1d
    327e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3280:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3282:	01 97       	sbiw	r24, 0x01	; 1
    3284:	f1 f7       	brne	.-4      	; 0x3282 <HSSD_DisplayBlink+0x34a>
    3286:	9e 8f       	std	Y+30, r25	; 0x1e
    3288:	8d 8f       	std	Y+29, r24	; 0x1d

		_delay_ms(5);

		MDIO_SetPinValue(SSD_CTRL_PORT_1, SSD_1_EN_PIN, DIO_u8PIN_HIGH);
    328a:	80 e0       	ldi	r24, 0x00	; 0
    328c:	63 e0       	ldi	r22, 0x03	; 3
    328e:	41 e0       	ldi	r20, 0x01	; 1
    3290:	0e 94 a8 10 	call	0x2150	; 0x2150 <MDIO_SetPinValue>
		MDIO_SetPinValue(SSD_CTRL_PORT_1, SSD_2_EN_PIN, DIO_u8PIN_HIGH);
    3294:	80 e0       	ldi	r24, 0x00	; 0
    3296:	62 e0       	ldi	r22, 0x02	; 2
    3298:	41 e0       	ldi	r20, 0x01	; 1
    329a:	0e 94 a8 10 	call	0x2150	; 0x2150 <MDIO_SetPinValue>
		MDIO_SetPinValue(SSD_CTRL_PORT_2, SSD_3_EN_PIN, DIO_u8PIN_LOW);
    329e:	81 e0       	ldi	r24, 0x01	; 1
    32a0:	65 e0       	ldi	r22, 0x05	; 5
    32a2:	40 e0       	ldi	r20, 0x00	; 0
    32a4:	0e 94 a8 10 	call	0x2150	; 0x2150 <MDIO_SetPinValue>
		MDIO_SetPinValue(SSD_CTRL_PORT_2, SSD_4_EN_PIN, DIO_u8PIN_HIGH);
    32a8:	81 e0       	ldi	r24, 0x01	; 1
    32aa:	66 e0       	ldi	r22, 0x06	; 6
    32ac:	41 e0       	ldi	r20, 0x01	; 1
    32ae:	0e 94 a8 10 	call	0x2150	; 0x2150 <MDIO_SetPinValue>
		HSSD_WriteData(Local_u8Hundred);
    32b2:	8b ad       	ldd	r24, Y+59	; 0x3b
    32b4:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <HSSD_WriteData>
    32b8:	80 e0       	ldi	r24, 0x00	; 0
    32ba:	90 e0       	ldi	r25, 0x00	; 0
    32bc:	a0 ea       	ldi	r26, 0xA0	; 160
    32be:	b0 e4       	ldi	r27, 0x40	; 64
    32c0:	89 8f       	std	Y+25, r24	; 0x19
    32c2:	9a 8f       	std	Y+26, r25	; 0x1a
    32c4:	ab 8f       	std	Y+27, r26	; 0x1b
    32c6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32c8:	69 8d       	ldd	r22, Y+25	; 0x19
    32ca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    32cc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    32ce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    32d0:	20 e0       	ldi	r18, 0x00	; 0
    32d2:	30 e0       	ldi	r19, 0x00	; 0
    32d4:	4a e7       	ldi	r20, 0x7A	; 122
    32d6:	55 e4       	ldi	r21, 0x45	; 69
    32d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32dc:	dc 01       	movw	r26, r24
    32de:	cb 01       	movw	r24, r22
    32e0:	8d 8b       	std	Y+21, r24	; 0x15
    32e2:	9e 8b       	std	Y+22, r25	; 0x16
    32e4:	af 8b       	std	Y+23, r26	; 0x17
    32e6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    32e8:	6d 89       	ldd	r22, Y+21	; 0x15
    32ea:	7e 89       	ldd	r23, Y+22	; 0x16
    32ec:	8f 89       	ldd	r24, Y+23	; 0x17
    32ee:	98 8d       	ldd	r25, Y+24	; 0x18
    32f0:	20 e0       	ldi	r18, 0x00	; 0
    32f2:	30 e0       	ldi	r19, 0x00	; 0
    32f4:	40 e8       	ldi	r20, 0x80	; 128
    32f6:	5f e3       	ldi	r21, 0x3F	; 63
    32f8:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    32fc:	88 23       	and	r24, r24
    32fe:	2c f4       	brge	.+10     	; 0x330a <HSSD_DisplayBlink+0x3d2>
		__ticks = 1;
    3300:	81 e0       	ldi	r24, 0x01	; 1
    3302:	90 e0       	ldi	r25, 0x00	; 0
    3304:	9c 8b       	std	Y+20, r25	; 0x14
    3306:	8b 8b       	std	Y+19, r24	; 0x13
    3308:	3f c0       	rjmp	.+126    	; 0x3388 <HSSD_DisplayBlink+0x450>
	else if (__tmp > 65535)
    330a:	6d 89       	ldd	r22, Y+21	; 0x15
    330c:	7e 89       	ldd	r23, Y+22	; 0x16
    330e:	8f 89       	ldd	r24, Y+23	; 0x17
    3310:	98 8d       	ldd	r25, Y+24	; 0x18
    3312:	20 e0       	ldi	r18, 0x00	; 0
    3314:	3f ef       	ldi	r19, 0xFF	; 255
    3316:	4f e7       	ldi	r20, 0x7F	; 127
    3318:	57 e4       	ldi	r21, 0x47	; 71
    331a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    331e:	18 16       	cp	r1, r24
    3320:	4c f5       	brge	.+82     	; 0x3374 <HSSD_DisplayBlink+0x43c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3322:	69 8d       	ldd	r22, Y+25	; 0x19
    3324:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3326:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3328:	9c 8d       	ldd	r25, Y+28	; 0x1c
    332a:	20 e0       	ldi	r18, 0x00	; 0
    332c:	30 e0       	ldi	r19, 0x00	; 0
    332e:	40 e2       	ldi	r20, 0x20	; 32
    3330:	51 e4       	ldi	r21, 0x41	; 65
    3332:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3336:	dc 01       	movw	r26, r24
    3338:	cb 01       	movw	r24, r22
    333a:	bc 01       	movw	r22, r24
    333c:	cd 01       	movw	r24, r26
    333e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3342:	dc 01       	movw	r26, r24
    3344:	cb 01       	movw	r24, r22
    3346:	9c 8b       	std	Y+20, r25	; 0x14
    3348:	8b 8b       	std	Y+19, r24	; 0x13
    334a:	0f c0       	rjmp	.+30     	; 0x336a <HSSD_DisplayBlink+0x432>
    334c:	80 e9       	ldi	r24, 0x90	; 144
    334e:	91 e0       	ldi	r25, 0x01	; 1
    3350:	9a 8b       	std	Y+18, r25	; 0x12
    3352:	89 8b       	std	Y+17, r24	; 0x11
    3354:	89 89       	ldd	r24, Y+17	; 0x11
    3356:	9a 89       	ldd	r25, Y+18	; 0x12
    3358:	01 97       	sbiw	r24, 0x01	; 1
    335a:	f1 f7       	brne	.-4      	; 0x3358 <HSSD_DisplayBlink+0x420>
    335c:	9a 8b       	std	Y+18, r25	; 0x12
    335e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3360:	8b 89       	ldd	r24, Y+19	; 0x13
    3362:	9c 89       	ldd	r25, Y+20	; 0x14
    3364:	01 97       	sbiw	r24, 0x01	; 1
    3366:	9c 8b       	std	Y+20, r25	; 0x14
    3368:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    336a:	8b 89       	ldd	r24, Y+19	; 0x13
    336c:	9c 89       	ldd	r25, Y+20	; 0x14
    336e:	00 97       	sbiw	r24, 0x00	; 0
    3370:	69 f7       	brne	.-38     	; 0x334c <HSSD_DisplayBlink+0x414>
    3372:	14 c0       	rjmp	.+40     	; 0x339c <HSSD_DisplayBlink+0x464>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3374:	6d 89       	ldd	r22, Y+21	; 0x15
    3376:	7e 89       	ldd	r23, Y+22	; 0x16
    3378:	8f 89       	ldd	r24, Y+23	; 0x17
    337a:	98 8d       	ldd	r25, Y+24	; 0x18
    337c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3380:	dc 01       	movw	r26, r24
    3382:	cb 01       	movw	r24, r22
    3384:	9c 8b       	std	Y+20, r25	; 0x14
    3386:	8b 8b       	std	Y+19, r24	; 0x13
    3388:	8b 89       	ldd	r24, Y+19	; 0x13
    338a:	9c 89       	ldd	r25, Y+20	; 0x14
    338c:	98 8b       	std	Y+16, r25	; 0x10
    338e:	8f 87       	std	Y+15, r24	; 0x0f
    3390:	8f 85       	ldd	r24, Y+15	; 0x0f
    3392:	98 89       	ldd	r25, Y+16	; 0x10
    3394:	01 97       	sbiw	r24, 0x01	; 1
    3396:	f1 f7       	brne	.-4      	; 0x3394 <HSSD_DisplayBlink+0x45c>
    3398:	98 8b       	std	Y+16, r25	; 0x10
    339a:	8f 87       	std	Y+15, r24	; 0x0f
		
		_delay_ms(5);
		MDIO_SetPinValue(SSD_CTRL_PORT_1, SSD_1_EN_PIN, DIO_u8PIN_HIGH);
    339c:	80 e0       	ldi	r24, 0x00	; 0
    339e:	63 e0       	ldi	r22, 0x03	; 3
    33a0:	41 e0       	ldi	r20, 0x01	; 1
    33a2:	0e 94 a8 10 	call	0x2150	; 0x2150 <MDIO_SetPinValue>
		MDIO_SetPinValue(SSD_CTRL_PORT_1, SSD_2_EN_PIN, DIO_u8PIN_HIGH);
    33a6:	80 e0       	ldi	r24, 0x00	; 0
    33a8:	62 e0       	ldi	r22, 0x02	; 2
    33aa:	41 e0       	ldi	r20, 0x01	; 1
    33ac:	0e 94 a8 10 	call	0x2150	; 0x2150 <MDIO_SetPinValue>
		MDIO_SetPinValue(SSD_CTRL_PORT_2, SSD_3_EN_PIN, DIO_u8PIN_HIGH);
    33b0:	81 e0       	ldi	r24, 0x01	; 1
    33b2:	65 e0       	ldi	r22, 0x05	; 5
    33b4:	41 e0       	ldi	r20, 0x01	; 1
    33b6:	0e 94 a8 10 	call	0x2150	; 0x2150 <MDIO_SetPinValue>
		MDIO_SetPinValue(SSD_CTRL_PORT_2, SSD_4_EN_PIN, DIO_u8PIN_LOW);
    33ba:	81 e0       	ldi	r24, 0x01	; 1
    33bc:	66 e0       	ldi	r22, 0x06	; 6
    33be:	40 e0       	ldi	r20, 0x00	; 0
    33c0:	0e 94 a8 10 	call	0x2150	; 0x2150 <MDIO_SetPinValue>
		HSSD_WriteData(Local_u8Thousand);
    33c4:	8a ad       	ldd	r24, Y+58	; 0x3a
    33c6:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <HSSD_WriteData>
    33ca:	80 e0       	ldi	r24, 0x00	; 0
    33cc:	90 e0       	ldi	r25, 0x00	; 0
    33ce:	a0 ea       	ldi	r26, 0xA0	; 160
    33d0:	b0 e4       	ldi	r27, 0x40	; 64
    33d2:	8b 87       	std	Y+11, r24	; 0x0b
    33d4:	9c 87       	std	Y+12, r25	; 0x0c
    33d6:	ad 87       	std	Y+13, r26	; 0x0d
    33d8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33da:	6b 85       	ldd	r22, Y+11	; 0x0b
    33dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    33de:	8d 85       	ldd	r24, Y+13	; 0x0d
    33e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    33e2:	20 e0       	ldi	r18, 0x00	; 0
    33e4:	30 e0       	ldi	r19, 0x00	; 0
    33e6:	4a e7       	ldi	r20, 0x7A	; 122
    33e8:	55 e4       	ldi	r21, 0x45	; 69
    33ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33ee:	dc 01       	movw	r26, r24
    33f0:	cb 01       	movw	r24, r22
    33f2:	8f 83       	std	Y+7, r24	; 0x07
    33f4:	98 87       	std	Y+8, r25	; 0x08
    33f6:	a9 87       	std	Y+9, r26	; 0x09
    33f8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    33fa:	6f 81       	ldd	r22, Y+7	; 0x07
    33fc:	78 85       	ldd	r23, Y+8	; 0x08
    33fe:	89 85       	ldd	r24, Y+9	; 0x09
    3400:	9a 85       	ldd	r25, Y+10	; 0x0a
    3402:	20 e0       	ldi	r18, 0x00	; 0
    3404:	30 e0       	ldi	r19, 0x00	; 0
    3406:	40 e8       	ldi	r20, 0x80	; 128
    3408:	5f e3       	ldi	r21, 0x3F	; 63
    340a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    340e:	88 23       	and	r24, r24
    3410:	2c f4       	brge	.+10     	; 0x341c <HSSD_DisplayBlink+0x4e4>
		__ticks = 1;
    3412:	81 e0       	ldi	r24, 0x01	; 1
    3414:	90 e0       	ldi	r25, 0x00	; 0
    3416:	9e 83       	std	Y+6, r25	; 0x06
    3418:	8d 83       	std	Y+5, r24	; 0x05
    341a:	3f c0       	rjmp	.+126    	; 0x349a <HSSD_DisplayBlink+0x562>
	else if (__tmp > 65535)
    341c:	6f 81       	ldd	r22, Y+7	; 0x07
    341e:	78 85       	ldd	r23, Y+8	; 0x08
    3420:	89 85       	ldd	r24, Y+9	; 0x09
    3422:	9a 85       	ldd	r25, Y+10	; 0x0a
    3424:	20 e0       	ldi	r18, 0x00	; 0
    3426:	3f ef       	ldi	r19, 0xFF	; 255
    3428:	4f e7       	ldi	r20, 0x7F	; 127
    342a:	57 e4       	ldi	r21, 0x47	; 71
    342c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3430:	18 16       	cp	r1, r24
    3432:	4c f5       	brge	.+82     	; 0x3486 <HSSD_DisplayBlink+0x54e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3434:	6b 85       	ldd	r22, Y+11	; 0x0b
    3436:	7c 85       	ldd	r23, Y+12	; 0x0c
    3438:	8d 85       	ldd	r24, Y+13	; 0x0d
    343a:	9e 85       	ldd	r25, Y+14	; 0x0e
    343c:	20 e0       	ldi	r18, 0x00	; 0
    343e:	30 e0       	ldi	r19, 0x00	; 0
    3440:	40 e2       	ldi	r20, 0x20	; 32
    3442:	51 e4       	ldi	r21, 0x41	; 65
    3444:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3448:	dc 01       	movw	r26, r24
    344a:	cb 01       	movw	r24, r22
    344c:	bc 01       	movw	r22, r24
    344e:	cd 01       	movw	r24, r26
    3450:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3454:	dc 01       	movw	r26, r24
    3456:	cb 01       	movw	r24, r22
    3458:	9e 83       	std	Y+6, r25	; 0x06
    345a:	8d 83       	std	Y+5, r24	; 0x05
    345c:	0f c0       	rjmp	.+30     	; 0x347c <HSSD_DisplayBlink+0x544>
    345e:	80 e9       	ldi	r24, 0x90	; 144
    3460:	91 e0       	ldi	r25, 0x01	; 1
    3462:	9c 83       	std	Y+4, r25	; 0x04
    3464:	8b 83       	std	Y+3, r24	; 0x03
    3466:	8b 81       	ldd	r24, Y+3	; 0x03
    3468:	9c 81       	ldd	r25, Y+4	; 0x04
    346a:	01 97       	sbiw	r24, 0x01	; 1
    346c:	f1 f7       	brne	.-4      	; 0x346a <HSSD_DisplayBlink+0x532>
    346e:	9c 83       	std	Y+4, r25	; 0x04
    3470:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3472:	8d 81       	ldd	r24, Y+5	; 0x05
    3474:	9e 81       	ldd	r25, Y+6	; 0x06
    3476:	01 97       	sbiw	r24, 0x01	; 1
    3478:	9e 83       	std	Y+6, r25	; 0x06
    347a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    347c:	8d 81       	ldd	r24, Y+5	; 0x05
    347e:	9e 81       	ldd	r25, Y+6	; 0x06
    3480:	00 97       	sbiw	r24, 0x00	; 0
    3482:	69 f7       	brne	.-38     	; 0x345e <HSSD_DisplayBlink+0x526>
    3484:	14 c0       	rjmp	.+40     	; 0x34ae <HSSD_DisplayBlink+0x576>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3486:	6f 81       	ldd	r22, Y+7	; 0x07
    3488:	78 85       	ldd	r23, Y+8	; 0x08
    348a:	89 85       	ldd	r24, Y+9	; 0x09
    348c:	9a 85       	ldd	r25, Y+10	; 0x0a
    348e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3492:	dc 01       	movw	r26, r24
    3494:	cb 01       	movw	r24, r22
    3496:	9e 83       	std	Y+6, r25	; 0x06
    3498:	8d 83       	std	Y+5, r24	; 0x05
    349a:	8d 81       	ldd	r24, Y+5	; 0x05
    349c:	9e 81       	ldd	r25, Y+6	; 0x06
    349e:	9a 83       	std	Y+2, r25	; 0x02
    34a0:	89 83       	std	Y+1, r24	; 0x01
    34a2:	89 81       	ldd	r24, Y+1	; 0x01
    34a4:	9a 81       	ldd	r25, Y+2	; 0x02
    34a6:	01 97       	sbiw	r24, 0x01	; 1
    34a8:	f1 f7       	brne	.-4      	; 0x34a6 <HSSD_DisplayBlink+0x56e>
    34aa:	9a 83       	std	Y+2, r25	; 0x02
    34ac:	89 83       	std	Y+1, r24	; 0x01
		
		_delay_ms(5);
		MDIO_SetPinValue(SSD_CTRL_PORT_1, SSD_1_EN_PIN, DIO_u8PIN_HIGH);
    34ae:	80 e0       	ldi	r24, 0x00	; 0
    34b0:	63 e0       	ldi	r22, 0x03	; 3
    34b2:	41 e0       	ldi	r20, 0x01	; 1
    34b4:	0e 94 a8 10 	call	0x2150	; 0x2150 <MDIO_SetPinValue>
		MDIO_SetPinValue(SSD_CTRL_PORT_1, SSD_2_EN_PIN, DIO_u8PIN_HIGH);
    34b8:	80 e0       	ldi	r24, 0x00	; 0
    34ba:	62 e0       	ldi	r22, 0x02	; 2
    34bc:	41 e0       	ldi	r20, 0x01	; 1
    34be:	0e 94 a8 10 	call	0x2150	; 0x2150 <MDIO_SetPinValue>
		MDIO_SetPinValue(SSD_CTRL_PORT_2, SSD_3_EN_PIN, DIO_u8PIN_HIGH);
    34c2:	81 e0       	ldi	r24, 0x01	; 1
    34c4:	65 e0       	ldi	r22, 0x05	; 5
    34c6:	41 e0       	ldi	r20, 0x01	; 1
    34c8:	0e 94 a8 10 	call	0x2150	; 0x2150 <MDIO_SetPinValue>
		MDIO_SetPinValue(SSD_CTRL_PORT_2, SSD_4_EN_PIN, DIO_u8PIN_HIGH);
    34cc:	81 e0       	ldi	r24, 0x01	; 1
    34ce:	66 e0       	ldi	r22, 0x06	; 6
    34d0:	41 e0       	ldi	r20, 0x01	; 1
    34d2:	0e 94 a8 10 	call	0x2150	; 0x2150 <MDIO_SetPinValue>
	u8 Local_u8Hundred = Copy_u8Num%10;
	Copy_u8Num/=10;
	u8 Local_u8Thousand = Copy_u8Num;

	u8 Local_u8BlinkCounter = 0;
	for (Local_u8BlinkCounter = 0; Local_u8BlinkCounter<60; Local_u8BlinkCounter++)
    34d6:	89 ad       	ldd	r24, Y+57	; 0x39
    34d8:	8f 5f       	subi	r24, 0xFF	; 255
    34da:	89 af       	std	Y+57, r24	; 0x39
    34dc:	89 ad       	ldd	r24, Y+57	; 0x39
    34de:	8c 33       	cpi	r24, 0x3C	; 60
    34e0:	08 f4       	brcc	.+2      	; 0x34e4 <HSSD_DisplayBlink+0x5ac>
    34e2:	c1 cd       	rjmp	.-1150   	; 0x3066 <HSSD_DisplayBlink+0x12e>
		MDIO_SetPinValue(SSD_CTRL_PORT_2, SSD_3_EN_PIN, DIO_u8PIN_HIGH);
		MDIO_SetPinValue(SSD_CTRL_PORT_2, SSD_4_EN_PIN, DIO_u8PIN_HIGH);
		
	}
	
	return Local_ErrorState;
    34e4:	8e ad       	ldd	r24, Y+62	; 0x3e
}
    34e6:	ce 5b       	subi	r28, 0xBE	; 190
    34e8:	df 4f       	sbci	r29, 0xFF	; 255
    34ea:	0f b6       	in	r0, 0x3f	; 63
    34ec:	f8 94       	cli
    34ee:	de bf       	out	0x3e, r29	; 62
    34f0:	0f be       	out	0x3f, r0	; 63
    34f2:	cd bf       	out	0x3d, r28	; 61
    34f4:	cf 91       	pop	r28
    34f6:	df 91       	pop	r29
    34f8:	1f 91       	pop	r17
    34fa:	0f 91       	pop	r16
    34fc:	08 95       	ret

000034fe <PB_voidInit>:
#include "HPB_private.h"
#include "HPB_config.h"
#include "HPB_interface.h"

void PB_voidInit(const PB_t* ptr_PB)
{
    34fe:	df 93       	push	r29
    3500:	cf 93       	push	r28
    3502:	00 d0       	rcall	.+0      	; 0x3504 <PB_voidInit+0x6>
    3504:	cd b7       	in	r28, 0x3d	; 61
    3506:	de b7       	in	r29, 0x3e	; 62
    3508:	9a 83       	std	Y+2, r25	; 0x02
    350a:	89 83       	std	Y+1, r24	; 0x01
	MDIO_SetPinDirection(ptr_PB->PB_port, ptr_PB->PB_Pin, DIO_u8PIN_INPUT);
    350c:	e9 81       	ldd	r30, Y+1	; 0x01
    350e:	fa 81       	ldd	r31, Y+2	; 0x02
    3510:	80 81       	ld	r24, Z
    3512:	e9 81       	ldd	r30, Y+1	; 0x01
    3514:	fa 81       	ldd	r31, Y+2	; 0x02
    3516:	91 81       	ldd	r25, Z+1	; 0x01
    3518:	69 2f       	mov	r22, r25
    351a:	40 e0       	ldi	r20, 0x00	; 0
    351c:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <MDIO_SetPinDirection>


}
    3520:	0f 90       	pop	r0
    3522:	0f 90       	pop	r0
    3524:	cf 91       	pop	r28
    3526:	df 91       	pop	r29
    3528:	08 95       	ret

0000352a <PB_voidReadState>:
	}

}
#endif
void PB_voidReadState(const PB_t* ptr_PB, State_t* pstate)
{
    352a:	df 93       	push	r29
    352c:	cf 93       	push	r28
    352e:	cd b7       	in	r28, 0x3d	; 61
    3530:	de b7       	in	r29, 0x3e	; 62
    3532:	63 97       	sbiw	r28, 0x13	; 19
    3534:	0f b6       	in	r0, 0x3f	; 63
    3536:	f8 94       	cli
    3538:	de bf       	out	0x3e, r29	; 62
    353a:	0f be       	out	0x3f, r0	; 63
    353c:	cd bf       	out	0x3d, r28	; 61
    353e:	99 8b       	std	Y+17, r25	; 0x11
    3540:	88 8b       	std	Y+16, r24	; 0x10
    3542:	7b 8b       	std	Y+19, r23	; 0x13
    3544:	6a 8b       	std	Y+18, r22	; 0x12
	static State_t copy_u8state = NOT_PRESSED;

	u8 copy_u8PinVal;
	MDIO_GetPinValue(ptr_PB->PB_port, ptr_PB->PB_Pin, &copy_u8PinVal);
    3546:	e8 89       	ldd	r30, Y+16	; 0x10
    3548:	f9 89       	ldd	r31, Y+17	; 0x11
    354a:	80 81       	ld	r24, Z
    354c:	e8 89       	ldd	r30, Y+16	; 0x10
    354e:	f9 89       	ldd	r31, Y+17	; 0x11
    3550:	91 81       	ldd	r25, Z+1	; 0x01
    3552:	9e 01       	movw	r18, r28
    3554:	21 5f       	subi	r18, 0xF1	; 241
    3556:	3f 4f       	sbci	r19, 0xFF	; 255
    3558:	69 2f       	mov	r22, r25
    355a:	a9 01       	movw	r20, r18
    355c:	0e 94 02 12 	call	0x2404	; 0x2404 <MDIO_GetPinValue>

	if(copy_u8PinVal == ptr_PB->PB_mode)   // in this case the button is pressed
    3560:	e8 89       	ldd	r30, Y+16	; 0x10
    3562:	f9 89       	ldd	r31, Y+17	; 0x11
    3564:	92 81       	ldd	r25, Z+2	; 0x02
    3566:	8f 85       	ldd	r24, Y+15	; 0x0f
    3568:	98 17       	cp	r25, r24
    356a:	09 f0       	breq	.+2      	; 0x356e <PB_voidReadState+0x44>
    356c:	9f c0       	rjmp	.+318    	; 0x36ac <PB_voidReadState+0x182>
    356e:	80 e0       	ldi	r24, 0x00	; 0
    3570:	90 e0       	ldi	r25, 0x00	; 0
    3572:	a0 ea       	ldi	r26, 0xA0	; 160
    3574:	b1 e4       	ldi	r27, 0x41	; 65
    3576:	8b 87       	std	Y+11, r24	; 0x0b
    3578:	9c 87       	std	Y+12, r25	; 0x0c
    357a:	ad 87       	std	Y+13, r26	; 0x0d
    357c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    357e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3580:	7c 85       	ldd	r23, Y+12	; 0x0c
    3582:	8d 85       	ldd	r24, Y+13	; 0x0d
    3584:	9e 85       	ldd	r25, Y+14	; 0x0e
    3586:	20 e0       	ldi	r18, 0x00	; 0
    3588:	30 e0       	ldi	r19, 0x00	; 0
    358a:	4a e7       	ldi	r20, 0x7A	; 122
    358c:	55 e4       	ldi	r21, 0x45	; 69
    358e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3592:	dc 01       	movw	r26, r24
    3594:	cb 01       	movw	r24, r22
    3596:	8f 83       	std	Y+7, r24	; 0x07
    3598:	98 87       	std	Y+8, r25	; 0x08
    359a:	a9 87       	std	Y+9, r26	; 0x09
    359c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    359e:	6f 81       	ldd	r22, Y+7	; 0x07
    35a0:	78 85       	ldd	r23, Y+8	; 0x08
    35a2:	89 85       	ldd	r24, Y+9	; 0x09
    35a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    35a6:	20 e0       	ldi	r18, 0x00	; 0
    35a8:	30 e0       	ldi	r19, 0x00	; 0
    35aa:	40 e8       	ldi	r20, 0x80	; 128
    35ac:	5f e3       	ldi	r21, 0x3F	; 63
    35ae:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    35b2:	88 23       	and	r24, r24
    35b4:	2c f4       	brge	.+10     	; 0x35c0 <PB_voidReadState+0x96>
		__ticks = 1;
    35b6:	81 e0       	ldi	r24, 0x01	; 1
    35b8:	90 e0       	ldi	r25, 0x00	; 0
    35ba:	9e 83       	std	Y+6, r25	; 0x06
    35bc:	8d 83       	std	Y+5, r24	; 0x05
    35be:	3f c0       	rjmp	.+126    	; 0x363e <PB_voidReadState+0x114>
	else if (__tmp > 65535)
    35c0:	6f 81       	ldd	r22, Y+7	; 0x07
    35c2:	78 85       	ldd	r23, Y+8	; 0x08
    35c4:	89 85       	ldd	r24, Y+9	; 0x09
    35c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    35c8:	20 e0       	ldi	r18, 0x00	; 0
    35ca:	3f ef       	ldi	r19, 0xFF	; 255
    35cc:	4f e7       	ldi	r20, 0x7F	; 127
    35ce:	57 e4       	ldi	r21, 0x47	; 71
    35d0:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    35d4:	18 16       	cp	r1, r24
    35d6:	4c f5       	brge	.+82     	; 0x362a <PB_voidReadState+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    35da:	7c 85       	ldd	r23, Y+12	; 0x0c
    35dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    35de:	9e 85       	ldd	r25, Y+14	; 0x0e
    35e0:	20 e0       	ldi	r18, 0x00	; 0
    35e2:	30 e0       	ldi	r19, 0x00	; 0
    35e4:	40 e2       	ldi	r20, 0x20	; 32
    35e6:	51 e4       	ldi	r21, 0x41	; 65
    35e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35ec:	dc 01       	movw	r26, r24
    35ee:	cb 01       	movw	r24, r22
    35f0:	bc 01       	movw	r22, r24
    35f2:	cd 01       	movw	r24, r26
    35f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35f8:	dc 01       	movw	r26, r24
    35fa:	cb 01       	movw	r24, r22
    35fc:	9e 83       	std	Y+6, r25	; 0x06
    35fe:	8d 83       	std	Y+5, r24	; 0x05
    3600:	0f c0       	rjmp	.+30     	; 0x3620 <PB_voidReadState+0xf6>
    3602:	80 e9       	ldi	r24, 0x90	; 144
    3604:	91 e0       	ldi	r25, 0x01	; 1
    3606:	9c 83       	std	Y+4, r25	; 0x04
    3608:	8b 83       	std	Y+3, r24	; 0x03
    360a:	8b 81       	ldd	r24, Y+3	; 0x03
    360c:	9c 81       	ldd	r25, Y+4	; 0x04
    360e:	01 97       	sbiw	r24, 0x01	; 1
    3610:	f1 f7       	brne	.-4      	; 0x360e <PB_voidReadState+0xe4>
    3612:	9c 83       	std	Y+4, r25	; 0x04
    3614:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3616:	8d 81       	ldd	r24, Y+5	; 0x05
    3618:	9e 81       	ldd	r25, Y+6	; 0x06
    361a:	01 97       	sbiw	r24, 0x01	; 1
    361c:	9e 83       	std	Y+6, r25	; 0x06
    361e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3620:	8d 81       	ldd	r24, Y+5	; 0x05
    3622:	9e 81       	ldd	r25, Y+6	; 0x06
    3624:	00 97       	sbiw	r24, 0x00	; 0
    3626:	69 f7       	brne	.-38     	; 0x3602 <PB_voidReadState+0xd8>
    3628:	14 c0       	rjmp	.+40     	; 0x3652 <PB_voidReadState+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    362a:	6f 81       	ldd	r22, Y+7	; 0x07
    362c:	78 85       	ldd	r23, Y+8	; 0x08
    362e:	89 85       	ldd	r24, Y+9	; 0x09
    3630:	9a 85       	ldd	r25, Y+10	; 0x0a
    3632:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3636:	dc 01       	movw	r26, r24
    3638:	cb 01       	movw	r24, r22
    363a:	9e 83       	std	Y+6, r25	; 0x06
    363c:	8d 83       	std	Y+5, r24	; 0x05
    363e:	8d 81       	ldd	r24, Y+5	; 0x05
    3640:	9e 81       	ldd	r25, Y+6	; 0x06
    3642:	9a 83       	std	Y+2, r25	; 0x02
    3644:	89 83       	std	Y+1, r24	; 0x01
    3646:	89 81       	ldd	r24, Y+1	; 0x01
    3648:	9a 81       	ldd	r25, Y+2	; 0x02
    364a:	01 97       	sbiw	r24, 0x01	; 1
    364c:	f1 f7       	brne	.-4      	; 0x364a <PB_voidReadState+0x120>
    364e:	9a 83       	std	Y+2, r25	; 0x02
    3650:	89 83       	std	Y+1, r24	; 0x01
	{
		_delay_ms(20);
		MDIO_GetPinValue(ptr_PB->PB_port, ptr_PB->PB_Pin, &copy_u8PinVal);
    3652:	e8 89       	ldd	r30, Y+16	; 0x10
    3654:	f9 89       	ldd	r31, Y+17	; 0x11
    3656:	80 81       	ld	r24, Z
    3658:	e8 89       	ldd	r30, Y+16	; 0x10
    365a:	f9 89       	ldd	r31, Y+17	; 0x11
    365c:	91 81       	ldd	r25, Z+1	; 0x01
    365e:	9e 01       	movw	r18, r28
    3660:	21 5f       	subi	r18, 0xF1	; 241
    3662:	3f 4f       	sbci	r19, 0xFF	; 255
    3664:	69 2f       	mov	r22, r25
    3666:	a9 01       	movw	r20, r18
    3668:	0e 94 02 12 	call	0x2404	; 0x2404 <MDIO_GetPinValue>
		if(copy_u8PinVal == ptr_PB->PB_mode)
    366c:	e8 89       	ldd	r30, Y+16	; 0x10
    366e:	f9 89       	ldd	r31, Y+17	; 0x11
    3670:	92 81       	ldd	r25, Z+2	; 0x02
    3672:	8f 85       	ldd	r24, Y+15	; 0x0f
    3674:	98 17       	cp	r25, r24
    3676:	a1 f4       	brne	.+40     	; 0x36a0 <PB_voidReadState+0x176>
		{
			// check button previous state
			if(copy_u8state == NOT_PRESSED) // 1st press
    3678:	80 91 f0 01 	lds	r24, 0x01F0
    367c:	88 23       	and	r24, r24
    367e:	41 f4       	brne	.+16     	; 0x3690 <PB_voidReadState+0x166>
			{
				copy_u8state = PRESSED;
    3680:	81 e0       	ldi	r24, 0x01	; 1
    3682:	80 93 f0 01 	sts	0x01F0, r24
				* pstate = PRESSED;
    3686:	ea 89       	ldd	r30, Y+18	; 0x12
    3688:	fb 89       	ldd	r31, Y+19	; 0x13
    368a:	81 e0       	ldi	r24, 0x01	; 1
    368c:	80 83       	st	Z, r24
    368e:	13 c0       	rjmp	.+38     	; 0x36b6 <PB_voidReadState+0x18c>

			}
			else if(copy_u8state == PRESSED)// trapped (long press)
    3690:	80 91 f0 01 	lds	r24, 0x01F0
    3694:	81 30       	cpi	r24, 0x01	; 1
    3696:	79 f4       	brne	.+30     	; 0x36b6 <PB_voidReadState+0x18c>
			{
				* pstate = NOT_PRESSED;
    3698:	ea 89       	ldd	r30, Y+18	; 0x12
    369a:	fb 89       	ldd	r31, Y+19	; 0x13
    369c:	10 82       	st	Z, r1
    369e:	0b c0       	rjmp	.+22     	; 0x36b6 <PB_voidReadState+0x18c>
			{
				//nothing
			}
		}// 2nd read after delay
		else {//Noise
			* pstate = NOT_PRESSED;
    36a0:	ea 89       	ldd	r30, Y+18	; 0x12
    36a2:	fb 89       	ldd	r31, Y+19	; 0x13
    36a4:	10 82       	st	Z, r1
			copy_u8state = NOT_PRESSED;
    36a6:	10 92 f0 01 	sts	0x01F0, r1
    36aa:	05 c0       	rjmp	.+10     	; 0x36b6 <PB_voidReadState+0x18c>
		}

	}// 1st read befor delay
	else
	{
		* pstate = NOT_PRESSED;
    36ac:	ea 89       	ldd	r30, Y+18	; 0x12
    36ae:	fb 89       	ldd	r31, Y+19	; 0x13
    36b0:	10 82       	st	Z, r1
		copy_u8state = NOT_PRESSED;
    36b2:	10 92 f0 01 	sts	0x01F0, r1
	}

}
    36b6:	63 96       	adiw	r28, 0x13	; 19
    36b8:	0f b6       	in	r0, 0x3f	; 63
    36ba:	f8 94       	cli
    36bc:	de bf       	out	0x3e, r29	; 62
    36be:	0f be       	out	0x3f, r0	; 63
    36c0:	cd bf       	out	0x3d, r28	; 61
    36c2:	cf 91       	pop	r28
    36c4:	df 91       	pop	r29
    36c6:	08 95       	ret

000036c8 <HLED_voidInit>:
#include "HLED_private.h"
#include "HLED_config.h"
#include "HLED_interface.h"

void HLED_voidInit(Led_t copy_ledId)
{
    36c8:	df 93       	push	r29
    36ca:	cf 93       	push	r28
    36cc:	00 d0       	rcall	.+0      	; 0x36ce <HLED_voidInit+0x6>
    36ce:	0f 92       	push	r0
    36d0:	cd b7       	in	r28, 0x3d	; 61
    36d2:	de b7       	in	r29, 0x3e	; 62
    36d4:	89 83       	std	Y+1, r24	; 0x01

	switch(copy_ledId){
    36d6:	89 81       	ldd	r24, Y+1	; 0x01
    36d8:	28 2f       	mov	r18, r24
    36da:	30 e0       	ldi	r19, 0x00	; 0
    36dc:	3b 83       	std	Y+3, r19	; 0x03
    36de:	2a 83       	std	Y+2, r18	; 0x02
    36e0:	8a 81       	ldd	r24, Y+2	; 0x02
    36e2:	9b 81       	ldd	r25, Y+3	; 0x03
    36e4:	81 30       	cpi	r24, 0x01	; 1
    36e6:	91 05       	cpc	r25, r1
    36e8:	d9 f0       	breq	.+54     	; 0x3720 <HLED_voidInit+0x58>
    36ea:	2a 81       	ldd	r18, Y+2	; 0x02
    36ec:	3b 81       	ldd	r19, Y+3	; 0x03
    36ee:	22 30       	cpi	r18, 0x02	; 2
    36f0:	31 05       	cpc	r19, r1
    36f2:	2c f4       	brge	.+10     	; 0x36fe <HLED_voidInit+0x36>
    36f4:	8a 81       	ldd	r24, Y+2	; 0x02
    36f6:	9b 81       	ldd	r25, Y+3	; 0x03
    36f8:	00 97       	sbiw	r24, 0x00	; 0
    36fa:	61 f0       	breq	.+24     	; 0x3714 <HLED_voidInit+0x4c>
    36fc:	22 c0       	rjmp	.+68     	; 0x3742 <HLED_voidInit+0x7a>
    36fe:	2a 81       	ldd	r18, Y+2	; 0x02
    3700:	3b 81       	ldd	r19, Y+3	; 0x03
    3702:	22 30       	cpi	r18, 0x02	; 2
    3704:	31 05       	cpc	r19, r1
    3706:	91 f0       	breq	.+36     	; 0x372c <HLED_voidInit+0x64>
    3708:	8a 81       	ldd	r24, Y+2	; 0x02
    370a:	9b 81       	ldd	r25, Y+3	; 0x03
    370c:	83 30       	cpi	r24, 0x03	; 3
    370e:	91 05       	cpc	r25, r1
    3710:	99 f0       	breq	.+38     	; 0x3738 <HLED_voidInit+0x70>
    3712:	17 c0       	rjmp	.+46     	; 0x3742 <HLED_voidInit+0x7a>
	case LED_YELLOW:
		MDIO_SetPinDirection (LED_YELLOW_PORT, LED_YELLOW_PIN, DIO_u8PIN_OUTPUT);
    3714:	80 e0       	ldi	r24, 0x00	; 0
    3716:	66 e0       	ldi	r22, 0x06	; 6
    3718:	41 e0       	ldi	r20, 0x01	; 1
    371a:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <MDIO_SetPinDirection>
    371e:	11 c0       	rjmp	.+34     	; 0x3742 <HLED_voidInit+0x7a>
		break;
	case LED_GREEN:
		MDIO_SetPinDirection (LED_GREEN_PORT, LED_GREEN_PIN, DIO_u8PIN_OUTPUT);
    3720:	80 e0       	ldi	r24, 0x00	; 0
    3722:	64 e0       	ldi	r22, 0x04	; 4
    3724:	41 e0       	ldi	r20, 0x01	; 1
    3726:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <MDIO_SetPinDirection>
    372a:	0b c0       	rjmp	.+22     	; 0x3742 <HLED_voidInit+0x7a>
		break;
	case LED_RED:
		MDIO_SetPinDirection (LED_RED_PORT, LED_RED_PIN, DIO_u8PIN_OUTPUT);
    372c:	81 e0       	ldi	r24, 0x01	; 1
    372e:	67 e0       	ldi	r22, 0x07	; 7
    3730:	41 e0       	ldi	r20, 0x01	; 1
    3732:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <MDIO_SetPinDirection>
    3736:	05 c0       	rjmp	.+10     	; 0x3742 <HLED_voidInit+0x7a>

		break;
	case LED_BLUE:
		MDIO_SetPinDirection (LED_BLUE_PORT, LED_BLUE_PIN, DIO_u8PIN_OUTPUT);
    3738:	80 e0       	ldi	r24, 0x00	; 0
    373a:	65 e0       	ldi	r22, 0x05	; 5
    373c:	41 e0       	ldi	r20, 0x01	; 1
    373e:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <MDIO_SetPinDirection>


	}


}
    3742:	0f 90       	pop	r0
    3744:	0f 90       	pop	r0
    3746:	0f 90       	pop	r0
    3748:	cf 91       	pop	r28
    374a:	df 91       	pop	r29
    374c:	08 95       	ret

0000374e <HLED_voidTurnOn>:
void HLED_voidTurnOn(Led_t copy_ledId)
{
    374e:	df 93       	push	r29
    3750:	cf 93       	push	r28
    3752:	00 d0       	rcall	.+0      	; 0x3754 <HLED_voidTurnOn+0x6>
    3754:	0f 92       	push	r0
    3756:	cd b7       	in	r28, 0x3d	; 61
    3758:	de b7       	in	r29, 0x3e	; 62
    375a:	89 83       	std	Y+1, r24	; 0x01
	switch(copy_ledId){
    375c:	89 81       	ldd	r24, Y+1	; 0x01
    375e:	28 2f       	mov	r18, r24
    3760:	30 e0       	ldi	r19, 0x00	; 0
    3762:	3b 83       	std	Y+3, r19	; 0x03
    3764:	2a 83       	std	Y+2, r18	; 0x02
    3766:	8a 81       	ldd	r24, Y+2	; 0x02
    3768:	9b 81       	ldd	r25, Y+3	; 0x03
    376a:	81 30       	cpi	r24, 0x01	; 1
    376c:	91 05       	cpc	r25, r1
    376e:	d9 f0       	breq	.+54     	; 0x37a6 <HLED_voidTurnOn+0x58>
    3770:	2a 81       	ldd	r18, Y+2	; 0x02
    3772:	3b 81       	ldd	r19, Y+3	; 0x03
    3774:	22 30       	cpi	r18, 0x02	; 2
    3776:	31 05       	cpc	r19, r1
    3778:	2c f4       	brge	.+10     	; 0x3784 <HLED_voidTurnOn+0x36>
    377a:	8a 81       	ldd	r24, Y+2	; 0x02
    377c:	9b 81       	ldd	r25, Y+3	; 0x03
    377e:	00 97       	sbiw	r24, 0x00	; 0
    3780:	61 f0       	breq	.+24     	; 0x379a <HLED_voidTurnOn+0x4c>
    3782:	22 c0       	rjmp	.+68     	; 0x37c8 <HLED_voidTurnOn+0x7a>
    3784:	2a 81       	ldd	r18, Y+2	; 0x02
    3786:	3b 81       	ldd	r19, Y+3	; 0x03
    3788:	22 30       	cpi	r18, 0x02	; 2
    378a:	31 05       	cpc	r19, r1
    378c:	91 f0       	breq	.+36     	; 0x37b2 <HLED_voidTurnOn+0x64>
    378e:	8a 81       	ldd	r24, Y+2	; 0x02
    3790:	9b 81       	ldd	r25, Y+3	; 0x03
    3792:	83 30       	cpi	r24, 0x03	; 3
    3794:	91 05       	cpc	r25, r1
    3796:	99 f0       	breq	.+38     	; 0x37be <HLED_voidTurnOn+0x70>
    3798:	17 c0       	rjmp	.+46     	; 0x37c8 <HLED_voidTurnOn+0x7a>
		case LED_YELLOW:
#if LED_YELLOW_DIR == LED_DIR_FORWARD
			MDIO_SetPinValue (LED_YELLOW_PORT, LED_YELLOW_PIN, DIO_u8PIN_HIGH);
    379a:	80 e0       	ldi	r24, 0x00	; 0
    379c:	66 e0       	ldi	r22, 0x06	; 6
    379e:	41 e0       	ldi	r20, 0x01	; 1
    37a0:	0e 94 a8 10 	call	0x2150	; 0x2150 <MDIO_SetPinValue>
    37a4:	11 c0       	rjmp	.+34     	; 0x37c8 <HLED_voidTurnOn+0x7a>
#endif
			break;

		case LED_GREEN:
#if LED_GREEN_DIR == LED_DIR_FORWARD
			MDIO_SetPinValue (LED_GREEN_PORT, LED_GREEN_PIN, DIO_u8PIN_HIGH);
    37a6:	80 e0       	ldi	r24, 0x00	; 0
    37a8:	64 e0       	ldi	r22, 0x04	; 4
    37aa:	41 e0       	ldi	r20, 0x01	; 1
    37ac:	0e 94 a8 10 	call	0x2150	; 0x2150 <MDIO_SetPinValue>
    37b0:	0b c0       	rjmp	.+22     	; 0x37c8 <HLED_voidTurnOn+0x7a>
#endif
			break;

		case LED_RED:
#if LED_RED_DIR == LED_DIR_FORWARD
			MDIO_SetPinValue (LED_RED_PORT, LED_RED_PIN, DIO_u8PIN_HIGH);
    37b2:	81 e0       	ldi	r24, 0x01	; 1
    37b4:	67 e0       	ldi	r22, 0x07	; 7
    37b6:	41 e0       	ldi	r20, 0x01	; 1
    37b8:	0e 94 a8 10 	call	0x2150	; 0x2150 <MDIO_SetPinValue>
    37bc:	05 c0       	rjmp	.+10     	; 0x37c8 <HLED_voidTurnOn+0x7a>

#endif
			break;
		case LED_BLUE:
#if LED_BLUE_DIR == LED_DIR_FORWARD
			MDIO_SetPinValue (LED_BLUE_PORT, LED_BLUE_PIN, DIO_u8PIN_HIGH);
    37be:	80 e0       	ldi	r24, 0x00	; 0
    37c0:	65 e0       	ldi	r22, 0x05	; 5
    37c2:	41 e0       	ldi	r20, 0x01	; 1
    37c4:	0e 94 a8 10 	call	0x2150	; 0x2150 <MDIO_SetPinValue>
			break;

	}


}
    37c8:	0f 90       	pop	r0
    37ca:	0f 90       	pop	r0
    37cc:	0f 90       	pop	r0
    37ce:	cf 91       	pop	r28
    37d0:	df 91       	pop	r29
    37d2:	08 95       	ret

000037d4 <HLED_voidTurnOff>:
void HLED_voidTurnOff(Led_t copy_ledId)
{
    37d4:	df 93       	push	r29
    37d6:	cf 93       	push	r28
    37d8:	00 d0       	rcall	.+0      	; 0x37da <HLED_voidTurnOff+0x6>
    37da:	0f 92       	push	r0
    37dc:	cd b7       	in	r28, 0x3d	; 61
    37de:	de b7       	in	r29, 0x3e	; 62
    37e0:	89 83       	std	Y+1, r24	; 0x01
	switch(copy_ledId){
    37e2:	89 81       	ldd	r24, Y+1	; 0x01
    37e4:	28 2f       	mov	r18, r24
    37e6:	30 e0       	ldi	r19, 0x00	; 0
    37e8:	3b 83       	std	Y+3, r19	; 0x03
    37ea:	2a 83       	std	Y+2, r18	; 0x02
    37ec:	8a 81       	ldd	r24, Y+2	; 0x02
    37ee:	9b 81       	ldd	r25, Y+3	; 0x03
    37f0:	81 30       	cpi	r24, 0x01	; 1
    37f2:	91 05       	cpc	r25, r1
    37f4:	d9 f0       	breq	.+54     	; 0x382c <HLED_voidTurnOff+0x58>
    37f6:	2a 81       	ldd	r18, Y+2	; 0x02
    37f8:	3b 81       	ldd	r19, Y+3	; 0x03
    37fa:	22 30       	cpi	r18, 0x02	; 2
    37fc:	31 05       	cpc	r19, r1
    37fe:	2c f4       	brge	.+10     	; 0x380a <HLED_voidTurnOff+0x36>
    3800:	8a 81       	ldd	r24, Y+2	; 0x02
    3802:	9b 81       	ldd	r25, Y+3	; 0x03
    3804:	00 97       	sbiw	r24, 0x00	; 0
    3806:	61 f0       	breq	.+24     	; 0x3820 <HLED_voidTurnOff+0x4c>
    3808:	22 c0       	rjmp	.+68     	; 0x384e <HLED_voidTurnOff+0x7a>
    380a:	2a 81       	ldd	r18, Y+2	; 0x02
    380c:	3b 81       	ldd	r19, Y+3	; 0x03
    380e:	22 30       	cpi	r18, 0x02	; 2
    3810:	31 05       	cpc	r19, r1
    3812:	91 f0       	breq	.+36     	; 0x3838 <HLED_voidTurnOff+0x64>
    3814:	8a 81       	ldd	r24, Y+2	; 0x02
    3816:	9b 81       	ldd	r25, Y+3	; 0x03
    3818:	83 30       	cpi	r24, 0x03	; 3
    381a:	91 05       	cpc	r25, r1
    381c:	99 f0       	breq	.+38     	; 0x3844 <HLED_voidTurnOff+0x70>
    381e:	17 c0       	rjmp	.+46     	; 0x384e <HLED_voidTurnOff+0x7a>
		case LED_YELLOW:
#if LED_YELLOW_DIR == LED_DIR_FORWARD
			MDIO_SetPinValue (LED_YELLOW_PORT, LED_YELLOW_PIN, DIO_u8PIN_LOW);
    3820:	80 e0       	ldi	r24, 0x00	; 0
    3822:	66 e0       	ldi	r22, 0x06	; 6
    3824:	40 e0       	ldi	r20, 0x00	; 0
    3826:	0e 94 a8 10 	call	0x2150	; 0x2150 <MDIO_SetPinValue>
    382a:	11 c0       	rjmp	.+34     	; 0x384e <HLED_voidTurnOff+0x7a>
#endif
			break;

		case LED_GREEN:
#if LED_GREEN_DIR == LED_DIR_FORWARD
			MDIO_SetPinValue (LED_GREEN_PORT, LED_GREEN_PIN, DIO_u8PIN_LOW);
    382c:	80 e0       	ldi	r24, 0x00	; 0
    382e:	64 e0       	ldi	r22, 0x04	; 4
    3830:	40 e0       	ldi	r20, 0x00	; 0
    3832:	0e 94 a8 10 	call	0x2150	; 0x2150 <MDIO_SetPinValue>
    3836:	0b c0       	rjmp	.+22     	; 0x384e <HLED_voidTurnOff+0x7a>
#endif
			break;

		case LED_RED:
#if LED_RED_DIR == LED_DIR_FORWARD
			MDIO_SetPinValue (LED_RED_PORT, LED_RED_PIN, DIO_u8PIN_LOW);
    3838:	81 e0       	ldi	r24, 0x01	; 1
    383a:	67 e0       	ldi	r22, 0x07	; 7
    383c:	40 e0       	ldi	r20, 0x00	; 0
    383e:	0e 94 a8 10 	call	0x2150	; 0x2150 <MDIO_SetPinValue>
    3842:	05 c0       	rjmp	.+10     	; 0x384e <HLED_voidTurnOff+0x7a>

#endif
			break;
		case LED_BLUE:
#if LED_BLUE_DIR == LED_DIR_FORWARD
			MDIO_SetPinValue (LED_BLUE_PORT, LED_BLUE_PIN, DIO_u8PIN_LOW);
    3844:	80 e0       	ldi	r24, 0x00	; 0
    3846:	65 e0       	ldi	r22, 0x05	; 5
    3848:	40 e0       	ldi	r20, 0x00	; 0
    384a:	0e 94 a8 10 	call	0x2150	; 0x2150 <MDIO_SetPinValue>
#endif
			break;

	}

}
    384e:	0f 90       	pop	r0
    3850:	0f 90       	pop	r0
    3852:	0f 90       	pop	r0
    3854:	cf 91       	pop	r28
    3856:	df 91       	pop	r29
    3858:	08 95       	ret

0000385a <HLED_voidToggle>:
void HLED_voidToggle(Led_t copy_ledId)
{
    385a:	df 93       	push	r29
    385c:	cf 93       	push	r28
    385e:	00 d0       	rcall	.+0      	; 0x3860 <HLED_voidToggle+0x6>
    3860:	0f 92       	push	r0
    3862:	cd b7       	in	r28, 0x3d	; 61
    3864:	de b7       	in	r29, 0x3e	; 62
    3866:	89 83       	std	Y+1, r24	; 0x01
	switch(copy_ledId){
    3868:	89 81       	ldd	r24, Y+1	; 0x01
    386a:	28 2f       	mov	r18, r24
    386c:	30 e0       	ldi	r19, 0x00	; 0
    386e:	3b 83       	std	Y+3, r19	; 0x03
    3870:	2a 83       	std	Y+2, r18	; 0x02
    3872:	8a 81       	ldd	r24, Y+2	; 0x02
    3874:	9b 81       	ldd	r25, Y+3	; 0x03
    3876:	81 30       	cpi	r24, 0x01	; 1
    3878:	91 05       	cpc	r25, r1
    387a:	d1 f0       	breq	.+52     	; 0x38b0 <HLED_voidToggle+0x56>
    387c:	2a 81       	ldd	r18, Y+2	; 0x02
    387e:	3b 81       	ldd	r19, Y+3	; 0x03
    3880:	22 30       	cpi	r18, 0x02	; 2
    3882:	31 05       	cpc	r19, r1
    3884:	2c f4       	brge	.+10     	; 0x3890 <HLED_voidToggle+0x36>
    3886:	8a 81       	ldd	r24, Y+2	; 0x02
    3888:	9b 81       	ldd	r25, Y+3	; 0x03
    388a:	00 97       	sbiw	r24, 0x00	; 0
    388c:	61 f0       	breq	.+24     	; 0x38a6 <HLED_voidToggle+0x4c>
    388e:	1e c0       	rjmp	.+60     	; 0x38cc <HLED_voidToggle+0x72>
    3890:	2a 81       	ldd	r18, Y+2	; 0x02
    3892:	3b 81       	ldd	r19, Y+3	; 0x03
    3894:	22 30       	cpi	r18, 0x02	; 2
    3896:	31 05       	cpc	r19, r1
    3898:	81 f0       	breq	.+32     	; 0x38ba <HLED_voidToggle+0x60>
    389a:	8a 81       	ldd	r24, Y+2	; 0x02
    389c:	9b 81       	ldd	r25, Y+3	; 0x03
    389e:	83 30       	cpi	r24, 0x03	; 3
    38a0:	91 05       	cpc	r25, r1
    38a2:	81 f0       	breq	.+32     	; 0x38c4 <HLED_voidToggle+0x6a>
    38a4:	13 c0       	rjmp	.+38     	; 0x38cc <HLED_voidToggle+0x72>
		case LED_YELLOW:
#if LED_YELLOW_DIR == LED_DIR_FORWARD
			MDIO_TogglePinValue (LED_YELLOW_PORT, LED_YELLOW_PIN);
    38a6:	80 e0       	ldi	r24, 0x00	; 0
    38a8:	66 e0       	ldi	r22, 0x06	; 6
    38aa:	0e 94 5e 13 	call	0x26bc	; 0x26bc <MDIO_TogglePinValue>
    38ae:	0e c0       	rjmp	.+28     	; 0x38cc <HLED_voidToggle+0x72>
#endif
			break;

		case LED_GREEN:
#if LED_GREEN_DIR == LED_DIR_FORWARD
			MDIO_TogglePinValue (LED_GREEN_PORT, LED_GREEN_PIN);
    38b0:	80 e0       	ldi	r24, 0x00	; 0
    38b2:	64 e0       	ldi	r22, 0x04	; 4
    38b4:	0e 94 5e 13 	call	0x26bc	; 0x26bc <MDIO_TogglePinValue>
    38b8:	09 c0       	rjmp	.+18     	; 0x38cc <HLED_voidToggle+0x72>
#endif
			break;

		case LED_RED:
#if LED_RED_DIR == LED_DIR_FORWARD
			MDIO_TogglePinValue (LED_RED_PORT, LED_RED_PIN);
    38ba:	81 e0       	ldi	r24, 0x01	; 1
    38bc:	67 e0       	ldi	r22, 0x07	; 7
    38be:	0e 94 5e 13 	call	0x26bc	; 0x26bc <MDIO_TogglePinValue>
    38c2:	04 c0       	rjmp	.+8      	; 0x38cc <HLED_voidToggle+0x72>

#endif
			break;
		case LED_BLUE:
#if LED_BLUE_DIR == LED_DIR_FORWARD
			MDIO_TogglePinValue (LED_BLUE_PORT, LED_BLUE_PIN);
    38c4:	80 e0       	ldi	r24, 0x00	; 0
    38c6:	65 e0       	ldi	r22, 0x05	; 5
    38c8:	0e 94 5e 13 	call	0x26bc	; 0x26bc <MDIO_TogglePinValue>
#endif
			break;

	}

}
    38cc:	0f 90       	pop	r0
    38ce:	0f 90       	pop	r0
    38d0:	0f 90       	pop	r0
    38d2:	cf 91       	pop	r28
    38d4:	df 91       	pop	r29
    38d6:	08 95       	ret

000038d8 <HKPD_voidInit>:
#include "KEYPAD_private.h"

u8 KPD_u8ArrayValue[ROW_NUM][COL_NUM] = KP_MODE;

void HKPD_voidInit(void)
{
    38d8:	df 93       	push	r29
    38da:	cf 93       	push	r28
    38dc:	cd b7       	in	r28, 0x3d	; 61
    38de:	de b7       	in	r29, 0x3e	; 62
	//column input
	MDIO_SetPinDirection(KEYPAD_C0_PORT, KEYPAD_C0_PIN, DIO_u8PIN_INPUT);
    38e0:	83 e0       	ldi	r24, 0x03	; 3
    38e2:	67 e0       	ldi	r22, 0x07	; 7
    38e4:	40 e0       	ldi	r20, 0x00	; 0
    38e6:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <MDIO_SetPinDirection>
	MDIO_SetPinDirection(KEYPAD_C1_PORT, KEYPAD_C0_PIN, DIO_u8PIN_INPUT);
    38ea:	83 e0       	ldi	r24, 0x03	; 3
    38ec:	67 e0       	ldi	r22, 0x07	; 7
    38ee:	40 e0       	ldi	r20, 0x00	; 0
    38f0:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <MDIO_SetPinDirection>
	MDIO_SetPinDirection(KEYPAD_C2_PORT, KEYPAD_C0_PIN, DIO_u8PIN_INPUT);
    38f4:	83 e0       	ldi	r24, 0x03	; 3
    38f6:	67 e0       	ldi	r22, 0x07	; 7
    38f8:	40 e0       	ldi	r20, 0x00	; 0
    38fa:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <MDIO_SetPinDirection>
	MDIO_SetPinDirection(KEYPAD_C3_PORT, KEYPAD_C0_PIN, DIO_u8PIN_INPUT);
    38fe:	83 e0       	ldi	r24, 0x03	; 3
    3900:	67 e0       	ldi	r22, 0x07	; 7
    3902:	40 e0       	ldi	r20, 0x00	; 0
    3904:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <MDIO_SetPinDirection>

	MDIO_SetPinValue(KEYPAD_C0_PORT, KEYPAD_C0_PIN, DIO_u8PIN_HIGH);
    3908:	83 e0       	ldi	r24, 0x03	; 3
    390a:	67 e0       	ldi	r22, 0x07	; 7
    390c:	41 e0       	ldi	r20, 0x01	; 1
    390e:	0e 94 a8 10 	call	0x2150	; 0x2150 <MDIO_SetPinValue>
	MDIO_SetPinValue(KEYPAD_C1_PORT, KEYPAD_C0_PIN, DIO_u8PIN_HIGH);
    3912:	83 e0       	ldi	r24, 0x03	; 3
    3914:	67 e0       	ldi	r22, 0x07	; 7
    3916:	41 e0       	ldi	r20, 0x01	; 1
    3918:	0e 94 a8 10 	call	0x2150	; 0x2150 <MDIO_SetPinValue>
	MDIO_SetPinValue(KEYPAD_C2_PORT, KEYPAD_C0_PIN, DIO_u8PIN_HIGH);
    391c:	83 e0       	ldi	r24, 0x03	; 3
    391e:	67 e0       	ldi	r22, 0x07	; 7
    3920:	41 e0       	ldi	r20, 0x01	; 1
    3922:	0e 94 a8 10 	call	0x2150	; 0x2150 <MDIO_SetPinValue>
	MDIO_SetPinValue(KEYPAD_C3_PORT, KEYPAD_C0_PIN, DIO_u8PIN_HIGH);
    3926:	83 e0       	ldi	r24, 0x03	; 3
    3928:	67 e0       	ldi	r22, 0x07	; 7
    392a:	41 e0       	ldi	r20, 0x01	; 1
    392c:	0e 94 a8 10 	call	0x2150	; 0x2150 <MDIO_SetPinValue>

	//row output
	MDIO_SetPinDirection(KEYPAD_R0_PORT, KEYPAD_R0_PIN, DIO_u8PIN_OUTPUT);
    3930:	82 e0       	ldi	r24, 0x02	; 2
    3932:	65 e0       	ldi	r22, 0x05	; 5
    3934:	41 e0       	ldi	r20, 0x01	; 1
    3936:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <MDIO_SetPinDirection>
	MDIO_SetPinDirection(KEYPAD_R1_PORT, KEYPAD_R1_PIN, DIO_u8PIN_OUTPUT);
    393a:	82 e0       	ldi	r24, 0x02	; 2
    393c:	64 e0       	ldi	r22, 0x04	; 4
    393e:	41 e0       	ldi	r20, 0x01	; 1
    3940:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <MDIO_SetPinDirection>
	MDIO_SetPinDirection(KEYPAD_R2_PORT, KEYPAD_R2_PIN, DIO_u8PIN_OUTPUT);
    3944:	82 e0       	ldi	r24, 0x02	; 2
    3946:	63 e0       	ldi	r22, 0x03	; 3
    3948:	41 e0       	ldi	r20, 0x01	; 1
    394a:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <MDIO_SetPinDirection>
	MDIO_SetPinDirection(KEYPAD_R3_PORT, KEYPAD_R3_PIN, DIO_u8PIN_OUTPUT);
    394e:	82 e0       	ldi	r24, 0x02	; 2
    3950:	62 e0       	ldi	r22, 0x02	; 2
    3952:	41 e0       	ldi	r20, 0x01	; 1
    3954:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <MDIO_SetPinDirection>


}
    3958:	cf 91       	pop	r28
    395a:	df 91       	pop	r29
    395c:	08 95       	ret

0000395e <HKPD_u8GetPressedKey>:

void HKPD_u8GetPressedKey(u8 * pPressedKey)
{
    395e:	df 93       	push	r29
    3960:	cf 93       	push	r28
    3962:	cd b7       	in	r28, 0x3d	; 61
    3964:	de b7       	in	r29, 0x3e	; 62
    3966:	63 97       	sbiw	r28, 0x13	; 19
    3968:	0f b6       	in	r0, 0x3f	; 63
    396a:	f8 94       	cli
    396c:	de bf       	out	0x3e, r29	; 62
    396e:	0f be       	out	0x3f, r0	; 63
    3970:	cd bf       	out	0x3d, r28	; 61
    3972:	9b 8b       	std	Y+19, r25	; 0x13
    3974:	8a 8b       	std	Y+18, r24	; 0x12
	* pPressedKey = KPD_NO_PRESSED_KEY;
    3976:	ea 89       	ldd	r30, Y+18	; 0x12
    3978:	fb 89       	ldd	r31, Y+19	; 0x13
    397a:	8f ef       	ldi	r24, 0xFF	; 255
    397c:	80 83       	st	Z, r24
	//u8 copy_u8stateflag =
	u8 Local_u8ColCounter = COL_INIT;
    397e:	18 8a       	std	Y+16, r1	; 0x10
	u8 Local_u8RowCounter = ROW_INIT;
    3980:	1f 86       	std	Y+15, r1	; 0x0f

	u8 Local_u8PinValue = 1;
    3982:	81 e0       	ldi	r24, 0x01	; 1
    3984:	89 8b       	std	Y+17, r24	; 0x11

	do
	{

		for (Local_u8RowCounter = ROW_INIT; Local_u8RowCounter <= ROW_NUM; Local_u8RowCounter++)
    3986:	1f 86       	std	Y+15, r1	; 0x0f
    3988:	05 c1       	rjmp	.+522    	; 0x3b94 <HKPD_u8GetPressedKey+0x236>
		{
			/* Activate current Row*/
			MDIO_SetPinValue(Row_Port_Arr[Local_u8RowCounter], Row_Pin_Arr[Local_u8RowCounter], DIO_u8PIN_LOW);
    398a:	8f 85       	ldd	r24, Y+15	; 0x0f
    398c:	88 2f       	mov	r24, r24
    398e:	90 e0       	ldi	r25, 0x00	; 0
    3990:	fc 01       	movw	r30, r24
    3992:	e0 56       	subi	r30, 0x60	; 96
    3994:	fe 4f       	sbci	r31, 0xFE	; 254
    3996:	20 81       	ld	r18, Z
    3998:	8f 85       	ldd	r24, Y+15	; 0x0f
    399a:	88 2f       	mov	r24, r24
    399c:	90 e0       	ldi	r25, 0x00	; 0
    399e:	fc 01       	movw	r30, r24
    39a0:	ec 55       	subi	r30, 0x5C	; 92
    39a2:	fe 4f       	sbci	r31, 0xFE	; 254
    39a4:	90 81       	ld	r25, Z
    39a6:	82 2f       	mov	r24, r18
    39a8:	69 2f       	mov	r22, r25
    39aa:	40 e0       	ldi	r20, 0x00	; 0
    39ac:	0e 94 a8 10 	call	0x2150	; 0x2150 <MDIO_SetPinValue>

			for (Local_u8ColCounter = COL_INIT; Local_u8ColCounter <= COL_NUM; Local_u8ColCounter++)
    39b0:	18 8a       	std	Y+16, r1	; 0x10
    39b2:	d6 c0       	rjmp	.+428    	; 0x3b60 <HKPD_u8GetPressedKey+0x202>
			{
				/* Read Current Column */
				MDIO_GetPinValue(Col_Port_Arr[Local_u8ColCounter], Col_Pin_Arr[Local_u8ColCounter],&Local_u8PinValue);
    39b4:	88 89       	ldd	r24, Y+16	; 0x10
    39b6:	88 2f       	mov	r24, r24
    39b8:	90 e0       	ldi	r25, 0x00	; 0
    39ba:	fc 01       	movw	r30, r24
    39bc:	e8 55       	subi	r30, 0x58	; 88
    39be:	fe 4f       	sbci	r31, 0xFE	; 254
    39c0:	40 81       	ld	r20, Z
    39c2:	88 89       	ldd	r24, Y+16	; 0x10
    39c4:	88 2f       	mov	r24, r24
    39c6:	90 e0       	ldi	r25, 0x00	; 0
    39c8:	fc 01       	movw	r30, r24
    39ca:	e4 55       	subi	r30, 0x54	; 84
    39cc:	fe 4f       	sbci	r31, 0xFE	; 254
    39ce:	90 81       	ld	r25, Z
    39d0:	9e 01       	movw	r18, r28
    39d2:	2f 5e       	subi	r18, 0xEF	; 239
    39d4:	3f 4f       	sbci	r19, 0xFF	; 255
    39d6:	84 2f       	mov	r24, r20
    39d8:	69 2f       	mov	r22, r25
    39da:	a9 01       	movw	r20, r18
    39dc:	0e 94 02 12 	call	0x2404	; 0x2404 <MDIO_GetPinValue>
				if (DIO_u8PIN_LOW == Local_u8PinValue)
    39e0:	89 89       	ldd	r24, Y+17	; 0x11
    39e2:	88 23       	and	r24, r24
    39e4:	09 f0       	breq	.+2      	; 0x39e8 <HKPD_u8GetPressedKey+0x8a>
    39e6:	b9 c0       	rjmp	.+370    	; 0x3b5a <HKPD_u8GetPressedKey+0x1fc>
    39e8:	80 e0       	ldi	r24, 0x00	; 0
    39ea:	90 e0       	ldi	r25, 0x00	; 0
    39ec:	a8 ec       	ldi	r26, 0xC8	; 200
    39ee:	b1 e4       	ldi	r27, 0x41	; 65
    39f0:	8b 87       	std	Y+11, r24	; 0x0b
    39f2:	9c 87       	std	Y+12, r25	; 0x0c
    39f4:	ad 87       	std	Y+13, r26	; 0x0d
    39f6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    39fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    39fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    39fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a00:	20 e0       	ldi	r18, 0x00	; 0
    3a02:	30 e0       	ldi	r19, 0x00	; 0
    3a04:	4a e7       	ldi	r20, 0x7A	; 122
    3a06:	55 e4       	ldi	r21, 0x45	; 69
    3a08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a0c:	dc 01       	movw	r26, r24
    3a0e:	cb 01       	movw	r24, r22
    3a10:	8f 83       	std	Y+7, r24	; 0x07
    3a12:	98 87       	std	Y+8, r25	; 0x08
    3a14:	a9 87       	std	Y+9, r26	; 0x09
    3a16:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3a18:	6f 81       	ldd	r22, Y+7	; 0x07
    3a1a:	78 85       	ldd	r23, Y+8	; 0x08
    3a1c:	89 85       	ldd	r24, Y+9	; 0x09
    3a1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a20:	20 e0       	ldi	r18, 0x00	; 0
    3a22:	30 e0       	ldi	r19, 0x00	; 0
    3a24:	40 e8       	ldi	r20, 0x80	; 128
    3a26:	5f e3       	ldi	r21, 0x3F	; 63
    3a28:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3a2c:	88 23       	and	r24, r24
    3a2e:	2c f4       	brge	.+10     	; 0x3a3a <HKPD_u8GetPressedKey+0xdc>
		__ticks = 1;
    3a30:	81 e0       	ldi	r24, 0x01	; 1
    3a32:	90 e0       	ldi	r25, 0x00	; 0
    3a34:	9e 83       	std	Y+6, r25	; 0x06
    3a36:	8d 83       	std	Y+5, r24	; 0x05
    3a38:	3f c0       	rjmp	.+126    	; 0x3ab8 <HKPD_u8GetPressedKey+0x15a>
	else if (__tmp > 65535)
    3a3a:	6f 81       	ldd	r22, Y+7	; 0x07
    3a3c:	78 85       	ldd	r23, Y+8	; 0x08
    3a3e:	89 85       	ldd	r24, Y+9	; 0x09
    3a40:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a42:	20 e0       	ldi	r18, 0x00	; 0
    3a44:	3f ef       	ldi	r19, 0xFF	; 255
    3a46:	4f e7       	ldi	r20, 0x7F	; 127
    3a48:	57 e4       	ldi	r21, 0x47	; 71
    3a4a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3a4e:	18 16       	cp	r1, r24
    3a50:	4c f5       	brge	.+82     	; 0x3aa4 <HKPD_u8GetPressedKey+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a52:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a54:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a56:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a58:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a5a:	20 e0       	ldi	r18, 0x00	; 0
    3a5c:	30 e0       	ldi	r19, 0x00	; 0
    3a5e:	40 e2       	ldi	r20, 0x20	; 32
    3a60:	51 e4       	ldi	r21, 0x41	; 65
    3a62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a66:	dc 01       	movw	r26, r24
    3a68:	cb 01       	movw	r24, r22
    3a6a:	bc 01       	movw	r22, r24
    3a6c:	cd 01       	movw	r24, r26
    3a6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a72:	dc 01       	movw	r26, r24
    3a74:	cb 01       	movw	r24, r22
    3a76:	9e 83       	std	Y+6, r25	; 0x06
    3a78:	8d 83       	std	Y+5, r24	; 0x05
    3a7a:	0f c0       	rjmp	.+30     	; 0x3a9a <HKPD_u8GetPressedKey+0x13c>
    3a7c:	80 e9       	ldi	r24, 0x90	; 144
    3a7e:	91 e0       	ldi	r25, 0x01	; 1
    3a80:	9c 83       	std	Y+4, r25	; 0x04
    3a82:	8b 83       	std	Y+3, r24	; 0x03
    3a84:	8b 81       	ldd	r24, Y+3	; 0x03
    3a86:	9c 81       	ldd	r25, Y+4	; 0x04
    3a88:	01 97       	sbiw	r24, 0x01	; 1
    3a8a:	f1 f7       	brne	.-4      	; 0x3a88 <HKPD_u8GetPressedKey+0x12a>
    3a8c:	9c 83       	std	Y+4, r25	; 0x04
    3a8e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a90:	8d 81       	ldd	r24, Y+5	; 0x05
    3a92:	9e 81       	ldd	r25, Y+6	; 0x06
    3a94:	01 97       	sbiw	r24, 0x01	; 1
    3a96:	9e 83       	std	Y+6, r25	; 0x06
    3a98:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a9a:	8d 81       	ldd	r24, Y+5	; 0x05
    3a9c:	9e 81       	ldd	r25, Y+6	; 0x06
    3a9e:	00 97       	sbiw	r24, 0x00	; 0
    3aa0:	69 f7       	brne	.-38     	; 0x3a7c <HKPD_u8GetPressedKey+0x11e>
    3aa2:	14 c0       	rjmp	.+40     	; 0x3acc <HKPD_u8GetPressedKey+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3aa4:	6f 81       	ldd	r22, Y+7	; 0x07
    3aa6:	78 85       	ldd	r23, Y+8	; 0x08
    3aa8:	89 85       	ldd	r24, Y+9	; 0x09
    3aaa:	9a 85       	ldd	r25, Y+10	; 0x0a
    3aac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ab0:	dc 01       	movw	r26, r24
    3ab2:	cb 01       	movw	r24, r22
    3ab4:	9e 83       	std	Y+6, r25	; 0x06
    3ab6:	8d 83       	std	Y+5, r24	; 0x05
    3ab8:	8d 81       	ldd	r24, Y+5	; 0x05
    3aba:	9e 81       	ldd	r25, Y+6	; 0x06
    3abc:	9a 83       	std	Y+2, r25	; 0x02
    3abe:	89 83       	std	Y+1, r24	; 0x01
    3ac0:	89 81       	ldd	r24, Y+1	; 0x01
    3ac2:	9a 81       	ldd	r25, Y+2	; 0x02
    3ac4:	01 97       	sbiw	r24, 0x01	; 1
    3ac6:	f1 f7       	brne	.-4      	; 0x3ac4 <HKPD_u8GetPressedKey+0x166>
    3ac8:	9a 83       	std	Y+2, r25	; 0x02
    3aca:	89 83       	std	Y+1, r24	; 0x01
				{
					/* Delay To Prevent Bouncing */
					_delay_ms(25);
					MDIO_GetPinValue(Col_Port_Arr[Local_u8ColCounter], Col_Pin_Arr[Local_u8ColCounter],&Local_u8PinValue);
    3acc:	88 89       	ldd	r24, Y+16	; 0x10
    3ace:	88 2f       	mov	r24, r24
    3ad0:	90 e0       	ldi	r25, 0x00	; 0
    3ad2:	fc 01       	movw	r30, r24
    3ad4:	e8 55       	subi	r30, 0x58	; 88
    3ad6:	fe 4f       	sbci	r31, 0xFE	; 254
    3ad8:	40 81       	ld	r20, Z
    3ada:	88 89       	ldd	r24, Y+16	; 0x10
    3adc:	88 2f       	mov	r24, r24
    3ade:	90 e0       	ldi	r25, 0x00	; 0
    3ae0:	fc 01       	movw	r30, r24
    3ae2:	e4 55       	subi	r30, 0x54	; 84
    3ae4:	fe 4f       	sbci	r31, 0xFE	; 254
    3ae6:	90 81       	ld	r25, Z
    3ae8:	9e 01       	movw	r18, r28
    3aea:	2f 5e       	subi	r18, 0xEF	; 239
    3aec:	3f 4f       	sbci	r19, 0xFF	; 255
    3aee:	84 2f       	mov	r24, r20
    3af0:	69 2f       	mov	r22, r25
    3af2:	a9 01       	movw	r20, r18
    3af4:	0e 94 02 12 	call	0x2404	; 0x2404 <MDIO_GetPinValue>
					if (DIO_u8PIN_LOW == Local_u8PinValue )
    3af8:	89 89       	ldd	r24, Y+17	; 0x11
    3afa:	88 23       	and	r24, r24
    3afc:	71 f5       	brne	.+92     	; 0x3b5a <HKPD_u8GetPressedKey+0x1fc>
    3afe:	16 c0       	rjmp	.+44     	; 0x3b2c <HKPD_u8GetPressedKey+0x1ce>
					{
						/* Polling (busy waiting ) until the key is released */
						while(DIO_u8PIN_LOW == Local_u8PinValue )
						{
							MDIO_GetPinValue(Col_Port_Arr[Local_u8ColCounter], Col_Pin_Arr[Local_u8ColCounter],&Local_u8PinValue);
    3b00:	88 89       	ldd	r24, Y+16	; 0x10
    3b02:	88 2f       	mov	r24, r24
    3b04:	90 e0       	ldi	r25, 0x00	; 0
    3b06:	fc 01       	movw	r30, r24
    3b08:	e8 55       	subi	r30, 0x58	; 88
    3b0a:	fe 4f       	sbci	r31, 0xFE	; 254
    3b0c:	40 81       	ld	r20, Z
    3b0e:	88 89       	ldd	r24, Y+16	; 0x10
    3b10:	88 2f       	mov	r24, r24
    3b12:	90 e0       	ldi	r25, 0x00	; 0
    3b14:	fc 01       	movw	r30, r24
    3b16:	e4 55       	subi	r30, 0x54	; 84
    3b18:	fe 4f       	sbci	r31, 0xFE	; 254
    3b1a:	90 81       	ld	r25, Z
    3b1c:	9e 01       	movw	r18, r28
    3b1e:	2f 5e       	subi	r18, 0xEF	; 239
    3b20:	3f 4f       	sbci	r19, 0xFF	; 255
    3b22:	84 2f       	mov	r24, r20
    3b24:	69 2f       	mov	r22, r25
    3b26:	a9 01       	movw	r20, r18
    3b28:	0e 94 02 12 	call	0x2404	; 0x2404 <MDIO_GetPinValue>
					_delay_ms(25);
					MDIO_GetPinValue(Col_Port_Arr[Local_u8ColCounter], Col_Pin_Arr[Local_u8ColCounter],&Local_u8PinValue);
					if (DIO_u8PIN_LOW == Local_u8PinValue )
					{
						/* Polling (busy waiting ) until the key is released */
						while(DIO_u8PIN_LOW == Local_u8PinValue )
    3b2c:	89 89       	ldd	r24, Y+17	; 0x11
    3b2e:	88 23       	and	r24, r24
    3b30:	39 f3       	breq	.-50     	; 0x3b00 <HKPD_u8GetPressedKey+0x1a2>
						{
							MDIO_GetPinValue(Col_Port_Arr[Local_u8ColCounter], Col_Pin_Arr[Local_u8ColCounter],&Local_u8PinValue);
						}

						* pPressedKey = KPD_u8ArrayValue [Local_u8RowCounter][Local_u8ColCounter];
    3b32:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b34:	48 2f       	mov	r20, r24
    3b36:	50 e0       	ldi	r21, 0x00	; 0
    3b38:	88 89       	ldd	r24, Y+16	; 0x10
    3b3a:	28 2f       	mov	r18, r24
    3b3c:	30 e0       	ldi	r19, 0x00	; 0
    3b3e:	ca 01       	movw	r24, r20
    3b40:	88 0f       	add	r24, r24
    3b42:	99 1f       	adc	r25, r25
    3b44:	88 0f       	add	r24, r24
    3b46:	99 1f       	adc	r25, r25
    3b48:	82 0f       	add	r24, r18
    3b4a:	93 1f       	adc	r25, r19
    3b4c:	fc 01       	movw	r30, r24
    3b4e:	e0 55       	subi	r30, 0x50	; 80
    3b50:	fe 4f       	sbci	r31, 0xFE	; 254
    3b52:	80 81       	ld	r24, Z
    3b54:	ea 89       	ldd	r30, Y+18	; 0x12
    3b56:	fb 89       	ldd	r31, Y+19	; 0x13
    3b58:	80 83       	st	Z, r24
		for (Local_u8RowCounter = ROW_INIT; Local_u8RowCounter <= ROW_NUM; Local_u8RowCounter++)
		{
			/* Activate current Row*/
			MDIO_SetPinValue(Row_Port_Arr[Local_u8RowCounter], Row_Pin_Arr[Local_u8RowCounter], DIO_u8PIN_LOW);

			for (Local_u8ColCounter = COL_INIT; Local_u8ColCounter <= COL_NUM; Local_u8ColCounter++)
    3b5a:	88 89       	ldd	r24, Y+16	; 0x10
    3b5c:	8f 5f       	subi	r24, 0xFF	; 255
    3b5e:	88 8b       	std	Y+16, r24	; 0x10
    3b60:	88 89       	ldd	r24, Y+16	; 0x10
    3b62:	85 30       	cpi	r24, 0x05	; 5
    3b64:	08 f4       	brcc	.+2      	; 0x3b68 <HKPD_u8GetPressedKey+0x20a>
    3b66:	26 cf       	rjmp	.-436    	; 0x39b4 <HKPD_u8GetPressedKey+0x56>
						* pPressedKey = KPD_u8ArrayValue [Local_u8RowCounter][Local_u8ColCounter];
					}
				}
			}
			/* Deactivate current Row*/
			MDIO_SetPinValue(Row_Port_Arr[Local_u8RowCounter], Row_Pin_Arr[Local_u8RowCounter], DIO_u8PIN_HIGH);
    3b68:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b6a:	88 2f       	mov	r24, r24
    3b6c:	90 e0       	ldi	r25, 0x00	; 0
    3b6e:	fc 01       	movw	r30, r24
    3b70:	e0 56       	subi	r30, 0x60	; 96
    3b72:	fe 4f       	sbci	r31, 0xFE	; 254
    3b74:	20 81       	ld	r18, Z
    3b76:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b78:	88 2f       	mov	r24, r24
    3b7a:	90 e0       	ldi	r25, 0x00	; 0
    3b7c:	fc 01       	movw	r30, r24
    3b7e:	ec 55       	subi	r30, 0x5C	; 92
    3b80:	fe 4f       	sbci	r31, 0xFE	; 254
    3b82:	90 81       	ld	r25, Z
    3b84:	82 2f       	mov	r24, r18
    3b86:	69 2f       	mov	r22, r25
    3b88:	41 e0       	ldi	r20, 0x01	; 1
    3b8a:	0e 94 a8 10 	call	0x2150	; 0x2150 <MDIO_SetPinValue>
	u8 Local_u8PinValue = 1;

	do
	{

		for (Local_u8RowCounter = ROW_INIT; Local_u8RowCounter <= ROW_NUM; Local_u8RowCounter++)
    3b8e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b90:	8f 5f       	subi	r24, 0xFF	; 255
    3b92:	8f 87       	std	Y+15, r24	; 0x0f
    3b94:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b96:	85 30       	cpi	r24, 0x05	; 5
    3b98:	08 f4       	brcc	.+2      	; 0x3b9c <HKPD_u8GetPressedKey+0x23e>
    3b9a:	f7 ce       	rjmp	.-530    	; 0x398a <HKPD_u8GetPressedKey+0x2c>
			}
			/* Deactivate current Row*/
			MDIO_SetPinValue(Row_Port_Arr[Local_u8RowCounter], Row_Pin_Arr[Local_u8RowCounter], DIO_u8PIN_HIGH);
		}

	} while (KPD_NO_PRESSED_KEY == * pPressedKey);
    3b9c:	ea 89       	ldd	r30, Y+18	; 0x12
    3b9e:	fb 89       	ldd	r31, Y+19	; 0x13
    3ba0:	80 81       	ld	r24, Z
    3ba2:	8f 3f       	cpi	r24, 0xFF	; 255
    3ba4:	09 f4       	brne	.+2      	; 0x3ba8 <HKPD_u8GetPressedKey+0x24a>
    3ba6:	ef ce       	rjmp	.-546    	; 0x3986 <HKPD_u8GetPressedKey+0x28>
}
    3ba8:	63 96       	adiw	r28, 0x13	; 19
    3baa:	0f b6       	in	r0, 0x3f	; 63
    3bac:	f8 94       	cli
    3bae:	de bf       	out	0x3e, r29	; 62
    3bb0:	0f be       	out	0x3f, r0	; 63
    3bb2:	cd bf       	out	0x3d, r28	; 61
    3bb4:	cf 91       	pop	r28
    3bb6:	df 91       	pop	r29
    3bb8:	08 95       	ret

00003bba <HDCMOTOR_voidInit>:
#include "HDCMOTOR_config.h"
#include "HDCMOTOR_interface.h"


error_state_t HDCMOTOR_voidInit(void)
{
    3bba:	df 93       	push	r29
    3bbc:	cf 93       	push	r28
    3bbe:	0f 92       	push	r0
    3bc0:	cd b7       	in	r28, 0x3d	; 61
    3bc2:	de b7       	in	r29, 0x3e	; 62
	error_state_t Local_u8ErrorState = DCMOTOR_OK;
    3bc4:	88 e0       	ldi	r24, 0x08	; 8
    3bc6:	89 83       	std	Y+1, r24	; 0x01
	// init PWM0
	MPWM0_enumInit();
    3bc8:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <MPWM0_enumInit>

	// set motor pin direction as output
	MDIO_SetPinDirection(DCMOTOR_PWM_PORT, DCMOTOR_PWM_PIN, DIO_u8PIN_OUTPUT);
    3bcc:	81 e0       	ldi	r24, 0x01	; 1
    3bce:	63 e0       	ldi	r22, 0x03	; 3
    3bd0:	41 e0       	ldi	r20, 0x01	; 1
    3bd2:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <MDIO_SetPinDirection>
	MDIO_SetPinDirection(DCMOTOR_DIR_PORT, DCMOTOR_DIR_PIN, DIO_u8PIN_OUTPUT);
    3bd6:	81 e0       	ldi	r24, 0x01	; 1
    3bd8:	65 e0       	ldi	r22, 0x05	; 5
    3bda:	41 e0       	ldi	r20, 0x01	; 1
    3bdc:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <MDIO_SetPinDirection>
	MDIO_SetPinDirection(DCMOTOR_EN_PORT, DCMOTOR_EN_PIN, DIO_u8PIN_OUTPUT);
    3be0:	81 e0       	ldi	r24, 0x01	; 1
    3be2:	66 e0       	ldi	r22, 0x06	; 6
    3be4:	41 e0       	ldi	r20, 0x01	; 1
    3be6:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <MDIO_SetPinDirection>

	return Local_u8ErrorState;
    3bea:	89 81       	ldd	r24, Y+1	; 0x01

}
    3bec:	0f 90       	pop	r0
    3bee:	cf 91       	pop	r28
    3bf0:	df 91       	pop	r29
    3bf2:	08 95       	ret

00003bf4 <HDCMOTOR_voidSetDirection>:

error_state_t HDCMOTOR_voidSetDirection(u8 Copy_u8MotorDirection)
{
    3bf4:	df 93       	push	r29
    3bf6:	cf 93       	push	r28
    3bf8:	00 d0       	rcall	.+0      	; 0x3bfa <HDCMOTOR_voidSetDirection+0x6>
    3bfa:	cd b7       	in	r28, 0x3d	; 61
    3bfc:	de b7       	in	r29, 0x3e	; 62
    3bfe:	8a 83       	std	Y+2, r24	; 0x02
	error_state_t Local_u8ErrorState = DCMOTOR_OK;
    3c00:	88 e0       	ldi	r24, 0x08	; 8
    3c02:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8MotorDirection == HDCMOTOR_CW){
    3c04:	8a 81       	ldd	r24, Y+2	; 0x02
    3c06:	81 30       	cpi	r24, 0x01	; 1
    3c08:	31 f4       	brne	.+12     	; 0x3c16 <HDCMOTOR_voidSetDirection+0x22>
		MDIO_SetPinValue(DCMOTOR_DIR_PORT, DCMOTOR_DIR_PIN, DIO_u8PIN_HIGH);
    3c0a:	81 e0       	ldi	r24, 0x01	; 1
    3c0c:	65 e0       	ldi	r22, 0x05	; 5
    3c0e:	41 e0       	ldi	r20, 0x01	; 1
    3c10:	0e 94 a8 10 	call	0x2150	; 0x2150 <MDIO_SetPinValue>
    3c14:	08 c0       	rjmp	.+16     	; 0x3c26 <HDCMOTOR_voidSetDirection+0x32>

	} else if (Copy_u8MotorDirection == HDCMOTOR_CCW) {
    3c16:	8a 81       	ldd	r24, Y+2	; 0x02
    3c18:	82 30       	cpi	r24, 0x02	; 2
    3c1a:	29 f4       	brne	.+10     	; 0x3c26 <HDCMOTOR_voidSetDirection+0x32>
		MDIO_SetPinValue(DCMOTOR_DIR_PORT, DCMOTOR_DIR_PIN, DIO_u8PIN_LOW);
    3c1c:	81 e0       	ldi	r24, 0x01	; 1
    3c1e:	65 e0       	ldi	r22, 0x05	; 5
    3c20:	40 e0       	ldi	r20, 0x00	; 0
    3c22:	0e 94 a8 10 	call	0x2150	; 0x2150 <MDIO_SetPinValue>

	} else {
		// No thing
	}

	return Local_u8ErrorState;
    3c26:	89 81       	ldd	r24, Y+1	; 0x01

}
    3c28:	0f 90       	pop	r0
    3c2a:	0f 90       	pop	r0
    3c2c:	cf 91       	pop	r28
    3c2e:	df 91       	pop	r29
    3c30:	08 95       	ret

00003c32 <HDCMOTOR_voidSetSpeed>:
error_state_t HDCMOTOR_voidSetSpeed(u8 Copy_u8DutyCycle)
{
    3c32:	df 93       	push	r29
    3c34:	cf 93       	push	r28
    3c36:	00 d0       	rcall	.+0      	; 0x3c38 <HDCMOTOR_voidSetSpeed+0x6>
    3c38:	cd b7       	in	r28, 0x3d	; 61
    3c3a:	de b7       	in	r29, 0x3e	; 62
    3c3c:	8a 83       	std	Y+2, r24	; 0x02
	error_state_t Local_u8ErrorState = DCMOTOR_OK;
    3c3e:	88 e0       	ldi	r24, 0x08	; 8
    3c40:	89 83       	std	Y+1, r24	; 0x01

	MPWM0_enumSetDutyCycle(Copy_u8DutyCycle);
    3c42:	8a 81       	ldd	r24, Y+2	; 0x02
    3c44:	0e 94 b1 0c 	call	0x1962	; 0x1962 <MPWM0_enumSetDutyCycle>

	return Local_u8ErrorState;
    3c48:	89 81       	ldd	r24, Y+1	; 0x01
}
    3c4a:	0f 90       	pop	r0
    3c4c:	0f 90       	pop	r0
    3c4e:	cf 91       	pop	r28
    3c50:	df 91       	pop	r29
    3c52:	08 95       	ret

00003c54 <HDCMOTOR_voidStart>:

error_state_t HDCMOTOR_voidStart(void)
{
    3c54:	df 93       	push	r29
    3c56:	cf 93       	push	r28
    3c58:	0f 92       	push	r0
    3c5a:	cd b7       	in	r28, 0x3d	; 61
    3c5c:	de b7       	in	r29, 0x3e	; 62
	error_state_t Local_u8ErrorState = DCMOTOR_OK;
    3c5e:	88 e0       	ldi	r24, 0x08	; 8
    3c60:	89 83       	std	Y+1, r24	; 0x01

	MPWM0_enumStart();
    3c62:	0e 94 ce 0c 	call	0x199c	; 0x199c <MPWM0_enumStart>

	return Local_u8ErrorState;
    3c66:	89 81       	ldd	r24, Y+1	; 0x01
}
    3c68:	0f 90       	pop	r0
    3c6a:	cf 91       	pop	r28
    3c6c:	df 91       	pop	r29
    3c6e:	08 95       	ret

00003c70 <HDCMOTOR_voidStop>:

error_state_t HDCMOTOR_voidStop(void)
{
    3c70:	df 93       	push	r29
    3c72:	cf 93       	push	r28
    3c74:	0f 92       	push	r0
    3c76:	cd b7       	in	r28, 0x3d	; 61
    3c78:	de b7       	in	r29, 0x3e	; 62
	error_state_t Local_u8ErrorState = DCMOTOR_OK;
    3c7a:	88 e0       	ldi	r24, 0x08	; 8
    3c7c:	89 83       	std	Y+1, r24	; 0x01
	MPWM0_enumSetDutyCycle(0);
    3c7e:	80 e0       	ldi	r24, 0x00	; 0
    3c80:	0e 94 b1 0c 	call	0x1962	; 0x1962 <MPWM0_enumSetDutyCycle>
	MDIO_SetPinValue(1, 3, DIO_u8PIN_LOW);
    3c84:	81 e0       	ldi	r24, 0x01	; 1
    3c86:	63 e0       	ldi	r22, 0x03	; 3
    3c88:	40 e0       	ldi	r20, 0x00	; 0
    3c8a:	0e 94 a8 10 	call	0x2150	; 0x2150 <MDIO_SetPinValue>

	MPWM0_enumStop();
    3c8e:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <MPWM0_enumStop>
	//MDIO_SetPinValue(DCMOTOR_EN_PORT, DCMOTOR_EN_PIN, DIO_u8PIN_HIGH);

	return Local_u8ErrorState;
    3c92:	89 81       	ldd	r24, Y+1	; 0x01
}
    3c94:	0f 90       	pop	r0
    3c96:	cf 91       	pop	r28
    3c98:	df 91       	pop	r29
    3c9a:	08 95       	ret

00003c9c <HDCMOTOR_MoveCW>:

error_state_t HDCMOTOR_MoveCW(u8 Copy_u8DutyCycle)
{
    3c9c:	df 93       	push	r29
    3c9e:	cf 93       	push	r28
    3ca0:	00 d0       	rcall	.+0      	; 0x3ca2 <HDCMOTOR_MoveCW+0x6>
    3ca2:	cd b7       	in	r28, 0x3d	; 61
    3ca4:	de b7       	in	r29, 0x3e	; 62
    3ca6:	8a 83       	std	Y+2, r24	; 0x02
	error_state_t Local_u8ErrorState = DCMOTOR_OK;
    3ca8:	88 e0       	ldi	r24, 0x08	; 8
    3caa:	89 83       	std	Y+1, r24	; 0x01

	HDCMOTOR_voidSetDirection(HDCMOTOR_CW);
    3cac:	81 e0       	ldi	r24, 0x01	; 1
    3cae:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <HDCMOTOR_voidSetDirection>
	HDCMOTOR_voidSetSpeed(Copy_u8DutyCycle);
    3cb2:	8a 81       	ldd	r24, Y+2	; 0x02
    3cb4:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <HDCMOTOR_voidSetSpeed>
	HDCMOTOR_voidStart();
    3cb8:	0e 94 2a 1e 	call	0x3c54	; 0x3c54 <HDCMOTOR_voidStart>

	return Local_u8ErrorState;
    3cbc:	89 81       	ldd	r24, Y+1	; 0x01

}
    3cbe:	0f 90       	pop	r0
    3cc0:	0f 90       	pop	r0
    3cc2:	cf 91       	pop	r28
    3cc4:	df 91       	pop	r29
    3cc6:	08 95       	ret

00003cc8 <HDCMOTOR_MoveCCW>:

error_state_t HDCMOTOR_MoveCCW(u8 Copy_u8DutyCycle)
{
    3cc8:	df 93       	push	r29
    3cca:	cf 93       	push	r28
    3ccc:	00 d0       	rcall	.+0      	; 0x3cce <HDCMOTOR_MoveCCW+0x6>
    3cce:	cd b7       	in	r28, 0x3d	; 61
    3cd0:	de b7       	in	r29, 0x3e	; 62
    3cd2:	8a 83       	std	Y+2, r24	; 0x02
	error_state_t Local_u8ErrorState = DCMOTOR_OK;
    3cd4:	88 e0       	ldi	r24, 0x08	; 8
    3cd6:	89 83       	std	Y+1, r24	; 0x01

	HDCMOTOR_voidSetDirection(HDCMOTOR_CW);
    3cd8:	81 e0       	ldi	r24, 0x01	; 1
    3cda:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <HDCMOTOR_voidSetDirection>
	HDCMOTOR_voidSetSpeed(Copy_u8DutyCycle);
    3cde:	8a 81       	ldd	r24, Y+2	; 0x02
    3ce0:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <HDCMOTOR_voidSetSpeed>
	HDCMOTOR_voidStart();
    3ce4:	0e 94 2a 1e 	call	0x3c54	; 0x3c54 <HDCMOTOR_voidStart>

	return Local_u8ErrorState;
    3ce8:	89 81       	ldd	r24, Y+1	; 0x01

}
    3cea:	0f 90       	pop	r0
    3cec:	0f 90       	pop	r0
    3cee:	cf 91       	pop	r28
    3cf0:	df 91       	pop	r29
    3cf2:	08 95       	ret

00003cf4 <HCLCD_SendCommand>:
u8 Local_u8SetPositionY = Y_INITIAL_POSITION;



error_state_t HCLCD_SendCommand(u8 Copy_u8Command)
{
    3cf4:	df 93       	push	r29
    3cf6:	cf 93       	push	r28
    3cf8:	00 d0       	rcall	.+0      	; 0x3cfa <HCLCD_SendCommand+0x6>
    3cfa:	cd b7       	in	r28, 0x3d	; 61
    3cfc:	de b7       	in	r29, 0x3e	; 62
    3cfe:	8a 83       	std	Y+2, r24	; 0x02
	error_state_t Local_ErrorState = R_OK;
    3d00:	81 e0       	ldi	r24, 0x01	; 1
    3d02:	89 83       	std	Y+1, r24	; 0x01

	/* CLR RS Pin To Send Command */
	MDIO_SetPinValue(CLCD_CTRL_PORT, CLCD_RS_PIN, DIO_u8PIN_LOW);
    3d04:	80 e0       	ldi	r24, 0x00	; 0
    3d06:	63 e0       	ldi	r22, 0x03	; 3
    3d08:	40 e0       	ldi	r20, 0x00	; 0
    3d0a:	0e 94 a8 10 	call	0x2150	; 0x2150 <MDIO_SetPinValue>
	/* CLR RW Pin To Select Write Mode */
	MDIO_SetPinValue(CLCD_CTRL_PORT, CLCD_RW_PIN, DIO_u8PIN_LOW);
    3d0e:	80 e0       	ldi	r24, 0x00	; 0
    3d10:	60 e0       	ldi	r22, 0x00	; 0
    3d12:	40 e0       	ldi	r20, 0x00	; 0
    3d14:	0e 94 a8 10 	call	0x2150	; 0x2150 <MDIO_SetPinValue>
	/* Send Command To Data Pin */
	H_LCD_void_latchByte(Copy_u8Command);
    3d18:	8a 81       	ldd	r24, Y+2	; 0x02
    3d1a:	0e 94 b0 21 	call	0x4360	; 0x4360 <H_LCD_void_latchByte>

	return Local_ErrorState;
    3d1e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3d20:	0f 90       	pop	r0
    3d22:	0f 90       	pop	r0
    3d24:	cf 91       	pop	r28
    3d26:	df 91       	pop	r29
    3d28:	08 95       	ret

00003d2a <HCLCD_SendData>:



error_state_t HCLCD_SendData(u8 Copy_u8Data)
{
    3d2a:	df 93       	push	r29
    3d2c:	cf 93       	push	r28
    3d2e:	00 d0       	rcall	.+0      	; 0x3d30 <HCLCD_SendData+0x6>
    3d30:	cd b7       	in	r28, 0x3d	; 61
    3d32:	de b7       	in	r29, 0x3e	; 62
    3d34:	8a 83       	std	Y+2, r24	; 0x02
	error_state_t Local_ErrorState = R_OK;
    3d36:	81 e0       	ldi	r24, 0x01	; 1
    3d38:	89 83       	std	Y+1, r24	; 0x01
	if(specialCharacter  == OFF)
    3d3a:	80 91 f1 01 	lds	r24, 0x01F1
    3d3e:	88 23       	and	r24, r24
    3d40:	11 f4       	brne	.+4      	; 0x3d46 <HCLCD_SendData+0x1c>
	{
		CLCD_CurrentPosition();
    3d42:	0e 94 8c 21 	call	0x4318	; 0x4318 <CLCD_CurrentPosition>
	}

	/* SET RS Pin To Send Data */
	MDIO_SetPinValue(CLCD_CTRL_PORT, CLCD_RS_PIN, DIO_u8PIN_HIGH);
    3d46:	80 e0       	ldi	r24, 0x00	; 0
    3d48:	63 e0       	ldi	r22, 0x03	; 3
    3d4a:	41 e0       	ldi	r20, 0x01	; 1
    3d4c:	0e 94 a8 10 	call	0x2150	; 0x2150 <MDIO_SetPinValue>
	/* CLR RW Pin To Select Write Mode */
	MDIO_SetPinValue(CLCD_CTRL_PORT, CLCD_RW_PIN, DIO_u8PIN_LOW);
    3d50:	80 e0       	ldi	r24, 0x00	; 0
    3d52:	60 e0       	ldi	r22, 0x00	; 0
    3d54:	40 e0       	ldi	r20, 0x00	; 0
    3d56:	0e 94 a8 10 	call	0x2150	; 0x2150 <MDIO_SetPinValue>
	/* Send Data To Data Pin */
	H_LCD_void_latchByte(Copy_u8Data);
    3d5a:	8a 81       	ldd	r24, Y+2	; 0x02
    3d5c:	0e 94 b0 21 	call	0x4360	; 0x4360 <H_LCD_void_latchByte>

	return Local_ErrorState;
    3d60:	89 81       	ldd	r24, Y+1	; 0x01
}
    3d62:	0f 90       	pop	r0
    3d64:	0f 90       	pop	r0
    3d66:	cf 91       	pop	r28
    3d68:	df 91       	pop	r29
    3d6a:	08 95       	ret

00003d6c <HCLCD_Init>:
error_state_t HCLCD_Init(void)
{
    3d6c:	df 93       	push	r29
    3d6e:	cf 93       	push	r28
    3d70:	cd b7       	in	r28, 0x3d	; 61
    3d72:	de b7       	in	r29, 0x3e	; 62
    3d74:	2f 97       	sbiw	r28, 0x0f	; 15
    3d76:	0f b6       	in	r0, 0x3f	; 63
    3d78:	f8 94       	cli
    3d7a:	de bf       	out	0x3e, r29	; 62
    3d7c:	0f be       	out	0x3f, r0	; 63
    3d7e:	cd bf       	out	0x3d, r28	; 61
	error_state_t Local_ErrorState = R_OK;
    3d80:	81 e0       	ldi	r24, 0x01	; 1
    3d82:	8f 87       	std	Y+15, r24	; 0x0f

	/* Initialize Data pins as output pin */
	MDIO_SetPinDirection(CLCD_DATA_PORT, CLCD_DATA_4_PIN0, DIO_u8PIN_OUTPUT);
    3d84:	81 e0       	ldi	r24, 0x01	; 1
    3d86:	60 e0       	ldi	r22, 0x00	; 0
    3d88:	41 e0       	ldi	r20, 0x01	; 1
    3d8a:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <MDIO_SetPinDirection>
	MDIO_SetPinDirection(CLCD_DATA_PORT, CLCD_DATA_4_PIN1, DIO_u8PIN_OUTPUT);
    3d8e:	81 e0       	ldi	r24, 0x01	; 1
    3d90:	61 e0       	ldi	r22, 0x01	; 1
    3d92:	41 e0       	ldi	r20, 0x01	; 1
    3d94:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <MDIO_SetPinDirection>
	MDIO_SetPinDirection(CLCD_DATA_PORT, CLCD_DATA_4_PIN2, DIO_u8PIN_OUTPUT);
    3d98:	81 e0       	ldi	r24, 0x01	; 1
    3d9a:	62 e0       	ldi	r22, 0x02	; 2
    3d9c:	41 e0       	ldi	r20, 0x01	; 1
    3d9e:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <MDIO_SetPinDirection>
	MDIO_SetPinDirection(CLCD_DATA_PORT, CLCD_DATA_4_PIN3, DIO_u8PIN_OUTPUT);
    3da2:	81 e0       	ldi	r24, 0x01	; 1
    3da4:	64 e0       	ldi	r22, 0x04	; 4
    3da6:	41 e0       	ldi	r20, 0x01	; 1
    3da8:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <MDIO_SetPinDirection>
	/* Initialize Control pins as output pin */
	MDIO_SetPinDirection(CLCD_CTRL_PORT, CLCD_RS_PIN, DIO_u8PIN_OUTPUT);
    3dac:	80 e0       	ldi	r24, 0x00	; 0
    3dae:	63 e0       	ldi	r22, 0x03	; 3
    3db0:	41 e0       	ldi	r20, 0x01	; 1
    3db2:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <MDIO_SetPinDirection>
	MDIO_SetPinDirection(CLCD_CTRL_PORT, CLCD_EN_PIN, DIO_u8PIN_OUTPUT);
    3db6:	80 e0       	ldi	r24, 0x00	; 0
    3db8:	62 e0       	ldi	r22, 0x02	; 2
    3dba:	41 e0       	ldi	r20, 0x01	; 1
    3dbc:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <MDIO_SetPinDirection>
    3dc0:	80 e0       	ldi	r24, 0x00	; 0
    3dc2:	90 e0       	ldi	r25, 0x00	; 0
    3dc4:	a0 e2       	ldi	r26, 0x20	; 32
    3dc6:	b2 e4       	ldi	r27, 0x42	; 66
    3dc8:	8b 87       	std	Y+11, r24	; 0x0b
    3dca:	9c 87       	std	Y+12, r25	; 0x0c
    3dcc:	ad 87       	std	Y+13, r26	; 0x0d
    3dce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3dd0:	6b 85       	ldd	r22, Y+11	; 0x0b
    3dd2:	7c 85       	ldd	r23, Y+12	; 0x0c
    3dd4:	8d 85       	ldd	r24, Y+13	; 0x0d
    3dd6:	9e 85       	ldd	r25, Y+14	; 0x0e
    3dd8:	20 e0       	ldi	r18, 0x00	; 0
    3dda:	30 e0       	ldi	r19, 0x00	; 0
    3ddc:	4a e7       	ldi	r20, 0x7A	; 122
    3dde:	55 e4       	ldi	r21, 0x45	; 69
    3de0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3de4:	dc 01       	movw	r26, r24
    3de6:	cb 01       	movw	r24, r22
    3de8:	8f 83       	std	Y+7, r24	; 0x07
    3dea:	98 87       	std	Y+8, r25	; 0x08
    3dec:	a9 87       	std	Y+9, r26	; 0x09
    3dee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3df0:	6f 81       	ldd	r22, Y+7	; 0x07
    3df2:	78 85       	ldd	r23, Y+8	; 0x08
    3df4:	89 85       	ldd	r24, Y+9	; 0x09
    3df6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3df8:	20 e0       	ldi	r18, 0x00	; 0
    3dfa:	30 e0       	ldi	r19, 0x00	; 0
    3dfc:	40 e8       	ldi	r20, 0x80	; 128
    3dfe:	5f e3       	ldi	r21, 0x3F	; 63
    3e00:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3e04:	88 23       	and	r24, r24
    3e06:	2c f4       	brge	.+10     	; 0x3e12 <HCLCD_Init+0xa6>
		__ticks = 1;
    3e08:	81 e0       	ldi	r24, 0x01	; 1
    3e0a:	90 e0       	ldi	r25, 0x00	; 0
    3e0c:	9e 83       	std	Y+6, r25	; 0x06
    3e0e:	8d 83       	std	Y+5, r24	; 0x05
    3e10:	3f c0       	rjmp	.+126    	; 0x3e90 <HCLCD_Init+0x124>
	else if (__tmp > 65535)
    3e12:	6f 81       	ldd	r22, Y+7	; 0x07
    3e14:	78 85       	ldd	r23, Y+8	; 0x08
    3e16:	89 85       	ldd	r24, Y+9	; 0x09
    3e18:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e1a:	20 e0       	ldi	r18, 0x00	; 0
    3e1c:	3f ef       	ldi	r19, 0xFF	; 255
    3e1e:	4f e7       	ldi	r20, 0x7F	; 127
    3e20:	57 e4       	ldi	r21, 0x47	; 71
    3e22:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3e26:	18 16       	cp	r1, r24
    3e28:	4c f5       	brge	.+82     	; 0x3e7c <HCLCD_Init+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e2a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e2c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e30:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e32:	20 e0       	ldi	r18, 0x00	; 0
    3e34:	30 e0       	ldi	r19, 0x00	; 0
    3e36:	40 e2       	ldi	r20, 0x20	; 32
    3e38:	51 e4       	ldi	r21, 0x41	; 65
    3e3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e3e:	dc 01       	movw	r26, r24
    3e40:	cb 01       	movw	r24, r22
    3e42:	bc 01       	movw	r22, r24
    3e44:	cd 01       	movw	r24, r26
    3e46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e4a:	dc 01       	movw	r26, r24
    3e4c:	cb 01       	movw	r24, r22
    3e4e:	9e 83       	std	Y+6, r25	; 0x06
    3e50:	8d 83       	std	Y+5, r24	; 0x05
    3e52:	0f c0       	rjmp	.+30     	; 0x3e72 <HCLCD_Init+0x106>
    3e54:	80 e9       	ldi	r24, 0x90	; 144
    3e56:	91 e0       	ldi	r25, 0x01	; 1
    3e58:	9c 83       	std	Y+4, r25	; 0x04
    3e5a:	8b 83       	std	Y+3, r24	; 0x03
    3e5c:	8b 81       	ldd	r24, Y+3	; 0x03
    3e5e:	9c 81       	ldd	r25, Y+4	; 0x04
    3e60:	01 97       	sbiw	r24, 0x01	; 1
    3e62:	f1 f7       	brne	.-4      	; 0x3e60 <HCLCD_Init+0xf4>
    3e64:	9c 83       	std	Y+4, r25	; 0x04
    3e66:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e68:	8d 81       	ldd	r24, Y+5	; 0x05
    3e6a:	9e 81       	ldd	r25, Y+6	; 0x06
    3e6c:	01 97       	sbiw	r24, 0x01	; 1
    3e6e:	9e 83       	std	Y+6, r25	; 0x06
    3e70:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e72:	8d 81       	ldd	r24, Y+5	; 0x05
    3e74:	9e 81       	ldd	r25, Y+6	; 0x06
    3e76:	00 97       	sbiw	r24, 0x00	; 0
    3e78:	69 f7       	brne	.-38     	; 0x3e54 <HCLCD_Init+0xe8>
    3e7a:	14 c0       	rjmp	.+40     	; 0x3ea4 <HCLCD_Init+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e7c:	6f 81       	ldd	r22, Y+7	; 0x07
    3e7e:	78 85       	ldd	r23, Y+8	; 0x08
    3e80:	89 85       	ldd	r24, Y+9	; 0x09
    3e82:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e88:	dc 01       	movw	r26, r24
    3e8a:	cb 01       	movw	r24, r22
    3e8c:	9e 83       	std	Y+6, r25	; 0x06
    3e8e:	8d 83       	std	Y+5, r24	; 0x05
    3e90:	8d 81       	ldd	r24, Y+5	; 0x05
    3e92:	9e 81       	ldd	r25, Y+6	; 0x06
    3e94:	9a 83       	std	Y+2, r25	; 0x02
    3e96:	89 83       	std	Y+1, r24	; 0x01
    3e98:	89 81       	ldd	r24, Y+1	; 0x01
    3e9a:	9a 81       	ldd	r25, Y+2	; 0x02
    3e9c:	01 97       	sbiw	r24, 0x01	; 1
    3e9e:	f1 f7       	brne	.-4      	; 0x3e9c <HCLCD_Init+0x130>
    3ea0:	9a 83       	std	Y+2, r25	; 0x02
    3ea2:	89 83       	std	Y+1, r24	; 0x01
	/* Wait more than 30ms */
	_delay_ms(40);

#if CLCD_MODE == _4_BIT_MODE
	/* Function set command : 2 lines , 5*8 font size */
	HCLCD_SendCommand(CLCD_SELECT_4_BIT_COMMAND_1);
    3ea4:	83 e3       	ldi	r24, 0x33	; 51
    3ea6:	0e 94 7a 1e 	call	0x3cf4	; 0x3cf4 <HCLCD_SendCommand>
	HCLCD_SendCommand(CLCD_SELECT_4_BIT_COMMAND_2);
    3eaa:	82 e3       	ldi	r24, 0x32	; 50
    3eac:	0e 94 7a 1e 	call	0x3cf4	; 0x3cf4 <HCLCD_SendCommand>
	HCLCD_SendCommand(CLCD_SELECT_4_BIT_COMMAND_3);   /* 0bNFXXXXXX  --> N: no of lines F: font size*/
    3eb0:	88 e2       	ldi	r24, 0x28	; 40
    3eb2:	0e 94 7a 1e 	call	0x3cf4	; 0x3cf4 <HCLCD_SendCommand>

	/*Display on off control : disable enable , disable cursor , no blink cursor*/
	HCLCD_SendCommand(CLCD_DISPLAY_ON_CURSOR_OFF);
    3eb6:	8c e0       	ldi	r24, 0x0C	; 12
    3eb8:	0e 94 7a 1e 	call	0x3cf4	; 0x3cf4 <HCLCD_SendCommand>
	HCLCD_SendCommand(CLCD_RETURN_HOME);
    3ebc:	82 e0       	ldi	r24, 0x02	; 2
    3ebe:	0e 94 7a 1e 	call	0x3cf4	; 0x3cf4 <HCLCD_SendCommand>

	HCLCD_SendCommand(CLCD_DISPLAY_LEFT_TO_RIGHT);
    3ec2:	86 e0       	ldi	r24, 0x06	; 6
    3ec4:	0e 94 7a 1e 	call	0x3cf4	; 0x3cf4 <HCLCD_SendCommand>

	/* Clear display */
	HCLCD_SendCommand(CLCD_DISPLAY_CLEAR);
    3ec8:	81 e0       	ldi	r24, 0x01	; 1
    3eca:	0e 94 7a 1e 	call	0x3cf4	; 0x3cf4 <HCLCD_SendCommand>

#else
#warning  Select Correct Mode !!!
#endif

	return Local_ErrorState;
    3ece:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    3ed0:	2f 96       	adiw	r28, 0x0f	; 15
    3ed2:	0f b6       	in	r0, 0x3f	; 63
    3ed4:	f8 94       	cli
    3ed6:	de bf       	out	0x3e, r29	; 62
    3ed8:	0f be       	out	0x3f, r0	; 63
    3eda:	cd bf       	out	0x3d, r28	; 61
    3edc:	cf 91       	pop	r28
    3ede:	df 91       	pop	r29
    3ee0:	08 95       	ret

00003ee2 <HCLCD_Clear>:

error_state_t HCLCD_Clear(void)
{
    3ee2:	df 93       	push	r29
    3ee4:	cf 93       	push	r28
    3ee6:	0f 92       	push	r0
    3ee8:	cd b7       	in	r28, 0x3d	; 61
    3eea:	de b7       	in	r29, 0x3e	; 62
	error_state_t Local_ErrorState = R_OK;
    3eec:	81 e0       	ldi	r24, 0x01	; 1
    3eee:	89 83       	std	Y+1, r24	; 0x01
	/* Clear display */
	HCLCD_SendCommand(CLCD_DISPLAY_CLEAR); /* 1 or 0x01 or 0b00000001*/
    3ef0:	81 e0       	ldi	r24, 0x01	; 1
    3ef2:	0e 94 7a 1e 	call	0x3cf4	; 0x3cf4 <HCLCD_SendCommand>
	return Local_ErrorState;
    3ef6:	89 81       	ldd	r24, Y+1	; 0x01
}
    3ef8:	0f 90       	pop	r0
    3efa:	cf 91       	pop	r28
    3efc:	df 91       	pop	r29
    3efe:	08 95       	ret

00003f00 <HCLCD_SendString>:

error_state_t HCLCD_SendString(const char *Copy_pu8String)
{
    3f00:	df 93       	push	r29
    3f02:	cf 93       	push	r28
    3f04:	00 d0       	rcall	.+0      	; 0x3f06 <HCLCD_SendString+0x6>
    3f06:	00 d0       	rcall	.+0      	; 0x3f08 <HCLCD_SendString+0x8>
    3f08:	cd b7       	in	r28, 0x3d	; 61
    3f0a:	de b7       	in	r29, 0x3e	; 62
    3f0c:	9c 83       	std	Y+4, r25	; 0x04
    3f0e:	8b 83       	std	Y+3, r24	; 0x03
	error_state_t Local_ErrorState = R_OK;
    3f10:	81 e0       	ldi	r24, 0x01	; 1
    3f12:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_Counter = 0;
    3f14:	19 82       	std	Y+1, r1	; 0x01
    3f16:	0e c0       	rjmp	.+28     	; 0x3f34 <HCLCD_SendString+0x34>
	while (Copy_pu8String[Local_Counter] != NULL )
	{
		HCLCD_SendData(Copy_pu8String[Local_Counter]);
    3f18:	89 81       	ldd	r24, Y+1	; 0x01
    3f1a:	28 2f       	mov	r18, r24
    3f1c:	30 e0       	ldi	r19, 0x00	; 0
    3f1e:	8b 81       	ldd	r24, Y+3	; 0x03
    3f20:	9c 81       	ldd	r25, Y+4	; 0x04
    3f22:	fc 01       	movw	r30, r24
    3f24:	e2 0f       	add	r30, r18
    3f26:	f3 1f       	adc	r31, r19
    3f28:	80 81       	ld	r24, Z
    3f2a:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <HCLCD_SendData>
		Local_Counter ++;
    3f2e:	89 81       	ldd	r24, Y+1	; 0x01
    3f30:	8f 5f       	subi	r24, 0xFF	; 255
    3f32:	89 83       	std	Y+1, r24	; 0x01

error_state_t HCLCD_SendString(const char *Copy_pu8String)
{
	error_state_t Local_ErrorState = R_OK;
	u8 Local_Counter = 0;
	while (Copy_pu8String[Local_Counter] != NULL )
    3f34:	89 81       	ldd	r24, Y+1	; 0x01
    3f36:	28 2f       	mov	r18, r24
    3f38:	30 e0       	ldi	r19, 0x00	; 0
    3f3a:	8b 81       	ldd	r24, Y+3	; 0x03
    3f3c:	9c 81       	ldd	r25, Y+4	; 0x04
    3f3e:	fc 01       	movw	r30, r24
    3f40:	e2 0f       	add	r30, r18
    3f42:	f3 1f       	adc	r31, r19
    3f44:	80 81       	ld	r24, Z
    3f46:	88 23       	and	r24, r24
    3f48:	39 f7       	brne	.-50     	; 0x3f18 <HCLCD_SendString+0x18>
	{
		HCLCD_SendData(Copy_pu8String[Local_Counter]);
		Local_Counter ++;
	}

	return Local_ErrorState;
    3f4a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3f4c:	0f 90       	pop	r0
    3f4e:	0f 90       	pop	r0
    3f50:	0f 90       	pop	r0
    3f52:	0f 90       	pop	r0
    3f54:	cf 91       	pop	r28
    3f56:	df 91       	pop	r29
    3f58:	08 95       	ret

00003f5a <HCLCD_SendNumber>:

error_state_t HCLCD_SendNumber(f32 Copy_u32Number)
{
    3f5a:	0f 93       	push	r16
    3f5c:	1f 93       	push	r17
    3f5e:	df 93       	push	r29
    3f60:	cf 93       	push	r28
    3f62:	cd b7       	in	r28, 0x3d	; 61
    3f64:	de b7       	in	r29, 0x3e	; 62
    3f66:	6e 97       	sbiw	r28, 0x1e	; 30
    3f68:	0f b6       	in	r0, 0x3f	; 63
    3f6a:	f8 94       	cli
    3f6c:	de bf       	out	0x3e, r29	; 62
    3f6e:	0f be       	out	0x3f, r0	; 63
    3f70:	cd bf       	out	0x3d, r28	; 61
    3f72:	6b 8f       	std	Y+27, r22	; 0x1b
    3f74:	7c 8f       	std	Y+28, r23	; 0x1c
    3f76:	8d 8f       	std	Y+29, r24	; 0x1d
    3f78:	9e 8f       	std	Y+30, r25	; 0x1e
	error_state_t Local_ErrorState = R_OK;
    3f7a:	81 e0       	ldi	r24, 0x01	; 1
    3f7c:	8e 83       	std	Y+6, r24	; 0x06

	s32 Local_s32Number = Copy_u32Number;
    3f7e:	6b 8d       	ldd	r22, Y+27	; 0x1b
    3f80:	7c 8d       	ldd	r23, Y+28	; 0x1c
    3f82:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3f84:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3f86:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    3f8a:	dc 01       	movw	r26, r24
    3f8c:	cb 01       	movw	r24, r22
    3f8e:	8a 83       	std	Y+2, r24	; 0x02
    3f90:	9b 83       	std	Y+3, r25	; 0x03
    3f92:	ac 83       	std	Y+4, r26	; 0x04
    3f94:	bd 83       	std	Y+5, r27	; 0x05

	if(Local_s32Number == 0)
    3f96:	8a 81       	ldd	r24, Y+2	; 0x02
    3f98:	9b 81       	ldd	r25, Y+3	; 0x03
    3f9a:	ac 81       	ldd	r26, Y+4	; 0x04
    3f9c:	bd 81       	ldd	r27, Y+5	; 0x05
    3f9e:	00 97       	sbiw	r24, 0x00	; 0
    3fa0:	a1 05       	cpc	r26, r1
    3fa2:	b1 05       	cpc	r27, r1
    3fa4:	21 f4       	brne	.+8      	; 0x3fae <HCLCD_SendNumber+0x54>
	{
		HCLCD_SendData('0');
    3fa6:	80 e3       	ldi	r24, 0x30	; 48
    3fa8:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <HCLCD_SendData>
    3fac:	18 c0       	rjmp	.+48     	; 0x3fde <HCLCD_SendNumber+0x84>
	}
	else if (Local_s32Number <0)
    3fae:	8a 81       	ldd	r24, Y+2	; 0x02
    3fb0:	9b 81       	ldd	r25, Y+3	; 0x03
    3fb2:	ac 81       	ldd	r26, Y+4	; 0x04
    3fb4:	bd 81       	ldd	r27, Y+5	; 0x05
    3fb6:	bb 23       	and	r27, r27
    3fb8:	94 f4       	brge	.+36     	; 0x3fde <HCLCD_SendNumber+0x84>
	{
		HCLCD_SendData('-');
    3fba:	8d e2       	ldi	r24, 0x2D	; 45
    3fbc:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <HCLCD_SendData>
		Local_s32Number = Local_s32Number *(-1);
    3fc0:	8a 81       	ldd	r24, Y+2	; 0x02
    3fc2:	9b 81       	ldd	r25, Y+3	; 0x03
    3fc4:	ac 81       	ldd	r26, Y+4	; 0x04
    3fc6:	bd 81       	ldd	r27, Y+5	; 0x05
    3fc8:	b0 95       	com	r27
    3fca:	a0 95       	com	r26
    3fcc:	90 95       	com	r25
    3fce:	81 95       	neg	r24
    3fd0:	9f 4f       	sbci	r25, 0xFF	; 255
    3fd2:	af 4f       	sbci	r26, 0xFF	; 255
    3fd4:	bf 4f       	sbci	r27, 0xFF	; 255
    3fd6:	8a 83       	std	Y+2, r24	; 0x02
    3fd8:	9b 83       	std	Y+3, r25	; 0x03
    3fda:	ac 83       	std	Y+4, r26	; 0x04
    3fdc:	bd 83       	std	Y+5, r27	; 0x05

	}
	u8 Local_u8Array[20]={0};
    3fde:	84 e1       	ldi	r24, 0x14	; 20
    3fe0:	fe 01       	movw	r30, r28
    3fe2:	37 96       	adiw	r30, 0x07	; 7
    3fe4:	df 01       	movw	r26, r30
    3fe6:	98 2f       	mov	r25, r24
    3fe8:	1d 92       	st	X+, r1
    3fea:	9a 95       	dec	r25
    3fec:	e9 f7       	brne	.-6      	; 0x3fe8 <HCLCD_SendNumber+0x8e>
	s8 local_s8Counter =0;
    3fee:	19 82       	std	Y+1, r1	; 0x01
    3ff0:	2f c0       	rjmp	.+94     	; 0x4050 <HCLCD_SendNumber+0xf6>
	while (Local_s32Number != 0)
	{
		Local_u8Array[local_s8Counter]= Local_s32Number%10;
    3ff2:	89 81       	ldd	r24, Y+1	; 0x01
    3ff4:	08 2f       	mov	r16, r24
    3ff6:	11 27       	eor	r17, r17
    3ff8:	07 fd       	sbrc	r16, 7
    3ffa:	10 95       	com	r17
    3ffc:	8a 81       	ldd	r24, Y+2	; 0x02
    3ffe:	9b 81       	ldd	r25, Y+3	; 0x03
    4000:	ac 81       	ldd	r26, Y+4	; 0x04
    4002:	bd 81       	ldd	r27, Y+5	; 0x05
    4004:	2a e0       	ldi	r18, 0x0A	; 10
    4006:	30 e0       	ldi	r19, 0x00	; 0
    4008:	40 e0       	ldi	r20, 0x00	; 0
    400a:	50 e0       	ldi	r21, 0x00	; 0
    400c:	bc 01       	movw	r22, r24
    400e:	cd 01       	movw	r24, r26
    4010:	0e 94 04 26 	call	0x4c08	; 0x4c08 <__divmodsi4>
    4014:	dc 01       	movw	r26, r24
    4016:	cb 01       	movw	r24, r22
    4018:	28 2f       	mov	r18, r24
    401a:	ce 01       	movw	r24, r28
    401c:	07 96       	adiw	r24, 0x07	; 7
    401e:	fc 01       	movw	r30, r24
    4020:	e0 0f       	add	r30, r16
    4022:	f1 1f       	adc	r31, r17
    4024:	20 83       	st	Z, r18
		Local_s32Number/=10;
    4026:	8a 81       	ldd	r24, Y+2	; 0x02
    4028:	9b 81       	ldd	r25, Y+3	; 0x03
    402a:	ac 81       	ldd	r26, Y+4	; 0x04
    402c:	bd 81       	ldd	r27, Y+5	; 0x05
    402e:	2a e0       	ldi	r18, 0x0A	; 10
    4030:	30 e0       	ldi	r19, 0x00	; 0
    4032:	40 e0       	ldi	r20, 0x00	; 0
    4034:	50 e0       	ldi	r21, 0x00	; 0
    4036:	bc 01       	movw	r22, r24
    4038:	cd 01       	movw	r24, r26
    403a:	0e 94 04 26 	call	0x4c08	; 0x4c08 <__divmodsi4>
    403e:	da 01       	movw	r26, r20
    4040:	c9 01       	movw	r24, r18
    4042:	8a 83       	std	Y+2, r24	; 0x02
    4044:	9b 83       	std	Y+3, r25	; 0x03
    4046:	ac 83       	std	Y+4, r26	; 0x04
    4048:	bd 83       	std	Y+5, r27	; 0x05
		local_s8Counter++;
    404a:	89 81       	ldd	r24, Y+1	; 0x01
    404c:	8f 5f       	subi	r24, 0xFF	; 255
    404e:	89 83       	std	Y+1, r24	; 0x01
		Local_s32Number = Local_s32Number *(-1);

	}
	u8 Local_u8Array[20]={0};
	s8 local_s8Counter =0;
	while (Local_s32Number != 0)
    4050:	8a 81       	ldd	r24, Y+2	; 0x02
    4052:	9b 81       	ldd	r25, Y+3	; 0x03
    4054:	ac 81       	ldd	r26, Y+4	; 0x04
    4056:	bd 81       	ldd	r27, Y+5	; 0x05
    4058:	00 97       	sbiw	r24, 0x00	; 0
    405a:	a1 05       	cpc	r26, r1
    405c:	b1 05       	cpc	r27, r1
    405e:	49 f6       	brne	.-110    	; 0x3ff2 <HCLCD_SendNumber+0x98>
	{
		Local_u8Array[local_s8Counter]= Local_s32Number%10;
		Local_s32Number/=10;
		local_s8Counter++;
	}
	local_s8Counter--;
    4060:	89 81       	ldd	r24, Y+1	; 0x01
    4062:	81 50       	subi	r24, 0x01	; 1
    4064:	89 83       	std	Y+1, r24	; 0x01
    4066:	11 c0       	rjmp	.+34     	; 0x408a <HCLCD_SendNumber+0x130>
	while (local_s8Counter>=0)
	{
		HCLCD_SendData(Local_u8Array[local_s8Counter]+'0');
    4068:	89 81       	ldd	r24, Y+1	; 0x01
    406a:	28 2f       	mov	r18, r24
    406c:	33 27       	eor	r19, r19
    406e:	27 fd       	sbrc	r18, 7
    4070:	30 95       	com	r19
    4072:	ce 01       	movw	r24, r28
    4074:	07 96       	adiw	r24, 0x07	; 7
    4076:	fc 01       	movw	r30, r24
    4078:	e2 0f       	add	r30, r18
    407a:	f3 1f       	adc	r31, r19
    407c:	80 81       	ld	r24, Z
    407e:	80 5d       	subi	r24, 0xD0	; 208
    4080:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <HCLCD_SendData>
		local_s8Counter--;
    4084:	89 81       	ldd	r24, Y+1	; 0x01
    4086:	81 50       	subi	r24, 0x01	; 1
    4088:	89 83       	std	Y+1, r24	; 0x01
		Local_u8Array[local_s8Counter]= Local_s32Number%10;
		Local_s32Number/=10;
		local_s8Counter++;
	}
	local_s8Counter--;
	while (local_s8Counter>=0)
    408a:	89 81       	ldd	r24, Y+1	; 0x01
    408c:	88 23       	and	r24, r24
    408e:	64 f7       	brge	.-40     	; 0x4068 <HCLCD_SendNumber+0x10e>
	{
		HCLCD_SendData(Local_u8Array[local_s8Counter]+'0');
		local_s8Counter--;
	}
	return Local_ErrorState;
    4090:	8e 81       	ldd	r24, Y+6	; 0x06
}
    4092:	6e 96       	adiw	r28, 0x1e	; 30
    4094:	0f b6       	in	r0, 0x3f	; 63
    4096:	f8 94       	cli
    4098:	de bf       	out	0x3e, r29	; 62
    409a:	0f be       	out	0x3f, r0	; 63
    409c:	cd bf       	out	0x3d, r28	; 61
    409e:	cf 91       	pop	r28
    40a0:	df 91       	pop	r29
    40a2:	1f 91       	pop	r17
    40a4:	0f 91       	pop	r16
    40a6:	08 95       	ret

000040a8 <HCLCD_voidWriteFloatNumber>:

void HCLCD_voidWriteFloatNumber(f32 Copy_f32FloatNumber )
{
    40a8:	df 93       	push	r29
    40aa:	cf 93       	push	r28
    40ac:	cd b7       	in	r28, 0x3d	; 61
    40ae:	de b7       	in	r29, 0x3e	; 62
    40b0:	28 97       	sbiw	r28, 0x08	; 8
    40b2:	0f b6       	in	r0, 0x3f	; 63
    40b4:	f8 94       	cli
    40b6:	de bf       	out	0x3e, r29	; 62
    40b8:	0f be       	out	0x3f, r0	; 63
    40ba:	cd bf       	out	0x3d, r28	; 61
    40bc:	6d 83       	std	Y+5, r22	; 0x05
    40be:	7e 83       	std	Y+6, r23	; 0x06
    40c0:	8f 83       	std	Y+7, r24	; 0x07
    40c2:	98 87       	std	Y+8, r25	; 0x08

	if(Copy_f32FloatNumber == 0)
    40c4:	6d 81       	ldd	r22, Y+5	; 0x05
    40c6:	7e 81       	ldd	r23, Y+6	; 0x06
    40c8:	8f 81       	ldd	r24, Y+7	; 0x07
    40ca:	98 85       	ldd	r25, Y+8	; 0x08
    40cc:	20 e0       	ldi	r18, 0x00	; 0
    40ce:	30 e0       	ldi	r19, 0x00	; 0
    40d0:	40 e0       	ldi	r20, 0x00	; 0
    40d2:	50 e0       	ldi	r21, 0x00	; 0
    40d4:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    40d8:	88 23       	and	r24, r24
    40da:	39 f4       	brne	.+14     	; 0x40ea <HCLCD_voidWriteFloatNumber+0x42>
	{
		HCLCD_SendNumber(0);
    40dc:	60 e0       	ldi	r22, 0x00	; 0
    40de:	70 e0       	ldi	r23, 0x00	; 0
    40e0:	80 e0       	ldi	r24, 0x00	; 0
    40e2:	90 e0       	ldi	r25, 0x00	; 0
    40e4:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <HCLCD_SendNumber>
    40e8:	89 c0       	rjmp	.+274    	; 0x41fc <HCLCD_voidWriteFloatNumber+0x154>
	}

	else
	{
		s32 Local_s32DecemalNum=Copy_f32FloatNumber;
    40ea:	6d 81       	ldd	r22, Y+5	; 0x05
    40ec:	7e 81       	ldd	r23, Y+6	; 0x06
    40ee:	8f 81       	ldd	r24, Y+7	; 0x07
    40f0:	98 85       	ldd	r25, Y+8	; 0x08
    40f2:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    40f6:	dc 01       	movw	r26, r24
    40f8:	cb 01       	movw	r24, r22
    40fa:	89 83       	std	Y+1, r24	; 0x01
    40fc:	9a 83       	std	Y+2, r25	; 0x02
    40fe:	ab 83       	std	Y+3, r26	; 0x03
    4100:	bc 83       	std	Y+4, r27	; 0x04
		HCLCD_SendNumber(Local_s32DecemalNum);
    4102:	69 81       	ldd	r22, Y+1	; 0x01
    4104:	7a 81       	ldd	r23, Y+2	; 0x02
    4106:	8b 81       	ldd	r24, Y+3	; 0x03
    4108:	9c 81       	ldd	r25, Y+4	; 0x04
    410a:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    410e:	dc 01       	movw	r26, r24
    4110:	cb 01       	movw	r24, r22
    4112:	bc 01       	movw	r22, r24
    4114:	cd 01       	movw	r24, r26
    4116:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <HCLCD_SendNumber>

		Copy_f32FloatNumber = Copy_f32FloatNumber -Local_s32DecemalNum;
    411a:	69 81       	ldd	r22, Y+1	; 0x01
    411c:	7a 81       	ldd	r23, Y+2	; 0x02
    411e:	8b 81       	ldd	r24, Y+3	; 0x03
    4120:	9c 81       	ldd	r25, Y+4	; 0x04
    4122:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    4126:	9b 01       	movw	r18, r22
    4128:	ac 01       	movw	r20, r24
    412a:	6d 81       	ldd	r22, Y+5	; 0x05
    412c:	7e 81       	ldd	r23, Y+6	; 0x06
    412e:	8f 81       	ldd	r24, Y+7	; 0x07
    4130:	98 85       	ldd	r25, Y+8	; 0x08
    4132:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    4136:	dc 01       	movw	r26, r24
    4138:	cb 01       	movw	r24, r22
    413a:	8d 83       	std	Y+5, r24	; 0x05
    413c:	9e 83       	std	Y+6, r25	; 0x06
    413e:	af 83       	std	Y+7, r26	; 0x07
    4140:	b8 87       	std	Y+8, r27	; 0x08
		if (Copy_f32FloatNumber>0)
    4142:	6d 81       	ldd	r22, Y+5	; 0x05
    4144:	7e 81       	ldd	r23, Y+6	; 0x06
    4146:	8f 81       	ldd	r24, Y+7	; 0x07
    4148:	98 85       	ldd	r25, Y+8	; 0x08
    414a:	20 e0       	ldi	r18, 0x00	; 0
    414c:	30 e0       	ldi	r19, 0x00	; 0
    414e:	40 e0       	ldi	r20, 0x00	; 0
    4150:	50 e0       	ldi	r21, 0x00	; 0
    4152:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4156:	18 16       	cp	r1, r24
    4158:	0c f0       	brlt	.+2      	; 0x415c <HCLCD_voidWriteFloatNumber+0xb4>
    415a:	50 c0       	rjmp	.+160    	; 0x41fc <HCLCD_voidWriteFloatNumber+0x154>
		{
			HCLCD_SendData('.');
    415c:	8e e2       	ldi	r24, 0x2E	; 46
    415e:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <HCLCD_SendData>
			Copy_f32FloatNumber*=100000;
    4162:	6d 81       	ldd	r22, Y+5	; 0x05
    4164:	7e 81       	ldd	r23, Y+6	; 0x06
    4166:	8f 81       	ldd	r24, Y+7	; 0x07
    4168:	98 85       	ldd	r25, Y+8	; 0x08
    416a:	20 e0       	ldi	r18, 0x00	; 0
    416c:	30 e5       	ldi	r19, 0x50	; 80
    416e:	43 ec       	ldi	r20, 0xC3	; 195
    4170:	57 e4       	ldi	r21, 0x47	; 71
    4172:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4176:	dc 01       	movw	r26, r24
    4178:	cb 01       	movw	r24, r22
    417a:	8d 83       	std	Y+5, r24	; 0x05
    417c:	9e 83       	std	Y+6, r25	; 0x06
    417e:	af 83       	std	Y+7, r26	; 0x07
    4180:	b8 87       	std	Y+8, r27	; 0x08
			Local_s32DecemalNum = Copy_f32FloatNumber;
    4182:	6d 81       	ldd	r22, Y+5	; 0x05
    4184:	7e 81       	ldd	r23, Y+6	; 0x06
    4186:	8f 81       	ldd	r24, Y+7	; 0x07
    4188:	98 85       	ldd	r25, Y+8	; 0x08
    418a:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    418e:	dc 01       	movw	r26, r24
    4190:	cb 01       	movw	r24, r22
    4192:	89 83       	std	Y+1, r24	; 0x01
    4194:	9a 83       	std	Y+2, r25	; 0x02
    4196:	ab 83       	std	Y+3, r26	; 0x03
    4198:	bc 83       	std	Y+4, r27	; 0x04
    419a:	12 c0       	rjmp	.+36     	; 0x41c0 <HCLCD_voidWriteFloatNumber+0x118>

			while (Local_s32DecemalNum%10 == 0)
			{
				Local_s32DecemalNum/=10;
    419c:	89 81       	ldd	r24, Y+1	; 0x01
    419e:	9a 81       	ldd	r25, Y+2	; 0x02
    41a0:	ab 81       	ldd	r26, Y+3	; 0x03
    41a2:	bc 81       	ldd	r27, Y+4	; 0x04
    41a4:	2a e0       	ldi	r18, 0x0A	; 10
    41a6:	30 e0       	ldi	r19, 0x00	; 0
    41a8:	40 e0       	ldi	r20, 0x00	; 0
    41aa:	50 e0       	ldi	r21, 0x00	; 0
    41ac:	bc 01       	movw	r22, r24
    41ae:	cd 01       	movw	r24, r26
    41b0:	0e 94 04 26 	call	0x4c08	; 0x4c08 <__divmodsi4>
    41b4:	da 01       	movw	r26, r20
    41b6:	c9 01       	movw	r24, r18
    41b8:	89 83       	std	Y+1, r24	; 0x01
    41ba:	9a 83       	std	Y+2, r25	; 0x02
    41bc:	ab 83       	std	Y+3, r26	; 0x03
    41be:	bc 83       	std	Y+4, r27	; 0x04
		{
			HCLCD_SendData('.');
			Copy_f32FloatNumber*=100000;
			Local_s32DecemalNum = Copy_f32FloatNumber;

			while (Local_s32DecemalNum%10 == 0)
    41c0:	89 81       	ldd	r24, Y+1	; 0x01
    41c2:	9a 81       	ldd	r25, Y+2	; 0x02
    41c4:	ab 81       	ldd	r26, Y+3	; 0x03
    41c6:	bc 81       	ldd	r27, Y+4	; 0x04
    41c8:	2a e0       	ldi	r18, 0x0A	; 10
    41ca:	30 e0       	ldi	r19, 0x00	; 0
    41cc:	40 e0       	ldi	r20, 0x00	; 0
    41ce:	50 e0       	ldi	r21, 0x00	; 0
    41d0:	bc 01       	movw	r22, r24
    41d2:	cd 01       	movw	r24, r26
    41d4:	0e 94 04 26 	call	0x4c08	; 0x4c08 <__divmodsi4>
    41d8:	dc 01       	movw	r26, r24
    41da:	cb 01       	movw	r24, r22
    41dc:	00 97       	sbiw	r24, 0x00	; 0
    41de:	a1 05       	cpc	r26, r1
    41e0:	b1 05       	cpc	r27, r1
    41e2:	e1 f2       	breq	.-72     	; 0x419c <HCLCD_voidWriteFloatNumber+0xf4>
			{
				Local_s32DecemalNum/=10;
			}
			HCLCD_SendNumber(Local_s32DecemalNum);
    41e4:	69 81       	ldd	r22, Y+1	; 0x01
    41e6:	7a 81       	ldd	r23, Y+2	; 0x02
    41e8:	8b 81       	ldd	r24, Y+3	; 0x03
    41ea:	9c 81       	ldd	r25, Y+4	; 0x04
    41ec:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    41f0:	dc 01       	movw	r26, r24
    41f2:	cb 01       	movw	r24, r22
    41f4:	bc 01       	movw	r22, r24
    41f6:	cd 01       	movw	r24, r26
    41f8:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <HCLCD_SendNumber>
		//else
		//{
		//	Local_s32DecemalNum /=100;
		//}
	}
}
    41fc:	28 96       	adiw	r28, 0x08	; 8
    41fe:	0f b6       	in	r0, 0x3f	; 63
    4200:	f8 94       	cli
    4202:	de bf       	out	0x3e, r29	; 62
    4204:	0f be       	out	0x3f, r0	; 63
    4206:	cd bf       	out	0x3d, r28	; 61
    4208:	cf 91       	pop	r28
    420a:	df 91       	pop	r29
    420c:	08 95       	ret

0000420e <HCLCD_WriteSpecialCharacter>:
    HCLCD_GoToXY(row, col);
    HCLCD_SendNumber(value);
}****/

error_state_t HCLCD_WriteSpecialCharacter(u8* Copy_pu8Pattern, u8 Copy_u8PatternNumber, u8 Copy_u8XPos, u8 Copy_u8YPos)
{
    420e:	df 93       	push	r29
    4210:	cf 93       	push	r28
    4212:	cd b7       	in	r28, 0x3d	; 61
    4214:	de b7       	in	r29, 0x3e	; 62
    4216:	28 97       	sbiw	r28, 0x08	; 8
    4218:	0f b6       	in	r0, 0x3f	; 63
    421a:	f8 94       	cli
    421c:	de bf       	out	0x3e, r29	; 62
    421e:	0f be       	out	0x3f, r0	; 63
    4220:	cd bf       	out	0x3d, r28	; 61
    4222:	9d 83       	std	Y+5, r25	; 0x05
    4224:	8c 83       	std	Y+4, r24	; 0x04
    4226:	6e 83       	std	Y+6, r22	; 0x06
    4228:	4f 83       	std	Y+7, r20	; 0x07
    422a:	28 87       	std	Y+8, r18	; 0x08
	error_state_t Local_ErrorState = R_OK;
    422c:	81 e0       	ldi	r24, 0x01	; 1
    422e:	8b 83       	std	Y+3, r24	; 0x03
	specialCharacter  = ON;
    4230:	81 e0       	ldi	r24, 0x01	; 1
    4232:	80 93 f1 01 	sts	0x01F1, r24

	u8 Local_u8CGRAMAddress= 0;
    4236:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8Iterator =0;
    4238:	19 82       	std	Y+1, r1	; 0x01

	/* Calculate the CGRAM address whose each block is 8 bytes */
	Local_u8CGRAMAddress =Copy_u8PatternNumber*8;
    423a:	8e 81       	ldd	r24, Y+6	; 0x06
    423c:	88 2f       	mov	r24, r24
    423e:	90 e0       	ldi	r25, 0x00	; 0
    4240:	88 0f       	add	r24, r24
    4242:	99 1f       	adc	r25, r25
    4244:	88 0f       	add	r24, r24
    4246:	99 1f       	adc	r25, r25
    4248:	88 0f       	add	r24, r24
    424a:	99 1f       	adc	r25, r25
    424c:	8a 83       	std	Y+2, r24	; 0x02

	/* Send CGRAM Address command to LCD, with setting bit 6, clearing bit 7*/
	HCLCD_SendCommand(Local_u8CGRAMAddress+64);
    424e:	8a 81       	ldd	r24, Y+2	; 0x02
    4250:	80 5c       	subi	r24, 0xC0	; 192
    4252:	0e 94 7a 1e 	call	0x3cf4	; 0x3cf4 <HCLCD_SendCommand>

	/* Write the pattern into CGRAM */

	for (Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++)
    4256:	19 82       	std	Y+1, r1	; 0x01
    4258:	0e c0       	rjmp	.+28     	; 0x4276 <HCLCD_WriteSpecialCharacter+0x68>
	{
		HCLCD_SendData(Copy_pu8Pattern[Local_u8Iterator]);
    425a:	89 81       	ldd	r24, Y+1	; 0x01
    425c:	28 2f       	mov	r18, r24
    425e:	30 e0       	ldi	r19, 0x00	; 0
    4260:	8c 81       	ldd	r24, Y+4	; 0x04
    4262:	9d 81       	ldd	r25, Y+5	; 0x05
    4264:	fc 01       	movw	r30, r24
    4266:	e2 0f       	add	r30, r18
    4268:	f3 1f       	adc	r31, r19
    426a:	80 81       	ld	r24, Z
    426c:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <HCLCD_SendData>
	/* Send CGRAM Address command to LCD, with setting bit 6, clearing bit 7*/
	HCLCD_SendCommand(Local_u8CGRAMAddress+64);

	/* Write the pattern into CGRAM */

	for (Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++)
    4270:	89 81       	ldd	r24, Y+1	; 0x01
    4272:	8f 5f       	subi	r24, 0xFF	; 255
    4274:	89 83       	std	Y+1, r24	; 0x01
    4276:	89 81       	ldd	r24, Y+1	; 0x01
    4278:	88 30       	cpi	r24, 0x08	; 8
    427a:	78 f3       	brcs	.-34     	; 0x425a <HCLCD_WriteSpecialCharacter+0x4c>
	{
		HCLCD_SendData(Copy_pu8Pattern[Local_u8Iterator]);
	}

	/* go back to the DDRAM to display the Pattern*/
	HCLCD_GoToXY(Copy_u8XPos,Copy_u8YPos);
    427c:	8f 81       	ldd	r24, Y+7	; 0x07
    427e:	68 85       	ldd	r22, Y+8	; 0x08
    4280:	0e 94 51 21 	call	0x42a2	; 0x42a2 <HCLCD_GoToXY>
	/* Display the pattern written in the CGRAM*/
	HCLCD_SendData(Copy_u8PatternNumber);
    4284:	8e 81       	ldd	r24, Y+6	; 0x06
    4286:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <HCLCD_SendData>
	specialCharacter  = OFF;
    428a:	10 92 f1 01 	sts	0x01F1, r1

	return Local_ErrorState;
    428e:	8b 81       	ldd	r24, Y+3	; 0x03

}
    4290:	28 96       	adiw	r28, 0x08	; 8
    4292:	0f b6       	in	r0, 0x3f	; 63
    4294:	f8 94       	cli
    4296:	de bf       	out	0x3e, r29	; 62
    4298:	0f be       	out	0x3f, r0	; 63
    429a:	cd bf       	out	0x3d, r28	; 61
    429c:	cf 91       	pop	r28
    429e:	df 91       	pop	r29
    42a0:	08 95       	ret

000042a2 <HCLCD_GoToXY>:
	return Local_ErrorState;

}*/

error_state_t HCLCD_GoToXY(u8 Copy_u8Xpos, u8 Copy_u8Ypos)
{
    42a2:	df 93       	push	r29
    42a4:	cf 93       	push	r28
    42a6:	cd b7       	in	r28, 0x3d	; 61
    42a8:	de b7       	in	r29, 0x3e	; 62
    42aa:	28 97       	sbiw	r28, 0x08	; 8
    42ac:	0f b6       	in	r0, 0x3f	; 63
    42ae:	f8 94       	cli
    42b0:	de bf       	out	0x3e, r29	; 62
    42b2:	0f be       	out	0x3f, r0	; 63
    42b4:	cd bf       	out	0x3d, r28	; 61
    42b6:	8f 83       	std	Y+7, r24	; 0x07
    42b8:	68 87       	std	Y+8, r22	; 0x08
	error_state_t Local_ErrorState = R_OK;
    42ba:	81 e0       	ldi	r24, 0x01	; 1
    42bc:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Address = 0;
    42be:	19 82       	std	Y+1, r1	; 0x01
	Local_u8SetPositionY = Copy_u8Ypos;
    42c0:	88 85       	ldd	r24, Y+8	; 0x08
    42c2:	80 93 f3 01 	sts	0x01F3, r24
	Local_u8SetPositionX = Copy_u8Xpos;
    42c6:	8f 81       	ldd	r24, Y+7	; 0x07
    42c8:	80 93 f2 01 	sts	0x01F2, r24

	// Array to store row addresses
	u8 RowAddresses[] = {CLCD_ROW_ADDRESS_0, CLCD_ROW_ADDRESS_1, CLCD_ROW_ADDRESS_2, CLCD_ROW_ADDRESS_3};
    42cc:	1b 82       	std	Y+3, r1	; 0x03
    42ce:	80 e4       	ldi	r24, 0x40	; 64
    42d0:	8c 83       	std	Y+4, r24	; 0x04
    42d2:	84 e1       	ldi	r24, 0x14	; 20
    42d4:	8d 83       	std	Y+5, r24	; 0x05
    42d6:	84 e5       	ldi	r24, 0x54	; 84
    42d8:	8e 83       	std	Y+6, r24	; 0x06

	// Check if Copy_u8Xpos is within a valid range (0-3)
	if (Copy_u8Xpos <= CLCD_ROW_NUM)
    42da:	8f 81       	ldd	r24, Y+7	; 0x07
    42dc:	84 30       	cpi	r24, 0x04	; 4
    42de:	88 f4       	brcc	.+34     	; 0x4302 <HCLCD_GoToXY+0x60>
	{
		// Calculate the LCD address based on row and column
		Local_u8Address = RowAddresses[Copy_u8Xpos] + Copy_u8Ypos;
    42e0:	8f 81       	ldd	r24, Y+7	; 0x07
    42e2:	28 2f       	mov	r18, r24
    42e4:	30 e0       	ldi	r19, 0x00	; 0
    42e6:	ce 01       	movw	r24, r28
    42e8:	03 96       	adiw	r24, 0x03	; 3
    42ea:	fc 01       	movw	r30, r24
    42ec:	e2 0f       	add	r30, r18
    42ee:	f3 1f       	adc	r31, r19
    42f0:	90 81       	ld	r25, Z
    42f2:	88 85       	ldd	r24, Y+8	; 0x08
    42f4:	89 0f       	add	r24, r25
    42f6:	89 83       	std	Y+1, r24	; 0x01

		// Set the cursor position on the LCD
		HCLCD_SendCommand(Local_u8Address | CLCD_CURSOR_POSITION_CMD); // Add 0x80 to set the cursor position command
    42f8:	89 81       	ldd	r24, Y+1	; 0x01
    42fa:	80 68       	ori	r24, 0x80	; 128
    42fc:	0e 94 7a 1e 	call	0x3cf4	; 0x3cf4 <HCLCD_SendCommand>
    4300:	01 c0       	rjmp	.+2      	; 0x4304 <HCLCD_GoToXY+0x62>
	}
	else
	{
		// Invalid row value, set an error state
		Local_ErrorState = R_NOK;
    4302:	1a 82       	std	Y+2, r1	; 0x02
	}

	return Local_ErrorState;
    4304:	8a 81       	ldd	r24, Y+2	; 0x02
}
    4306:	28 96       	adiw	r28, 0x08	; 8
    4308:	0f b6       	in	r0, 0x3f	; 63
    430a:	f8 94       	cli
    430c:	de bf       	out	0x3e, r29	; 62
    430e:	0f be       	out	0x3f, r0	; 63
    4310:	cd bf       	out	0x3d, r28	; 61
    4312:	cf 91       	pop	r28
    4314:	df 91       	pop	r29
    4316:	08 95       	ret

00004318 <CLCD_CurrentPosition>:


/********************* Static Functions *************************/

static void CLCD_CurrentPosition(void)
{
    4318:	df 93       	push	r29
    431a:	cf 93       	push	r28
    431c:	cd b7       	in	r28, 0x3d	; 61
    431e:	de b7       	in	r29, 0x3e	; 62
	if(Local_u8SetPositionY>CLCD_COL_NUM)
    4320:	80 91 f3 01 	lds	r24, 0x01F3
    4324:	84 31       	cpi	r24, 0x14	; 20
    4326:	a0 f0       	brcs	.+40     	; 0x4350 <CLCD_CurrentPosition+0x38>
	{
		Local_u8SetPositionX++;
    4328:	80 91 f2 01 	lds	r24, 0x01F2
    432c:	8f 5f       	subi	r24, 0xFF	; 255
    432e:	80 93 f2 01 	sts	0x01F2, r24
		if(Local_u8SetPositionX>CLCD_ROW_NUM)
    4332:	80 91 f2 01 	lds	r24, 0x01F2
    4336:	84 30       	cpi	r24, 0x04	; 4
    4338:	10 f0       	brcs	.+4      	; 0x433e <CLCD_CurrentPosition+0x26>
		{
			Local_u8SetPositionX = X_INITIAL_POSITION;
    433a:	10 92 f2 01 	sts	0x01F2, r1
		}
		Local_u8SetPositionY = Y_INITIAL_POSITION;
    433e:	10 92 f3 01 	sts	0x01F3, r1
		HCLCD_GoToXY(Local_u8SetPositionX,Local_u8SetPositionY);
    4342:	80 91 f2 01 	lds	r24, 0x01F2
    4346:	90 91 f3 01 	lds	r25, 0x01F3
    434a:	69 2f       	mov	r22, r25
    434c:	0e 94 51 21 	call	0x42a2	; 0x42a2 <HCLCD_GoToXY>
	}
	Local_u8SetPositionY++;
    4350:	80 91 f3 01 	lds	r24, 0x01F3
    4354:	8f 5f       	subi	r24, 0xFF	; 255
    4356:	80 93 f3 01 	sts	0x01F3, r24
}
    435a:	cf 91       	pop	r28
    435c:	df 91       	pop	r29
    435e:	08 95       	ret

00004360 <H_LCD_void_latchByte>:


static void H_LCD_void_latchByte(u8 copy_u8Byte)
{
    4360:	df 93       	push	r29
    4362:	cf 93       	push	r28
    4364:	cd b7       	in	r28, 0x3d	; 61
    4366:	de b7       	in	r29, 0x3e	; 62
    4368:	e9 97       	sbiw	r28, 0x39	; 57
    436a:	0f b6       	in	r0, 0x3f	; 63
    436c:	f8 94       	cli
    436e:	de bf       	out	0x3e, r29	; 62
    4370:	0f be       	out	0x3f, r0	; 63
    4372:	cd bf       	out	0x3d, r28	; 61
    4374:	89 af       	std	Y+57, r24	; 0x39
#if CLCD_MODE == _4_BIT_MODE
	/* Send Command To Data Pin */
	MDIO_SetPinValue(CLCD_DATA_PORT, CLCD_DATA_4_PIN0, GET_BIT(copy_u8Byte,4));
    4376:	89 ad       	ldd	r24, Y+57	; 0x39
    4378:	82 95       	swap	r24
    437a:	8f 70       	andi	r24, 0x0F	; 15
    437c:	98 2f       	mov	r25, r24
    437e:	91 70       	andi	r25, 0x01	; 1
    4380:	81 e0       	ldi	r24, 0x01	; 1
    4382:	60 e0       	ldi	r22, 0x00	; 0
    4384:	49 2f       	mov	r20, r25
    4386:	0e 94 a8 10 	call	0x2150	; 0x2150 <MDIO_SetPinValue>
	MDIO_SetPinValue(CLCD_DATA_PORT, CLCD_DATA_4_PIN1, GET_BIT(copy_u8Byte,5));
    438a:	89 ad       	ldd	r24, Y+57	; 0x39
    438c:	82 95       	swap	r24
    438e:	86 95       	lsr	r24
    4390:	87 70       	andi	r24, 0x07	; 7
    4392:	98 2f       	mov	r25, r24
    4394:	91 70       	andi	r25, 0x01	; 1
    4396:	81 e0       	ldi	r24, 0x01	; 1
    4398:	61 e0       	ldi	r22, 0x01	; 1
    439a:	49 2f       	mov	r20, r25
    439c:	0e 94 a8 10 	call	0x2150	; 0x2150 <MDIO_SetPinValue>
	MDIO_SetPinValue(CLCD_DATA_PORT, CLCD_DATA_4_PIN2, GET_BIT(copy_u8Byte,6));
    43a0:	89 ad       	ldd	r24, Y+57	; 0x39
    43a2:	82 95       	swap	r24
    43a4:	86 95       	lsr	r24
    43a6:	86 95       	lsr	r24
    43a8:	83 70       	andi	r24, 0x03	; 3
    43aa:	98 2f       	mov	r25, r24
    43ac:	91 70       	andi	r25, 0x01	; 1
    43ae:	81 e0       	ldi	r24, 0x01	; 1
    43b0:	62 e0       	ldi	r22, 0x02	; 2
    43b2:	49 2f       	mov	r20, r25
    43b4:	0e 94 a8 10 	call	0x2150	; 0x2150 <MDIO_SetPinValue>
	MDIO_SetPinValue(CLCD_DATA_PORT, CLCD_DATA_4_PIN3, GET_BIT(copy_u8Byte,7));
    43b8:	89 ad       	ldd	r24, Y+57	; 0x39
    43ba:	98 2f       	mov	r25, r24
    43bc:	99 1f       	adc	r25, r25
    43be:	99 27       	eor	r25, r25
    43c0:	99 1f       	adc	r25, r25
    43c2:	81 e0       	ldi	r24, 0x01	; 1
    43c4:	64 e0       	ldi	r22, 0x04	; 4
    43c6:	49 2f       	mov	r20, r25
    43c8:	0e 94 a8 10 	call	0x2150	; 0x2150 <MDIO_SetPinValue>


	/* Enable CLCD */
	MDIO_SetPinValue(CLCD_CTRL_PORT, CLCD_EN_PIN, DIO_u8PIN_HIGH);
    43cc:	80 e0       	ldi	r24, 0x00	; 0
    43ce:	62 e0       	ldi	r22, 0x02	; 2
    43d0:	41 e0       	ldi	r20, 0x01	; 1
    43d2:	0e 94 a8 10 	call	0x2150	; 0x2150 <MDIO_SetPinValue>
    43d6:	80 e0       	ldi	r24, 0x00	; 0
    43d8:	90 e0       	ldi	r25, 0x00	; 0
    43da:	a0 e0       	ldi	r26, 0x00	; 0
    43dc:	b0 e4       	ldi	r27, 0x40	; 64
    43de:	8d ab       	std	Y+53, r24	; 0x35
    43e0:	9e ab       	std	Y+54, r25	; 0x36
    43e2:	af ab       	std	Y+55, r26	; 0x37
    43e4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    43e6:	6d a9       	ldd	r22, Y+53	; 0x35
    43e8:	7e a9       	ldd	r23, Y+54	; 0x36
    43ea:	8f a9       	ldd	r24, Y+55	; 0x37
    43ec:	98 ad       	ldd	r25, Y+56	; 0x38
    43ee:	20 e0       	ldi	r18, 0x00	; 0
    43f0:	30 e0       	ldi	r19, 0x00	; 0
    43f2:	4a e7       	ldi	r20, 0x7A	; 122
    43f4:	55 e4       	ldi	r21, 0x45	; 69
    43f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43fa:	dc 01       	movw	r26, r24
    43fc:	cb 01       	movw	r24, r22
    43fe:	89 ab       	std	Y+49, r24	; 0x31
    4400:	9a ab       	std	Y+50, r25	; 0x32
    4402:	ab ab       	std	Y+51, r26	; 0x33
    4404:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4406:	69 a9       	ldd	r22, Y+49	; 0x31
    4408:	7a a9       	ldd	r23, Y+50	; 0x32
    440a:	8b a9       	ldd	r24, Y+51	; 0x33
    440c:	9c a9       	ldd	r25, Y+52	; 0x34
    440e:	20 e0       	ldi	r18, 0x00	; 0
    4410:	30 e0       	ldi	r19, 0x00	; 0
    4412:	40 e8       	ldi	r20, 0x80	; 128
    4414:	5f e3       	ldi	r21, 0x3F	; 63
    4416:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    441a:	88 23       	and	r24, r24
    441c:	2c f4       	brge	.+10     	; 0x4428 <H_LCD_void_latchByte+0xc8>
		__ticks = 1;
    441e:	81 e0       	ldi	r24, 0x01	; 1
    4420:	90 e0       	ldi	r25, 0x00	; 0
    4422:	98 ab       	std	Y+48, r25	; 0x30
    4424:	8f a7       	std	Y+47, r24	; 0x2f
    4426:	3f c0       	rjmp	.+126    	; 0x44a6 <H_LCD_void_latchByte+0x146>
	else if (__tmp > 65535)
    4428:	69 a9       	ldd	r22, Y+49	; 0x31
    442a:	7a a9       	ldd	r23, Y+50	; 0x32
    442c:	8b a9       	ldd	r24, Y+51	; 0x33
    442e:	9c a9       	ldd	r25, Y+52	; 0x34
    4430:	20 e0       	ldi	r18, 0x00	; 0
    4432:	3f ef       	ldi	r19, 0xFF	; 255
    4434:	4f e7       	ldi	r20, 0x7F	; 127
    4436:	57 e4       	ldi	r21, 0x47	; 71
    4438:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    443c:	18 16       	cp	r1, r24
    443e:	4c f5       	brge	.+82     	; 0x4492 <H_LCD_void_latchByte+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4440:	6d a9       	ldd	r22, Y+53	; 0x35
    4442:	7e a9       	ldd	r23, Y+54	; 0x36
    4444:	8f a9       	ldd	r24, Y+55	; 0x37
    4446:	98 ad       	ldd	r25, Y+56	; 0x38
    4448:	20 e0       	ldi	r18, 0x00	; 0
    444a:	30 e0       	ldi	r19, 0x00	; 0
    444c:	40 e2       	ldi	r20, 0x20	; 32
    444e:	51 e4       	ldi	r21, 0x41	; 65
    4450:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4454:	dc 01       	movw	r26, r24
    4456:	cb 01       	movw	r24, r22
    4458:	bc 01       	movw	r22, r24
    445a:	cd 01       	movw	r24, r26
    445c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4460:	dc 01       	movw	r26, r24
    4462:	cb 01       	movw	r24, r22
    4464:	98 ab       	std	Y+48, r25	; 0x30
    4466:	8f a7       	std	Y+47, r24	; 0x2f
    4468:	0f c0       	rjmp	.+30     	; 0x4488 <H_LCD_void_latchByte+0x128>
    446a:	80 e9       	ldi	r24, 0x90	; 144
    446c:	91 e0       	ldi	r25, 0x01	; 1
    446e:	9e a7       	std	Y+46, r25	; 0x2e
    4470:	8d a7       	std	Y+45, r24	; 0x2d
    4472:	8d a5       	ldd	r24, Y+45	; 0x2d
    4474:	9e a5       	ldd	r25, Y+46	; 0x2e
    4476:	01 97       	sbiw	r24, 0x01	; 1
    4478:	f1 f7       	brne	.-4      	; 0x4476 <H_LCD_void_latchByte+0x116>
    447a:	9e a7       	std	Y+46, r25	; 0x2e
    447c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    447e:	8f a5       	ldd	r24, Y+47	; 0x2f
    4480:	98 a9       	ldd	r25, Y+48	; 0x30
    4482:	01 97       	sbiw	r24, 0x01	; 1
    4484:	98 ab       	std	Y+48, r25	; 0x30
    4486:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4488:	8f a5       	ldd	r24, Y+47	; 0x2f
    448a:	98 a9       	ldd	r25, Y+48	; 0x30
    448c:	00 97       	sbiw	r24, 0x00	; 0
    448e:	69 f7       	brne	.-38     	; 0x446a <H_LCD_void_latchByte+0x10a>
    4490:	14 c0       	rjmp	.+40     	; 0x44ba <H_LCD_void_latchByte+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4492:	69 a9       	ldd	r22, Y+49	; 0x31
    4494:	7a a9       	ldd	r23, Y+50	; 0x32
    4496:	8b a9       	ldd	r24, Y+51	; 0x33
    4498:	9c a9       	ldd	r25, Y+52	; 0x34
    449a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    449e:	dc 01       	movw	r26, r24
    44a0:	cb 01       	movw	r24, r22
    44a2:	98 ab       	std	Y+48, r25	; 0x30
    44a4:	8f a7       	std	Y+47, r24	; 0x2f
    44a6:	8f a5       	ldd	r24, Y+47	; 0x2f
    44a8:	98 a9       	ldd	r25, Y+48	; 0x30
    44aa:	9c a7       	std	Y+44, r25	; 0x2c
    44ac:	8b a7       	std	Y+43, r24	; 0x2b
    44ae:	8b a5       	ldd	r24, Y+43	; 0x2b
    44b0:	9c a5       	ldd	r25, Y+44	; 0x2c
    44b2:	01 97       	sbiw	r24, 0x01	; 1
    44b4:	f1 f7       	brne	.-4      	; 0x44b2 <H_LCD_void_latchByte+0x152>
    44b6:	9c a7       	std	Y+44, r25	; 0x2c
    44b8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	/* Disable CLCD */
	MDIO_SetPinValue(CLCD_CTRL_PORT, CLCD_EN_PIN, DIO_u8PIN_LOW);
    44ba:	80 e0       	ldi	r24, 0x00	; 0
    44bc:	62 e0       	ldi	r22, 0x02	; 2
    44be:	40 e0       	ldi	r20, 0x00	; 0
    44c0:	0e 94 a8 10 	call	0x2150	; 0x2150 <MDIO_SetPinValue>
    44c4:	80 e0       	ldi	r24, 0x00	; 0
    44c6:	90 e0       	ldi	r25, 0x00	; 0
    44c8:	a0 ea       	ldi	r26, 0xA0	; 160
    44ca:	b0 e4       	ldi	r27, 0x40	; 64
    44cc:	8f a3       	std	Y+39, r24	; 0x27
    44ce:	98 a7       	std	Y+40, r25	; 0x28
    44d0:	a9 a7       	std	Y+41, r26	; 0x29
    44d2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    44d4:	6f a1       	ldd	r22, Y+39	; 0x27
    44d6:	78 a5       	ldd	r23, Y+40	; 0x28
    44d8:	89 a5       	ldd	r24, Y+41	; 0x29
    44da:	9a a5       	ldd	r25, Y+42	; 0x2a
    44dc:	20 e0       	ldi	r18, 0x00	; 0
    44de:	30 e0       	ldi	r19, 0x00	; 0
    44e0:	4a e7       	ldi	r20, 0x7A	; 122
    44e2:	55 e4       	ldi	r21, 0x45	; 69
    44e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44e8:	dc 01       	movw	r26, r24
    44ea:	cb 01       	movw	r24, r22
    44ec:	8b a3       	std	Y+35, r24	; 0x23
    44ee:	9c a3       	std	Y+36, r25	; 0x24
    44f0:	ad a3       	std	Y+37, r26	; 0x25
    44f2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    44f4:	6b a1       	ldd	r22, Y+35	; 0x23
    44f6:	7c a1       	ldd	r23, Y+36	; 0x24
    44f8:	8d a1       	ldd	r24, Y+37	; 0x25
    44fa:	9e a1       	ldd	r25, Y+38	; 0x26
    44fc:	20 e0       	ldi	r18, 0x00	; 0
    44fe:	30 e0       	ldi	r19, 0x00	; 0
    4500:	40 e8       	ldi	r20, 0x80	; 128
    4502:	5f e3       	ldi	r21, 0x3F	; 63
    4504:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4508:	88 23       	and	r24, r24
    450a:	2c f4       	brge	.+10     	; 0x4516 <H_LCD_void_latchByte+0x1b6>
		__ticks = 1;
    450c:	81 e0       	ldi	r24, 0x01	; 1
    450e:	90 e0       	ldi	r25, 0x00	; 0
    4510:	9a a3       	std	Y+34, r25	; 0x22
    4512:	89 a3       	std	Y+33, r24	; 0x21
    4514:	3f c0       	rjmp	.+126    	; 0x4594 <H_LCD_void_latchByte+0x234>
	else if (__tmp > 65535)
    4516:	6b a1       	ldd	r22, Y+35	; 0x23
    4518:	7c a1       	ldd	r23, Y+36	; 0x24
    451a:	8d a1       	ldd	r24, Y+37	; 0x25
    451c:	9e a1       	ldd	r25, Y+38	; 0x26
    451e:	20 e0       	ldi	r18, 0x00	; 0
    4520:	3f ef       	ldi	r19, 0xFF	; 255
    4522:	4f e7       	ldi	r20, 0x7F	; 127
    4524:	57 e4       	ldi	r21, 0x47	; 71
    4526:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    452a:	18 16       	cp	r1, r24
    452c:	4c f5       	brge	.+82     	; 0x4580 <H_LCD_void_latchByte+0x220>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    452e:	6f a1       	ldd	r22, Y+39	; 0x27
    4530:	78 a5       	ldd	r23, Y+40	; 0x28
    4532:	89 a5       	ldd	r24, Y+41	; 0x29
    4534:	9a a5       	ldd	r25, Y+42	; 0x2a
    4536:	20 e0       	ldi	r18, 0x00	; 0
    4538:	30 e0       	ldi	r19, 0x00	; 0
    453a:	40 e2       	ldi	r20, 0x20	; 32
    453c:	51 e4       	ldi	r21, 0x41	; 65
    453e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4542:	dc 01       	movw	r26, r24
    4544:	cb 01       	movw	r24, r22
    4546:	bc 01       	movw	r22, r24
    4548:	cd 01       	movw	r24, r26
    454a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    454e:	dc 01       	movw	r26, r24
    4550:	cb 01       	movw	r24, r22
    4552:	9a a3       	std	Y+34, r25	; 0x22
    4554:	89 a3       	std	Y+33, r24	; 0x21
    4556:	0f c0       	rjmp	.+30     	; 0x4576 <H_LCD_void_latchByte+0x216>
    4558:	80 e9       	ldi	r24, 0x90	; 144
    455a:	91 e0       	ldi	r25, 0x01	; 1
    455c:	98 a3       	std	Y+32, r25	; 0x20
    455e:	8f 8f       	std	Y+31, r24	; 0x1f
    4560:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4562:	98 a1       	ldd	r25, Y+32	; 0x20
    4564:	01 97       	sbiw	r24, 0x01	; 1
    4566:	f1 f7       	brne	.-4      	; 0x4564 <H_LCD_void_latchByte+0x204>
    4568:	98 a3       	std	Y+32, r25	; 0x20
    456a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    456c:	89 a1       	ldd	r24, Y+33	; 0x21
    456e:	9a a1       	ldd	r25, Y+34	; 0x22
    4570:	01 97       	sbiw	r24, 0x01	; 1
    4572:	9a a3       	std	Y+34, r25	; 0x22
    4574:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4576:	89 a1       	ldd	r24, Y+33	; 0x21
    4578:	9a a1       	ldd	r25, Y+34	; 0x22
    457a:	00 97       	sbiw	r24, 0x00	; 0
    457c:	69 f7       	brne	.-38     	; 0x4558 <H_LCD_void_latchByte+0x1f8>
    457e:	14 c0       	rjmp	.+40     	; 0x45a8 <H_LCD_void_latchByte+0x248>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4580:	6b a1       	ldd	r22, Y+35	; 0x23
    4582:	7c a1       	ldd	r23, Y+36	; 0x24
    4584:	8d a1       	ldd	r24, Y+37	; 0x25
    4586:	9e a1       	ldd	r25, Y+38	; 0x26
    4588:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    458c:	dc 01       	movw	r26, r24
    458e:	cb 01       	movw	r24, r22
    4590:	9a a3       	std	Y+34, r25	; 0x22
    4592:	89 a3       	std	Y+33, r24	; 0x21
    4594:	89 a1       	ldd	r24, Y+33	; 0x21
    4596:	9a a1       	ldd	r25, Y+34	; 0x22
    4598:	9e 8f       	std	Y+30, r25	; 0x1e
    459a:	8d 8f       	std	Y+29, r24	; 0x1d
    459c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    459e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    45a0:	01 97       	sbiw	r24, 0x01	; 1
    45a2:	f1 f7       	brne	.-4      	; 0x45a0 <H_LCD_void_latchByte+0x240>
    45a4:	9e 8f       	std	Y+30, r25	; 0x1e
    45a6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);
	MDIO_SetPinValue(CLCD_DATA_PORT, CLCD_DATA_4_PIN0, GET_BIT(copy_u8Byte,0));
    45a8:	89 ad       	ldd	r24, Y+57	; 0x39
    45aa:	98 2f       	mov	r25, r24
    45ac:	91 70       	andi	r25, 0x01	; 1
    45ae:	81 e0       	ldi	r24, 0x01	; 1
    45b0:	60 e0       	ldi	r22, 0x00	; 0
    45b2:	49 2f       	mov	r20, r25
    45b4:	0e 94 a8 10 	call	0x2150	; 0x2150 <MDIO_SetPinValue>
	MDIO_SetPinValue(CLCD_DATA_PORT, CLCD_DATA_4_PIN1, GET_BIT(copy_u8Byte,1));
    45b8:	89 ad       	ldd	r24, Y+57	; 0x39
    45ba:	86 95       	lsr	r24
    45bc:	98 2f       	mov	r25, r24
    45be:	91 70       	andi	r25, 0x01	; 1
    45c0:	81 e0       	ldi	r24, 0x01	; 1
    45c2:	61 e0       	ldi	r22, 0x01	; 1
    45c4:	49 2f       	mov	r20, r25
    45c6:	0e 94 a8 10 	call	0x2150	; 0x2150 <MDIO_SetPinValue>
	MDIO_SetPinValue(CLCD_DATA_PORT, CLCD_DATA_4_PIN2, GET_BIT(copy_u8Byte,2));
    45ca:	89 ad       	ldd	r24, Y+57	; 0x39
    45cc:	86 95       	lsr	r24
    45ce:	86 95       	lsr	r24
    45d0:	98 2f       	mov	r25, r24
    45d2:	91 70       	andi	r25, 0x01	; 1
    45d4:	81 e0       	ldi	r24, 0x01	; 1
    45d6:	62 e0       	ldi	r22, 0x02	; 2
    45d8:	49 2f       	mov	r20, r25
    45da:	0e 94 a8 10 	call	0x2150	; 0x2150 <MDIO_SetPinValue>
	MDIO_SetPinValue(CLCD_DATA_PORT, CLCD_DATA_4_PIN3, GET_BIT(copy_u8Byte,3));
    45de:	89 ad       	ldd	r24, Y+57	; 0x39
    45e0:	86 95       	lsr	r24
    45e2:	86 95       	lsr	r24
    45e4:	86 95       	lsr	r24
    45e6:	98 2f       	mov	r25, r24
    45e8:	91 70       	andi	r25, 0x01	; 1
    45ea:	81 e0       	ldi	r24, 0x01	; 1
    45ec:	64 e0       	ldi	r22, 0x04	; 4
    45ee:	49 2f       	mov	r20, r25
    45f0:	0e 94 a8 10 	call	0x2150	; 0x2150 <MDIO_SetPinValue>
	/* Enable CLCD */
	MDIO_SetPinValue(CLCD_CTRL_PORT, CLCD_EN_PIN, DIO_u8PIN_HIGH);
    45f4:	80 e0       	ldi	r24, 0x00	; 0
    45f6:	62 e0       	ldi	r22, 0x02	; 2
    45f8:	41 e0       	ldi	r20, 0x01	; 1
    45fa:	0e 94 a8 10 	call	0x2150	; 0x2150 <MDIO_SetPinValue>
    45fe:	80 e0       	ldi	r24, 0x00	; 0
    4600:	90 e0       	ldi	r25, 0x00	; 0
    4602:	a0 e0       	ldi	r26, 0x00	; 0
    4604:	b0 e4       	ldi	r27, 0x40	; 64
    4606:	89 8f       	std	Y+25, r24	; 0x19
    4608:	9a 8f       	std	Y+26, r25	; 0x1a
    460a:	ab 8f       	std	Y+27, r26	; 0x1b
    460c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    460e:	69 8d       	ldd	r22, Y+25	; 0x19
    4610:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4612:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4614:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4616:	20 e0       	ldi	r18, 0x00	; 0
    4618:	30 e0       	ldi	r19, 0x00	; 0
    461a:	4a e7       	ldi	r20, 0x7A	; 122
    461c:	55 e4       	ldi	r21, 0x45	; 69
    461e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4622:	dc 01       	movw	r26, r24
    4624:	cb 01       	movw	r24, r22
    4626:	8d 8b       	std	Y+21, r24	; 0x15
    4628:	9e 8b       	std	Y+22, r25	; 0x16
    462a:	af 8b       	std	Y+23, r26	; 0x17
    462c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    462e:	6d 89       	ldd	r22, Y+21	; 0x15
    4630:	7e 89       	ldd	r23, Y+22	; 0x16
    4632:	8f 89       	ldd	r24, Y+23	; 0x17
    4634:	98 8d       	ldd	r25, Y+24	; 0x18
    4636:	20 e0       	ldi	r18, 0x00	; 0
    4638:	30 e0       	ldi	r19, 0x00	; 0
    463a:	40 e8       	ldi	r20, 0x80	; 128
    463c:	5f e3       	ldi	r21, 0x3F	; 63
    463e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4642:	88 23       	and	r24, r24
    4644:	2c f4       	brge	.+10     	; 0x4650 <H_LCD_void_latchByte+0x2f0>
		__ticks = 1;
    4646:	81 e0       	ldi	r24, 0x01	; 1
    4648:	90 e0       	ldi	r25, 0x00	; 0
    464a:	9c 8b       	std	Y+20, r25	; 0x14
    464c:	8b 8b       	std	Y+19, r24	; 0x13
    464e:	3f c0       	rjmp	.+126    	; 0x46ce <H_LCD_void_latchByte+0x36e>
	else if (__tmp > 65535)
    4650:	6d 89       	ldd	r22, Y+21	; 0x15
    4652:	7e 89       	ldd	r23, Y+22	; 0x16
    4654:	8f 89       	ldd	r24, Y+23	; 0x17
    4656:	98 8d       	ldd	r25, Y+24	; 0x18
    4658:	20 e0       	ldi	r18, 0x00	; 0
    465a:	3f ef       	ldi	r19, 0xFF	; 255
    465c:	4f e7       	ldi	r20, 0x7F	; 127
    465e:	57 e4       	ldi	r21, 0x47	; 71
    4660:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4664:	18 16       	cp	r1, r24
    4666:	4c f5       	brge	.+82     	; 0x46ba <H_LCD_void_latchByte+0x35a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4668:	69 8d       	ldd	r22, Y+25	; 0x19
    466a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    466c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    466e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4670:	20 e0       	ldi	r18, 0x00	; 0
    4672:	30 e0       	ldi	r19, 0x00	; 0
    4674:	40 e2       	ldi	r20, 0x20	; 32
    4676:	51 e4       	ldi	r21, 0x41	; 65
    4678:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    467c:	dc 01       	movw	r26, r24
    467e:	cb 01       	movw	r24, r22
    4680:	bc 01       	movw	r22, r24
    4682:	cd 01       	movw	r24, r26
    4684:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4688:	dc 01       	movw	r26, r24
    468a:	cb 01       	movw	r24, r22
    468c:	9c 8b       	std	Y+20, r25	; 0x14
    468e:	8b 8b       	std	Y+19, r24	; 0x13
    4690:	0f c0       	rjmp	.+30     	; 0x46b0 <H_LCD_void_latchByte+0x350>
    4692:	80 e9       	ldi	r24, 0x90	; 144
    4694:	91 e0       	ldi	r25, 0x01	; 1
    4696:	9a 8b       	std	Y+18, r25	; 0x12
    4698:	89 8b       	std	Y+17, r24	; 0x11
    469a:	89 89       	ldd	r24, Y+17	; 0x11
    469c:	9a 89       	ldd	r25, Y+18	; 0x12
    469e:	01 97       	sbiw	r24, 0x01	; 1
    46a0:	f1 f7       	brne	.-4      	; 0x469e <H_LCD_void_latchByte+0x33e>
    46a2:	9a 8b       	std	Y+18, r25	; 0x12
    46a4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    46a6:	8b 89       	ldd	r24, Y+19	; 0x13
    46a8:	9c 89       	ldd	r25, Y+20	; 0x14
    46aa:	01 97       	sbiw	r24, 0x01	; 1
    46ac:	9c 8b       	std	Y+20, r25	; 0x14
    46ae:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    46b0:	8b 89       	ldd	r24, Y+19	; 0x13
    46b2:	9c 89       	ldd	r25, Y+20	; 0x14
    46b4:	00 97       	sbiw	r24, 0x00	; 0
    46b6:	69 f7       	brne	.-38     	; 0x4692 <H_LCD_void_latchByte+0x332>
    46b8:	14 c0       	rjmp	.+40     	; 0x46e2 <H_LCD_void_latchByte+0x382>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    46ba:	6d 89       	ldd	r22, Y+21	; 0x15
    46bc:	7e 89       	ldd	r23, Y+22	; 0x16
    46be:	8f 89       	ldd	r24, Y+23	; 0x17
    46c0:	98 8d       	ldd	r25, Y+24	; 0x18
    46c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46c6:	dc 01       	movw	r26, r24
    46c8:	cb 01       	movw	r24, r22
    46ca:	9c 8b       	std	Y+20, r25	; 0x14
    46cc:	8b 8b       	std	Y+19, r24	; 0x13
    46ce:	8b 89       	ldd	r24, Y+19	; 0x13
    46d0:	9c 89       	ldd	r25, Y+20	; 0x14
    46d2:	98 8b       	std	Y+16, r25	; 0x10
    46d4:	8f 87       	std	Y+15, r24	; 0x0f
    46d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    46d8:	98 89       	ldd	r25, Y+16	; 0x10
    46da:	01 97       	sbiw	r24, 0x01	; 1
    46dc:	f1 f7       	brne	.-4      	; 0x46da <H_LCD_void_latchByte+0x37a>
    46de:	98 8b       	std	Y+16, r25	; 0x10
    46e0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	/* Disable CLCD */
	MDIO_SetPinValue(CLCD_CTRL_PORT, CLCD_EN_PIN, DIO_u8PIN_LOW);
    46e2:	80 e0       	ldi	r24, 0x00	; 0
    46e4:	62 e0       	ldi	r22, 0x02	; 2
    46e6:	40 e0       	ldi	r20, 0x00	; 0
    46e8:	0e 94 a8 10 	call	0x2150	; 0x2150 <MDIO_SetPinValue>
    46ec:	80 e0       	ldi	r24, 0x00	; 0
    46ee:	90 e0       	ldi	r25, 0x00	; 0
    46f0:	a0 ea       	ldi	r26, 0xA0	; 160
    46f2:	b0 e4       	ldi	r27, 0x40	; 64
    46f4:	8b 87       	std	Y+11, r24	; 0x0b
    46f6:	9c 87       	std	Y+12, r25	; 0x0c
    46f8:	ad 87       	std	Y+13, r26	; 0x0d
    46fa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    46fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    46fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    4700:	8d 85       	ldd	r24, Y+13	; 0x0d
    4702:	9e 85       	ldd	r25, Y+14	; 0x0e
    4704:	20 e0       	ldi	r18, 0x00	; 0
    4706:	30 e0       	ldi	r19, 0x00	; 0
    4708:	4a e7       	ldi	r20, 0x7A	; 122
    470a:	55 e4       	ldi	r21, 0x45	; 69
    470c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4710:	dc 01       	movw	r26, r24
    4712:	cb 01       	movw	r24, r22
    4714:	8f 83       	std	Y+7, r24	; 0x07
    4716:	98 87       	std	Y+8, r25	; 0x08
    4718:	a9 87       	std	Y+9, r26	; 0x09
    471a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    471c:	6f 81       	ldd	r22, Y+7	; 0x07
    471e:	78 85       	ldd	r23, Y+8	; 0x08
    4720:	89 85       	ldd	r24, Y+9	; 0x09
    4722:	9a 85       	ldd	r25, Y+10	; 0x0a
    4724:	20 e0       	ldi	r18, 0x00	; 0
    4726:	30 e0       	ldi	r19, 0x00	; 0
    4728:	40 e8       	ldi	r20, 0x80	; 128
    472a:	5f e3       	ldi	r21, 0x3F	; 63
    472c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4730:	88 23       	and	r24, r24
    4732:	2c f4       	brge	.+10     	; 0x473e <H_LCD_void_latchByte+0x3de>
		__ticks = 1;
    4734:	81 e0       	ldi	r24, 0x01	; 1
    4736:	90 e0       	ldi	r25, 0x00	; 0
    4738:	9e 83       	std	Y+6, r25	; 0x06
    473a:	8d 83       	std	Y+5, r24	; 0x05
    473c:	3f c0       	rjmp	.+126    	; 0x47bc <H_LCD_void_latchByte+0x45c>
	else if (__tmp > 65535)
    473e:	6f 81       	ldd	r22, Y+7	; 0x07
    4740:	78 85       	ldd	r23, Y+8	; 0x08
    4742:	89 85       	ldd	r24, Y+9	; 0x09
    4744:	9a 85       	ldd	r25, Y+10	; 0x0a
    4746:	20 e0       	ldi	r18, 0x00	; 0
    4748:	3f ef       	ldi	r19, 0xFF	; 255
    474a:	4f e7       	ldi	r20, 0x7F	; 127
    474c:	57 e4       	ldi	r21, 0x47	; 71
    474e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4752:	18 16       	cp	r1, r24
    4754:	4c f5       	brge	.+82     	; 0x47a8 <H_LCD_void_latchByte+0x448>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4756:	6b 85       	ldd	r22, Y+11	; 0x0b
    4758:	7c 85       	ldd	r23, Y+12	; 0x0c
    475a:	8d 85       	ldd	r24, Y+13	; 0x0d
    475c:	9e 85       	ldd	r25, Y+14	; 0x0e
    475e:	20 e0       	ldi	r18, 0x00	; 0
    4760:	30 e0       	ldi	r19, 0x00	; 0
    4762:	40 e2       	ldi	r20, 0x20	; 32
    4764:	51 e4       	ldi	r21, 0x41	; 65
    4766:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    476a:	dc 01       	movw	r26, r24
    476c:	cb 01       	movw	r24, r22
    476e:	bc 01       	movw	r22, r24
    4770:	cd 01       	movw	r24, r26
    4772:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4776:	dc 01       	movw	r26, r24
    4778:	cb 01       	movw	r24, r22
    477a:	9e 83       	std	Y+6, r25	; 0x06
    477c:	8d 83       	std	Y+5, r24	; 0x05
    477e:	0f c0       	rjmp	.+30     	; 0x479e <H_LCD_void_latchByte+0x43e>
    4780:	80 e9       	ldi	r24, 0x90	; 144
    4782:	91 e0       	ldi	r25, 0x01	; 1
    4784:	9c 83       	std	Y+4, r25	; 0x04
    4786:	8b 83       	std	Y+3, r24	; 0x03
    4788:	8b 81       	ldd	r24, Y+3	; 0x03
    478a:	9c 81       	ldd	r25, Y+4	; 0x04
    478c:	01 97       	sbiw	r24, 0x01	; 1
    478e:	f1 f7       	brne	.-4      	; 0x478c <H_LCD_void_latchByte+0x42c>
    4790:	9c 83       	std	Y+4, r25	; 0x04
    4792:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4794:	8d 81       	ldd	r24, Y+5	; 0x05
    4796:	9e 81       	ldd	r25, Y+6	; 0x06
    4798:	01 97       	sbiw	r24, 0x01	; 1
    479a:	9e 83       	std	Y+6, r25	; 0x06
    479c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    479e:	8d 81       	ldd	r24, Y+5	; 0x05
    47a0:	9e 81       	ldd	r25, Y+6	; 0x06
    47a2:	00 97       	sbiw	r24, 0x00	; 0
    47a4:	69 f7       	brne	.-38     	; 0x4780 <H_LCD_void_latchByte+0x420>
    47a6:	14 c0       	rjmp	.+40     	; 0x47d0 <H_LCD_void_latchByte+0x470>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    47a8:	6f 81       	ldd	r22, Y+7	; 0x07
    47aa:	78 85       	ldd	r23, Y+8	; 0x08
    47ac:	89 85       	ldd	r24, Y+9	; 0x09
    47ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    47b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47b4:	dc 01       	movw	r26, r24
    47b6:	cb 01       	movw	r24, r22
    47b8:	9e 83       	std	Y+6, r25	; 0x06
    47ba:	8d 83       	std	Y+5, r24	; 0x05
    47bc:	8d 81       	ldd	r24, Y+5	; 0x05
    47be:	9e 81       	ldd	r25, Y+6	; 0x06
    47c0:	9a 83       	std	Y+2, r25	; 0x02
    47c2:	89 83       	std	Y+1, r24	; 0x01
    47c4:	89 81       	ldd	r24, Y+1	; 0x01
    47c6:	9a 81       	ldd	r25, Y+2	; 0x02
    47c8:	01 97       	sbiw	r24, 0x01	; 1
    47ca:	f1 f7       	brne	.-4      	; 0x47c8 <H_LCD_void_latchByte+0x468>
    47cc:	9a 83       	std	Y+2, r25	; 0x02
    47ce:	89 83       	std	Y+1, r24	; 0x01
	MDIO_SetPinValue(CLCD_CTRL_PORT, CLCD_EN_PIN, DIO_u8PIN_LOW);

#else
#warning  Select Correct Mode !!!
#endif
}
    47d0:	e9 96       	adiw	r28, 0x39	; 57
    47d2:	0f b6       	in	r0, 0x3f	; 63
    47d4:	f8 94       	cli
    47d6:	de bf       	out	0x3e, r29	; 62
    47d8:	0f be       	out	0x3f, r0	; 63
    47da:	cd bf       	out	0x3d, r28	; 61
    47dc:	cf 91       	pop	r28
    47de:	df 91       	pop	r29
    47e0:	08 95       	ret

000047e2 <main>:
/******* GLOBAL VARIABLE *************/


u32 u32_local_Distance =0;
void main(void)
{
    47e2:	df 93       	push	r29
    47e4:	cf 93       	push	r28
    47e6:	cd b7       	in	r28, 0x3d	; 61
    47e8:	de b7       	in	r29, 0x3e	; 62
    47ea:	aa 97       	sbiw	r28, 0x2a	; 42
    47ec:	0f b6       	in	r0, 0x3f	; 63
    47ee:	f8 94       	cli
    47f0:	de bf       	out	0x3e, r29	; 62
    47f2:	0f be       	out	0x3f, r0	; 63
    47f4:	cd bf       	out	0x3d, r28	; 61
	/*** Initialization Section ***/
	MGIE_VoidEnable();
    47f6:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <MGIE_VoidEnable>

	MTIMER1_voidInit();
    47fa:	0e 94 a5 07 	call	0xf4a	; 0xf4a <MTIMER1_voidInit>
	MTIMER1_enumStart();
    47fe:	0e 94 8d 08 	call	0x111a	; 0x111a <MTIMER1_enumStart>

	HCLCD_Init();
    4802:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <HCLCD_Init>
	HLED_voidInit(LED_BLUE);
    4806:	83 e0       	ldi	r24, 0x03	; 3
    4808:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <HLED_voidInit>
	HLED_voidInit(LED_RED);
    480c:	82 e0       	ldi	r24, 0x02	; 2
    480e:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <HLED_voidInit>
	HLED_voidInit(LED_YELLOW);
    4812:	80 e0       	ldi	r24, 0x00	; 0
    4814:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <HLED_voidInit>
	HULTRASONIC_voidInit();
    4818:	0e 94 01 16 	call	0x2c02	; 0x2c02 <HULTRASONIC_voidInit>

	HCLCD_SendString("HI");
    481c:	80 e6       	ldi	r24, 0x60	; 96
    481e:	90 e0       	ldi	r25, 0x00	; 0
    4820:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <HCLCD_SendString>
	while(1)
	{
		HULTRASONIC_voidTrigger();
    4824:	0e 94 14 16 	call	0x2c28	; 0x2c28 <HULTRASONIC_voidTrigger>

		u32_local_Distance = HULTRASONIC_u32Distance();
    4828:	0e 94 dd 16 	call	0x2dba	; 0x2dba <HULTRASONIC_u32Distance>
    482c:	dc 01       	movw	r26, r24
    482e:	cb 01       	movw	r24, r22
    4830:	80 93 f4 01 	sts	0x01F4, r24
    4834:	90 93 f5 01 	sts	0x01F5, r25
    4838:	a0 93 f6 01 	sts	0x01F6, r26
    483c:	b0 93 f7 01 	sts	0x01F7, r27
		if (u32_local_Distance>=68)
    4840:	80 91 f4 01 	lds	r24, 0x01F4
    4844:	90 91 f5 01 	lds	r25, 0x01F5
    4848:	a0 91 f6 01 	lds	r26, 0x01F6
    484c:	b0 91 f7 01 	lds	r27, 0x01F7
    4850:	84 34       	cpi	r24, 0x44	; 68
    4852:	91 05       	cpc	r25, r1
    4854:	a1 05       	cpc	r26, r1
    4856:	b1 05       	cpc	r27, r1
    4858:	08 f4       	brcc	.+2      	; 0x485c <main+0x7a>
    485a:	7d c0       	rjmp	.+250    	; 0x4956 <main+0x174>
		{

			HCLCD_Clear();
    485c:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <HCLCD_Clear>
			HCLCD_GoToXY(0,0);
    4860:	80 e0       	ldi	r24, 0x00	; 0
    4862:	60 e0       	ldi	r22, 0x00	; 0
    4864:	0e 94 51 21 	call	0x42a2	; 0x42a2 <HCLCD_GoToXY>

			HCLCD_SendString("no object");
    4868:	83 e6       	ldi	r24, 0x63	; 99
    486a:	90 e0       	ldi	r25, 0x00	; 0
    486c:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <HCLCD_SendString>
    4870:	80 e0       	ldi	r24, 0x00	; 0
    4872:	90 e0       	ldi	r25, 0x00	; 0
    4874:	aa ef       	ldi	r26, 0xFA	; 250
    4876:	b3 e4       	ldi	r27, 0x43	; 67
    4878:	8f a3       	std	Y+39, r24	; 0x27
    487a:	98 a7       	std	Y+40, r25	; 0x28
    487c:	a9 a7       	std	Y+41, r26	; 0x29
    487e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4880:	6f a1       	ldd	r22, Y+39	; 0x27
    4882:	78 a5       	ldd	r23, Y+40	; 0x28
    4884:	89 a5       	ldd	r24, Y+41	; 0x29
    4886:	9a a5       	ldd	r25, Y+42	; 0x2a
    4888:	20 e0       	ldi	r18, 0x00	; 0
    488a:	30 e0       	ldi	r19, 0x00	; 0
    488c:	4a e7       	ldi	r20, 0x7A	; 122
    488e:	55 e4       	ldi	r21, 0x45	; 69
    4890:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4894:	dc 01       	movw	r26, r24
    4896:	cb 01       	movw	r24, r22
    4898:	8b a3       	std	Y+35, r24	; 0x23
    489a:	9c a3       	std	Y+36, r25	; 0x24
    489c:	ad a3       	std	Y+37, r26	; 0x25
    489e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    48a0:	6b a1       	ldd	r22, Y+35	; 0x23
    48a2:	7c a1       	ldd	r23, Y+36	; 0x24
    48a4:	8d a1       	ldd	r24, Y+37	; 0x25
    48a6:	9e a1       	ldd	r25, Y+38	; 0x26
    48a8:	20 e0       	ldi	r18, 0x00	; 0
    48aa:	30 e0       	ldi	r19, 0x00	; 0
    48ac:	40 e8       	ldi	r20, 0x80	; 128
    48ae:	5f e3       	ldi	r21, 0x3F	; 63
    48b0:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    48b4:	88 23       	and	r24, r24
    48b6:	2c f4       	brge	.+10     	; 0x48c2 <main+0xe0>
		__ticks = 1;
    48b8:	81 e0       	ldi	r24, 0x01	; 1
    48ba:	90 e0       	ldi	r25, 0x00	; 0
    48bc:	9a a3       	std	Y+34, r25	; 0x22
    48be:	89 a3       	std	Y+33, r24	; 0x21
    48c0:	3f c0       	rjmp	.+126    	; 0x4940 <main+0x15e>
	else if (__tmp > 65535)
    48c2:	6b a1       	ldd	r22, Y+35	; 0x23
    48c4:	7c a1       	ldd	r23, Y+36	; 0x24
    48c6:	8d a1       	ldd	r24, Y+37	; 0x25
    48c8:	9e a1       	ldd	r25, Y+38	; 0x26
    48ca:	20 e0       	ldi	r18, 0x00	; 0
    48cc:	3f ef       	ldi	r19, 0xFF	; 255
    48ce:	4f e7       	ldi	r20, 0x7F	; 127
    48d0:	57 e4       	ldi	r21, 0x47	; 71
    48d2:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    48d6:	18 16       	cp	r1, r24
    48d8:	4c f5       	brge	.+82     	; 0x492c <main+0x14a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    48da:	6f a1       	ldd	r22, Y+39	; 0x27
    48dc:	78 a5       	ldd	r23, Y+40	; 0x28
    48de:	89 a5       	ldd	r24, Y+41	; 0x29
    48e0:	9a a5       	ldd	r25, Y+42	; 0x2a
    48e2:	20 e0       	ldi	r18, 0x00	; 0
    48e4:	30 e0       	ldi	r19, 0x00	; 0
    48e6:	40 e2       	ldi	r20, 0x20	; 32
    48e8:	51 e4       	ldi	r21, 0x41	; 65
    48ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48ee:	dc 01       	movw	r26, r24
    48f0:	cb 01       	movw	r24, r22
    48f2:	bc 01       	movw	r22, r24
    48f4:	cd 01       	movw	r24, r26
    48f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48fa:	dc 01       	movw	r26, r24
    48fc:	cb 01       	movw	r24, r22
    48fe:	9a a3       	std	Y+34, r25	; 0x22
    4900:	89 a3       	std	Y+33, r24	; 0x21
    4902:	0f c0       	rjmp	.+30     	; 0x4922 <main+0x140>
    4904:	80 e9       	ldi	r24, 0x90	; 144
    4906:	91 e0       	ldi	r25, 0x01	; 1
    4908:	98 a3       	std	Y+32, r25	; 0x20
    490a:	8f 8f       	std	Y+31, r24	; 0x1f
    490c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    490e:	98 a1       	ldd	r25, Y+32	; 0x20
    4910:	01 97       	sbiw	r24, 0x01	; 1
    4912:	f1 f7       	brne	.-4      	; 0x4910 <main+0x12e>
    4914:	98 a3       	std	Y+32, r25	; 0x20
    4916:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4918:	89 a1       	ldd	r24, Y+33	; 0x21
    491a:	9a a1       	ldd	r25, Y+34	; 0x22
    491c:	01 97       	sbiw	r24, 0x01	; 1
    491e:	9a a3       	std	Y+34, r25	; 0x22
    4920:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4922:	89 a1       	ldd	r24, Y+33	; 0x21
    4924:	9a a1       	ldd	r25, Y+34	; 0x22
    4926:	00 97       	sbiw	r24, 0x00	; 0
    4928:	69 f7       	brne	.-38     	; 0x4904 <main+0x122>
    492a:	a7 c0       	rjmp	.+334    	; 0x4a7a <main+0x298>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    492c:	6b a1       	ldd	r22, Y+35	; 0x23
    492e:	7c a1       	ldd	r23, Y+36	; 0x24
    4930:	8d a1       	ldd	r24, Y+37	; 0x25
    4932:	9e a1       	ldd	r25, Y+38	; 0x26
    4934:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4938:	dc 01       	movw	r26, r24
    493a:	cb 01       	movw	r24, r22
    493c:	9a a3       	std	Y+34, r25	; 0x22
    493e:	89 a3       	std	Y+33, r24	; 0x21
    4940:	89 a1       	ldd	r24, Y+33	; 0x21
    4942:	9a a1       	ldd	r25, Y+34	; 0x22
    4944:	9e 8f       	std	Y+30, r25	; 0x1e
    4946:	8d 8f       	std	Y+29, r24	; 0x1d
    4948:	8d 8d       	ldd	r24, Y+29	; 0x1d
    494a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    494c:	01 97       	sbiw	r24, 0x01	; 1
    494e:	f1 f7       	brne	.-4      	; 0x494c <main+0x16a>
    4950:	9e 8f       	std	Y+30, r25	; 0x1e
    4952:	8d 8f       	std	Y+29, r24	; 0x1d
    4954:	92 c0       	rjmp	.+292    	; 0x4a7a <main+0x298>
			_delay_ms(500);
		}
		else
		{
			HCLCD_Clear();
    4956:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <HCLCD_Clear>
			HCLCD_GoToXY(1,0);
    495a:	81 e0       	ldi	r24, 0x01	; 1
    495c:	60 e0       	ldi	r22, 0x00	; 0
    495e:	0e 94 51 21 	call	0x42a2	; 0x42a2 <HCLCD_GoToXY>

			HCLCD_SendString("distance=");
    4962:	8d e6       	ldi	r24, 0x6D	; 109
    4964:	90 e0       	ldi	r25, 0x00	; 0
    4966:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <HCLCD_SendString>
			HCLCD_SendNumber(u32_local_Distance);
    496a:	80 91 f4 01 	lds	r24, 0x01F4
    496e:	90 91 f5 01 	lds	r25, 0x01F5
    4972:	a0 91 f6 01 	lds	r26, 0x01F6
    4976:	b0 91 f7 01 	lds	r27, 0x01F7
    497a:	bc 01       	movw	r22, r24
    497c:	cd 01       	movw	r24, r26
    497e:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    4982:	dc 01       	movw	r26, r24
    4984:	cb 01       	movw	r24, r22
    4986:	bc 01       	movw	r22, r24
    4988:	cd 01       	movw	r24, r26
    498a:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <HCLCD_SendNumber>
			HCLCD_SendString("cm");
    498e:	87 e7       	ldi	r24, 0x77	; 119
    4990:	90 e0       	ldi	r25, 0x00	; 0
    4992:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <HCLCD_SendString>
    4996:	80 e0       	ldi	r24, 0x00	; 0
    4998:	90 e0       	ldi	r25, 0x00	; 0
    499a:	aa ef       	ldi	r26, 0xFA	; 250
    499c:	b3 e4       	ldi	r27, 0x43	; 67
    499e:	89 8f       	std	Y+25, r24	; 0x19
    49a0:	9a 8f       	std	Y+26, r25	; 0x1a
    49a2:	ab 8f       	std	Y+27, r26	; 0x1b
    49a4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    49a6:	69 8d       	ldd	r22, Y+25	; 0x19
    49a8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    49aa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    49ac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    49ae:	20 e0       	ldi	r18, 0x00	; 0
    49b0:	30 e0       	ldi	r19, 0x00	; 0
    49b2:	4a e7       	ldi	r20, 0x7A	; 122
    49b4:	55 e4       	ldi	r21, 0x45	; 69
    49b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49ba:	dc 01       	movw	r26, r24
    49bc:	cb 01       	movw	r24, r22
    49be:	8d 8b       	std	Y+21, r24	; 0x15
    49c0:	9e 8b       	std	Y+22, r25	; 0x16
    49c2:	af 8b       	std	Y+23, r26	; 0x17
    49c4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    49c6:	6d 89       	ldd	r22, Y+21	; 0x15
    49c8:	7e 89       	ldd	r23, Y+22	; 0x16
    49ca:	8f 89       	ldd	r24, Y+23	; 0x17
    49cc:	98 8d       	ldd	r25, Y+24	; 0x18
    49ce:	20 e0       	ldi	r18, 0x00	; 0
    49d0:	30 e0       	ldi	r19, 0x00	; 0
    49d2:	40 e8       	ldi	r20, 0x80	; 128
    49d4:	5f e3       	ldi	r21, 0x3F	; 63
    49d6:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    49da:	88 23       	and	r24, r24
    49dc:	2c f4       	brge	.+10     	; 0x49e8 <main+0x206>
		__ticks = 1;
    49de:	81 e0       	ldi	r24, 0x01	; 1
    49e0:	90 e0       	ldi	r25, 0x00	; 0
    49e2:	9c 8b       	std	Y+20, r25	; 0x14
    49e4:	8b 8b       	std	Y+19, r24	; 0x13
    49e6:	3f c0       	rjmp	.+126    	; 0x4a66 <main+0x284>
	else if (__tmp > 65535)
    49e8:	6d 89       	ldd	r22, Y+21	; 0x15
    49ea:	7e 89       	ldd	r23, Y+22	; 0x16
    49ec:	8f 89       	ldd	r24, Y+23	; 0x17
    49ee:	98 8d       	ldd	r25, Y+24	; 0x18
    49f0:	20 e0       	ldi	r18, 0x00	; 0
    49f2:	3f ef       	ldi	r19, 0xFF	; 255
    49f4:	4f e7       	ldi	r20, 0x7F	; 127
    49f6:	57 e4       	ldi	r21, 0x47	; 71
    49f8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    49fc:	18 16       	cp	r1, r24
    49fe:	4c f5       	brge	.+82     	; 0x4a52 <main+0x270>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a00:	69 8d       	ldd	r22, Y+25	; 0x19
    4a02:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4a04:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4a06:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4a08:	20 e0       	ldi	r18, 0x00	; 0
    4a0a:	30 e0       	ldi	r19, 0x00	; 0
    4a0c:	40 e2       	ldi	r20, 0x20	; 32
    4a0e:	51 e4       	ldi	r21, 0x41	; 65
    4a10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a14:	dc 01       	movw	r26, r24
    4a16:	cb 01       	movw	r24, r22
    4a18:	bc 01       	movw	r22, r24
    4a1a:	cd 01       	movw	r24, r26
    4a1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a20:	dc 01       	movw	r26, r24
    4a22:	cb 01       	movw	r24, r22
    4a24:	9c 8b       	std	Y+20, r25	; 0x14
    4a26:	8b 8b       	std	Y+19, r24	; 0x13
    4a28:	0f c0       	rjmp	.+30     	; 0x4a48 <main+0x266>
    4a2a:	80 e9       	ldi	r24, 0x90	; 144
    4a2c:	91 e0       	ldi	r25, 0x01	; 1
    4a2e:	9a 8b       	std	Y+18, r25	; 0x12
    4a30:	89 8b       	std	Y+17, r24	; 0x11
    4a32:	89 89       	ldd	r24, Y+17	; 0x11
    4a34:	9a 89       	ldd	r25, Y+18	; 0x12
    4a36:	01 97       	sbiw	r24, 0x01	; 1
    4a38:	f1 f7       	brne	.-4      	; 0x4a36 <main+0x254>
    4a3a:	9a 8b       	std	Y+18, r25	; 0x12
    4a3c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a3e:	8b 89       	ldd	r24, Y+19	; 0x13
    4a40:	9c 89       	ldd	r25, Y+20	; 0x14
    4a42:	01 97       	sbiw	r24, 0x01	; 1
    4a44:	9c 8b       	std	Y+20, r25	; 0x14
    4a46:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a48:	8b 89       	ldd	r24, Y+19	; 0x13
    4a4a:	9c 89       	ldd	r25, Y+20	; 0x14
    4a4c:	00 97       	sbiw	r24, 0x00	; 0
    4a4e:	69 f7       	brne	.-38     	; 0x4a2a <main+0x248>
    4a50:	14 c0       	rjmp	.+40     	; 0x4a7a <main+0x298>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a52:	6d 89       	ldd	r22, Y+21	; 0x15
    4a54:	7e 89       	ldd	r23, Y+22	; 0x16
    4a56:	8f 89       	ldd	r24, Y+23	; 0x17
    4a58:	98 8d       	ldd	r25, Y+24	; 0x18
    4a5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a5e:	dc 01       	movw	r26, r24
    4a60:	cb 01       	movw	r24, r22
    4a62:	9c 8b       	std	Y+20, r25	; 0x14
    4a64:	8b 8b       	std	Y+19, r24	; 0x13
    4a66:	8b 89       	ldd	r24, Y+19	; 0x13
    4a68:	9c 89       	ldd	r25, Y+20	; 0x14
    4a6a:	98 8b       	std	Y+16, r25	; 0x10
    4a6c:	8f 87       	std	Y+15, r24	; 0x0f
    4a6e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4a70:	98 89       	ldd	r25, Y+16	; 0x10
    4a72:	01 97       	sbiw	r24, 0x01	; 1
    4a74:	f1 f7       	brne	.-4      	; 0x4a72 <main+0x290>
    4a76:	98 8b       	std	Y+16, r25	; 0x10
    4a78:	8f 87       	std	Y+15, r24	; 0x0f
    4a7a:	80 e0       	ldi	r24, 0x00	; 0
    4a7c:	90 e0       	ldi	r25, 0x00	; 0
    4a7e:	aa e7       	ldi	r26, 0x7A	; 122
    4a80:	b4 e4       	ldi	r27, 0x44	; 68
    4a82:	8b 87       	std	Y+11, r24	; 0x0b
    4a84:	9c 87       	std	Y+12, r25	; 0x0c
    4a86:	ad 87       	std	Y+13, r26	; 0x0d
    4a88:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a8a:	6b 85       	ldd	r22, Y+11	; 0x0b
    4a8c:	7c 85       	ldd	r23, Y+12	; 0x0c
    4a8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4a90:	9e 85       	ldd	r25, Y+14	; 0x0e
    4a92:	20 e0       	ldi	r18, 0x00	; 0
    4a94:	30 e0       	ldi	r19, 0x00	; 0
    4a96:	4a e7       	ldi	r20, 0x7A	; 122
    4a98:	55 e4       	ldi	r21, 0x45	; 69
    4a9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a9e:	dc 01       	movw	r26, r24
    4aa0:	cb 01       	movw	r24, r22
    4aa2:	8f 83       	std	Y+7, r24	; 0x07
    4aa4:	98 87       	std	Y+8, r25	; 0x08
    4aa6:	a9 87       	std	Y+9, r26	; 0x09
    4aa8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4aaa:	6f 81       	ldd	r22, Y+7	; 0x07
    4aac:	78 85       	ldd	r23, Y+8	; 0x08
    4aae:	89 85       	ldd	r24, Y+9	; 0x09
    4ab0:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ab2:	20 e0       	ldi	r18, 0x00	; 0
    4ab4:	30 e0       	ldi	r19, 0x00	; 0
    4ab6:	40 e8       	ldi	r20, 0x80	; 128
    4ab8:	5f e3       	ldi	r21, 0x3F	; 63
    4aba:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4abe:	88 23       	and	r24, r24
    4ac0:	2c f4       	brge	.+10     	; 0x4acc <main+0x2ea>
		__ticks = 1;
    4ac2:	81 e0       	ldi	r24, 0x01	; 1
    4ac4:	90 e0       	ldi	r25, 0x00	; 0
    4ac6:	9e 83       	std	Y+6, r25	; 0x06
    4ac8:	8d 83       	std	Y+5, r24	; 0x05
    4aca:	3f c0       	rjmp	.+126    	; 0x4b4a <main+0x368>
	else if (__tmp > 65535)
    4acc:	6f 81       	ldd	r22, Y+7	; 0x07
    4ace:	78 85       	ldd	r23, Y+8	; 0x08
    4ad0:	89 85       	ldd	r24, Y+9	; 0x09
    4ad2:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ad4:	20 e0       	ldi	r18, 0x00	; 0
    4ad6:	3f ef       	ldi	r19, 0xFF	; 255
    4ad8:	4f e7       	ldi	r20, 0x7F	; 127
    4ada:	57 e4       	ldi	r21, 0x47	; 71
    4adc:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4ae0:	18 16       	cp	r1, r24
    4ae2:	4c f5       	brge	.+82     	; 0x4b36 <main+0x354>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4ae4:	6b 85       	ldd	r22, Y+11	; 0x0b
    4ae6:	7c 85       	ldd	r23, Y+12	; 0x0c
    4ae8:	8d 85       	ldd	r24, Y+13	; 0x0d
    4aea:	9e 85       	ldd	r25, Y+14	; 0x0e
    4aec:	20 e0       	ldi	r18, 0x00	; 0
    4aee:	30 e0       	ldi	r19, 0x00	; 0
    4af0:	40 e2       	ldi	r20, 0x20	; 32
    4af2:	51 e4       	ldi	r21, 0x41	; 65
    4af4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4af8:	dc 01       	movw	r26, r24
    4afa:	cb 01       	movw	r24, r22
    4afc:	bc 01       	movw	r22, r24
    4afe:	cd 01       	movw	r24, r26
    4b00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b04:	dc 01       	movw	r26, r24
    4b06:	cb 01       	movw	r24, r22
    4b08:	9e 83       	std	Y+6, r25	; 0x06
    4b0a:	8d 83       	std	Y+5, r24	; 0x05
    4b0c:	0f c0       	rjmp	.+30     	; 0x4b2c <main+0x34a>
    4b0e:	80 e9       	ldi	r24, 0x90	; 144
    4b10:	91 e0       	ldi	r25, 0x01	; 1
    4b12:	9c 83       	std	Y+4, r25	; 0x04
    4b14:	8b 83       	std	Y+3, r24	; 0x03
    4b16:	8b 81       	ldd	r24, Y+3	; 0x03
    4b18:	9c 81       	ldd	r25, Y+4	; 0x04
    4b1a:	01 97       	sbiw	r24, 0x01	; 1
    4b1c:	f1 f7       	brne	.-4      	; 0x4b1a <main+0x338>
    4b1e:	9c 83       	std	Y+4, r25	; 0x04
    4b20:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b22:	8d 81       	ldd	r24, Y+5	; 0x05
    4b24:	9e 81       	ldd	r25, Y+6	; 0x06
    4b26:	01 97       	sbiw	r24, 0x01	; 1
    4b28:	9e 83       	std	Y+6, r25	; 0x06
    4b2a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b2c:	8d 81       	ldd	r24, Y+5	; 0x05
    4b2e:	9e 81       	ldd	r25, Y+6	; 0x06
    4b30:	00 97       	sbiw	r24, 0x00	; 0
    4b32:	69 f7       	brne	.-38     	; 0x4b0e <main+0x32c>
    4b34:	77 ce       	rjmp	.-786    	; 0x4824 <main+0x42>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b36:	6f 81       	ldd	r22, Y+7	; 0x07
    4b38:	78 85       	ldd	r23, Y+8	; 0x08
    4b3a:	89 85       	ldd	r24, Y+9	; 0x09
    4b3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b42:	dc 01       	movw	r26, r24
    4b44:	cb 01       	movw	r24, r22
    4b46:	9e 83       	std	Y+6, r25	; 0x06
    4b48:	8d 83       	std	Y+5, r24	; 0x05
    4b4a:	8d 81       	ldd	r24, Y+5	; 0x05
    4b4c:	9e 81       	ldd	r25, Y+6	; 0x06
    4b4e:	9a 83       	std	Y+2, r25	; 0x02
    4b50:	89 83       	std	Y+1, r24	; 0x01
    4b52:	89 81       	ldd	r24, Y+1	; 0x01
    4b54:	9a 81       	ldd	r25, Y+2	; 0x02
    4b56:	01 97       	sbiw	r24, 0x01	; 1
    4b58:	f1 f7       	brne	.-4      	; 0x4b56 <main+0x374>
    4b5a:	9a 83       	std	Y+2, r25	; 0x02
    4b5c:	89 83       	std	Y+1, r24	; 0x01
    4b5e:	62 ce       	rjmp	.-828    	; 0x4824 <main+0x42>

00004b60 <__mulsi3>:
    4b60:	62 9f       	mul	r22, r18
    4b62:	d0 01       	movw	r26, r0
    4b64:	73 9f       	mul	r23, r19
    4b66:	f0 01       	movw	r30, r0
    4b68:	82 9f       	mul	r24, r18
    4b6a:	e0 0d       	add	r30, r0
    4b6c:	f1 1d       	adc	r31, r1
    4b6e:	64 9f       	mul	r22, r20
    4b70:	e0 0d       	add	r30, r0
    4b72:	f1 1d       	adc	r31, r1
    4b74:	92 9f       	mul	r25, r18
    4b76:	f0 0d       	add	r31, r0
    4b78:	83 9f       	mul	r24, r19
    4b7a:	f0 0d       	add	r31, r0
    4b7c:	74 9f       	mul	r23, r20
    4b7e:	f0 0d       	add	r31, r0
    4b80:	65 9f       	mul	r22, r21
    4b82:	f0 0d       	add	r31, r0
    4b84:	99 27       	eor	r25, r25
    4b86:	72 9f       	mul	r23, r18
    4b88:	b0 0d       	add	r27, r0
    4b8a:	e1 1d       	adc	r30, r1
    4b8c:	f9 1f       	adc	r31, r25
    4b8e:	63 9f       	mul	r22, r19
    4b90:	b0 0d       	add	r27, r0
    4b92:	e1 1d       	adc	r30, r1
    4b94:	f9 1f       	adc	r31, r25
    4b96:	bd 01       	movw	r22, r26
    4b98:	cf 01       	movw	r24, r30
    4b9a:	11 24       	eor	r1, r1
    4b9c:	08 95       	ret

00004b9e <__divmodhi4>:
    4b9e:	97 fb       	bst	r25, 7
    4ba0:	09 2e       	mov	r0, r25
    4ba2:	07 26       	eor	r0, r23
    4ba4:	0a d0       	rcall	.+20     	; 0x4bba <__divmodhi4_neg1>
    4ba6:	77 fd       	sbrc	r23, 7
    4ba8:	04 d0       	rcall	.+8      	; 0x4bb2 <__divmodhi4_neg2>
    4baa:	49 d0       	rcall	.+146    	; 0x4c3e <__udivmodhi4>
    4bac:	06 d0       	rcall	.+12     	; 0x4bba <__divmodhi4_neg1>
    4bae:	00 20       	and	r0, r0
    4bb0:	1a f4       	brpl	.+6      	; 0x4bb8 <__divmodhi4_exit>

00004bb2 <__divmodhi4_neg2>:
    4bb2:	70 95       	com	r23
    4bb4:	61 95       	neg	r22
    4bb6:	7f 4f       	sbci	r23, 0xFF	; 255

00004bb8 <__divmodhi4_exit>:
    4bb8:	08 95       	ret

00004bba <__divmodhi4_neg1>:
    4bba:	f6 f7       	brtc	.-4      	; 0x4bb8 <__divmodhi4_exit>
    4bbc:	90 95       	com	r25
    4bbe:	81 95       	neg	r24
    4bc0:	9f 4f       	sbci	r25, 0xFF	; 255
    4bc2:	08 95       	ret

00004bc4 <__udivmodsi4>:
    4bc4:	a1 e2       	ldi	r26, 0x21	; 33
    4bc6:	1a 2e       	mov	r1, r26
    4bc8:	aa 1b       	sub	r26, r26
    4bca:	bb 1b       	sub	r27, r27
    4bcc:	fd 01       	movw	r30, r26
    4bce:	0d c0       	rjmp	.+26     	; 0x4bea <__udivmodsi4_ep>

00004bd0 <__udivmodsi4_loop>:
    4bd0:	aa 1f       	adc	r26, r26
    4bd2:	bb 1f       	adc	r27, r27
    4bd4:	ee 1f       	adc	r30, r30
    4bd6:	ff 1f       	adc	r31, r31
    4bd8:	a2 17       	cp	r26, r18
    4bda:	b3 07       	cpc	r27, r19
    4bdc:	e4 07       	cpc	r30, r20
    4bde:	f5 07       	cpc	r31, r21
    4be0:	20 f0       	brcs	.+8      	; 0x4bea <__udivmodsi4_ep>
    4be2:	a2 1b       	sub	r26, r18
    4be4:	b3 0b       	sbc	r27, r19
    4be6:	e4 0b       	sbc	r30, r20
    4be8:	f5 0b       	sbc	r31, r21

00004bea <__udivmodsi4_ep>:
    4bea:	66 1f       	adc	r22, r22
    4bec:	77 1f       	adc	r23, r23
    4bee:	88 1f       	adc	r24, r24
    4bf0:	99 1f       	adc	r25, r25
    4bf2:	1a 94       	dec	r1
    4bf4:	69 f7       	brne	.-38     	; 0x4bd0 <__udivmodsi4_loop>
    4bf6:	60 95       	com	r22
    4bf8:	70 95       	com	r23
    4bfa:	80 95       	com	r24
    4bfc:	90 95       	com	r25
    4bfe:	9b 01       	movw	r18, r22
    4c00:	ac 01       	movw	r20, r24
    4c02:	bd 01       	movw	r22, r26
    4c04:	cf 01       	movw	r24, r30
    4c06:	08 95       	ret

00004c08 <__divmodsi4>:
    4c08:	97 fb       	bst	r25, 7
    4c0a:	09 2e       	mov	r0, r25
    4c0c:	05 26       	eor	r0, r21
    4c0e:	0e d0       	rcall	.+28     	; 0x4c2c <__divmodsi4_neg1>
    4c10:	57 fd       	sbrc	r21, 7
    4c12:	04 d0       	rcall	.+8      	; 0x4c1c <__divmodsi4_neg2>
    4c14:	d7 df       	rcall	.-82     	; 0x4bc4 <__udivmodsi4>
    4c16:	0a d0       	rcall	.+20     	; 0x4c2c <__divmodsi4_neg1>
    4c18:	00 1c       	adc	r0, r0
    4c1a:	38 f4       	brcc	.+14     	; 0x4c2a <__divmodsi4_exit>

00004c1c <__divmodsi4_neg2>:
    4c1c:	50 95       	com	r21
    4c1e:	40 95       	com	r20
    4c20:	30 95       	com	r19
    4c22:	21 95       	neg	r18
    4c24:	3f 4f       	sbci	r19, 0xFF	; 255
    4c26:	4f 4f       	sbci	r20, 0xFF	; 255
    4c28:	5f 4f       	sbci	r21, 0xFF	; 255

00004c2a <__divmodsi4_exit>:
    4c2a:	08 95       	ret

00004c2c <__divmodsi4_neg1>:
    4c2c:	f6 f7       	brtc	.-4      	; 0x4c2a <__divmodsi4_exit>
    4c2e:	90 95       	com	r25
    4c30:	80 95       	com	r24
    4c32:	70 95       	com	r23
    4c34:	61 95       	neg	r22
    4c36:	7f 4f       	sbci	r23, 0xFF	; 255
    4c38:	8f 4f       	sbci	r24, 0xFF	; 255
    4c3a:	9f 4f       	sbci	r25, 0xFF	; 255
    4c3c:	08 95       	ret

00004c3e <__udivmodhi4>:
    4c3e:	aa 1b       	sub	r26, r26
    4c40:	bb 1b       	sub	r27, r27
    4c42:	51 e1       	ldi	r21, 0x11	; 17
    4c44:	07 c0       	rjmp	.+14     	; 0x4c54 <__udivmodhi4_ep>

00004c46 <__udivmodhi4_loop>:
    4c46:	aa 1f       	adc	r26, r26
    4c48:	bb 1f       	adc	r27, r27
    4c4a:	a6 17       	cp	r26, r22
    4c4c:	b7 07       	cpc	r27, r23
    4c4e:	10 f0       	brcs	.+4      	; 0x4c54 <__udivmodhi4_ep>
    4c50:	a6 1b       	sub	r26, r22
    4c52:	b7 0b       	sbc	r27, r23

00004c54 <__udivmodhi4_ep>:
    4c54:	88 1f       	adc	r24, r24
    4c56:	99 1f       	adc	r25, r25
    4c58:	5a 95       	dec	r21
    4c5a:	a9 f7       	brne	.-22     	; 0x4c46 <__udivmodhi4_loop>
    4c5c:	80 95       	com	r24
    4c5e:	90 95       	com	r25
    4c60:	bc 01       	movw	r22, r24
    4c62:	cd 01       	movw	r24, r26
    4c64:	08 95       	ret

00004c66 <__prologue_saves__>:
    4c66:	2f 92       	push	r2
    4c68:	3f 92       	push	r3
    4c6a:	4f 92       	push	r4
    4c6c:	5f 92       	push	r5
    4c6e:	6f 92       	push	r6
    4c70:	7f 92       	push	r7
    4c72:	8f 92       	push	r8
    4c74:	9f 92       	push	r9
    4c76:	af 92       	push	r10
    4c78:	bf 92       	push	r11
    4c7a:	cf 92       	push	r12
    4c7c:	df 92       	push	r13
    4c7e:	ef 92       	push	r14
    4c80:	ff 92       	push	r15
    4c82:	0f 93       	push	r16
    4c84:	1f 93       	push	r17
    4c86:	cf 93       	push	r28
    4c88:	df 93       	push	r29
    4c8a:	cd b7       	in	r28, 0x3d	; 61
    4c8c:	de b7       	in	r29, 0x3e	; 62
    4c8e:	ca 1b       	sub	r28, r26
    4c90:	db 0b       	sbc	r29, r27
    4c92:	0f b6       	in	r0, 0x3f	; 63
    4c94:	f8 94       	cli
    4c96:	de bf       	out	0x3e, r29	; 62
    4c98:	0f be       	out	0x3f, r0	; 63
    4c9a:	cd bf       	out	0x3d, r28	; 61
    4c9c:	09 94       	ijmp

00004c9e <__epilogue_restores__>:
    4c9e:	2a 88       	ldd	r2, Y+18	; 0x12
    4ca0:	39 88       	ldd	r3, Y+17	; 0x11
    4ca2:	48 88       	ldd	r4, Y+16	; 0x10
    4ca4:	5f 84       	ldd	r5, Y+15	; 0x0f
    4ca6:	6e 84       	ldd	r6, Y+14	; 0x0e
    4ca8:	7d 84       	ldd	r7, Y+13	; 0x0d
    4caa:	8c 84       	ldd	r8, Y+12	; 0x0c
    4cac:	9b 84       	ldd	r9, Y+11	; 0x0b
    4cae:	aa 84       	ldd	r10, Y+10	; 0x0a
    4cb0:	b9 84       	ldd	r11, Y+9	; 0x09
    4cb2:	c8 84       	ldd	r12, Y+8	; 0x08
    4cb4:	df 80       	ldd	r13, Y+7	; 0x07
    4cb6:	ee 80       	ldd	r14, Y+6	; 0x06
    4cb8:	fd 80       	ldd	r15, Y+5	; 0x05
    4cba:	0c 81       	ldd	r16, Y+4	; 0x04
    4cbc:	1b 81       	ldd	r17, Y+3	; 0x03
    4cbe:	aa 81       	ldd	r26, Y+2	; 0x02
    4cc0:	b9 81       	ldd	r27, Y+1	; 0x01
    4cc2:	ce 0f       	add	r28, r30
    4cc4:	d1 1d       	adc	r29, r1
    4cc6:	0f b6       	in	r0, 0x3f	; 63
    4cc8:	f8 94       	cli
    4cca:	de bf       	out	0x3e, r29	; 62
    4ccc:	0f be       	out	0x3f, r0	; 63
    4cce:	cd bf       	out	0x3d, r28	; 61
    4cd0:	ed 01       	movw	r28, r26
    4cd2:	08 95       	ret

00004cd4 <_exit>:
    4cd4:	f8 94       	cli

00004cd6 <__stop_program>:
    4cd6:	ff cf       	rjmp	.-2      	; 0x4cd6 <__stop_program>
