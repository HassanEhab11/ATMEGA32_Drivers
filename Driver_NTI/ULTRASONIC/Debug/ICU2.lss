
ICU2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004462  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000013c  00800060  00004462  000044f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002d  0080019c  0080019c  00004632  2**0
                  ALLOC
  3 .stab         000057e4  00000000  00000000  00004634  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002acf  00000000  00000000  00009e18  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001e0  00000000  00000000  0000c8e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000232  00000000  00000000  0000cac7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002891  00000000  00000000  0000ccf9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001628  00000000  00000000  0000f58a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000013de  00000000  00000000  00010bb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000200  00000000  00000000  00011f90  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000030f  00000000  00000000  00012190  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a56  00000000  00000000  0001249f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00012ef5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 dd 0c 	jmp	0x19ba	; 0x19ba <__vector_1>
       8:	0c 94 10 0d 	jmp	0x1a20	; 0x1a20 <__vector_2>
       c:	0c 94 43 0d 	jmp	0x1a86	; 0x1a86 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 15 09 	jmp	0x122a	; 0x122a <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 e2 08 	jmp	0x11c4	; 0x11c4 <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 9e 13 	jmp	0x273c	; 0x273c <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e6       	ldi	r30, 0x62	; 98
      68:	f4 e4       	ldi	r31, 0x44	; 68
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 39       	cpi	r26, 0x9C	; 156
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e9       	ldi	r26, 0x9C	; 156
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 3c       	cpi	r26, 0xC9	; 201
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e8 20 	call	0x41d0	; 0x41d0 <main>
      8a:	0c 94 2f 22 	jmp	0x445e	; 0x445e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 25 04 	call	0x84a	; 0x84a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 f8 21 	jmp	0x43f0	; 0x43f0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 14 22 	jmp	0x4428	; 0x4428 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 04 22 	jmp	0x4408	; 0x4408 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 20 22 	jmp	0x4440	; 0x4440 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 04 22 	jmp	0x4408	; 0x4408 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 20 22 	jmp	0x4440	; 0x4440 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 f8 21 	jmp	0x43f0	; 0x43f0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 14 22 	jmp	0x4428	; 0x4428 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 00 22 	jmp	0x4400	; 0x4400 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 1c 22 	jmp	0x4438	; 0x4438 <__epilogue_restores__+0x10>

0000078a <__eqsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 04 22 	jmp	0x4408	; 0x4408 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__eqsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__eqsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__eqsf2+0x58>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 20 22 	jmp	0x4440	; 0x4440 <__epilogue_restores__+0x18>

000007ea <__gtsf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 04 22 	jmp	0x4408	; 0x4408 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gtsf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gtsf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gtsf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 20 22 	jmp	0x4440	; 0x4440 <__epilogue_restores__+0x18>

0000084a <__gesf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 04 22 	jmp	0x4408	; 0x4408 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	8f ef       	ldi	r24, 0xFF	; 255
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 20 22 	jmp	0x4440	; 0x4440 <__epilogue_restores__+0x18>

000008aa <__ltsf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 04 22 	jmp	0x4408	; 0x4408 <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__ltsf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__ltsf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__ltsf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 20 22 	jmp	0x4440	; 0x4440 <__epilogue_restores__+0x18>

0000090a <__floatsisf>:
     90a:	a8 e0       	ldi	r26, 0x08	; 8
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 01 22 	jmp	0x4402	; 0x4402 <__prologue_saves__+0x12>
     916:	9b 01       	movw	r18, r22
     918:	ac 01       	movw	r20, r24
     91a:	83 e0       	ldi	r24, 0x03	; 3
     91c:	89 83       	std	Y+1, r24	; 0x01
     91e:	da 01       	movw	r26, r20
     920:	c9 01       	movw	r24, r18
     922:	88 27       	eor	r24, r24
     924:	b7 fd       	sbrc	r27, 7
     926:	83 95       	inc	r24
     928:	99 27       	eor	r25, r25
     92a:	aa 27       	eor	r26, r26
     92c:	bb 27       	eor	r27, r27
     92e:	b8 2e       	mov	r11, r24
     930:	21 15       	cp	r18, r1
     932:	31 05       	cpc	r19, r1
     934:	41 05       	cpc	r20, r1
     936:	51 05       	cpc	r21, r1
     938:	19 f4       	brne	.+6      	; 0x940 <__floatsisf+0x36>
     93a:	82 e0       	ldi	r24, 0x02	; 2
     93c:	89 83       	std	Y+1, r24	; 0x01
     93e:	3a c0       	rjmp	.+116    	; 0x9b4 <__floatsisf+0xaa>
     940:	88 23       	and	r24, r24
     942:	a9 f0       	breq	.+42     	; 0x96e <__floatsisf+0x64>
     944:	20 30       	cpi	r18, 0x00	; 0
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	38 07       	cpc	r19, r24
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	48 07       	cpc	r20, r24
     94e:	80 e8       	ldi	r24, 0x80	; 128
     950:	58 07       	cpc	r21, r24
     952:	29 f4       	brne	.+10     	; 0x95e <__floatsisf+0x54>
     954:	60 e0       	ldi	r22, 0x00	; 0
     956:	70 e0       	ldi	r23, 0x00	; 0
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	9f ec       	ldi	r25, 0xCF	; 207
     95c:	30 c0       	rjmp	.+96     	; 0x9be <__floatsisf+0xb4>
     95e:	ee 24       	eor	r14, r14
     960:	ff 24       	eor	r15, r15
     962:	87 01       	movw	r16, r14
     964:	e2 1a       	sub	r14, r18
     966:	f3 0a       	sbc	r15, r19
     968:	04 0b       	sbc	r16, r20
     96a:	15 0b       	sbc	r17, r21
     96c:	02 c0       	rjmp	.+4      	; 0x972 <__floatsisf+0x68>
     96e:	79 01       	movw	r14, r18
     970:	8a 01       	movw	r16, r20
     972:	8e e1       	ldi	r24, 0x1E	; 30
     974:	c8 2e       	mov	r12, r24
     976:	d1 2c       	mov	r13, r1
     978:	dc 82       	std	Y+4, r13	; 0x04
     97a:	cb 82       	std	Y+3, r12	; 0x03
     97c:	ed 82       	std	Y+5, r14	; 0x05
     97e:	fe 82       	std	Y+6, r15	; 0x06
     980:	0f 83       	std	Y+7, r16	; 0x07
     982:	18 87       	std	Y+8, r17	; 0x08
     984:	c8 01       	movw	r24, r16
     986:	b7 01       	movw	r22, r14
     988:	0e 94 b0 05 	call	0xb60	; 0xb60 <__clzsi2>
     98c:	01 97       	sbiw	r24, 0x01	; 1
     98e:	18 16       	cp	r1, r24
     990:	19 06       	cpc	r1, r25
     992:	84 f4       	brge	.+32     	; 0x9b4 <__floatsisf+0xaa>
     994:	08 2e       	mov	r0, r24
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatsisf+0x96>
     998:	ee 0c       	add	r14, r14
     99a:	ff 1c       	adc	r15, r15
     99c:	00 1f       	adc	r16, r16
     99e:	11 1f       	adc	r17, r17
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatsisf+0x8e>
     9a4:	ed 82       	std	Y+5, r14	; 0x05
     9a6:	fe 82       	std	Y+6, r15	; 0x06
     9a8:	0f 83       	std	Y+7, r16	; 0x07
     9aa:	18 87       	std	Y+8, r17	; 0x08
     9ac:	c8 1a       	sub	r12, r24
     9ae:	d9 0a       	sbc	r13, r25
     9b0:	dc 82       	std	Y+4, r13	; 0x04
     9b2:	cb 82       	std	Y+3, r12	; 0x03
     9b4:	ba 82       	std	Y+2, r11	; 0x02
     9b6:	ce 01       	movw	r24, r28
     9b8:	01 96       	adiw	r24, 0x01	; 1
     9ba:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     9be:	28 96       	adiw	r28, 0x08	; 8
     9c0:	e9 e0       	ldi	r30, 0x09	; 9
     9c2:	0c 94 1d 22 	jmp	0x443a	; 0x443a <__epilogue_restores__+0x12>

000009c6 <__fixsfsi>:
     9c6:	ac e0       	ldi	r26, 0x0C	; 12
     9c8:	b0 e0       	ldi	r27, 0x00	; 0
     9ca:	e9 ee       	ldi	r30, 0xE9	; 233
     9cc:	f4 e0       	ldi	r31, 0x04	; 4
     9ce:	0c 94 08 22 	jmp	0x4410	; 0x4410 <__prologue_saves__+0x20>
     9d2:	69 83       	std	Y+1, r22	; 0x01
     9d4:	7a 83       	std	Y+2, r23	; 0x02
     9d6:	8b 83       	std	Y+3, r24	; 0x03
     9d8:	9c 83       	std	Y+4, r25	; 0x04
     9da:	ce 01       	movw	r24, r28
     9dc:	01 96       	adiw	r24, 0x01	; 1
     9de:	be 01       	movw	r22, r28
     9e0:	6b 5f       	subi	r22, 0xFB	; 251
     9e2:	7f 4f       	sbci	r23, 0xFF	; 255
     9e4:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     9e8:	8d 81       	ldd	r24, Y+5	; 0x05
     9ea:	82 30       	cpi	r24, 0x02	; 2
     9ec:	61 f1       	breq	.+88     	; 0xa46 <__fixsfsi+0x80>
     9ee:	82 30       	cpi	r24, 0x02	; 2
     9f0:	50 f1       	brcs	.+84     	; 0xa46 <__fixsfsi+0x80>
     9f2:	84 30       	cpi	r24, 0x04	; 4
     9f4:	21 f4       	brne	.+8      	; 0x9fe <__fixsfsi+0x38>
     9f6:	8e 81       	ldd	r24, Y+6	; 0x06
     9f8:	88 23       	and	r24, r24
     9fa:	51 f1       	breq	.+84     	; 0xa50 <__fixsfsi+0x8a>
     9fc:	2e c0       	rjmp	.+92     	; 0xa5a <__fixsfsi+0x94>
     9fe:	2f 81       	ldd	r18, Y+7	; 0x07
     a00:	38 85       	ldd	r19, Y+8	; 0x08
     a02:	37 fd       	sbrc	r19, 7
     a04:	20 c0       	rjmp	.+64     	; 0xa46 <__fixsfsi+0x80>
     a06:	6e 81       	ldd	r22, Y+6	; 0x06
     a08:	2f 31       	cpi	r18, 0x1F	; 31
     a0a:	31 05       	cpc	r19, r1
     a0c:	1c f0       	brlt	.+6      	; 0xa14 <__fixsfsi+0x4e>
     a0e:	66 23       	and	r22, r22
     a10:	f9 f0       	breq	.+62     	; 0xa50 <__fixsfsi+0x8a>
     a12:	23 c0       	rjmp	.+70     	; 0xa5a <__fixsfsi+0x94>
     a14:	8e e1       	ldi	r24, 0x1E	; 30
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	82 1b       	sub	r24, r18
     a1a:	93 0b       	sbc	r25, r19
     a1c:	29 85       	ldd	r18, Y+9	; 0x09
     a1e:	3a 85       	ldd	r19, Y+10	; 0x0a
     a20:	4b 85       	ldd	r20, Y+11	; 0x0b
     a22:	5c 85       	ldd	r21, Y+12	; 0x0c
     a24:	04 c0       	rjmp	.+8      	; 0xa2e <__fixsfsi+0x68>
     a26:	56 95       	lsr	r21
     a28:	47 95       	ror	r20
     a2a:	37 95       	ror	r19
     a2c:	27 95       	ror	r18
     a2e:	8a 95       	dec	r24
     a30:	d2 f7       	brpl	.-12     	; 0xa26 <__fixsfsi+0x60>
     a32:	66 23       	and	r22, r22
     a34:	b1 f0       	breq	.+44     	; 0xa62 <__fixsfsi+0x9c>
     a36:	50 95       	com	r21
     a38:	40 95       	com	r20
     a3a:	30 95       	com	r19
     a3c:	21 95       	neg	r18
     a3e:	3f 4f       	sbci	r19, 0xFF	; 255
     a40:	4f 4f       	sbci	r20, 0xFF	; 255
     a42:	5f 4f       	sbci	r21, 0xFF	; 255
     a44:	0e c0       	rjmp	.+28     	; 0xa62 <__fixsfsi+0x9c>
     a46:	20 e0       	ldi	r18, 0x00	; 0
     a48:	30 e0       	ldi	r19, 0x00	; 0
     a4a:	40 e0       	ldi	r20, 0x00	; 0
     a4c:	50 e0       	ldi	r21, 0x00	; 0
     a4e:	09 c0       	rjmp	.+18     	; 0xa62 <__fixsfsi+0x9c>
     a50:	2f ef       	ldi	r18, 0xFF	; 255
     a52:	3f ef       	ldi	r19, 0xFF	; 255
     a54:	4f ef       	ldi	r20, 0xFF	; 255
     a56:	5f e7       	ldi	r21, 0x7F	; 127
     a58:	04 c0       	rjmp	.+8      	; 0xa62 <__fixsfsi+0x9c>
     a5a:	20 e0       	ldi	r18, 0x00	; 0
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	40 e0       	ldi	r20, 0x00	; 0
     a60:	50 e8       	ldi	r21, 0x80	; 128
     a62:	b9 01       	movw	r22, r18
     a64:	ca 01       	movw	r24, r20
     a66:	2c 96       	adiw	r28, 0x0c	; 12
     a68:	e2 e0       	ldi	r30, 0x02	; 2
     a6a:	0c 94 24 22 	jmp	0x4448	; 0x4448 <__epilogue_restores__+0x20>

00000a6e <__floatunsisf>:
     a6e:	a8 e0       	ldi	r26, 0x08	; 8
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	ed e3       	ldi	r30, 0x3D	; 61
     a74:	f5 e0       	ldi	r31, 0x05	; 5
     a76:	0c 94 00 22 	jmp	0x4400	; 0x4400 <__prologue_saves__+0x10>
     a7a:	7b 01       	movw	r14, r22
     a7c:	8c 01       	movw	r16, r24
     a7e:	61 15       	cp	r22, r1
     a80:	71 05       	cpc	r23, r1
     a82:	81 05       	cpc	r24, r1
     a84:	91 05       	cpc	r25, r1
     a86:	19 f4       	brne	.+6      	; 0xa8e <__floatunsisf+0x20>
     a88:	82 e0       	ldi	r24, 0x02	; 2
     a8a:	89 83       	std	Y+1, r24	; 0x01
     a8c:	60 c0       	rjmp	.+192    	; 0xb4e <__floatunsisf+0xe0>
     a8e:	83 e0       	ldi	r24, 0x03	; 3
     a90:	89 83       	std	Y+1, r24	; 0x01
     a92:	8e e1       	ldi	r24, 0x1E	; 30
     a94:	c8 2e       	mov	r12, r24
     a96:	d1 2c       	mov	r13, r1
     a98:	dc 82       	std	Y+4, r13	; 0x04
     a9a:	cb 82       	std	Y+3, r12	; 0x03
     a9c:	ed 82       	std	Y+5, r14	; 0x05
     a9e:	fe 82       	std	Y+6, r15	; 0x06
     aa0:	0f 83       	std	Y+7, r16	; 0x07
     aa2:	18 87       	std	Y+8, r17	; 0x08
     aa4:	c8 01       	movw	r24, r16
     aa6:	b7 01       	movw	r22, r14
     aa8:	0e 94 b0 05 	call	0xb60	; 0xb60 <__clzsi2>
     aac:	fc 01       	movw	r30, r24
     aae:	31 97       	sbiw	r30, 0x01	; 1
     ab0:	f7 ff       	sbrs	r31, 7
     ab2:	3b c0       	rjmp	.+118    	; 0xb2a <__floatunsisf+0xbc>
     ab4:	22 27       	eor	r18, r18
     ab6:	33 27       	eor	r19, r19
     ab8:	2e 1b       	sub	r18, r30
     aba:	3f 0b       	sbc	r19, r31
     abc:	57 01       	movw	r10, r14
     abe:	68 01       	movw	r12, r16
     ac0:	02 2e       	mov	r0, r18
     ac2:	04 c0       	rjmp	.+8      	; 0xacc <__floatunsisf+0x5e>
     ac4:	d6 94       	lsr	r13
     ac6:	c7 94       	ror	r12
     ac8:	b7 94       	ror	r11
     aca:	a7 94       	ror	r10
     acc:	0a 94       	dec	r0
     ace:	d2 f7       	brpl	.-12     	; 0xac4 <__floatunsisf+0x56>
     ad0:	40 e0       	ldi	r20, 0x00	; 0
     ad2:	50 e0       	ldi	r21, 0x00	; 0
     ad4:	60 e0       	ldi	r22, 0x00	; 0
     ad6:	70 e0       	ldi	r23, 0x00	; 0
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	a0 e0       	ldi	r26, 0x00	; 0
     ade:	b0 e0       	ldi	r27, 0x00	; 0
     ae0:	04 c0       	rjmp	.+8      	; 0xaea <__floatunsisf+0x7c>
     ae2:	88 0f       	add	r24, r24
     ae4:	99 1f       	adc	r25, r25
     ae6:	aa 1f       	adc	r26, r26
     ae8:	bb 1f       	adc	r27, r27
     aea:	2a 95       	dec	r18
     aec:	d2 f7       	brpl	.-12     	; 0xae2 <__floatunsisf+0x74>
     aee:	01 97       	sbiw	r24, 0x01	; 1
     af0:	a1 09       	sbc	r26, r1
     af2:	b1 09       	sbc	r27, r1
     af4:	8e 21       	and	r24, r14
     af6:	9f 21       	and	r25, r15
     af8:	a0 23       	and	r26, r16
     afa:	b1 23       	and	r27, r17
     afc:	00 97       	sbiw	r24, 0x00	; 0
     afe:	a1 05       	cpc	r26, r1
     b00:	b1 05       	cpc	r27, r1
     b02:	21 f0       	breq	.+8      	; 0xb0c <__floatunsisf+0x9e>
     b04:	41 e0       	ldi	r20, 0x01	; 1
     b06:	50 e0       	ldi	r21, 0x00	; 0
     b08:	60 e0       	ldi	r22, 0x00	; 0
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	4a 29       	or	r20, r10
     b0e:	5b 29       	or	r21, r11
     b10:	6c 29       	or	r22, r12
     b12:	7d 29       	or	r23, r13
     b14:	4d 83       	std	Y+5, r20	; 0x05
     b16:	5e 83       	std	Y+6, r21	; 0x06
     b18:	6f 83       	std	Y+7, r22	; 0x07
     b1a:	78 87       	std	Y+8, r23	; 0x08
     b1c:	8e e1       	ldi	r24, 0x1E	; 30
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	8e 1b       	sub	r24, r30
     b22:	9f 0b       	sbc	r25, r31
     b24:	9c 83       	std	Y+4, r25	; 0x04
     b26:	8b 83       	std	Y+3, r24	; 0x03
     b28:	12 c0       	rjmp	.+36     	; 0xb4e <__floatunsisf+0xe0>
     b2a:	30 97       	sbiw	r30, 0x00	; 0
     b2c:	81 f0       	breq	.+32     	; 0xb4e <__floatunsisf+0xe0>
     b2e:	0e 2e       	mov	r0, r30
     b30:	04 c0       	rjmp	.+8      	; 0xb3a <__floatunsisf+0xcc>
     b32:	ee 0c       	add	r14, r14
     b34:	ff 1c       	adc	r15, r15
     b36:	00 1f       	adc	r16, r16
     b38:	11 1f       	adc	r17, r17
     b3a:	0a 94       	dec	r0
     b3c:	d2 f7       	brpl	.-12     	; 0xb32 <__floatunsisf+0xc4>
     b3e:	ed 82       	std	Y+5, r14	; 0x05
     b40:	fe 82       	std	Y+6, r15	; 0x06
     b42:	0f 83       	std	Y+7, r16	; 0x07
     b44:	18 87       	std	Y+8, r17	; 0x08
     b46:	ce 1a       	sub	r12, r30
     b48:	df 0a       	sbc	r13, r31
     b4a:	dc 82       	std	Y+4, r13	; 0x04
     b4c:	cb 82       	std	Y+3, r12	; 0x03
     b4e:	1a 82       	std	Y+2, r1	; 0x02
     b50:	ce 01       	movw	r24, r28
     b52:	01 96       	adiw	r24, 0x01	; 1
     b54:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     b58:	28 96       	adiw	r28, 0x08	; 8
     b5a:	ea e0       	ldi	r30, 0x0A	; 10
     b5c:	0c 94 1c 22 	jmp	0x4438	; 0x4438 <__epilogue_restores__+0x10>

00000b60 <__clzsi2>:
     b60:	ef 92       	push	r14
     b62:	ff 92       	push	r15
     b64:	0f 93       	push	r16
     b66:	1f 93       	push	r17
     b68:	7b 01       	movw	r14, r22
     b6a:	8c 01       	movw	r16, r24
     b6c:	80 e0       	ldi	r24, 0x00	; 0
     b6e:	e8 16       	cp	r14, r24
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	f8 06       	cpc	r15, r24
     b74:	81 e0       	ldi	r24, 0x01	; 1
     b76:	08 07       	cpc	r16, r24
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	18 07       	cpc	r17, r24
     b7c:	88 f4       	brcc	.+34     	; 0xba0 <__clzsi2+0x40>
     b7e:	8f ef       	ldi	r24, 0xFF	; 255
     b80:	e8 16       	cp	r14, r24
     b82:	f1 04       	cpc	r15, r1
     b84:	01 05       	cpc	r16, r1
     b86:	11 05       	cpc	r17, r1
     b88:	31 f0       	breq	.+12     	; 0xb96 <__clzsi2+0x36>
     b8a:	28 f0       	brcs	.+10     	; 0xb96 <__clzsi2+0x36>
     b8c:	88 e0       	ldi	r24, 0x08	; 8
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	a0 e0       	ldi	r26, 0x00	; 0
     b92:	b0 e0       	ldi	r27, 0x00	; 0
     b94:	17 c0       	rjmp	.+46     	; 0xbc4 <__clzsi2+0x64>
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	a0 e0       	ldi	r26, 0x00	; 0
     b9c:	b0 e0       	ldi	r27, 0x00	; 0
     b9e:	12 c0       	rjmp	.+36     	; 0xbc4 <__clzsi2+0x64>
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	e8 16       	cp	r14, r24
     ba4:	80 e0       	ldi	r24, 0x00	; 0
     ba6:	f8 06       	cpc	r15, r24
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	08 07       	cpc	r16, r24
     bac:	81 e0       	ldi	r24, 0x01	; 1
     bae:	18 07       	cpc	r17, r24
     bb0:	28 f0       	brcs	.+10     	; 0xbbc <__clzsi2+0x5c>
     bb2:	88 e1       	ldi	r24, 0x18	; 24
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	a0 e0       	ldi	r26, 0x00	; 0
     bb8:	b0 e0       	ldi	r27, 0x00	; 0
     bba:	04 c0       	rjmp	.+8      	; 0xbc4 <__clzsi2+0x64>
     bbc:	80 e1       	ldi	r24, 0x10	; 16
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	a0 e0       	ldi	r26, 0x00	; 0
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	20 e2       	ldi	r18, 0x20	; 32
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	40 e0       	ldi	r20, 0x00	; 0
     bca:	50 e0       	ldi	r21, 0x00	; 0
     bcc:	28 1b       	sub	r18, r24
     bce:	39 0b       	sbc	r19, r25
     bd0:	4a 0b       	sbc	r20, r26
     bd2:	5b 0b       	sbc	r21, r27
     bd4:	04 c0       	rjmp	.+8      	; 0xbde <__clzsi2+0x7e>
     bd6:	16 95       	lsr	r17
     bd8:	07 95       	ror	r16
     bda:	f7 94       	ror	r15
     bdc:	e7 94       	ror	r14
     bde:	8a 95       	dec	r24
     be0:	d2 f7       	brpl	.-12     	; 0xbd6 <__clzsi2+0x76>
     be2:	f7 01       	movw	r30, r14
     be4:	e8 59       	subi	r30, 0x98	; 152
     be6:	ff 4f       	sbci	r31, 0xFF	; 255
     be8:	80 81       	ld	r24, Z
     bea:	28 1b       	sub	r18, r24
     bec:	31 09       	sbc	r19, r1
     bee:	41 09       	sbc	r20, r1
     bf0:	51 09       	sbc	r21, r1
     bf2:	c9 01       	movw	r24, r18
     bf4:	1f 91       	pop	r17
     bf6:	0f 91       	pop	r16
     bf8:	ff 90       	pop	r15
     bfa:	ef 90       	pop	r14
     bfc:	08 95       	ret

00000bfe <__pack_f>:
     bfe:	df 92       	push	r13
     c00:	ef 92       	push	r14
     c02:	ff 92       	push	r15
     c04:	0f 93       	push	r16
     c06:	1f 93       	push	r17
     c08:	fc 01       	movw	r30, r24
     c0a:	e4 80       	ldd	r14, Z+4	; 0x04
     c0c:	f5 80       	ldd	r15, Z+5	; 0x05
     c0e:	06 81       	ldd	r16, Z+6	; 0x06
     c10:	17 81       	ldd	r17, Z+7	; 0x07
     c12:	d1 80       	ldd	r13, Z+1	; 0x01
     c14:	80 81       	ld	r24, Z
     c16:	82 30       	cpi	r24, 0x02	; 2
     c18:	48 f4       	brcc	.+18     	; 0xc2c <__pack_f+0x2e>
     c1a:	80 e0       	ldi	r24, 0x00	; 0
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	a0 e1       	ldi	r26, 0x10	; 16
     c20:	b0 e0       	ldi	r27, 0x00	; 0
     c22:	e8 2a       	or	r14, r24
     c24:	f9 2a       	or	r15, r25
     c26:	0a 2b       	or	r16, r26
     c28:	1b 2b       	or	r17, r27
     c2a:	a5 c0       	rjmp	.+330    	; 0xd76 <__pack_f+0x178>
     c2c:	84 30       	cpi	r24, 0x04	; 4
     c2e:	09 f4       	brne	.+2      	; 0xc32 <__pack_f+0x34>
     c30:	9f c0       	rjmp	.+318    	; 0xd70 <__pack_f+0x172>
     c32:	82 30       	cpi	r24, 0x02	; 2
     c34:	21 f4       	brne	.+8      	; 0xc3e <__pack_f+0x40>
     c36:	ee 24       	eor	r14, r14
     c38:	ff 24       	eor	r15, r15
     c3a:	87 01       	movw	r16, r14
     c3c:	05 c0       	rjmp	.+10     	; 0xc48 <__pack_f+0x4a>
     c3e:	e1 14       	cp	r14, r1
     c40:	f1 04       	cpc	r15, r1
     c42:	01 05       	cpc	r16, r1
     c44:	11 05       	cpc	r17, r1
     c46:	19 f4       	brne	.+6      	; 0xc4e <__pack_f+0x50>
     c48:	e0 e0       	ldi	r30, 0x00	; 0
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	96 c0       	rjmp	.+300    	; 0xd7a <__pack_f+0x17c>
     c4e:	62 81       	ldd	r22, Z+2	; 0x02
     c50:	73 81       	ldd	r23, Z+3	; 0x03
     c52:	9f ef       	ldi	r25, 0xFF	; 255
     c54:	62 38       	cpi	r22, 0x82	; 130
     c56:	79 07       	cpc	r23, r25
     c58:	0c f0       	brlt	.+2      	; 0xc5c <__pack_f+0x5e>
     c5a:	5b c0       	rjmp	.+182    	; 0xd12 <__pack_f+0x114>
     c5c:	22 e8       	ldi	r18, 0x82	; 130
     c5e:	3f ef       	ldi	r19, 0xFF	; 255
     c60:	26 1b       	sub	r18, r22
     c62:	37 0b       	sbc	r19, r23
     c64:	2a 31       	cpi	r18, 0x1A	; 26
     c66:	31 05       	cpc	r19, r1
     c68:	2c f0       	brlt	.+10     	; 0xc74 <__pack_f+0x76>
     c6a:	20 e0       	ldi	r18, 0x00	; 0
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	40 e0       	ldi	r20, 0x00	; 0
     c70:	50 e0       	ldi	r21, 0x00	; 0
     c72:	2a c0       	rjmp	.+84     	; 0xcc8 <__pack_f+0xca>
     c74:	b8 01       	movw	r22, r16
     c76:	a7 01       	movw	r20, r14
     c78:	02 2e       	mov	r0, r18
     c7a:	04 c0       	rjmp	.+8      	; 0xc84 <__pack_f+0x86>
     c7c:	76 95       	lsr	r23
     c7e:	67 95       	ror	r22
     c80:	57 95       	ror	r21
     c82:	47 95       	ror	r20
     c84:	0a 94       	dec	r0
     c86:	d2 f7       	brpl	.-12     	; 0xc7c <__pack_f+0x7e>
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	a0 e0       	ldi	r26, 0x00	; 0
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	04 c0       	rjmp	.+8      	; 0xc9a <__pack_f+0x9c>
     c92:	88 0f       	add	r24, r24
     c94:	99 1f       	adc	r25, r25
     c96:	aa 1f       	adc	r26, r26
     c98:	bb 1f       	adc	r27, r27
     c9a:	2a 95       	dec	r18
     c9c:	d2 f7       	brpl	.-12     	; 0xc92 <__pack_f+0x94>
     c9e:	01 97       	sbiw	r24, 0x01	; 1
     ca0:	a1 09       	sbc	r26, r1
     ca2:	b1 09       	sbc	r27, r1
     ca4:	8e 21       	and	r24, r14
     ca6:	9f 21       	and	r25, r15
     ca8:	a0 23       	and	r26, r16
     caa:	b1 23       	and	r27, r17
     cac:	00 97       	sbiw	r24, 0x00	; 0
     cae:	a1 05       	cpc	r26, r1
     cb0:	b1 05       	cpc	r27, r1
     cb2:	21 f0       	breq	.+8      	; 0xcbc <__pack_f+0xbe>
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	a0 e0       	ldi	r26, 0x00	; 0
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	9a 01       	movw	r18, r20
     cbe:	ab 01       	movw	r20, r22
     cc0:	28 2b       	or	r18, r24
     cc2:	39 2b       	or	r19, r25
     cc4:	4a 2b       	or	r20, r26
     cc6:	5b 2b       	or	r21, r27
     cc8:	da 01       	movw	r26, r20
     cca:	c9 01       	movw	r24, r18
     ccc:	8f 77       	andi	r24, 0x7F	; 127
     cce:	90 70       	andi	r25, 0x00	; 0
     cd0:	a0 70       	andi	r26, 0x00	; 0
     cd2:	b0 70       	andi	r27, 0x00	; 0
     cd4:	80 34       	cpi	r24, 0x40	; 64
     cd6:	91 05       	cpc	r25, r1
     cd8:	a1 05       	cpc	r26, r1
     cda:	b1 05       	cpc	r27, r1
     cdc:	39 f4       	brne	.+14     	; 0xcec <__pack_f+0xee>
     cde:	27 ff       	sbrs	r18, 7
     ce0:	09 c0       	rjmp	.+18     	; 0xcf4 <__pack_f+0xf6>
     ce2:	20 5c       	subi	r18, 0xC0	; 192
     ce4:	3f 4f       	sbci	r19, 0xFF	; 255
     ce6:	4f 4f       	sbci	r20, 0xFF	; 255
     ce8:	5f 4f       	sbci	r21, 0xFF	; 255
     cea:	04 c0       	rjmp	.+8      	; 0xcf4 <__pack_f+0xf6>
     cec:	21 5c       	subi	r18, 0xC1	; 193
     cee:	3f 4f       	sbci	r19, 0xFF	; 255
     cf0:	4f 4f       	sbci	r20, 0xFF	; 255
     cf2:	5f 4f       	sbci	r21, 0xFF	; 255
     cf4:	e0 e0       	ldi	r30, 0x00	; 0
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	20 30       	cpi	r18, 0x00	; 0
     cfa:	a0 e0       	ldi	r26, 0x00	; 0
     cfc:	3a 07       	cpc	r19, r26
     cfe:	a0 e0       	ldi	r26, 0x00	; 0
     d00:	4a 07       	cpc	r20, r26
     d02:	a0 e4       	ldi	r26, 0x40	; 64
     d04:	5a 07       	cpc	r21, r26
     d06:	10 f0       	brcs	.+4      	; 0xd0c <__pack_f+0x10e>
     d08:	e1 e0       	ldi	r30, 0x01	; 1
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	79 01       	movw	r14, r18
     d0e:	8a 01       	movw	r16, r20
     d10:	27 c0       	rjmp	.+78     	; 0xd60 <__pack_f+0x162>
     d12:	60 38       	cpi	r22, 0x80	; 128
     d14:	71 05       	cpc	r23, r1
     d16:	64 f5       	brge	.+88     	; 0xd70 <__pack_f+0x172>
     d18:	fb 01       	movw	r30, r22
     d1a:	e1 58       	subi	r30, 0x81	; 129
     d1c:	ff 4f       	sbci	r31, 0xFF	; 255
     d1e:	d8 01       	movw	r26, r16
     d20:	c7 01       	movw	r24, r14
     d22:	8f 77       	andi	r24, 0x7F	; 127
     d24:	90 70       	andi	r25, 0x00	; 0
     d26:	a0 70       	andi	r26, 0x00	; 0
     d28:	b0 70       	andi	r27, 0x00	; 0
     d2a:	80 34       	cpi	r24, 0x40	; 64
     d2c:	91 05       	cpc	r25, r1
     d2e:	a1 05       	cpc	r26, r1
     d30:	b1 05       	cpc	r27, r1
     d32:	39 f4       	brne	.+14     	; 0xd42 <__pack_f+0x144>
     d34:	e7 fe       	sbrs	r14, 7
     d36:	0d c0       	rjmp	.+26     	; 0xd52 <__pack_f+0x154>
     d38:	80 e4       	ldi	r24, 0x40	; 64
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	a0 e0       	ldi	r26, 0x00	; 0
     d3e:	b0 e0       	ldi	r27, 0x00	; 0
     d40:	04 c0       	rjmp	.+8      	; 0xd4a <__pack_f+0x14c>
     d42:	8f e3       	ldi	r24, 0x3F	; 63
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	a0 e0       	ldi	r26, 0x00	; 0
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	e8 0e       	add	r14, r24
     d4c:	f9 1e       	adc	r15, r25
     d4e:	0a 1f       	adc	r16, r26
     d50:	1b 1f       	adc	r17, r27
     d52:	17 ff       	sbrs	r17, 7
     d54:	05 c0       	rjmp	.+10     	; 0xd60 <__pack_f+0x162>
     d56:	16 95       	lsr	r17
     d58:	07 95       	ror	r16
     d5a:	f7 94       	ror	r15
     d5c:	e7 94       	ror	r14
     d5e:	31 96       	adiw	r30, 0x01	; 1
     d60:	87 e0       	ldi	r24, 0x07	; 7
     d62:	16 95       	lsr	r17
     d64:	07 95       	ror	r16
     d66:	f7 94       	ror	r15
     d68:	e7 94       	ror	r14
     d6a:	8a 95       	dec	r24
     d6c:	d1 f7       	brne	.-12     	; 0xd62 <__pack_f+0x164>
     d6e:	05 c0       	rjmp	.+10     	; 0xd7a <__pack_f+0x17c>
     d70:	ee 24       	eor	r14, r14
     d72:	ff 24       	eor	r15, r15
     d74:	87 01       	movw	r16, r14
     d76:	ef ef       	ldi	r30, 0xFF	; 255
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	6e 2f       	mov	r22, r30
     d7c:	67 95       	ror	r22
     d7e:	66 27       	eor	r22, r22
     d80:	67 95       	ror	r22
     d82:	90 2f       	mov	r25, r16
     d84:	9f 77       	andi	r25, 0x7F	; 127
     d86:	d7 94       	ror	r13
     d88:	dd 24       	eor	r13, r13
     d8a:	d7 94       	ror	r13
     d8c:	8e 2f       	mov	r24, r30
     d8e:	86 95       	lsr	r24
     d90:	49 2f       	mov	r20, r25
     d92:	46 2b       	or	r20, r22
     d94:	58 2f       	mov	r21, r24
     d96:	5d 29       	or	r21, r13
     d98:	b7 01       	movw	r22, r14
     d9a:	ca 01       	movw	r24, r20
     d9c:	1f 91       	pop	r17
     d9e:	0f 91       	pop	r16
     da0:	ff 90       	pop	r15
     da2:	ef 90       	pop	r14
     da4:	df 90       	pop	r13
     da6:	08 95       	ret

00000da8 <__unpack_f>:
     da8:	fc 01       	movw	r30, r24
     daa:	db 01       	movw	r26, r22
     dac:	40 81       	ld	r20, Z
     dae:	51 81       	ldd	r21, Z+1	; 0x01
     db0:	22 81       	ldd	r18, Z+2	; 0x02
     db2:	62 2f       	mov	r22, r18
     db4:	6f 77       	andi	r22, 0x7F	; 127
     db6:	70 e0       	ldi	r23, 0x00	; 0
     db8:	22 1f       	adc	r18, r18
     dba:	22 27       	eor	r18, r18
     dbc:	22 1f       	adc	r18, r18
     dbe:	93 81       	ldd	r25, Z+3	; 0x03
     dc0:	89 2f       	mov	r24, r25
     dc2:	88 0f       	add	r24, r24
     dc4:	82 2b       	or	r24, r18
     dc6:	28 2f       	mov	r18, r24
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	99 1f       	adc	r25, r25
     dcc:	99 27       	eor	r25, r25
     dce:	99 1f       	adc	r25, r25
     dd0:	11 96       	adiw	r26, 0x01	; 1
     dd2:	9c 93       	st	X, r25
     dd4:	11 97       	sbiw	r26, 0x01	; 1
     dd6:	21 15       	cp	r18, r1
     dd8:	31 05       	cpc	r19, r1
     dda:	a9 f5       	brne	.+106    	; 0xe46 <__unpack_f+0x9e>
     ddc:	41 15       	cp	r20, r1
     dde:	51 05       	cpc	r21, r1
     de0:	61 05       	cpc	r22, r1
     de2:	71 05       	cpc	r23, r1
     de4:	11 f4       	brne	.+4      	; 0xdea <__unpack_f+0x42>
     de6:	82 e0       	ldi	r24, 0x02	; 2
     de8:	37 c0       	rjmp	.+110    	; 0xe58 <__unpack_f+0xb0>
     dea:	82 e8       	ldi	r24, 0x82	; 130
     dec:	9f ef       	ldi	r25, 0xFF	; 255
     dee:	13 96       	adiw	r26, 0x03	; 3
     df0:	9c 93       	st	X, r25
     df2:	8e 93       	st	-X, r24
     df4:	12 97       	sbiw	r26, 0x02	; 2
     df6:	9a 01       	movw	r18, r20
     df8:	ab 01       	movw	r20, r22
     dfa:	67 e0       	ldi	r22, 0x07	; 7
     dfc:	22 0f       	add	r18, r18
     dfe:	33 1f       	adc	r19, r19
     e00:	44 1f       	adc	r20, r20
     e02:	55 1f       	adc	r21, r21
     e04:	6a 95       	dec	r22
     e06:	d1 f7       	brne	.-12     	; 0xdfc <__unpack_f+0x54>
     e08:	83 e0       	ldi	r24, 0x03	; 3
     e0a:	8c 93       	st	X, r24
     e0c:	0d c0       	rjmp	.+26     	; 0xe28 <__unpack_f+0x80>
     e0e:	22 0f       	add	r18, r18
     e10:	33 1f       	adc	r19, r19
     e12:	44 1f       	adc	r20, r20
     e14:	55 1f       	adc	r21, r21
     e16:	12 96       	adiw	r26, 0x02	; 2
     e18:	8d 91       	ld	r24, X+
     e1a:	9c 91       	ld	r25, X
     e1c:	13 97       	sbiw	r26, 0x03	; 3
     e1e:	01 97       	sbiw	r24, 0x01	; 1
     e20:	13 96       	adiw	r26, 0x03	; 3
     e22:	9c 93       	st	X, r25
     e24:	8e 93       	st	-X, r24
     e26:	12 97       	sbiw	r26, 0x02	; 2
     e28:	20 30       	cpi	r18, 0x00	; 0
     e2a:	80 e0       	ldi	r24, 0x00	; 0
     e2c:	38 07       	cpc	r19, r24
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	48 07       	cpc	r20, r24
     e32:	80 e4       	ldi	r24, 0x40	; 64
     e34:	58 07       	cpc	r21, r24
     e36:	58 f3       	brcs	.-42     	; 0xe0e <__unpack_f+0x66>
     e38:	14 96       	adiw	r26, 0x04	; 4
     e3a:	2d 93       	st	X+, r18
     e3c:	3d 93       	st	X+, r19
     e3e:	4d 93       	st	X+, r20
     e40:	5c 93       	st	X, r21
     e42:	17 97       	sbiw	r26, 0x07	; 7
     e44:	08 95       	ret
     e46:	2f 3f       	cpi	r18, 0xFF	; 255
     e48:	31 05       	cpc	r19, r1
     e4a:	79 f4       	brne	.+30     	; 0xe6a <__unpack_f+0xc2>
     e4c:	41 15       	cp	r20, r1
     e4e:	51 05       	cpc	r21, r1
     e50:	61 05       	cpc	r22, r1
     e52:	71 05       	cpc	r23, r1
     e54:	19 f4       	brne	.+6      	; 0xe5c <__unpack_f+0xb4>
     e56:	84 e0       	ldi	r24, 0x04	; 4
     e58:	8c 93       	st	X, r24
     e5a:	08 95       	ret
     e5c:	64 ff       	sbrs	r22, 4
     e5e:	03 c0       	rjmp	.+6      	; 0xe66 <__unpack_f+0xbe>
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	8c 93       	st	X, r24
     e64:	12 c0       	rjmp	.+36     	; 0xe8a <__unpack_f+0xe2>
     e66:	1c 92       	st	X, r1
     e68:	10 c0       	rjmp	.+32     	; 0xe8a <__unpack_f+0xe2>
     e6a:	2f 57       	subi	r18, 0x7F	; 127
     e6c:	30 40       	sbci	r19, 0x00	; 0
     e6e:	13 96       	adiw	r26, 0x03	; 3
     e70:	3c 93       	st	X, r19
     e72:	2e 93       	st	-X, r18
     e74:	12 97       	sbiw	r26, 0x02	; 2
     e76:	83 e0       	ldi	r24, 0x03	; 3
     e78:	8c 93       	st	X, r24
     e7a:	87 e0       	ldi	r24, 0x07	; 7
     e7c:	44 0f       	add	r20, r20
     e7e:	55 1f       	adc	r21, r21
     e80:	66 1f       	adc	r22, r22
     e82:	77 1f       	adc	r23, r23
     e84:	8a 95       	dec	r24
     e86:	d1 f7       	brne	.-12     	; 0xe7c <__unpack_f+0xd4>
     e88:	70 64       	ori	r23, 0x40	; 64
     e8a:	14 96       	adiw	r26, 0x04	; 4
     e8c:	4d 93       	st	X+, r20
     e8e:	5d 93       	st	X+, r21
     e90:	6d 93       	st	X+, r22
     e92:	7c 93       	st	X, r23
     e94:	17 97       	sbiw	r26, 0x07	; 7
     e96:	08 95       	ret

00000e98 <__fpcmp_parts_f>:
     e98:	1f 93       	push	r17
     e9a:	dc 01       	movw	r26, r24
     e9c:	fb 01       	movw	r30, r22
     e9e:	9c 91       	ld	r25, X
     ea0:	92 30       	cpi	r25, 0x02	; 2
     ea2:	08 f4       	brcc	.+2      	; 0xea6 <__fpcmp_parts_f+0xe>
     ea4:	47 c0       	rjmp	.+142    	; 0xf34 <__fpcmp_parts_f+0x9c>
     ea6:	80 81       	ld	r24, Z
     ea8:	82 30       	cpi	r24, 0x02	; 2
     eaa:	08 f4       	brcc	.+2      	; 0xeae <__fpcmp_parts_f+0x16>
     eac:	43 c0       	rjmp	.+134    	; 0xf34 <__fpcmp_parts_f+0x9c>
     eae:	94 30       	cpi	r25, 0x04	; 4
     eb0:	51 f4       	brne	.+20     	; 0xec6 <__fpcmp_parts_f+0x2e>
     eb2:	11 96       	adiw	r26, 0x01	; 1
     eb4:	1c 91       	ld	r17, X
     eb6:	84 30       	cpi	r24, 0x04	; 4
     eb8:	99 f5       	brne	.+102    	; 0xf20 <__fpcmp_parts_f+0x88>
     eba:	81 81       	ldd	r24, Z+1	; 0x01
     ebc:	68 2f       	mov	r22, r24
     ebe:	70 e0       	ldi	r23, 0x00	; 0
     ec0:	61 1b       	sub	r22, r17
     ec2:	71 09       	sbc	r23, r1
     ec4:	3f c0       	rjmp	.+126    	; 0xf44 <__fpcmp_parts_f+0xac>
     ec6:	84 30       	cpi	r24, 0x04	; 4
     ec8:	21 f0       	breq	.+8      	; 0xed2 <__fpcmp_parts_f+0x3a>
     eca:	92 30       	cpi	r25, 0x02	; 2
     ecc:	31 f4       	brne	.+12     	; 0xeda <__fpcmp_parts_f+0x42>
     ece:	82 30       	cpi	r24, 0x02	; 2
     ed0:	b9 f1       	breq	.+110    	; 0xf40 <__fpcmp_parts_f+0xa8>
     ed2:	81 81       	ldd	r24, Z+1	; 0x01
     ed4:	88 23       	and	r24, r24
     ed6:	89 f1       	breq	.+98     	; 0xf3a <__fpcmp_parts_f+0xa2>
     ed8:	2d c0       	rjmp	.+90     	; 0xf34 <__fpcmp_parts_f+0x9c>
     eda:	11 96       	adiw	r26, 0x01	; 1
     edc:	1c 91       	ld	r17, X
     ede:	11 97       	sbiw	r26, 0x01	; 1
     ee0:	82 30       	cpi	r24, 0x02	; 2
     ee2:	f1 f0       	breq	.+60     	; 0xf20 <__fpcmp_parts_f+0x88>
     ee4:	81 81       	ldd	r24, Z+1	; 0x01
     ee6:	18 17       	cp	r17, r24
     ee8:	d9 f4       	brne	.+54     	; 0xf20 <__fpcmp_parts_f+0x88>
     eea:	12 96       	adiw	r26, 0x02	; 2
     eec:	2d 91       	ld	r18, X+
     eee:	3c 91       	ld	r19, X
     ef0:	13 97       	sbiw	r26, 0x03	; 3
     ef2:	82 81       	ldd	r24, Z+2	; 0x02
     ef4:	93 81       	ldd	r25, Z+3	; 0x03
     ef6:	82 17       	cp	r24, r18
     ef8:	93 07       	cpc	r25, r19
     efa:	94 f0       	brlt	.+36     	; 0xf20 <__fpcmp_parts_f+0x88>
     efc:	28 17       	cp	r18, r24
     efe:	39 07       	cpc	r19, r25
     f00:	bc f0       	brlt	.+46     	; 0xf30 <__fpcmp_parts_f+0x98>
     f02:	14 96       	adiw	r26, 0x04	; 4
     f04:	8d 91       	ld	r24, X+
     f06:	9d 91       	ld	r25, X+
     f08:	0d 90       	ld	r0, X+
     f0a:	bc 91       	ld	r27, X
     f0c:	a0 2d       	mov	r26, r0
     f0e:	24 81       	ldd	r18, Z+4	; 0x04
     f10:	35 81       	ldd	r19, Z+5	; 0x05
     f12:	46 81       	ldd	r20, Z+6	; 0x06
     f14:	57 81       	ldd	r21, Z+7	; 0x07
     f16:	28 17       	cp	r18, r24
     f18:	39 07       	cpc	r19, r25
     f1a:	4a 07       	cpc	r20, r26
     f1c:	5b 07       	cpc	r21, r27
     f1e:	18 f4       	brcc	.+6      	; 0xf26 <__fpcmp_parts_f+0x8e>
     f20:	11 23       	and	r17, r17
     f22:	41 f0       	breq	.+16     	; 0xf34 <__fpcmp_parts_f+0x9c>
     f24:	0a c0       	rjmp	.+20     	; 0xf3a <__fpcmp_parts_f+0xa2>
     f26:	82 17       	cp	r24, r18
     f28:	93 07       	cpc	r25, r19
     f2a:	a4 07       	cpc	r26, r20
     f2c:	b5 07       	cpc	r27, r21
     f2e:	40 f4       	brcc	.+16     	; 0xf40 <__fpcmp_parts_f+0xa8>
     f30:	11 23       	and	r17, r17
     f32:	19 f0       	breq	.+6      	; 0xf3a <__fpcmp_parts_f+0xa2>
     f34:	61 e0       	ldi	r22, 0x01	; 1
     f36:	70 e0       	ldi	r23, 0x00	; 0
     f38:	05 c0       	rjmp	.+10     	; 0xf44 <__fpcmp_parts_f+0xac>
     f3a:	6f ef       	ldi	r22, 0xFF	; 255
     f3c:	7f ef       	ldi	r23, 0xFF	; 255
     f3e:	02 c0       	rjmp	.+4      	; 0xf44 <__fpcmp_parts_f+0xac>
     f40:	60 e0       	ldi	r22, 0x00	; 0
     f42:	70 e0       	ldi	r23, 0x00	; 0
     f44:	cb 01       	movw	r24, r22
     f46:	1f 91       	pop	r17
     f48:	08 95       	ret

00000f4a <TIMER0_voidInit>:

static void (*TIMER0_pvCallBackFunc)(void) = NULL;
static void (*ICU_pvCallBackFunc)(void) = NULL;

void TIMER0_voidInit(void)
{
     f4a:	df 93       	push	r29
     f4c:	cf 93       	push	r28
     f4e:	cd b7       	in	r28, 0x3d	; 61
     f50:	de b7       	in	r29, 0x3e	; 62
	/* Choose fast pwm mode*/
	SET_BIT(TCCR0,TCCR0_WGM00);
     f52:	a3 e5       	ldi	r26, 0x53	; 83
     f54:	b0 e0       	ldi	r27, 0x00	; 0
     f56:	e3 e5       	ldi	r30, 0x53	; 83
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	80 64       	ori	r24, 0x40	; 64
     f5e:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_WGM01);
     f60:	a3 e5       	ldi	r26, 0x53	; 83
     f62:	b0 e0       	ldi	r27, 0x00	; 0
     f64:	e3 e5       	ldi	r30, 0x53	; 83
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	80 81       	ld	r24, Z
     f6a:	88 60       	ori	r24, 0x08	; 8
     f6c:	8c 93       	st	X, r24

	//	/* output compare match interrupt enable */
	//	SET_BIT(TIMSK,TIMSK_OCIE0);
	//
	/*Set compare match value to 250*/
	OCR0 = 64;
     f6e:	ec e5       	ldi	r30, 0x5C	; 92
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	80 e4       	ldi	r24, 0x40	; 64
     f74:	80 83       	st	Z, r24

	CLR_BIT(TCCR0,4);
     f76:	a3 e5       	ldi	r26, 0x53	; 83
     f78:	b0 e0       	ldi	r27, 0x00	; 0
     f7a:	e3 e5       	ldi	r30, 0x53	; 83
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	80 81       	ld	r24, Z
     f80:	8f 7e       	andi	r24, 0xEF	; 239
     f82:	8c 93       	st	X, r24
	SET_BIT(TCCR0,5);
     f84:	a3 e5       	ldi	r26, 0x53	; 83
     f86:	b0 e0       	ldi	r27, 0x00	; 0
     f88:	e3 e5       	ldi	r30, 0x53	; 83
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 81       	ld	r24, Z
     f8e:	80 62       	ori	r24, 0x20	; 32
     f90:	8c 93       	st	X, r24
	/*prescaller : Division by 64*/
	CLR_BIT(TCCR0,TCCR0_CS00);
     f92:	a3 e5       	ldi	r26, 0x53	; 83
     f94:	b0 e0       	ldi	r27, 0x00	; 0
     f96:	e3 e5       	ldi	r30, 0x53	; 83
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	80 81       	ld	r24, Z
     f9c:	8e 7f       	andi	r24, 0xFE	; 254
     f9e:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_CS01);
     fa0:	a3 e5       	ldi	r26, 0x53	; 83
     fa2:	b0 e0       	ldi	r27, 0x00	; 0
     fa4:	e3 e5       	ldi	r30, 0x53	; 83
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	80 81       	ld	r24, Z
     faa:	82 60       	ori	r24, 0x02	; 2
     fac:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_CS02);
     fae:	a3 e5       	ldi	r26, 0x53	; 83
     fb0:	b0 e0       	ldi	r27, 0x00	; 0
     fb2:	e3 e5       	ldi	r30, 0x53	; 83
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	80 81       	ld	r24, Z
     fb8:	8e 7f       	andi	r24, 0xFE	; 254
     fba:	8c 93       	st	X, r24

}
     fbc:	cf 91       	pop	r28
     fbe:	df 91       	pop	r29
     fc0:	08 95       	ret

00000fc2 <TIMER0_SetComMatchValue>:

void TIMER0_SetComMatchValue(u8 Copy_u8Value)
{
     fc2:	df 93       	push	r29
     fc4:	cf 93       	push	r28
     fc6:	0f 92       	push	r0
     fc8:	cd b7       	in	r28, 0x3d	; 61
     fca:	de b7       	in	r29, 0x3e	; 62
     fcc:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Copy_u8Value;
     fce:	ec e5       	ldi	r30, 0x5C	; 92
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	89 81       	ldd	r24, Y+1	; 0x01
     fd4:	80 83       	st	Z, r24
}
     fd6:	0f 90       	pop	r0
     fd8:	cf 91       	pop	r28
     fda:	df 91       	pop	r29
     fdc:	08 95       	ret

00000fde <TIMER0_u8SetCallBack>:

u8 TIMER0_u8SetCallBack(void(*Copy_pvCallBackFunc)(void))
{
     fde:	df 93       	push	r29
     fe0:	cf 93       	push	r28
     fe2:	00 d0       	rcall	.+0      	; 0xfe4 <TIMER0_u8SetCallBack+0x6>
     fe4:	0f 92       	push	r0
     fe6:	cd b7       	in	r28, 0x3d	; 61
     fe8:	de b7       	in	r29, 0x3e	; 62
     fea:	9b 83       	std	Y+3, r25	; 0x03
     fec:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStatus = R_OK;
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pvCallBackFunc != NULL)
     ff2:	8a 81       	ldd	r24, Y+2	; 0x02
     ff4:	9b 81       	ldd	r25, Y+3	; 0x03
     ff6:	00 97       	sbiw	r24, 0x00	; 0
     ff8:	39 f0       	breq	.+14     	; 0x1008 <TIMER0_u8SetCallBack+0x2a>
	{
		TIMER0_pvCallBackFunc = Copy_pvCallBackFunc;
     ffa:	8a 81       	ldd	r24, Y+2	; 0x02
     ffc:	9b 81       	ldd	r25, Y+3	; 0x03
     ffe:	90 93 9d 01 	sts	0x019D, r25
    1002:	80 93 9c 01 	sts	0x019C, r24
    1006:	02 c0       	rjmp	.+4      	; 0x100c <TIMER0_u8SetCallBack+0x2e>
	}
	else
	{
		Local_u8ErrorStatus = NULL_POINTER;
    1008:	86 e0       	ldi	r24, 0x06	; 6
    100a:	89 83       	std	Y+1, r24	; 0x01

	}


	return Local_u8ErrorStatus;
    100c:	89 81       	ldd	r24, Y+1	; 0x01

}
    100e:	0f 90       	pop	r0
    1010:	0f 90       	pop	r0
    1012:	0f 90       	pop	r0
    1014:	cf 91       	pop	r28
    1016:	df 91       	pop	r29
    1018:	08 95       	ret

0000101a <TIMER1_voidInit>:
/******************************************************************************/
void TIMER1_voidInit(void)
{
    101a:	df 93       	push	r29
    101c:	cf 93       	push	r28
    101e:	cd b7       	in	r28, 0x3d	; 61
    1020:	de b7       	in	r29, 0x3e	; 62
	//	CLR_BIT(TCCR1A,TCCR1A_WGM10);
	//	SET_BIT(TCCR1A,TCCR1A_WGM11);
	//	SET_BIT(TCCR1B,TCCR1B_WGM12);
	//	SET_BIT(TCCR1B,TCCR1B_WGM13);
	/* Setting prescaller */
	TCCR1B &= PRESCALER_MASK;
    1022:	ae e4       	ldi	r26, 0x4E	; 78
    1024:	b0 e0       	ldi	r27, 0x00	; 0
    1026:	ee e4       	ldi	r30, 0x4E	; 78
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	80 81       	ld	r24, Z
    102c:	88 7f       	andi	r24, 0xF8	; 248
    102e:	8c 93       	st	X, r24
	TCCR1B |= 3;
    1030:	ae e4       	ldi	r26, 0x4E	; 78
    1032:	b0 e0       	ldi	r27, 0x00	; 0
    1034:	ee e4       	ldi	r30, 0x4E	; 78
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	80 81       	ld	r24, Z
    103a:	83 60       	ori	r24, 0x03	; 3
    103c:	8c 93       	st	X, r24


}
    103e:	cf 91       	pop	r28
    1040:	df 91       	pop	r29
    1042:	08 95       	ret

00001044 <TIMER1_VoidSetTimerValue>:

void TIMER1_VoidSetTimerValue(u16 Copy_u16Value)
{
    1044:	df 93       	push	r29
    1046:	cf 93       	push	r28
    1048:	00 d0       	rcall	.+0      	; 0x104a <TIMER1_VoidSetTimerValue+0x6>
    104a:	cd b7       	in	r28, 0x3d	; 61
    104c:	de b7       	in	r29, 0x3e	; 62
    104e:	9a 83       	std	Y+2, r25	; 0x02
    1050:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = Copy_u16Value;
    1052:	ec e4       	ldi	r30, 0x4C	; 76
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	89 81       	ldd	r24, Y+1	; 0x01
    1058:	9a 81       	ldd	r25, Y+2	; 0x02
    105a:	91 83       	std	Z+1, r25	; 0x01
    105c:	80 83       	st	Z, r24
}
    105e:	0f 90       	pop	r0
    1060:	0f 90       	pop	r0
    1062:	cf 91       	pop	r28
    1064:	df 91       	pop	r29
    1066:	08 95       	ret

00001068 <Timer1_u16ReadTimerValue>:

u16 Timer1_u16ReadTimerValue(void)
{
    1068:	df 93       	push	r29
    106a:	cf 93       	push	r28
    106c:	cd b7       	in	r28, 0x3d	; 61
    106e:	de b7       	in	r29, 0x3e	; 62
	return TCNT1;
    1070:	ec e4       	ldi	r30, 0x4C	; 76
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	80 81       	ld	r24, Z
    1076:	91 81       	ldd	r25, Z+1	; 0x01
}
    1078:	cf 91       	pop	r28
    107a:	df 91       	pop	r29
    107c:	08 95       	ret

0000107e <TIMER1_voidSetICR>:
void TIMER1_voidSetICR(u16 Copt_u16TOP)
{
    107e:	df 93       	push	r29
    1080:	cf 93       	push	r28
    1082:	00 d0       	rcall	.+0      	; 0x1084 <TIMER1_voidSetICR+0x6>
    1084:	cd b7       	in	r28, 0x3d	; 61
    1086:	de b7       	in	r29, 0x3e	; 62
    1088:	9a 83       	std	Y+2, r25	; 0x02
    108a:	89 83       	std	Y+1, r24	; 0x01
	ICR1 = Copt_u16TOP;
    108c:	e6 e4       	ldi	r30, 0x46	; 70
    108e:	f0 e0       	ldi	r31, 0x00	; 0
    1090:	89 81       	ldd	r24, Y+1	; 0x01
    1092:	9a 81       	ldd	r25, Y+2	; 0x02
    1094:	91 83       	std	Z+1, r25	; 0x01
    1096:	80 83       	st	Z, r24

}
    1098:	0f 90       	pop	r0
    109a:	0f 90       	pop	r0
    109c:	cf 91       	pop	r28
    109e:	df 91       	pop	r29
    10a0:	08 95       	ret

000010a2 <TIMER1_SetChannelAComMatchValue>:

void TIMER1_SetChannelAComMatchValue(u16 Copy_u16CompareMatch)
{
    10a2:	df 93       	push	r29
    10a4:	cf 93       	push	r28
    10a6:	00 d0       	rcall	.+0      	; 0x10a8 <TIMER1_SetChannelAComMatchValue+0x6>
    10a8:	cd b7       	in	r28, 0x3d	; 61
    10aa:	de b7       	in	r29, 0x3e	; 62
    10ac:	9a 83       	std	Y+2, r25	; 0x02
    10ae:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = Copy_u16CompareMatch;
    10b0:	ea e4       	ldi	r30, 0x4A	; 74
    10b2:	f0 e0       	ldi	r31, 0x00	; 0
    10b4:	89 81       	ldd	r24, Y+1	; 0x01
    10b6:	9a 81       	ldd	r25, Y+2	; 0x02
    10b8:	91 83       	std	Z+1, r25	; 0x01
    10ba:	80 83       	st	Z, r24

}
    10bc:	0f 90       	pop	r0
    10be:	0f 90       	pop	r0
    10c0:	cf 91       	pop	r28
    10c2:	df 91       	pop	r29
    10c4:	08 95       	ret

000010c6 <ICU_voidInit>:


void ICU_voidInit(void)
{
    10c6:	df 93       	push	r29
    10c8:	cf 93       	push	r28
    10ca:	cd b7       	in	r28, 0x3d	; 61
    10cc:	de b7       	in	r29, 0x3e	; 62
	/* Set trigger source to rising edge initially */
	SET_BIT(TCCR1B,TCCR1B_ICES1);
    10ce:	ae e4       	ldi	r26, 0x4E	; 78
    10d0:	b0 e0       	ldi	r27, 0x00	; 0
    10d2:	ee e4       	ldi	r30, 0x4E	; 78
    10d4:	f0 e0       	ldi	r31, 0x00	; 0
    10d6:	80 81       	ld	r24, Z
    10d8:	80 64       	ori	r24, 0x40	; 64
    10da:	8c 93       	st	X, r24

	/* Enable Input Capture interrupt */
	SET_BIT(TIMSK,TIMSK_TICIE1);
    10dc:	a9 e5       	ldi	r26, 0x59	; 89
    10de:	b0 e0       	ldi	r27, 0x00	; 0
    10e0:	e9 e5       	ldi	r30, 0x59	; 89
    10e2:	f0 e0       	ldi	r31, 0x00	; 0
    10e4:	80 81       	ld	r24, Z
    10e6:	80 62       	ori	r24, 0x20	; 32
    10e8:	8c 93       	st	X, r24
}
    10ea:	cf 91       	pop	r28
    10ec:	df 91       	pop	r29
    10ee:	08 95       	ret

000010f0 <ICU_u8SetTriggerEdge>:

u8 ICU_u8SetTriggerEdge(u8 Copy_u8Edge)
{
    10f0:	df 93       	push	r29
    10f2:	cf 93       	push	r28
    10f4:	00 d0       	rcall	.+0      	; 0x10f6 <ICU_u8SetTriggerEdge+0x6>
    10f6:	cd b7       	in	r28, 0x3d	; 61
    10f8:	de b7       	in	r29, 0x3e	; 62
    10fa:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = R_OK;
    10fc:	81 e0       	ldi	r24, 0x01	; 1
    10fe:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8Edge == ICU_RISING_EDGE)
    1100:	8a 81       	ldd	r24, Y+2	; 0x02
    1102:	81 30       	cpi	r24, 0x01	; 1
    1104:	41 f4       	brne	.+16     	; 0x1116 <ICU_u8SetTriggerEdge+0x26>
	{
		SET_BIT(TCCR1B,TCCR1B_ICES1);
    1106:	ae e4       	ldi	r26, 0x4E	; 78
    1108:	b0 e0       	ldi	r27, 0x00	; 0
    110a:	ee e4       	ldi	r30, 0x4E	; 78
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	80 81       	ld	r24, Z
    1110:	80 64       	ori	r24, 0x40	; 64
    1112:	8c 93       	st	X, r24
    1114:	0c c0       	rjmp	.+24     	; 0x112e <ICU_u8SetTriggerEdge+0x3e>
	}
	else if (Copy_u8Edge == ICU_FALLING_EDGE)
    1116:	8a 81       	ldd	r24, Y+2	; 0x02
    1118:	88 23       	and	r24, r24
    111a:	41 f4       	brne	.+16     	; 0x112c <ICU_u8SetTriggerEdge+0x3c>
	{
		CLR_BIT(TCCR1B,TCCR1B_ICES1);
    111c:	ae e4       	ldi	r26, 0x4E	; 78
    111e:	b0 e0       	ldi	r27, 0x00	; 0
    1120:	ee e4       	ldi	r30, 0x4E	; 78
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	80 81       	ld	r24, Z
    1126:	8f 7b       	andi	r24, 0xBF	; 191
    1128:	8c 93       	st	X, r24
    112a:	01 c0       	rjmp	.+2      	; 0x112e <ICU_u8SetTriggerEdge+0x3e>
	}
	else
	{
		Local_u8ErrorState = R_NOK;
    112c:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    112e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1130:	0f 90       	pop	r0
    1132:	0f 90       	pop	r0
    1134:	cf 91       	pop	r28
    1136:	df 91       	pop	r29
    1138:	08 95       	ret

0000113a <ICU_voidEnableInterrupt>:

void ICU_voidEnableInterrupt(void)
{
    113a:	df 93       	push	r29
    113c:	cf 93       	push	r28
    113e:	cd b7       	in	r28, 0x3d	; 61
    1140:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TIMSK_TICIE1);
    1142:	a9 e5       	ldi	r26, 0x59	; 89
    1144:	b0 e0       	ldi	r27, 0x00	; 0
    1146:	e9 e5       	ldi	r30, 0x59	; 89
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	80 81       	ld	r24, Z
    114c:	80 62       	ori	r24, 0x20	; 32
    114e:	8c 93       	st	X, r24
}
    1150:	cf 91       	pop	r28
    1152:	df 91       	pop	r29
    1154:	08 95       	ret

00001156 <ICU_voidDisableInterrupt>:
void ICU_voidDisableInterrupt(void)
{
    1156:	df 93       	push	r29
    1158:	cf 93       	push	r28
    115a:	cd b7       	in	r28, 0x3d	; 61
    115c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TIMSK_TICIE1);
    115e:	a9 e5       	ldi	r26, 0x59	; 89
    1160:	b0 e0       	ldi	r27, 0x00	; 0
    1162:	e9 e5       	ldi	r30, 0x59	; 89
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	80 81       	ld	r24, Z
    1168:	8f 7d       	andi	r24, 0xDF	; 223
    116a:	8c 93       	st	X, r24
}
    116c:	cf 91       	pop	r28
    116e:	df 91       	pop	r29
    1170:	08 95       	ret

00001172 <ICU_u16ReadInputCapture>:

u16 ICU_u16ReadInputCapture(void)
{
    1172:	df 93       	push	r29
    1174:	cf 93       	push	r28
    1176:	cd b7       	in	r28, 0x3d	; 61
    1178:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    117a:	e6 e4       	ldi	r30, 0x46	; 70
    117c:	f0 e0       	ldi	r31, 0x00	; 0
    117e:	80 81       	ld	r24, Z
    1180:	91 81       	ldd	r25, Z+1	; 0x01
}
    1182:	cf 91       	pop	r28
    1184:	df 91       	pop	r29
    1186:	08 95       	ret

00001188 <ICU_u8SetCallBack>:

u8 ICU_u8SetCallBack(void (*Copy_pvCallBackFunc)(void))
{
    1188:	df 93       	push	r29
    118a:	cf 93       	push	r28
    118c:	00 d0       	rcall	.+0      	; 0x118e <ICU_u8SetCallBack+0x6>
    118e:	0f 92       	push	r0
    1190:	cd b7       	in	r28, 0x3d	; 61
    1192:	de b7       	in	r29, 0x3e	; 62
    1194:	9b 83       	std	Y+3, r25	; 0x03
    1196:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = R_OK;
    1198:	81 e0       	ldi	r24, 0x01	; 1
    119a:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pvCallBackFunc != NULL)
    119c:	8a 81       	ldd	r24, Y+2	; 0x02
    119e:	9b 81       	ldd	r25, Y+3	; 0x03
    11a0:	00 97       	sbiw	r24, 0x00	; 0
    11a2:	39 f0       	breq	.+14     	; 0x11b2 <ICU_u8SetCallBack+0x2a>
	{
		ICU_pvCallBackFunc = Copy_pvCallBackFunc;
    11a4:	8a 81       	ldd	r24, Y+2	; 0x02
    11a6:	9b 81       	ldd	r25, Y+3	; 0x03
    11a8:	90 93 9f 01 	sts	0x019F, r25
    11ac:	80 93 9e 01 	sts	0x019E, r24
    11b0:	02 c0       	rjmp	.+4      	; 0x11b6 <ICU_u8SetCallBack+0x2e>
	}
	else
	{
		Local_u8ErrorState = NULL_POINTER;
    11b2:	86 e0       	ldi	r24, 0x06	; 6
    11b4:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    11b6:	89 81       	ldd	r24, Y+1	; 0x01
}
    11b8:	0f 90       	pop	r0
    11ba:	0f 90       	pop	r0
    11bc:	0f 90       	pop	r0
    11be:	cf 91       	pop	r28
    11c0:	df 91       	pop	r29
    11c2:	08 95       	ret

000011c4 <__vector_10>:

/********************************* ISR ***********************************/

void __vector_10 (void) __attribute__((signal));
void __vector_10 (void)
{
    11c4:	1f 92       	push	r1
    11c6:	0f 92       	push	r0
    11c8:	0f b6       	in	r0, 0x3f	; 63
    11ca:	0f 92       	push	r0
    11cc:	11 24       	eor	r1, r1
    11ce:	2f 93       	push	r18
    11d0:	3f 93       	push	r19
    11d2:	4f 93       	push	r20
    11d4:	5f 93       	push	r21
    11d6:	6f 93       	push	r22
    11d8:	7f 93       	push	r23
    11da:	8f 93       	push	r24
    11dc:	9f 93       	push	r25
    11de:	af 93       	push	r26
    11e0:	bf 93       	push	r27
    11e2:	ef 93       	push	r30
    11e4:	ff 93       	push	r31
    11e6:	df 93       	push	r29
    11e8:	cf 93       	push	r28
    11ea:	cd b7       	in	r28, 0x3d	; 61
    11ec:	de b7       	in	r29, 0x3e	; 62
	if(TIMER0_pvCallBackFunc != NULL)
    11ee:	80 91 9c 01 	lds	r24, 0x019C
    11f2:	90 91 9d 01 	lds	r25, 0x019D
    11f6:	00 97       	sbiw	r24, 0x00	; 0
    11f8:	29 f0       	breq	.+10     	; 0x1204 <__vector_10+0x40>
	{
		TIMER0_pvCallBackFunc();
    11fa:	e0 91 9c 01 	lds	r30, 0x019C
    11fe:	f0 91 9d 01 	lds	r31, 0x019D
    1202:	09 95       	icall
	}
}
    1204:	cf 91       	pop	r28
    1206:	df 91       	pop	r29
    1208:	ff 91       	pop	r31
    120a:	ef 91       	pop	r30
    120c:	bf 91       	pop	r27
    120e:	af 91       	pop	r26
    1210:	9f 91       	pop	r25
    1212:	8f 91       	pop	r24
    1214:	7f 91       	pop	r23
    1216:	6f 91       	pop	r22
    1218:	5f 91       	pop	r21
    121a:	4f 91       	pop	r20
    121c:	3f 91       	pop	r19
    121e:	2f 91       	pop	r18
    1220:	0f 90       	pop	r0
    1222:	0f be       	out	0x3f, r0	; 63
    1224:	0f 90       	pop	r0
    1226:	1f 90       	pop	r1
    1228:	18 95       	reti

0000122a <__vector_6>:
/********************** ICU_ISR  *****************************************/
void __vector_6 (void) __attribute__((signal));
void __vector_6 (void)
{
    122a:	1f 92       	push	r1
    122c:	0f 92       	push	r0
    122e:	0f b6       	in	r0, 0x3f	; 63
    1230:	0f 92       	push	r0
    1232:	11 24       	eor	r1, r1
    1234:	2f 93       	push	r18
    1236:	3f 93       	push	r19
    1238:	4f 93       	push	r20
    123a:	5f 93       	push	r21
    123c:	6f 93       	push	r22
    123e:	7f 93       	push	r23
    1240:	8f 93       	push	r24
    1242:	9f 93       	push	r25
    1244:	af 93       	push	r26
    1246:	bf 93       	push	r27
    1248:	ef 93       	push	r30
    124a:	ff 93       	push	r31
    124c:	df 93       	push	r29
    124e:	cf 93       	push	r28
    1250:	cd b7       	in	r28, 0x3d	; 61
    1252:	de b7       	in	r29, 0x3e	; 62
	if(ICU_pvCallBackFunc != NULL)
    1254:	80 91 9e 01 	lds	r24, 0x019E
    1258:	90 91 9f 01 	lds	r25, 0x019F
    125c:	00 97       	sbiw	r24, 0x00	; 0
    125e:	29 f0       	breq	.+10     	; 0x126a <__vector_6+0x40>
	{
		ICU_pvCallBackFunc();
    1260:	e0 91 9e 01 	lds	r30, 0x019E
    1264:	f0 91 9f 01 	lds	r31, 0x019F
    1268:	09 95       	icall
	}
}
    126a:	cf 91       	pop	r28
    126c:	df 91       	pop	r29
    126e:	ff 91       	pop	r31
    1270:	ef 91       	pop	r30
    1272:	bf 91       	pop	r27
    1274:	af 91       	pop	r26
    1276:	9f 91       	pop	r25
    1278:	8f 91       	pop	r24
    127a:	7f 91       	pop	r23
    127c:	6f 91       	pop	r22
    127e:	5f 91       	pop	r21
    1280:	4f 91       	pop	r20
    1282:	3f 91       	pop	r19
    1284:	2f 91       	pop	r18
    1286:	0f 90       	pop	r0
    1288:	0f be       	out	0x3f, r0	; 63
    128a:	0f 90       	pop	r0
    128c:	1f 90       	pop	r1
    128e:	18 95       	reti

00001290 <MTIMER0_voidInit>:
#elif TIMER0_MODE == TIMER0_CTC_MODE
static u32 	CTC_u32NoOfCompMatch;
#endif
/**************************** Timer0 Init *****************************/
void MTIMER0_voidInit(void)
{
    1290:	df 93       	push	r29
    1292:	cf 93       	push	r28
    1294:	cd b7       	in	r28, 0x3d	; 61
    1296:	de b7       	in	r29, 0x3e	; 62
	/* Enable CTC INT */
	SET_BIT(TIMSK,TIMSK_OCIE0);

	#endif

}
    1298:	cf 91       	pop	r28
    129a:	df 91       	pop	r29
    129c:	08 95       	ret

0000129e <MTIMER0_enumSetTime_ms>:

/**************************** End Timer0 Init *****************************/

/********************** Timer0 Set Time in ms *****************************/
error_state_t MTIMER0_enumSetTime_ms(u32 Copy_u32DesiredTime, void(*Copy_pvCallBackFunc)(void))
{
    129e:	df 93       	push	r29
    12a0:	cf 93       	push	r28
    12a2:	cd b7       	in	r28, 0x3d	; 61
    12a4:	de b7       	in	r29, 0x3e	; 62
    12a6:	63 97       	sbiw	r28, 0x13	; 19
    12a8:	0f b6       	in	r0, 0x3f	; 63
    12aa:	f8 94       	cli
    12ac:	de bf       	out	0x3e, r29	; 62
    12ae:	0f be       	out	0x3f, r0	; 63
    12b0:	cd bf       	out	0x3d, r28	; 61
    12b2:	6e 87       	std	Y+14, r22	; 0x0e
    12b4:	7f 87       	std	Y+15, r23	; 0x0f
    12b6:	88 8b       	std	Y+16, r24	; 0x10
    12b8:	99 8b       	std	Y+17, r25	; 0x11
    12ba:	5b 8b       	std	Y+19, r21	; 0x13
    12bc:	4a 8b       	std	Y+18, r20	; 0x12
	error_state_t Local_ErrorState = TIMER0_OK;
    12be:	82 e0       	ldi	r24, 0x02	; 2
    12c0:	8d 87       	std	Y+13, r24	; 0x0d

	//initialize callback function globally
	TIMER0_pvCallBackNotificationFunc = Copy_pvCallBackFunc;
    12c2:	8a 89       	ldd	r24, Y+18	; 0x12
    12c4:	9b 89       	ldd	r25, Y+19	; 0x13
    12c6:	90 93 a1 01 	sts	0x01A1, r25
    12ca:	80 93 a0 01 	sts	0x01A0, r24
	/* Get prescaller value */
	f32 Local_u32PrescDivFact = (f32)TIMER0_PRESCALLER_ARR[TIMER0_PRESCALLER_SELEC - 1];
    12ce:	80 91 6c 01 	lds	r24, 0x016C
    12d2:	90 91 6d 01 	lds	r25, 0x016D
    12d6:	cc 01       	movw	r24, r24
    12d8:	a0 e0       	ldi	r26, 0x00	; 0
    12da:	b0 e0       	ldi	r27, 0x00	; 0
    12dc:	bc 01       	movw	r22, r24
    12de:	cd 01       	movw	r24, r26
    12e0:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    12e4:	dc 01       	movw	r26, r24
    12e6:	cb 01       	movw	r24, r22
    12e8:	89 87       	std	Y+9, r24	; 0x09
    12ea:	9a 87       	std	Y+10, r25	; 0x0a
    12ec:	ab 87       	std	Y+11, r26	; 0x0b
    12ee:	bc 87       	std	Y+12, r27	; 0x0c
	// calculate total tick time in Micro Second
	f32 Local_u32TickTime = Local_u32PrescDivFact / CRYSTAL_FREQ;
    12f0:	69 85       	ldd	r22, Y+9	; 0x09
    12f2:	7a 85       	ldd	r23, Y+10	; 0x0a
    12f4:	8b 85       	ldd	r24, Y+11	; 0x0b
    12f6:	9c 85       	ldd	r25, Y+12	; 0x0c
    12f8:	20 e0       	ldi	r18, 0x00	; 0
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	40 e8       	ldi	r20, 0x80	; 128
    12fe:	51 e4       	ldi	r21, 0x41	; 65
    1300:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1304:	dc 01       	movw	r26, r24
    1306:	cb 01       	movw	r24, r22
    1308:	8d 83       	std	Y+5, r24	; 0x05
    130a:	9e 83       	std	Y+6, r25	; 0x06
    130c:	af 83       	std	Y+7, r26	; 0x07
    130e:	b8 87       	std	Y+8, r27	; 0x08
	// Calculate total tick number
	u32 Local_u32TotalTicks = (Copy_u32DesiredTime *1000 ) / Local_u32TickTime;
    1310:	8e 85       	ldd	r24, Y+14	; 0x0e
    1312:	9f 85       	ldd	r25, Y+15	; 0x0f
    1314:	a8 89       	ldd	r26, Y+16	; 0x10
    1316:	b9 89       	ldd	r27, Y+17	; 0x11
    1318:	28 ee       	ldi	r18, 0xE8	; 232
    131a:	33 e0       	ldi	r19, 0x03	; 3
    131c:	40 e0       	ldi	r20, 0x00	; 0
    131e:	50 e0       	ldi	r21, 0x00	; 0
    1320:	bc 01       	movw	r22, r24
    1322:	cd 01       	movw	r24, r26
    1324:	0e 94 75 21 	call	0x42ea	; 0x42ea <__mulsi3>
    1328:	dc 01       	movw	r26, r24
    132a:	cb 01       	movw	r24, r22
    132c:	bc 01       	movw	r22, r24
    132e:	cd 01       	movw	r24, r26
    1330:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    1334:	dc 01       	movw	r26, r24
    1336:	cb 01       	movw	r24, r22
    1338:	bc 01       	movw	r22, r24
    133a:	cd 01       	movw	r24, r26
    133c:	2d 81       	ldd	r18, Y+5	; 0x05
    133e:	3e 81       	ldd	r19, Y+6	; 0x06
    1340:	4f 81       	ldd	r20, Y+7	; 0x07
    1342:	58 85       	ldd	r21, Y+8	; 0x08
    1344:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1348:	dc 01       	movw	r26, r24
    134a:	cb 01       	movw	r24, r22
    134c:	bc 01       	movw	r22, r24
    134e:	cd 01       	movw	r24, r26
    1350:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1354:	dc 01       	movw	r26, r24
    1356:	cb 01       	movw	r24, r22
    1358:	89 83       	std	Y+1, r24	; 0x01
    135a:	9a 83       	std	Y+2, r25	; 0x02
    135c:	ab 83       	std	Y+3, r26	; 0x03
    135e:	bc 83       	std	Y+4, r27	; 0x04
	CTC_u32NoOfCompMatch = Local_u32TotalTicks /Local_u8DivisionValue;
	OCR0 = Local_u8DivisionValue ;

	#endif
	
	return Local_ErrorState;
    1360:	8d 85       	ldd	r24, Y+13	; 0x0d
}
    1362:	63 96       	adiw	r28, 0x13	; 19
    1364:	0f b6       	in	r0, 0x3f	; 63
    1366:	f8 94       	cli
    1368:	de bf       	out	0x3e, r29	; 62
    136a:	0f be       	out	0x3f, r0	; 63
    136c:	cd bf       	out	0x3d, r28	; 61
    136e:	cf 91       	pop	r28
    1370:	df 91       	pop	r29
    1372:	08 95       	ret

00001374 <MTIMER0_enumStart>:

/********************* End Timer0 Set Time in ms **************************/

/*********************   Timer0 Start   **************************/
error_state_t MTIMER0_enumStart(void)
{
    1374:	df 93       	push	r29
    1376:	cf 93       	push	r28
    1378:	0f 92       	push	r0
    137a:	cd b7       	in	r28, 0x3d	; 61
    137c:	de b7       	in	r29, 0x3e	; 62
	error_state_t Local_ErrorState = TIMER0_OK;
    137e:	82 e0       	ldi	r24, 0x02	; 2
    1380:	89 83       	std	Y+1, r24	; 0x01
	TCCR0 &= TIMER0_PRESCALLER_MASK;
    1382:	a3 e5       	ldi	r26, 0x53	; 83
    1384:	b0 e0       	ldi	r27, 0x00	; 0
    1386:	e3 e5       	ldi	r30, 0x53	; 83
    1388:	f0 e0       	ldi	r31, 0x00	; 0
    138a:	80 81       	ld	r24, Z
    138c:	88 7f       	andi	r24, 0xF8	; 248
    138e:	8c 93       	st	X, r24
	TCCR0 |= TIMER0_PRESCALLER_SELEC;
    1390:	a3 e5       	ldi	r26, 0x53	; 83
    1392:	b0 e0       	ldi	r27, 0x00	; 0
    1394:	e3 e5       	ldi	r30, 0x53	; 83
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	80 81       	ld	r24, Z
    139a:	83 60       	ori	r24, 0x03	; 3
    139c:	8c 93       	st	X, r24
	return Local_ErrorState;
    139e:	89 81       	ldd	r24, Y+1	; 0x01
}
    13a0:	0f 90       	pop	r0
    13a2:	cf 91       	pop	r28
    13a4:	df 91       	pop	r29
    13a6:	08 95       	ret

000013a8 <MTIMER0_enumStop>:
/********************* End Timer0 Start **************************/

/*********************   Timer0 Stop   **************************/
error_state_t MTIMER0_enumStop(void)
{
    13a8:	df 93       	push	r29
    13aa:	cf 93       	push	r28
    13ac:	0f 92       	push	r0
    13ae:	cd b7       	in	r28, 0x3d	; 61
    13b0:	de b7       	in	r29, 0x3e	; 62
	error_state_t Local_ErrorState = TIMER0_OK;
    13b2:	82 e0       	ldi	r24, 0x02	; 2
    13b4:	89 83       	std	Y+1, r24	; 0x01
	TCCR0 &= TIMER0_PRESCALLER_MASK;
    13b6:	a3 e5       	ldi	r26, 0x53	; 83
    13b8:	b0 e0       	ldi	r27, 0x00	; 0
    13ba:	e3 e5       	ldi	r30, 0x53	; 83
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	80 81       	ld	r24, Z
    13c0:	88 7f       	andi	r24, 0xF8	; 248
    13c2:	8c 93       	st	X, r24
	return Local_ErrorState;
    13c4:	89 81       	ldd	r24, Y+1	; 0x01
}
    13c6:	0f 90       	pop	r0
    13c8:	cf 91       	pop	r28
    13ca:	df 91       	pop	r29
    13cc:	08 95       	ret

000013ce <MCOUNTER0_voidCounterInit>:
/********************* End Timer0 Stop **************************/

/************************ Counter 0 ****************************/
void MCOUNTER0_voidCounterInit(void)
{
    13ce:	df 93       	push	r29
    13d0:	cf 93       	push	r28
    13d2:	cd b7       	in	r28, 0x3d	; 61
    13d4:	de b7       	in	r29, 0x3e	; 62
	#if   COUNTER_0_MODE == COUNTER_0_FALLING_EDGE_MODE
		TCCR0 &= TIMER0_PRESCALLER_MASK;
    13d6:	a3 e5       	ldi	r26, 0x53	; 83
    13d8:	b0 e0       	ldi	r27, 0x00	; 0
    13da:	e3 e5       	ldi	r30, 0x53	; 83
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	80 81       	ld	r24, Z
    13e0:	88 7f       	andi	r24, 0xF8	; 248
    13e2:	8c 93       	st	X, r24
		TCCR0 |= COUNTER_FALLING_EDGE;						
    13e4:	a3 e5       	ldi	r26, 0x53	; 83
    13e6:	b0 e0       	ldi	r27, 0x00	; 0
    13e8:	e3 e5       	ldi	r30, 0x53	; 83
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	80 81       	ld	r24, Z
    13ee:	86 60       	ori	r24, 0x06	; 6
    13f0:	8c 93       	st	X, r24
	#elif COUNTER_0_MODE == COUNTER_0_RISING_EDGE_MODE
		TCCR0 &= TIMER0_PRESCALLER_MASK;
		TCCR0 |= COUNTER_RISING_EDGE;
	#endif
}
    13f2:	cf 91       	pop	r28
    13f4:	df 91       	pop	r29
    13f6:	08 95       	ret

000013f8 <MCOUNTER0_u8GetCounterValue>:

u8 MCOUNTER0_u8GetCounterValue(void){
    13f8:	df 93       	push	r29
    13fa:	cf 93       	push	r28
    13fc:	cd b7       	in	r28, 0x3d	; 61
    13fe:	de b7       	in	r29, 0x3e	; 62

	return TCNT0;
    1400:	e2 e5       	ldi	r30, 0x52	; 82
    1402:	f0 e0       	ldi	r31, 0x00	; 0
    1404:	80 81       	ld	r24, Z
}
    1406:	cf 91       	pop	r28
    1408:	df 91       	pop	r29
    140a:	08 95       	ret

0000140c <MTIMER0_u8GetTimerValue>:


u8   MTIMER0_u8GetTimerValue(void)
{
    140c:	df 93       	push	r29
    140e:	cf 93       	push	r28
    1410:	cd b7       	in	r28, 0x3d	; 61
    1412:	de b7       	in	r29, 0x3e	; 62
	return TCNT0;
    1414:	e2 e5       	ldi	r30, 0x52	; 82
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	80 81       	ld	r24, Z
}
    141a:	cf 91       	pop	r28
    141c:	df 91       	pop	r29
    141e:	08 95       	ret

00001420 <MTIMER0_voidSetTimerValue>:
void MTIMER0_voidSetTimerValue(u8 Copy_u8TimerValue)
{
    1420:	df 93       	push	r29
    1422:	cf 93       	push	r28
    1424:	0f 92       	push	r0
    1426:	cd b7       	in	r28, 0x3d	; 61
    1428:	de b7       	in	r29, 0x3e	; 62
    142a:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Copy_u8TimerValue;
    142c:	e2 e5       	ldi	r30, 0x52	; 82
    142e:	f0 e0       	ldi	r31, 0x00	; 0
    1430:	89 81       	ldd	r24, Y+1	; 0x01
    1432:	80 83       	st	Z, r24
}
    1434:	0f 90       	pop	r0
    1436:	cf 91       	pop	r28
    1438:	df 91       	pop	r29
    143a:	08 95       	ret

0000143c <MTIMER0_u32GetCounts>:

u32 MTIMER0_u32GetCounts(void)
{
    143c:	df 93       	push	r29
    143e:	cf 93       	push	r28
    1440:	00 d0       	rcall	.+0      	; 0x1442 <MTIMER0_u32GetCounts+0x6>
    1442:	00 d0       	rcall	.+0      	; 0x1444 <MTIMER0_u32GetCounts+0x8>
    1444:	cd b7       	in	r28, 0x3d	; 61
    1446:	de b7       	in	r29, 0x3e	; 62
	TCNT0 =0;
    1448:	e2 e5       	ldi	r30, 0x52	; 82
    144a:	f0 e0       	ldi	r31, 0x00	; 0
    144c:	10 82       	st	Z, r1
	u32 count = TCNT0 + current_ov_count*256;
    144e:	e2 e5       	ldi	r30, 0x52	; 82
    1450:	f0 e0       	ldi	r31, 0x00	; 0
    1452:	80 81       	ld	r24, Z
    1454:	28 2f       	mov	r18, r24
    1456:	30 e0       	ldi	r19, 0x00	; 0
    1458:	40 e0       	ldi	r20, 0x00	; 0
    145a:	50 e0       	ldi	r21, 0x00	; 0
    145c:	80 91 a2 01 	lds	r24, 0x01A2
    1460:	90 91 a3 01 	lds	r25, 0x01A3
    1464:	a0 91 a4 01 	lds	r26, 0x01A4
    1468:	b0 91 a5 01 	lds	r27, 0x01A5
    146c:	ba 2f       	mov	r27, r26
    146e:	a9 2f       	mov	r26, r25
    1470:	98 2f       	mov	r25, r24
    1472:	88 27       	eor	r24, r24
    1474:	82 0f       	add	r24, r18
    1476:	93 1f       	adc	r25, r19
    1478:	a4 1f       	adc	r26, r20
    147a:	b5 1f       	adc	r27, r21
    147c:	89 83       	std	Y+1, r24	; 0x01
    147e:	9a 83       	std	Y+2, r25	; 0x02
    1480:	ab 83       	std	Y+3, r26	; 0x03
    1482:	bc 83       	std	Y+4, r27	; 0x04
	return count;
    1484:	89 81       	ldd	r24, Y+1	; 0x01
    1486:	9a 81       	ldd	r25, Y+2	; 0x02
    1488:	ab 81       	ldd	r26, Y+3	; 0x03
    148a:	bc 81       	ldd	r27, Y+4	; 0x04

}
    148c:	bc 01       	movw	r22, r24
    148e:	cd 01       	movw	r24, r26
    1490:	0f 90       	pop	r0
    1492:	0f 90       	pop	r0
    1494:	0f 90       	pop	r0
    1496:	0f 90       	pop	r0
    1498:	cf 91       	pop	r28
    149a:	df 91       	pop	r29
    149c:	08 95       	ret

0000149e <MTimer0_voidEnableInt>:

void MTimer0_voidEnableInt(u8 INT_ID)
{
    149e:	df 93       	push	r29
    14a0:	cf 93       	push	r28
    14a2:	00 d0       	rcall	.+0      	; 0x14a4 <MTimer0_voidEnableInt+0x6>
    14a4:	0f 92       	push	r0
    14a6:	cd b7       	in	r28, 0x3d	; 61
    14a8:	de b7       	in	r29, 0x3e	; 62
    14aa:	89 83       	std	Y+1, r24	; 0x01
	switch(INT_ID)
    14ac:	89 81       	ldd	r24, Y+1	; 0x01
    14ae:	28 2f       	mov	r18, r24
    14b0:	30 e0       	ldi	r19, 0x00	; 0
    14b2:	3b 83       	std	Y+3, r19	; 0x03
    14b4:	2a 83       	std	Y+2, r18	; 0x02
    14b6:	8a 81       	ldd	r24, Y+2	; 0x02
    14b8:	9b 81       	ldd	r25, Y+3	; 0x03
    14ba:	00 97       	sbiw	r24, 0x00	; 0
    14bc:	31 f0       	breq	.+12     	; 0x14ca <MTimer0_voidEnableInt+0x2c>
    14be:	2a 81       	ldd	r18, Y+2	; 0x02
    14c0:	3b 81       	ldd	r19, Y+3	; 0x03
    14c2:	21 30       	cpi	r18, 0x01	; 1
    14c4:	31 05       	cpc	r19, r1
    14c6:	49 f0       	breq	.+18     	; 0x14da <MTimer0_voidEnableInt+0x3c>
    14c8:	0f c0       	rjmp	.+30     	; 0x14e8 <MTimer0_voidEnableInt+0x4a>
	{
	case INT_OV_MODE:
		SET_BIT(TIMSK, TIMSK_TOIE0);
    14ca:	a9 e5       	ldi	r26, 0x59	; 89
    14cc:	b0 e0       	ldi	r27, 0x00	; 0
    14ce:	e9 e5       	ldi	r30, 0x59	; 89
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	80 81       	ld	r24, Z
    14d4:	81 60       	ori	r24, 0x01	; 1
    14d6:	8c 93       	st	X, r24
    14d8:	07 c0       	rjmp	.+14     	; 0x14e8 <MTimer0_voidEnableInt+0x4a>

		break;
	case INT_COMP_MODE:
		SET_BIT(TIMSK, TIMSK_OCIE0);
    14da:	a9 e5       	ldi	r26, 0x59	; 89
    14dc:	b0 e0       	ldi	r27, 0x00	; 0
    14de:	e9 e5       	ldi	r30, 0x59	; 89
    14e0:	f0 e0       	ldi	r31, 0x00	; 0
    14e2:	80 81       	ld	r24, Z
    14e4:	82 60       	ori	r24, 0x02	; 2
    14e6:	8c 93       	st	X, r24
		break;

	}
}
    14e8:	0f 90       	pop	r0
    14ea:	0f 90       	pop	r0
    14ec:	0f 90       	pop	r0
    14ee:	cf 91       	pop	r28
    14f0:	df 91       	pop	r29
    14f2:	08 95       	ret

000014f4 <MTimer0_voidDisableInt>:


void MTimer0_voidDisableInt(u8 INT_ID)
{
    14f4:	df 93       	push	r29
    14f6:	cf 93       	push	r28
    14f8:	00 d0       	rcall	.+0      	; 0x14fa <MTimer0_voidDisableInt+0x6>
    14fa:	0f 92       	push	r0
    14fc:	cd b7       	in	r28, 0x3d	; 61
    14fe:	de b7       	in	r29, 0x3e	; 62
    1500:	89 83       	std	Y+1, r24	; 0x01
	switch(INT_ID)
    1502:	89 81       	ldd	r24, Y+1	; 0x01
    1504:	28 2f       	mov	r18, r24
    1506:	30 e0       	ldi	r19, 0x00	; 0
    1508:	3b 83       	std	Y+3, r19	; 0x03
    150a:	2a 83       	std	Y+2, r18	; 0x02
    150c:	8a 81       	ldd	r24, Y+2	; 0x02
    150e:	9b 81       	ldd	r25, Y+3	; 0x03
    1510:	00 97       	sbiw	r24, 0x00	; 0
    1512:	31 f0       	breq	.+12     	; 0x1520 <MTimer0_voidDisableInt+0x2c>
    1514:	2a 81       	ldd	r18, Y+2	; 0x02
    1516:	3b 81       	ldd	r19, Y+3	; 0x03
    1518:	21 30       	cpi	r18, 0x01	; 1
    151a:	31 05       	cpc	r19, r1
    151c:	49 f0       	breq	.+18     	; 0x1530 <MTimer0_voidDisableInt+0x3c>
    151e:	0f c0       	rjmp	.+30     	; 0x153e <MTimer0_voidDisableInt+0x4a>
	{
	case INT_OV_MODE:
		CLR_BIT(TIMSK, TIMSK_TOIE0);
    1520:	a9 e5       	ldi	r26, 0x59	; 89
    1522:	b0 e0       	ldi	r27, 0x00	; 0
    1524:	e9 e5       	ldi	r30, 0x59	; 89
    1526:	f0 e0       	ldi	r31, 0x00	; 0
    1528:	80 81       	ld	r24, Z
    152a:	8e 7f       	andi	r24, 0xFE	; 254
    152c:	8c 93       	st	X, r24
    152e:	07 c0       	rjmp	.+14     	; 0x153e <MTimer0_voidDisableInt+0x4a>

		break;
	case INT_COMP_MODE:
		CLR_BIT(TIMSK, TIMSK_OCIE0);
    1530:	a9 e5       	ldi	r26, 0x59	; 89
    1532:	b0 e0       	ldi	r27, 0x00	; 0
    1534:	e9 e5       	ldi	r30, 0x59	; 89
    1536:	f0 e0       	ldi	r31, 0x00	; 0
    1538:	80 81       	ld	r24, Z
    153a:	8d 7f       	andi	r24, 0xFD	; 253
    153c:	8c 93       	st	X, r24
		break;

	}
}
    153e:	0f 90       	pop	r0
    1540:	0f 90       	pop	r0
    1542:	0f 90       	pop	r0
    1544:	cf 91       	pop	r28
    1546:	df 91       	pop	r29
    1548:	08 95       	ret

0000154a <MPWM0_enumInit>:
/******************************************************************************************/
/*************************************** PWM FUNCTION *************************************/
/******************************************************************************************/

error_state_t MPWM0_enumInit(void)
{
    154a:	df 93       	push	r29
    154c:	cf 93       	push	r28
    154e:	0f 92       	push	r0
    1550:	cd b7       	in	r28, 0x3d	; 61
    1552:	de b7       	in	r29, 0x3e	; 62
	error_state_t Local_ErrorState = TIMER0_OK;
    1554:	82 e0       	ldi	r24, 0x02	; 2
    1556:	89 83       	std	Y+1, r24	; 0x01
	#if TIMER0_MODE == TIMER0_FAST_PWM
	SET_BIT(TCCR0,TCCR0_WGM00);
    1558:	a3 e5       	ldi	r26, 0x53	; 83
    155a:	b0 e0       	ldi	r27, 0x00	; 0
    155c:	e3 e5       	ldi	r30, 0x53	; 83
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	80 81       	ld	r24, Z
    1562:	80 64       	ori	r24, 0x40	; 64
    1564:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_WGM01);
    1566:	a3 e5       	ldi	r26, 0x53	; 83
    1568:	b0 e0       	ldi	r27, 0x00	; 0
    156a:	e3 e5       	ldi	r30, 0x53	; 83
    156c:	f0 e0       	ldi	r31, 0x00	; 0
    156e:	80 81       	ld	r24, Z
    1570:	88 60       	ori	r24, 0x08	; 8
    1572:	8c 93       	st	X, r24

	switch (OC0_MODE)
		{
			case OC0_DISCONNECTED:
			CLR_BIT(TCCR0,TCCR0_COM00);
    1574:	a3 e5       	ldi	r26, 0x53	; 83
    1576:	b0 e0       	ldi	r27, 0x00	; 0
    1578:	e3 e5       	ldi	r30, 0x53	; 83
    157a:	f0 e0       	ldi	r31, 0x00	; 0
    157c:	80 81       	ld	r24, Z
    157e:	8f 7e       	andi	r24, 0xEF	; 239
    1580:	8c 93       	st	X, r24
			CLR_BIT(TCCR0,TCCR0_COM01);
    1582:	a3 e5       	ldi	r26, 0x53	; 83
    1584:	b0 e0       	ldi	r27, 0x00	; 0
    1586:	e3 e5       	ldi	r30, 0x53	; 83
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	80 81       	ld	r24, Z
    158c:	8f 7d       	andi	r24, 0xDF	; 223
    158e:	8c 93       	st	X, r24
		SET_BIT(TCCR0,TCCR0_COM00);
		SET_BIT(TCCR0,TCCR0_COM01);
	}
	else if (FAST_PWM_MODE == FAST_PWM_NON_INVERTED_MODE)
	{
		CLR_BIT(TCCR0,TCCR0_COM00);
    1590:	a3 e5       	ldi	r26, 0x53	; 83
    1592:	b0 e0       	ldi	r27, 0x00	; 0
    1594:	e3 e5       	ldi	r30, 0x53	; 83
    1596:	f0 e0       	ldi	r31, 0x00	; 0
    1598:	80 81       	ld	r24, Z
    159a:	8f 7e       	andi	r24, 0xEF	; 239
    159c:	8c 93       	st	X, r24
		SET_BIT(TCCR0,TCCR0_COM01);
    159e:	a3 e5       	ldi	r26, 0x53	; 83
    15a0:	b0 e0       	ldi	r27, 0x00	; 0
    15a2:	e3 e5       	ldi	r30, 0x53	; 83
    15a4:	f0 e0       	ldi	r31, 0x00	; 0
    15a6:	80 81       	ld	r24, Z
    15a8:	80 62       	ori	r24, 0x20	; 32
    15aa:	8c 93       	st	X, r24
		SET_BIT(TCCR0,TCCR0_COM01);
	}

	#endif

	return Local_ErrorState;
    15ac:	89 81       	ldd	r24, Y+1	; 0x01
}
    15ae:	0f 90       	pop	r0
    15b0:	cf 91       	pop	r28
    15b2:	df 91       	pop	r29
    15b4:	08 95       	ret

000015b6 <MPWM0_enumSetDutyCycle>:
error_state_t MPWM0_enumSetDutyCycle(u8 Copy_u8DutyCycle)
{
    15b6:	df 93       	push	r29
    15b8:	cf 93       	push	r28
    15ba:	00 d0       	rcall	.+0      	; 0x15bc <MPWM0_enumSetDutyCycle+0x6>
    15bc:	cd b7       	in	r28, 0x3d	; 61
    15be:	de b7       	in	r29, 0x3e	; 62
    15c0:	8a 83       	std	Y+2, r24	; 0x02
	error_state_t Local_ErrorState = TIMER0_OK;
    15c2:	82 e0       	ldi	r24, 0x02	; 2
    15c4:	89 83       	std	Y+1, r24	; 0x01
	{
		OCR0 = (((100 - Copy_u8DutyCycle) * TIMER0_MAX_TICK ) / 100) -  1 ;
	}
	else if (FAST_PWM_MODE == FAST_PWM_NON_INVERTED_MODE)
	{
		OCR0 = (u8)(((Copy_u8DutyCycle * TIMER0_MAX_TICK ) / 100) -1);
    15c6:	ec e5       	ldi	r30, 0x5C	; 92
    15c8:	f0 e0       	ldi	r31, 0x00	; 0
    15ca:	8a 81       	ldd	r24, Y+2	; 0x02
    15cc:	88 2f       	mov	r24, r24
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	98 2f       	mov	r25, r24
    15d2:	88 27       	eor	r24, r24
    15d4:	24 e6       	ldi	r18, 0x64	; 100
    15d6:	30 e0       	ldi	r19, 0x00	; 0
    15d8:	b9 01       	movw	r22, r18
    15da:	0e 94 94 21 	call	0x4328	; 0x4328 <__divmodhi4>
    15de:	cb 01       	movw	r24, r22
    15e0:	81 50       	subi	r24, 0x01	; 1
    15e2:	80 83       	st	Z, r24
	{
		OCR0 = ((Copy_u8DutyCycle * (TIMER0_MAX_TICK -1 ) ) / 100) ;
	}
	#endif

	return Local_ErrorState;
    15e4:	89 81       	ldd	r24, Y+1	; 0x01
}
    15e6:	0f 90       	pop	r0
    15e8:	0f 90       	pop	r0
    15ea:	cf 91       	pop	r28
    15ec:	df 91       	pop	r29
    15ee:	08 95       	ret

000015f0 <MPWM0_enumStart>:
error_state_t MPWM0_enumStart(void)
{
    15f0:	df 93       	push	r29
    15f2:	cf 93       	push	r28
    15f4:	0f 92       	push	r0
    15f6:	cd b7       	in	r28, 0x3d	; 61
    15f8:	de b7       	in	r29, 0x3e	; 62
	error_state_t Local_ErrorState = TIMER0_OK;
    15fa:	82 e0       	ldi	r24, 0x02	; 2
    15fc:	89 83       	std	Y+1, r24	; 0x01
	TCCR0 &= TIMER0_PRESCALLER_MASK;
    15fe:	a3 e5       	ldi	r26, 0x53	; 83
    1600:	b0 e0       	ldi	r27, 0x00	; 0
    1602:	e3 e5       	ldi	r30, 0x53	; 83
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	80 81       	ld	r24, Z
    1608:	88 7f       	andi	r24, 0xF8	; 248
    160a:	8c 93       	st	X, r24
	TCCR0 |= TIMER0_PRESCALLER_SELEC;
    160c:	a3 e5       	ldi	r26, 0x53	; 83
    160e:	b0 e0       	ldi	r27, 0x00	; 0
    1610:	e3 e5       	ldi	r30, 0x53	; 83
    1612:	f0 e0       	ldi	r31, 0x00	; 0
    1614:	80 81       	ld	r24, Z
    1616:	83 60       	ori	r24, 0x03	; 3
    1618:	8c 93       	st	X, r24

	return Local_ErrorState;
    161a:	89 81       	ldd	r24, Y+1	; 0x01
}
    161c:	0f 90       	pop	r0
    161e:	cf 91       	pop	r28
    1620:	df 91       	pop	r29
    1622:	08 95       	ret

00001624 <MPWM0_enumStop>:
error_state_t MPWM0_enumStop(void)
{
    1624:	df 93       	push	r29
    1626:	cf 93       	push	r28
    1628:	0f 92       	push	r0
    162a:	cd b7       	in	r28, 0x3d	; 61
    162c:	de b7       	in	r29, 0x3e	; 62
	error_state_t Local_ErrorState = TIMER0_OK;
    162e:	82 e0       	ldi	r24, 0x02	; 2
    1630:	89 83       	std	Y+1, r24	; 0x01
	TCCR0 &= TIMER0_PRESCALLER_MASK;
    1632:	a3 e5       	ldi	r26, 0x53	; 83
    1634:	b0 e0       	ldi	r27, 0x00	; 0
    1636:	e3 e5       	ldi	r30, 0x53	; 83
    1638:	f0 e0       	ldi	r31, 0x00	; 0
    163a:	80 81       	ld	r24, Z
    163c:	88 7f       	andi	r24, 0xF8	; 248
    163e:	8c 93       	st	X, r24
	return Local_ErrorState;
    1640:	89 81       	ldd	r24, Y+1	; 0x01
}
    1642:	0f 90       	pop	r0
    1644:	cf 91       	pop	r28
    1646:	df 91       	pop	r29
    1648:	08 95       	ret

0000164a <MGIE_VoidEnable>:

#include "MGIE_interface.h"
#include "MGIE_private.h"

void MGIE_VoidEnable(void)
{
    164a:	df 93       	push	r29
    164c:	cf 93       	push	r28
    164e:	cd b7       	in	r28, 0x3d	; 61
    1650:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
    1652:	af e5       	ldi	r26, 0x5F	; 95
    1654:	b0 e0       	ldi	r27, 0x00	; 0
    1656:	ef e5       	ldi	r30, 0x5F	; 95
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	80 81       	ld	r24, Z
    165c:	80 68       	ori	r24, 0x80	; 128
    165e:	8c 93       	st	X, r24
}
    1660:	cf 91       	pop	r28
    1662:	df 91       	pop	r29
    1664:	08 95       	ret

00001666 <MGIE_VoidDisable>:
void MGIE_VoidDisable(void)
{
    1666:	df 93       	push	r29
    1668:	cf 93       	push	r28
    166a:	cd b7       	in	r28, 0x3d	; 61
    166c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,SREG_I);
    166e:	af e5       	ldi	r26, 0x5F	; 95
    1670:	b0 e0       	ldi	r27, 0x00	; 0
    1672:	ef e5       	ldi	r30, 0x5F	; 95
    1674:	f0 e0       	ldi	r31, 0x00	; 0
    1676:	80 81       	ld	r24, Z
    1678:	8f 77       	andi	r24, 0x7F	; 127
    167a:	8c 93       	st	X, r24
}
    167c:	cf 91       	pop	r28
    167e:	df 91       	pop	r29
    1680:	08 95       	ret

00001682 <MEXTI_Enable>:
void (*INT1_pvFunc)(void) = NULL;
void (*INT2_pvFunc)(void) = NULL;


error_state_t MEXTI_Enable(exti_t Copy_u8EXTIx, exti_sense_control_t Copy_u8EXTIxSense, void(*Copy_pvEXTIxFunc)(void))
{
    1682:	df 93       	push	r29
    1684:	cf 93       	push	r28
    1686:	cd b7       	in	r28, 0x3d	; 61
    1688:	de b7       	in	r29, 0x3e	; 62
    168a:	2d 97       	sbiw	r28, 0x0d	; 13
    168c:	0f b6       	in	r0, 0x3f	; 63
    168e:	f8 94       	cli
    1690:	de bf       	out	0x3e, r29	; 62
    1692:	0f be       	out	0x3f, r0	; 63
    1694:	cd bf       	out	0x3d, r28	; 61
    1696:	8a 83       	std	Y+2, r24	; 0x02
    1698:	6b 83       	std	Y+3, r22	; 0x03
    169a:	5d 83       	std	Y+5, r21	; 0x05
    169c:	4c 83       	std	Y+4, r20	; 0x04
	error_state_t Local_ErrorState = R_OK;
    169e:	81 e0       	ldi	r24, 0x01	; 1
    16a0:	89 83       	std	Y+1, r24	; 0x01
	
	switch(Copy_u8EXTIx)
    16a2:	8a 81       	ldd	r24, Y+2	; 0x02
    16a4:	28 2f       	mov	r18, r24
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	3d 87       	std	Y+13, r19	; 0x0d
    16aa:	2c 87       	std	Y+12, r18	; 0x0c
    16ac:	8c 85       	ldd	r24, Y+12	; 0x0c
    16ae:	9d 85       	ldd	r25, Y+13	; 0x0d
    16b0:	82 30       	cpi	r24, 0x02	; 2
    16b2:	91 05       	cpc	r25, r1
    16b4:	09 f4       	brne	.+2      	; 0x16b8 <MEXTI_Enable+0x36>
    16b6:	7e c0       	rjmp	.+252    	; 0x17b4 <MEXTI_Enable+0x132>
    16b8:	2c 85       	ldd	r18, Y+12	; 0x0c
    16ba:	3d 85       	ldd	r19, Y+13	; 0x0d
    16bc:	23 30       	cpi	r18, 0x03	; 3
    16be:	31 05       	cpc	r19, r1
    16c0:	09 f4       	brne	.+2      	; 0x16c4 <MEXTI_Enable+0x42>
    16c2:	ea c0       	rjmp	.+468    	; 0x1898 <MEXTI_Enable+0x216>
    16c4:	8c 85       	ldd	r24, Y+12	; 0x0c
    16c6:	9d 85       	ldd	r25, Y+13	; 0x0d
    16c8:	81 30       	cpi	r24, 0x01	; 1
    16ca:	91 05       	cpc	r25, r1
    16cc:	09 f0       	breq	.+2      	; 0x16d0 <MEXTI_Enable+0x4e>
    16ce:	1a c1       	rjmp	.+564    	; 0x1904 <MEXTI_Enable+0x282>
	{
		/********** INT0 **********/
		case INT0 :
		/* Initialize the INT0 callback notification function globally */
		if (Copy_pvEXTIxFunc != NULL)
    16d0:	8c 81       	ldd	r24, Y+4	; 0x04
    16d2:	9d 81       	ldd	r25, Y+5	; 0x05
    16d4:	00 97       	sbiw	r24, 0x00	; 0
    16d6:	39 f0       	breq	.+14     	; 0x16e6 <MEXTI_Enable+0x64>
		{
			INT0_pvFunc = Copy_pvEXTIxFunc;
    16d8:	8c 81       	ldd	r24, Y+4	; 0x04
    16da:	9d 81       	ldd	r25, Y+5	; 0x05
    16dc:	90 93 a7 01 	sts	0x01A7, r25
    16e0:	80 93 a6 01 	sts	0x01A6, r24
    16e4:	02 c0       	rjmp	.+4      	; 0x16ea <MEXTI_Enable+0x68>
		} 
		else
		{
			Local_ErrorState = NULL_POINTER;
    16e6:	86 e0       	ldi	r24, 0x06	; 6
    16e8:	89 83       	std	Y+1, r24	; 0x01
		}
		/* SET INT0 Sense Control */
		switch (Copy_u8EXTIxSense)
    16ea:	8b 81       	ldd	r24, Y+3	; 0x03
    16ec:	28 2f       	mov	r18, r24
    16ee:	30 e0       	ldi	r19, 0x00	; 0
    16f0:	3b 87       	std	Y+11, r19	; 0x0b
    16f2:	2a 87       	std	Y+10, r18	; 0x0a
    16f4:	8a 85       	ldd	r24, Y+10	; 0x0a
    16f6:	9b 85       	ldd	r25, Y+11	; 0x0b
    16f8:	82 30       	cpi	r24, 0x02	; 2
    16fa:	91 05       	cpc	r25, r1
    16fc:	29 f1       	breq	.+74     	; 0x1748 <MEXTI_Enable+0xc6>
    16fe:	2a 85       	ldd	r18, Y+10	; 0x0a
    1700:	3b 85       	ldd	r19, Y+11	; 0x0b
    1702:	23 30       	cpi	r18, 0x03	; 3
    1704:	31 05       	cpc	r19, r1
    1706:	34 f4       	brge	.+12     	; 0x1714 <MEXTI_Enable+0x92>
    1708:	8a 85       	ldd	r24, Y+10	; 0x0a
    170a:	9b 85       	ldd	r25, Y+11	; 0x0b
    170c:	81 30       	cpi	r24, 0x01	; 1
    170e:	91 05       	cpc	r25, r1
    1710:	61 f0       	breq	.+24     	; 0x172a <MEXTI_Enable+0xa8>
    1712:	47 c0       	rjmp	.+142    	; 0x17a2 <MEXTI_Enable+0x120>
    1714:	2a 85       	ldd	r18, Y+10	; 0x0a
    1716:	3b 85       	ldd	r19, Y+11	; 0x0b
    1718:	23 30       	cpi	r18, 0x03	; 3
    171a:	31 05       	cpc	r19, r1
    171c:	21 f1       	breq	.+72     	; 0x1766 <MEXTI_Enable+0xe4>
    171e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1720:	9b 85       	ldd	r25, Y+11	; 0x0b
    1722:	84 30       	cpi	r24, 0x04	; 4
    1724:	91 05       	cpc	r25, r1
    1726:	71 f1       	breq	.+92     	; 0x1784 <MEXTI_Enable+0x102>
    1728:	3c c0       	rjmp	.+120    	; 0x17a2 <MEXTI_Enable+0x120>
		{
			case LOW_LEVEL    : CLR_BIT(MCUCR,MCUCR_ISC00);    CLR_BIT(MCUCR,MCUCR_ISC01);    break;
    172a:	a5 e5       	ldi	r26, 0x55	; 85
    172c:	b0 e0       	ldi	r27, 0x00	; 0
    172e:	e5 e5       	ldi	r30, 0x55	; 85
    1730:	f0 e0       	ldi	r31, 0x00	; 0
    1732:	80 81       	ld	r24, Z
    1734:	8e 7f       	andi	r24, 0xFE	; 254
    1736:	8c 93       	st	X, r24
    1738:	a5 e5       	ldi	r26, 0x55	; 85
    173a:	b0 e0       	ldi	r27, 0x00	; 0
    173c:	e5 e5       	ldi	r30, 0x55	; 85
    173e:	f0 e0       	ldi	r31, 0x00	; 0
    1740:	80 81       	ld	r24, Z
    1742:	8d 7f       	andi	r24, 0xFD	; 253
    1744:	8c 93       	st	X, r24
    1746:	2e c0       	rjmp	.+92     	; 0x17a4 <MEXTI_Enable+0x122>
			case ON_CHANGE    : SET_BIT(MCUCR,MCUCR_ISC00);    CLR_BIT(MCUCR,MCUCR_ISC01);    break;
    1748:	a5 e5       	ldi	r26, 0x55	; 85
    174a:	b0 e0       	ldi	r27, 0x00	; 0
    174c:	e5 e5       	ldi	r30, 0x55	; 85
    174e:	f0 e0       	ldi	r31, 0x00	; 0
    1750:	80 81       	ld	r24, Z
    1752:	81 60       	ori	r24, 0x01	; 1
    1754:	8c 93       	st	X, r24
    1756:	a5 e5       	ldi	r26, 0x55	; 85
    1758:	b0 e0       	ldi	r27, 0x00	; 0
    175a:	e5 e5       	ldi	r30, 0x55	; 85
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	80 81       	ld	r24, Z
    1760:	8d 7f       	andi	r24, 0xFD	; 253
    1762:	8c 93       	st	X, r24
    1764:	1f c0       	rjmp	.+62     	; 0x17a4 <MEXTI_Enable+0x122>
			case FALLING_EDGE : SET_BIT(MCUCR,MCUCR_ISC01);    CLR_BIT(MCUCR,MCUCR_ISC00);    break;
    1766:	a5 e5       	ldi	r26, 0x55	; 85
    1768:	b0 e0       	ldi	r27, 0x00	; 0
    176a:	e5 e5       	ldi	r30, 0x55	; 85
    176c:	f0 e0       	ldi	r31, 0x00	; 0
    176e:	80 81       	ld	r24, Z
    1770:	82 60       	ori	r24, 0x02	; 2
    1772:	8c 93       	st	X, r24
    1774:	a5 e5       	ldi	r26, 0x55	; 85
    1776:	b0 e0       	ldi	r27, 0x00	; 0
    1778:	e5 e5       	ldi	r30, 0x55	; 85
    177a:	f0 e0       	ldi	r31, 0x00	; 0
    177c:	80 81       	ld	r24, Z
    177e:	8e 7f       	andi	r24, 0xFE	; 254
    1780:	8c 93       	st	X, r24
    1782:	10 c0       	rjmp	.+32     	; 0x17a4 <MEXTI_Enable+0x122>
			case RISING_EDGE  : SET_BIT(MCUCR,MCUCR_ISC01);    SET_BIT(MCUCR,MCUCR_ISC00);    break;
    1784:	a5 e5       	ldi	r26, 0x55	; 85
    1786:	b0 e0       	ldi	r27, 0x00	; 0
    1788:	e5 e5       	ldi	r30, 0x55	; 85
    178a:	f0 e0       	ldi	r31, 0x00	; 0
    178c:	80 81       	ld	r24, Z
    178e:	82 60       	ori	r24, 0x02	; 2
    1790:	8c 93       	st	X, r24
    1792:	a5 e5       	ldi	r26, 0x55	; 85
    1794:	b0 e0       	ldi	r27, 0x00	; 0
    1796:	e5 e5       	ldi	r30, 0x55	; 85
    1798:	f0 e0       	ldi	r31, 0x00	; 0
    179a:	80 81       	ld	r24, Z
    179c:	81 60       	ori	r24, 0x01	; 1
    179e:	8c 93       	st	X, r24
    17a0:	01 c0       	rjmp	.+2      	; 0x17a4 <MEXTI_Enable+0x122>
			default:           Local_ErrorState = R_NOK;                                      break;
    17a2:	19 82       	std	Y+1, r1	; 0x01
	    }
		/* Enable INT0 */
		SET_BIT(GICR,GICR_INT0);
    17a4:	ab e5       	ldi	r26, 0x5B	; 91
    17a6:	b0 e0       	ldi	r27, 0x00	; 0
    17a8:	eb e5       	ldi	r30, 0x5B	; 91
    17aa:	f0 e0       	ldi	r31, 0x00	; 0
    17ac:	80 81       	ld	r24, Z
    17ae:	80 64       	ori	r24, 0x40	; 64
    17b0:	8c 93       	st	X, r24
    17b2:	a9 c0       	rjmp	.+338    	; 0x1906 <MEXTI_Enable+0x284>
		break;
		/********** INT1 **********/
		case INT1 :
		/* Initialize the INT1 callback notification function globally */
        if (Copy_pvEXTIxFunc != NULL)
    17b4:	8c 81       	ldd	r24, Y+4	; 0x04
    17b6:	9d 81       	ldd	r25, Y+5	; 0x05
    17b8:	00 97       	sbiw	r24, 0x00	; 0
    17ba:	39 f0       	breq	.+14     	; 0x17ca <MEXTI_Enable+0x148>
        {
        	INT1_pvFunc = Copy_pvEXTIxFunc;
    17bc:	8c 81       	ldd	r24, Y+4	; 0x04
    17be:	9d 81       	ldd	r25, Y+5	; 0x05
    17c0:	90 93 ab 01 	sts	0x01AB, r25
    17c4:	80 93 aa 01 	sts	0x01AA, r24
    17c8:	02 c0       	rjmp	.+4      	; 0x17ce <MEXTI_Enable+0x14c>
        }
        else
        {
        	Local_ErrorState = NULL_POINTER;
    17ca:	86 e0       	ldi	r24, 0x06	; 6
    17cc:	89 83       	std	Y+1, r24	; 0x01
        }		
		/* SET INT1 Sense Control */
		switch (Copy_u8EXTIxSense)
    17ce:	8b 81       	ldd	r24, Y+3	; 0x03
    17d0:	28 2f       	mov	r18, r24
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	39 87       	std	Y+9, r19	; 0x09
    17d6:	28 87       	std	Y+8, r18	; 0x08
    17d8:	88 85       	ldd	r24, Y+8	; 0x08
    17da:	99 85       	ldd	r25, Y+9	; 0x09
    17dc:	82 30       	cpi	r24, 0x02	; 2
    17de:	91 05       	cpc	r25, r1
    17e0:	29 f1       	breq	.+74     	; 0x182c <MEXTI_Enable+0x1aa>
    17e2:	28 85       	ldd	r18, Y+8	; 0x08
    17e4:	39 85       	ldd	r19, Y+9	; 0x09
    17e6:	23 30       	cpi	r18, 0x03	; 3
    17e8:	31 05       	cpc	r19, r1
    17ea:	34 f4       	brge	.+12     	; 0x17f8 <MEXTI_Enable+0x176>
    17ec:	88 85       	ldd	r24, Y+8	; 0x08
    17ee:	99 85       	ldd	r25, Y+9	; 0x09
    17f0:	81 30       	cpi	r24, 0x01	; 1
    17f2:	91 05       	cpc	r25, r1
    17f4:	61 f0       	breq	.+24     	; 0x180e <MEXTI_Enable+0x18c>
    17f6:	47 c0       	rjmp	.+142    	; 0x1886 <MEXTI_Enable+0x204>
    17f8:	28 85       	ldd	r18, Y+8	; 0x08
    17fa:	39 85       	ldd	r19, Y+9	; 0x09
    17fc:	23 30       	cpi	r18, 0x03	; 3
    17fe:	31 05       	cpc	r19, r1
    1800:	21 f1       	breq	.+72     	; 0x184a <MEXTI_Enable+0x1c8>
    1802:	88 85       	ldd	r24, Y+8	; 0x08
    1804:	99 85       	ldd	r25, Y+9	; 0x09
    1806:	84 30       	cpi	r24, 0x04	; 4
    1808:	91 05       	cpc	r25, r1
    180a:	71 f1       	breq	.+92     	; 0x1868 <MEXTI_Enable+0x1e6>
    180c:	3c c0       	rjmp	.+120    	; 0x1886 <MEXTI_Enable+0x204>
		{
			case LOW_LEVEL    : CLR_BIT(MCUCR,MCUCR_ISC10);    CLR_BIT(MCUCR,MCUCR_ISC11);    break;
    180e:	a5 e5       	ldi	r26, 0x55	; 85
    1810:	b0 e0       	ldi	r27, 0x00	; 0
    1812:	e5 e5       	ldi	r30, 0x55	; 85
    1814:	f0 e0       	ldi	r31, 0x00	; 0
    1816:	80 81       	ld	r24, Z
    1818:	8b 7f       	andi	r24, 0xFB	; 251
    181a:	8c 93       	st	X, r24
    181c:	a5 e5       	ldi	r26, 0x55	; 85
    181e:	b0 e0       	ldi	r27, 0x00	; 0
    1820:	e5 e5       	ldi	r30, 0x55	; 85
    1822:	f0 e0       	ldi	r31, 0x00	; 0
    1824:	80 81       	ld	r24, Z
    1826:	87 7f       	andi	r24, 0xF7	; 247
    1828:	8c 93       	st	X, r24
    182a:	2e c0       	rjmp	.+92     	; 0x1888 <MEXTI_Enable+0x206>
			case ON_CHANGE    : SET_BIT(MCUCR,MCUCR_ISC10);    CLR_BIT(MCUCR,MCUCR_ISC11);    break;
    182c:	a5 e5       	ldi	r26, 0x55	; 85
    182e:	b0 e0       	ldi	r27, 0x00	; 0
    1830:	e5 e5       	ldi	r30, 0x55	; 85
    1832:	f0 e0       	ldi	r31, 0x00	; 0
    1834:	80 81       	ld	r24, Z
    1836:	84 60       	ori	r24, 0x04	; 4
    1838:	8c 93       	st	X, r24
    183a:	a5 e5       	ldi	r26, 0x55	; 85
    183c:	b0 e0       	ldi	r27, 0x00	; 0
    183e:	e5 e5       	ldi	r30, 0x55	; 85
    1840:	f0 e0       	ldi	r31, 0x00	; 0
    1842:	80 81       	ld	r24, Z
    1844:	87 7f       	andi	r24, 0xF7	; 247
    1846:	8c 93       	st	X, r24
    1848:	1f c0       	rjmp	.+62     	; 0x1888 <MEXTI_Enable+0x206>
			case FALLING_EDGE : SET_BIT(MCUCR,MCUCR_ISC11);    CLR_BIT(MCUCR,MCUCR_ISC10);    break;
    184a:	a5 e5       	ldi	r26, 0x55	; 85
    184c:	b0 e0       	ldi	r27, 0x00	; 0
    184e:	e5 e5       	ldi	r30, 0x55	; 85
    1850:	f0 e0       	ldi	r31, 0x00	; 0
    1852:	80 81       	ld	r24, Z
    1854:	88 60       	ori	r24, 0x08	; 8
    1856:	8c 93       	st	X, r24
    1858:	a5 e5       	ldi	r26, 0x55	; 85
    185a:	b0 e0       	ldi	r27, 0x00	; 0
    185c:	e5 e5       	ldi	r30, 0x55	; 85
    185e:	f0 e0       	ldi	r31, 0x00	; 0
    1860:	80 81       	ld	r24, Z
    1862:	8b 7f       	andi	r24, 0xFB	; 251
    1864:	8c 93       	st	X, r24
    1866:	10 c0       	rjmp	.+32     	; 0x1888 <MEXTI_Enable+0x206>
			case RISING_EDGE  : SET_BIT(MCUCR,MCUCR_ISC11);    SET_BIT(MCUCR,MCUCR_ISC10);    break;
    1868:	a5 e5       	ldi	r26, 0x55	; 85
    186a:	b0 e0       	ldi	r27, 0x00	; 0
    186c:	e5 e5       	ldi	r30, 0x55	; 85
    186e:	f0 e0       	ldi	r31, 0x00	; 0
    1870:	80 81       	ld	r24, Z
    1872:	88 60       	ori	r24, 0x08	; 8
    1874:	8c 93       	st	X, r24
    1876:	a5 e5       	ldi	r26, 0x55	; 85
    1878:	b0 e0       	ldi	r27, 0x00	; 0
    187a:	e5 e5       	ldi	r30, 0x55	; 85
    187c:	f0 e0       	ldi	r31, 0x00	; 0
    187e:	80 81       	ld	r24, Z
    1880:	84 60       	ori	r24, 0x04	; 4
    1882:	8c 93       	st	X, r24
    1884:	01 c0       	rjmp	.+2      	; 0x1888 <MEXTI_Enable+0x206>
			default:           Local_ErrorState = R_NOK;                                      break;
    1886:	19 82       	std	Y+1, r1	; 0x01
		}
		/* Enable INT1 */
		SET_BIT(GICR,GICR_INT1);
    1888:	ab e5       	ldi	r26, 0x5B	; 91
    188a:	b0 e0       	ldi	r27, 0x00	; 0
    188c:	eb e5       	ldi	r30, 0x5B	; 91
    188e:	f0 e0       	ldi	r31, 0x00	; 0
    1890:	80 81       	ld	r24, Z
    1892:	80 68       	ori	r24, 0x80	; 128
    1894:	8c 93       	st	X, r24
    1896:	37 c0       	rjmp	.+110    	; 0x1906 <MEXTI_Enable+0x284>
		break;
		
		/********** INT2 **********/
		case INT2 :
		/* Initialize the INT2 callback notification function globally */
        if (Copy_pvEXTIxFunc != NULL)
    1898:	8c 81       	ldd	r24, Y+4	; 0x04
    189a:	9d 81       	ldd	r25, Y+5	; 0x05
    189c:	00 97       	sbiw	r24, 0x00	; 0
    189e:	39 f0       	breq	.+14     	; 0x18ae <MEXTI_Enable+0x22c>
        {
        	INT2_pvFunc = Copy_pvEXTIxFunc;
    18a0:	8c 81       	ldd	r24, Y+4	; 0x04
    18a2:	9d 81       	ldd	r25, Y+5	; 0x05
    18a4:	90 93 ad 01 	sts	0x01AD, r25
    18a8:	80 93 ac 01 	sts	0x01AC, r24
    18ac:	02 c0       	rjmp	.+4      	; 0x18b2 <MEXTI_Enable+0x230>
        }
        else
        {
        	Local_ErrorState = NULL_POINTER;
    18ae:	86 e0       	ldi	r24, 0x06	; 6
    18b0:	89 83       	std	Y+1, r24	; 0x01
        }
		/* SET INT2 Sense Control */
		switch (Copy_u8EXTIxSense)
    18b2:	8b 81       	ldd	r24, Y+3	; 0x03
    18b4:	28 2f       	mov	r18, r24
    18b6:	30 e0       	ldi	r19, 0x00	; 0
    18b8:	3f 83       	std	Y+7, r19	; 0x07
    18ba:	2e 83       	std	Y+6, r18	; 0x06
    18bc:	8e 81       	ldd	r24, Y+6	; 0x06
    18be:	9f 81       	ldd	r25, Y+7	; 0x07
    18c0:	83 30       	cpi	r24, 0x03	; 3
    18c2:	91 05       	cpc	r25, r1
    18c4:	31 f0       	breq	.+12     	; 0x18d2 <MEXTI_Enable+0x250>
    18c6:	2e 81       	ldd	r18, Y+6	; 0x06
    18c8:	3f 81       	ldd	r19, Y+7	; 0x07
    18ca:	24 30       	cpi	r18, 0x04	; 4
    18cc:	31 05       	cpc	r19, r1
    18ce:	49 f0       	breq	.+18     	; 0x18e2 <MEXTI_Enable+0x260>
    18d0:	10 c0       	rjmp	.+32     	; 0x18f2 <MEXTI_Enable+0x270>
		{
			case FALLING_EDGE: CLR_BIT(MCUCSR,MCUCSR_ISC2);    break;
    18d2:	a4 e5       	ldi	r26, 0x54	; 84
    18d4:	b0 e0       	ldi	r27, 0x00	; 0
    18d6:	e4 e5       	ldi	r30, 0x54	; 84
    18d8:	f0 e0       	ldi	r31, 0x00	; 0
    18da:	80 81       	ld	r24, Z
    18dc:	8f 7b       	andi	r24, 0xBF	; 191
    18de:	8c 93       	st	X, r24
    18e0:	09 c0       	rjmp	.+18     	; 0x18f4 <MEXTI_Enable+0x272>
			case RISING_EDGE : SET_BIT(MCUCSR,MCUCSR_ISC2);    break;
    18e2:	a4 e5       	ldi	r26, 0x54	; 84
    18e4:	b0 e0       	ldi	r27, 0x00	; 0
    18e6:	e4 e5       	ldi	r30, 0x54	; 84
    18e8:	f0 e0       	ldi	r31, 0x00	; 0
    18ea:	80 81       	ld	r24, Z
    18ec:	80 64       	ori	r24, 0x40	; 64
    18ee:	8c 93       	st	X, r24
    18f0:	01 c0       	rjmp	.+2      	; 0x18f4 <MEXTI_Enable+0x272>
			default:           Local_ErrorState = R_NOK;       break;
    18f2:	19 82       	std	Y+1, r1	; 0x01
		}
		/* Enable INT2 */
		SET_BIT(GICR,GICR_INT2);
    18f4:	ab e5       	ldi	r26, 0x5B	; 91
    18f6:	b0 e0       	ldi	r27, 0x00	; 0
    18f8:	eb e5       	ldi	r30, 0x5B	; 91
    18fa:	f0 e0       	ldi	r31, 0x00	; 0
    18fc:	80 81       	ld	r24, Z
    18fe:	80 62       	ori	r24, 0x20	; 32
    1900:	8c 93       	st	X, r24
    1902:	01 c0       	rjmp	.+2      	; 0x1906 <MEXTI_Enable+0x284>
		break;
		
		default: Local_ErrorState = R_NOK;
    1904:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return Local_ErrorState;
    1906:	89 81       	ldd	r24, Y+1	; 0x01
}
    1908:	2d 96       	adiw	r28, 0x0d	; 13
    190a:	0f b6       	in	r0, 0x3f	; 63
    190c:	f8 94       	cli
    190e:	de bf       	out	0x3e, r29	; 62
    1910:	0f be       	out	0x3f, r0	; 63
    1912:	cd bf       	out	0x3d, r28	; 61
    1914:	cf 91       	pop	r28
    1916:	df 91       	pop	r29
    1918:	08 95       	ret

0000191a <MEXTI_Disable>:

error_state_t MEXTI_Disable(exti_t Copy_u8EXTIx)
{
    191a:	df 93       	push	r29
    191c:	cf 93       	push	r28
    191e:	00 d0       	rcall	.+0      	; 0x1920 <MEXTI_Disable+0x6>
    1920:	00 d0       	rcall	.+0      	; 0x1922 <MEXTI_Disable+0x8>
    1922:	cd b7       	in	r28, 0x3d	; 61
    1924:	de b7       	in	r29, 0x3e	; 62
    1926:	8a 83       	std	Y+2, r24	; 0x02
	error_state_t Local_ErrorState = R_OK;
    1928:	81 e0       	ldi	r24, 0x01	; 1
    192a:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8EXTIx)
    192c:	8a 81       	ldd	r24, Y+2	; 0x02
    192e:	28 2f       	mov	r18, r24
    1930:	30 e0       	ldi	r19, 0x00	; 0
    1932:	3c 83       	std	Y+4, r19	; 0x04
    1934:	2b 83       	std	Y+3, r18	; 0x03
    1936:	8b 81       	ldd	r24, Y+3	; 0x03
    1938:	9c 81       	ldd	r25, Y+4	; 0x04
    193a:	82 30       	cpi	r24, 0x02	; 2
    193c:	91 05       	cpc	r25, r1
    193e:	91 f0       	breq	.+36     	; 0x1964 <MEXTI_Disable+0x4a>
    1940:	2b 81       	ldd	r18, Y+3	; 0x03
    1942:	3c 81       	ldd	r19, Y+4	; 0x04
    1944:	23 30       	cpi	r18, 0x03	; 3
    1946:	31 05       	cpc	r19, r1
    1948:	a9 f0       	breq	.+42     	; 0x1974 <MEXTI_Disable+0x5a>
    194a:	8b 81       	ldd	r24, Y+3	; 0x03
    194c:	9c 81       	ldd	r25, Y+4	; 0x04
    194e:	81 30       	cpi	r24, 0x01	; 1
    1950:	91 05       	cpc	r25, r1
    1952:	c1 f4       	brne	.+48     	; 0x1984 <MEXTI_Disable+0x6a>
	{
		case INT0:  CLR_BIT(GICR,GICR_INT0);  break;
    1954:	ab e5       	ldi	r26, 0x5B	; 91
    1956:	b0 e0       	ldi	r27, 0x00	; 0
    1958:	eb e5       	ldi	r30, 0x5B	; 91
    195a:	f0 e0       	ldi	r31, 0x00	; 0
    195c:	80 81       	ld	r24, Z
    195e:	8f 7b       	andi	r24, 0xBF	; 191
    1960:	8c 93       	st	X, r24
    1962:	11 c0       	rjmp	.+34     	; 0x1986 <MEXTI_Disable+0x6c>
		case INT1:  CLR_BIT(GICR,GICR_INT1);  break;
    1964:	ab e5       	ldi	r26, 0x5B	; 91
    1966:	b0 e0       	ldi	r27, 0x00	; 0
    1968:	eb e5       	ldi	r30, 0x5B	; 91
    196a:	f0 e0       	ldi	r31, 0x00	; 0
    196c:	80 81       	ld	r24, Z
    196e:	8f 77       	andi	r24, 0x7F	; 127
    1970:	8c 93       	st	X, r24
    1972:	09 c0       	rjmp	.+18     	; 0x1986 <MEXTI_Disable+0x6c>
		case INT2:  CLR_BIT(GICR,GICR_INT2);  break;
    1974:	ab e5       	ldi	r26, 0x5B	; 91
    1976:	b0 e0       	ldi	r27, 0x00	; 0
    1978:	eb e5       	ldi	r30, 0x5B	; 91
    197a:	f0 e0       	ldi	r31, 0x00	; 0
    197c:	80 81       	ld	r24, Z
    197e:	8f 7d       	andi	r24, 0xDF	; 223
    1980:	8c 93       	st	X, r24
    1982:	01 c0       	rjmp	.+2      	; 0x1986 <MEXTI_Disable+0x6c>
		default:    Local_ErrorState = R_NOK; break;
    1984:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return Local_ErrorState;
    1986:	89 81       	ldd	r24, Y+1	; 0x01
}
    1988:	0f 90       	pop	r0
    198a:	0f 90       	pop	r0
    198c:	0f 90       	pop	r0
    198e:	0f 90       	pop	r0
    1990:	cf 91       	pop	r28
    1992:	df 91       	pop	r29
    1994:	08 95       	ret

00001996 <MEXTI_FUNC>:

void MEXTI_FUNC( void(*Copy_pvEXTIxFunc)(void))
{
    1996:	df 93       	push	r29
    1998:	cf 93       	push	r28
    199a:	00 d0       	rcall	.+0      	; 0x199c <MEXTI_FUNC+0x6>
    199c:	cd b7       	in	r28, 0x3d	; 61
    199e:	de b7       	in	r29, 0x3e	; 62
    19a0:	9a 83       	std	Y+2, r25	; 0x02
    19a2:	89 83       	std	Y+1, r24	; 0x01
	INT_pvFunc = Copy_pvEXTIxFunc;
    19a4:	89 81       	ldd	r24, Y+1	; 0x01
    19a6:	9a 81       	ldd	r25, Y+2	; 0x02
    19a8:	90 93 a9 01 	sts	0x01A9, r25
    19ac:	80 93 a8 01 	sts	0x01A8, r24
}
    19b0:	0f 90       	pop	r0
    19b2:	0f 90       	pop	r0
    19b4:	cf 91       	pop	r28
    19b6:	df 91       	pop	r29
    19b8:	08 95       	ret

000019ba <__vector_1>:


/*************** ISR Functions **************/
/******** INT0 ********/
ISR_ST(INT0_VECTOR)
{
    19ba:	1f 92       	push	r1
    19bc:	0f 92       	push	r0
    19be:	0f b6       	in	r0, 0x3f	; 63
    19c0:	0f 92       	push	r0
    19c2:	11 24       	eor	r1, r1
    19c4:	2f 93       	push	r18
    19c6:	3f 93       	push	r19
    19c8:	4f 93       	push	r20
    19ca:	5f 93       	push	r21
    19cc:	6f 93       	push	r22
    19ce:	7f 93       	push	r23
    19d0:	8f 93       	push	r24
    19d2:	9f 93       	push	r25
    19d4:	af 93       	push	r26
    19d6:	bf 93       	push	r27
    19d8:	ef 93       	push	r30
    19da:	ff 93       	push	r31
    19dc:	df 93       	push	r29
    19de:	cf 93       	push	r28
    19e0:	cd b7       	in	r28, 0x3d	; 61
    19e2:	de b7       	in	r29, 0x3e	; 62
	//if (INT_pvFunc != NULL)
	if (INT0_pvFunc != NULL)
    19e4:	80 91 a6 01 	lds	r24, 0x01A6
    19e8:	90 91 a7 01 	lds	r25, 0x01A7
    19ec:	00 97       	sbiw	r24, 0x00	; 0
    19ee:	29 f0       	breq	.+10     	; 0x19fa <__vector_1+0x40>
	{
		INT0_pvFunc();
    19f0:	e0 91 a6 01 	lds	r30, 0x01A6
    19f4:	f0 91 a7 01 	lds	r31, 0x01A7
    19f8:	09 95       	icall
	} 
	else
	{
		/* Do No Thing */
	}
}
    19fa:	cf 91       	pop	r28
    19fc:	df 91       	pop	r29
    19fe:	ff 91       	pop	r31
    1a00:	ef 91       	pop	r30
    1a02:	bf 91       	pop	r27
    1a04:	af 91       	pop	r26
    1a06:	9f 91       	pop	r25
    1a08:	8f 91       	pop	r24
    1a0a:	7f 91       	pop	r23
    1a0c:	6f 91       	pop	r22
    1a0e:	5f 91       	pop	r21
    1a10:	4f 91       	pop	r20
    1a12:	3f 91       	pop	r19
    1a14:	2f 91       	pop	r18
    1a16:	0f 90       	pop	r0
    1a18:	0f be       	out	0x3f, r0	; 63
    1a1a:	0f 90       	pop	r0
    1a1c:	1f 90       	pop	r1
    1a1e:	18 95       	reti

00001a20 <__vector_2>:
/******** INT1 ********/
ISR_ST(INT1_VECTOR)
{
    1a20:	1f 92       	push	r1
    1a22:	0f 92       	push	r0
    1a24:	0f b6       	in	r0, 0x3f	; 63
    1a26:	0f 92       	push	r0
    1a28:	11 24       	eor	r1, r1
    1a2a:	2f 93       	push	r18
    1a2c:	3f 93       	push	r19
    1a2e:	4f 93       	push	r20
    1a30:	5f 93       	push	r21
    1a32:	6f 93       	push	r22
    1a34:	7f 93       	push	r23
    1a36:	8f 93       	push	r24
    1a38:	9f 93       	push	r25
    1a3a:	af 93       	push	r26
    1a3c:	bf 93       	push	r27
    1a3e:	ef 93       	push	r30
    1a40:	ff 93       	push	r31
    1a42:	df 93       	push	r29
    1a44:	cf 93       	push	r28
    1a46:	cd b7       	in	r28, 0x3d	; 61
    1a48:	de b7       	in	r29, 0x3e	; 62
	if (INT1_pvFunc != NULL)
    1a4a:	80 91 aa 01 	lds	r24, 0x01AA
    1a4e:	90 91 ab 01 	lds	r25, 0x01AB
    1a52:	00 97       	sbiw	r24, 0x00	; 0
    1a54:	29 f0       	breq	.+10     	; 0x1a60 <__vector_2+0x40>
	{
		INT1_pvFunc();
    1a56:	e0 91 aa 01 	lds	r30, 0x01AA
    1a5a:	f0 91 ab 01 	lds	r31, 0x01AB
    1a5e:	09 95       	icall
	}
	else
	{
		/* Do No Thing */
	}
}
    1a60:	cf 91       	pop	r28
    1a62:	df 91       	pop	r29
    1a64:	ff 91       	pop	r31
    1a66:	ef 91       	pop	r30
    1a68:	bf 91       	pop	r27
    1a6a:	af 91       	pop	r26
    1a6c:	9f 91       	pop	r25
    1a6e:	8f 91       	pop	r24
    1a70:	7f 91       	pop	r23
    1a72:	6f 91       	pop	r22
    1a74:	5f 91       	pop	r21
    1a76:	4f 91       	pop	r20
    1a78:	3f 91       	pop	r19
    1a7a:	2f 91       	pop	r18
    1a7c:	0f 90       	pop	r0
    1a7e:	0f be       	out	0x3f, r0	; 63
    1a80:	0f 90       	pop	r0
    1a82:	1f 90       	pop	r1
    1a84:	18 95       	reti

00001a86 <__vector_3>:
/******** INT2 ********/
ISR_ST(INT2_VECTOR)
{
    1a86:	1f 92       	push	r1
    1a88:	0f 92       	push	r0
    1a8a:	0f b6       	in	r0, 0x3f	; 63
    1a8c:	0f 92       	push	r0
    1a8e:	11 24       	eor	r1, r1
    1a90:	2f 93       	push	r18
    1a92:	3f 93       	push	r19
    1a94:	4f 93       	push	r20
    1a96:	5f 93       	push	r21
    1a98:	6f 93       	push	r22
    1a9a:	7f 93       	push	r23
    1a9c:	8f 93       	push	r24
    1a9e:	9f 93       	push	r25
    1aa0:	af 93       	push	r26
    1aa2:	bf 93       	push	r27
    1aa4:	ef 93       	push	r30
    1aa6:	ff 93       	push	r31
    1aa8:	df 93       	push	r29
    1aaa:	cf 93       	push	r28
    1aac:	cd b7       	in	r28, 0x3d	; 61
    1aae:	de b7       	in	r29, 0x3e	; 62
	if (INT2_pvFunc != NULL)
    1ab0:	80 91 ac 01 	lds	r24, 0x01AC
    1ab4:	90 91 ad 01 	lds	r25, 0x01AD
    1ab8:	00 97       	sbiw	r24, 0x00	; 0
    1aba:	29 f0       	breq	.+10     	; 0x1ac6 <__vector_3+0x40>
	{
		INT2_pvFunc();
    1abc:	e0 91 ac 01 	lds	r30, 0x01AC
    1ac0:	f0 91 ad 01 	lds	r31, 0x01AD
    1ac4:	09 95       	icall
	}
	else
	{
		/* Do No Thing */
	}
}
    1ac6:	cf 91       	pop	r28
    1ac8:	df 91       	pop	r29
    1aca:	ff 91       	pop	r31
    1acc:	ef 91       	pop	r30
    1ace:	bf 91       	pop	r27
    1ad0:	af 91       	pop	r26
    1ad2:	9f 91       	pop	r25
    1ad4:	8f 91       	pop	r24
    1ad6:	7f 91       	pop	r23
    1ad8:	6f 91       	pop	r22
    1ada:	5f 91       	pop	r21
    1adc:	4f 91       	pop	r20
    1ade:	3f 91       	pop	r19
    1ae0:	2f 91       	pop	r18
    1ae2:	0f 90       	pop	r0
    1ae4:	0f be       	out	0x3f, r0	; 63
    1ae6:	0f 90       	pop	r0
    1ae8:	1f 90       	pop	r1
    1aea:	18 95       	reti

00001aec <MDIO_SetPinDirection>:
#include "MDIO_private.h"
#include "MDIO_config.h"


error_state_t	MDIO_SetPinDirection (dio_u8port_t Copy_u8Port, dio_u8pin_t Copy_u8Pin, dio_direc_t Copy_Direction)
{
    1aec:	df 93       	push	r29
    1aee:	cf 93       	push	r28
    1af0:	cd b7       	in	r28, 0x3d	; 61
    1af2:	de b7       	in	r29, 0x3e	; 62
    1af4:	28 97       	sbiw	r28, 0x08	; 8
    1af6:	0f b6       	in	r0, 0x3f	; 63
    1af8:	f8 94       	cli
    1afa:	de bf       	out	0x3e, r29	; 62
    1afc:	0f be       	out	0x3f, r0	; 63
    1afe:	cd bf       	out	0x3d, r28	; 61
    1b00:	8a 83       	std	Y+2, r24	; 0x02
    1b02:	6b 83       	std	Y+3, r22	; 0x03
    1b04:	4c 83       	std	Y+4, r20	; 0x04
	error_state_t Local_ErrorState = R_OK;
    1b06:	81 e0       	ldi	r24, 0x01	; 1
    1b08:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8Pin <= DIO_u8PIN7)
    1b0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0c:	88 30       	cpi	r24, 0x08	; 8
    1b0e:	08 f0       	brcs	.+2      	; 0x1b12 <MDIO_SetPinDirection+0x26>
    1b10:	f1 c0       	rjmp	.+482    	; 0x1cf4 <MDIO_SetPinDirection+0x208>
	{
		if (Copy_Direction == DIO_u8PIN_INPUT)
    1b12:	8c 81       	ldd	r24, Y+4	; 0x04
    1b14:	88 23       	and	r24, r24
    1b16:	09 f0       	breq	.+2      	; 0x1b1a <MDIO_SetPinDirection+0x2e>
    1b18:	76 c0       	rjmp	.+236    	; 0x1c06 <MDIO_SetPinDirection+0x11a>
		{
			switch (Copy_u8Port)
    1b1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b1c:	28 2f       	mov	r18, r24
    1b1e:	30 e0       	ldi	r19, 0x00	; 0
    1b20:	38 87       	std	Y+8, r19	; 0x08
    1b22:	2f 83       	std	Y+7, r18	; 0x07
    1b24:	8f 81       	ldd	r24, Y+7	; 0x07
    1b26:	98 85       	ldd	r25, Y+8	; 0x08
    1b28:	81 30       	cpi	r24, 0x01	; 1
    1b2a:	91 05       	cpc	r25, r1
    1b2c:	59 f1       	breq	.+86     	; 0x1b84 <MDIO_SetPinDirection+0x98>
    1b2e:	2f 81       	ldd	r18, Y+7	; 0x07
    1b30:	38 85       	ldd	r19, Y+8	; 0x08
    1b32:	22 30       	cpi	r18, 0x02	; 2
    1b34:	31 05       	cpc	r19, r1
    1b36:	2c f4       	brge	.+10     	; 0x1b42 <MDIO_SetPinDirection+0x56>
    1b38:	8f 81       	ldd	r24, Y+7	; 0x07
    1b3a:	98 85       	ldd	r25, Y+8	; 0x08
    1b3c:	00 97       	sbiw	r24, 0x00	; 0
    1b3e:	69 f0       	breq	.+26     	; 0x1b5a <MDIO_SetPinDirection+0x6e>
    1b40:	60 c0       	rjmp	.+192    	; 0x1c02 <MDIO_SetPinDirection+0x116>
    1b42:	2f 81       	ldd	r18, Y+7	; 0x07
    1b44:	38 85       	ldd	r19, Y+8	; 0x08
    1b46:	22 30       	cpi	r18, 0x02	; 2
    1b48:	31 05       	cpc	r19, r1
    1b4a:	89 f1       	breq	.+98     	; 0x1bae <MDIO_SetPinDirection+0xc2>
    1b4c:	8f 81       	ldd	r24, Y+7	; 0x07
    1b4e:	98 85       	ldd	r25, Y+8	; 0x08
    1b50:	83 30       	cpi	r24, 0x03	; 3
    1b52:	91 05       	cpc	r25, r1
    1b54:	09 f4       	brne	.+2      	; 0x1b58 <MDIO_SetPinDirection+0x6c>
    1b56:	40 c0       	rjmp	.+128    	; 0x1bd8 <MDIO_SetPinDirection+0xec>
    1b58:	54 c0       	rjmp	.+168    	; 0x1c02 <MDIO_SetPinDirection+0x116>
			{
				case DIO_u8PORTA : CLR_BIT(DDRA,Copy_u8Pin); break;
    1b5a:	aa e3       	ldi	r26, 0x3A	; 58
    1b5c:	b0 e0       	ldi	r27, 0x00	; 0
    1b5e:	ea e3       	ldi	r30, 0x3A	; 58
    1b60:	f0 e0       	ldi	r31, 0x00	; 0
    1b62:	80 81       	ld	r24, Z
    1b64:	48 2f       	mov	r20, r24
    1b66:	8b 81       	ldd	r24, Y+3	; 0x03
    1b68:	28 2f       	mov	r18, r24
    1b6a:	30 e0       	ldi	r19, 0x00	; 0
    1b6c:	81 e0       	ldi	r24, 0x01	; 1
    1b6e:	90 e0       	ldi	r25, 0x00	; 0
    1b70:	02 2e       	mov	r0, r18
    1b72:	02 c0       	rjmp	.+4      	; 0x1b78 <MDIO_SetPinDirection+0x8c>
    1b74:	88 0f       	add	r24, r24
    1b76:	99 1f       	adc	r25, r25
    1b78:	0a 94       	dec	r0
    1b7a:	e2 f7       	brpl	.-8      	; 0x1b74 <MDIO_SetPinDirection+0x88>
    1b7c:	80 95       	com	r24
    1b7e:	84 23       	and	r24, r20
    1b80:	8c 93       	st	X, r24
    1b82:	b9 c0       	rjmp	.+370    	; 0x1cf6 <MDIO_SetPinDirection+0x20a>
				case DIO_u8PORTB : CLR_BIT(DDRB,Copy_u8Pin); break;
    1b84:	a7 e3       	ldi	r26, 0x37	; 55
    1b86:	b0 e0       	ldi	r27, 0x00	; 0
    1b88:	e7 e3       	ldi	r30, 0x37	; 55
    1b8a:	f0 e0       	ldi	r31, 0x00	; 0
    1b8c:	80 81       	ld	r24, Z
    1b8e:	48 2f       	mov	r20, r24
    1b90:	8b 81       	ldd	r24, Y+3	; 0x03
    1b92:	28 2f       	mov	r18, r24
    1b94:	30 e0       	ldi	r19, 0x00	; 0
    1b96:	81 e0       	ldi	r24, 0x01	; 1
    1b98:	90 e0       	ldi	r25, 0x00	; 0
    1b9a:	02 2e       	mov	r0, r18
    1b9c:	02 c0       	rjmp	.+4      	; 0x1ba2 <MDIO_SetPinDirection+0xb6>
    1b9e:	88 0f       	add	r24, r24
    1ba0:	99 1f       	adc	r25, r25
    1ba2:	0a 94       	dec	r0
    1ba4:	e2 f7       	brpl	.-8      	; 0x1b9e <MDIO_SetPinDirection+0xb2>
    1ba6:	80 95       	com	r24
    1ba8:	84 23       	and	r24, r20
    1baa:	8c 93       	st	X, r24
    1bac:	a4 c0       	rjmp	.+328    	; 0x1cf6 <MDIO_SetPinDirection+0x20a>
				case DIO_u8PORTC : CLR_BIT(DDRC,Copy_u8Pin); break;
    1bae:	a4 e3       	ldi	r26, 0x34	; 52
    1bb0:	b0 e0       	ldi	r27, 0x00	; 0
    1bb2:	e4 e3       	ldi	r30, 0x34	; 52
    1bb4:	f0 e0       	ldi	r31, 0x00	; 0
    1bb6:	80 81       	ld	r24, Z
    1bb8:	48 2f       	mov	r20, r24
    1bba:	8b 81       	ldd	r24, Y+3	; 0x03
    1bbc:	28 2f       	mov	r18, r24
    1bbe:	30 e0       	ldi	r19, 0x00	; 0
    1bc0:	81 e0       	ldi	r24, 0x01	; 1
    1bc2:	90 e0       	ldi	r25, 0x00	; 0
    1bc4:	02 2e       	mov	r0, r18
    1bc6:	02 c0       	rjmp	.+4      	; 0x1bcc <MDIO_SetPinDirection+0xe0>
    1bc8:	88 0f       	add	r24, r24
    1bca:	99 1f       	adc	r25, r25
    1bcc:	0a 94       	dec	r0
    1bce:	e2 f7       	brpl	.-8      	; 0x1bc8 <MDIO_SetPinDirection+0xdc>
    1bd0:	80 95       	com	r24
    1bd2:	84 23       	and	r24, r20
    1bd4:	8c 93       	st	X, r24
    1bd6:	8f c0       	rjmp	.+286    	; 0x1cf6 <MDIO_SetPinDirection+0x20a>
				case DIO_u8PORTD : CLR_BIT(DDRD,Copy_u8Pin); break;
    1bd8:	a1 e3       	ldi	r26, 0x31	; 49
    1bda:	b0 e0       	ldi	r27, 0x00	; 0
    1bdc:	e1 e3       	ldi	r30, 0x31	; 49
    1bde:	f0 e0       	ldi	r31, 0x00	; 0
    1be0:	80 81       	ld	r24, Z
    1be2:	48 2f       	mov	r20, r24
    1be4:	8b 81       	ldd	r24, Y+3	; 0x03
    1be6:	28 2f       	mov	r18, r24
    1be8:	30 e0       	ldi	r19, 0x00	; 0
    1bea:	81 e0       	ldi	r24, 0x01	; 1
    1bec:	90 e0       	ldi	r25, 0x00	; 0
    1bee:	02 2e       	mov	r0, r18
    1bf0:	02 c0       	rjmp	.+4      	; 0x1bf6 <MDIO_SetPinDirection+0x10a>
    1bf2:	88 0f       	add	r24, r24
    1bf4:	99 1f       	adc	r25, r25
    1bf6:	0a 94       	dec	r0
    1bf8:	e2 f7       	brpl	.-8      	; 0x1bf2 <MDIO_SetPinDirection+0x106>
    1bfa:	80 95       	com	r24
    1bfc:	84 23       	and	r24, r20
    1bfe:	8c 93       	st	X, r24
    1c00:	7a c0       	rjmp	.+244    	; 0x1cf6 <MDIO_SetPinDirection+0x20a>
		        default: Local_ErrorState = R_NOK; break;
    1c02:	19 82       	std	Y+1, r1	; 0x01
    1c04:	78 c0       	rjmp	.+240    	; 0x1cf6 <MDIO_SetPinDirection+0x20a>
			}

		}
		else if (Copy_Direction == DIO_u8PIN_OUTPUT)
    1c06:	8c 81       	ldd	r24, Y+4	; 0x04
    1c08:	81 30       	cpi	r24, 0x01	; 1
    1c0a:	09 f0       	breq	.+2      	; 0x1c0e <MDIO_SetPinDirection+0x122>
    1c0c:	71 c0       	rjmp	.+226    	; 0x1cf0 <MDIO_SetPinDirection+0x204>
		{
			switch (Copy_u8Port)
    1c0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c10:	28 2f       	mov	r18, r24
    1c12:	30 e0       	ldi	r19, 0x00	; 0
    1c14:	3e 83       	std	Y+6, r19	; 0x06
    1c16:	2d 83       	std	Y+5, r18	; 0x05
    1c18:	8d 81       	ldd	r24, Y+5	; 0x05
    1c1a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c1c:	81 30       	cpi	r24, 0x01	; 1
    1c1e:	91 05       	cpc	r25, r1
    1c20:	49 f1       	breq	.+82     	; 0x1c74 <MDIO_SetPinDirection+0x188>
    1c22:	2d 81       	ldd	r18, Y+5	; 0x05
    1c24:	3e 81       	ldd	r19, Y+6	; 0x06
    1c26:	22 30       	cpi	r18, 0x02	; 2
    1c28:	31 05       	cpc	r19, r1
    1c2a:	2c f4       	brge	.+10     	; 0x1c36 <MDIO_SetPinDirection+0x14a>
    1c2c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c2e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c30:	00 97       	sbiw	r24, 0x00	; 0
    1c32:	61 f0       	breq	.+24     	; 0x1c4c <MDIO_SetPinDirection+0x160>
    1c34:	5b c0       	rjmp	.+182    	; 0x1cec <MDIO_SetPinDirection+0x200>
    1c36:	2d 81       	ldd	r18, Y+5	; 0x05
    1c38:	3e 81       	ldd	r19, Y+6	; 0x06
    1c3a:	22 30       	cpi	r18, 0x02	; 2
    1c3c:	31 05       	cpc	r19, r1
    1c3e:	71 f1       	breq	.+92     	; 0x1c9c <MDIO_SetPinDirection+0x1b0>
    1c40:	8d 81       	ldd	r24, Y+5	; 0x05
    1c42:	9e 81       	ldd	r25, Y+6	; 0x06
    1c44:	83 30       	cpi	r24, 0x03	; 3
    1c46:	91 05       	cpc	r25, r1
    1c48:	e9 f1       	breq	.+122    	; 0x1cc4 <MDIO_SetPinDirection+0x1d8>
    1c4a:	50 c0       	rjmp	.+160    	; 0x1cec <MDIO_SetPinDirection+0x200>
			{
				case DIO_u8PORTA : SET_BIT(DDRA,Copy_u8Pin); break;
    1c4c:	aa e3       	ldi	r26, 0x3A	; 58
    1c4e:	b0 e0       	ldi	r27, 0x00	; 0
    1c50:	ea e3       	ldi	r30, 0x3A	; 58
    1c52:	f0 e0       	ldi	r31, 0x00	; 0
    1c54:	80 81       	ld	r24, Z
    1c56:	48 2f       	mov	r20, r24
    1c58:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5a:	28 2f       	mov	r18, r24
    1c5c:	30 e0       	ldi	r19, 0x00	; 0
    1c5e:	81 e0       	ldi	r24, 0x01	; 1
    1c60:	90 e0       	ldi	r25, 0x00	; 0
    1c62:	02 2e       	mov	r0, r18
    1c64:	02 c0       	rjmp	.+4      	; 0x1c6a <MDIO_SetPinDirection+0x17e>
    1c66:	88 0f       	add	r24, r24
    1c68:	99 1f       	adc	r25, r25
    1c6a:	0a 94       	dec	r0
    1c6c:	e2 f7       	brpl	.-8      	; 0x1c66 <MDIO_SetPinDirection+0x17a>
    1c6e:	84 2b       	or	r24, r20
    1c70:	8c 93       	st	X, r24
    1c72:	41 c0       	rjmp	.+130    	; 0x1cf6 <MDIO_SetPinDirection+0x20a>
				case DIO_u8PORTB : SET_BIT(DDRB,Copy_u8Pin); break;
    1c74:	a7 e3       	ldi	r26, 0x37	; 55
    1c76:	b0 e0       	ldi	r27, 0x00	; 0
    1c78:	e7 e3       	ldi	r30, 0x37	; 55
    1c7a:	f0 e0       	ldi	r31, 0x00	; 0
    1c7c:	80 81       	ld	r24, Z
    1c7e:	48 2f       	mov	r20, r24
    1c80:	8b 81       	ldd	r24, Y+3	; 0x03
    1c82:	28 2f       	mov	r18, r24
    1c84:	30 e0       	ldi	r19, 0x00	; 0
    1c86:	81 e0       	ldi	r24, 0x01	; 1
    1c88:	90 e0       	ldi	r25, 0x00	; 0
    1c8a:	02 2e       	mov	r0, r18
    1c8c:	02 c0       	rjmp	.+4      	; 0x1c92 <MDIO_SetPinDirection+0x1a6>
    1c8e:	88 0f       	add	r24, r24
    1c90:	99 1f       	adc	r25, r25
    1c92:	0a 94       	dec	r0
    1c94:	e2 f7       	brpl	.-8      	; 0x1c8e <MDIO_SetPinDirection+0x1a2>
    1c96:	84 2b       	or	r24, r20
    1c98:	8c 93       	st	X, r24
    1c9a:	2d c0       	rjmp	.+90     	; 0x1cf6 <MDIO_SetPinDirection+0x20a>
				case DIO_u8PORTC : SET_BIT(DDRC,Copy_u8Pin); break;
    1c9c:	a4 e3       	ldi	r26, 0x34	; 52
    1c9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ca0:	e4 e3       	ldi	r30, 0x34	; 52
    1ca2:	f0 e0       	ldi	r31, 0x00	; 0
    1ca4:	80 81       	ld	r24, Z
    1ca6:	48 2f       	mov	r20, r24
    1ca8:	8b 81       	ldd	r24, Y+3	; 0x03
    1caa:	28 2f       	mov	r18, r24
    1cac:	30 e0       	ldi	r19, 0x00	; 0
    1cae:	81 e0       	ldi	r24, 0x01	; 1
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	02 2e       	mov	r0, r18
    1cb4:	02 c0       	rjmp	.+4      	; 0x1cba <MDIO_SetPinDirection+0x1ce>
    1cb6:	88 0f       	add	r24, r24
    1cb8:	99 1f       	adc	r25, r25
    1cba:	0a 94       	dec	r0
    1cbc:	e2 f7       	brpl	.-8      	; 0x1cb6 <MDIO_SetPinDirection+0x1ca>
    1cbe:	84 2b       	or	r24, r20
    1cc0:	8c 93       	st	X, r24
    1cc2:	19 c0       	rjmp	.+50     	; 0x1cf6 <MDIO_SetPinDirection+0x20a>
				case DIO_u8PORTD : SET_BIT(DDRD,Copy_u8Pin); break;
    1cc4:	a1 e3       	ldi	r26, 0x31	; 49
    1cc6:	b0 e0       	ldi	r27, 0x00	; 0
    1cc8:	e1 e3       	ldi	r30, 0x31	; 49
    1cca:	f0 e0       	ldi	r31, 0x00	; 0
    1ccc:	80 81       	ld	r24, Z
    1cce:	48 2f       	mov	r20, r24
    1cd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd2:	28 2f       	mov	r18, r24
    1cd4:	30 e0       	ldi	r19, 0x00	; 0
    1cd6:	81 e0       	ldi	r24, 0x01	; 1
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	02 2e       	mov	r0, r18
    1cdc:	02 c0       	rjmp	.+4      	; 0x1ce2 <MDIO_SetPinDirection+0x1f6>
    1cde:	88 0f       	add	r24, r24
    1ce0:	99 1f       	adc	r25, r25
    1ce2:	0a 94       	dec	r0
    1ce4:	e2 f7       	brpl	.-8      	; 0x1cde <MDIO_SetPinDirection+0x1f2>
    1ce6:	84 2b       	or	r24, r20
    1ce8:	8c 93       	st	X, r24
    1cea:	05 c0       	rjmp	.+10     	; 0x1cf6 <MDIO_SetPinDirection+0x20a>
				default: Local_ErrorState = R_NOK; break;
    1cec:	19 82       	std	Y+1, r1	; 0x01
    1cee:	03 c0       	rjmp	.+6      	; 0x1cf6 <MDIO_SetPinDirection+0x20a>
			}

		}
		else
		{
			Local_ErrorState = R_NOK;
    1cf0:	19 82       	std	Y+1, r1	; 0x01
    1cf2:	01 c0       	rjmp	.+2      	; 0x1cf6 <MDIO_SetPinDirection+0x20a>
		}
	}
	else
	{
		Local_ErrorState = R_NOK;
    1cf4:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_ErrorState;
    1cf6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cf8:	28 96       	adiw	r28, 0x08	; 8
    1cfa:	0f b6       	in	r0, 0x3f	; 63
    1cfc:	f8 94       	cli
    1cfe:	de bf       	out	0x3e, r29	; 62
    1d00:	0f be       	out	0x3f, r0	; 63
    1d02:	cd bf       	out	0x3d, r28	; 61
    1d04:	cf 91       	pop	r28
    1d06:	df 91       	pop	r29
    1d08:	08 95       	ret

00001d0a <MDIO_SetPortDirection>:

error_state_t	MDIO_SetPortDirection (dio_u8port_t Copy_u8Port, dio_u8portdirec_t Copy_Direction)
{
    1d0a:	df 93       	push	r29
    1d0c:	cf 93       	push	r28
    1d0e:	00 d0       	rcall	.+0      	; 0x1d10 <MDIO_SetPortDirection+0x6>
    1d10:	00 d0       	rcall	.+0      	; 0x1d12 <MDIO_SetPortDirection+0x8>
    1d12:	0f 92       	push	r0
    1d14:	cd b7       	in	r28, 0x3d	; 61
    1d16:	de b7       	in	r29, 0x3e	; 62
    1d18:	8a 83       	std	Y+2, r24	; 0x02
    1d1a:	6b 83       	std	Y+3, r22	; 0x03
	error_state_t Local_ErrorState = R_OK;
    1d1c:	81 e0       	ldi	r24, 0x01	; 1
    1d1e:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8Port <= DIO_u8PORTD)
    1d20:	8a 81       	ldd	r24, Y+2	; 0x02
    1d22:	84 30       	cpi	r24, 0x04	; 4
    1d24:	a8 f5       	brcc	.+106    	; 0x1d90 <MDIO_SetPortDirection+0x86>
	{
		switch (Copy_u8Port)
    1d26:	8a 81       	ldd	r24, Y+2	; 0x02
    1d28:	28 2f       	mov	r18, r24
    1d2a:	30 e0       	ldi	r19, 0x00	; 0
    1d2c:	3d 83       	std	Y+5, r19	; 0x05
    1d2e:	2c 83       	std	Y+4, r18	; 0x04
    1d30:	8c 81       	ldd	r24, Y+4	; 0x04
    1d32:	9d 81       	ldd	r25, Y+5	; 0x05
    1d34:	81 30       	cpi	r24, 0x01	; 1
    1d36:	91 05       	cpc	r25, r1
    1d38:	d1 f0       	breq	.+52     	; 0x1d6e <MDIO_SetPortDirection+0x64>
    1d3a:	2c 81       	ldd	r18, Y+4	; 0x04
    1d3c:	3d 81       	ldd	r19, Y+5	; 0x05
    1d3e:	22 30       	cpi	r18, 0x02	; 2
    1d40:	31 05       	cpc	r19, r1
    1d42:	2c f4       	brge	.+10     	; 0x1d4e <MDIO_SetPortDirection+0x44>
    1d44:	8c 81       	ldd	r24, Y+4	; 0x04
    1d46:	9d 81       	ldd	r25, Y+5	; 0x05
    1d48:	00 97       	sbiw	r24, 0x00	; 0
    1d4a:	61 f0       	breq	.+24     	; 0x1d64 <MDIO_SetPortDirection+0x5a>
    1d4c:	1f c0       	rjmp	.+62     	; 0x1d8c <MDIO_SetPortDirection+0x82>
    1d4e:	2c 81       	ldd	r18, Y+4	; 0x04
    1d50:	3d 81       	ldd	r19, Y+5	; 0x05
    1d52:	22 30       	cpi	r18, 0x02	; 2
    1d54:	31 05       	cpc	r19, r1
    1d56:	81 f0       	breq	.+32     	; 0x1d78 <MDIO_SetPortDirection+0x6e>
    1d58:	8c 81       	ldd	r24, Y+4	; 0x04
    1d5a:	9d 81       	ldd	r25, Y+5	; 0x05
    1d5c:	83 30       	cpi	r24, 0x03	; 3
    1d5e:	91 05       	cpc	r25, r1
    1d60:	81 f0       	breq	.+32     	; 0x1d82 <MDIO_SetPortDirection+0x78>
    1d62:	14 c0       	rjmp	.+40     	; 0x1d8c <MDIO_SetPortDirection+0x82>
		{
			case DIO_u8PORTA : DDRA = Copy_Direction; break;
    1d64:	ea e3       	ldi	r30, 0x3A	; 58
    1d66:	f0 e0       	ldi	r31, 0x00	; 0
    1d68:	8b 81       	ldd	r24, Y+3	; 0x03
    1d6a:	80 83       	st	Z, r24
    1d6c:	12 c0       	rjmp	.+36     	; 0x1d92 <MDIO_SetPortDirection+0x88>
			case DIO_u8PORTB : DDRB = Copy_Direction; break;
    1d6e:	e7 e3       	ldi	r30, 0x37	; 55
    1d70:	f0 e0       	ldi	r31, 0x00	; 0
    1d72:	8b 81       	ldd	r24, Y+3	; 0x03
    1d74:	80 83       	st	Z, r24
    1d76:	0d c0       	rjmp	.+26     	; 0x1d92 <MDIO_SetPortDirection+0x88>
			case DIO_u8PORTC : DDRC = Copy_Direction; break;
    1d78:	e4 e3       	ldi	r30, 0x34	; 52
    1d7a:	f0 e0       	ldi	r31, 0x00	; 0
    1d7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d7e:	80 83       	st	Z, r24
    1d80:	08 c0       	rjmp	.+16     	; 0x1d92 <MDIO_SetPortDirection+0x88>
			case DIO_u8PORTD : DDRD = Copy_Direction; break;
    1d82:	e1 e3       	ldi	r30, 0x31	; 49
    1d84:	f0 e0       	ldi	r31, 0x00	; 0
    1d86:	8b 81       	ldd	r24, Y+3	; 0x03
    1d88:	80 83       	st	Z, r24
    1d8a:	03 c0       	rjmp	.+6      	; 0x1d92 <MDIO_SetPortDirection+0x88>
			default: Local_ErrorState = R_NOK; break;
    1d8c:	19 82       	std	Y+1, r1	; 0x01
    1d8e:	01 c0       	rjmp	.+2      	; 0x1d92 <MDIO_SetPortDirection+0x88>
		}
	}
	else
	{
		Local_ErrorState = R_NOK;
    1d90:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_ErrorState;
    1d92:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d94:	0f 90       	pop	r0
    1d96:	0f 90       	pop	r0
    1d98:	0f 90       	pop	r0
    1d9a:	0f 90       	pop	r0
    1d9c:	0f 90       	pop	r0
    1d9e:	cf 91       	pop	r28
    1da0:	df 91       	pop	r29
    1da2:	08 95       	ret

00001da4 <MDIO_SetPinValue>:


error_state_t	MDIO_SetPinValue (dio_u8port_t Copy_u8Port, dio_u8pin_t Copy_u8Pin, dio_value_t Copy_Value)
{
    1da4:	df 93       	push	r29
    1da6:	cf 93       	push	r28
    1da8:	cd b7       	in	r28, 0x3d	; 61
    1daa:	de b7       	in	r29, 0x3e	; 62
    1dac:	28 97       	sbiw	r28, 0x08	; 8
    1dae:	0f b6       	in	r0, 0x3f	; 63
    1db0:	f8 94       	cli
    1db2:	de bf       	out	0x3e, r29	; 62
    1db4:	0f be       	out	0x3f, r0	; 63
    1db6:	cd bf       	out	0x3d, r28	; 61
    1db8:	8a 83       	std	Y+2, r24	; 0x02
    1dba:	6b 83       	std	Y+3, r22	; 0x03
    1dbc:	4c 83       	std	Y+4, r20	; 0x04
	error_state_t Local_ErrorState = R_OK;
    1dbe:	81 e0       	ldi	r24, 0x01	; 1
    1dc0:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8Pin <= DIO_u8PIN7)
    1dc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc4:	88 30       	cpi	r24, 0x08	; 8
    1dc6:	08 f0       	brcs	.+2      	; 0x1dca <MDIO_SetPinValue+0x26>
    1dc8:	ef c0       	rjmp	.+478    	; 0x1fa8 <MDIO_SetPinValue+0x204>
	{
		if (Copy_Value == DIO_u8PIN_LOW)
    1dca:	8c 81       	ldd	r24, Y+4	; 0x04
    1dcc:	88 23       	and	r24, r24
    1dce:	09 f0       	breq	.+2      	; 0x1dd2 <MDIO_SetPinValue+0x2e>
    1dd0:	74 c0       	rjmp	.+232    	; 0x1eba <MDIO_SetPinValue+0x116>
		{
			switch (Copy_u8Port)
    1dd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd4:	28 2f       	mov	r18, r24
    1dd6:	30 e0       	ldi	r19, 0x00	; 0
    1dd8:	38 87       	std	Y+8, r19	; 0x08
    1dda:	2f 83       	std	Y+7, r18	; 0x07
    1ddc:	8f 81       	ldd	r24, Y+7	; 0x07
    1dde:	98 85       	ldd	r25, Y+8	; 0x08
    1de0:	81 30       	cpi	r24, 0x01	; 1
    1de2:	91 05       	cpc	r25, r1
    1de4:	59 f1       	breq	.+86     	; 0x1e3c <MDIO_SetPinValue+0x98>
    1de6:	2f 81       	ldd	r18, Y+7	; 0x07
    1de8:	38 85       	ldd	r19, Y+8	; 0x08
    1dea:	22 30       	cpi	r18, 0x02	; 2
    1dec:	31 05       	cpc	r19, r1
    1dee:	2c f4       	brge	.+10     	; 0x1dfa <MDIO_SetPinValue+0x56>
    1df0:	8f 81       	ldd	r24, Y+7	; 0x07
    1df2:	98 85       	ldd	r25, Y+8	; 0x08
    1df4:	00 97       	sbiw	r24, 0x00	; 0
    1df6:	69 f0       	breq	.+26     	; 0x1e12 <MDIO_SetPinValue+0x6e>
    1df8:	d8 c0       	rjmp	.+432    	; 0x1faa <MDIO_SetPinValue+0x206>
    1dfa:	2f 81       	ldd	r18, Y+7	; 0x07
    1dfc:	38 85       	ldd	r19, Y+8	; 0x08
    1dfe:	22 30       	cpi	r18, 0x02	; 2
    1e00:	31 05       	cpc	r19, r1
    1e02:	89 f1       	breq	.+98     	; 0x1e66 <MDIO_SetPinValue+0xc2>
    1e04:	8f 81       	ldd	r24, Y+7	; 0x07
    1e06:	98 85       	ldd	r25, Y+8	; 0x08
    1e08:	83 30       	cpi	r24, 0x03	; 3
    1e0a:	91 05       	cpc	r25, r1
    1e0c:	09 f4       	brne	.+2      	; 0x1e10 <MDIO_SetPinValue+0x6c>
    1e0e:	40 c0       	rjmp	.+128    	; 0x1e90 <MDIO_SetPinValue+0xec>
    1e10:	cc c0       	rjmp	.+408    	; 0x1faa <MDIO_SetPinValue+0x206>
			{
				case DIO_u8PORTA : CLR_BIT(PORTA,Copy_u8Pin); break;
    1e12:	ab e3       	ldi	r26, 0x3B	; 59
    1e14:	b0 e0       	ldi	r27, 0x00	; 0
    1e16:	eb e3       	ldi	r30, 0x3B	; 59
    1e18:	f0 e0       	ldi	r31, 0x00	; 0
    1e1a:	80 81       	ld	r24, Z
    1e1c:	48 2f       	mov	r20, r24
    1e1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e20:	28 2f       	mov	r18, r24
    1e22:	30 e0       	ldi	r19, 0x00	; 0
    1e24:	81 e0       	ldi	r24, 0x01	; 1
    1e26:	90 e0       	ldi	r25, 0x00	; 0
    1e28:	02 2e       	mov	r0, r18
    1e2a:	02 c0       	rjmp	.+4      	; 0x1e30 <MDIO_SetPinValue+0x8c>
    1e2c:	88 0f       	add	r24, r24
    1e2e:	99 1f       	adc	r25, r25
    1e30:	0a 94       	dec	r0
    1e32:	e2 f7       	brpl	.-8      	; 0x1e2c <MDIO_SetPinValue+0x88>
    1e34:	80 95       	com	r24
    1e36:	84 23       	and	r24, r20
    1e38:	8c 93       	st	X, r24
    1e3a:	b7 c0       	rjmp	.+366    	; 0x1faa <MDIO_SetPinValue+0x206>
				case DIO_u8PORTB : CLR_BIT(PORTB,Copy_u8Pin); break;
    1e3c:	a8 e3       	ldi	r26, 0x38	; 56
    1e3e:	b0 e0       	ldi	r27, 0x00	; 0
    1e40:	e8 e3       	ldi	r30, 0x38	; 56
    1e42:	f0 e0       	ldi	r31, 0x00	; 0
    1e44:	80 81       	ld	r24, Z
    1e46:	48 2f       	mov	r20, r24
    1e48:	8b 81       	ldd	r24, Y+3	; 0x03
    1e4a:	28 2f       	mov	r18, r24
    1e4c:	30 e0       	ldi	r19, 0x00	; 0
    1e4e:	81 e0       	ldi	r24, 0x01	; 1
    1e50:	90 e0       	ldi	r25, 0x00	; 0
    1e52:	02 2e       	mov	r0, r18
    1e54:	02 c0       	rjmp	.+4      	; 0x1e5a <MDIO_SetPinValue+0xb6>
    1e56:	88 0f       	add	r24, r24
    1e58:	99 1f       	adc	r25, r25
    1e5a:	0a 94       	dec	r0
    1e5c:	e2 f7       	brpl	.-8      	; 0x1e56 <MDIO_SetPinValue+0xb2>
    1e5e:	80 95       	com	r24
    1e60:	84 23       	and	r24, r20
    1e62:	8c 93       	st	X, r24
    1e64:	a2 c0       	rjmp	.+324    	; 0x1faa <MDIO_SetPinValue+0x206>
				case DIO_u8PORTC : CLR_BIT(PORTC,Copy_u8Pin); break;
    1e66:	a5 e3       	ldi	r26, 0x35	; 53
    1e68:	b0 e0       	ldi	r27, 0x00	; 0
    1e6a:	e5 e3       	ldi	r30, 0x35	; 53
    1e6c:	f0 e0       	ldi	r31, 0x00	; 0
    1e6e:	80 81       	ld	r24, Z
    1e70:	48 2f       	mov	r20, r24
    1e72:	8b 81       	ldd	r24, Y+3	; 0x03
    1e74:	28 2f       	mov	r18, r24
    1e76:	30 e0       	ldi	r19, 0x00	; 0
    1e78:	81 e0       	ldi	r24, 0x01	; 1
    1e7a:	90 e0       	ldi	r25, 0x00	; 0
    1e7c:	02 2e       	mov	r0, r18
    1e7e:	02 c0       	rjmp	.+4      	; 0x1e84 <MDIO_SetPinValue+0xe0>
    1e80:	88 0f       	add	r24, r24
    1e82:	99 1f       	adc	r25, r25
    1e84:	0a 94       	dec	r0
    1e86:	e2 f7       	brpl	.-8      	; 0x1e80 <MDIO_SetPinValue+0xdc>
    1e88:	80 95       	com	r24
    1e8a:	84 23       	and	r24, r20
    1e8c:	8c 93       	st	X, r24
    1e8e:	8d c0       	rjmp	.+282    	; 0x1faa <MDIO_SetPinValue+0x206>
				case DIO_u8PORTD : CLR_BIT(PORTD,Copy_u8Pin); break;
    1e90:	a2 e3       	ldi	r26, 0x32	; 50
    1e92:	b0 e0       	ldi	r27, 0x00	; 0
    1e94:	e2 e3       	ldi	r30, 0x32	; 50
    1e96:	f0 e0       	ldi	r31, 0x00	; 0
    1e98:	80 81       	ld	r24, Z
    1e9a:	48 2f       	mov	r20, r24
    1e9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e9e:	28 2f       	mov	r18, r24
    1ea0:	30 e0       	ldi	r19, 0x00	; 0
    1ea2:	81 e0       	ldi	r24, 0x01	; 1
    1ea4:	90 e0       	ldi	r25, 0x00	; 0
    1ea6:	02 2e       	mov	r0, r18
    1ea8:	02 c0       	rjmp	.+4      	; 0x1eae <MDIO_SetPinValue+0x10a>
    1eaa:	88 0f       	add	r24, r24
    1eac:	99 1f       	adc	r25, r25
    1eae:	0a 94       	dec	r0
    1eb0:	e2 f7       	brpl	.-8      	; 0x1eaa <MDIO_SetPinValue+0x106>
    1eb2:	80 95       	com	r24
    1eb4:	84 23       	and	r24, r20
    1eb6:	8c 93       	st	X, r24
    1eb8:	78 c0       	rjmp	.+240    	; 0x1faa <MDIO_SetPinValue+0x206>
			}

		}
		else if (Copy_Value == DIO_u8PIN_HIGH)
    1eba:	8c 81       	ldd	r24, Y+4	; 0x04
    1ebc:	81 30       	cpi	r24, 0x01	; 1
    1ebe:	09 f0       	breq	.+2      	; 0x1ec2 <MDIO_SetPinValue+0x11e>
    1ec0:	71 c0       	rjmp	.+226    	; 0x1fa4 <MDIO_SetPinValue+0x200>
		{
			switch (Copy_u8Port)
    1ec2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec4:	28 2f       	mov	r18, r24
    1ec6:	30 e0       	ldi	r19, 0x00	; 0
    1ec8:	3e 83       	std	Y+6, r19	; 0x06
    1eca:	2d 83       	std	Y+5, r18	; 0x05
    1ecc:	8d 81       	ldd	r24, Y+5	; 0x05
    1ece:	9e 81       	ldd	r25, Y+6	; 0x06
    1ed0:	81 30       	cpi	r24, 0x01	; 1
    1ed2:	91 05       	cpc	r25, r1
    1ed4:	49 f1       	breq	.+82     	; 0x1f28 <MDIO_SetPinValue+0x184>
    1ed6:	2d 81       	ldd	r18, Y+5	; 0x05
    1ed8:	3e 81       	ldd	r19, Y+6	; 0x06
    1eda:	22 30       	cpi	r18, 0x02	; 2
    1edc:	31 05       	cpc	r19, r1
    1ede:	2c f4       	brge	.+10     	; 0x1eea <MDIO_SetPinValue+0x146>
    1ee0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ee2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ee4:	00 97       	sbiw	r24, 0x00	; 0
    1ee6:	61 f0       	breq	.+24     	; 0x1f00 <MDIO_SetPinValue+0x15c>
    1ee8:	5b c0       	rjmp	.+182    	; 0x1fa0 <MDIO_SetPinValue+0x1fc>
    1eea:	2d 81       	ldd	r18, Y+5	; 0x05
    1eec:	3e 81       	ldd	r19, Y+6	; 0x06
    1eee:	22 30       	cpi	r18, 0x02	; 2
    1ef0:	31 05       	cpc	r19, r1
    1ef2:	71 f1       	breq	.+92     	; 0x1f50 <MDIO_SetPinValue+0x1ac>
    1ef4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ef6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ef8:	83 30       	cpi	r24, 0x03	; 3
    1efa:	91 05       	cpc	r25, r1
    1efc:	e9 f1       	breq	.+122    	; 0x1f78 <MDIO_SetPinValue+0x1d4>
    1efe:	50 c0       	rjmp	.+160    	; 0x1fa0 <MDIO_SetPinValue+0x1fc>
			{
				case DIO_u8PORTA : SET_BIT(PORTA,Copy_u8Pin); break;
    1f00:	ab e3       	ldi	r26, 0x3B	; 59
    1f02:	b0 e0       	ldi	r27, 0x00	; 0
    1f04:	eb e3       	ldi	r30, 0x3B	; 59
    1f06:	f0 e0       	ldi	r31, 0x00	; 0
    1f08:	80 81       	ld	r24, Z
    1f0a:	48 2f       	mov	r20, r24
    1f0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f0e:	28 2f       	mov	r18, r24
    1f10:	30 e0       	ldi	r19, 0x00	; 0
    1f12:	81 e0       	ldi	r24, 0x01	; 1
    1f14:	90 e0       	ldi	r25, 0x00	; 0
    1f16:	02 2e       	mov	r0, r18
    1f18:	02 c0       	rjmp	.+4      	; 0x1f1e <MDIO_SetPinValue+0x17a>
    1f1a:	88 0f       	add	r24, r24
    1f1c:	99 1f       	adc	r25, r25
    1f1e:	0a 94       	dec	r0
    1f20:	e2 f7       	brpl	.-8      	; 0x1f1a <MDIO_SetPinValue+0x176>
    1f22:	84 2b       	or	r24, r20
    1f24:	8c 93       	st	X, r24
    1f26:	41 c0       	rjmp	.+130    	; 0x1faa <MDIO_SetPinValue+0x206>
				case DIO_u8PORTB : SET_BIT(PORTB,Copy_u8Pin); break;
    1f28:	a8 e3       	ldi	r26, 0x38	; 56
    1f2a:	b0 e0       	ldi	r27, 0x00	; 0
    1f2c:	e8 e3       	ldi	r30, 0x38	; 56
    1f2e:	f0 e0       	ldi	r31, 0x00	; 0
    1f30:	80 81       	ld	r24, Z
    1f32:	48 2f       	mov	r20, r24
    1f34:	8b 81       	ldd	r24, Y+3	; 0x03
    1f36:	28 2f       	mov	r18, r24
    1f38:	30 e0       	ldi	r19, 0x00	; 0
    1f3a:	81 e0       	ldi	r24, 0x01	; 1
    1f3c:	90 e0       	ldi	r25, 0x00	; 0
    1f3e:	02 2e       	mov	r0, r18
    1f40:	02 c0       	rjmp	.+4      	; 0x1f46 <MDIO_SetPinValue+0x1a2>
    1f42:	88 0f       	add	r24, r24
    1f44:	99 1f       	adc	r25, r25
    1f46:	0a 94       	dec	r0
    1f48:	e2 f7       	brpl	.-8      	; 0x1f42 <MDIO_SetPinValue+0x19e>
    1f4a:	84 2b       	or	r24, r20
    1f4c:	8c 93       	st	X, r24
    1f4e:	2d c0       	rjmp	.+90     	; 0x1faa <MDIO_SetPinValue+0x206>
				case DIO_u8PORTC : SET_BIT(PORTC,Copy_u8Pin); break;
    1f50:	a5 e3       	ldi	r26, 0x35	; 53
    1f52:	b0 e0       	ldi	r27, 0x00	; 0
    1f54:	e5 e3       	ldi	r30, 0x35	; 53
    1f56:	f0 e0       	ldi	r31, 0x00	; 0
    1f58:	80 81       	ld	r24, Z
    1f5a:	48 2f       	mov	r20, r24
    1f5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f5e:	28 2f       	mov	r18, r24
    1f60:	30 e0       	ldi	r19, 0x00	; 0
    1f62:	81 e0       	ldi	r24, 0x01	; 1
    1f64:	90 e0       	ldi	r25, 0x00	; 0
    1f66:	02 2e       	mov	r0, r18
    1f68:	02 c0       	rjmp	.+4      	; 0x1f6e <MDIO_SetPinValue+0x1ca>
    1f6a:	88 0f       	add	r24, r24
    1f6c:	99 1f       	adc	r25, r25
    1f6e:	0a 94       	dec	r0
    1f70:	e2 f7       	brpl	.-8      	; 0x1f6a <MDIO_SetPinValue+0x1c6>
    1f72:	84 2b       	or	r24, r20
    1f74:	8c 93       	st	X, r24
    1f76:	19 c0       	rjmp	.+50     	; 0x1faa <MDIO_SetPinValue+0x206>
				case DIO_u8PORTD : SET_BIT(PORTD,Copy_u8Pin); break;
    1f78:	a2 e3       	ldi	r26, 0x32	; 50
    1f7a:	b0 e0       	ldi	r27, 0x00	; 0
    1f7c:	e2 e3       	ldi	r30, 0x32	; 50
    1f7e:	f0 e0       	ldi	r31, 0x00	; 0
    1f80:	80 81       	ld	r24, Z
    1f82:	48 2f       	mov	r20, r24
    1f84:	8b 81       	ldd	r24, Y+3	; 0x03
    1f86:	28 2f       	mov	r18, r24
    1f88:	30 e0       	ldi	r19, 0x00	; 0
    1f8a:	81 e0       	ldi	r24, 0x01	; 1
    1f8c:	90 e0       	ldi	r25, 0x00	; 0
    1f8e:	02 2e       	mov	r0, r18
    1f90:	02 c0       	rjmp	.+4      	; 0x1f96 <MDIO_SetPinValue+0x1f2>
    1f92:	88 0f       	add	r24, r24
    1f94:	99 1f       	adc	r25, r25
    1f96:	0a 94       	dec	r0
    1f98:	e2 f7       	brpl	.-8      	; 0x1f92 <MDIO_SetPinValue+0x1ee>
    1f9a:	84 2b       	or	r24, r20
    1f9c:	8c 93       	st	X, r24
    1f9e:	05 c0       	rjmp	.+10     	; 0x1faa <MDIO_SetPinValue+0x206>
		    	default: Local_ErrorState = R_NOK; break;
    1fa0:	19 82       	std	Y+1, r1	; 0x01
    1fa2:	03 c0       	rjmp	.+6      	; 0x1faa <MDIO_SetPinValue+0x206>
			}

		}
		else
		{
			Local_ErrorState = R_NOK;
    1fa4:	19 82       	std	Y+1, r1	; 0x01
    1fa6:	01 c0       	rjmp	.+2      	; 0x1faa <MDIO_SetPinValue+0x206>
		}
	}
	else
	{
		Local_ErrorState = R_NOK;
    1fa8:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_ErrorState;
    1faa:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fac:	28 96       	adiw	r28, 0x08	; 8
    1fae:	0f b6       	in	r0, 0x3f	; 63
    1fb0:	f8 94       	cli
    1fb2:	de bf       	out	0x3e, r29	; 62
    1fb4:	0f be       	out	0x3f, r0	; 63
    1fb6:	cd bf       	out	0x3d, r28	; 61
    1fb8:	cf 91       	pop	r28
    1fba:	df 91       	pop	r29
    1fbc:	08 95       	ret

00001fbe <MDIO_SetPortValue>:


error_state_t	MDIO_SetPortValue (dio_u8port_t Copy_u8Port, dio_u8portvalue_t Copy_Value)
{
    1fbe:	df 93       	push	r29
    1fc0:	cf 93       	push	r28
    1fc2:	00 d0       	rcall	.+0      	; 0x1fc4 <MDIO_SetPortValue+0x6>
    1fc4:	00 d0       	rcall	.+0      	; 0x1fc6 <MDIO_SetPortValue+0x8>
    1fc6:	0f 92       	push	r0
    1fc8:	cd b7       	in	r28, 0x3d	; 61
    1fca:	de b7       	in	r29, 0x3e	; 62
    1fcc:	8a 83       	std	Y+2, r24	; 0x02
    1fce:	6b 83       	std	Y+3, r22	; 0x03
	error_state_t Local_ErrorState = R_OK;
    1fd0:	81 e0       	ldi	r24, 0x01	; 1
    1fd2:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8Port <= DIO_u8PORTD)
    1fd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd6:	84 30       	cpi	r24, 0x04	; 4
    1fd8:	a8 f5       	brcc	.+106    	; 0x2044 <MDIO_SetPortValue+0x86>
	{
		switch (Copy_u8Port)
    1fda:	8a 81       	ldd	r24, Y+2	; 0x02
    1fdc:	28 2f       	mov	r18, r24
    1fde:	30 e0       	ldi	r19, 0x00	; 0
    1fe0:	3d 83       	std	Y+5, r19	; 0x05
    1fe2:	2c 83       	std	Y+4, r18	; 0x04
    1fe4:	8c 81       	ldd	r24, Y+4	; 0x04
    1fe6:	9d 81       	ldd	r25, Y+5	; 0x05
    1fe8:	81 30       	cpi	r24, 0x01	; 1
    1fea:	91 05       	cpc	r25, r1
    1fec:	d1 f0       	breq	.+52     	; 0x2022 <MDIO_SetPortValue+0x64>
    1fee:	2c 81       	ldd	r18, Y+4	; 0x04
    1ff0:	3d 81       	ldd	r19, Y+5	; 0x05
    1ff2:	22 30       	cpi	r18, 0x02	; 2
    1ff4:	31 05       	cpc	r19, r1
    1ff6:	2c f4       	brge	.+10     	; 0x2002 <MDIO_SetPortValue+0x44>
    1ff8:	8c 81       	ldd	r24, Y+4	; 0x04
    1ffa:	9d 81       	ldd	r25, Y+5	; 0x05
    1ffc:	00 97       	sbiw	r24, 0x00	; 0
    1ffe:	61 f0       	breq	.+24     	; 0x2018 <MDIO_SetPortValue+0x5a>
    2000:	1f c0       	rjmp	.+62     	; 0x2040 <MDIO_SetPortValue+0x82>
    2002:	2c 81       	ldd	r18, Y+4	; 0x04
    2004:	3d 81       	ldd	r19, Y+5	; 0x05
    2006:	22 30       	cpi	r18, 0x02	; 2
    2008:	31 05       	cpc	r19, r1
    200a:	81 f0       	breq	.+32     	; 0x202c <MDIO_SetPortValue+0x6e>
    200c:	8c 81       	ldd	r24, Y+4	; 0x04
    200e:	9d 81       	ldd	r25, Y+5	; 0x05
    2010:	83 30       	cpi	r24, 0x03	; 3
    2012:	91 05       	cpc	r25, r1
    2014:	81 f0       	breq	.+32     	; 0x2036 <MDIO_SetPortValue+0x78>
    2016:	14 c0       	rjmp	.+40     	; 0x2040 <MDIO_SetPortValue+0x82>
		{
			case DIO_u8PORTA : PORTA = Copy_Value; break;
    2018:	eb e3       	ldi	r30, 0x3B	; 59
    201a:	f0 e0       	ldi	r31, 0x00	; 0
    201c:	8b 81       	ldd	r24, Y+3	; 0x03
    201e:	80 83       	st	Z, r24
    2020:	12 c0       	rjmp	.+36     	; 0x2046 <MDIO_SetPortValue+0x88>
			case DIO_u8PORTB : PORTB = Copy_Value; break;
    2022:	e8 e3       	ldi	r30, 0x38	; 56
    2024:	f0 e0       	ldi	r31, 0x00	; 0
    2026:	8b 81       	ldd	r24, Y+3	; 0x03
    2028:	80 83       	st	Z, r24
    202a:	0d c0       	rjmp	.+26     	; 0x2046 <MDIO_SetPortValue+0x88>
			case DIO_u8PORTC : PORTC = Copy_Value; break;
    202c:	e5 e3       	ldi	r30, 0x35	; 53
    202e:	f0 e0       	ldi	r31, 0x00	; 0
    2030:	8b 81       	ldd	r24, Y+3	; 0x03
    2032:	80 83       	st	Z, r24
    2034:	08 c0       	rjmp	.+16     	; 0x2046 <MDIO_SetPortValue+0x88>
			case DIO_u8PORTD : PORTD = Copy_Value; break;
    2036:	e2 e3       	ldi	r30, 0x32	; 50
    2038:	f0 e0       	ldi	r31, 0x00	; 0
    203a:	8b 81       	ldd	r24, Y+3	; 0x03
    203c:	80 83       	st	Z, r24
    203e:	03 c0       	rjmp	.+6      	; 0x2046 <MDIO_SetPortValue+0x88>
			default: Local_ErrorState = R_NOK; break;
    2040:	19 82       	std	Y+1, r1	; 0x01
    2042:	01 c0       	rjmp	.+2      	; 0x2046 <MDIO_SetPortValue+0x88>
		}
	}
	else
	{
		Local_ErrorState = R_NOK;
    2044:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_ErrorState;
    2046:	89 81       	ldd	r24, Y+1	; 0x01
}
    2048:	0f 90       	pop	r0
    204a:	0f 90       	pop	r0
    204c:	0f 90       	pop	r0
    204e:	0f 90       	pop	r0
    2050:	0f 90       	pop	r0
    2052:	cf 91       	pop	r28
    2054:	df 91       	pop	r29
    2056:	08 95       	ret

00002058 <MDIO_GetPinValue>:


error_state_t	MDIO_GetPinValue (dio_u8port_t Copy_u8Port, dio_u8pin_t Copy_u8Pin, u8* Copy_pu8Value)
{
    2058:	df 93       	push	r29
    205a:	cf 93       	push	r28
    205c:	cd b7       	in	r28, 0x3d	; 61
    205e:	de b7       	in	r29, 0x3e	; 62
    2060:	27 97       	sbiw	r28, 0x07	; 7
    2062:	0f b6       	in	r0, 0x3f	; 63
    2064:	f8 94       	cli
    2066:	de bf       	out	0x3e, r29	; 62
    2068:	0f be       	out	0x3f, r0	; 63
    206a:	cd bf       	out	0x3d, r28	; 61
    206c:	8a 83       	std	Y+2, r24	; 0x02
    206e:	6b 83       	std	Y+3, r22	; 0x03
    2070:	5d 83       	std	Y+5, r21	; 0x05
    2072:	4c 83       	std	Y+4, r20	; 0x04
	error_state_t Local_ErrorState = R_OK;
    2074:	81 e0       	ldi	r24, 0x01	; 1
    2076:	89 83       	std	Y+1, r24	; 0x01

	if((Copy_pu8Value != NULL) && (Copy_u8Pin <= DIO_u8PIN7))
    2078:	8c 81       	ldd	r24, Y+4	; 0x04
    207a:	9d 81       	ldd	r25, Y+5	; 0x05
    207c:	00 97       	sbiw	r24, 0x00	; 0
    207e:	09 f4       	brne	.+2      	; 0x2082 <MDIO_GetPinValue+0x2a>
    2080:	77 c0       	rjmp	.+238    	; 0x2170 <MDIO_GetPinValue+0x118>
    2082:	8b 81       	ldd	r24, Y+3	; 0x03
    2084:	88 30       	cpi	r24, 0x08	; 8
    2086:	08 f0       	brcs	.+2      	; 0x208a <MDIO_GetPinValue+0x32>
    2088:	73 c0       	rjmp	.+230    	; 0x2170 <MDIO_GetPinValue+0x118>
	{
		switch (Copy_u8Port)
    208a:	8a 81       	ldd	r24, Y+2	; 0x02
    208c:	28 2f       	mov	r18, r24
    208e:	30 e0       	ldi	r19, 0x00	; 0
    2090:	3f 83       	std	Y+7, r19	; 0x07
    2092:	2e 83       	std	Y+6, r18	; 0x06
    2094:	4e 81       	ldd	r20, Y+6	; 0x06
    2096:	5f 81       	ldd	r21, Y+7	; 0x07
    2098:	41 30       	cpi	r20, 0x01	; 1
    209a:	51 05       	cpc	r21, r1
    209c:	59 f1       	breq	.+86     	; 0x20f4 <MDIO_GetPinValue+0x9c>
    209e:	8e 81       	ldd	r24, Y+6	; 0x06
    20a0:	9f 81       	ldd	r25, Y+7	; 0x07
    20a2:	82 30       	cpi	r24, 0x02	; 2
    20a4:	91 05       	cpc	r25, r1
    20a6:	34 f4       	brge	.+12     	; 0x20b4 <MDIO_GetPinValue+0x5c>
    20a8:	2e 81       	ldd	r18, Y+6	; 0x06
    20aa:	3f 81       	ldd	r19, Y+7	; 0x07
    20ac:	21 15       	cp	r18, r1
    20ae:	31 05       	cpc	r19, r1
    20b0:	69 f0       	breq	.+26     	; 0x20cc <MDIO_GetPinValue+0x74>
    20b2:	5c c0       	rjmp	.+184    	; 0x216c <MDIO_GetPinValue+0x114>
    20b4:	4e 81       	ldd	r20, Y+6	; 0x06
    20b6:	5f 81       	ldd	r21, Y+7	; 0x07
    20b8:	42 30       	cpi	r20, 0x02	; 2
    20ba:	51 05       	cpc	r21, r1
    20bc:	79 f1       	breq	.+94     	; 0x211c <MDIO_GetPinValue+0xc4>
    20be:	8e 81       	ldd	r24, Y+6	; 0x06
    20c0:	9f 81       	ldd	r25, Y+7	; 0x07
    20c2:	83 30       	cpi	r24, 0x03	; 3
    20c4:	91 05       	cpc	r25, r1
    20c6:	09 f4       	brne	.+2      	; 0x20ca <MDIO_GetPinValue+0x72>
    20c8:	3d c0       	rjmp	.+122    	; 0x2144 <MDIO_GetPinValue+0xec>
    20ca:	50 c0       	rjmp	.+160    	; 0x216c <MDIO_GetPinValue+0x114>
		{
			case DIO_u8PORTA : * Copy_pu8Value = GET_BIT(PINA, Copy_u8Pin); break;
    20cc:	e9 e3       	ldi	r30, 0x39	; 57
    20ce:	f0 e0       	ldi	r31, 0x00	; 0
    20d0:	80 81       	ld	r24, Z
    20d2:	28 2f       	mov	r18, r24
    20d4:	30 e0       	ldi	r19, 0x00	; 0
    20d6:	8b 81       	ldd	r24, Y+3	; 0x03
    20d8:	88 2f       	mov	r24, r24
    20da:	90 e0       	ldi	r25, 0x00	; 0
    20dc:	a9 01       	movw	r20, r18
    20de:	02 c0       	rjmp	.+4      	; 0x20e4 <MDIO_GetPinValue+0x8c>
    20e0:	55 95       	asr	r21
    20e2:	47 95       	ror	r20
    20e4:	8a 95       	dec	r24
    20e6:	e2 f7       	brpl	.-8      	; 0x20e0 <MDIO_GetPinValue+0x88>
    20e8:	ca 01       	movw	r24, r20
    20ea:	81 70       	andi	r24, 0x01	; 1
    20ec:	ec 81       	ldd	r30, Y+4	; 0x04
    20ee:	fd 81       	ldd	r31, Y+5	; 0x05
    20f0:	80 83       	st	Z, r24
    20f2:	3f c0       	rjmp	.+126    	; 0x2172 <MDIO_GetPinValue+0x11a>
			case DIO_u8PORTB : * Copy_pu8Value = GET_BIT(PINB, Copy_u8Pin); break;
    20f4:	e6 e3       	ldi	r30, 0x36	; 54
    20f6:	f0 e0       	ldi	r31, 0x00	; 0
    20f8:	80 81       	ld	r24, Z
    20fa:	28 2f       	mov	r18, r24
    20fc:	30 e0       	ldi	r19, 0x00	; 0
    20fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2100:	88 2f       	mov	r24, r24
    2102:	90 e0       	ldi	r25, 0x00	; 0
    2104:	a9 01       	movw	r20, r18
    2106:	02 c0       	rjmp	.+4      	; 0x210c <MDIO_GetPinValue+0xb4>
    2108:	55 95       	asr	r21
    210a:	47 95       	ror	r20
    210c:	8a 95       	dec	r24
    210e:	e2 f7       	brpl	.-8      	; 0x2108 <MDIO_GetPinValue+0xb0>
    2110:	ca 01       	movw	r24, r20
    2112:	81 70       	andi	r24, 0x01	; 1
    2114:	ec 81       	ldd	r30, Y+4	; 0x04
    2116:	fd 81       	ldd	r31, Y+5	; 0x05
    2118:	80 83       	st	Z, r24
    211a:	2b c0       	rjmp	.+86     	; 0x2172 <MDIO_GetPinValue+0x11a>
			case DIO_u8PORTC : * Copy_pu8Value = GET_BIT(PINC, Copy_u8Pin); break;
    211c:	e3 e3       	ldi	r30, 0x33	; 51
    211e:	f0 e0       	ldi	r31, 0x00	; 0
    2120:	80 81       	ld	r24, Z
    2122:	28 2f       	mov	r18, r24
    2124:	30 e0       	ldi	r19, 0x00	; 0
    2126:	8b 81       	ldd	r24, Y+3	; 0x03
    2128:	88 2f       	mov	r24, r24
    212a:	90 e0       	ldi	r25, 0x00	; 0
    212c:	a9 01       	movw	r20, r18
    212e:	02 c0       	rjmp	.+4      	; 0x2134 <MDIO_GetPinValue+0xdc>
    2130:	55 95       	asr	r21
    2132:	47 95       	ror	r20
    2134:	8a 95       	dec	r24
    2136:	e2 f7       	brpl	.-8      	; 0x2130 <MDIO_GetPinValue+0xd8>
    2138:	ca 01       	movw	r24, r20
    213a:	81 70       	andi	r24, 0x01	; 1
    213c:	ec 81       	ldd	r30, Y+4	; 0x04
    213e:	fd 81       	ldd	r31, Y+5	; 0x05
    2140:	80 83       	st	Z, r24
    2142:	17 c0       	rjmp	.+46     	; 0x2172 <MDIO_GetPinValue+0x11a>
			case DIO_u8PORTD : * Copy_pu8Value = GET_BIT(PIND, Copy_u8Pin); break;
    2144:	e0 e3       	ldi	r30, 0x30	; 48
    2146:	f0 e0       	ldi	r31, 0x00	; 0
    2148:	80 81       	ld	r24, Z
    214a:	28 2f       	mov	r18, r24
    214c:	30 e0       	ldi	r19, 0x00	; 0
    214e:	8b 81       	ldd	r24, Y+3	; 0x03
    2150:	88 2f       	mov	r24, r24
    2152:	90 e0       	ldi	r25, 0x00	; 0
    2154:	a9 01       	movw	r20, r18
    2156:	02 c0       	rjmp	.+4      	; 0x215c <MDIO_GetPinValue+0x104>
    2158:	55 95       	asr	r21
    215a:	47 95       	ror	r20
    215c:	8a 95       	dec	r24
    215e:	e2 f7       	brpl	.-8      	; 0x2158 <MDIO_GetPinValue+0x100>
    2160:	ca 01       	movw	r24, r20
    2162:	81 70       	andi	r24, 0x01	; 1
    2164:	ec 81       	ldd	r30, Y+4	; 0x04
    2166:	fd 81       	ldd	r31, Y+5	; 0x05
    2168:	80 83       	st	Z, r24
    216a:	03 c0       	rjmp	.+6      	; 0x2172 <MDIO_GetPinValue+0x11a>
			default: Local_ErrorState = R_NOK; break;
    216c:	19 82       	std	Y+1, r1	; 0x01
    216e:	01 c0       	rjmp	.+2      	; 0x2172 <MDIO_GetPinValue+0x11a>
		}
	}
	else
	{
		Local_ErrorState = R_NOK;
    2170:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_ErrorState;
    2172:	89 81       	ldd	r24, Y+1	; 0x01
}
    2174:	27 96       	adiw	r28, 0x07	; 7
    2176:	0f b6       	in	r0, 0x3f	; 63
    2178:	f8 94       	cli
    217a:	de bf       	out	0x3e, r29	; 62
    217c:	0f be       	out	0x3f, r0	; 63
    217e:	cd bf       	out	0x3d, r28	; 61
    2180:	cf 91       	pop	r28
    2182:	df 91       	pop	r29
    2184:	08 95       	ret

00002186 <MDIO_GetPortValue>:
error_state_t	MDIO_GetPortValue (dio_u8port_t Copy_u8Port, u8* Copy_pu8Value)
{
    2186:	df 93       	push	r29
    2188:	cf 93       	push	r28
    218a:	00 d0       	rcall	.+0      	; 0x218c <MDIO_GetPortValue+0x6>
    218c:	00 d0       	rcall	.+0      	; 0x218e <MDIO_GetPortValue+0x8>
    218e:	00 d0       	rcall	.+0      	; 0x2190 <MDIO_GetPortValue+0xa>
    2190:	cd b7       	in	r28, 0x3d	; 61
    2192:	de b7       	in	r29, 0x3e	; 62
    2194:	8a 83       	std	Y+2, r24	; 0x02
    2196:	7c 83       	std	Y+4, r23	; 0x04
    2198:	6b 83       	std	Y+3, r22	; 0x03
	error_state_t Local_ErrorState = R_OK;
    219a:	81 e0       	ldi	r24, 0x01	; 1
    219c:	89 83       	std	Y+1, r24	; 0x01

	if((Copy_pu8Value != NULL) && (Copy_u8Port <= DIO_u8PORTD))
    219e:	8b 81       	ldd	r24, Y+3	; 0x03
    21a0:	9c 81       	ldd	r25, Y+4	; 0x04
    21a2:	00 97       	sbiw	r24, 0x00	; 0
    21a4:	09 f4       	brne	.+2      	; 0x21a8 <MDIO_GetPortValue+0x22>
    21a6:	40 c0       	rjmp	.+128    	; 0x2228 <MDIO_GetPortValue+0xa2>
    21a8:	8a 81       	ldd	r24, Y+2	; 0x02
    21aa:	84 30       	cpi	r24, 0x04	; 4
    21ac:	e8 f5       	brcc	.+122    	; 0x2228 <MDIO_GetPortValue+0xa2>
	{
		switch (Copy_u8Port)
    21ae:	8a 81       	ldd	r24, Y+2	; 0x02
    21b0:	28 2f       	mov	r18, r24
    21b2:	30 e0       	ldi	r19, 0x00	; 0
    21b4:	3e 83       	std	Y+6, r19	; 0x06
    21b6:	2d 83       	std	Y+5, r18	; 0x05
    21b8:	8d 81       	ldd	r24, Y+5	; 0x05
    21ba:	9e 81       	ldd	r25, Y+6	; 0x06
    21bc:	81 30       	cpi	r24, 0x01	; 1
    21be:	91 05       	cpc	r25, r1
    21c0:	e1 f0       	breq	.+56     	; 0x21fa <MDIO_GetPortValue+0x74>
    21c2:	2d 81       	ldd	r18, Y+5	; 0x05
    21c4:	3e 81       	ldd	r19, Y+6	; 0x06
    21c6:	22 30       	cpi	r18, 0x02	; 2
    21c8:	31 05       	cpc	r19, r1
    21ca:	2c f4       	brge	.+10     	; 0x21d6 <MDIO_GetPortValue+0x50>
    21cc:	8d 81       	ldd	r24, Y+5	; 0x05
    21ce:	9e 81       	ldd	r25, Y+6	; 0x06
    21d0:	00 97       	sbiw	r24, 0x00	; 0
    21d2:	61 f0       	breq	.+24     	; 0x21ec <MDIO_GetPortValue+0x66>
    21d4:	27 c0       	rjmp	.+78     	; 0x2224 <MDIO_GetPortValue+0x9e>
    21d6:	2d 81       	ldd	r18, Y+5	; 0x05
    21d8:	3e 81       	ldd	r19, Y+6	; 0x06
    21da:	22 30       	cpi	r18, 0x02	; 2
    21dc:	31 05       	cpc	r19, r1
    21de:	a1 f0       	breq	.+40     	; 0x2208 <MDIO_GetPortValue+0x82>
    21e0:	8d 81       	ldd	r24, Y+5	; 0x05
    21e2:	9e 81       	ldd	r25, Y+6	; 0x06
    21e4:	83 30       	cpi	r24, 0x03	; 3
    21e6:	91 05       	cpc	r25, r1
    21e8:	b1 f0       	breq	.+44     	; 0x2216 <MDIO_GetPortValue+0x90>
    21ea:	1c c0       	rjmp	.+56     	; 0x2224 <MDIO_GetPortValue+0x9e>
		{
			case DIO_u8PORTA : * Copy_pu8Value = PINA; break;
    21ec:	e9 e3       	ldi	r30, 0x39	; 57
    21ee:	f0 e0       	ldi	r31, 0x00	; 0
    21f0:	80 81       	ld	r24, Z
    21f2:	eb 81       	ldd	r30, Y+3	; 0x03
    21f4:	fc 81       	ldd	r31, Y+4	; 0x04
    21f6:	80 83       	st	Z, r24
    21f8:	18 c0       	rjmp	.+48     	; 0x222a <MDIO_GetPortValue+0xa4>
			case DIO_u8PORTB : * Copy_pu8Value = PINB; break;
    21fa:	e6 e3       	ldi	r30, 0x36	; 54
    21fc:	f0 e0       	ldi	r31, 0x00	; 0
    21fe:	80 81       	ld	r24, Z
    2200:	eb 81       	ldd	r30, Y+3	; 0x03
    2202:	fc 81       	ldd	r31, Y+4	; 0x04
    2204:	80 83       	st	Z, r24
    2206:	11 c0       	rjmp	.+34     	; 0x222a <MDIO_GetPortValue+0xa4>
			case DIO_u8PORTC : * Copy_pu8Value = PINC; break;
    2208:	e3 e3       	ldi	r30, 0x33	; 51
    220a:	f0 e0       	ldi	r31, 0x00	; 0
    220c:	80 81       	ld	r24, Z
    220e:	eb 81       	ldd	r30, Y+3	; 0x03
    2210:	fc 81       	ldd	r31, Y+4	; 0x04
    2212:	80 83       	st	Z, r24
    2214:	0a c0       	rjmp	.+20     	; 0x222a <MDIO_GetPortValue+0xa4>
			case DIO_u8PORTD : * Copy_pu8Value = PIND; break;
    2216:	e0 e3       	ldi	r30, 0x30	; 48
    2218:	f0 e0       	ldi	r31, 0x00	; 0
    221a:	80 81       	ld	r24, Z
    221c:	eb 81       	ldd	r30, Y+3	; 0x03
    221e:	fc 81       	ldd	r31, Y+4	; 0x04
    2220:	80 83       	st	Z, r24
    2222:	03 c0       	rjmp	.+6      	; 0x222a <MDIO_GetPortValue+0xa4>
			default: Local_ErrorState = R_NOK; break;
    2224:	19 82       	std	Y+1, r1	; 0x01
    2226:	01 c0       	rjmp	.+2      	; 0x222a <MDIO_GetPortValue+0xa4>
		}
	}
	else
	{
		Local_ErrorState = R_NOK;
    2228:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_ErrorState;
    222a:	89 81       	ldd	r24, Y+1	; 0x01
}
    222c:	26 96       	adiw	r28, 0x06	; 6
    222e:	0f b6       	in	r0, 0x3f	; 63
    2230:	f8 94       	cli
    2232:	de bf       	out	0x3e, r29	; 62
    2234:	0f be       	out	0x3f, r0	; 63
    2236:	cd bf       	out	0x3d, r28	; 61
    2238:	cf 91       	pop	r28
    223a:	df 91       	pop	r29
    223c:	08 95       	ret

0000223e <MDIO_AndValueWithPort>:
error_state_t	MDIO_AndValueWithPort (dio_u8port_t Copy_u8Port, u8 Copy_u8Value, u8 *Copy_u8Result)
{
    223e:	df 93       	push	r29
    2240:	cf 93       	push	r28
    2242:	cd b7       	in	r28, 0x3d	; 61
    2244:	de b7       	in	r29, 0x3e	; 62
    2246:	27 97       	sbiw	r28, 0x07	; 7
    2248:	0f b6       	in	r0, 0x3f	; 63
    224a:	f8 94       	cli
    224c:	de bf       	out	0x3e, r29	; 62
    224e:	0f be       	out	0x3f, r0	; 63
    2250:	cd bf       	out	0x3d, r28	; 61
    2252:	8a 83       	std	Y+2, r24	; 0x02
    2254:	6b 83       	std	Y+3, r22	; 0x03
    2256:	5d 83       	std	Y+5, r21	; 0x05
    2258:	4c 83       	std	Y+4, r20	; 0x04
	error_state_t Local_ErrorState = R_OK;
    225a:	81 e0       	ldi	r24, 0x01	; 1
    225c:	89 83       	std	Y+1, r24	; 0x01

	if((Copy_u8Result != NULL) && (Copy_u8Port <= DIO_u8PORTD))
    225e:	8c 81       	ldd	r24, Y+4	; 0x04
    2260:	9d 81       	ldd	r25, Y+5	; 0x05
    2262:	00 97       	sbiw	r24, 0x00	; 0
    2264:	09 f4       	brne	.+2      	; 0x2268 <MDIO_AndValueWithPort+0x2a>
    2266:	49 c0       	rjmp	.+146    	; 0x22fa <MDIO_AndValueWithPort+0xbc>
    2268:	8a 81       	ldd	r24, Y+2	; 0x02
    226a:	84 30       	cpi	r24, 0x04	; 4
    226c:	08 f0       	brcs	.+2      	; 0x2270 <MDIO_AndValueWithPort+0x32>
    226e:	45 c0       	rjmp	.+138    	; 0x22fa <MDIO_AndValueWithPort+0xbc>
	{
		switch (Copy_u8Port)
    2270:	8a 81       	ldd	r24, Y+2	; 0x02
    2272:	28 2f       	mov	r18, r24
    2274:	30 e0       	ldi	r19, 0x00	; 0
    2276:	3f 83       	std	Y+7, r19	; 0x07
    2278:	2e 83       	std	Y+6, r18	; 0x06
    227a:	8e 81       	ldd	r24, Y+6	; 0x06
    227c:	9f 81       	ldd	r25, Y+7	; 0x07
    227e:	81 30       	cpi	r24, 0x01	; 1
    2280:	91 05       	cpc	r25, r1
    2282:	f1 f0       	breq	.+60     	; 0x22c0 <MDIO_AndValueWithPort+0x82>
    2284:	2e 81       	ldd	r18, Y+6	; 0x06
    2286:	3f 81       	ldd	r19, Y+7	; 0x07
    2288:	22 30       	cpi	r18, 0x02	; 2
    228a:	31 05       	cpc	r19, r1
    228c:	2c f4       	brge	.+10     	; 0x2298 <MDIO_AndValueWithPort+0x5a>
    228e:	8e 81       	ldd	r24, Y+6	; 0x06
    2290:	9f 81       	ldd	r25, Y+7	; 0x07
    2292:	00 97       	sbiw	r24, 0x00	; 0
    2294:	61 f0       	breq	.+24     	; 0x22ae <MDIO_AndValueWithPort+0x70>
    2296:	2f c0       	rjmp	.+94     	; 0x22f6 <MDIO_AndValueWithPort+0xb8>
    2298:	2e 81       	ldd	r18, Y+6	; 0x06
    229a:	3f 81       	ldd	r19, Y+7	; 0x07
    229c:	22 30       	cpi	r18, 0x02	; 2
    229e:	31 05       	cpc	r19, r1
    22a0:	c1 f0       	breq	.+48     	; 0x22d2 <MDIO_AndValueWithPort+0x94>
    22a2:	8e 81       	ldd	r24, Y+6	; 0x06
    22a4:	9f 81       	ldd	r25, Y+7	; 0x07
    22a6:	83 30       	cpi	r24, 0x03	; 3
    22a8:	91 05       	cpc	r25, r1
    22aa:	e1 f0       	breq	.+56     	; 0x22e4 <MDIO_AndValueWithPort+0xa6>
    22ac:	24 c0       	rjmp	.+72     	; 0x22f6 <MDIO_AndValueWithPort+0xb8>
		{
			case DIO_u8PORTA : * Copy_u8Result = PORTA & Copy_u8Value; break;
    22ae:	eb e3       	ldi	r30, 0x3B	; 59
    22b0:	f0 e0       	ldi	r31, 0x00	; 0
    22b2:	90 81       	ld	r25, Z
    22b4:	8b 81       	ldd	r24, Y+3	; 0x03
    22b6:	89 23       	and	r24, r25
    22b8:	ec 81       	ldd	r30, Y+4	; 0x04
    22ba:	fd 81       	ldd	r31, Y+5	; 0x05
    22bc:	80 83       	st	Z, r24
    22be:	1e c0       	rjmp	.+60     	; 0x22fc <MDIO_AndValueWithPort+0xbe>
			case DIO_u8PORTB : * Copy_u8Result = PORTB & Copy_u8Value; break;
    22c0:	e8 e3       	ldi	r30, 0x38	; 56
    22c2:	f0 e0       	ldi	r31, 0x00	; 0
    22c4:	90 81       	ld	r25, Z
    22c6:	8b 81       	ldd	r24, Y+3	; 0x03
    22c8:	89 23       	and	r24, r25
    22ca:	ec 81       	ldd	r30, Y+4	; 0x04
    22cc:	fd 81       	ldd	r31, Y+5	; 0x05
    22ce:	80 83       	st	Z, r24
    22d0:	15 c0       	rjmp	.+42     	; 0x22fc <MDIO_AndValueWithPort+0xbe>
			case DIO_u8PORTC : * Copy_u8Result = PORTC & Copy_u8Value; break;
    22d2:	e5 e3       	ldi	r30, 0x35	; 53
    22d4:	f0 e0       	ldi	r31, 0x00	; 0
    22d6:	90 81       	ld	r25, Z
    22d8:	8b 81       	ldd	r24, Y+3	; 0x03
    22da:	89 23       	and	r24, r25
    22dc:	ec 81       	ldd	r30, Y+4	; 0x04
    22de:	fd 81       	ldd	r31, Y+5	; 0x05
    22e0:	80 83       	st	Z, r24
    22e2:	0c c0       	rjmp	.+24     	; 0x22fc <MDIO_AndValueWithPort+0xbe>
			case DIO_u8PORTD : * Copy_u8Result = PORTD & Copy_u8Value; break;
    22e4:	e2 e3       	ldi	r30, 0x32	; 50
    22e6:	f0 e0       	ldi	r31, 0x00	; 0
    22e8:	90 81       	ld	r25, Z
    22ea:	8b 81       	ldd	r24, Y+3	; 0x03
    22ec:	89 23       	and	r24, r25
    22ee:	ec 81       	ldd	r30, Y+4	; 0x04
    22f0:	fd 81       	ldd	r31, Y+5	; 0x05
    22f2:	80 83       	st	Z, r24
    22f4:	03 c0       	rjmp	.+6      	; 0x22fc <MDIO_AndValueWithPort+0xbe>
			default: Local_ErrorState = R_NOK; break;
    22f6:	19 82       	std	Y+1, r1	; 0x01
    22f8:	01 c0       	rjmp	.+2      	; 0x22fc <MDIO_AndValueWithPort+0xbe>
		}
	}
	else
	{
		Local_ErrorState = R_NOK;
    22fa:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_ErrorState;
    22fc:	89 81       	ldd	r24, Y+1	; 0x01
}
    22fe:	27 96       	adiw	r28, 0x07	; 7
    2300:	0f b6       	in	r0, 0x3f	; 63
    2302:	f8 94       	cli
    2304:	de bf       	out	0x3e, r29	; 62
    2306:	0f be       	out	0x3f, r0	; 63
    2308:	cd bf       	out	0x3d, r28	; 61
    230a:	cf 91       	pop	r28
    230c:	df 91       	pop	r29
    230e:	08 95       	ret

00002310 <MDIO_TogglePinValue>:

error_state_t	MDIO_TogglePinValue (dio_u8port_t Copy_u8Port, dio_u8pin_t Copy_u8Pin)
{
    2310:	df 93       	push	r29
    2312:	cf 93       	push	r28
    2314:	00 d0       	rcall	.+0      	; 0x2316 <MDIO_TogglePinValue+0x6>
    2316:	00 d0       	rcall	.+0      	; 0x2318 <MDIO_TogglePinValue+0x8>
    2318:	0f 92       	push	r0
    231a:	cd b7       	in	r28, 0x3d	; 61
    231c:	de b7       	in	r29, 0x3e	; 62
    231e:	8a 83       	std	Y+2, r24	; 0x02
    2320:	6b 83       	std	Y+3, r22	; 0x03
	error_state_t Local_ErrorState = R_OK;
    2322:	81 e0       	ldi	r24, 0x01	; 1
    2324:	89 83       	std	Y+1, r24	; 0x01

	if((Copy_u8Port <= DIO_u8PORTD) && (Copy_u8Pin <= DIO_u8PIN7))
    2326:	8a 81       	ldd	r24, Y+2	; 0x02
    2328:	84 30       	cpi	r24, 0x04	; 4
    232a:	08 f0       	brcs	.+2      	; 0x232e <MDIO_TogglePinValue+0x1e>
    232c:	75 c0       	rjmp	.+234    	; 0x2418 <MDIO_TogglePinValue+0x108>
    232e:	8b 81       	ldd	r24, Y+3	; 0x03
    2330:	88 30       	cpi	r24, 0x08	; 8
    2332:	08 f0       	brcs	.+2      	; 0x2336 <MDIO_TogglePinValue+0x26>
    2334:	71 c0       	rjmp	.+226    	; 0x2418 <MDIO_TogglePinValue+0x108>
	{
		switch (Copy_u8Port)
    2336:	8a 81       	ldd	r24, Y+2	; 0x02
    2338:	28 2f       	mov	r18, r24
    233a:	30 e0       	ldi	r19, 0x00	; 0
    233c:	3d 83       	std	Y+5, r19	; 0x05
    233e:	2c 83       	std	Y+4, r18	; 0x04
    2340:	8c 81       	ldd	r24, Y+4	; 0x04
    2342:	9d 81       	ldd	r25, Y+5	; 0x05
    2344:	81 30       	cpi	r24, 0x01	; 1
    2346:	91 05       	cpc	r25, r1
    2348:	49 f1       	breq	.+82     	; 0x239c <MDIO_TogglePinValue+0x8c>
    234a:	2c 81       	ldd	r18, Y+4	; 0x04
    234c:	3d 81       	ldd	r19, Y+5	; 0x05
    234e:	22 30       	cpi	r18, 0x02	; 2
    2350:	31 05       	cpc	r19, r1
    2352:	2c f4       	brge	.+10     	; 0x235e <MDIO_TogglePinValue+0x4e>
    2354:	8c 81       	ldd	r24, Y+4	; 0x04
    2356:	9d 81       	ldd	r25, Y+5	; 0x05
    2358:	00 97       	sbiw	r24, 0x00	; 0
    235a:	61 f0       	breq	.+24     	; 0x2374 <MDIO_TogglePinValue+0x64>
    235c:	5b c0       	rjmp	.+182    	; 0x2414 <MDIO_TogglePinValue+0x104>
    235e:	2c 81       	ldd	r18, Y+4	; 0x04
    2360:	3d 81       	ldd	r19, Y+5	; 0x05
    2362:	22 30       	cpi	r18, 0x02	; 2
    2364:	31 05       	cpc	r19, r1
    2366:	71 f1       	breq	.+92     	; 0x23c4 <MDIO_TogglePinValue+0xb4>
    2368:	8c 81       	ldd	r24, Y+4	; 0x04
    236a:	9d 81       	ldd	r25, Y+5	; 0x05
    236c:	83 30       	cpi	r24, 0x03	; 3
    236e:	91 05       	cpc	r25, r1
    2370:	e9 f1       	breq	.+122    	; 0x23ec <MDIO_TogglePinValue+0xdc>
    2372:	50 c0       	rjmp	.+160    	; 0x2414 <MDIO_TogglePinValue+0x104>
		{
			case DIO_u8PORTA : TOG_BIT(PORTA, Copy_u8Pin); break;
    2374:	ab e3       	ldi	r26, 0x3B	; 59
    2376:	b0 e0       	ldi	r27, 0x00	; 0
    2378:	eb e3       	ldi	r30, 0x3B	; 59
    237a:	f0 e0       	ldi	r31, 0x00	; 0
    237c:	80 81       	ld	r24, Z
    237e:	48 2f       	mov	r20, r24
    2380:	8b 81       	ldd	r24, Y+3	; 0x03
    2382:	28 2f       	mov	r18, r24
    2384:	30 e0       	ldi	r19, 0x00	; 0
    2386:	81 e0       	ldi	r24, 0x01	; 1
    2388:	90 e0       	ldi	r25, 0x00	; 0
    238a:	02 2e       	mov	r0, r18
    238c:	02 c0       	rjmp	.+4      	; 0x2392 <MDIO_TogglePinValue+0x82>
    238e:	88 0f       	add	r24, r24
    2390:	99 1f       	adc	r25, r25
    2392:	0a 94       	dec	r0
    2394:	e2 f7       	brpl	.-8      	; 0x238e <MDIO_TogglePinValue+0x7e>
    2396:	84 27       	eor	r24, r20
    2398:	8c 93       	st	X, r24
    239a:	3f c0       	rjmp	.+126    	; 0x241a <MDIO_TogglePinValue+0x10a>
			case DIO_u8PORTB : TOG_BIT(PORTB, Copy_u8Pin); break;
    239c:	a8 e3       	ldi	r26, 0x38	; 56
    239e:	b0 e0       	ldi	r27, 0x00	; 0
    23a0:	e8 e3       	ldi	r30, 0x38	; 56
    23a2:	f0 e0       	ldi	r31, 0x00	; 0
    23a4:	80 81       	ld	r24, Z
    23a6:	48 2f       	mov	r20, r24
    23a8:	8b 81       	ldd	r24, Y+3	; 0x03
    23aa:	28 2f       	mov	r18, r24
    23ac:	30 e0       	ldi	r19, 0x00	; 0
    23ae:	81 e0       	ldi	r24, 0x01	; 1
    23b0:	90 e0       	ldi	r25, 0x00	; 0
    23b2:	02 2e       	mov	r0, r18
    23b4:	02 c0       	rjmp	.+4      	; 0x23ba <MDIO_TogglePinValue+0xaa>
    23b6:	88 0f       	add	r24, r24
    23b8:	99 1f       	adc	r25, r25
    23ba:	0a 94       	dec	r0
    23bc:	e2 f7       	brpl	.-8      	; 0x23b6 <MDIO_TogglePinValue+0xa6>
    23be:	84 27       	eor	r24, r20
    23c0:	8c 93       	st	X, r24
    23c2:	2b c0       	rjmp	.+86     	; 0x241a <MDIO_TogglePinValue+0x10a>
			case DIO_u8PORTC : TOG_BIT(PORTC, Copy_u8Pin); break;
    23c4:	a5 e3       	ldi	r26, 0x35	; 53
    23c6:	b0 e0       	ldi	r27, 0x00	; 0
    23c8:	e5 e3       	ldi	r30, 0x35	; 53
    23ca:	f0 e0       	ldi	r31, 0x00	; 0
    23cc:	80 81       	ld	r24, Z
    23ce:	48 2f       	mov	r20, r24
    23d0:	8b 81       	ldd	r24, Y+3	; 0x03
    23d2:	28 2f       	mov	r18, r24
    23d4:	30 e0       	ldi	r19, 0x00	; 0
    23d6:	81 e0       	ldi	r24, 0x01	; 1
    23d8:	90 e0       	ldi	r25, 0x00	; 0
    23da:	02 2e       	mov	r0, r18
    23dc:	02 c0       	rjmp	.+4      	; 0x23e2 <MDIO_TogglePinValue+0xd2>
    23de:	88 0f       	add	r24, r24
    23e0:	99 1f       	adc	r25, r25
    23e2:	0a 94       	dec	r0
    23e4:	e2 f7       	brpl	.-8      	; 0x23de <MDIO_TogglePinValue+0xce>
    23e6:	84 27       	eor	r24, r20
    23e8:	8c 93       	st	X, r24
    23ea:	17 c0       	rjmp	.+46     	; 0x241a <MDIO_TogglePinValue+0x10a>
			case DIO_u8PORTD : TOG_BIT(PORTD, Copy_u8Pin); break;
    23ec:	a2 e3       	ldi	r26, 0x32	; 50
    23ee:	b0 e0       	ldi	r27, 0x00	; 0
    23f0:	e2 e3       	ldi	r30, 0x32	; 50
    23f2:	f0 e0       	ldi	r31, 0x00	; 0
    23f4:	80 81       	ld	r24, Z
    23f6:	48 2f       	mov	r20, r24
    23f8:	8b 81       	ldd	r24, Y+3	; 0x03
    23fa:	28 2f       	mov	r18, r24
    23fc:	30 e0       	ldi	r19, 0x00	; 0
    23fe:	81 e0       	ldi	r24, 0x01	; 1
    2400:	90 e0       	ldi	r25, 0x00	; 0
    2402:	02 2e       	mov	r0, r18
    2404:	02 c0       	rjmp	.+4      	; 0x240a <MDIO_TogglePinValue+0xfa>
    2406:	88 0f       	add	r24, r24
    2408:	99 1f       	adc	r25, r25
    240a:	0a 94       	dec	r0
    240c:	e2 f7       	brpl	.-8      	; 0x2406 <MDIO_TogglePinValue+0xf6>
    240e:	84 27       	eor	r24, r20
    2410:	8c 93       	st	X, r24
    2412:	03 c0       	rjmp	.+6      	; 0x241a <MDIO_TogglePinValue+0x10a>
			default: Local_ErrorState = R_NOK; break;
    2414:	19 82       	std	Y+1, r1	; 0x01
    2416:	01 c0       	rjmp	.+2      	; 0x241a <MDIO_TogglePinValue+0x10a>
		}
	}
	else
	{
		Local_ErrorState = R_NOK;
    2418:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_ErrorState;
    241a:	89 81       	ldd	r24, Y+1	; 0x01
}
    241c:	0f 90       	pop	r0
    241e:	0f 90       	pop	r0
    2420:	0f 90       	pop	r0
    2422:	0f 90       	pop	r0
    2424:	0f 90       	pop	r0
    2426:	cf 91       	pop	r28
    2428:	df 91       	pop	r29
    242a:	08 95       	ret

0000242c <MADC_voidInit>:
/**************************** Function Implementation **************************/
/*******************************************************************************/

/***************************** ADC Initialization ******************************/
void MADC_voidInit(void)
{
    242c:	df 93       	push	r29
    242e:	cf 93       	push	r28
    2430:	cd b7       	in	r28, 0x3d	; 61
    2432:	de b7       	in	r29, 0x3e	; 62
	/* 1. Select Voltage Reference */
	ADMUX &= ADC_VOLT_REF_SELEC_MASK;
    2434:	a7 e2       	ldi	r26, 0x27	; 39
    2436:	b0 e0       	ldi	r27, 0x00	; 0
    2438:	e7 e2       	ldi	r30, 0x27	; 39
    243a:	f0 e0       	ldi	r31, 0x00	; 0
    243c:	80 81       	ld	r24, Z
    243e:	8f 73       	andi	r24, 0x3F	; 63
    2440:	8c 93       	st	X, r24
	ADMUX |= ADC_VOLT_REF_SELEC;
    2442:	a7 e2       	ldi	r26, 0x27	; 39
    2444:	b0 e0       	ldi	r27, 0x00	; 0
    2446:	e7 e2       	ldi	r30, 0x27	; 39
    2448:	f0 e0       	ldi	r31, 0x00	; 0
    244a:	80 81       	ld	r24, Z
    244c:	80 64       	ori	r24, 0x40	; 64
    244e:	8c 93       	st	X, r24
	/* 2. Select ADC Adjust */
	ADMUX &= ADC_Data_Register_MASK;
    2450:	a7 e2       	ldi	r26, 0x27	; 39
    2452:	b0 e0       	ldi	r27, 0x00	; 0
    2454:	e7 e2       	ldi	r30, 0x27	; 39
    2456:	f0 e0       	ldi	r31, 0x00	; 0
    2458:	80 81       	ld	r24, Z
    245a:	8f 7d       	andi	r24, 0xDF	; 223
    245c:	8c 93       	st	X, r24
	ADMUX |= ADC_Data_Register;
    245e:	a7 e2       	ldi	r26, 0x27	; 39
    2460:	b0 e0       	ldi	r27, 0x00	; 0
    2462:	e7 e2       	ldi	r30, 0x27	; 39
    2464:	f0 e0       	ldi	r31, 0x00	; 0
    2466:	80 81       	ld	r24, Z
    2468:	8c 93       	st	X, r24
	/* 3. Single Or Auto Trigger Conversion Mode */
	#if ADC_AUTO_TRIGGER_MODE == AUTO_TRIGGER_ENABLE
	/* Enable Auto Trigger */
	SET_BIT(ADCSRA, ADCSRA_ADATE);
    246a:	a6 e2       	ldi	r26, 0x26	; 38
    246c:	b0 e0       	ldi	r27, 0x00	; 0
    246e:	e6 e2       	ldi	r30, 0x26	; 38
    2470:	f0 e0       	ldi	r31, 0x00	; 0
    2472:	80 81       	ld	r24, Z
    2474:	80 62       	ori	r24, 0x20	; 32
    2476:	8c 93       	st	X, r24
	/* Select ADC Auto Trigger Source */
	SFIOR &= ADC_Auto_Trigger_Source_MASK;
    2478:	a0 e5       	ldi	r26, 0x50	; 80
    247a:	b0 e0       	ldi	r27, 0x00	; 0
    247c:	e0 e5       	ldi	r30, 0x50	; 80
    247e:	f0 e0       	ldi	r31, 0x00	; 0
    2480:	80 81       	ld	r24, Z
    2482:	8f 71       	andi	r24, 0x1F	; 31
    2484:	8c 93       	st	X, r24
	SFIOR |= ADC_Auto_Trigger_Source;
    2486:	a0 e5       	ldi	r26, 0x50	; 80
    2488:	b0 e0       	ldi	r27, 0x00	; 0
    248a:	e0 e5       	ldi	r30, 0x50	; 80
    248c:	f0 e0       	ldi	r31, 0x00	; 0
    248e:	80 81       	ld	r24, Z
    2490:	8c 93       	st	X, r24
	#elif ADC_AUTO_TRIGGER_MODE == AUTO_TRIGGER_DISABLE
	CLR_BIT(ADCSRA, ADCSRA_ADATE);
	#endif
	/* 4. Prescaler Selection*/
	ADCSRA &= ADC_PRESC_MASK;
    2492:	a6 e2       	ldi	r26, 0x26	; 38
    2494:	b0 e0       	ldi	r27, 0x00	; 0
    2496:	e6 e2       	ldi	r30, 0x26	; 38
    2498:	f0 e0       	ldi	r31, 0x00	; 0
    249a:	80 81       	ld	r24, Z
    249c:	88 7f       	andi	r24, 0xF8	; 248
    249e:	8c 93       	st	X, r24
	ADCSRA |= ADC_PRESC_SELEC;
    24a0:	a6 e2       	ldi	r26, 0x26	; 38
    24a2:	b0 e0       	ldi	r27, 0x00	; 0
    24a4:	e6 e2       	ldi	r30, 0x26	; 38
    24a6:	f0 e0       	ldi	r31, 0x00	; 0
    24a8:	80 81       	ld	r24, Z
    24aa:	87 60       	ori	r24, 0x07	; 7
    24ac:	8c 93       	st	X, r24
	/* 5. Enable ADC*/
	SET_BIT(ADCSRA,ADCSRA_ADEN);
    24ae:	a6 e2       	ldi	r26, 0x26	; 38
    24b0:	b0 e0       	ldi	r27, 0x00	; 0
    24b2:	e6 e2       	ldi	r30, 0x26	; 38
    24b4:	f0 e0       	ldi	r31, 0x00	; 0
    24b6:	80 81       	ld	r24, Z
    24b8:	80 68       	ori	r24, 0x80	; 128
    24ba:	8c 93       	st	X, r24
}
    24bc:	cf 91       	pop	r28
    24be:	df 91       	pop	r29
    24c0:	08 95       	ret

000024c2 <MADC_StartConversionSynch>:
/*************************** End ADC Initialization ****************************/

/********************* ADC Start Conversion Synch ******************************/
error_state_t MADC_StartConversionSynch(Channel_t Copy_Channel, u16 *Copy_pu16Reading)
{
    24c2:	df 93       	push	r29
    24c4:	cf 93       	push	r28
    24c6:	cd b7       	in	r28, 0x3d	; 61
    24c8:	de b7       	in	r29, 0x3e	; 62
    24ca:	28 97       	sbiw	r28, 0x08	; 8
    24cc:	0f b6       	in	r0, 0x3f	; 63
    24ce:	f8 94       	cli
    24d0:	de bf       	out	0x3e, r29	; 62
    24d2:	0f be       	out	0x3f, r0	; 63
    24d4:	cd bf       	out	0x3d, r28	; 61
    24d6:	8e 83       	std	Y+6, r24	; 0x06
    24d8:	78 87       	std	Y+8, r23	; 0x08
    24da:	6f 83       	std	Y+7, r22	; 0x07
	error_state_t Local_ErrorState = R_OK;
    24dc:	81 e0       	ldi	r24, 0x01	; 1
    24de:	8d 83       	std	Y+5, r24	; 0x05
	u32 Local_u32TimeOutCounter = 0;
    24e0:	19 82       	std	Y+1, r1	; 0x01
    24e2:	1a 82       	std	Y+2, r1	; 0x02
    24e4:	1b 82       	std	Y+3, r1	; 0x03
    24e6:	1c 82       	std	Y+4, r1	; 0x04
	
	if (ADC_u8BusyState == IDLE)
    24e8:	80 91 ae 01 	lds	r24, 0x01AE
    24ec:	88 23       	and	r24, r24
    24ee:	09 f0       	breq	.+2      	; 0x24f2 <MADC_StartConversionSynch+0x30>
    24f0:	54 c0       	rjmp	.+168    	; 0x259a <MADC_StartConversionSynch+0xd8>
	{
		/* ADC Now Is Busy */
		ADC_u8BusyState = BUSY;
    24f2:	81 e0       	ldi	r24, 0x01	; 1
    24f4:	80 93 ae 01 	sts	0x01AE, r24
		/* Select Channel */
		ADMUX &= ADC_SELEC_CHANNEL_MASK; 	/* Clear the MUX bits in ADMUX register*/
    24f8:	a7 e2       	ldi	r26, 0x27	; 39
    24fa:	b0 e0       	ldi	r27, 0x00	; 0
    24fc:	e7 e2       	ldi	r30, 0x27	; 39
    24fe:	f0 e0       	ldi	r31, 0x00	; 0
    2500:	80 81       	ld	r24, Z
    2502:	80 7e       	andi	r24, 0xE0	; 224
    2504:	8c 93       	st	X, r24
		ADMUX |= Copy_Channel;              /*Set the required channel into the MUX bits*/
    2506:	a7 e2       	ldi	r26, 0x27	; 39
    2508:	b0 e0       	ldi	r27, 0x00	; 0
    250a:	e7 e2       	ldi	r30, 0x27	; 39
    250c:	f0 e0       	ldi	r31, 0x00	; 0
    250e:	90 81       	ld	r25, Z
    2510:	8e 81       	ldd	r24, Y+6	; 0x06
    2512:	89 2b       	or	r24, r25
    2514:	8c 93       	st	X, r24
    2516:	0b c0       	rjmp	.+22     	; 0x252e <MADC_StartConversionSynch+0x6c>

		 /* Polling (Busy Wait) until the conversion complete flag is set 
		   or counter reaching TimeOut value */
		 while ((GET_BIT(ADCSRA, ADCSRA_ADIF) == 0) && ( Local_u32TimeOutCounter != ADC_u32TIMEOUT))
		 {
			 Local_u32TimeOutCounter ++;
    2518:	89 81       	ldd	r24, Y+1	; 0x01
    251a:	9a 81       	ldd	r25, Y+2	; 0x02
    251c:	ab 81       	ldd	r26, Y+3	; 0x03
    251e:	bc 81       	ldd	r27, Y+4	; 0x04
    2520:	01 96       	adiw	r24, 0x01	; 1
    2522:	a1 1d       	adc	r26, r1
    2524:	b1 1d       	adc	r27, r1
    2526:	89 83       	std	Y+1, r24	; 0x01
    2528:	9a 83       	std	Y+2, r25	; 0x02
    252a:	ab 83       	std	Y+3, r26	; 0x03
    252c:	bc 83       	std	Y+4, r27	; 0x04
		SET_BIT(ADCSRA, ADCSRA_ADSC);
		#endif

		 /* Polling (Busy Wait) until the conversion complete flag is set 
		   or counter reaching TimeOut value */
		 while ((GET_BIT(ADCSRA, ADCSRA_ADIF) == 0) && ( Local_u32TimeOutCounter != ADC_u32TIMEOUT))
    252e:	e6 e2       	ldi	r30, 0x26	; 38
    2530:	f0 e0       	ldi	r31, 0x00	; 0
    2532:	80 81       	ld	r24, Z
    2534:	82 95       	swap	r24
    2536:	8f 70       	andi	r24, 0x0F	; 15
    2538:	88 2f       	mov	r24, r24
    253a:	90 e0       	ldi	r25, 0x00	; 0
    253c:	81 70       	andi	r24, 0x01	; 1
    253e:	90 70       	andi	r25, 0x00	; 0
    2540:	00 97       	sbiw	r24, 0x00	; 0
    2542:	61 f4       	brne	.+24     	; 0x255c <MADC_StartConversionSynch+0x9a>
    2544:	89 81       	ldd	r24, Y+1	; 0x01
    2546:	9a 81       	ldd	r25, Y+2	; 0x02
    2548:	ab 81       	ldd	r26, Y+3	; 0x03
    254a:	bc 81       	ldd	r27, Y+4	; 0x04
    254c:	80 35       	cpi	r24, 0x50	; 80
    254e:	23 ec       	ldi	r18, 0xC3	; 195
    2550:	92 07       	cpc	r25, r18
    2552:	20 e0       	ldi	r18, 0x00	; 0
    2554:	a2 07       	cpc	r26, r18
    2556:	20 e0       	ldi	r18, 0x00	; 0
    2558:	b2 07       	cpc	r27, r18
    255a:	f1 f6       	brne	.-68     	; 0x2518 <MADC_StartConversionSynch+0x56>
		 {
			 Local_u32TimeOutCounter ++;
		 } 
		 if (GET_BIT(ADCSRA, ADCSRA_ADIF) == 1)
    255c:	e6 e2       	ldi	r30, 0x26	; 38
    255e:	f0 e0       	ldi	r31, 0x00	; 0
    2560:	80 81       	ld	r24, Z
    2562:	82 95       	swap	r24
    2564:	8f 70       	andi	r24, 0x0F	; 15
    2566:	88 2f       	mov	r24, r24
    2568:	90 e0       	ldi	r25, 0x00	; 0
    256a:	81 70       	andi	r24, 0x01	; 1
    256c:	90 70       	andi	r25, 0x00	; 0
    256e:	88 23       	and	r24, r24
    2570:	81 f0       	breq	.+32     	; 0x2592 <MADC_StartConversionSynch+0xd0>
		 {
			 /* Loop is broken because flag is raised */
			 /* Clear conversion complete Flag */
			 SET_BIT(ADCSRA, ADCSRA_ADIF);
    2572:	a6 e2       	ldi	r26, 0x26	; 38
    2574:	b0 e0       	ldi	r27, 0x00	; 0
    2576:	e6 e2       	ldi	r30, 0x26	; 38
    2578:	f0 e0       	ldi	r31, 0x00	; 0
    257a:	80 81       	ld	r24, Z
    257c:	80 61       	ori	r24, 0x10	; 16
    257e:	8c 93       	st	X, r24
			 
			 /* Return Value Of Conversion */
			 *Copy_pu16Reading = ADC;
    2580:	e4 e2       	ldi	r30, 0x24	; 36
    2582:	f0 e0       	ldi	r31, 0x00	; 0
    2584:	80 81       	ld	r24, Z
    2586:	91 81       	ldd	r25, Z+1	; 0x01
    2588:	ef 81       	ldd	r30, Y+7	; 0x07
    258a:	f8 85       	ldd	r31, Y+8	; 0x08
    258c:	91 83       	std	Z+1, r25	; 0x01
    258e:	80 83       	st	Z, r24
    2590:	01 c0       	rjmp	.+2      	; 0x2594 <MADC_StartConversionSynch+0xd2>
			 
		 } 
		 else
		 {
			 /* Loop is broken because the time out is reached */
			 Local_ErrorState = R_NOK; 
    2592:	1d 82       	std	Y+5, r1	; 0x05
		 }
		ADC_u8BusyState = IDLE;
    2594:	10 92 ae 01 	sts	0x01AE, r1
    2598:	02 c0       	rjmp	.+4      	; 0x259e <MADC_StartConversionSynch+0xdc>
	}
	else
	{
		Local_ErrorState = BUSY_FUNC;
    259a:	87 e0       	ldi	r24, 0x07	; 7
    259c:	8d 83       	std	Y+5, r24	; 0x05
	}
	
	return Local_ErrorState;
    259e:	8d 81       	ldd	r24, Y+5	; 0x05
}
    25a0:	28 96       	adiw	r28, 0x08	; 8
    25a2:	0f b6       	in	r0, 0x3f	; 63
    25a4:	f8 94       	cli
    25a6:	de bf       	out	0x3e, r29	; 62
    25a8:	0f be       	out	0x3f, r0	; 63
    25aa:	cd bf       	out	0x3d, r28	; 61
    25ac:	cf 91       	pop	r28
    25ae:	df 91       	pop	r29
    25b0:	08 95       	ret

000025b2 <MADC_StartConversionAsynch>:
/******************** End ADC Start Conversion Synch ***************************/

/************************* ADC Start Conversion Asynch *************************/
error_state_t MADC_StartConversionAsynch(Channel_t Copy_Channel, u16 *Copy_pu16Reading, void(*Copy_pvNotificationFunc)(void))
{
    25b2:	df 93       	push	r29
    25b4:	cf 93       	push	r28
    25b6:	00 d0       	rcall	.+0      	; 0x25b8 <MADC_StartConversionAsynch+0x6>
    25b8:	00 d0       	rcall	.+0      	; 0x25ba <MADC_StartConversionAsynch+0x8>
    25ba:	00 d0       	rcall	.+0      	; 0x25bc <MADC_StartConversionAsynch+0xa>
    25bc:	cd b7       	in	r28, 0x3d	; 61
    25be:	de b7       	in	r29, 0x3e	; 62
    25c0:	8a 83       	std	Y+2, r24	; 0x02
    25c2:	7c 83       	std	Y+4, r23	; 0x04
    25c4:	6b 83       	std	Y+3, r22	; 0x03
    25c6:	5e 83       	std	Y+6, r21	; 0x06
    25c8:	4d 83       	std	Y+5, r20	; 0x05
	error_state_t Local_ErrorState = R_OK;
    25ca:	81 e0       	ldi	r24, 0x01	; 1
    25cc:	89 83       	std	Y+1, r24	; 0x01
	if(ADC_u8BusyState == IDLE)
    25ce:	80 91 ae 01 	lds	r24, 0x01AE
    25d2:	88 23       	and	r24, r24
    25d4:	51 f5       	brne	.+84     	; 0x262a <MADC_StartConversionAsynch+0x78>
	{
		/* make ADC BUSY in order not  work until being idle  */
		ADC_u8BusyState = BUSY;
    25d6:	81 e0       	ldi	r24, 0x01	; 1
    25d8:	80 93 ae 01 	sts	0x01AE, r24
		
		/* Make ISR source single channel Asynchronous */
		ADC_u8ISRSourse = SINGLE_CHANNEL_ASYNCH;
    25dc:	10 92 b9 01 	sts	0x01B9, r1
		
		/* Initialize the reading variable globally */
		ADC_pu16Reading = Copy_pu16Reading;
    25e0:	8b 81       	ldd	r24, Y+3	; 0x03
    25e2:	9c 81       	ldd	r25, Y+4	; 0x04
    25e4:	90 93 b2 01 	sts	0x01B2, r25
    25e8:	80 93 b1 01 	sts	0x01B1, r24
		
		/* Initialize The Callback Notification Function Globally*/
		ADC_pvCallBackNotificationFunc = Copy_pvNotificationFunc;
    25ec:	8d 81       	ldd	r24, Y+5	; 0x05
    25ee:	9e 81       	ldd	r25, Y+6	; 0x06
    25f0:	90 93 b0 01 	sts	0x01B0, r25
    25f4:	80 93 af 01 	sts	0x01AF, r24
		
		/* Select Channel */
		ADMUX &= ADC_SELEC_CHANNEL_MASK; 	/* Clear the MUX bits in ADMUX register*/
    25f8:	a7 e2       	ldi	r26, 0x27	; 39
    25fa:	b0 e0       	ldi	r27, 0x00	; 0
    25fc:	e7 e2       	ldi	r30, 0x27	; 39
    25fe:	f0 e0       	ldi	r31, 0x00	; 0
    2600:	80 81       	ld	r24, Z
    2602:	80 7e       	andi	r24, 0xE0	; 224
    2604:	8c 93       	st	X, r24
		ADMUX |= Copy_Channel;              /*Set the required channel into the MUX bits*/
    2606:	a7 e2       	ldi	r26, 0x27	; 39
    2608:	b0 e0       	ldi	r27, 0x00	; 0
    260a:	e7 e2       	ldi	r30, 0x27	; 39
    260c:	f0 e0       	ldi	r31, 0x00	; 0
    260e:	90 81       	ld	r25, Z
    2610:	8a 81       	ldd	r24, Y+2	; 0x02
    2612:	89 2b       	or	r24, r25
    2614:	8c 93       	st	X, r24
		#if ADC_AUTO_TRIGGER_MODE == AUTO_TRIGGER_DISABLE 
		/* Start Conversion */
		SET_BIT(ADCSRA, ADCSRA_ADSC);
		#endif		
			
		SET_BIT(ADCSRA, ADCSRA_ADSC);
    2616:	a6 e2       	ldi	r26, 0x26	; 38
    2618:	b0 e0       	ldi	r27, 0x00	; 0
    261a:	e6 e2       	ldi	r30, 0x26	; 38
    261c:	f0 e0       	ldi	r31, 0x00	; 0
    261e:	80 81       	ld	r24, Z
    2620:	80 64       	ori	r24, 0x40	; 64
    2622:	8c 93       	st	X, r24

		/* Enable INT */
		MADC_voidInterruptEnable();
    2624:	0e 94 82 13 	call	0x2704	; 0x2704 <MADC_voidInterruptEnable>
    2628:	02 c0       	rjmp	.+4      	; 0x262e <MADC_StartConversionAsynch+0x7c>

	}
	else
	{
		Local_ErrorState = BUSY_FUNC;
    262a:	87 e0       	ldi	r24, 0x07	; 7
    262c:	89 83       	std	Y+1, r24	; 0x01
	}
	
	
	
	return Local_ErrorState;
    262e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2630:	26 96       	adiw	r28, 0x06	; 6
    2632:	0f b6       	in	r0, 0x3f	; 63
    2634:	f8 94       	cli
    2636:	de bf       	out	0x3e, r29	; 62
    2638:	0f be       	out	0x3f, r0	; 63
    263a:	cd bf       	out	0x3d, r28	; 61
    263c:	cf 91       	pop	r28
    263e:	df 91       	pop	r29
    2640:	08 95       	ret

00002642 <MADC_StartChainConversionAsynch>:
/*********************** End ADC Start Conversion Asynch ***********************/

/********************** ADC Start Chain Conversion Asynch***********************/
error_state_t MADC_StartChainConversionAsynch(Chain_t *Copy_Chain)
{
    2642:	df 93       	push	r29
    2644:	cf 93       	push	r28
    2646:	00 d0       	rcall	.+0      	; 0x2648 <MADC_StartChainConversionAsynch+0x6>
    2648:	0f 92       	push	r0
    264a:	cd b7       	in	r28, 0x3d	; 61
    264c:	de b7       	in	r29, 0x3e	; 62
    264e:	9b 83       	std	Y+3, r25	; 0x03
    2650:	8a 83       	std	Y+2, r24	; 0x02
	error_state_t Local_ErrorState = R_OK;
    2652:	81 e0       	ldi	r24, 0x01	; 1
    2654:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_Chain == NULL)
    2656:	8a 81       	ldd	r24, Y+2	; 0x02
    2658:	9b 81       	ldd	r25, Y+3	; 0x03
    265a:	00 97       	sbiw	r24, 0x00	; 0
    265c:	19 f4       	brne	.+6      	; 0x2664 <MADC_StartChainConversionAsynch+0x22>
	{
		Local_ErrorState = NULL_POINTER;
    265e:	86 e0       	ldi	r24, 0x06	; 6
    2660:	89 83       	std	Y+1, r24	; 0x01
    2662:	49 c0       	rjmp	.+146    	; 0x26f6 <MADC_StartChainConversionAsynch+0xb4>
	} 
	else
	{
		if(ADC_u8BusyState == IDLE)
    2664:	80 91 ae 01 	lds	r24, 0x01AE
    2668:	88 23       	and	r24, r24
    266a:	09 f0       	breq	.+2      	; 0x266e <MADC_StartChainConversionAsynch+0x2c>
    266c:	42 c0       	rjmp	.+132    	; 0x26f2 <MADC_StartChainConversionAsynch+0xb0>
		{
			/* make ADC BUSY in order not  work until being idle  */
			ADC_u8BusyState = BUSY;
    266e:	81 e0       	ldi	r24, 0x01	; 1
    2670:	80 93 ae 01 	sts	0x01AE, r24
			
			/* Make ISR source Chain channel Asynchronous */
			ADC_u8ISRSourse = CHAIN_ASYNCH;
    2674:	81 e0       	ldi	r24, 0x01	; 1
    2676:	80 93 b9 01 	sts	0x01B9, r24
			
			/* initialize Chain Channel array globally  */
			ADC_pu8ChainChannelArr = Copy_Chain->ADC_Channels;
    267a:	ea 81       	ldd	r30, Y+2	; 0x02
    267c:	fb 81       	ldd	r31, Y+3	; 0x03
    267e:	82 81       	ldd	r24, Z+2	; 0x02
    2680:	93 81       	ldd	r25, Z+3	; 0x03
    2682:	90 93 b6 01 	sts	0x01B6, r25
    2686:	80 93 b5 01 	sts	0x01B5, r24
			
			/* Initialize the reading variable globally */
			ADC_pu16ChainResultArr = Copy_Chain->Reading;
    268a:	ea 81       	ldd	r30, Y+2	; 0x02
    268c:	fb 81       	ldd	r31, Y+3	; 0x03
    268e:	80 81       	ld	r24, Z
    2690:	91 81       	ldd	r25, Z+1	; 0x01
    2692:	90 93 b4 01 	sts	0x01B4, r25
    2696:	80 93 b3 01 	sts	0x01B3, r24
			
			/* initialize Chain Size globally */
			ADC_u8ChainSize = Copy_Chain->Size;
    269a:	ea 81       	ldd	r30, Y+2	; 0x02
    269c:	fb 81       	ldd	r31, Y+3	; 0x03
    269e:	84 81       	ldd	r24, Z+4	; 0x04
    26a0:	80 93 b7 01 	sts	0x01B7, r24

			/* Initialize The Callback Notification Function Globally*/
			ADC_pvCallBackNotificationFunc = Copy_Chain->ADC_pvNotificationFunc;
    26a4:	ea 81       	ldd	r30, Y+2	; 0x02
    26a6:	fb 81       	ldd	r31, Y+3	; 0x03
    26a8:	85 81       	ldd	r24, Z+5	; 0x05
    26aa:	96 81       	ldd	r25, Z+6	; 0x06
    26ac:	90 93 b0 01 	sts	0x01B0, r25
    26b0:	80 93 af 01 	sts	0x01AF, r24
			
			/* Initialize current conversion Index*/
			ADC_u8ChainConversionIndex = 0;
    26b4:	10 92 b8 01 	sts	0x01B8, r1
			
			/* Select Channel */
			ADMUX &= ADC_SELEC_CHANNEL_MASK; 	   /* Clear the MUX bits in ADMUX register*/
    26b8:	a7 e2       	ldi	r26, 0x27	; 39
    26ba:	b0 e0       	ldi	r27, 0x00	; 0
    26bc:	e7 e2       	ldi	r30, 0x27	; 39
    26be:	f0 e0       	ldi	r31, 0x00	; 0
    26c0:	80 81       	ld	r24, Z
    26c2:	80 7e       	andi	r24, 0xE0	; 224
    26c4:	8c 93       	st	X, r24
			ADMUX |= Copy_Chain->ADC_Channels[ADC_u8ChainConversionIndex];  /*Set the required channel into the MUX bits*/
    26c6:	a7 e2       	ldi	r26, 0x27	; 39
    26c8:	b0 e0       	ldi	r27, 0x00	; 0
    26ca:	e7 e2       	ldi	r30, 0x27	; 39
    26cc:	f0 e0       	ldi	r31, 0x00	; 0
    26ce:	40 81       	ld	r20, Z
    26d0:	ea 81       	ldd	r30, Y+2	; 0x02
    26d2:	fb 81       	ldd	r31, Y+3	; 0x03
    26d4:	22 81       	ldd	r18, Z+2	; 0x02
    26d6:	33 81       	ldd	r19, Z+3	; 0x03
    26d8:	80 91 b8 01 	lds	r24, 0x01B8
    26dc:	88 2f       	mov	r24, r24
    26de:	90 e0       	ldi	r25, 0x00	; 0
    26e0:	f9 01       	movw	r30, r18
    26e2:	e8 0f       	add	r30, r24
    26e4:	f9 1f       	adc	r31, r25
    26e6:	80 81       	ld	r24, Z
    26e8:	84 2b       	or	r24, r20
    26ea:	8c 93       	st	X, r24
			/* Start Conversion */
			SET_BIT(ADCSRA, ADCSRA_ADSC);
			#endif

			/* Enable INT */
			MADC_voidInterruptEnable();
    26ec:	0e 94 82 13 	call	0x2704	; 0x2704 <MADC_voidInterruptEnable>
    26f0:	02 c0       	rjmp	.+4      	; 0x26f6 <MADC_StartChainConversionAsynch+0xb4>
		}
		else
		{
			Local_ErrorState = BUSY_FUNC;
    26f2:	87 e0       	ldi	r24, 0x07	; 7
    26f4:	89 83       	std	Y+1, r24	; 0x01
		}
	}

	return Local_ErrorState;
    26f6:	89 81       	ldd	r24, Y+1	; 0x01
}
    26f8:	0f 90       	pop	r0
    26fa:	0f 90       	pop	r0
    26fc:	0f 90       	pop	r0
    26fe:	cf 91       	pop	r28
    2700:	df 91       	pop	r29
    2702:	08 95       	ret

00002704 <MADC_voidInterruptEnable>:
/******************* End ADC Start Chain Conversion Asynch *********************/

/***************************** ADC Interrupt Enable ****************************/
void MADC_voidInterruptEnable(void)
{
    2704:	df 93       	push	r29
    2706:	cf 93       	push	r28
    2708:	cd b7       	in	r28, 0x3d	; 61
    270a:	de b7       	in	r29, 0x3e	; 62
	/* Enable INT for ADC  */
	SET_BIT(ADCSRA,ADCSRA_ADIE);
    270c:	a6 e2       	ldi	r26, 0x26	; 38
    270e:	b0 e0       	ldi	r27, 0x00	; 0
    2710:	e6 e2       	ldi	r30, 0x26	; 38
    2712:	f0 e0       	ldi	r31, 0x00	; 0
    2714:	80 81       	ld	r24, Z
    2716:	88 60       	ori	r24, 0x08	; 8
    2718:	8c 93       	st	X, r24
}
    271a:	cf 91       	pop	r28
    271c:	df 91       	pop	r29
    271e:	08 95       	ret

00002720 <MADC_voidInterruptDisable>:
/************************* End ADC Interrupt Enable ****************************/

/***************************** ADC Interrupt Disable ***************************/
void MADC_voidInterruptDisable(void)
{
    2720:	df 93       	push	r29
    2722:	cf 93       	push	r28
    2724:	cd b7       	in	r28, 0x3d	; 61
    2726:	de b7       	in	r29, 0x3e	; 62
	/* Disable INT for ADC  */
	CLR_BIT(ADCSRA,ADCSRA_ADIE);
    2728:	a6 e2       	ldi	r26, 0x26	; 38
    272a:	b0 e0       	ldi	r27, 0x00	; 0
    272c:	e6 e2       	ldi	r30, 0x26	; 38
    272e:	f0 e0       	ldi	r31, 0x00	; 0
    2730:	80 81       	ld	r24, Z
    2732:	87 7f       	andi	r24, 0xF7	; 247
    2734:	8c 93       	st	X, r24
}
    2736:	cf 91       	pop	r28
    2738:	df 91       	pop	r29
    273a:	08 95       	ret

0000273c <__vector_16>:



/************** ISR ***************/
ISR_(ADC_VECTOR)
{
    273c:	1f 92       	push	r1
    273e:	0f 92       	push	r0
    2740:	0f b6       	in	r0, 0x3f	; 63
    2742:	0f 92       	push	r0
    2744:	11 24       	eor	r1, r1
    2746:	2f 93       	push	r18
    2748:	3f 93       	push	r19
    274a:	4f 93       	push	r20
    274c:	5f 93       	push	r21
    274e:	6f 93       	push	r22
    2750:	7f 93       	push	r23
    2752:	8f 93       	push	r24
    2754:	9f 93       	push	r25
    2756:	af 93       	push	r26
    2758:	bf 93       	push	r27
    275a:	ef 93       	push	r30
    275c:	ff 93       	push	r31
    275e:	df 93       	push	r29
    2760:	cf 93       	push	r28
    2762:	cd b7       	in	r28, 0x3d	; 61
    2764:	de b7       	in	r29, 0x3e	; 62
	if (ADC_u8ISRSourse == SINGLE_CHANNEL_ASYNCH)
    2766:	80 91 b9 01 	lds	r24, 0x01B9
    276a:	88 23       	and	r24, r24
    276c:	91 f4       	brne	.+36     	; 0x2792 <__vector_16+0x56>
	{		
		/* Read ADC Result */
		*ADC_pu16Reading = ADC;
    276e:	a0 91 b1 01 	lds	r26, 0x01B1
    2772:	b0 91 b2 01 	lds	r27, 0x01B2
    2776:	e4 e2       	ldi	r30, 0x24	; 36
    2778:	f0 e0       	ldi	r31, 0x00	; 0
    277a:	80 81       	ld	r24, Z
    277c:	91 81       	ldd	r25, Z+1	; 0x01
    277e:	8d 93       	st	X+, r24
    2780:	9c 93       	st	X, r25
		/* Make ADC state be IDLE because it finished*/
		ADC_u8BusyState = IDLE;
    2782:	10 92 ae 01 	sts	0x01AE, r1
		/* Invoke the callback notification function */
		ADC_pvCallBackNotificationFunc();
    2786:	e0 91 af 01 	lds	r30, 0x01AF
    278a:	f0 91 b0 01 	lds	r31, 0x01B0
    278e:	09 95       	icall
    2790:	4f c0       	rjmp	.+158    	; 0x2830 <__vector_16+0xf4>
		/* Disable ADC Conversion complete interrupt */
		//MADC_voidInterruptDisable();
		
	} 
	else if (ADC_u8ISRSourse == CHAIN_ASYNCH)
    2792:	80 91 b9 01 	lds	r24, 0x01B9
    2796:	81 30       	cpi	r24, 0x01	; 1
    2798:	09 f0       	breq	.+2      	; 0x279c <__vector_16+0x60>
    279a:	4a c0       	rjmp	.+148    	; 0x2830 <__vector_16+0xf4>
	{
		/* Read ADC Result */
		 ADC_pu16Reading[ADC_u8ChainConversionIndex] = ADC;
    279c:	20 91 b1 01 	lds	r18, 0x01B1
    27a0:	30 91 b2 01 	lds	r19, 0x01B2
    27a4:	80 91 b8 01 	lds	r24, 0x01B8
    27a8:	88 2f       	mov	r24, r24
    27aa:	90 e0       	ldi	r25, 0x00	; 0
    27ac:	88 0f       	add	r24, r24
    27ae:	99 1f       	adc	r25, r25
    27b0:	d9 01       	movw	r26, r18
    27b2:	a8 0f       	add	r26, r24
    27b4:	b9 1f       	adc	r27, r25
    27b6:	e4 e2       	ldi	r30, 0x24	; 36
    27b8:	f0 e0       	ldi	r31, 0x00	; 0
    27ba:	80 81       	ld	r24, Z
    27bc:	91 81       	ldd	r25, Z+1	; 0x01
    27be:	11 96       	adiw	r26, 0x01	; 1
    27c0:	9c 93       	st	X, r25
    27c2:	8e 93       	st	-X, r24
		 /* Increment ADC Chain Conversion Index */
		 ADC_u8ChainConversionIndex ++;
    27c4:	80 91 b8 01 	lds	r24, 0x01B8
    27c8:	8f 5f       	subi	r24, 0xFF	; 255
    27ca:	80 93 b8 01 	sts	0x01B8, r24
		
		/* check chain is finished or not */
		if (ADC_u8ChainConversionIndex == ADC_u8ChainSize)
    27ce:	90 91 b8 01 	lds	r25, 0x01B8
    27d2:	80 91 b7 01 	lds	r24, 0x01B7
    27d6:	98 17       	cp	r25, r24
    27d8:	51 f4       	brne	.+20     	; 0x27ee <__vector_16+0xb2>
		{
			/* Make ADC state be IDLE because it finished*/
			ADC_u8BusyState = IDLE;
    27da:	10 92 ae 01 	sts	0x01AE, r1
			
			/* Invoke the callback notification function */
			ADC_pvCallBackNotificationFunc();
    27de:	e0 91 af 01 	lds	r30, 0x01AF
    27e2:	f0 91 b0 01 	lds	r31, 0x01B0
    27e6:	09 95       	icall
			
			/* Disable ADC Conversion complete interrupt */
			MADC_voidInterruptDisable();
    27e8:	0e 94 90 13 	call	0x2720	; 0x2720 <MADC_voidInterruptDisable>
    27ec:	21 c0       	rjmp	.+66     	; 0x2830 <__vector_16+0xf4>
		} 
		else
		{
			/* Select Channel*/
			ADMUX &= ADC_SELEC_CHANNEL_MASK; 	                          /* Clear the MUX bits in ADMUX register*/
    27ee:	a7 e2       	ldi	r26, 0x27	; 39
    27f0:	b0 e0       	ldi	r27, 0x00	; 0
    27f2:	e7 e2       	ldi	r30, 0x27	; 39
    27f4:	f0 e0       	ldi	r31, 0x00	; 0
    27f6:	80 81       	ld	r24, Z
    27f8:	80 7e       	andi	r24, 0xE0	; 224
    27fa:	8c 93       	st	X, r24
			ADMUX |= ADC_pu8ChainChannelArr[ADC_u8ChainConversionIndex];  /*Set the required channel into the MUX bits*/
    27fc:	a7 e2       	ldi	r26, 0x27	; 39
    27fe:	b0 e0       	ldi	r27, 0x00	; 0
    2800:	e7 e2       	ldi	r30, 0x27	; 39
    2802:	f0 e0       	ldi	r31, 0x00	; 0
    2804:	40 81       	ld	r20, Z
    2806:	20 91 b5 01 	lds	r18, 0x01B5
    280a:	30 91 b6 01 	lds	r19, 0x01B6
    280e:	80 91 b8 01 	lds	r24, 0x01B8
    2812:	88 2f       	mov	r24, r24
    2814:	90 e0       	ldi	r25, 0x00	; 0
    2816:	f9 01       	movw	r30, r18
    2818:	e8 0f       	add	r30, r24
    281a:	f9 1f       	adc	r31, r25
    281c:	80 81       	ld	r24, Z
    281e:	84 2b       	or	r24, r20
    2820:	8c 93       	st	X, r24
			
			/* Start Conversion */
			SET_BIT(ADCSRA, ADCSRA_ADSC);
    2822:	a6 e2       	ldi	r26, 0x26	; 38
    2824:	b0 e0       	ldi	r27, 0x00	; 0
    2826:	e6 e2       	ldi	r30, 0x26	; 38
    2828:	f0 e0       	ldi	r31, 0x00	; 0
    282a:	80 81       	ld	r24, Z
    282c:	80 64       	ori	r24, 0x40	; 64
    282e:	8c 93       	st	X, r24
		}
		
		
	}
	
}
    2830:	cf 91       	pop	r28
    2832:	df 91       	pop	r29
    2834:	ff 91       	pop	r31
    2836:	ef 91       	pop	r30
    2838:	bf 91       	pop	r27
    283a:	af 91       	pop	r26
    283c:	9f 91       	pop	r25
    283e:	8f 91       	pop	r24
    2840:	7f 91       	pop	r23
    2842:	6f 91       	pop	r22
    2844:	5f 91       	pop	r21
    2846:	4f 91       	pop	r20
    2848:	3f 91       	pop	r19
    284a:	2f 91       	pop	r18
    284c:	0f 90       	pop	r0
    284e:	0f be       	out	0x3f, r0	; 63
    2850:	0f 90       	pop	r0
    2852:	1f 90       	pop	r1
    2854:	18 95       	reti

00002856 <HSSD_Init>:
#include "../HSSD/HSSD_interface.h"
#include "../HSSD/HSSD_config.h"
#include "../HSSD/HSSD_private.h"

error_state_t HSSD_Init(void)
{
    2856:	df 93       	push	r29
    2858:	cf 93       	push	r28
    285a:	0f 92       	push	r0
    285c:	cd b7       	in	r28, 0x3d	; 61
    285e:	de b7       	in	r29, 0x3e	; 62
	error_state_t Local_ErrorState = R_OK;
    2860:	81 e0       	ldi	r24, 0x01	; 1
    2862:	89 83       	std	Y+1, r24	; 0x01

	MDIO_SetPinDirection(SSD_DATA_PORT,DATA_PIN_A, DIO_u8PIN_OUTPUT);
    2864:	81 e0       	ldi	r24, 0x01	; 1
    2866:	60 e0       	ldi	r22, 0x00	; 0
    2868:	41 e0       	ldi	r20, 0x01	; 1
    286a:	0e 94 76 0d 	call	0x1aec	; 0x1aec <MDIO_SetPinDirection>
	MDIO_SetPinDirection(SSD_DATA_PORT,DATA_PIN_B, DIO_u8PIN_OUTPUT);
    286e:	81 e0       	ldi	r24, 0x01	; 1
    2870:	61 e0       	ldi	r22, 0x01	; 1
    2872:	41 e0       	ldi	r20, 0x01	; 1
    2874:	0e 94 76 0d 	call	0x1aec	; 0x1aec <MDIO_SetPinDirection>
	MDIO_SetPinDirection(SSD_DATA_PORT,DATA_PIN_C, DIO_u8PIN_OUTPUT);
    2878:	81 e0       	ldi	r24, 0x01	; 1
    287a:	62 e0       	ldi	r22, 0x02	; 2
    287c:	41 e0       	ldi	r20, 0x01	; 1
    287e:	0e 94 76 0d 	call	0x1aec	; 0x1aec <MDIO_SetPinDirection>
	MDIO_SetPinDirection(SSD_DATA_PORT,DATA_PIN_D, DIO_u8PIN_OUTPUT);
    2882:	81 e0       	ldi	r24, 0x01	; 1
    2884:	64 e0       	ldi	r22, 0x04	; 4
    2886:	41 e0       	ldi	r20, 0x01	; 1
    2888:	0e 94 76 0d 	call	0x1aec	; 0x1aec <MDIO_SetPinDirection>

	MDIO_SetPinDirection(SSD_CTRL_PORT_1, SSD_1_EN_PIN, DIO_u8PIN_OUTPUT);
    288c:	80 e0       	ldi	r24, 0x00	; 0
    288e:	63 e0       	ldi	r22, 0x03	; 3
    2890:	41 e0       	ldi	r20, 0x01	; 1
    2892:	0e 94 76 0d 	call	0x1aec	; 0x1aec <MDIO_SetPinDirection>
	MDIO_SetPinDirection(SSD_CTRL_PORT_1, SSD_2_EN_PIN, DIO_u8PIN_OUTPUT);
    2896:	80 e0       	ldi	r24, 0x00	; 0
    2898:	62 e0       	ldi	r22, 0x02	; 2
    289a:	41 e0       	ldi	r20, 0x01	; 1
    289c:	0e 94 76 0d 	call	0x1aec	; 0x1aec <MDIO_SetPinDirection>
	MDIO_SetPinDirection(SSD_CTRL_PORT_2, SSD_3_EN_PIN, DIO_u8PIN_OUTPUT);
    28a0:	81 e0       	ldi	r24, 0x01	; 1
    28a2:	65 e0       	ldi	r22, 0x05	; 5
    28a4:	41 e0       	ldi	r20, 0x01	; 1
    28a6:	0e 94 76 0d 	call	0x1aec	; 0x1aec <MDIO_SetPinDirection>
	MDIO_SetPinDirection(SSD_CTRL_PORT_2, SSD_4_EN_PIN, DIO_u8PIN_OUTPUT);
    28aa:	81 e0       	ldi	r24, 0x01	; 1
    28ac:	66 e0       	ldi	r22, 0x06	; 6
    28ae:	41 e0       	ldi	r20, 0x01	; 1
    28b0:	0e 94 76 0d 	call	0x1aec	; 0x1aec <MDIO_SetPinDirection>


	return Local_ErrorState;
    28b4:	89 81       	ldd	r24, Y+1	; 0x01
}
    28b6:	0f 90       	pop	r0
    28b8:	cf 91       	pop	r28
    28ba:	df 91       	pop	r29
    28bc:	08 95       	ret

000028be <HSSD_WriteData>:
error_state_t HSSD_WriteData(u8 Copy_u8Num)
{
    28be:	df 93       	push	r29
    28c0:	cf 93       	push	r28
    28c2:	00 d0       	rcall	.+0      	; 0x28c4 <HSSD_WriteData+0x6>
    28c4:	cd b7       	in	r28, 0x3d	; 61
    28c6:	de b7       	in	r29, 0x3e	; 62
    28c8:	8a 83       	std	Y+2, r24	; 0x02
	error_state_t Local_ErrorState = R_OK;
    28ca:	81 e0       	ldi	r24, 0x01	; 1
    28cc:	89 83       	std	Y+1, r24	; 0x01

	MDIO_SetPinValue(SSD_DATA_PORT,DATA_PIN_A,GET_BIT(Copy_u8Num,PIN_0));
    28ce:	8a 81       	ldd	r24, Y+2	; 0x02
    28d0:	98 2f       	mov	r25, r24
    28d2:	91 70       	andi	r25, 0x01	; 1
    28d4:	81 e0       	ldi	r24, 0x01	; 1
    28d6:	60 e0       	ldi	r22, 0x00	; 0
    28d8:	49 2f       	mov	r20, r25
    28da:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <MDIO_SetPinValue>
	MDIO_SetPinValue(SSD_DATA_PORT,DATA_PIN_B,GET_BIT(Copy_u8Num,PIN_1));
    28de:	8a 81       	ldd	r24, Y+2	; 0x02
    28e0:	86 95       	lsr	r24
    28e2:	98 2f       	mov	r25, r24
    28e4:	91 70       	andi	r25, 0x01	; 1
    28e6:	81 e0       	ldi	r24, 0x01	; 1
    28e8:	61 e0       	ldi	r22, 0x01	; 1
    28ea:	49 2f       	mov	r20, r25
    28ec:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <MDIO_SetPinValue>
	MDIO_SetPinValue(SSD_DATA_PORT,DATA_PIN_C,GET_BIT(Copy_u8Num,PIN_2));
    28f0:	8a 81       	ldd	r24, Y+2	; 0x02
    28f2:	86 95       	lsr	r24
    28f4:	86 95       	lsr	r24
    28f6:	98 2f       	mov	r25, r24
    28f8:	91 70       	andi	r25, 0x01	; 1
    28fa:	81 e0       	ldi	r24, 0x01	; 1
    28fc:	62 e0       	ldi	r22, 0x02	; 2
    28fe:	49 2f       	mov	r20, r25
    2900:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <MDIO_SetPinValue>
	MDIO_SetPinValue(SSD_DATA_PORT,DATA_PIN_D,GET_BIT(Copy_u8Num,PIN_3));
    2904:	8a 81       	ldd	r24, Y+2	; 0x02
    2906:	86 95       	lsr	r24
    2908:	86 95       	lsr	r24
    290a:	86 95       	lsr	r24
    290c:	98 2f       	mov	r25, r24
    290e:	91 70       	andi	r25, 0x01	; 1
    2910:	81 e0       	ldi	r24, 0x01	; 1
    2912:	64 e0       	ldi	r22, 0x04	; 4
    2914:	49 2f       	mov	r20, r25
    2916:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <MDIO_SetPinValue>

	return Local_ErrorState;
    291a:	89 81       	ldd	r24, Y+1	; 0x01

}
    291c:	0f 90       	pop	r0
    291e:	0f 90       	pop	r0
    2920:	cf 91       	pop	r28
    2922:	df 91       	pop	r29
    2924:	08 95       	ret

00002926 <HSSD_DisplayBlink>:

error_state_t HSSD_DisplayBlink(u32 Copy_u8Num)
{
    2926:	0f 93       	push	r16
    2928:	1f 93       	push	r17
    292a:	df 93       	push	r29
    292c:	cf 93       	push	r28
    292e:	cd b7       	in	r28, 0x3d	; 61
    2930:	de b7       	in	r29, 0x3e	; 62
    2932:	c2 54       	subi	r28, 0x42	; 66
    2934:	d0 40       	sbci	r29, 0x00	; 0
    2936:	0f b6       	in	r0, 0x3f	; 63
    2938:	f8 94       	cli
    293a:	de bf       	out	0x3e, r29	; 62
    293c:	0f be       	out	0x3f, r0	; 63
    293e:	cd bf       	out	0x3d, r28	; 61
    2940:	fe 01       	movw	r30, r28
    2942:	ff 96       	adiw	r30, 0x3f	; 63
    2944:	60 83       	st	Z, r22
    2946:	71 83       	std	Z+1, r23	; 0x01
    2948:	82 83       	std	Z+2, r24	; 0x02
    294a:	93 83       	std	Z+3, r25	; 0x03
	error_state_t Local_ErrorState = R_OK;
    294c:	81 e0       	ldi	r24, 0x01	; 1
    294e:	8e af       	std	Y+62, r24	; 0x3e
	// there other way to use array instead
	//u8 copy_u8Digit [4];

	u8 Local_u8Ones = Copy_u8Num%10;
    2950:	fe 01       	movw	r30, r28
    2952:	ff 96       	adiw	r30, 0x3f	; 63
    2954:	80 81       	ld	r24, Z
    2956:	91 81       	ldd	r25, Z+1	; 0x01
    2958:	a2 81       	ldd	r26, Z+2	; 0x02
    295a:	b3 81       	ldd	r27, Z+3	; 0x03
    295c:	2a e0       	ldi	r18, 0x0A	; 10
    295e:	30 e0       	ldi	r19, 0x00	; 0
    2960:	40 e0       	ldi	r20, 0x00	; 0
    2962:	50 e0       	ldi	r21, 0x00	; 0
    2964:	bc 01       	movw	r22, r24
    2966:	cd 01       	movw	r24, r26
    2968:	0e 94 a7 21 	call	0x434e	; 0x434e <__udivmodsi4>
    296c:	dc 01       	movw	r26, r24
    296e:	cb 01       	movw	r24, r22
    2970:	8d af       	std	Y+61, r24	; 0x3d
	Copy_u8Num/=10;
    2972:	8e 01       	movw	r16, r28
    2974:	01 5c       	subi	r16, 0xC1	; 193
    2976:	1f 4f       	sbci	r17, 0xFF	; 255
    2978:	fe 01       	movw	r30, r28
    297a:	ff 96       	adiw	r30, 0x3f	; 63
    297c:	80 81       	ld	r24, Z
    297e:	91 81       	ldd	r25, Z+1	; 0x01
    2980:	a2 81       	ldd	r26, Z+2	; 0x02
    2982:	b3 81       	ldd	r27, Z+3	; 0x03
    2984:	2a e0       	ldi	r18, 0x0A	; 10
    2986:	30 e0       	ldi	r19, 0x00	; 0
    2988:	40 e0       	ldi	r20, 0x00	; 0
    298a:	50 e0       	ldi	r21, 0x00	; 0
    298c:	bc 01       	movw	r22, r24
    298e:	cd 01       	movw	r24, r26
    2990:	0e 94 a7 21 	call	0x434e	; 0x434e <__udivmodsi4>
    2994:	da 01       	movw	r26, r20
    2996:	c9 01       	movw	r24, r18
    2998:	f8 01       	movw	r30, r16
    299a:	80 83       	st	Z, r24
    299c:	91 83       	std	Z+1, r25	; 0x01
    299e:	a2 83       	std	Z+2, r26	; 0x02
    29a0:	b3 83       	std	Z+3, r27	; 0x03
	u8 Local_u8Tens = Copy_u8Num%10;
    29a2:	fe 01       	movw	r30, r28
    29a4:	ff 96       	adiw	r30, 0x3f	; 63
    29a6:	80 81       	ld	r24, Z
    29a8:	91 81       	ldd	r25, Z+1	; 0x01
    29aa:	a2 81       	ldd	r26, Z+2	; 0x02
    29ac:	b3 81       	ldd	r27, Z+3	; 0x03
    29ae:	2a e0       	ldi	r18, 0x0A	; 10
    29b0:	30 e0       	ldi	r19, 0x00	; 0
    29b2:	40 e0       	ldi	r20, 0x00	; 0
    29b4:	50 e0       	ldi	r21, 0x00	; 0
    29b6:	bc 01       	movw	r22, r24
    29b8:	cd 01       	movw	r24, r26
    29ba:	0e 94 a7 21 	call	0x434e	; 0x434e <__udivmodsi4>
    29be:	dc 01       	movw	r26, r24
    29c0:	cb 01       	movw	r24, r22
    29c2:	8c af       	std	Y+60, r24	; 0x3c
	Copy_u8Num/=10;
    29c4:	8e 01       	movw	r16, r28
    29c6:	01 5c       	subi	r16, 0xC1	; 193
    29c8:	1f 4f       	sbci	r17, 0xFF	; 255
    29ca:	fe 01       	movw	r30, r28
    29cc:	ff 96       	adiw	r30, 0x3f	; 63
    29ce:	80 81       	ld	r24, Z
    29d0:	91 81       	ldd	r25, Z+1	; 0x01
    29d2:	a2 81       	ldd	r26, Z+2	; 0x02
    29d4:	b3 81       	ldd	r27, Z+3	; 0x03
    29d6:	2a e0       	ldi	r18, 0x0A	; 10
    29d8:	30 e0       	ldi	r19, 0x00	; 0
    29da:	40 e0       	ldi	r20, 0x00	; 0
    29dc:	50 e0       	ldi	r21, 0x00	; 0
    29de:	bc 01       	movw	r22, r24
    29e0:	cd 01       	movw	r24, r26
    29e2:	0e 94 a7 21 	call	0x434e	; 0x434e <__udivmodsi4>
    29e6:	da 01       	movw	r26, r20
    29e8:	c9 01       	movw	r24, r18
    29ea:	f8 01       	movw	r30, r16
    29ec:	80 83       	st	Z, r24
    29ee:	91 83       	std	Z+1, r25	; 0x01
    29f0:	a2 83       	std	Z+2, r26	; 0x02
    29f2:	b3 83       	std	Z+3, r27	; 0x03
	u8 Local_u8Hundred = Copy_u8Num%10;
    29f4:	fe 01       	movw	r30, r28
    29f6:	ff 96       	adiw	r30, 0x3f	; 63
    29f8:	80 81       	ld	r24, Z
    29fa:	91 81       	ldd	r25, Z+1	; 0x01
    29fc:	a2 81       	ldd	r26, Z+2	; 0x02
    29fe:	b3 81       	ldd	r27, Z+3	; 0x03
    2a00:	2a e0       	ldi	r18, 0x0A	; 10
    2a02:	30 e0       	ldi	r19, 0x00	; 0
    2a04:	40 e0       	ldi	r20, 0x00	; 0
    2a06:	50 e0       	ldi	r21, 0x00	; 0
    2a08:	bc 01       	movw	r22, r24
    2a0a:	cd 01       	movw	r24, r26
    2a0c:	0e 94 a7 21 	call	0x434e	; 0x434e <__udivmodsi4>
    2a10:	dc 01       	movw	r26, r24
    2a12:	cb 01       	movw	r24, r22
    2a14:	8b af       	std	Y+59, r24	; 0x3b
	Copy_u8Num/=10;
    2a16:	8e 01       	movw	r16, r28
    2a18:	01 5c       	subi	r16, 0xC1	; 193
    2a1a:	1f 4f       	sbci	r17, 0xFF	; 255
    2a1c:	fe 01       	movw	r30, r28
    2a1e:	ff 96       	adiw	r30, 0x3f	; 63
    2a20:	80 81       	ld	r24, Z
    2a22:	91 81       	ldd	r25, Z+1	; 0x01
    2a24:	a2 81       	ldd	r26, Z+2	; 0x02
    2a26:	b3 81       	ldd	r27, Z+3	; 0x03
    2a28:	2a e0       	ldi	r18, 0x0A	; 10
    2a2a:	30 e0       	ldi	r19, 0x00	; 0
    2a2c:	40 e0       	ldi	r20, 0x00	; 0
    2a2e:	50 e0       	ldi	r21, 0x00	; 0
    2a30:	bc 01       	movw	r22, r24
    2a32:	cd 01       	movw	r24, r26
    2a34:	0e 94 a7 21 	call	0x434e	; 0x434e <__udivmodsi4>
    2a38:	da 01       	movw	r26, r20
    2a3a:	c9 01       	movw	r24, r18
    2a3c:	f8 01       	movw	r30, r16
    2a3e:	80 83       	st	Z, r24
    2a40:	91 83       	std	Z+1, r25	; 0x01
    2a42:	a2 83       	std	Z+2, r26	; 0x02
    2a44:	b3 83       	std	Z+3, r27	; 0x03
	u8 Local_u8Thousand = Copy_u8Num;
    2a46:	fe 01       	movw	r30, r28
    2a48:	ff 96       	adiw	r30, 0x3f	; 63
    2a4a:	80 81       	ld	r24, Z
    2a4c:	8a af       	std	Y+58, r24	; 0x3a

	u8 Local_u8BlinkCounter = 0;
    2a4e:	19 ae       	std	Y+57, r1	; 0x39
	for (Local_u8BlinkCounter = 0; Local_u8BlinkCounter<60; Local_u8BlinkCounter++)
    2a50:	19 ae       	std	Y+57, r1	; 0x39
    2a52:	3b c2       	rjmp	.+1142   	; 0x2eca <HSSD_DisplayBlink+0x5a4>
	{
		MDIO_SetPinValue(SSD_CTRL_PORT_1, SSD_1_EN_PIN, DIO_u8PIN_LOW);
    2a54:	80 e0       	ldi	r24, 0x00	; 0
    2a56:	63 e0       	ldi	r22, 0x03	; 3
    2a58:	40 e0       	ldi	r20, 0x00	; 0
    2a5a:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <MDIO_SetPinValue>
		MDIO_SetPinValue(SSD_CTRL_PORT_1, SSD_2_EN_PIN, DIO_u8PIN_HIGH);
    2a5e:	80 e0       	ldi	r24, 0x00	; 0
    2a60:	62 e0       	ldi	r22, 0x02	; 2
    2a62:	41 e0       	ldi	r20, 0x01	; 1
    2a64:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <MDIO_SetPinValue>
		MDIO_SetPinValue(SSD_CTRL_PORT_2, SSD_3_EN_PIN, DIO_u8PIN_HIGH);
    2a68:	81 e0       	ldi	r24, 0x01	; 1
    2a6a:	65 e0       	ldi	r22, 0x05	; 5
    2a6c:	41 e0       	ldi	r20, 0x01	; 1
    2a6e:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <MDIO_SetPinValue>
		MDIO_SetPinValue(SSD_CTRL_PORT_2, SSD_4_EN_PIN, DIO_u8PIN_HIGH);
    2a72:	81 e0       	ldi	r24, 0x01	; 1
    2a74:	66 e0       	ldi	r22, 0x06	; 6
    2a76:	41 e0       	ldi	r20, 0x01	; 1
    2a78:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <MDIO_SetPinValue>
		HSSD_WriteData(Local_u8Ones);
    2a7c:	8d ad       	ldd	r24, Y+61	; 0x3d
    2a7e:	0e 94 5f 14 	call	0x28be	; 0x28be <HSSD_WriteData>
    2a82:	80 e0       	ldi	r24, 0x00	; 0
    2a84:	90 e0       	ldi	r25, 0x00	; 0
    2a86:	a0 ea       	ldi	r26, 0xA0	; 160
    2a88:	b0 e4       	ldi	r27, 0x40	; 64
    2a8a:	8d ab       	std	Y+53, r24	; 0x35
    2a8c:	9e ab       	std	Y+54, r25	; 0x36
    2a8e:	af ab       	std	Y+55, r26	; 0x37
    2a90:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a92:	6d a9       	ldd	r22, Y+53	; 0x35
    2a94:	7e a9       	ldd	r23, Y+54	; 0x36
    2a96:	8f a9       	ldd	r24, Y+55	; 0x37
    2a98:	98 ad       	ldd	r25, Y+56	; 0x38
    2a9a:	20 e0       	ldi	r18, 0x00	; 0
    2a9c:	30 e0       	ldi	r19, 0x00	; 0
    2a9e:	4a e7       	ldi	r20, 0x7A	; 122
    2aa0:	55 e4       	ldi	r21, 0x45	; 69
    2aa2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aa6:	dc 01       	movw	r26, r24
    2aa8:	cb 01       	movw	r24, r22
    2aaa:	89 ab       	std	Y+49, r24	; 0x31
    2aac:	9a ab       	std	Y+50, r25	; 0x32
    2aae:	ab ab       	std	Y+51, r26	; 0x33
    2ab0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2ab2:	69 a9       	ldd	r22, Y+49	; 0x31
    2ab4:	7a a9       	ldd	r23, Y+50	; 0x32
    2ab6:	8b a9       	ldd	r24, Y+51	; 0x33
    2ab8:	9c a9       	ldd	r25, Y+52	; 0x34
    2aba:	20 e0       	ldi	r18, 0x00	; 0
    2abc:	30 e0       	ldi	r19, 0x00	; 0
    2abe:	40 e8       	ldi	r20, 0x80	; 128
    2ac0:	5f e3       	ldi	r21, 0x3F	; 63
    2ac2:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2ac6:	88 23       	and	r24, r24
    2ac8:	2c f4       	brge	.+10     	; 0x2ad4 <HSSD_DisplayBlink+0x1ae>
		__ticks = 1;
    2aca:	81 e0       	ldi	r24, 0x01	; 1
    2acc:	90 e0       	ldi	r25, 0x00	; 0
    2ace:	98 ab       	std	Y+48, r25	; 0x30
    2ad0:	8f a7       	std	Y+47, r24	; 0x2f
    2ad2:	3f c0       	rjmp	.+126    	; 0x2b52 <HSSD_DisplayBlink+0x22c>
	else if (__tmp > 65535)
    2ad4:	69 a9       	ldd	r22, Y+49	; 0x31
    2ad6:	7a a9       	ldd	r23, Y+50	; 0x32
    2ad8:	8b a9       	ldd	r24, Y+51	; 0x33
    2ada:	9c a9       	ldd	r25, Y+52	; 0x34
    2adc:	20 e0       	ldi	r18, 0x00	; 0
    2ade:	3f ef       	ldi	r19, 0xFF	; 255
    2ae0:	4f e7       	ldi	r20, 0x7F	; 127
    2ae2:	57 e4       	ldi	r21, 0x47	; 71
    2ae4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2ae8:	18 16       	cp	r1, r24
    2aea:	4c f5       	brge	.+82     	; 0x2b3e <HSSD_DisplayBlink+0x218>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2aec:	6d a9       	ldd	r22, Y+53	; 0x35
    2aee:	7e a9       	ldd	r23, Y+54	; 0x36
    2af0:	8f a9       	ldd	r24, Y+55	; 0x37
    2af2:	98 ad       	ldd	r25, Y+56	; 0x38
    2af4:	20 e0       	ldi	r18, 0x00	; 0
    2af6:	30 e0       	ldi	r19, 0x00	; 0
    2af8:	40 e2       	ldi	r20, 0x20	; 32
    2afa:	51 e4       	ldi	r21, 0x41	; 65
    2afc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b00:	dc 01       	movw	r26, r24
    2b02:	cb 01       	movw	r24, r22
    2b04:	bc 01       	movw	r22, r24
    2b06:	cd 01       	movw	r24, r26
    2b08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b0c:	dc 01       	movw	r26, r24
    2b0e:	cb 01       	movw	r24, r22
    2b10:	98 ab       	std	Y+48, r25	; 0x30
    2b12:	8f a7       	std	Y+47, r24	; 0x2f
    2b14:	0f c0       	rjmp	.+30     	; 0x2b34 <HSSD_DisplayBlink+0x20e>
    2b16:	80 e9       	ldi	r24, 0x90	; 144
    2b18:	91 e0       	ldi	r25, 0x01	; 1
    2b1a:	9e a7       	std	Y+46, r25	; 0x2e
    2b1c:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2b1e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2b20:	9e a5       	ldd	r25, Y+46	; 0x2e
    2b22:	01 97       	sbiw	r24, 0x01	; 1
    2b24:	f1 f7       	brne	.-4      	; 0x2b22 <HSSD_DisplayBlink+0x1fc>
    2b26:	9e a7       	std	Y+46, r25	; 0x2e
    2b28:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b2a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b2c:	98 a9       	ldd	r25, Y+48	; 0x30
    2b2e:	01 97       	sbiw	r24, 0x01	; 1
    2b30:	98 ab       	std	Y+48, r25	; 0x30
    2b32:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b34:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b36:	98 a9       	ldd	r25, Y+48	; 0x30
    2b38:	00 97       	sbiw	r24, 0x00	; 0
    2b3a:	69 f7       	brne	.-38     	; 0x2b16 <HSSD_DisplayBlink+0x1f0>
    2b3c:	14 c0       	rjmp	.+40     	; 0x2b66 <HSSD_DisplayBlink+0x240>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b3e:	69 a9       	ldd	r22, Y+49	; 0x31
    2b40:	7a a9       	ldd	r23, Y+50	; 0x32
    2b42:	8b a9       	ldd	r24, Y+51	; 0x33
    2b44:	9c a9       	ldd	r25, Y+52	; 0x34
    2b46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b4a:	dc 01       	movw	r26, r24
    2b4c:	cb 01       	movw	r24, r22
    2b4e:	98 ab       	std	Y+48, r25	; 0x30
    2b50:	8f a7       	std	Y+47, r24	; 0x2f
    2b52:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b54:	98 a9       	ldd	r25, Y+48	; 0x30
    2b56:	9c a7       	std	Y+44, r25	; 0x2c
    2b58:	8b a7       	std	Y+43, r24	; 0x2b
    2b5a:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b5c:	9c a5       	ldd	r25, Y+44	; 0x2c
    2b5e:	01 97       	sbiw	r24, 0x01	; 1
    2b60:	f1 f7       	brne	.-4      	; 0x2b5e <HSSD_DisplayBlink+0x238>
    2b62:	9c a7       	std	Y+44, r25	; 0x2c
    2b64:	8b a7       	std	Y+43, r24	; 0x2b

		_delay_ms(5);

		MDIO_SetPinValue(SSD_CTRL_PORT_1, SSD_1_EN_PIN, DIO_u8PIN_HIGH);
    2b66:	80 e0       	ldi	r24, 0x00	; 0
    2b68:	63 e0       	ldi	r22, 0x03	; 3
    2b6a:	41 e0       	ldi	r20, 0x01	; 1
    2b6c:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <MDIO_SetPinValue>
		MDIO_SetPinValue(SSD_CTRL_PORT_1, SSD_2_EN_PIN, DIO_u8PIN_LOW);
    2b70:	80 e0       	ldi	r24, 0x00	; 0
    2b72:	62 e0       	ldi	r22, 0x02	; 2
    2b74:	40 e0       	ldi	r20, 0x00	; 0
    2b76:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <MDIO_SetPinValue>
		MDIO_SetPinValue(SSD_CTRL_PORT_2, SSD_3_EN_PIN, DIO_u8PIN_HIGH);
    2b7a:	81 e0       	ldi	r24, 0x01	; 1
    2b7c:	65 e0       	ldi	r22, 0x05	; 5
    2b7e:	41 e0       	ldi	r20, 0x01	; 1
    2b80:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <MDIO_SetPinValue>
		MDIO_SetPinValue(SSD_CTRL_PORT_2, SSD_4_EN_PIN, DIO_u8PIN_HIGH);
    2b84:	81 e0       	ldi	r24, 0x01	; 1
    2b86:	66 e0       	ldi	r22, 0x06	; 6
    2b88:	41 e0       	ldi	r20, 0x01	; 1
    2b8a:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <MDIO_SetPinValue>
		HSSD_WriteData(Local_u8Tens);
    2b8e:	8c ad       	ldd	r24, Y+60	; 0x3c
    2b90:	0e 94 5f 14 	call	0x28be	; 0x28be <HSSD_WriteData>
    2b94:	80 e0       	ldi	r24, 0x00	; 0
    2b96:	90 e0       	ldi	r25, 0x00	; 0
    2b98:	a0 ea       	ldi	r26, 0xA0	; 160
    2b9a:	b0 e4       	ldi	r27, 0x40	; 64
    2b9c:	8f a3       	std	Y+39, r24	; 0x27
    2b9e:	98 a7       	std	Y+40, r25	; 0x28
    2ba0:	a9 a7       	std	Y+41, r26	; 0x29
    2ba2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ba4:	6f a1       	ldd	r22, Y+39	; 0x27
    2ba6:	78 a5       	ldd	r23, Y+40	; 0x28
    2ba8:	89 a5       	ldd	r24, Y+41	; 0x29
    2baa:	9a a5       	ldd	r25, Y+42	; 0x2a
    2bac:	20 e0       	ldi	r18, 0x00	; 0
    2bae:	30 e0       	ldi	r19, 0x00	; 0
    2bb0:	4a e7       	ldi	r20, 0x7A	; 122
    2bb2:	55 e4       	ldi	r21, 0x45	; 69
    2bb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bb8:	dc 01       	movw	r26, r24
    2bba:	cb 01       	movw	r24, r22
    2bbc:	8b a3       	std	Y+35, r24	; 0x23
    2bbe:	9c a3       	std	Y+36, r25	; 0x24
    2bc0:	ad a3       	std	Y+37, r26	; 0x25
    2bc2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2bc4:	6b a1       	ldd	r22, Y+35	; 0x23
    2bc6:	7c a1       	ldd	r23, Y+36	; 0x24
    2bc8:	8d a1       	ldd	r24, Y+37	; 0x25
    2bca:	9e a1       	ldd	r25, Y+38	; 0x26
    2bcc:	20 e0       	ldi	r18, 0x00	; 0
    2bce:	30 e0       	ldi	r19, 0x00	; 0
    2bd0:	40 e8       	ldi	r20, 0x80	; 128
    2bd2:	5f e3       	ldi	r21, 0x3F	; 63
    2bd4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2bd8:	88 23       	and	r24, r24
    2bda:	2c f4       	brge	.+10     	; 0x2be6 <HSSD_DisplayBlink+0x2c0>
		__ticks = 1;
    2bdc:	81 e0       	ldi	r24, 0x01	; 1
    2bde:	90 e0       	ldi	r25, 0x00	; 0
    2be0:	9a a3       	std	Y+34, r25	; 0x22
    2be2:	89 a3       	std	Y+33, r24	; 0x21
    2be4:	3f c0       	rjmp	.+126    	; 0x2c64 <HSSD_DisplayBlink+0x33e>
	else if (__tmp > 65535)
    2be6:	6b a1       	ldd	r22, Y+35	; 0x23
    2be8:	7c a1       	ldd	r23, Y+36	; 0x24
    2bea:	8d a1       	ldd	r24, Y+37	; 0x25
    2bec:	9e a1       	ldd	r25, Y+38	; 0x26
    2bee:	20 e0       	ldi	r18, 0x00	; 0
    2bf0:	3f ef       	ldi	r19, 0xFF	; 255
    2bf2:	4f e7       	ldi	r20, 0x7F	; 127
    2bf4:	57 e4       	ldi	r21, 0x47	; 71
    2bf6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2bfa:	18 16       	cp	r1, r24
    2bfc:	4c f5       	brge	.+82     	; 0x2c50 <HSSD_DisplayBlink+0x32a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bfe:	6f a1       	ldd	r22, Y+39	; 0x27
    2c00:	78 a5       	ldd	r23, Y+40	; 0x28
    2c02:	89 a5       	ldd	r24, Y+41	; 0x29
    2c04:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c06:	20 e0       	ldi	r18, 0x00	; 0
    2c08:	30 e0       	ldi	r19, 0x00	; 0
    2c0a:	40 e2       	ldi	r20, 0x20	; 32
    2c0c:	51 e4       	ldi	r21, 0x41	; 65
    2c0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c12:	dc 01       	movw	r26, r24
    2c14:	cb 01       	movw	r24, r22
    2c16:	bc 01       	movw	r22, r24
    2c18:	cd 01       	movw	r24, r26
    2c1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c1e:	dc 01       	movw	r26, r24
    2c20:	cb 01       	movw	r24, r22
    2c22:	9a a3       	std	Y+34, r25	; 0x22
    2c24:	89 a3       	std	Y+33, r24	; 0x21
    2c26:	0f c0       	rjmp	.+30     	; 0x2c46 <HSSD_DisplayBlink+0x320>
    2c28:	80 e9       	ldi	r24, 0x90	; 144
    2c2a:	91 e0       	ldi	r25, 0x01	; 1
    2c2c:	98 a3       	std	Y+32, r25	; 0x20
    2c2e:	8f 8f       	std	Y+31, r24	; 0x1f
    2c30:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2c32:	98 a1       	ldd	r25, Y+32	; 0x20
    2c34:	01 97       	sbiw	r24, 0x01	; 1
    2c36:	f1 f7       	brne	.-4      	; 0x2c34 <HSSD_DisplayBlink+0x30e>
    2c38:	98 a3       	std	Y+32, r25	; 0x20
    2c3a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c3c:	89 a1       	ldd	r24, Y+33	; 0x21
    2c3e:	9a a1       	ldd	r25, Y+34	; 0x22
    2c40:	01 97       	sbiw	r24, 0x01	; 1
    2c42:	9a a3       	std	Y+34, r25	; 0x22
    2c44:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c46:	89 a1       	ldd	r24, Y+33	; 0x21
    2c48:	9a a1       	ldd	r25, Y+34	; 0x22
    2c4a:	00 97       	sbiw	r24, 0x00	; 0
    2c4c:	69 f7       	brne	.-38     	; 0x2c28 <HSSD_DisplayBlink+0x302>
    2c4e:	14 c0       	rjmp	.+40     	; 0x2c78 <HSSD_DisplayBlink+0x352>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c50:	6b a1       	ldd	r22, Y+35	; 0x23
    2c52:	7c a1       	ldd	r23, Y+36	; 0x24
    2c54:	8d a1       	ldd	r24, Y+37	; 0x25
    2c56:	9e a1       	ldd	r25, Y+38	; 0x26
    2c58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c5c:	dc 01       	movw	r26, r24
    2c5e:	cb 01       	movw	r24, r22
    2c60:	9a a3       	std	Y+34, r25	; 0x22
    2c62:	89 a3       	std	Y+33, r24	; 0x21
    2c64:	89 a1       	ldd	r24, Y+33	; 0x21
    2c66:	9a a1       	ldd	r25, Y+34	; 0x22
    2c68:	9e 8f       	std	Y+30, r25	; 0x1e
    2c6a:	8d 8f       	std	Y+29, r24	; 0x1d
    2c6c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c6e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c70:	01 97       	sbiw	r24, 0x01	; 1
    2c72:	f1 f7       	brne	.-4      	; 0x2c70 <HSSD_DisplayBlink+0x34a>
    2c74:	9e 8f       	std	Y+30, r25	; 0x1e
    2c76:	8d 8f       	std	Y+29, r24	; 0x1d

		_delay_ms(5);

		MDIO_SetPinValue(SSD_CTRL_PORT_1, SSD_1_EN_PIN, DIO_u8PIN_HIGH);
    2c78:	80 e0       	ldi	r24, 0x00	; 0
    2c7a:	63 e0       	ldi	r22, 0x03	; 3
    2c7c:	41 e0       	ldi	r20, 0x01	; 1
    2c7e:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <MDIO_SetPinValue>
		MDIO_SetPinValue(SSD_CTRL_PORT_1, SSD_2_EN_PIN, DIO_u8PIN_HIGH);
    2c82:	80 e0       	ldi	r24, 0x00	; 0
    2c84:	62 e0       	ldi	r22, 0x02	; 2
    2c86:	41 e0       	ldi	r20, 0x01	; 1
    2c88:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <MDIO_SetPinValue>
		MDIO_SetPinValue(SSD_CTRL_PORT_2, SSD_3_EN_PIN, DIO_u8PIN_LOW);
    2c8c:	81 e0       	ldi	r24, 0x01	; 1
    2c8e:	65 e0       	ldi	r22, 0x05	; 5
    2c90:	40 e0       	ldi	r20, 0x00	; 0
    2c92:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <MDIO_SetPinValue>
		MDIO_SetPinValue(SSD_CTRL_PORT_2, SSD_4_EN_PIN, DIO_u8PIN_HIGH);
    2c96:	81 e0       	ldi	r24, 0x01	; 1
    2c98:	66 e0       	ldi	r22, 0x06	; 6
    2c9a:	41 e0       	ldi	r20, 0x01	; 1
    2c9c:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <MDIO_SetPinValue>
		HSSD_WriteData(Local_u8Hundred);
    2ca0:	8b ad       	ldd	r24, Y+59	; 0x3b
    2ca2:	0e 94 5f 14 	call	0x28be	; 0x28be <HSSD_WriteData>
    2ca6:	80 e0       	ldi	r24, 0x00	; 0
    2ca8:	90 e0       	ldi	r25, 0x00	; 0
    2caa:	a0 ea       	ldi	r26, 0xA0	; 160
    2cac:	b0 e4       	ldi	r27, 0x40	; 64
    2cae:	89 8f       	std	Y+25, r24	; 0x19
    2cb0:	9a 8f       	std	Y+26, r25	; 0x1a
    2cb2:	ab 8f       	std	Y+27, r26	; 0x1b
    2cb4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cb6:	69 8d       	ldd	r22, Y+25	; 0x19
    2cb8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2cba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2cbc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2cbe:	20 e0       	ldi	r18, 0x00	; 0
    2cc0:	30 e0       	ldi	r19, 0x00	; 0
    2cc2:	4a e7       	ldi	r20, 0x7A	; 122
    2cc4:	55 e4       	ldi	r21, 0x45	; 69
    2cc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cca:	dc 01       	movw	r26, r24
    2ccc:	cb 01       	movw	r24, r22
    2cce:	8d 8b       	std	Y+21, r24	; 0x15
    2cd0:	9e 8b       	std	Y+22, r25	; 0x16
    2cd2:	af 8b       	std	Y+23, r26	; 0x17
    2cd4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2cd6:	6d 89       	ldd	r22, Y+21	; 0x15
    2cd8:	7e 89       	ldd	r23, Y+22	; 0x16
    2cda:	8f 89       	ldd	r24, Y+23	; 0x17
    2cdc:	98 8d       	ldd	r25, Y+24	; 0x18
    2cde:	20 e0       	ldi	r18, 0x00	; 0
    2ce0:	30 e0       	ldi	r19, 0x00	; 0
    2ce2:	40 e8       	ldi	r20, 0x80	; 128
    2ce4:	5f e3       	ldi	r21, 0x3F	; 63
    2ce6:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2cea:	88 23       	and	r24, r24
    2cec:	2c f4       	brge	.+10     	; 0x2cf8 <HSSD_DisplayBlink+0x3d2>
		__ticks = 1;
    2cee:	81 e0       	ldi	r24, 0x01	; 1
    2cf0:	90 e0       	ldi	r25, 0x00	; 0
    2cf2:	9c 8b       	std	Y+20, r25	; 0x14
    2cf4:	8b 8b       	std	Y+19, r24	; 0x13
    2cf6:	3f c0       	rjmp	.+126    	; 0x2d76 <HSSD_DisplayBlink+0x450>
	else if (__tmp > 65535)
    2cf8:	6d 89       	ldd	r22, Y+21	; 0x15
    2cfa:	7e 89       	ldd	r23, Y+22	; 0x16
    2cfc:	8f 89       	ldd	r24, Y+23	; 0x17
    2cfe:	98 8d       	ldd	r25, Y+24	; 0x18
    2d00:	20 e0       	ldi	r18, 0x00	; 0
    2d02:	3f ef       	ldi	r19, 0xFF	; 255
    2d04:	4f e7       	ldi	r20, 0x7F	; 127
    2d06:	57 e4       	ldi	r21, 0x47	; 71
    2d08:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2d0c:	18 16       	cp	r1, r24
    2d0e:	4c f5       	brge	.+82     	; 0x2d62 <HSSD_DisplayBlink+0x43c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d10:	69 8d       	ldd	r22, Y+25	; 0x19
    2d12:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d14:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d16:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d18:	20 e0       	ldi	r18, 0x00	; 0
    2d1a:	30 e0       	ldi	r19, 0x00	; 0
    2d1c:	40 e2       	ldi	r20, 0x20	; 32
    2d1e:	51 e4       	ldi	r21, 0x41	; 65
    2d20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d24:	dc 01       	movw	r26, r24
    2d26:	cb 01       	movw	r24, r22
    2d28:	bc 01       	movw	r22, r24
    2d2a:	cd 01       	movw	r24, r26
    2d2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d30:	dc 01       	movw	r26, r24
    2d32:	cb 01       	movw	r24, r22
    2d34:	9c 8b       	std	Y+20, r25	; 0x14
    2d36:	8b 8b       	std	Y+19, r24	; 0x13
    2d38:	0f c0       	rjmp	.+30     	; 0x2d58 <HSSD_DisplayBlink+0x432>
    2d3a:	80 e9       	ldi	r24, 0x90	; 144
    2d3c:	91 e0       	ldi	r25, 0x01	; 1
    2d3e:	9a 8b       	std	Y+18, r25	; 0x12
    2d40:	89 8b       	std	Y+17, r24	; 0x11
    2d42:	89 89       	ldd	r24, Y+17	; 0x11
    2d44:	9a 89       	ldd	r25, Y+18	; 0x12
    2d46:	01 97       	sbiw	r24, 0x01	; 1
    2d48:	f1 f7       	brne	.-4      	; 0x2d46 <HSSD_DisplayBlink+0x420>
    2d4a:	9a 8b       	std	Y+18, r25	; 0x12
    2d4c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d4e:	8b 89       	ldd	r24, Y+19	; 0x13
    2d50:	9c 89       	ldd	r25, Y+20	; 0x14
    2d52:	01 97       	sbiw	r24, 0x01	; 1
    2d54:	9c 8b       	std	Y+20, r25	; 0x14
    2d56:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d58:	8b 89       	ldd	r24, Y+19	; 0x13
    2d5a:	9c 89       	ldd	r25, Y+20	; 0x14
    2d5c:	00 97       	sbiw	r24, 0x00	; 0
    2d5e:	69 f7       	brne	.-38     	; 0x2d3a <HSSD_DisplayBlink+0x414>
    2d60:	14 c0       	rjmp	.+40     	; 0x2d8a <HSSD_DisplayBlink+0x464>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d62:	6d 89       	ldd	r22, Y+21	; 0x15
    2d64:	7e 89       	ldd	r23, Y+22	; 0x16
    2d66:	8f 89       	ldd	r24, Y+23	; 0x17
    2d68:	98 8d       	ldd	r25, Y+24	; 0x18
    2d6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d6e:	dc 01       	movw	r26, r24
    2d70:	cb 01       	movw	r24, r22
    2d72:	9c 8b       	std	Y+20, r25	; 0x14
    2d74:	8b 8b       	std	Y+19, r24	; 0x13
    2d76:	8b 89       	ldd	r24, Y+19	; 0x13
    2d78:	9c 89       	ldd	r25, Y+20	; 0x14
    2d7a:	98 8b       	std	Y+16, r25	; 0x10
    2d7c:	8f 87       	std	Y+15, r24	; 0x0f
    2d7e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d80:	98 89       	ldd	r25, Y+16	; 0x10
    2d82:	01 97       	sbiw	r24, 0x01	; 1
    2d84:	f1 f7       	brne	.-4      	; 0x2d82 <HSSD_DisplayBlink+0x45c>
    2d86:	98 8b       	std	Y+16, r25	; 0x10
    2d88:	8f 87       	std	Y+15, r24	; 0x0f
		
		_delay_ms(5);
		MDIO_SetPinValue(SSD_CTRL_PORT_1, SSD_1_EN_PIN, DIO_u8PIN_HIGH);
    2d8a:	80 e0       	ldi	r24, 0x00	; 0
    2d8c:	63 e0       	ldi	r22, 0x03	; 3
    2d8e:	41 e0       	ldi	r20, 0x01	; 1
    2d90:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <MDIO_SetPinValue>
		MDIO_SetPinValue(SSD_CTRL_PORT_1, SSD_2_EN_PIN, DIO_u8PIN_HIGH);
    2d94:	80 e0       	ldi	r24, 0x00	; 0
    2d96:	62 e0       	ldi	r22, 0x02	; 2
    2d98:	41 e0       	ldi	r20, 0x01	; 1
    2d9a:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <MDIO_SetPinValue>
		MDIO_SetPinValue(SSD_CTRL_PORT_2, SSD_3_EN_PIN, DIO_u8PIN_HIGH);
    2d9e:	81 e0       	ldi	r24, 0x01	; 1
    2da0:	65 e0       	ldi	r22, 0x05	; 5
    2da2:	41 e0       	ldi	r20, 0x01	; 1
    2da4:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <MDIO_SetPinValue>
		MDIO_SetPinValue(SSD_CTRL_PORT_2, SSD_4_EN_PIN, DIO_u8PIN_LOW);
    2da8:	81 e0       	ldi	r24, 0x01	; 1
    2daa:	66 e0       	ldi	r22, 0x06	; 6
    2dac:	40 e0       	ldi	r20, 0x00	; 0
    2dae:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <MDIO_SetPinValue>
		HSSD_WriteData(Local_u8Thousand);
    2db2:	8a ad       	ldd	r24, Y+58	; 0x3a
    2db4:	0e 94 5f 14 	call	0x28be	; 0x28be <HSSD_WriteData>
    2db8:	80 e0       	ldi	r24, 0x00	; 0
    2dba:	90 e0       	ldi	r25, 0x00	; 0
    2dbc:	a0 ea       	ldi	r26, 0xA0	; 160
    2dbe:	b0 e4       	ldi	r27, 0x40	; 64
    2dc0:	8b 87       	std	Y+11, r24	; 0x0b
    2dc2:	9c 87       	std	Y+12, r25	; 0x0c
    2dc4:	ad 87       	std	Y+13, r26	; 0x0d
    2dc6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dc8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2dca:	7c 85       	ldd	r23, Y+12	; 0x0c
    2dcc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dce:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dd0:	20 e0       	ldi	r18, 0x00	; 0
    2dd2:	30 e0       	ldi	r19, 0x00	; 0
    2dd4:	4a e7       	ldi	r20, 0x7A	; 122
    2dd6:	55 e4       	ldi	r21, 0x45	; 69
    2dd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ddc:	dc 01       	movw	r26, r24
    2dde:	cb 01       	movw	r24, r22
    2de0:	8f 83       	std	Y+7, r24	; 0x07
    2de2:	98 87       	std	Y+8, r25	; 0x08
    2de4:	a9 87       	std	Y+9, r26	; 0x09
    2de6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2de8:	6f 81       	ldd	r22, Y+7	; 0x07
    2dea:	78 85       	ldd	r23, Y+8	; 0x08
    2dec:	89 85       	ldd	r24, Y+9	; 0x09
    2dee:	9a 85       	ldd	r25, Y+10	; 0x0a
    2df0:	20 e0       	ldi	r18, 0x00	; 0
    2df2:	30 e0       	ldi	r19, 0x00	; 0
    2df4:	40 e8       	ldi	r20, 0x80	; 128
    2df6:	5f e3       	ldi	r21, 0x3F	; 63
    2df8:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2dfc:	88 23       	and	r24, r24
    2dfe:	2c f4       	brge	.+10     	; 0x2e0a <HSSD_DisplayBlink+0x4e4>
		__ticks = 1;
    2e00:	81 e0       	ldi	r24, 0x01	; 1
    2e02:	90 e0       	ldi	r25, 0x00	; 0
    2e04:	9e 83       	std	Y+6, r25	; 0x06
    2e06:	8d 83       	std	Y+5, r24	; 0x05
    2e08:	3f c0       	rjmp	.+126    	; 0x2e88 <HSSD_DisplayBlink+0x562>
	else if (__tmp > 65535)
    2e0a:	6f 81       	ldd	r22, Y+7	; 0x07
    2e0c:	78 85       	ldd	r23, Y+8	; 0x08
    2e0e:	89 85       	ldd	r24, Y+9	; 0x09
    2e10:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e12:	20 e0       	ldi	r18, 0x00	; 0
    2e14:	3f ef       	ldi	r19, 0xFF	; 255
    2e16:	4f e7       	ldi	r20, 0x7F	; 127
    2e18:	57 e4       	ldi	r21, 0x47	; 71
    2e1a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2e1e:	18 16       	cp	r1, r24
    2e20:	4c f5       	brge	.+82     	; 0x2e74 <HSSD_DisplayBlink+0x54e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e22:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e24:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e26:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e28:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e2a:	20 e0       	ldi	r18, 0x00	; 0
    2e2c:	30 e0       	ldi	r19, 0x00	; 0
    2e2e:	40 e2       	ldi	r20, 0x20	; 32
    2e30:	51 e4       	ldi	r21, 0x41	; 65
    2e32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e36:	dc 01       	movw	r26, r24
    2e38:	cb 01       	movw	r24, r22
    2e3a:	bc 01       	movw	r22, r24
    2e3c:	cd 01       	movw	r24, r26
    2e3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e42:	dc 01       	movw	r26, r24
    2e44:	cb 01       	movw	r24, r22
    2e46:	9e 83       	std	Y+6, r25	; 0x06
    2e48:	8d 83       	std	Y+5, r24	; 0x05
    2e4a:	0f c0       	rjmp	.+30     	; 0x2e6a <HSSD_DisplayBlink+0x544>
    2e4c:	80 e9       	ldi	r24, 0x90	; 144
    2e4e:	91 e0       	ldi	r25, 0x01	; 1
    2e50:	9c 83       	std	Y+4, r25	; 0x04
    2e52:	8b 83       	std	Y+3, r24	; 0x03
    2e54:	8b 81       	ldd	r24, Y+3	; 0x03
    2e56:	9c 81       	ldd	r25, Y+4	; 0x04
    2e58:	01 97       	sbiw	r24, 0x01	; 1
    2e5a:	f1 f7       	brne	.-4      	; 0x2e58 <HSSD_DisplayBlink+0x532>
    2e5c:	9c 83       	std	Y+4, r25	; 0x04
    2e5e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e60:	8d 81       	ldd	r24, Y+5	; 0x05
    2e62:	9e 81       	ldd	r25, Y+6	; 0x06
    2e64:	01 97       	sbiw	r24, 0x01	; 1
    2e66:	9e 83       	std	Y+6, r25	; 0x06
    2e68:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e6a:	8d 81       	ldd	r24, Y+5	; 0x05
    2e6c:	9e 81       	ldd	r25, Y+6	; 0x06
    2e6e:	00 97       	sbiw	r24, 0x00	; 0
    2e70:	69 f7       	brne	.-38     	; 0x2e4c <HSSD_DisplayBlink+0x526>
    2e72:	14 c0       	rjmp	.+40     	; 0x2e9c <HSSD_DisplayBlink+0x576>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e74:	6f 81       	ldd	r22, Y+7	; 0x07
    2e76:	78 85       	ldd	r23, Y+8	; 0x08
    2e78:	89 85       	ldd	r24, Y+9	; 0x09
    2e7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e80:	dc 01       	movw	r26, r24
    2e82:	cb 01       	movw	r24, r22
    2e84:	9e 83       	std	Y+6, r25	; 0x06
    2e86:	8d 83       	std	Y+5, r24	; 0x05
    2e88:	8d 81       	ldd	r24, Y+5	; 0x05
    2e8a:	9e 81       	ldd	r25, Y+6	; 0x06
    2e8c:	9a 83       	std	Y+2, r25	; 0x02
    2e8e:	89 83       	std	Y+1, r24	; 0x01
    2e90:	89 81       	ldd	r24, Y+1	; 0x01
    2e92:	9a 81       	ldd	r25, Y+2	; 0x02
    2e94:	01 97       	sbiw	r24, 0x01	; 1
    2e96:	f1 f7       	brne	.-4      	; 0x2e94 <HSSD_DisplayBlink+0x56e>
    2e98:	9a 83       	std	Y+2, r25	; 0x02
    2e9a:	89 83       	std	Y+1, r24	; 0x01
		
		_delay_ms(5);
		MDIO_SetPinValue(SSD_CTRL_PORT_1, SSD_1_EN_PIN, DIO_u8PIN_HIGH);
    2e9c:	80 e0       	ldi	r24, 0x00	; 0
    2e9e:	63 e0       	ldi	r22, 0x03	; 3
    2ea0:	41 e0       	ldi	r20, 0x01	; 1
    2ea2:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <MDIO_SetPinValue>
		MDIO_SetPinValue(SSD_CTRL_PORT_1, SSD_2_EN_PIN, DIO_u8PIN_HIGH);
    2ea6:	80 e0       	ldi	r24, 0x00	; 0
    2ea8:	62 e0       	ldi	r22, 0x02	; 2
    2eaa:	41 e0       	ldi	r20, 0x01	; 1
    2eac:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <MDIO_SetPinValue>
		MDIO_SetPinValue(SSD_CTRL_PORT_2, SSD_3_EN_PIN, DIO_u8PIN_HIGH);
    2eb0:	81 e0       	ldi	r24, 0x01	; 1
    2eb2:	65 e0       	ldi	r22, 0x05	; 5
    2eb4:	41 e0       	ldi	r20, 0x01	; 1
    2eb6:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <MDIO_SetPinValue>
		MDIO_SetPinValue(SSD_CTRL_PORT_2, SSD_4_EN_PIN, DIO_u8PIN_HIGH);
    2eba:	81 e0       	ldi	r24, 0x01	; 1
    2ebc:	66 e0       	ldi	r22, 0x06	; 6
    2ebe:	41 e0       	ldi	r20, 0x01	; 1
    2ec0:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <MDIO_SetPinValue>
	u8 Local_u8Hundred = Copy_u8Num%10;
	Copy_u8Num/=10;
	u8 Local_u8Thousand = Copy_u8Num;

	u8 Local_u8BlinkCounter = 0;
	for (Local_u8BlinkCounter = 0; Local_u8BlinkCounter<60; Local_u8BlinkCounter++)
    2ec4:	89 ad       	ldd	r24, Y+57	; 0x39
    2ec6:	8f 5f       	subi	r24, 0xFF	; 255
    2ec8:	89 af       	std	Y+57, r24	; 0x39
    2eca:	89 ad       	ldd	r24, Y+57	; 0x39
    2ecc:	8c 33       	cpi	r24, 0x3C	; 60
    2ece:	08 f4       	brcc	.+2      	; 0x2ed2 <HSSD_DisplayBlink+0x5ac>
    2ed0:	c1 cd       	rjmp	.-1150   	; 0x2a54 <HSSD_DisplayBlink+0x12e>
		MDIO_SetPinValue(SSD_CTRL_PORT_2, SSD_3_EN_PIN, DIO_u8PIN_HIGH);
		MDIO_SetPinValue(SSD_CTRL_PORT_2, SSD_4_EN_PIN, DIO_u8PIN_HIGH);
		
	}
	
	return Local_ErrorState;
    2ed2:	8e ad       	ldd	r24, Y+62	; 0x3e
}
    2ed4:	ce 5b       	subi	r28, 0xBE	; 190
    2ed6:	df 4f       	sbci	r29, 0xFF	; 255
    2ed8:	0f b6       	in	r0, 0x3f	; 63
    2eda:	f8 94       	cli
    2edc:	de bf       	out	0x3e, r29	; 62
    2ede:	0f be       	out	0x3f, r0	; 63
    2ee0:	cd bf       	out	0x3d, r28	; 61
    2ee2:	cf 91       	pop	r28
    2ee4:	df 91       	pop	r29
    2ee6:	1f 91       	pop	r17
    2ee8:	0f 91       	pop	r16
    2eea:	08 95       	ret

00002eec <PB_voidInit>:
#include "HPB_private.h"
#include "HPB_config.h"
#include "HPB_interface.h"

void PB_voidInit(const PB_t* ptr_PB)
{
    2eec:	df 93       	push	r29
    2eee:	cf 93       	push	r28
    2ef0:	00 d0       	rcall	.+0      	; 0x2ef2 <PB_voidInit+0x6>
    2ef2:	cd b7       	in	r28, 0x3d	; 61
    2ef4:	de b7       	in	r29, 0x3e	; 62
    2ef6:	9a 83       	std	Y+2, r25	; 0x02
    2ef8:	89 83       	std	Y+1, r24	; 0x01
	MDIO_SetPinDirection(ptr_PB->PB_port, ptr_PB->PB_Pin, DIO_u8PIN_INPUT);
    2efa:	e9 81       	ldd	r30, Y+1	; 0x01
    2efc:	fa 81       	ldd	r31, Y+2	; 0x02
    2efe:	80 81       	ld	r24, Z
    2f00:	e9 81       	ldd	r30, Y+1	; 0x01
    2f02:	fa 81       	ldd	r31, Y+2	; 0x02
    2f04:	91 81       	ldd	r25, Z+1	; 0x01
    2f06:	69 2f       	mov	r22, r25
    2f08:	40 e0       	ldi	r20, 0x00	; 0
    2f0a:	0e 94 76 0d 	call	0x1aec	; 0x1aec <MDIO_SetPinDirection>


}
    2f0e:	0f 90       	pop	r0
    2f10:	0f 90       	pop	r0
    2f12:	cf 91       	pop	r28
    2f14:	df 91       	pop	r29
    2f16:	08 95       	ret

00002f18 <PB_voidReadState>:
	}

}
#endif
void PB_voidReadState(const PB_t* ptr_PB, State_t* pstate)
{
    2f18:	df 93       	push	r29
    2f1a:	cf 93       	push	r28
    2f1c:	cd b7       	in	r28, 0x3d	; 61
    2f1e:	de b7       	in	r29, 0x3e	; 62
    2f20:	63 97       	sbiw	r28, 0x13	; 19
    2f22:	0f b6       	in	r0, 0x3f	; 63
    2f24:	f8 94       	cli
    2f26:	de bf       	out	0x3e, r29	; 62
    2f28:	0f be       	out	0x3f, r0	; 63
    2f2a:	cd bf       	out	0x3d, r28	; 61
    2f2c:	99 8b       	std	Y+17, r25	; 0x11
    2f2e:	88 8b       	std	Y+16, r24	; 0x10
    2f30:	7b 8b       	std	Y+19, r23	; 0x13
    2f32:	6a 8b       	std	Y+18, r22	; 0x12
	static State_t copy_u8state = NOT_PRESSED;

	u8 copy_u8PinVal;
	MDIO_GetPinValue(ptr_PB->PB_port, ptr_PB->PB_Pin, &copy_u8PinVal);
    2f34:	e8 89       	ldd	r30, Y+16	; 0x10
    2f36:	f9 89       	ldd	r31, Y+17	; 0x11
    2f38:	80 81       	ld	r24, Z
    2f3a:	e8 89       	ldd	r30, Y+16	; 0x10
    2f3c:	f9 89       	ldd	r31, Y+17	; 0x11
    2f3e:	91 81       	ldd	r25, Z+1	; 0x01
    2f40:	9e 01       	movw	r18, r28
    2f42:	21 5f       	subi	r18, 0xF1	; 241
    2f44:	3f 4f       	sbci	r19, 0xFF	; 255
    2f46:	69 2f       	mov	r22, r25
    2f48:	a9 01       	movw	r20, r18
    2f4a:	0e 94 2c 10 	call	0x2058	; 0x2058 <MDIO_GetPinValue>

	if(copy_u8PinVal == ptr_PB->PB_mode)   // in this case the button is pressed
    2f4e:	e8 89       	ldd	r30, Y+16	; 0x10
    2f50:	f9 89       	ldd	r31, Y+17	; 0x11
    2f52:	92 81       	ldd	r25, Z+2	; 0x02
    2f54:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f56:	98 17       	cp	r25, r24
    2f58:	09 f0       	breq	.+2      	; 0x2f5c <PB_voidReadState+0x44>
    2f5a:	9f c0       	rjmp	.+318    	; 0x309a <PB_voidReadState+0x182>
    2f5c:	80 e0       	ldi	r24, 0x00	; 0
    2f5e:	90 e0       	ldi	r25, 0x00	; 0
    2f60:	a0 ea       	ldi	r26, 0xA0	; 160
    2f62:	b1 e4       	ldi	r27, 0x41	; 65
    2f64:	8b 87       	std	Y+11, r24	; 0x0b
    2f66:	9c 87       	std	Y+12, r25	; 0x0c
    2f68:	ad 87       	std	Y+13, r26	; 0x0d
    2f6a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f6c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f6e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f70:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f72:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f74:	20 e0       	ldi	r18, 0x00	; 0
    2f76:	30 e0       	ldi	r19, 0x00	; 0
    2f78:	4a e7       	ldi	r20, 0x7A	; 122
    2f7a:	55 e4       	ldi	r21, 0x45	; 69
    2f7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f80:	dc 01       	movw	r26, r24
    2f82:	cb 01       	movw	r24, r22
    2f84:	8f 83       	std	Y+7, r24	; 0x07
    2f86:	98 87       	std	Y+8, r25	; 0x08
    2f88:	a9 87       	std	Y+9, r26	; 0x09
    2f8a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f8c:	6f 81       	ldd	r22, Y+7	; 0x07
    2f8e:	78 85       	ldd	r23, Y+8	; 0x08
    2f90:	89 85       	ldd	r24, Y+9	; 0x09
    2f92:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f94:	20 e0       	ldi	r18, 0x00	; 0
    2f96:	30 e0       	ldi	r19, 0x00	; 0
    2f98:	40 e8       	ldi	r20, 0x80	; 128
    2f9a:	5f e3       	ldi	r21, 0x3F	; 63
    2f9c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2fa0:	88 23       	and	r24, r24
    2fa2:	2c f4       	brge	.+10     	; 0x2fae <PB_voidReadState+0x96>
		__ticks = 1;
    2fa4:	81 e0       	ldi	r24, 0x01	; 1
    2fa6:	90 e0       	ldi	r25, 0x00	; 0
    2fa8:	9e 83       	std	Y+6, r25	; 0x06
    2faa:	8d 83       	std	Y+5, r24	; 0x05
    2fac:	3f c0       	rjmp	.+126    	; 0x302c <PB_voidReadState+0x114>
	else if (__tmp > 65535)
    2fae:	6f 81       	ldd	r22, Y+7	; 0x07
    2fb0:	78 85       	ldd	r23, Y+8	; 0x08
    2fb2:	89 85       	ldd	r24, Y+9	; 0x09
    2fb4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fb6:	20 e0       	ldi	r18, 0x00	; 0
    2fb8:	3f ef       	ldi	r19, 0xFF	; 255
    2fba:	4f e7       	ldi	r20, 0x7F	; 127
    2fbc:	57 e4       	ldi	r21, 0x47	; 71
    2fbe:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2fc2:	18 16       	cp	r1, r24
    2fc4:	4c f5       	brge	.+82     	; 0x3018 <PB_voidReadState+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fc6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fc8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fca:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fcc:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fce:	20 e0       	ldi	r18, 0x00	; 0
    2fd0:	30 e0       	ldi	r19, 0x00	; 0
    2fd2:	40 e2       	ldi	r20, 0x20	; 32
    2fd4:	51 e4       	ldi	r21, 0x41	; 65
    2fd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fda:	dc 01       	movw	r26, r24
    2fdc:	cb 01       	movw	r24, r22
    2fde:	bc 01       	movw	r22, r24
    2fe0:	cd 01       	movw	r24, r26
    2fe2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fe6:	dc 01       	movw	r26, r24
    2fe8:	cb 01       	movw	r24, r22
    2fea:	9e 83       	std	Y+6, r25	; 0x06
    2fec:	8d 83       	std	Y+5, r24	; 0x05
    2fee:	0f c0       	rjmp	.+30     	; 0x300e <PB_voidReadState+0xf6>
    2ff0:	80 e9       	ldi	r24, 0x90	; 144
    2ff2:	91 e0       	ldi	r25, 0x01	; 1
    2ff4:	9c 83       	std	Y+4, r25	; 0x04
    2ff6:	8b 83       	std	Y+3, r24	; 0x03
    2ff8:	8b 81       	ldd	r24, Y+3	; 0x03
    2ffa:	9c 81       	ldd	r25, Y+4	; 0x04
    2ffc:	01 97       	sbiw	r24, 0x01	; 1
    2ffe:	f1 f7       	brne	.-4      	; 0x2ffc <PB_voidReadState+0xe4>
    3000:	9c 83       	std	Y+4, r25	; 0x04
    3002:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3004:	8d 81       	ldd	r24, Y+5	; 0x05
    3006:	9e 81       	ldd	r25, Y+6	; 0x06
    3008:	01 97       	sbiw	r24, 0x01	; 1
    300a:	9e 83       	std	Y+6, r25	; 0x06
    300c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    300e:	8d 81       	ldd	r24, Y+5	; 0x05
    3010:	9e 81       	ldd	r25, Y+6	; 0x06
    3012:	00 97       	sbiw	r24, 0x00	; 0
    3014:	69 f7       	brne	.-38     	; 0x2ff0 <PB_voidReadState+0xd8>
    3016:	14 c0       	rjmp	.+40     	; 0x3040 <PB_voidReadState+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3018:	6f 81       	ldd	r22, Y+7	; 0x07
    301a:	78 85       	ldd	r23, Y+8	; 0x08
    301c:	89 85       	ldd	r24, Y+9	; 0x09
    301e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3020:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3024:	dc 01       	movw	r26, r24
    3026:	cb 01       	movw	r24, r22
    3028:	9e 83       	std	Y+6, r25	; 0x06
    302a:	8d 83       	std	Y+5, r24	; 0x05
    302c:	8d 81       	ldd	r24, Y+5	; 0x05
    302e:	9e 81       	ldd	r25, Y+6	; 0x06
    3030:	9a 83       	std	Y+2, r25	; 0x02
    3032:	89 83       	std	Y+1, r24	; 0x01
    3034:	89 81       	ldd	r24, Y+1	; 0x01
    3036:	9a 81       	ldd	r25, Y+2	; 0x02
    3038:	01 97       	sbiw	r24, 0x01	; 1
    303a:	f1 f7       	brne	.-4      	; 0x3038 <PB_voidReadState+0x120>
    303c:	9a 83       	std	Y+2, r25	; 0x02
    303e:	89 83       	std	Y+1, r24	; 0x01
	{
		_delay_ms(20);
		MDIO_GetPinValue(ptr_PB->PB_port, ptr_PB->PB_Pin, &copy_u8PinVal);
    3040:	e8 89       	ldd	r30, Y+16	; 0x10
    3042:	f9 89       	ldd	r31, Y+17	; 0x11
    3044:	80 81       	ld	r24, Z
    3046:	e8 89       	ldd	r30, Y+16	; 0x10
    3048:	f9 89       	ldd	r31, Y+17	; 0x11
    304a:	91 81       	ldd	r25, Z+1	; 0x01
    304c:	9e 01       	movw	r18, r28
    304e:	21 5f       	subi	r18, 0xF1	; 241
    3050:	3f 4f       	sbci	r19, 0xFF	; 255
    3052:	69 2f       	mov	r22, r25
    3054:	a9 01       	movw	r20, r18
    3056:	0e 94 2c 10 	call	0x2058	; 0x2058 <MDIO_GetPinValue>
		if(copy_u8PinVal == ptr_PB->PB_mode)
    305a:	e8 89       	ldd	r30, Y+16	; 0x10
    305c:	f9 89       	ldd	r31, Y+17	; 0x11
    305e:	92 81       	ldd	r25, Z+2	; 0x02
    3060:	8f 85       	ldd	r24, Y+15	; 0x0f
    3062:	98 17       	cp	r25, r24
    3064:	a1 f4       	brne	.+40     	; 0x308e <PB_voidReadState+0x176>
		{
			// check button previous state
			if(copy_u8state == NOT_PRESSED) // 1st press
    3066:	80 91 ba 01 	lds	r24, 0x01BA
    306a:	88 23       	and	r24, r24
    306c:	41 f4       	brne	.+16     	; 0x307e <PB_voidReadState+0x166>
			{
				copy_u8state = PRESSED;
    306e:	81 e0       	ldi	r24, 0x01	; 1
    3070:	80 93 ba 01 	sts	0x01BA, r24
				* pstate = PRESSED;
    3074:	ea 89       	ldd	r30, Y+18	; 0x12
    3076:	fb 89       	ldd	r31, Y+19	; 0x13
    3078:	81 e0       	ldi	r24, 0x01	; 1
    307a:	80 83       	st	Z, r24
    307c:	13 c0       	rjmp	.+38     	; 0x30a4 <PB_voidReadState+0x18c>

			}
			else if(copy_u8state == PRESSED)// trapped (long press)
    307e:	80 91 ba 01 	lds	r24, 0x01BA
    3082:	81 30       	cpi	r24, 0x01	; 1
    3084:	79 f4       	brne	.+30     	; 0x30a4 <PB_voidReadState+0x18c>
			{
				* pstate = NOT_PRESSED;
    3086:	ea 89       	ldd	r30, Y+18	; 0x12
    3088:	fb 89       	ldd	r31, Y+19	; 0x13
    308a:	10 82       	st	Z, r1
    308c:	0b c0       	rjmp	.+22     	; 0x30a4 <PB_voidReadState+0x18c>
			{
				//nothing
			}
		}// 2nd read after delay
		else {//Noise
			* pstate = NOT_PRESSED;
    308e:	ea 89       	ldd	r30, Y+18	; 0x12
    3090:	fb 89       	ldd	r31, Y+19	; 0x13
    3092:	10 82       	st	Z, r1
			copy_u8state = NOT_PRESSED;
    3094:	10 92 ba 01 	sts	0x01BA, r1
    3098:	05 c0       	rjmp	.+10     	; 0x30a4 <PB_voidReadState+0x18c>
		}

	}// 1st read befor delay
	else
	{
		* pstate = NOT_PRESSED;
    309a:	ea 89       	ldd	r30, Y+18	; 0x12
    309c:	fb 89       	ldd	r31, Y+19	; 0x13
    309e:	10 82       	st	Z, r1
		copy_u8state = NOT_PRESSED;
    30a0:	10 92 ba 01 	sts	0x01BA, r1
	}

}
    30a4:	63 96       	adiw	r28, 0x13	; 19
    30a6:	0f b6       	in	r0, 0x3f	; 63
    30a8:	f8 94       	cli
    30aa:	de bf       	out	0x3e, r29	; 62
    30ac:	0f be       	out	0x3f, r0	; 63
    30ae:	cd bf       	out	0x3d, r28	; 61
    30b0:	cf 91       	pop	r28
    30b2:	df 91       	pop	r29
    30b4:	08 95       	ret

000030b6 <HLED_voidInit>:
#include "HLED_private.h"
#include "HLED_config.h"
#include "HLED_interface.h"

void HLED_voidInit(Led_t copy_ledId)
{
    30b6:	df 93       	push	r29
    30b8:	cf 93       	push	r28
    30ba:	00 d0       	rcall	.+0      	; 0x30bc <HLED_voidInit+0x6>
    30bc:	0f 92       	push	r0
    30be:	cd b7       	in	r28, 0x3d	; 61
    30c0:	de b7       	in	r29, 0x3e	; 62
    30c2:	89 83       	std	Y+1, r24	; 0x01

	switch(copy_ledId){
    30c4:	89 81       	ldd	r24, Y+1	; 0x01
    30c6:	28 2f       	mov	r18, r24
    30c8:	30 e0       	ldi	r19, 0x00	; 0
    30ca:	3b 83       	std	Y+3, r19	; 0x03
    30cc:	2a 83       	std	Y+2, r18	; 0x02
    30ce:	8a 81       	ldd	r24, Y+2	; 0x02
    30d0:	9b 81       	ldd	r25, Y+3	; 0x03
    30d2:	81 30       	cpi	r24, 0x01	; 1
    30d4:	91 05       	cpc	r25, r1
    30d6:	d9 f0       	breq	.+54     	; 0x310e <HLED_voidInit+0x58>
    30d8:	2a 81       	ldd	r18, Y+2	; 0x02
    30da:	3b 81       	ldd	r19, Y+3	; 0x03
    30dc:	22 30       	cpi	r18, 0x02	; 2
    30de:	31 05       	cpc	r19, r1
    30e0:	2c f4       	brge	.+10     	; 0x30ec <HLED_voidInit+0x36>
    30e2:	8a 81       	ldd	r24, Y+2	; 0x02
    30e4:	9b 81       	ldd	r25, Y+3	; 0x03
    30e6:	00 97       	sbiw	r24, 0x00	; 0
    30e8:	61 f0       	breq	.+24     	; 0x3102 <HLED_voidInit+0x4c>
    30ea:	22 c0       	rjmp	.+68     	; 0x3130 <HLED_voidInit+0x7a>
    30ec:	2a 81       	ldd	r18, Y+2	; 0x02
    30ee:	3b 81       	ldd	r19, Y+3	; 0x03
    30f0:	22 30       	cpi	r18, 0x02	; 2
    30f2:	31 05       	cpc	r19, r1
    30f4:	91 f0       	breq	.+36     	; 0x311a <HLED_voidInit+0x64>
    30f6:	8a 81       	ldd	r24, Y+2	; 0x02
    30f8:	9b 81       	ldd	r25, Y+3	; 0x03
    30fa:	83 30       	cpi	r24, 0x03	; 3
    30fc:	91 05       	cpc	r25, r1
    30fe:	99 f0       	breq	.+38     	; 0x3126 <HLED_voidInit+0x70>
    3100:	17 c0       	rjmp	.+46     	; 0x3130 <HLED_voidInit+0x7a>
	case LED_YELLOW:
		MDIO_SetPinDirection (LED_YELLOW_PORT, LED_YELLOW_PIN, DIO_u8PIN_OUTPUT);
    3102:	80 e0       	ldi	r24, 0x00	; 0
    3104:	66 e0       	ldi	r22, 0x06	; 6
    3106:	41 e0       	ldi	r20, 0x01	; 1
    3108:	0e 94 76 0d 	call	0x1aec	; 0x1aec <MDIO_SetPinDirection>
    310c:	11 c0       	rjmp	.+34     	; 0x3130 <HLED_voidInit+0x7a>
		break;
	case LED_GREEN:
		MDIO_SetPinDirection (LED_GREEN_PORT, LED_GREEN_PIN, DIO_u8PIN_OUTPUT);
    310e:	80 e0       	ldi	r24, 0x00	; 0
    3110:	64 e0       	ldi	r22, 0x04	; 4
    3112:	41 e0       	ldi	r20, 0x01	; 1
    3114:	0e 94 76 0d 	call	0x1aec	; 0x1aec <MDIO_SetPinDirection>
    3118:	0b c0       	rjmp	.+22     	; 0x3130 <HLED_voidInit+0x7a>
		break;
	case LED_RED:
		MDIO_SetPinDirection (LED_RED_PORT, LED_RED_PIN, DIO_u8PIN_OUTPUT);
    311a:	81 e0       	ldi	r24, 0x01	; 1
    311c:	67 e0       	ldi	r22, 0x07	; 7
    311e:	41 e0       	ldi	r20, 0x01	; 1
    3120:	0e 94 76 0d 	call	0x1aec	; 0x1aec <MDIO_SetPinDirection>
    3124:	05 c0       	rjmp	.+10     	; 0x3130 <HLED_voidInit+0x7a>

		break;
	case LED_BLUE:
		MDIO_SetPinDirection (LED_BLUE_PORT, LED_BLUE_PIN, DIO_u8PIN_OUTPUT);
    3126:	80 e0       	ldi	r24, 0x00	; 0
    3128:	65 e0       	ldi	r22, 0x05	; 5
    312a:	41 e0       	ldi	r20, 0x01	; 1
    312c:	0e 94 76 0d 	call	0x1aec	; 0x1aec <MDIO_SetPinDirection>


	}


}
    3130:	0f 90       	pop	r0
    3132:	0f 90       	pop	r0
    3134:	0f 90       	pop	r0
    3136:	cf 91       	pop	r28
    3138:	df 91       	pop	r29
    313a:	08 95       	ret

0000313c <HLED_voidTurnOn>:
void HLED_voidTurnOn(Led_t copy_ledId)
{
    313c:	df 93       	push	r29
    313e:	cf 93       	push	r28
    3140:	00 d0       	rcall	.+0      	; 0x3142 <HLED_voidTurnOn+0x6>
    3142:	0f 92       	push	r0
    3144:	cd b7       	in	r28, 0x3d	; 61
    3146:	de b7       	in	r29, 0x3e	; 62
    3148:	89 83       	std	Y+1, r24	; 0x01
	switch(copy_ledId){
    314a:	89 81       	ldd	r24, Y+1	; 0x01
    314c:	28 2f       	mov	r18, r24
    314e:	30 e0       	ldi	r19, 0x00	; 0
    3150:	3b 83       	std	Y+3, r19	; 0x03
    3152:	2a 83       	std	Y+2, r18	; 0x02
    3154:	8a 81       	ldd	r24, Y+2	; 0x02
    3156:	9b 81       	ldd	r25, Y+3	; 0x03
    3158:	81 30       	cpi	r24, 0x01	; 1
    315a:	91 05       	cpc	r25, r1
    315c:	d9 f0       	breq	.+54     	; 0x3194 <HLED_voidTurnOn+0x58>
    315e:	2a 81       	ldd	r18, Y+2	; 0x02
    3160:	3b 81       	ldd	r19, Y+3	; 0x03
    3162:	22 30       	cpi	r18, 0x02	; 2
    3164:	31 05       	cpc	r19, r1
    3166:	2c f4       	brge	.+10     	; 0x3172 <HLED_voidTurnOn+0x36>
    3168:	8a 81       	ldd	r24, Y+2	; 0x02
    316a:	9b 81       	ldd	r25, Y+3	; 0x03
    316c:	00 97       	sbiw	r24, 0x00	; 0
    316e:	61 f0       	breq	.+24     	; 0x3188 <HLED_voidTurnOn+0x4c>
    3170:	22 c0       	rjmp	.+68     	; 0x31b6 <HLED_voidTurnOn+0x7a>
    3172:	2a 81       	ldd	r18, Y+2	; 0x02
    3174:	3b 81       	ldd	r19, Y+3	; 0x03
    3176:	22 30       	cpi	r18, 0x02	; 2
    3178:	31 05       	cpc	r19, r1
    317a:	91 f0       	breq	.+36     	; 0x31a0 <HLED_voidTurnOn+0x64>
    317c:	8a 81       	ldd	r24, Y+2	; 0x02
    317e:	9b 81       	ldd	r25, Y+3	; 0x03
    3180:	83 30       	cpi	r24, 0x03	; 3
    3182:	91 05       	cpc	r25, r1
    3184:	99 f0       	breq	.+38     	; 0x31ac <HLED_voidTurnOn+0x70>
    3186:	17 c0       	rjmp	.+46     	; 0x31b6 <HLED_voidTurnOn+0x7a>
		case LED_YELLOW:
#if LED_YELLOW_DIR == LED_DIR_FORWARD
			MDIO_SetPinValue (LED_YELLOW_PORT, LED_YELLOW_PIN, DIO_u8PIN_HIGH);
    3188:	80 e0       	ldi	r24, 0x00	; 0
    318a:	66 e0       	ldi	r22, 0x06	; 6
    318c:	41 e0       	ldi	r20, 0x01	; 1
    318e:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <MDIO_SetPinValue>
    3192:	11 c0       	rjmp	.+34     	; 0x31b6 <HLED_voidTurnOn+0x7a>
#endif
			break;

		case LED_GREEN:
#if LED_GREEN_DIR == LED_DIR_FORWARD
			MDIO_SetPinValue (LED_GREEN_PORT, LED_GREEN_PIN, DIO_u8PIN_HIGH);
    3194:	80 e0       	ldi	r24, 0x00	; 0
    3196:	64 e0       	ldi	r22, 0x04	; 4
    3198:	41 e0       	ldi	r20, 0x01	; 1
    319a:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <MDIO_SetPinValue>
    319e:	0b c0       	rjmp	.+22     	; 0x31b6 <HLED_voidTurnOn+0x7a>
#endif
			break;

		case LED_RED:
#if LED_RED_DIR == LED_DIR_FORWARD
			MDIO_SetPinValue (LED_RED_PORT, LED_RED_PIN, DIO_u8PIN_HIGH);
    31a0:	81 e0       	ldi	r24, 0x01	; 1
    31a2:	67 e0       	ldi	r22, 0x07	; 7
    31a4:	41 e0       	ldi	r20, 0x01	; 1
    31a6:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <MDIO_SetPinValue>
    31aa:	05 c0       	rjmp	.+10     	; 0x31b6 <HLED_voidTurnOn+0x7a>

#endif
			break;
		case LED_BLUE:
#if LED_BLUE_DIR == LED_DIR_FORWARD
			MDIO_SetPinValue (LED_BLUE_PORT, LED_BLUE_PIN, DIO_u8PIN_HIGH);
    31ac:	80 e0       	ldi	r24, 0x00	; 0
    31ae:	65 e0       	ldi	r22, 0x05	; 5
    31b0:	41 e0       	ldi	r20, 0x01	; 1
    31b2:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <MDIO_SetPinValue>
			break;

	}


}
    31b6:	0f 90       	pop	r0
    31b8:	0f 90       	pop	r0
    31ba:	0f 90       	pop	r0
    31bc:	cf 91       	pop	r28
    31be:	df 91       	pop	r29
    31c0:	08 95       	ret

000031c2 <HLED_voidTurnOff>:
void HLED_voidTurnOff(Led_t copy_ledId)
{
    31c2:	df 93       	push	r29
    31c4:	cf 93       	push	r28
    31c6:	00 d0       	rcall	.+0      	; 0x31c8 <HLED_voidTurnOff+0x6>
    31c8:	0f 92       	push	r0
    31ca:	cd b7       	in	r28, 0x3d	; 61
    31cc:	de b7       	in	r29, 0x3e	; 62
    31ce:	89 83       	std	Y+1, r24	; 0x01
	switch(copy_ledId){
    31d0:	89 81       	ldd	r24, Y+1	; 0x01
    31d2:	28 2f       	mov	r18, r24
    31d4:	30 e0       	ldi	r19, 0x00	; 0
    31d6:	3b 83       	std	Y+3, r19	; 0x03
    31d8:	2a 83       	std	Y+2, r18	; 0x02
    31da:	8a 81       	ldd	r24, Y+2	; 0x02
    31dc:	9b 81       	ldd	r25, Y+3	; 0x03
    31de:	81 30       	cpi	r24, 0x01	; 1
    31e0:	91 05       	cpc	r25, r1
    31e2:	d9 f0       	breq	.+54     	; 0x321a <HLED_voidTurnOff+0x58>
    31e4:	2a 81       	ldd	r18, Y+2	; 0x02
    31e6:	3b 81       	ldd	r19, Y+3	; 0x03
    31e8:	22 30       	cpi	r18, 0x02	; 2
    31ea:	31 05       	cpc	r19, r1
    31ec:	2c f4       	brge	.+10     	; 0x31f8 <HLED_voidTurnOff+0x36>
    31ee:	8a 81       	ldd	r24, Y+2	; 0x02
    31f0:	9b 81       	ldd	r25, Y+3	; 0x03
    31f2:	00 97       	sbiw	r24, 0x00	; 0
    31f4:	61 f0       	breq	.+24     	; 0x320e <HLED_voidTurnOff+0x4c>
    31f6:	22 c0       	rjmp	.+68     	; 0x323c <HLED_voidTurnOff+0x7a>
    31f8:	2a 81       	ldd	r18, Y+2	; 0x02
    31fa:	3b 81       	ldd	r19, Y+3	; 0x03
    31fc:	22 30       	cpi	r18, 0x02	; 2
    31fe:	31 05       	cpc	r19, r1
    3200:	91 f0       	breq	.+36     	; 0x3226 <HLED_voidTurnOff+0x64>
    3202:	8a 81       	ldd	r24, Y+2	; 0x02
    3204:	9b 81       	ldd	r25, Y+3	; 0x03
    3206:	83 30       	cpi	r24, 0x03	; 3
    3208:	91 05       	cpc	r25, r1
    320a:	99 f0       	breq	.+38     	; 0x3232 <HLED_voidTurnOff+0x70>
    320c:	17 c0       	rjmp	.+46     	; 0x323c <HLED_voidTurnOff+0x7a>
		case LED_YELLOW:
#if LED_YELLOW_DIR == LED_DIR_FORWARD
			MDIO_SetPinValue (LED_YELLOW_PORT, LED_YELLOW_PIN, DIO_u8PIN_LOW);
    320e:	80 e0       	ldi	r24, 0x00	; 0
    3210:	66 e0       	ldi	r22, 0x06	; 6
    3212:	40 e0       	ldi	r20, 0x00	; 0
    3214:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <MDIO_SetPinValue>
    3218:	11 c0       	rjmp	.+34     	; 0x323c <HLED_voidTurnOff+0x7a>
#endif
			break;

		case LED_GREEN:
#if LED_GREEN_DIR == LED_DIR_FORWARD
			MDIO_SetPinValue (LED_GREEN_PORT, LED_GREEN_PIN, DIO_u8PIN_LOW);
    321a:	80 e0       	ldi	r24, 0x00	; 0
    321c:	64 e0       	ldi	r22, 0x04	; 4
    321e:	40 e0       	ldi	r20, 0x00	; 0
    3220:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <MDIO_SetPinValue>
    3224:	0b c0       	rjmp	.+22     	; 0x323c <HLED_voidTurnOff+0x7a>
#endif
			break;

		case LED_RED:
#if LED_RED_DIR == LED_DIR_FORWARD
			MDIO_SetPinValue (LED_RED_PORT, LED_RED_PIN, DIO_u8PIN_LOW);
    3226:	81 e0       	ldi	r24, 0x01	; 1
    3228:	67 e0       	ldi	r22, 0x07	; 7
    322a:	40 e0       	ldi	r20, 0x00	; 0
    322c:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <MDIO_SetPinValue>
    3230:	05 c0       	rjmp	.+10     	; 0x323c <HLED_voidTurnOff+0x7a>

#endif
			break;
		case LED_BLUE:
#if LED_BLUE_DIR == LED_DIR_FORWARD
			MDIO_SetPinValue (LED_BLUE_PORT, LED_BLUE_PIN, DIO_u8PIN_LOW);
    3232:	80 e0       	ldi	r24, 0x00	; 0
    3234:	65 e0       	ldi	r22, 0x05	; 5
    3236:	40 e0       	ldi	r20, 0x00	; 0
    3238:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <MDIO_SetPinValue>
#endif
			break;

	}

}
    323c:	0f 90       	pop	r0
    323e:	0f 90       	pop	r0
    3240:	0f 90       	pop	r0
    3242:	cf 91       	pop	r28
    3244:	df 91       	pop	r29
    3246:	08 95       	ret

00003248 <HLED_voidToggle>:
void HLED_voidToggle(Led_t copy_ledId)
{
    3248:	df 93       	push	r29
    324a:	cf 93       	push	r28
    324c:	00 d0       	rcall	.+0      	; 0x324e <HLED_voidToggle+0x6>
    324e:	0f 92       	push	r0
    3250:	cd b7       	in	r28, 0x3d	; 61
    3252:	de b7       	in	r29, 0x3e	; 62
    3254:	89 83       	std	Y+1, r24	; 0x01
	switch(copy_ledId){
    3256:	89 81       	ldd	r24, Y+1	; 0x01
    3258:	28 2f       	mov	r18, r24
    325a:	30 e0       	ldi	r19, 0x00	; 0
    325c:	3b 83       	std	Y+3, r19	; 0x03
    325e:	2a 83       	std	Y+2, r18	; 0x02
    3260:	8a 81       	ldd	r24, Y+2	; 0x02
    3262:	9b 81       	ldd	r25, Y+3	; 0x03
    3264:	81 30       	cpi	r24, 0x01	; 1
    3266:	91 05       	cpc	r25, r1
    3268:	d1 f0       	breq	.+52     	; 0x329e <HLED_voidToggle+0x56>
    326a:	2a 81       	ldd	r18, Y+2	; 0x02
    326c:	3b 81       	ldd	r19, Y+3	; 0x03
    326e:	22 30       	cpi	r18, 0x02	; 2
    3270:	31 05       	cpc	r19, r1
    3272:	2c f4       	brge	.+10     	; 0x327e <HLED_voidToggle+0x36>
    3274:	8a 81       	ldd	r24, Y+2	; 0x02
    3276:	9b 81       	ldd	r25, Y+3	; 0x03
    3278:	00 97       	sbiw	r24, 0x00	; 0
    327a:	61 f0       	breq	.+24     	; 0x3294 <HLED_voidToggle+0x4c>
    327c:	1e c0       	rjmp	.+60     	; 0x32ba <HLED_voidToggle+0x72>
    327e:	2a 81       	ldd	r18, Y+2	; 0x02
    3280:	3b 81       	ldd	r19, Y+3	; 0x03
    3282:	22 30       	cpi	r18, 0x02	; 2
    3284:	31 05       	cpc	r19, r1
    3286:	81 f0       	breq	.+32     	; 0x32a8 <HLED_voidToggle+0x60>
    3288:	8a 81       	ldd	r24, Y+2	; 0x02
    328a:	9b 81       	ldd	r25, Y+3	; 0x03
    328c:	83 30       	cpi	r24, 0x03	; 3
    328e:	91 05       	cpc	r25, r1
    3290:	81 f0       	breq	.+32     	; 0x32b2 <HLED_voidToggle+0x6a>
    3292:	13 c0       	rjmp	.+38     	; 0x32ba <HLED_voidToggle+0x72>
		case LED_YELLOW:
#if LED_YELLOW_DIR == LED_DIR_FORWARD
			MDIO_TogglePinValue (LED_YELLOW_PORT, LED_YELLOW_PIN);
    3294:	80 e0       	ldi	r24, 0x00	; 0
    3296:	66 e0       	ldi	r22, 0x06	; 6
    3298:	0e 94 88 11 	call	0x2310	; 0x2310 <MDIO_TogglePinValue>
    329c:	0e c0       	rjmp	.+28     	; 0x32ba <HLED_voidToggle+0x72>
#endif
			break;

		case LED_GREEN:
#if LED_GREEN_DIR == LED_DIR_FORWARD
			MDIO_TogglePinValue (LED_GREEN_PORT, LED_GREEN_PIN);
    329e:	80 e0       	ldi	r24, 0x00	; 0
    32a0:	64 e0       	ldi	r22, 0x04	; 4
    32a2:	0e 94 88 11 	call	0x2310	; 0x2310 <MDIO_TogglePinValue>
    32a6:	09 c0       	rjmp	.+18     	; 0x32ba <HLED_voidToggle+0x72>
#endif
			break;

		case LED_RED:
#if LED_RED_DIR == LED_DIR_FORWARD
			MDIO_TogglePinValue (LED_RED_PORT, LED_RED_PIN);
    32a8:	81 e0       	ldi	r24, 0x01	; 1
    32aa:	67 e0       	ldi	r22, 0x07	; 7
    32ac:	0e 94 88 11 	call	0x2310	; 0x2310 <MDIO_TogglePinValue>
    32b0:	04 c0       	rjmp	.+8      	; 0x32ba <HLED_voidToggle+0x72>

#endif
			break;
		case LED_BLUE:
#if LED_BLUE_DIR == LED_DIR_FORWARD
			MDIO_TogglePinValue (LED_BLUE_PORT, LED_BLUE_PIN);
    32b2:	80 e0       	ldi	r24, 0x00	; 0
    32b4:	65 e0       	ldi	r22, 0x05	; 5
    32b6:	0e 94 88 11 	call	0x2310	; 0x2310 <MDIO_TogglePinValue>
#endif
			break;

	}

}
    32ba:	0f 90       	pop	r0
    32bc:	0f 90       	pop	r0
    32be:	0f 90       	pop	r0
    32c0:	cf 91       	pop	r28
    32c2:	df 91       	pop	r29
    32c4:	08 95       	ret

000032c6 <HKPD_voidInit>:
#include "KEYPAD_private.h"

u8 KPD_u8ArrayValue[ROW_NUM][COL_NUM] = KP_MODE;

void HKPD_voidInit(void)
{
    32c6:	df 93       	push	r29
    32c8:	cf 93       	push	r28
    32ca:	cd b7       	in	r28, 0x3d	; 61
    32cc:	de b7       	in	r29, 0x3e	; 62
	//column input
	MDIO_SetPinDirection(KEYPAD_C0_PORT, KEYPAD_C0_PIN, DIO_u8PIN_INPUT);
    32ce:	83 e0       	ldi	r24, 0x03	; 3
    32d0:	67 e0       	ldi	r22, 0x07	; 7
    32d2:	40 e0       	ldi	r20, 0x00	; 0
    32d4:	0e 94 76 0d 	call	0x1aec	; 0x1aec <MDIO_SetPinDirection>
	MDIO_SetPinDirection(KEYPAD_C1_PORT, KEYPAD_C0_PIN, DIO_u8PIN_INPUT);
    32d8:	83 e0       	ldi	r24, 0x03	; 3
    32da:	67 e0       	ldi	r22, 0x07	; 7
    32dc:	40 e0       	ldi	r20, 0x00	; 0
    32de:	0e 94 76 0d 	call	0x1aec	; 0x1aec <MDIO_SetPinDirection>
	MDIO_SetPinDirection(KEYPAD_C2_PORT, KEYPAD_C0_PIN, DIO_u8PIN_INPUT);
    32e2:	83 e0       	ldi	r24, 0x03	; 3
    32e4:	67 e0       	ldi	r22, 0x07	; 7
    32e6:	40 e0       	ldi	r20, 0x00	; 0
    32e8:	0e 94 76 0d 	call	0x1aec	; 0x1aec <MDIO_SetPinDirection>
	MDIO_SetPinDirection(KEYPAD_C3_PORT, KEYPAD_C0_PIN, DIO_u8PIN_INPUT);
    32ec:	83 e0       	ldi	r24, 0x03	; 3
    32ee:	67 e0       	ldi	r22, 0x07	; 7
    32f0:	40 e0       	ldi	r20, 0x00	; 0
    32f2:	0e 94 76 0d 	call	0x1aec	; 0x1aec <MDIO_SetPinDirection>

	MDIO_SetPinValue(KEYPAD_C0_PORT, KEYPAD_C0_PIN, DIO_u8PIN_HIGH);
    32f6:	83 e0       	ldi	r24, 0x03	; 3
    32f8:	67 e0       	ldi	r22, 0x07	; 7
    32fa:	41 e0       	ldi	r20, 0x01	; 1
    32fc:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <MDIO_SetPinValue>
	MDIO_SetPinValue(KEYPAD_C1_PORT, KEYPAD_C0_PIN, DIO_u8PIN_HIGH);
    3300:	83 e0       	ldi	r24, 0x03	; 3
    3302:	67 e0       	ldi	r22, 0x07	; 7
    3304:	41 e0       	ldi	r20, 0x01	; 1
    3306:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <MDIO_SetPinValue>
	MDIO_SetPinValue(KEYPAD_C2_PORT, KEYPAD_C0_PIN, DIO_u8PIN_HIGH);
    330a:	83 e0       	ldi	r24, 0x03	; 3
    330c:	67 e0       	ldi	r22, 0x07	; 7
    330e:	41 e0       	ldi	r20, 0x01	; 1
    3310:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <MDIO_SetPinValue>
	MDIO_SetPinValue(KEYPAD_C3_PORT, KEYPAD_C0_PIN, DIO_u8PIN_HIGH);
    3314:	83 e0       	ldi	r24, 0x03	; 3
    3316:	67 e0       	ldi	r22, 0x07	; 7
    3318:	41 e0       	ldi	r20, 0x01	; 1
    331a:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <MDIO_SetPinValue>

	//row output
	MDIO_SetPinDirection(KEYPAD_R0_PORT, KEYPAD_R0_PIN, DIO_u8PIN_OUTPUT);
    331e:	82 e0       	ldi	r24, 0x02	; 2
    3320:	65 e0       	ldi	r22, 0x05	; 5
    3322:	41 e0       	ldi	r20, 0x01	; 1
    3324:	0e 94 76 0d 	call	0x1aec	; 0x1aec <MDIO_SetPinDirection>
	MDIO_SetPinDirection(KEYPAD_R1_PORT, KEYPAD_R1_PIN, DIO_u8PIN_OUTPUT);
    3328:	82 e0       	ldi	r24, 0x02	; 2
    332a:	64 e0       	ldi	r22, 0x04	; 4
    332c:	41 e0       	ldi	r20, 0x01	; 1
    332e:	0e 94 76 0d 	call	0x1aec	; 0x1aec <MDIO_SetPinDirection>
	MDIO_SetPinDirection(KEYPAD_R2_PORT, KEYPAD_R2_PIN, DIO_u8PIN_OUTPUT);
    3332:	82 e0       	ldi	r24, 0x02	; 2
    3334:	63 e0       	ldi	r22, 0x03	; 3
    3336:	41 e0       	ldi	r20, 0x01	; 1
    3338:	0e 94 76 0d 	call	0x1aec	; 0x1aec <MDIO_SetPinDirection>
	MDIO_SetPinDirection(KEYPAD_R3_PORT, KEYPAD_R3_PIN, DIO_u8PIN_OUTPUT);
    333c:	82 e0       	ldi	r24, 0x02	; 2
    333e:	62 e0       	ldi	r22, 0x02	; 2
    3340:	41 e0       	ldi	r20, 0x01	; 1
    3342:	0e 94 76 0d 	call	0x1aec	; 0x1aec <MDIO_SetPinDirection>


}
    3346:	cf 91       	pop	r28
    3348:	df 91       	pop	r29
    334a:	08 95       	ret

0000334c <HKPD_u8GetPressedKey>:

void HKPD_u8GetPressedKey(u8 * pPressedKey)
{
    334c:	df 93       	push	r29
    334e:	cf 93       	push	r28
    3350:	cd b7       	in	r28, 0x3d	; 61
    3352:	de b7       	in	r29, 0x3e	; 62
    3354:	63 97       	sbiw	r28, 0x13	; 19
    3356:	0f b6       	in	r0, 0x3f	; 63
    3358:	f8 94       	cli
    335a:	de bf       	out	0x3e, r29	; 62
    335c:	0f be       	out	0x3f, r0	; 63
    335e:	cd bf       	out	0x3d, r28	; 61
    3360:	9b 8b       	std	Y+19, r25	; 0x13
    3362:	8a 8b       	std	Y+18, r24	; 0x12
	* pPressedKey = KPD_NO_PRESSED_KEY;
    3364:	ea 89       	ldd	r30, Y+18	; 0x12
    3366:	fb 89       	ldd	r31, Y+19	; 0x13
    3368:	8f ef       	ldi	r24, 0xFF	; 255
    336a:	80 83       	st	Z, r24
	//u8 copy_u8stateflag =
	u8 Local_u8ColCounter = COL_INIT;
    336c:	18 8a       	std	Y+16, r1	; 0x10
	u8 Local_u8RowCounter = ROW_INIT;
    336e:	1f 86       	std	Y+15, r1	; 0x0f

	u8 Local_u8PinValue = 1;
    3370:	81 e0       	ldi	r24, 0x01	; 1
    3372:	89 8b       	std	Y+17, r24	; 0x11

	do
	{

		for (Local_u8RowCounter = ROW_INIT; Local_u8RowCounter <= ROW_NUM; Local_u8RowCounter++)
    3374:	1f 86       	std	Y+15, r1	; 0x0f
    3376:	05 c1       	rjmp	.+522    	; 0x3582 <HKPD_u8GetPressedKey+0x236>
		{
			/* Activate current Row*/
			MDIO_SetPinValue(Row_Port_Arr[Local_u8RowCounter], Row_Pin_Arr[Local_u8RowCounter], DIO_u8PIN_LOW);
    3378:	8f 85       	ldd	r24, Y+15	; 0x0f
    337a:	88 2f       	mov	r24, r24
    337c:	90 e0       	ldi	r25, 0x00	; 0
    337e:	fc 01       	movw	r30, r24
    3380:	e4 58       	subi	r30, 0x84	; 132
    3382:	fe 4f       	sbci	r31, 0xFE	; 254
    3384:	20 81       	ld	r18, Z
    3386:	8f 85       	ldd	r24, Y+15	; 0x0f
    3388:	88 2f       	mov	r24, r24
    338a:	90 e0       	ldi	r25, 0x00	; 0
    338c:	fc 01       	movw	r30, r24
    338e:	e0 58       	subi	r30, 0x80	; 128
    3390:	fe 4f       	sbci	r31, 0xFE	; 254
    3392:	90 81       	ld	r25, Z
    3394:	82 2f       	mov	r24, r18
    3396:	69 2f       	mov	r22, r25
    3398:	40 e0       	ldi	r20, 0x00	; 0
    339a:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <MDIO_SetPinValue>

			for (Local_u8ColCounter = COL_INIT; Local_u8ColCounter <= COL_NUM; Local_u8ColCounter++)
    339e:	18 8a       	std	Y+16, r1	; 0x10
    33a0:	d6 c0       	rjmp	.+428    	; 0x354e <HKPD_u8GetPressedKey+0x202>
			{
				/* Read Current Column */
				MDIO_GetPinValue(Col_Port_Arr[Local_u8ColCounter], Col_Pin_Arr[Local_u8ColCounter],&Local_u8PinValue);
    33a2:	88 89       	ldd	r24, Y+16	; 0x10
    33a4:	88 2f       	mov	r24, r24
    33a6:	90 e0       	ldi	r25, 0x00	; 0
    33a8:	fc 01       	movw	r30, r24
    33aa:	ec 57       	subi	r30, 0x7C	; 124
    33ac:	fe 4f       	sbci	r31, 0xFE	; 254
    33ae:	40 81       	ld	r20, Z
    33b0:	88 89       	ldd	r24, Y+16	; 0x10
    33b2:	88 2f       	mov	r24, r24
    33b4:	90 e0       	ldi	r25, 0x00	; 0
    33b6:	fc 01       	movw	r30, r24
    33b8:	e8 57       	subi	r30, 0x78	; 120
    33ba:	fe 4f       	sbci	r31, 0xFE	; 254
    33bc:	90 81       	ld	r25, Z
    33be:	9e 01       	movw	r18, r28
    33c0:	2f 5e       	subi	r18, 0xEF	; 239
    33c2:	3f 4f       	sbci	r19, 0xFF	; 255
    33c4:	84 2f       	mov	r24, r20
    33c6:	69 2f       	mov	r22, r25
    33c8:	a9 01       	movw	r20, r18
    33ca:	0e 94 2c 10 	call	0x2058	; 0x2058 <MDIO_GetPinValue>
				if (DIO_u8PIN_LOW == Local_u8PinValue)
    33ce:	89 89       	ldd	r24, Y+17	; 0x11
    33d0:	88 23       	and	r24, r24
    33d2:	09 f0       	breq	.+2      	; 0x33d6 <HKPD_u8GetPressedKey+0x8a>
    33d4:	b9 c0       	rjmp	.+370    	; 0x3548 <HKPD_u8GetPressedKey+0x1fc>
    33d6:	80 e0       	ldi	r24, 0x00	; 0
    33d8:	90 e0       	ldi	r25, 0x00	; 0
    33da:	a8 ec       	ldi	r26, 0xC8	; 200
    33dc:	b1 e4       	ldi	r27, 0x41	; 65
    33de:	8b 87       	std	Y+11, r24	; 0x0b
    33e0:	9c 87       	std	Y+12, r25	; 0x0c
    33e2:	ad 87       	std	Y+13, r26	; 0x0d
    33e4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    33e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    33ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    33ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    33ee:	20 e0       	ldi	r18, 0x00	; 0
    33f0:	30 e0       	ldi	r19, 0x00	; 0
    33f2:	4a e7       	ldi	r20, 0x7A	; 122
    33f4:	55 e4       	ldi	r21, 0x45	; 69
    33f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33fa:	dc 01       	movw	r26, r24
    33fc:	cb 01       	movw	r24, r22
    33fe:	8f 83       	std	Y+7, r24	; 0x07
    3400:	98 87       	std	Y+8, r25	; 0x08
    3402:	a9 87       	std	Y+9, r26	; 0x09
    3404:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3406:	6f 81       	ldd	r22, Y+7	; 0x07
    3408:	78 85       	ldd	r23, Y+8	; 0x08
    340a:	89 85       	ldd	r24, Y+9	; 0x09
    340c:	9a 85       	ldd	r25, Y+10	; 0x0a
    340e:	20 e0       	ldi	r18, 0x00	; 0
    3410:	30 e0       	ldi	r19, 0x00	; 0
    3412:	40 e8       	ldi	r20, 0x80	; 128
    3414:	5f e3       	ldi	r21, 0x3F	; 63
    3416:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    341a:	88 23       	and	r24, r24
    341c:	2c f4       	brge	.+10     	; 0x3428 <HKPD_u8GetPressedKey+0xdc>
		__ticks = 1;
    341e:	81 e0       	ldi	r24, 0x01	; 1
    3420:	90 e0       	ldi	r25, 0x00	; 0
    3422:	9e 83       	std	Y+6, r25	; 0x06
    3424:	8d 83       	std	Y+5, r24	; 0x05
    3426:	3f c0       	rjmp	.+126    	; 0x34a6 <HKPD_u8GetPressedKey+0x15a>
	else if (__tmp > 65535)
    3428:	6f 81       	ldd	r22, Y+7	; 0x07
    342a:	78 85       	ldd	r23, Y+8	; 0x08
    342c:	89 85       	ldd	r24, Y+9	; 0x09
    342e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3430:	20 e0       	ldi	r18, 0x00	; 0
    3432:	3f ef       	ldi	r19, 0xFF	; 255
    3434:	4f e7       	ldi	r20, 0x7F	; 127
    3436:	57 e4       	ldi	r21, 0x47	; 71
    3438:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    343c:	18 16       	cp	r1, r24
    343e:	4c f5       	brge	.+82     	; 0x3492 <HKPD_u8GetPressedKey+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3440:	6b 85       	ldd	r22, Y+11	; 0x0b
    3442:	7c 85       	ldd	r23, Y+12	; 0x0c
    3444:	8d 85       	ldd	r24, Y+13	; 0x0d
    3446:	9e 85       	ldd	r25, Y+14	; 0x0e
    3448:	20 e0       	ldi	r18, 0x00	; 0
    344a:	30 e0       	ldi	r19, 0x00	; 0
    344c:	40 e2       	ldi	r20, 0x20	; 32
    344e:	51 e4       	ldi	r21, 0x41	; 65
    3450:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3454:	dc 01       	movw	r26, r24
    3456:	cb 01       	movw	r24, r22
    3458:	bc 01       	movw	r22, r24
    345a:	cd 01       	movw	r24, r26
    345c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3460:	dc 01       	movw	r26, r24
    3462:	cb 01       	movw	r24, r22
    3464:	9e 83       	std	Y+6, r25	; 0x06
    3466:	8d 83       	std	Y+5, r24	; 0x05
    3468:	0f c0       	rjmp	.+30     	; 0x3488 <HKPD_u8GetPressedKey+0x13c>
    346a:	80 e9       	ldi	r24, 0x90	; 144
    346c:	91 e0       	ldi	r25, 0x01	; 1
    346e:	9c 83       	std	Y+4, r25	; 0x04
    3470:	8b 83       	std	Y+3, r24	; 0x03
    3472:	8b 81       	ldd	r24, Y+3	; 0x03
    3474:	9c 81       	ldd	r25, Y+4	; 0x04
    3476:	01 97       	sbiw	r24, 0x01	; 1
    3478:	f1 f7       	brne	.-4      	; 0x3476 <HKPD_u8GetPressedKey+0x12a>
    347a:	9c 83       	std	Y+4, r25	; 0x04
    347c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    347e:	8d 81       	ldd	r24, Y+5	; 0x05
    3480:	9e 81       	ldd	r25, Y+6	; 0x06
    3482:	01 97       	sbiw	r24, 0x01	; 1
    3484:	9e 83       	std	Y+6, r25	; 0x06
    3486:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3488:	8d 81       	ldd	r24, Y+5	; 0x05
    348a:	9e 81       	ldd	r25, Y+6	; 0x06
    348c:	00 97       	sbiw	r24, 0x00	; 0
    348e:	69 f7       	brne	.-38     	; 0x346a <HKPD_u8GetPressedKey+0x11e>
    3490:	14 c0       	rjmp	.+40     	; 0x34ba <HKPD_u8GetPressedKey+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3492:	6f 81       	ldd	r22, Y+7	; 0x07
    3494:	78 85       	ldd	r23, Y+8	; 0x08
    3496:	89 85       	ldd	r24, Y+9	; 0x09
    3498:	9a 85       	ldd	r25, Y+10	; 0x0a
    349a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    349e:	dc 01       	movw	r26, r24
    34a0:	cb 01       	movw	r24, r22
    34a2:	9e 83       	std	Y+6, r25	; 0x06
    34a4:	8d 83       	std	Y+5, r24	; 0x05
    34a6:	8d 81       	ldd	r24, Y+5	; 0x05
    34a8:	9e 81       	ldd	r25, Y+6	; 0x06
    34aa:	9a 83       	std	Y+2, r25	; 0x02
    34ac:	89 83       	std	Y+1, r24	; 0x01
    34ae:	89 81       	ldd	r24, Y+1	; 0x01
    34b0:	9a 81       	ldd	r25, Y+2	; 0x02
    34b2:	01 97       	sbiw	r24, 0x01	; 1
    34b4:	f1 f7       	brne	.-4      	; 0x34b2 <HKPD_u8GetPressedKey+0x166>
    34b6:	9a 83       	std	Y+2, r25	; 0x02
    34b8:	89 83       	std	Y+1, r24	; 0x01
				{
					/* Delay To Prevent Bouncing */
					_delay_ms(25);
					MDIO_GetPinValue(Col_Port_Arr[Local_u8ColCounter], Col_Pin_Arr[Local_u8ColCounter],&Local_u8PinValue);
    34ba:	88 89       	ldd	r24, Y+16	; 0x10
    34bc:	88 2f       	mov	r24, r24
    34be:	90 e0       	ldi	r25, 0x00	; 0
    34c0:	fc 01       	movw	r30, r24
    34c2:	ec 57       	subi	r30, 0x7C	; 124
    34c4:	fe 4f       	sbci	r31, 0xFE	; 254
    34c6:	40 81       	ld	r20, Z
    34c8:	88 89       	ldd	r24, Y+16	; 0x10
    34ca:	88 2f       	mov	r24, r24
    34cc:	90 e0       	ldi	r25, 0x00	; 0
    34ce:	fc 01       	movw	r30, r24
    34d0:	e8 57       	subi	r30, 0x78	; 120
    34d2:	fe 4f       	sbci	r31, 0xFE	; 254
    34d4:	90 81       	ld	r25, Z
    34d6:	9e 01       	movw	r18, r28
    34d8:	2f 5e       	subi	r18, 0xEF	; 239
    34da:	3f 4f       	sbci	r19, 0xFF	; 255
    34dc:	84 2f       	mov	r24, r20
    34de:	69 2f       	mov	r22, r25
    34e0:	a9 01       	movw	r20, r18
    34e2:	0e 94 2c 10 	call	0x2058	; 0x2058 <MDIO_GetPinValue>
					if (DIO_u8PIN_LOW == Local_u8PinValue )
    34e6:	89 89       	ldd	r24, Y+17	; 0x11
    34e8:	88 23       	and	r24, r24
    34ea:	71 f5       	brne	.+92     	; 0x3548 <HKPD_u8GetPressedKey+0x1fc>
    34ec:	16 c0       	rjmp	.+44     	; 0x351a <HKPD_u8GetPressedKey+0x1ce>
					{
						/* Polling (busy waiting ) until the key is released */
						while(DIO_u8PIN_LOW == Local_u8PinValue )
						{
							MDIO_GetPinValue(Col_Port_Arr[Local_u8ColCounter], Col_Pin_Arr[Local_u8ColCounter],&Local_u8PinValue);
    34ee:	88 89       	ldd	r24, Y+16	; 0x10
    34f0:	88 2f       	mov	r24, r24
    34f2:	90 e0       	ldi	r25, 0x00	; 0
    34f4:	fc 01       	movw	r30, r24
    34f6:	ec 57       	subi	r30, 0x7C	; 124
    34f8:	fe 4f       	sbci	r31, 0xFE	; 254
    34fa:	40 81       	ld	r20, Z
    34fc:	88 89       	ldd	r24, Y+16	; 0x10
    34fe:	88 2f       	mov	r24, r24
    3500:	90 e0       	ldi	r25, 0x00	; 0
    3502:	fc 01       	movw	r30, r24
    3504:	e8 57       	subi	r30, 0x78	; 120
    3506:	fe 4f       	sbci	r31, 0xFE	; 254
    3508:	90 81       	ld	r25, Z
    350a:	9e 01       	movw	r18, r28
    350c:	2f 5e       	subi	r18, 0xEF	; 239
    350e:	3f 4f       	sbci	r19, 0xFF	; 255
    3510:	84 2f       	mov	r24, r20
    3512:	69 2f       	mov	r22, r25
    3514:	a9 01       	movw	r20, r18
    3516:	0e 94 2c 10 	call	0x2058	; 0x2058 <MDIO_GetPinValue>
					_delay_ms(25);
					MDIO_GetPinValue(Col_Port_Arr[Local_u8ColCounter], Col_Pin_Arr[Local_u8ColCounter],&Local_u8PinValue);
					if (DIO_u8PIN_LOW == Local_u8PinValue )
					{
						/* Polling (busy waiting ) until the key is released */
						while(DIO_u8PIN_LOW == Local_u8PinValue )
    351a:	89 89       	ldd	r24, Y+17	; 0x11
    351c:	88 23       	and	r24, r24
    351e:	39 f3       	breq	.-50     	; 0x34ee <HKPD_u8GetPressedKey+0x1a2>
						{
							MDIO_GetPinValue(Col_Port_Arr[Local_u8ColCounter], Col_Pin_Arr[Local_u8ColCounter],&Local_u8PinValue);
						}

						* pPressedKey = KPD_u8ArrayValue [Local_u8RowCounter][Local_u8ColCounter];
    3520:	8f 85       	ldd	r24, Y+15	; 0x0f
    3522:	48 2f       	mov	r20, r24
    3524:	50 e0       	ldi	r21, 0x00	; 0
    3526:	88 89       	ldd	r24, Y+16	; 0x10
    3528:	28 2f       	mov	r18, r24
    352a:	30 e0       	ldi	r19, 0x00	; 0
    352c:	ca 01       	movw	r24, r20
    352e:	88 0f       	add	r24, r24
    3530:	99 1f       	adc	r25, r25
    3532:	88 0f       	add	r24, r24
    3534:	99 1f       	adc	r25, r25
    3536:	82 0f       	add	r24, r18
    3538:	93 1f       	adc	r25, r19
    353a:	fc 01       	movw	r30, r24
    353c:	e4 57       	subi	r30, 0x74	; 116
    353e:	fe 4f       	sbci	r31, 0xFE	; 254
    3540:	80 81       	ld	r24, Z
    3542:	ea 89       	ldd	r30, Y+18	; 0x12
    3544:	fb 89       	ldd	r31, Y+19	; 0x13
    3546:	80 83       	st	Z, r24
		for (Local_u8RowCounter = ROW_INIT; Local_u8RowCounter <= ROW_NUM; Local_u8RowCounter++)
		{
			/* Activate current Row*/
			MDIO_SetPinValue(Row_Port_Arr[Local_u8RowCounter], Row_Pin_Arr[Local_u8RowCounter], DIO_u8PIN_LOW);

			for (Local_u8ColCounter = COL_INIT; Local_u8ColCounter <= COL_NUM; Local_u8ColCounter++)
    3548:	88 89       	ldd	r24, Y+16	; 0x10
    354a:	8f 5f       	subi	r24, 0xFF	; 255
    354c:	88 8b       	std	Y+16, r24	; 0x10
    354e:	88 89       	ldd	r24, Y+16	; 0x10
    3550:	85 30       	cpi	r24, 0x05	; 5
    3552:	08 f4       	brcc	.+2      	; 0x3556 <HKPD_u8GetPressedKey+0x20a>
    3554:	26 cf       	rjmp	.-436    	; 0x33a2 <HKPD_u8GetPressedKey+0x56>
						* pPressedKey = KPD_u8ArrayValue [Local_u8RowCounter][Local_u8ColCounter];
					}
				}
			}
			/* Deactivate current Row*/
			MDIO_SetPinValue(Row_Port_Arr[Local_u8RowCounter], Row_Pin_Arr[Local_u8RowCounter], DIO_u8PIN_HIGH);
    3556:	8f 85       	ldd	r24, Y+15	; 0x0f
    3558:	88 2f       	mov	r24, r24
    355a:	90 e0       	ldi	r25, 0x00	; 0
    355c:	fc 01       	movw	r30, r24
    355e:	e4 58       	subi	r30, 0x84	; 132
    3560:	fe 4f       	sbci	r31, 0xFE	; 254
    3562:	20 81       	ld	r18, Z
    3564:	8f 85       	ldd	r24, Y+15	; 0x0f
    3566:	88 2f       	mov	r24, r24
    3568:	90 e0       	ldi	r25, 0x00	; 0
    356a:	fc 01       	movw	r30, r24
    356c:	e0 58       	subi	r30, 0x80	; 128
    356e:	fe 4f       	sbci	r31, 0xFE	; 254
    3570:	90 81       	ld	r25, Z
    3572:	82 2f       	mov	r24, r18
    3574:	69 2f       	mov	r22, r25
    3576:	41 e0       	ldi	r20, 0x01	; 1
    3578:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <MDIO_SetPinValue>
	u8 Local_u8PinValue = 1;

	do
	{

		for (Local_u8RowCounter = ROW_INIT; Local_u8RowCounter <= ROW_NUM; Local_u8RowCounter++)
    357c:	8f 85       	ldd	r24, Y+15	; 0x0f
    357e:	8f 5f       	subi	r24, 0xFF	; 255
    3580:	8f 87       	std	Y+15, r24	; 0x0f
    3582:	8f 85       	ldd	r24, Y+15	; 0x0f
    3584:	85 30       	cpi	r24, 0x05	; 5
    3586:	08 f4       	brcc	.+2      	; 0x358a <HKPD_u8GetPressedKey+0x23e>
    3588:	f7 ce       	rjmp	.-530    	; 0x3378 <HKPD_u8GetPressedKey+0x2c>
			}
			/* Deactivate current Row*/
			MDIO_SetPinValue(Row_Port_Arr[Local_u8RowCounter], Row_Pin_Arr[Local_u8RowCounter], DIO_u8PIN_HIGH);
		}

	} while (KPD_NO_PRESSED_KEY == * pPressedKey);
    358a:	ea 89       	ldd	r30, Y+18	; 0x12
    358c:	fb 89       	ldd	r31, Y+19	; 0x13
    358e:	80 81       	ld	r24, Z
    3590:	8f 3f       	cpi	r24, 0xFF	; 255
    3592:	09 f4       	brne	.+2      	; 0x3596 <HKPD_u8GetPressedKey+0x24a>
    3594:	ef ce       	rjmp	.-546    	; 0x3374 <HKPD_u8GetPressedKey+0x28>
}
    3596:	63 96       	adiw	r28, 0x13	; 19
    3598:	0f b6       	in	r0, 0x3f	; 63
    359a:	f8 94       	cli
    359c:	de bf       	out	0x3e, r29	; 62
    359e:	0f be       	out	0x3f, r0	; 63
    35a0:	cd bf       	out	0x3d, r28	; 61
    35a2:	cf 91       	pop	r28
    35a4:	df 91       	pop	r29
    35a6:	08 95       	ret

000035a8 <HDCMOTOR_voidInit>:
#include "HDCMOTOR_config.h"
#include "HDCMOTOR_interface.h"


error_state_t HDCMOTOR_voidInit(void)
{
    35a8:	df 93       	push	r29
    35aa:	cf 93       	push	r28
    35ac:	0f 92       	push	r0
    35ae:	cd b7       	in	r28, 0x3d	; 61
    35b0:	de b7       	in	r29, 0x3e	; 62
	error_state_t Local_u8ErrorState = DCMOTOR_OK;
    35b2:	88 e0       	ldi	r24, 0x08	; 8
    35b4:	89 83       	std	Y+1, r24	; 0x01
	// init PWM0
	MPWM0_enumInit();
    35b6:	0e 94 a5 0a 	call	0x154a	; 0x154a <MPWM0_enumInit>

	// set motor pin direction as output
	MDIO_SetPinDirection(DCMOTOR_PWM_PORT, DCMOTOR_PWM_PIN, DIO_u8PIN_OUTPUT);
    35ba:	81 e0       	ldi	r24, 0x01	; 1
    35bc:	63 e0       	ldi	r22, 0x03	; 3
    35be:	41 e0       	ldi	r20, 0x01	; 1
    35c0:	0e 94 76 0d 	call	0x1aec	; 0x1aec <MDIO_SetPinDirection>
	MDIO_SetPinDirection(DCMOTOR_DIR_PORT, DCMOTOR_DIR_PIN, DIO_u8PIN_OUTPUT);
    35c4:	81 e0       	ldi	r24, 0x01	; 1
    35c6:	65 e0       	ldi	r22, 0x05	; 5
    35c8:	41 e0       	ldi	r20, 0x01	; 1
    35ca:	0e 94 76 0d 	call	0x1aec	; 0x1aec <MDIO_SetPinDirection>
	MDIO_SetPinDirection(DCMOTOR_EN_PORT, DCMOTOR_EN_PIN, DIO_u8PIN_OUTPUT);
    35ce:	81 e0       	ldi	r24, 0x01	; 1
    35d0:	66 e0       	ldi	r22, 0x06	; 6
    35d2:	41 e0       	ldi	r20, 0x01	; 1
    35d4:	0e 94 76 0d 	call	0x1aec	; 0x1aec <MDIO_SetPinDirection>

	return Local_u8ErrorState;
    35d8:	89 81       	ldd	r24, Y+1	; 0x01

}
    35da:	0f 90       	pop	r0
    35dc:	cf 91       	pop	r28
    35de:	df 91       	pop	r29
    35e0:	08 95       	ret

000035e2 <HDCMOTOR_voidSetDirection>:

error_state_t HDCMOTOR_voidSetDirection(u8 Copy_u8MotorDirection)
{
    35e2:	df 93       	push	r29
    35e4:	cf 93       	push	r28
    35e6:	00 d0       	rcall	.+0      	; 0x35e8 <HDCMOTOR_voidSetDirection+0x6>
    35e8:	cd b7       	in	r28, 0x3d	; 61
    35ea:	de b7       	in	r29, 0x3e	; 62
    35ec:	8a 83       	std	Y+2, r24	; 0x02
	error_state_t Local_u8ErrorState = DCMOTOR_OK;
    35ee:	88 e0       	ldi	r24, 0x08	; 8
    35f0:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8MotorDirection == HDCMOTOR_CW){
    35f2:	8a 81       	ldd	r24, Y+2	; 0x02
    35f4:	81 30       	cpi	r24, 0x01	; 1
    35f6:	31 f4       	brne	.+12     	; 0x3604 <HDCMOTOR_voidSetDirection+0x22>
		MDIO_SetPinValue(DCMOTOR_DIR_PORT, DCMOTOR_DIR_PIN, DIO_u8PIN_HIGH);
    35f8:	81 e0       	ldi	r24, 0x01	; 1
    35fa:	65 e0       	ldi	r22, 0x05	; 5
    35fc:	41 e0       	ldi	r20, 0x01	; 1
    35fe:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <MDIO_SetPinValue>
    3602:	08 c0       	rjmp	.+16     	; 0x3614 <HDCMOTOR_voidSetDirection+0x32>

	} else if (Copy_u8MotorDirection == HDCMOTOR_CCW) {
    3604:	8a 81       	ldd	r24, Y+2	; 0x02
    3606:	82 30       	cpi	r24, 0x02	; 2
    3608:	29 f4       	brne	.+10     	; 0x3614 <HDCMOTOR_voidSetDirection+0x32>
		MDIO_SetPinValue(DCMOTOR_DIR_PORT, DCMOTOR_DIR_PIN, DIO_u8PIN_LOW);
    360a:	81 e0       	ldi	r24, 0x01	; 1
    360c:	65 e0       	ldi	r22, 0x05	; 5
    360e:	40 e0       	ldi	r20, 0x00	; 0
    3610:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <MDIO_SetPinValue>

	} else {
		// No thing
	}

	return Local_u8ErrorState;
    3614:	89 81       	ldd	r24, Y+1	; 0x01

}
    3616:	0f 90       	pop	r0
    3618:	0f 90       	pop	r0
    361a:	cf 91       	pop	r28
    361c:	df 91       	pop	r29
    361e:	08 95       	ret

00003620 <HDCMOTOR_voidSetSpeed>:
error_state_t HDCMOTOR_voidSetSpeed(u8 Copy_u8DutyCycle)
{
    3620:	df 93       	push	r29
    3622:	cf 93       	push	r28
    3624:	00 d0       	rcall	.+0      	; 0x3626 <HDCMOTOR_voidSetSpeed+0x6>
    3626:	cd b7       	in	r28, 0x3d	; 61
    3628:	de b7       	in	r29, 0x3e	; 62
    362a:	8a 83       	std	Y+2, r24	; 0x02
	error_state_t Local_u8ErrorState = DCMOTOR_OK;
    362c:	88 e0       	ldi	r24, 0x08	; 8
    362e:	89 83       	std	Y+1, r24	; 0x01

	MPWM0_enumSetDutyCycle(Copy_u8DutyCycle);
    3630:	8a 81       	ldd	r24, Y+2	; 0x02
    3632:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <MPWM0_enumSetDutyCycle>

	return Local_u8ErrorState;
    3636:	89 81       	ldd	r24, Y+1	; 0x01
}
    3638:	0f 90       	pop	r0
    363a:	0f 90       	pop	r0
    363c:	cf 91       	pop	r28
    363e:	df 91       	pop	r29
    3640:	08 95       	ret

00003642 <HDCMOTOR_voidStart>:

error_state_t HDCMOTOR_voidStart(void)
{
    3642:	df 93       	push	r29
    3644:	cf 93       	push	r28
    3646:	0f 92       	push	r0
    3648:	cd b7       	in	r28, 0x3d	; 61
    364a:	de b7       	in	r29, 0x3e	; 62
	error_state_t Local_u8ErrorState = DCMOTOR_OK;
    364c:	88 e0       	ldi	r24, 0x08	; 8
    364e:	89 83       	std	Y+1, r24	; 0x01

	MPWM0_enumStart();
    3650:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <MPWM0_enumStart>

	return Local_u8ErrorState;
    3654:	89 81       	ldd	r24, Y+1	; 0x01
}
    3656:	0f 90       	pop	r0
    3658:	cf 91       	pop	r28
    365a:	df 91       	pop	r29
    365c:	08 95       	ret

0000365e <HDCMOTOR_voidStop>:

error_state_t HDCMOTOR_voidStop(void)
{
    365e:	df 93       	push	r29
    3660:	cf 93       	push	r28
    3662:	0f 92       	push	r0
    3664:	cd b7       	in	r28, 0x3d	; 61
    3666:	de b7       	in	r29, 0x3e	; 62
	error_state_t Local_u8ErrorState = DCMOTOR_OK;
    3668:	88 e0       	ldi	r24, 0x08	; 8
    366a:	89 83       	std	Y+1, r24	; 0x01
	MPWM0_enumSetDutyCycle(0);
    366c:	80 e0       	ldi	r24, 0x00	; 0
    366e:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <MPWM0_enumSetDutyCycle>
	MDIO_SetPinValue(1, 3, DIO_u8PIN_LOW);
    3672:	81 e0       	ldi	r24, 0x01	; 1
    3674:	63 e0       	ldi	r22, 0x03	; 3
    3676:	40 e0       	ldi	r20, 0x00	; 0
    3678:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <MDIO_SetPinValue>

	MPWM0_enumStop();
    367c:	0e 94 12 0b 	call	0x1624	; 0x1624 <MPWM0_enumStop>
	//MDIO_SetPinValue(DCMOTOR_EN_PORT, DCMOTOR_EN_PIN, DIO_u8PIN_HIGH);

	return Local_u8ErrorState;
    3680:	89 81       	ldd	r24, Y+1	; 0x01
}
    3682:	0f 90       	pop	r0
    3684:	cf 91       	pop	r28
    3686:	df 91       	pop	r29
    3688:	08 95       	ret

0000368a <HDCMOTOR_MoveCW>:

error_state_t HDCMOTOR_MoveCW(u8 Copy_u8DutyCycle)
{
    368a:	df 93       	push	r29
    368c:	cf 93       	push	r28
    368e:	00 d0       	rcall	.+0      	; 0x3690 <HDCMOTOR_MoveCW+0x6>
    3690:	cd b7       	in	r28, 0x3d	; 61
    3692:	de b7       	in	r29, 0x3e	; 62
    3694:	8a 83       	std	Y+2, r24	; 0x02
	error_state_t Local_u8ErrorState = DCMOTOR_OK;
    3696:	88 e0       	ldi	r24, 0x08	; 8
    3698:	89 83       	std	Y+1, r24	; 0x01

	HDCMOTOR_voidSetDirection(HDCMOTOR_CW);
    369a:	81 e0       	ldi	r24, 0x01	; 1
    369c:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <HDCMOTOR_voidSetDirection>
	HDCMOTOR_voidSetSpeed(Copy_u8DutyCycle);
    36a0:	8a 81       	ldd	r24, Y+2	; 0x02
    36a2:	0e 94 10 1b 	call	0x3620	; 0x3620 <HDCMOTOR_voidSetSpeed>
	HDCMOTOR_voidStart();
    36a6:	0e 94 21 1b 	call	0x3642	; 0x3642 <HDCMOTOR_voidStart>

	return Local_u8ErrorState;
    36aa:	89 81       	ldd	r24, Y+1	; 0x01

}
    36ac:	0f 90       	pop	r0
    36ae:	0f 90       	pop	r0
    36b0:	cf 91       	pop	r28
    36b2:	df 91       	pop	r29
    36b4:	08 95       	ret

000036b6 <HDCMOTOR_MoveCCW>:

error_state_t HDCMOTOR_MoveCCW(u8 Copy_u8DutyCycle)
{
    36b6:	df 93       	push	r29
    36b8:	cf 93       	push	r28
    36ba:	00 d0       	rcall	.+0      	; 0x36bc <HDCMOTOR_MoveCCW+0x6>
    36bc:	cd b7       	in	r28, 0x3d	; 61
    36be:	de b7       	in	r29, 0x3e	; 62
    36c0:	8a 83       	std	Y+2, r24	; 0x02
	error_state_t Local_u8ErrorState = DCMOTOR_OK;
    36c2:	88 e0       	ldi	r24, 0x08	; 8
    36c4:	89 83       	std	Y+1, r24	; 0x01

	HDCMOTOR_voidSetDirection(HDCMOTOR_CW);
    36c6:	81 e0       	ldi	r24, 0x01	; 1
    36c8:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <HDCMOTOR_voidSetDirection>
	HDCMOTOR_voidSetSpeed(Copy_u8DutyCycle);
    36cc:	8a 81       	ldd	r24, Y+2	; 0x02
    36ce:	0e 94 10 1b 	call	0x3620	; 0x3620 <HDCMOTOR_voidSetSpeed>
	HDCMOTOR_voidStart();
    36d2:	0e 94 21 1b 	call	0x3642	; 0x3642 <HDCMOTOR_voidStart>

	return Local_u8ErrorState;
    36d6:	89 81       	ldd	r24, Y+1	; 0x01

}
    36d8:	0f 90       	pop	r0
    36da:	0f 90       	pop	r0
    36dc:	cf 91       	pop	r28
    36de:	df 91       	pop	r29
    36e0:	08 95       	ret

000036e2 <HCLCD_SendCommand>:
u8 Local_u8SetPositionY = Y_INITIAL_POSITION;



error_state_t HCLCD_SendCommand(u8 Copy_u8Command)
{
    36e2:	df 93       	push	r29
    36e4:	cf 93       	push	r28
    36e6:	00 d0       	rcall	.+0      	; 0x36e8 <HCLCD_SendCommand+0x6>
    36e8:	cd b7       	in	r28, 0x3d	; 61
    36ea:	de b7       	in	r29, 0x3e	; 62
    36ec:	8a 83       	std	Y+2, r24	; 0x02
	error_state_t Local_ErrorState = R_OK;
    36ee:	81 e0       	ldi	r24, 0x01	; 1
    36f0:	89 83       	std	Y+1, r24	; 0x01

	/* CLR RS Pin To Send Command */
	MDIO_SetPinValue(CLCD_CTRL_PORT, CLCD_RS_PIN, DIO_u8PIN_LOW);
    36f2:	80 e0       	ldi	r24, 0x00	; 0
    36f4:	63 e0       	ldi	r22, 0x03	; 3
    36f6:	40 e0       	ldi	r20, 0x00	; 0
    36f8:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <MDIO_SetPinValue>
	/* CLR RW Pin To Select Write Mode */
	MDIO_SetPinValue(CLCD_CTRL_PORT, CLCD_RW_PIN, DIO_u8PIN_LOW);
    36fc:	80 e0       	ldi	r24, 0x00	; 0
    36fe:	60 e0       	ldi	r22, 0x00	; 0
    3700:	40 e0       	ldi	r20, 0x00	; 0
    3702:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <MDIO_SetPinValue>
	/* Send Command To Data Pin */
	H_LCD_void_latchByte(Copy_u8Command);
    3706:	8a 81       	ldd	r24, Y+2	; 0x02
    3708:	0e 94 a7 1e 	call	0x3d4e	; 0x3d4e <H_LCD_void_latchByte>

	return Local_ErrorState;
    370c:	89 81       	ldd	r24, Y+1	; 0x01
}
    370e:	0f 90       	pop	r0
    3710:	0f 90       	pop	r0
    3712:	cf 91       	pop	r28
    3714:	df 91       	pop	r29
    3716:	08 95       	ret

00003718 <HCLCD_SendData>:



error_state_t HCLCD_SendData(u8 Copy_u8Data)
{
    3718:	df 93       	push	r29
    371a:	cf 93       	push	r28
    371c:	00 d0       	rcall	.+0      	; 0x371e <HCLCD_SendData+0x6>
    371e:	cd b7       	in	r28, 0x3d	; 61
    3720:	de b7       	in	r29, 0x3e	; 62
    3722:	8a 83       	std	Y+2, r24	; 0x02
	error_state_t Local_ErrorState = R_OK;
    3724:	81 e0       	ldi	r24, 0x01	; 1
    3726:	89 83       	std	Y+1, r24	; 0x01
	if(specialCharacter  == OFF)
    3728:	80 91 bb 01 	lds	r24, 0x01BB
    372c:	88 23       	and	r24, r24
    372e:	11 f4       	brne	.+4      	; 0x3734 <HCLCD_SendData+0x1c>
	{
		CLCD_CurrentPosition();
    3730:	0e 94 83 1e 	call	0x3d06	; 0x3d06 <CLCD_CurrentPosition>
	}

	/* SET RS Pin To Send Data */
	MDIO_SetPinValue(CLCD_CTRL_PORT, CLCD_RS_PIN, DIO_u8PIN_HIGH);
    3734:	80 e0       	ldi	r24, 0x00	; 0
    3736:	63 e0       	ldi	r22, 0x03	; 3
    3738:	41 e0       	ldi	r20, 0x01	; 1
    373a:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <MDIO_SetPinValue>
	/* CLR RW Pin To Select Write Mode */
	MDIO_SetPinValue(CLCD_CTRL_PORT, CLCD_RW_PIN, DIO_u8PIN_LOW);
    373e:	80 e0       	ldi	r24, 0x00	; 0
    3740:	60 e0       	ldi	r22, 0x00	; 0
    3742:	40 e0       	ldi	r20, 0x00	; 0
    3744:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <MDIO_SetPinValue>
	/* Send Data To Data Pin */
	H_LCD_void_latchByte(Copy_u8Data);
    3748:	8a 81       	ldd	r24, Y+2	; 0x02
    374a:	0e 94 a7 1e 	call	0x3d4e	; 0x3d4e <H_LCD_void_latchByte>

	return Local_ErrorState;
    374e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3750:	0f 90       	pop	r0
    3752:	0f 90       	pop	r0
    3754:	cf 91       	pop	r28
    3756:	df 91       	pop	r29
    3758:	08 95       	ret

0000375a <HCLCD_Init>:
error_state_t HCLCD_Init(void)
{
    375a:	df 93       	push	r29
    375c:	cf 93       	push	r28
    375e:	cd b7       	in	r28, 0x3d	; 61
    3760:	de b7       	in	r29, 0x3e	; 62
    3762:	2f 97       	sbiw	r28, 0x0f	; 15
    3764:	0f b6       	in	r0, 0x3f	; 63
    3766:	f8 94       	cli
    3768:	de bf       	out	0x3e, r29	; 62
    376a:	0f be       	out	0x3f, r0	; 63
    376c:	cd bf       	out	0x3d, r28	; 61
	error_state_t Local_ErrorState = R_OK;
    376e:	81 e0       	ldi	r24, 0x01	; 1
    3770:	8f 87       	std	Y+15, r24	; 0x0f

	/* Initialize Data pins as output pin */
	MDIO_SetPinDirection(CLCD_DATA_PORT, CLCD_DATA_4_PIN0, DIO_u8PIN_OUTPUT);
    3772:	81 e0       	ldi	r24, 0x01	; 1
    3774:	60 e0       	ldi	r22, 0x00	; 0
    3776:	41 e0       	ldi	r20, 0x01	; 1
    3778:	0e 94 76 0d 	call	0x1aec	; 0x1aec <MDIO_SetPinDirection>
	MDIO_SetPinDirection(CLCD_DATA_PORT, CLCD_DATA_4_PIN1, DIO_u8PIN_OUTPUT);
    377c:	81 e0       	ldi	r24, 0x01	; 1
    377e:	61 e0       	ldi	r22, 0x01	; 1
    3780:	41 e0       	ldi	r20, 0x01	; 1
    3782:	0e 94 76 0d 	call	0x1aec	; 0x1aec <MDIO_SetPinDirection>
	MDIO_SetPinDirection(CLCD_DATA_PORT, CLCD_DATA_4_PIN2, DIO_u8PIN_OUTPUT);
    3786:	81 e0       	ldi	r24, 0x01	; 1
    3788:	62 e0       	ldi	r22, 0x02	; 2
    378a:	41 e0       	ldi	r20, 0x01	; 1
    378c:	0e 94 76 0d 	call	0x1aec	; 0x1aec <MDIO_SetPinDirection>
	MDIO_SetPinDirection(CLCD_DATA_PORT, CLCD_DATA_4_PIN3, DIO_u8PIN_OUTPUT);
    3790:	81 e0       	ldi	r24, 0x01	; 1
    3792:	64 e0       	ldi	r22, 0x04	; 4
    3794:	41 e0       	ldi	r20, 0x01	; 1
    3796:	0e 94 76 0d 	call	0x1aec	; 0x1aec <MDIO_SetPinDirection>
	/* Initialize Control pins as output pin */
	MDIO_SetPinDirection(CLCD_CTRL_PORT, CLCD_RS_PIN, DIO_u8PIN_OUTPUT);
    379a:	80 e0       	ldi	r24, 0x00	; 0
    379c:	63 e0       	ldi	r22, 0x03	; 3
    379e:	41 e0       	ldi	r20, 0x01	; 1
    37a0:	0e 94 76 0d 	call	0x1aec	; 0x1aec <MDIO_SetPinDirection>
	MDIO_SetPinDirection(CLCD_CTRL_PORT, CLCD_EN_PIN, DIO_u8PIN_OUTPUT);
    37a4:	80 e0       	ldi	r24, 0x00	; 0
    37a6:	62 e0       	ldi	r22, 0x02	; 2
    37a8:	41 e0       	ldi	r20, 0x01	; 1
    37aa:	0e 94 76 0d 	call	0x1aec	; 0x1aec <MDIO_SetPinDirection>
    37ae:	80 e0       	ldi	r24, 0x00	; 0
    37b0:	90 e0       	ldi	r25, 0x00	; 0
    37b2:	a0 e2       	ldi	r26, 0x20	; 32
    37b4:	b2 e4       	ldi	r27, 0x42	; 66
    37b6:	8b 87       	std	Y+11, r24	; 0x0b
    37b8:	9c 87       	std	Y+12, r25	; 0x0c
    37ba:	ad 87       	std	Y+13, r26	; 0x0d
    37bc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37be:	6b 85       	ldd	r22, Y+11	; 0x0b
    37c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    37c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    37c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    37c6:	20 e0       	ldi	r18, 0x00	; 0
    37c8:	30 e0       	ldi	r19, 0x00	; 0
    37ca:	4a e7       	ldi	r20, 0x7A	; 122
    37cc:	55 e4       	ldi	r21, 0x45	; 69
    37ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37d2:	dc 01       	movw	r26, r24
    37d4:	cb 01       	movw	r24, r22
    37d6:	8f 83       	std	Y+7, r24	; 0x07
    37d8:	98 87       	std	Y+8, r25	; 0x08
    37da:	a9 87       	std	Y+9, r26	; 0x09
    37dc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    37de:	6f 81       	ldd	r22, Y+7	; 0x07
    37e0:	78 85       	ldd	r23, Y+8	; 0x08
    37e2:	89 85       	ldd	r24, Y+9	; 0x09
    37e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    37e6:	20 e0       	ldi	r18, 0x00	; 0
    37e8:	30 e0       	ldi	r19, 0x00	; 0
    37ea:	40 e8       	ldi	r20, 0x80	; 128
    37ec:	5f e3       	ldi	r21, 0x3F	; 63
    37ee:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    37f2:	88 23       	and	r24, r24
    37f4:	2c f4       	brge	.+10     	; 0x3800 <HCLCD_Init+0xa6>
		__ticks = 1;
    37f6:	81 e0       	ldi	r24, 0x01	; 1
    37f8:	90 e0       	ldi	r25, 0x00	; 0
    37fa:	9e 83       	std	Y+6, r25	; 0x06
    37fc:	8d 83       	std	Y+5, r24	; 0x05
    37fe:	3f c0       	rjmp	.+126    	; 0x387e <HCLCD_Init+0x124>
	else if (__tmp > 65535)
    3800:	6f 81       	ldd	r22, Y+7	; 0x07
    3802:	78 85       	ldd	r23, Y+8	; 0x08
    3804:	89 85       	ldd	r24, Y+9	; 0x09
    3806:	9a 85       	ldd	r25, Y+10	; 0x0a
    3808:	20 e0       	ldi	r18, 0x00	; 0
    380a:	3f ef       	ldi	r19, 0xFF	; 255
    380c:	4f e7       	ldi	r20, 0x7F	; 127
    380e:	57 e4       	ldi	r21, 0x47	; 71
    3810:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3814:	18 16       	cp	r1, r24
    3816:	4c f5       	brge	.+82     	; 0x386a <HCLCD_Init+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3818:	6b 85       	ldd	r22, Y+11	; 0x0b
    381a:	7c 85       	ldd	r23, Y+12	; 0x0c
    381c:	8d 85       	ldd	r24, Y+13	; 0x0d
    381e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3820:	20 e0       	ldi	r18, 0x00	; 0
    3822:	30 e0       	ldi	r19, 0x00	; 0
    3824:	40 e2       	ldi	r20, 0x20	; 32
    3826:	51 e4       	ldi	r21, 0x41	; 65
    3828:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    382c:	dc 01       	movw	r26, r24
    382e:	cb 01       	movw	r24, r22
    3830:	bc 01       	movw	r22, r24
    3832:	cd 01       	movw	r24, r26
    3834:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3838:	dc 01       	movw	r26, r24
    383a:	cb 01       	movw	r24, r22
    383c:	9e 83       	std	Y+6, r25	; 0x06
    383e:	8d 83       	std	Y+5, r24	; 0x05
    3840:	0f c0       	rjmp	.+30     	; 0x3860 <HCLCD_Init+0x106>
    3842:	80 e9       	ldi	r24, 0x90	; 144
    3844:	91 e0       	ldi	r25, 0x01	; 1
    3846:	9c 83       	std	Y+4, r25	; 0x04
    3848:	8b 83       	std	Y+3, r24	; 0x03
    384a:	8b 81       	ldd	r24, Y+3	; 0x03
    384c:	9c 81       	ldd	r25, Y+4	; 0x04
    384e:	01 97       	sbiw	r24, 0x01	; 1
    3850:	f1 f7       	brne	.-4      	; 0x384e <HCLCD_Init+0xf4>
    3852:	9c 83       	std	Y+4, r25	; 0x04
    3854:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3856:	8d 81       	ldd	r24, Y+5	; 0x05
    3858:	9e 81       	ldd	r25, Y+6	; 0x06
    385a:	01 97       	sbiw	r24, 0x01	; 1
    385c:	9e 83       	std	Y+6, r25	; 0x06
    385e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3860:	8d 81       	ldd	r24, Y+5	; 0x05
    3862:	9e 81       	ldd	r25, Y+6	; 0x06
    3864:	00 97       	sbiw	r24, 0x00	; 0
    3866:	69 f7       	brne	.-38     	; 0x3842 <HCLCD_Init+0xe8>
    3868:	14 c0       	rjmp	.+40     	; 0x3892 <HCLCD_Init+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    386a:	6f 81       	ldd	r22, Y+7	; 0x07
    386c:	78 85       	ldd	r23, Y+8	; 0x08
    386e:	89 85       	ldd	r24, Y+9	; 0x09
    3870:	9a 85       	ldd	r25, Y+10	; 0x0a
    3872:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3876:	dc 01       	movw	r26, r24
    3878:	cb 01       	movw	r24, r22
    387a:	9e 83       	std	Y+6, r25	; 0x06
    387c:	8d 83       	std	Y+5, r24	; 0x05
    387e:	8d 81       	ldd	r24, Y+5	; 0x05
    3880:	9e 81       	ldd	r25, Y+6	; 0x06
    3882:	9a 83       	std	Y+2, r25	; 0x02
    3884:	89 83       	std	Y+1, r24	; 0x01
    3886:	89 81       	ldd	r24, Y+1	; 0x01
    3888:	9a 81       	ldd	r25, Y+2	; 0x02
    388a:	01 97       	sbiw	r24, 0x01	; 1
    388c:	f1 f7       	brne	.-4      	; 0x388a <HCLCD_Init+0x130>
    388e:	9a 83       	std	Y+2, r25	; 0x02
    3890:	89 83       	std	Y+1, r24	; 0x01
	/* Wait more than 30ms */
	_delay_ms(40);

#if CLCD_MODE == _4_BIT_MODE
	/* Function set command : 2 lines , 5*8 font size */
	HCLCD_SendCommand(CLCD_SELECT_4_BIT_COMMAND_1);
    3892:	83 e3       	ldi	r24, 0x33	; 51
    3894:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <HCLCD_SendCommand>
	HCLCD_SendCommand(CLCD_SELECT_4_BIT_COMMAND_2);
    3898:	82 e3       	ldi	r24, 0x32	; 50
    389a:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <HCLCD_SendCommand>
	HCLCD_SendCommand(CLCD_SELECT_4_BIT_COMMAND_3);   /* 0bNFXXXXXX  --> N: no of lines F: font size*/
    389e:	88 e2       	ldi	r24, 0x28	; 40
    38a0:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <HCLCD_SendCommand>

	/*Display on off control : disable enable , disable cursor , no blink cursor*/
	HCLCD_SendCommand(CLCD_DISPLAY_ON_CURSOR_OFF);
    38a4:	8c e0       	ldi	r24, 0x0C	; 12
    38a6:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <HCLCD_SendCommand>
	HCLCD_SendCommand(CLCD_RETURN_HOME);
    38aa:	82 e0       	ldi	r24, 0x02	; 2
    38ac:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <HCLCD_SendCommand>

	HCLCD_SendCommand(CLCD_DISPLAY_LEFT_TO_RIGHT);
    38b0:	86 e0       	ldi	r24, 0x06	; 6
    38b2:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <HCLCD_SendCommand>

	/* Clear display */
	HCLCD_SendCommand(CLCD_DISPLAY_CLEAR);
    38b6:	81 e0       	ldi	r24, 0x01	; 1
    38b8:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <HCLCD_SendCommand>

#else
#warning  Select Correct Mode !!!
#endif

	return Local_ErrorState;
    38bc:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    38be:	2f 96       	adiw	r28, 0x0f	; 15
    38c0:	0f b6       	in	r0, 0x3f	; 63
    38c2:	f8 94       	cli
    38c4:	de bf       	out	0x3e, r29	; 62
    38c6:	0f be       	out	0x3f, r0	; 63
    38c8:	cd bf       	out	0x3d, r28	; 61
    38ca:	cf 91       	pop	r28
    38cc:	df 91       	pop	r29
    38ce:	08 95       	ret

000038d0 <HCLCD_Clear>:

error_state_t HCLCD_Clear(void)
{
    38d0:	df 93       	push	r29
    38d2:	cf 93       	push	r28
    38d4:	0f 92       	push	r0
    38d6:	cd b7       	in	r28, 0x3d	; 61
    38d8:	de b7       	in	r29, 0x3e	; 62
	error_state_t Local_ErrorState = R_OK;
    38da:	81 e0       	ldi	r24, 0x01	; 1
    38dc:	89 83       	std	Y+1, r24	; 0x01
	/* Clear display */
	HCLCD_SendCommand(CLCD_DISPLAY_CLEAR); /* 1 or 0x01 or 0b00000001*/
    38de:	81 e0       	ldi	r24, 0x01	; 1
    38e0:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <HCLCD_SendCommand>
	return Local_ErrorState;
    38e4:	89 81       	ldd	r24, Y+1	; 0x01
}
    38e6:	0f 90       	pop	r0
    38e8:	cf 91       	pop	r28
    38ea:	df 91       	pop	r29
    38ec:	08 95       	ret

000038ee <HCLCD_SendString>:

error_state_t HCLCD_SendString(const char *Copy_pu8String)
{
    38ee:	df 93       	push	r29
    38f0:	cf 93       	push	r28
    38f2:	00 d0       	rcall	.+0      	; 0x38f4 <HCLCD_SendString+0x6>
    38f4:	00 d0       	rcall	.+0      	; 0x38f6 <HCLCD_SendString+0x8>
    38f6:	cd b7       	in	r28, 0x3d	; 61
    38f8:	de b7       	in	r29, 0x3e	; 62
    38fa:	9c 83       	std	Y+4, r25	; 0x04
    38fc:	8b 83       	std	Y+3, r24	; 0x03
	error_state_t Local_ErrorState = R_OK;
    38fe:	81 e0       	ldi	r24, 0x01	; 1
    3900:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_Counter = 0;
    3902:	19 82       	std	Y+1, r1	; 0x01
    3904:	0e c0       	rjmp	.+28     	; 0x3922 <HCLCD_SendString+0x34>
	while (Copy_pu8String[Local_Counter] != NULL )
	{
		HCLCD_SendData(Copy_pu8String[Local_Counter]);
    3906:	89 81       	ldd	r24, Y+1	; 0x01
    3908:	28 2f       	mov	r18, r24
    390a:	30 e0       	ldi	r19, 0x00	; 0
    390c:	8b 81       	ldd	r24, Y+3	; 0x03
    390e:	9c 81       	ldd	r25, Y+4	; 0x04
    3910:	fc 01       	movw	r30, r24
    3912:	e2 0f       	add	r30, r18
    3914:	f3 1f       	adc	r31, r19
    3916:	80 81       	ld	r24, Z
    3918:	0e 94 8c 1b 	call	0x3718	; 0x3718 <HCLCD_SendData>
		Local_Counter ++;
    391c:	89 81       	ldd	r24, Y+1	; 0x01
    391e:	8f 5f       	subi	r24, 0xFF	; 255
    3920:	89 83       	std	Y+1, r24	; 0x01

error_state_t HCLCD_SendString(const char *Copy_pu8String)
{
	error_state_t Local_ErrorState = R_OK;
	u8 Local_Counter = 0;
	while (Copy_pu8String[Local_Counter] != NULL )
    3922:	89 81       	ldd	r24, Y+1	; 0x01
    3924:	28 2f       	mov	r18, r24
    3926:	30 e0       	ldi	r19, 0x00	; 0
    3928:	8b 81       	ldd	r24, Y+3	; 0x03
    392a:	9c 81       	ldd	r25, Y+4	; 0x04
    392c:	fc 01       	movw	r30, r24
    392e:	e2 0f       	add	r30, r18
    3930:	f3 1f       	adc	r31, r19
    3932:	80 81       	ld	r24, Z
    3934:	88 23       	and	r24, r24
    3936:	39 f7       	brne	.-50     	; 0x3906 <HCLCD_SendString+0x18>
	{
		HCLCD_SendData(Copy_pu8String[Local_Counter]);
		Local_Counter ++;
	}

	return Local_ErrorState;
    3938:	8a 81       	ldd	r24, Y+2	; 0x02
}
    393a:	0f 90       	pop	r0
    393c:	0f 90       	pop	r0
    393e:	0f 90       	pop	r0
    3940:	0f 90       	pop	r0
    3942:	cf 91       	pop	r28
    3944:	df 91       	pop	r29
    3946:	08 95       	ret

00003948 <HCLCD_SendNumber>:

error_state_t HCLCD_SendNumber(f32 Copy_u32Number)
{
    3948:	0f 93       	push	r16
    394a:	1f 93       	push	r17
    394c:	df 93       	push	r29
    394e:	cf 93       	push	r28
    3950:	cd b7       	in	r28, 0x3d	; 61
    3952:	de b7       	in	r29, 0x3e	; 62
    3954:	6e 97       	sbiw	r28, 0x1e	; 30
    3956:	0f b6       	in	r0, 0x3f	; 63
    3958:	f8 94       	cli
    395a:	de bf       	out	0x3e, r29	; 62
    395c:	0f be       	out	0x3f, r0	; 63
    395e:	cd bf       	out	0x3d, r28	; 61
    3960:	6b 8f       	std	Y+27, r22	; 0x1b
    3962:	7c 8f       	std	Y+28, r23	; 0x1c
    3964:	8d 8f       	std	Y+29, r24	; 0x1d
    3966:	9e 8f       	std	Y+30, r25	; 0x1e
	error_state_t Local_ErrorState = R_OK;
    3968:	81 e0       	ldi	r24, 0x01	; 1
    396a:	8e 83       	std	Y+6, r24	; 0x06

	s32 Local_s32Number = Copy_u32Number;
    396c:	6b 8d       	ldd	r22, Y+27	; 0x1b
    396e:	7c 8d       	ldd	r23, Y+28	; 0x1c
    3970:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3972:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3974:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    3978:	dc 01       	movw	r26, r24
    397a:	cb 01       	movw	r24, r22
    397c:	8a 83       	std	Y+2, r24	; 0x02
    397e:	9b 83       	std	Y+3, r25	; 0x03
    3980:	ac 83       	std	Y+4, r26	; 0x04
    3982:	bd 83       	std	Y+5, r27	; 0x05

	if(Local_s32Number == 0)
    3984:	8a 81       	ldd	r24, Y+2	; 0x02
    3986:	9b 81       	ldd	r25, Y+3	; 0x03
    3988:	ac 81       	ldd	r26, Y+4	; 0x04
    398a:	bd 81       	ldd	r27, Y+5	; 0x05
    398c:	00 97       	sbiw	r24, 0x00	; 0
    398e:	a1 05       	cpc	r26, r1
    3990:	b1 05       	cpc	r27, r1
    3992:	21 f4       	brne	.+8      	; 0x399c <HCLCD_SendNumber+0x54>
	{
		HCLCD_SendData('0');
    3994:	80 e3       	ldi	r24, 0x30	; 48
    3996:	0e 94 8c 1b 	call	0x3718	; 0x3718 <HCLCD_SendData>
    399a:	18 c0       	rjmp	.+48     	; 0x39cc <HCLCD_SendNumber+0x84>
	}
	else if (Local_s32Number <0)
    399c:	8a 81       	ldd	r24, Y+2	; 0x02
    399e:	9b 81       	ldd	r25, Y+3	; 0x03
    39a0:	ac 81       	ldd	r26, Y+4	; 0x04
    39a2:	bd 81       	ldd	r27, Y+5	; 0x05
    39a4:	bb 23       	and	r27, r27
    39a6:	94 f4       	brge	.+36     	; 0x39cc <HCLCD_SendNumber+0x84>
	{
		HCLCD_SendData('-');
    39a8:	8d e2       	ldi	r24, 0x2D	; 45
    39aa:	0e 94 8c 1b 	call	0x3718	; 0x3718 <HCLCD_SendData>
		Local_s32Number = Local_s32Number *(-1);
    39ae:	8a 81       	ldd	r24, Y+2	; 0x02
    39b0:	9b 81       	ldd	r25, Y+3	; 0x03
    39b2:	ac 81       	ldd	r26, Y+4	; 0x04
    39b4:	bd 81       	ldd	r27, Y+5	; 0x05
    39b6:	b0 95       	com	r27
    39b8:	a0 95       	com	r26
    39ba:	90 95       	com	r25
    39bc:	81 95       	neg	r24
    39be:	9f 4f       	sbci	r25, 0xFF	; 255
    39c0:	af 4f       	sbci	r26, 0xFF	; 255
    39c2:	bf 4f       	sbci	r27, 0xFF	; 255
    39c4:	8a 83       	std	Y+2, r24	; 0x02
    39c6:	9b 83       	std	Y+3, r25	; 0x03
    39c8:	ac 83       	std	Y+4, r26	; 0x04
    39ca:	bd 83       	std	Y+5, r27	; 0x05

	}
	u8 Local_u8Array[20]={0};
    39cc:	84 e1       	ldi	r24, 0x14	; 20
    39ce:	fe 01       	movw	r30, r28
    39d0:	37 96       	adiw	r30, 0x07	; 7
    39d2:	df 01       	movw	r26, r30
    39d4:	98 2f       	mov	r25, r24
    39d6:	1d 92       	st	X+, r1
    39d8:	9a 95       	dec	r25
    39da:	e9 f7       	brne	.-6      	; 0x39d6 <HCLCD_SendNumber+0x8e>
	s8 local_s8Counter =0;
    39dc:	19 82       	std	Y+1, r1	; 0x01
    39de:	2f c0       	rjmp	.+94     	; 0x3a3e <HCLCD_SendNumber+0xf6>
	while (Local_s32Number != 0)
	{
		Local_u8Array[local_s8Counter]= Local_s32Number%10;
    39e0:	89 81       	ldd	r24, Y+1	; 0x01
    39e2:	08 2f       	mov	r16, r24
    39e4:	11 27       	eor	r17, r17
    39e6:	07 fd       	sbrc	r16, 7
    39e8:	10 95       	com	r17
    39ea:	8a 81       	ldd	r24, Y+2	; 0x02
    39ec:	9b 81       	ldd	r25, Y+3	; 0x03
    39ee:	ac 81       	ldd	r26, Y+4	; 0x04
    39f0:	bd 81       	ldd	r27, Y+5	; 0x05
    39f2:	2a e0       	ldi	r18, 0x0A	; 10
    39f4:	30 e0       	ldi	r19, 0x00	; 0
    39f6:	40 e0       	ldi	r20, 0x00	; 0
    39f8:	50 e0       	ldi	r21, 0x00	; 0
    39fa:	bc 01       	movw	r22, r24
    39fc:	cd 01       	movw	r24, r26
    39fe:	0e 94 c9 21 	call	0x4392	; 0x4392 <__divmodsi4>
    3a02:	dc 01       	movw	r26, r24
    3a04:	cb 01       	movw	r24, r22
    3a06:	28 2f       	mov	r18, r24
    3a08:	ce 01       	movw	r24, r28
    3a0a:	07 96       	adiw	r24, 0x07	; 7
    3a0c:	fc 01       	movw	r30, r24
    3a0e:	e0 0f       	add	r30, r16
    3a10:	f1 1f       	adc	r31, r17
    3a12:	20 83       	st	Z, r18
		Local_s32Number/=10;
    3a14:	8a 81       	ldd	r24, Y+2	; 0x02
    3a16:	9b 81       	ldd	r25, Y+3	; 0x03
    3a18:	ac 81       	ldd	r26, Y+4	; 0x04
    3a1a:	bd 81       	ldd	r27, Y+5	; 0x05
    3a1c:	2a e0       	ldi	r18, 0x0A	; 10
    3a1e:	30 e0       	ldi	r19, 0x00	; 0
    3a20:	40 e0       	ldi	r20, 0x00	; 0
    3a22:	50 e0       	ldi	r21, 0x00	; 0
    3a24:	bc 01       	movw	r22, r24
    3a26:	cd 01       	movw	r24, r26
    3a28:	0e 94 c9 21 	call	0x4392	; 0x4392 <__divmodsi4>
    3a2c:	da 01       	movw	r26, r20
    3a2e:	c9 01       	movw	r24, r18
    3a30:	8a 83       	std	Y+2, r24	; 0x02
    3a32:	9b 83       	std	Y+3, r25	; 0x03
    3a34:	ac 83       	std	Y+4, r26	; 0x04
    3a36:	bd 83       	std	Y+5, r27	; 0x05
		local_s8Counter++;
    3a38:	89 81       	ldd	r24, Y+1	; 0x01
    3a3a:	8f 5f       	subi	r24, 0xFF	; 255
    3a3c:	89 83       	std	Y+1, r24	; 0x01
		Local_s32Number = Local_s32Number *(-1);

	}
	u8 Local_u8Array[20]={0};
	s8 local_s8Counter =0;
	while (Local_s32Number != 0)
    3a3e:	8a 81       	ldd	r24, Y+2	; 0x02
    3a40:	9b 81       	ldd	r25, Y+3	; 0x03
    3a42:	ac 81       	ldd	r26, Y+4	; 0x04
    3a44:	bd 81       	ldd	r27, Y+5	; 0x05
    3a46:	00 97       	sbiw	r24, 0x00	; 0
    3a48:	a1 05       	cpc	r26, r1
    3a4a:	b1 05       	cpc	r27, r1
    3a4c:	49 f6       	brne	.-110    	; 0x39e0 <HCLCD_SendNumber+0x98>
	{
		Local_u8Array[local_s8Counter]= Local_s32Number%10;
		Local_s32Number/=10;
		local_s8Counter++;
	}
	local_s8Counter--;
    3a4e:	89 81       	ldd	r24, Y+1	; 0x01
    3a50:	81 50       	subi	r24, 0x01	; 1
    3a52:	89 83       	std	Y+1, r24	; 0x01
    3a54:	11 c0       	rjmp	.+34     	; 0x3a78 <HCLCD_SendNumber+0x130>
	while (local_s8Counter>=0)
	{
		HCLCD_SendData(Local_u8Array[local_s8Counter]+'0');
    3a56:	89 81       	ldd	r24, Y+1	; 0x01
    3a58:	28 2f       	mov	r18, r24
    3a5a:	33 27       	eor	r19, r19
    3a5c:	27 fd       	sbrc	r18, 7
    3a5e:	30 95       	com	r19
    3a60:	ce 01       	movw	r24, r28
    3a62:	07 96       	adiw	r24, 0x07	; 7
    3a64:	fc 01       	movw	r30, r24
    3a66:	e2 0f       	add	r30, r18
    3a68:	f3 1f       	adc	r31, r19
    3a6a:	80 81       	ld	r24, Z
    3a6c:	80 5d       	subi	r24, 0xD0	; 208
    3a6e:	0e 94 8c 1b 	call	0x3718	; 0x3718 <HCLCD_SendData>
		local_s8Counter--;
    3a72:	89 81       	ldd	r24, Y+1	; 0x01
    3a74:	81 50       	subi	r24, 0x01	; 1
    3a76:	89 83       	std	Y+1, r24	; 0x01
		Local_u8Array[local_s8Counter]= Local_s32Number%10;
		Local_s32Number/=10;
		local_s8Counter++;
	}
	local_s8Counter--;
	while (local_s8Counter>=0)
    3a78:	89 81       	ldd	r24, Y+1	; 0x01
    3a7a:	88 23       	and	r24, r24
    3a7c:	64 f7       	brge	.-40     	; 0x3a56 <HCLCD_SendNumber+0x10e>
	{
		HCLCD_SendData(Local_u8Array[local_s8Counter]+'0');
		local_s8Counter--;
	}
	return Local_ErrorState;
    3a7e:	8e 81       	ldd	r24, Y+6	; 0x06
}
    3a80:	6e 96       	adiw	r28, 0x1e	; 30
    3a82:	0f b6       	in	r0, 0x3f	; 63
    3a84:	f8 94       	cli
    3a86:	de bf       	out	0x3e, r29	; 62
    3a88:	0f be       	out	0x3f, r0	; 63
    3a8a:	cd bf       	out	0x3d, r28	; 61
    3a8c:	cf 91       	pop	r28
    3a8e:	df 91       	pop	r29
    3a90:	1f 91       	pop	r17
    3a92:	0f 91       	pop	r16
    3a94:	08 95       	ret

00003a96 <HCLCD_voidWriteFloatNumber>:

void HCLCD_voidWriteFloatNumber(f32 Copy_f32FloatNumber )
{
    3a96:	df 93       	push	r29
    3a98:	cf 93       	push	r28
    3a9a:	cd b7       	in	r28, 0x3d	; 61
    3a9c:	de b7       	in	r29, 0x3e	; 62
    3a9e:	28 97       	sbiw	r28, 0x08	; 8
    3aa0:	0f b6       	in	r0, 0x3f	; 63
    3aa2:	f8 94       	cli
    3aa4:	de bf       	out	0x3e, r29	; 62
    3aa6:	0f be       	out	0x3f, r0	; 63
    3aa8:	cd bf       	out	0x3d, r28	; 61
    3aaa:	6d 83       	std	Y+5, r22	; 0x05
    3aac:	7e 83       	std	Y+6, r23	; 0x06
    3aae:	8f 83       	std	Y+7, r24	; 0x07
    3ab0:	98 87       	std	Y+8, r25	; 0x08

	if(Copy_f32FloatNumber == 0)
    3ab2:	6d 81       	ldd	r22, Y+5	; 0x05
    3ab4:	7e 81       	ldd	r23, Y+6	; 0x06
    3ab6:	8f 81       	ldd	r24, Y+7	; 0x07
    3ab8:	98 85       	ldd	r25, Y+8	; 0x08
    3aba:	20 e0       	ldi	r18, 0x00	; 0
    3abc:	30 e0       	ldi	r19, 0x00	; 0
    3abe:	40 e0       	ldi	r20, 0x00	; 0
    3ac0:	50 e0       	ldi	r21, 0x00	; 0
    3ac2:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    3ac6:	88 23       	and	r24, r24
    3ac8:	39 f4       	brne	.+14     	; 0x3ad8 <HCLCD_voidWriteFloatNumber+0x42>
	{
		HCLCD_SendNumber(0);
    3aca:	60 e0       	ldi	r22, 0x00	; 0
    3acc:	70 e0       	ldi	r23, 0x00	; 0
    3ace:	80 e0       	ldi	r24, 0x00	; 0
    3ad0:	90 e0       	ldi	r25, 0x00	; 0
    3ad2:	0e 94 a4 1c 	call	0x3948	; 0x3948 <HCLCD_SendNumber>
    3ad6:	89 c0       	rjmp	.+274    	; 0x3bea <HCLCD_voidWriteFloatNumber+0x154>
	}

	else
	{
		s32 Local_s32DecemalNum=Copy_f32FloatNumber;
    3ad8:	6d 81       	ldd	r22, Y+5	; 0x05
    3ada:	7e 81       	ldd	r23, Y+6	; 0x06
    3adc:	8f 81       	ldd	r24, Y+7	; 0x07
    3ade:	98 85       	ldd	r25, Y+8	; 0x08
    3ae0:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    3ae4:	dc 01       	movw	r26, r24
    3ae6:	cb 01       	movw	r24, r22
    3ae8:	89 83       	std	Y+1, r24	; 0x01
    3aea:	9a 83       	std	Y+2, r25	; 0x02
    3aec:	ab 83       	std	Y+3, r26	; 0x03
    3aee:	bc 83       	std	Y+4, r27	; 0x04
		HCLCD_SendNumber(Local_s32DecemalNum);
    3af0:	69 81       	ldd	r22, Y+1	; 0x01
    3af2:	7a 81       	ldd	r23, Y+2	; 0x02
    3af4:	8b 81       	ldd	r24, Y+3	; 0x03
    3af6:	9c 81       	ldd	r25, Y+4	; 0x04
    3af8:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    3afc:	dc 01       	movw	r26, r24
    3afe:	cb 01       	movw	r24, r22
    3b00:	bc 01       	movw	r22, r24
    3b02:	cd 01       	movw	r24, r26
    3b04:	0e 94 a4 1c 	call	0x3948	; 0x3948 <HCLCD_SendNumber>

		Copy_f32FloatNumber = Copy_f32FloatNumber -Local_s32DecemalNum;
    3b08:	69 81       	ldd	r22, Y+1	; 0x01
    3b0a:	7a 81       	ldd	r23, Y+2	; 0x02
    3b0c:	8b 81       	ldd	r24, Y+3	; 0x03
    3b0e:	9c 81       	ldd	r25, Y+4	; 0x04
    3b10:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    3b14:	9b 01       	movw	r18, r22
    3b16:	ac 01       	movw	r20, r24
    3b18:	6d 81       	ldd	r22, Y+5	; 0x05
    3b1a:	7e 81       	ldd	r23, Y+6	; 0x06
    3b1c:	8f 81       	ldd	r24, Y+7	; 0x07
    3b1e:	98 85       	ldd	r25, Y+8	; 0x08
    3b20:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    3b24:	dc 01       	movw	r26, r24
    3b26:	cb 01       	movw	r24, r22
    3b28:	8d 83       	std	Y+5, r24	; 0x05
    3b2a:	9e 83       	std	Y+6, r25	; 0x06
    3b2c:	af 83       	std	Y+7, r26	; 0x07
    3b2e:	b8 87       	std	Y+8, r27	; 0x08
		if (Copy_f32FloatNumber>0)
    3b30:	6d 81       	ldd	r22, Y+5	; 0x05
    3b32:	7e 81       	ldd	r23, Y+6	; 0x06
    3b34:	8f 81       	ldd	r24, Y+7	; 0x07
    3b36:	98 85       	ldd	r25, Y+8	; 0x08
    3b38:	20 e0       	ldi	r18, 0x00	; 0
    3b3a:	30 e0       	ldi	r19, 0x00	; 0
    3b3c:	40 e0       	ldi	r20, 0x00	; 0
    3b3e:	50 e0       	ldi	r21, 0x00	; 0
    3b40:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3b44:	18 16       	cp	r1, r24
    3b46:	0c f0       	brlt	.+2      	; 0x3b4a <HCLCD_voidWriteFloatNumber+0xb4>
    3b48:	50 c0       	rjmp	.+160    	; 0x3bea <HCLCD_voidWriteFloatNumber+0x154>
		{
			HCLCD_SendData('.');
    3b4a:	8e e2       	ldi	r24, 0x2E	; 46
    3b4c:	0e 94 8c 1b 	call	0x3718	; 0x3718 <HCLCD_SendData>
			Copy_f32FloatNumber*=100000;
    3b50:	6d 81       	ldd	r22, Y+5	; 0x05
    3b52:	7e 81       	ldd	r23, Y+6	; 0x06
    3b54:	8f 81       	ldd	r24, Y+7	; 0x07
    3b56:	98 85       	ldd	r25, Y+8	; 0x08
    3b58:	20 e0       	ldi	r18, 0x00	; 0
    3b5a:	30 e5       	ldi	r19, 0x50	; 80
    3b5c:	43 ec       	ldi	r20, 0xC3	; 195
    3b5e:	57 e4       	ldi	r21, 0x47	; 71
    3b60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b64:	dc 01       	movw	r26, r24
    3b66:	cb 01       	movw	r24, r22
    3b68:	8d 83       	std	Y+5, r24	; 0x05
    3b6a:	9e 83       	std	Y+6, r25	; 0x06
    3b6c:	af 83       	std	Y+7, r26	; 0x07
    3b6e:	b8 87       	std	Y+8, r27	; 0x08
			Local_s32DecemalNum = Copy_f32FloatNumber;
    3b70:	6d 81       	ldd	r22, Y+5	; 0x05
    3b72:	7e 81       	ldd	r23, Y+6	; 0x06
    3b74:	8f 81       	ldd	r24, Y+7	; 0x07
    3b76:	98 85       	ldd	r25, Y+8	; 0x08
    3b78:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    3b7c:	dc 01       	movw	r26, r24
    3b7e:	cb 01       	movw	r24, r22
    3b80:	89 83       	std	Y+1, r24	; 0x01
    3b82:	9a 83       	std	Y+2, r25	; 0x02
    3b84:	ab 83       	std	Y+3, r26	; 0x03
    3b86:	bc 83       	std	Y+4, r27	; 0x04
    3b88:	12 c0       	rjmp	.+36     	; 0x3bae <HCLCD_voidWriteFloatNumber+0x118>

			while (Local_s32DecemalNum%10 == 0)
			{
				Local_s32DecemalNum/=10;
    3b8a:	89 81       	ldd	r24, Y+1	; 0x01
    3b8c:	9a 81       	ldd	r25, Y+2	; 0x02
    3b8e:	ab 81       	ldd	r26, Y+3	; 0x03
    3b90:	bc 81       	ldd	r27, Y+4	; 0x04
    3b92:	2a e0       	ldi	r18, 0x0A	; 10
    3b94:	30 e0       	ldi	r19, 0x00	; 0
    3b96:	40 e0       	ldi	r20, 0x00	; 0
    3b98:	50 e0       	ldi	r21, 0x00	; 0
    3b9a:	bc 01       	movw	r22, r24
    3b9c:	cd 01       	movw	r24, r26
    3b9e:	0e 94 c9 21 	call	0x4392	; 0x4392 <__divmodsi4>
    3ba2:	da 01       	movw	r26, r20
    3ba4:	c9 01       	movw	r24, r18
    3ba6:	89 83       	std	Y+1, r24	; 0x01
    3ba8:	9a 83       	std	Y+2, r25	; 0x02
    3baa:	ab 83       	std	Y+3, r26	; 0x03
    3bac:	bc 83       	std	Y+4, r27	; 0x04
		{
			HCLCD_SendData('.');
			Copy_f32FloatNumber*=100000;
			Local_s32DecemalNum = Copy_f32FloatNumber;

			while (Local_s32DecemalNum%10 == 0)
    3bae:	89 81       	ldd	r24, Y+1	; 0x01
    3bb0:	9a 81       	ldd	r25, Y+2	; 0x02
    3bb2:	ab 81       	ldd	r26, Y+3	; 0x03
    3bb4:	bc 81       	ldd	r27, Y+4	; 0x04
    3bb6:	2a e0       	ldi	r18, 0x0A	; 10
    3bb8:	30 e0       	ldi	r19, 0x00	; 0
    3bba:	40 e0       	ldi	r20, 0x00	; 0
    3bbc:	50 e0       	ldi	r21, 0x00	; 0
    3bbe:	bc 01       	movw	r22, r24
    3bc0:	cd 01       	movw	r24, r26
    3bc2:	0e 94 c9 21 	call	0x4392	; 0x4392 <__divmodsi4>
    3bc6:	dc 01       	movw	r26, r24
    3bc8:	cb 01       	movw	r24, r22
    3bca:	00 97       	sbiw	r24, 0x00	; 0
    3bcc:	a1 05       	cpc	r26, r1
    3bce:	b1 05       	cpc	r27, r1
    3bd0:	e1 f2       	breq	.-72     	; 0x3b8a <HCLCD_voidWriteFloatNumber+0xf4>
			{
				Local_s32DecemalNum/=10;
			}
			HCLCD_SendNumber(Local_s32DecemalNum);
    3bd2:	69 81       	ldd	r22, Y+1	; 0x01
    3bd4:	7a 81       	ldd	r23, Y+2	; 0x02
    3bd6:	8b 81       	ldd	r24, Y+3	; 0x03
    3bd8:	9c 81       	ldd	r25, Y+4	; 0x04
    3bda:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    3bde:	dc 01       	movw	r26, r24
    3be0:	cb 01       	movw	r24, r22
    3be2:	bc 01       	movw	r22, r24
    3be4:	cd 01       	movw	r24, r26
    3be6:	0e 94 a4 1c 	call	0x3948	; 0x3948 <HCLCD_SendNumber>
		//else
		//{
		//	Local_s32DecemalNum /=100;
		//}
	}
}
    3bea:	28 96       	adiw	r28, 0x08	; 8
    3bec:	0f b6       	in	r0, 0x3f	; 63
    3bee:	f8 94       	cli
    3bf0:	de bf       	out	0x3e, r29	; 62
    3bf2:	0f be       	out	0x3f, r0	; 63
    3bf4:	cd bf       	out	0x3d, r28	; 61
    3bf6:	cf 91       	pop	r28
    3bf8:	df 91       	pop	r29
    3bfa:	08 95       	ret

00003bfc <HCLCD_WriteSpecialCharacter>:
    HCLCD_GoToXY(row, col);
    HCLCD_SendNumber(value);
}****/

error_state_t HCLCD_WriteSpecialCharacter(u8* Copy_pu8Pattern, u8 Copy_u8PatternNumber, u8 Copy_u8XPos, u8 Copy_u8YPos)
{
    3bfc:	df 93       	push	r29
    3bfe:	cf 93       	push	r28
    3c00:	cd b7       	in	r28, 0x3d	; 61
    3c02:	de b7       	in	r29, 0x3e	; 62
    3c04:	28 97       	sbiw	r28, 0x08	; 8
    3c06:	0f b6       	in	r0, 0x3f	; 63
    3c08:	f8 94       	cli
    3c0a:	de bf       	out	0x3e, r29	; 62
    3c0c:	0f be       	out	0x3f, r0	; 63
    3c0e:	cd bf       	out	0x3d, r28	; 61
    3c10:	9d 83       	std	Y+5, r25	; 0x05
    3c12:	8c 83       	std	Y+4, r24	; 0x04
    3c14:	6e 83       	std	Y+6, r22	; 0x06
    3c16:	4f 83       	std	Y+7, r20	; 0x07
    3c18:	28 87       	std	Y+8, r18	; 0x08
	error_state_t Local_ErrorState = R_OK;
    3c1a:	81 e0       	ldi	r24, 0x01	; 1
    3c1c:	8b 83       	std	Y+3, r24	; 0x03
	specialCharacter  = ON;
    3c1e:	81 e0       	ldi	r24, 0x01	; 1
    3c20:	80 93 bb 01 	sts	0x01BB, r24

	u8 Local_u8CGRAMAddress= 0;
    3c24:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8Iterator =0;
    3c26:	19 82       	std	Y+1, r1	; 0x01

	/* Calculate the CGRAM address whose each block is 8 bytes */
	Local_u8CGRAMAddress =Copy_u8PatternNumber*8;
    3c28:	8e 81       	ldd	r24, Y+6	; 0x06
    3c2a:	88 2f       	mov	r24, r24
    3c2c:	90 e0       	ldi	r25, 0x00	; 0
    3c2e:	88 0f       	add	r24, r24
    3c30:	99 1f       	adc	r25, r25
    3c32:	88 0f       	add	r24, r24
    3c34:	99 1f       	adc	r25, r25
    3c36:	88 0f       	add	r24, r24
    3c38:	99 1f       	adc	r25, r25
    3c3a:	8a 83       	std	Y+2, r24	; 0x02

	/* Send CGRAM Address command to LCD, with setting bit 6, clearing bit 7*/
	HCLCD_SendCommand(Local_u8CGRAMAddress+64);
    3c3c:	8a 81       	ldd	r24, Y+2	; 0x02
    3c3e:	80 5c       	subi	r24, 0xC0	; 192
    3c40:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <HCLCD_SendCommand>

	/* Write the pattern into CGRAM */

	for (Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++)
    3c44:	19 82       	std	Y+1, r1	; 0x01
    3c46:	0e c0       	rjmp	.+28     	; 0x3c64 <HCLCD_WriteSpecialCharacter+0x68>
	{
		HCLCD_SendData(Copy_pu8Pattern[Local_u8Iterator]);
    3c48:	89 81       	ldd	r24, Y+1	; 0x01
    3c4a:	28 2f       	mov	r18, r24
    3c4c:	30 e0       	ldi	r19, 0x00	; 0
    3c4e:	8c 81       	ldd	r24, Y+4	; 0x04
    3c50:	9d 81       	ldd	r25, Y+5	; 0x05
    3c52:	fc 01       	movw	r30, r24
    3c54:	e2 0f       	add	r30, r18
    3c56:	f3 1f       	adc	r31, r19
    3c58:	80 81       	ld	r24, Z
    3c5a:	0e 94 8c 1b 	call	0x3718	; 0x3718 <HCLCD_SendData>
	/* Send CGRAM Address command to LCD, with setting bit 6, clearing bit 7*/
	HCLCD_SendCommand(Local_u8CGRAMAddress+64);

	/* Write the pattern into CGRAM */

	for (Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++)
    3c5e:	89 81       	ldd	r24, Y+1	; 0x01
    3c60:	8f 5f       	subi	r24, 0xFF	; 255
    3c62:	89 83       	std	Y+1, r24	; 0x01
    3c64:	89 81       	ldd	r24, Y+1	; 0x01
    3c66:	88 30       	cpi	r24, 0x08	; 8
    3c68:	78 f3       	brcs	.-34     	; 0x3c48 <HCLCD_WriteSpecialCharacter+0x4c>
	{
		HCLCD_SendData(Copy_pu8Pattern[Local_u8Iterator]);
	}

	/* go back to the DDRAM to display the Pattern*/
	HCLCD_GoToXY(Copy_u8XPos,Copy_u8YPos);
    3c6a:	8f 81       	ldd	r24, Y+7	; 0x07
    3c6c:	68 85       	ldd	r22, Y+8	; 0x08
    3c6e:	0e 94 48 1e 	call	0x3c90	; 0x3c90 <HCLCD_GoToXY>
	/* Display the pattern written in the CGRAM*/
	HCLCD_SendData(Copy_u8PatternNumber);
    3c72:	8e 81       	ldd	r24, Y+6	; 0x06
    3c74:	0e 94 8c 1b 	call	0x3718	; 0x3718 <HCLCD_SendData>
	specialCharacter  = OFF;
    3c78:	10 92 bb 01 	sts	0x01BB, r1

	return Local_ErrorState;
    3c7c:	8b 81       	ldd	r24, Y+3	; 0x03

}
    3c7e:	28 96       	adiw	r28, 0x08	; 8
    3c80:	0f b6       	in	r0, 0x3f	; 63
    3c82:	f8 94       	cli
    3c84:	de bf       	out	0x3e, r29	; 62
    3c86:	0f be       	out	0x3f, r0	; 63
    3c88:	cd bf       	out	0x3d, r28	; 61
    3c8a:	cf 91       	pop	r28
    3c8c:	df 91       	pop	r29
    3c8e:	08 95       	ret

00003c90 <HCLCD_GoToXY>:
	return Local_ErrorState;

}*/

error_state_t HCLCD_GoToXY(u8 Copy_u8Xpos, u8 Copy_u8Ypos)
{
    3c90:	df 93       	push	r29
    3c92:	cf 93       	push	r28
    3c94:	cd b7       	in	r28, 0x3d	; 61
    3c96:	de b7       	in	r29, 0x3e	; 62
    3c98:	28 97       	sbiw	r28, 0x08	; 8
    3c9a:	0f b6       	in	r0, 0x3f	; 63
    3c9c:	f8 94       	cli
    3c9e:	de bf       	out	0x3e, r29	; 62
    3ca0:	0f be       	out	0x3f, r0	; 63
    3ca2:	cd bf       	out	0x3d, r28	; 61
    3ca4:	8f 83       	std	Y+7, r24	; 0x07
    3ca6:	68 87       	std	Y+8, r22	; 0x08
	error_state_t Local_ErrorState = R_OK;
    3ca8:	81 e0       	ldi	r24, 0x01	; 1
    3caa:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Address = 0;
    3cac:	19 82       	std	Y+1, r1	; 0x01
	Local_u8SetPositionY = Copy_u8Ypos;
    3cae:	88 85       	ldd	r24, Y+8	; 0x08
    3cb0:	80 93 bd 01 	sts	0x01BD, r24
	Local_u8SetPositionX = Copy_u8Xpos;
    3cb4:	8f 81       	ldd	r24, Y+7	; 0x07
    3cb6:	80 93 bc 01 	sts	0x01BC, r24

	// Array to store row addresses
	u8 RowAddresses[] = {CLCD_ROW_ADDRESS_0, CLCD_ROW_ADDRESS_1, CLCD_ROW_ADDRESS_2, CLCD_ROW_ADDRESS_3};
    3cba:	1b 82       	std	Y+3, r1	; 0x03
    3cbc:	80 e4       	ldi	r24, 0x40	; 64
    3cbe:	8c 83       	std	Y+4, r24	; 0x04
    3cc0:	84 e1       	ldi	r24, 0x14	; 20
    3cc2:	8d 83       	std	Y+5, r24	; 0x05
    3cc4:	84 e5       	ldi	r24, 0x54	; 84
    3cc6:	8e 83       	std	Y+6, r24	; 0x06

	// Check if Copy_u8Xpos is within a valid range (0-3)
	if (Copy_u8Xpos <= CLCD_ROW_NUM)
    3cc8:	8f 81       	ldd	r24, Y+7	; 0x07
    3cca:	84 30       	cpi	r24, 0x04	; 4
    3ccc:	88 f4       	brcc	.+34     	; 0x3cf0 <HCLCD_GoToXY+0x60>
	{
		// Calculate the LCD address based on row and column
		Local_u8Address = RowAddresses[Copy_u8Xpos] + Copy_u8Ypos;
    3cce:	8f 81       	ldd	r24, Y+7	; 0x07
    3cd0:	28 2f       	mov	r18, r24
    3cd2:	30 e0       	ldi	r19, 0x00	; 0
    3cd4:	ce 01       	movw	r24, r28
    3cd6:	03 96       	adiw	r24, 0x03	; 3
    3cd8:	fc 01       	movw	r30, r24
    3cda:	e2 0f       	add	r30, r18
    3cdc:	f3 1f       	adc	r31, r19
    3cde:	90 81       	ld	r25, Z
    3ce0:	88 85       	ldd	r24, Y+8	; 0x08
    3ce2:	89 0f       	add	r24, r25
    3ce4:	89 83       	std	Y+1, r24	; 0x01

		// Set the cursor position on the LCD
		HCLCD_SendCommand(Local_u8Address | CLCD_CURSOR_POSITION_CMD); // Add 0x80 to set the cursor position command
    3ce6:	89 81       	ldd	r24, Y+1	; 0x01
    3ce8:	80 68       	ori	r24, 0x80	; 128
    3cea:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <HCLCD_SendCommand>
    3cee:	01 c0       	rjmp	.+2      	; 0x3cf2 <HCLCD_GoToXY+0x62>
	}
	else
	{
		// Invalid row value, set an error state
		Local_ErrorState = R_NOK;
    3cf0:	1a 82       	std	Y+2, r1	; 0x02
	}

	return Local_ErrorState;
    3cf2:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3cf4:	28 96       	adiw	r28, 0x08	; 8
    3cf6:	0f b6       	in	r0, 0x3f	; 63
    3cf8:	f8 94       	cli
    3cfa:	de bf       	out	0x3e, r29	; 62
    3cfc:	0f be       	out	0x3f, r0	; 63
    3cfe:	cd bf       	out	0x3d, r28	; 61
    3d00:	cf 91       	pop	r28
    3d02:	df 91       	pop	r29
    3d04:	08 95       	ret

00003d06 <CLCD_CurrentPosition>:


/********************* Static Functions *************************/

static void CLCD_CurrentPosition(void)
{
    3d06:	df 93       	push	r29
    3d08:	cf 93       	push	r28
    3d0a:	cd b7       	in	r28, 0x3d	; 61
    3d0c:	de b7       	in	r29, 0x3e	; 62
	if(Local_u8SetPositionY>CLCD_COL_NUM)
    3d0e:	80 91 bd 01 	lds	r24, 0x01BD
    3d12:	84 31       	cpi	r24, 0x14	; 20
    3d14:	a0 f0       	brcs	.+40     	; 0x3d3e <CLCD_CurrentPosition+0x38>
	{
		Local_u8SetPositionX++;
    3d16:	80 91 bc 01 	lds	r24, 0x01BC
    3d1a:	8f 5f       	subi	r24, 0xFF	; 255
    3d1c:	80 93 bc 01 	sts	0x01BC, r24
		if(Local_u8SetPositionX>CLCD_ROW_NUM)
    3d20:	80 91 bc 01 	lds	r24, 0x01BC
    3d24:	84 30       	cpi	r24, 0x04	; 4
    3d26:	10 f0       	brcs	.+4      	; 0x3d2c <CLCD_CurrentPosition+0x26>
		{
			Local_u8SetPositionX = X_INITIAL_POSITION;
    3d28:	10 92 bc 01 	sts	0x01BC, r1
		}
		Local_u8SetPositionY = Y_INITIAL_POSITION;
    3d2c:	10 92 bd 01 	sts	0x01BD, r1
		HCLCD_GoToXY(Local_u8SetPositionX,Local_u8SetPositionY);
    3d30:	80 91 bc 01 	lds	r24, 0x01BC
    3d34:	90 91 bd 01 	lds	r25, 0x01BD
    3d38:	69 2f       	mov	r22, r25
    3d3a:	0e 94 48 1e 	call	0x3c90	; 0x3c90 <HCLCD_GoToXY>
	}
	Local_u8SetPositionY++;
    3d3e:	80 91 bd 01 	lds	r24, 0x01BD
    3d42:	8f 5f       	subi	r24, 0xFF	; 255
    3d44:	80 93 bd 01 	sts	0x01BD, r24
}
    3d48:	cf 91       	pop	r28
    3d4a:	df 91       	pop	r29
    3d4c:	08 95       	ret

00003d4e <H_LCD_void_latchByte>:


static void H_LCD_void_latchByte(u8 copy_u8Byte)
{
    3d4e:	df 93       	push	r29
    3d50:	cf 93       	push	r28
    3d52:	cd b7       	in	r28, 0x3d	; 61
    3d54:	de b7       	in	r29, 0x3e	; 62
    3d56:	e9 97       	sbiw	r28, 0x39	; 57
    3d58:	0f b6       	in	r0, 0x3f	; 63
    3d5a:	f8 94       	cli
    3d5c:	de bf       	out	0x3e, r29	; 62
    3d5e:	0f be       	out	0x3f, r0	; 63
    3d60:	cd bf       	out	0x3d, r28	; 61
    3d62:	89 af       	std	Y+57, r24	; 0x39
#if CLCD_MODE == _4_BIT_MODE
	/* Send Command To Data Pin */
	MDIO_SetPinValue(CLCD_DATA_PORT, CLCD_DATA_4_PIN0, GET_BIT(copy_u8Byte,4));
    3d64:	89 ad       	ldd	r24, Y+57	; 0x39
    3d66:	82 95       	swap	r24
    3d68:	8f 70       	andi	r24, 0x0F	; 15
    3d6a:	98 2f       	mov	r25, r24
    3d6c:	91 70       	andi	r25, 0x01	; 1
    3d6e:	81 e0       	ldi	r24, 0x01	; 1
    3d70:	60 e0       	ldi	r22, 0x00	; 0
    3d72:	49 2f       	mov	r20, r25
    3d74:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <MDIO_SetPinValue>
	MDIO_SetPinValue(CLCD_DATA_PORT, CLCD_DATA_4_PIN1, GET_BIT(copy_u8Byte,5));
    3d78:	89 ad       	ldd	r24, Y+57	; 0x39
    3d7a:	82 95       	swap	r24
    3d7c:	86 95       	lsr	r24
    3d7e:	87 70       	andi	r24, 0x07	; 7
    3d80:	98 2f       	mov	r25, r24
    3d82:	91 70       	andi	r25, 0x01	; 1
    3d84:	81 e0       	ldi	r24, 0x01	; 1
    3d86:	61 e0       	ldi	r22, 0x01	; 1
    3d88:	49 2f       	mov	r20, r25
    3d8a:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <MDIO_SetPinValue>
	MDIO_SetPinValue(CLCD_DATA_PORT, CLCD_DATA_4_PIN2, GET_BIT(copy_u8Byte,6));
    3d8e:	89 ad       	ldd	r24, Y+57	; 0x39
    3d90:	82 95       	swap	r24
    3d92:	86 95       	lsr	r24
    3d94:	86 95       	lsr	r24
    3d96:	83 70       	andi	r24, 0x03	; 3
    3d98:	98 2f       	mov	r25, r24
    3d9a:	91 70       	andi	r25, 0x01	; 1
    3d9c:	81 e0       	ldi	r24, 0x01	; 1
    3d9e:	62 e0       	ldi	r22, 0x02	; 2
    3da0:	49 2f       	mov	r20, r25
    3da2:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <MDIO_SetPinValue>
	MDIO_SetPinValue(CLCD_DATA_PORT, CLCD_DATA_4_PIN3, GET_BIT(copy_u8Byte,7));
    3da6:	89 ad       	ldd	r24, Y+57	; 0x39
    3da8:	98 2f       	mov	r25, r24
    3daa:	99 1f       	adc	r25, r25
    3dac:	99 27       	eor	r25, r25
    3dae:	99 1f       	adc	r25, r25
    3db0:	81 e0       	ldi	r24, 0x01	; 1
    3db2:	64 e0       	ldi	r22, 0x04	; 4
    3db4:	49 2f       	mov	r20, r25
    3db6:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <MDIO_SetPinValue>


	/* Enable CLCD */
	MDIO_SetPinValue(CLCD_CTRL_PORT, CLCD_EN_PIN, DIO_u8PIN_HIGH);
    3dba:	80 e0       	ldi	r24, 0x00	; 0
    3dbc:	62 e0       	ldi	r22, 0x02	; 2
    3dbe:	41 e0       	ldi	r20, 0x01	; 1
    3dc0:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <MDIO_SetPinValue>
    3dc4:	80 e0       	ldi	r24, 0x00	; 0
    3dc6:	90 e0       	ldi	r25, 0x00	; 0
    3dc8:	a0 e0       	ldi	r26, 0x00	; 0
    3dca:	b0 e4       	ldi	r27, 0x40	; 64
    3dcc:	8d ab       	std	Y+53, r24	; 0x35
    3dce:	9e ab       	std	Y+54, r25	; 0x36
    3dd0:	af ab       	std	Y+55, r26	; 0x37
    3dd2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3dd4:	6d a9       	ldd	r22, Y+53	; 0x35
    3dd6:	7e a9       	ldd	r23, Y+54	; 0x36
    3dd8:	8f a9       	ldd	r24, Y+55	; 0x37
    3dda:	98 ad       	ldd	r25, Y+56	; 0x38
    3ddc:	20 e0       	ldi	r18, 0x00	; 0
    3dde:	30 e0       	ldi	r19, 0x00	; 0
    3de0:	4a e7       	ldi	r20, 0x7A	; 122
    3de2:	55 e4       	ldi	r21, 0x45	; 69
    3de4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3de8:	dc 01       	movw	r26, r24
    3dea:	cb 01       	movw	r24, r22
    3dec:	89 ab       	std	Y+49, r24	; 0x31
    3dee:	9a ab       	std	Y+50, r25	; 0x32
    3df0:	ab ab       	std	Y+51, r26	; 0x33
    3df2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3df4:	69 a9       	ldd	r22, Y+49	; 0x31
    3df6:	7a a9       	ldd	r23, Y+50	; 0x32
    3df8:	8b a9       	ldd	r24, Y+51	; 0x33
    3dfa:	9c a9       	ldd	r25, Y+52	; 0x34
    3dfc:	20 e0       	ldi	r18, 0x00	; 0
    3dfe:	30 e0       	ldi	r19, 0x00	; 0
    3e00:	40 e8       	ldi	r20, 0x80	; 128
    3e02:	5f e3       	ldi	r21, 0x3F	; 63
    3e04:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3e08:	88 23       	and	r24, r24
    3e0a:	2c f4       	brge	.+10     	; 0x3e16 <H_LCD_void_latchByte+0xc8>
		__ticks = 1;
    3e0c:	81 e0       	ldi	r24, 0x01	; 1
    3e0e:	90 e0       	ldi	r25, 0x00	; 0
    3e10:	98 ab       	std	Y+48, r25	; 0x30
    3e12:	8f a7       	std	Y+47, r24	; 0x2f
    3e14:	3f c0       	rjmp	.+126    	; 0x3e94 <H_LCD_void_latchByte+0x146>
	else if (__tmp > 65535)
    3e16:	69 a9       	ldd	r22, Y+49	; 0x31
    3e18:	7a a9       	ldd	r23, Y+50	; 0x32
    3e1a:	8b a9       	ldd	r24, Y+51	; 0x33
    3e1c:	9c a9       	ldd	r25, Y+52	; 0x34
    3e1e:	20 e0       	ldi	r18, 0x00	; 0
    3e20:	3f ef       	ldi	r19, 0xFF	; 255
    3e22:	4f e7       	ldi	r20, 0x7F	; 127
    3e24:	57 e4       	ldi	r21, 0x47	; 71
    3e26:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3e2a:	18 16       	cp	r1, r24
    3e2c:	4c f5       	brge	.+82     	; 0x3e80 <H_LCD_void_latchByte+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e2e:	6d a9       	ldd	r22, Y+53	; 0x35
    3e30:	7e a9       	ldd	r23, Y+54	; 0x36
    3e32:	8f a9       	ldd	r24, Y+55	; 0x37
    3e34:	98 ad       	ldd	r25, Y+56	; 0x38
    3e36:	20 e0       	ldi	r18, 0x00	; 0
    3e38:	30 e0       	ldi	r19, 0x00	; 0
    3e3a:	40 e2       	ldi	r20, 0x20	; 32
    3e3c:	51 e4       	ldi	r21, 0x41	; 65
    3e3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e42:	dc 01       	movw	r26, r24
    3e44:	cb 01       	movw	r24, r22
    3e46:	bc 01       	movw	r22, r24
    3e48:	cd 01       	movw	r24, r26
    3e4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e4e:	dc 01       	movw	r26, r24
    3e50:	cb 01       	movw	r24, r22
    3e52:	98 ab       	std	Y+48, r25	; 0x30
    3e54:	8f a7       	std	Y+47, r24	; 0x2f
    3e56:	0f c0       	rjmp	.+30     	; 0x3e76 <H_LCD_void_latchByte+0x128>
    3e58:	80 e9       	ldi	r24, 0x90	; 144
    3e5a:	91 e0       	ldi	r25, 0x01	; 1
    3e5c:	9e a7       	std	Y+46, r25	; 0x2e
    3e5e:	8d a7       	std	Y+45, r24	; 0x2d
    3e60:	8d a5       	ldd	r24, Y+45	; 0x2d
    3e62:	9e a5       	ldd	r25, Y+46	; 0x2e
    3e64:	01 97       	sbiw	r24, 0x01	; 1
    3e66:	f1 f7       	brne	.-4      	; 0x3e64 <H_LCD_void_latchByte+0x116>
    3e68:	9e a7       	std	Y+46, r25	; 0x2e
    3e6a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e6c:	8f a5       	ldd	r24, Y+47	; 0x2f
    3e6e:	98 a9       	ldd	r25, Y+48	; 0x30
    3e70:	01 97       	sbiw	r24, 0x01	; 1
    3e72:	98 ab       	std	Y+48, r25	; 0x30
    3e74:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e76:	8f a5       	ldd	r24, Y+47	; 0x2f
    3e78:	98 a9       	ldd	r25, Y+48	; 0x30
    3e7a:	00 97       	sbiw	r24, 0x00	; 0
    3e7c:	69 f7       	brne	.-38     	; 0x3e58 <H_LCD_void_latchByte+0x10a>
    3e7e:	14 c0       	rjmp	.+40     	; 0x3ea8 <H_LCD_void_latchByte+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e80:	69 a9       	ldd	r22, Y+49	; 0x31
    3e82:	7a a9       	ldd	r23, Y+50	; 0x32
    3e84:	8b a9       	ldd	r24, Y+51	; 0x33
    3e86:	9c a9       	ldd	r25, Y+52	; 0x34
    3e88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e8c:	dc 01       	movw	r26, r24
    3e8e:	cb 01       	movw	r24, r22
    3e90:	98 ab       	std	Y+48, r25	; 0x30
    3e92:	8f a7       	std	Y+47, r24	; 0x2f
    3e94:	8f a5       	ldd	r24, Y+47	; 0x2f
    3e96:	98 a9       	ldd	r25, Y+48	; 0x30
    3e98:	9c a7       	std	Y+44, r25	; 0x2c
    3e9a:	8b a7       	std	Y+43, r24	; 0x2b
    3e9c:	8b a5       	ldd	r24, Y+43	; 0x2b
    3e9e:	9c a5       	ldd	r25, Y+44	; 0x2c
    3ea0:	01 97       	sbiw	r24, 0x01	; 1
    3ea2:	f1 f7       	brne	.-4      	; 0x3ea0 <H_LCD_void_latchByte+0x152>
    3ea4:	9c a7       	std	Y+44, r25	; 0x2c
    3ea6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	/* Disable CLCD */
	MDIO_SetPinValue(CLCD_CTRL_PORT, CLCD_EN_PIN, DIO_u8PIN_LOW);
    3ea8:	80 e0       	ldi	r24, 0x00	; 0
    3eaa:	62 e0       	ldi	r22, 0x02	; 2
    3eac:	40 e0       	ldi	r20, 0x00	; 0
    3eae:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <MDIO_SetPinValue>
    3eb2:	80 e0       	ldi	r24, 0x00	; 0
    3eb4:	90 e0       	ldi	r25, 0x00	; 0
    3eb6:	a0 ea       	ldi	r26, 0xA0	; 160
    3eb8:	b0 e4       	ldi	r27, 0x40	; 64
    3eba:	8f a3       	std	Y+39, r24	; 0x27
    3ebc:	98 a7       	std	Y+40, r25	; 0x28
    3ebe:	a9 a7       	std	Y+41, r26	; 0x29
    3ec0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ec2:	6f a1       	ldd	r22, Y+39	; 0x27
    3ec4:	78 a5       	ldd	r23, Y+40	; 0x28
    3ec6:	89 a5       	ldd	r24, Y+41	; 0x29
    3ec8:	9a a5       	ldd	r25, Y+42	; 0x2a
    3eca:	20 e0       	ldi	r18, 0x00	; 0
    3ecc:	30 e0       	ldi	r19, 0x00	; 0
    3ece:	4a e7       	ldi	r20, 0x7A	; 122
    3ed0:	55 e4       	ldi	r21, 0x45	; 69
    3ed2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ed6:	dc 01       	movw	r26, r24
    3ed8:	cb 01       	movw	r24, r22
    3eda:	8b a3       	std	Y+35, r24	; 0x23
    3edc:	9c a3       	std	Y+36, r25	; 0x24
    3ede:	ad a3       	std	Y+37, r26	; 0x25
    3ee0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3ee2:	6b a1       	ldd	r22, Y+35	; 0x23
    3ee4:	7c a1       	ldd	r23, Y+36	; 0x24
    3ee6:	8d a1       	ldd	r24, Y+37	; 0x25
    3ee8:	9e a1       	ldd	r25, Y+38	; 0x26
    3eea:	20 e0       	ldi	r18, 0x00	; 0
    3eec:	30 e0       	ldi	r19, 0x00	; 0
    3eee:	40 e8       	ldi	r20, 0x80	; 128
    3ef0:	5f e3       	ldi	r21, 0x3F	; 63
    3ef2:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3ef6:	88 23       	and	r24, r24
    3ef8:	2c f4       	brge	.+10     	; 0x3f04 <H_LCD_void_latchByte+0x1b6>
		__ticks = 1;
    3efa:	81 e0       	ldi	r24, 0x01	; 1
    3efc:	90 e0       	ldi	r25, 0x00	; 0
    3efe:	9a a3       	std	Y+34, r25	; 0x22
    3f00:	89 a3       	std	Y+33, r24	; 0x21
    3f02:	3f c0       	rjmp	.+126    	; 0x3f82 <H_LCD_void_latchByte+0x234>
	else if (__tmp > 65535)
    3f04:	6b a1       	ldd	r22, Y+35	; 0x23
    3f06:	7c a1       	ldd	r23, Y+36	; 0x24
    3f08:	8d a1       	ldd	r24, Y+37	; 0x25
    3f0a:	9e a1       	ldd	r25, Y+38	; 0x26
    3f0c:	20 e0       	ldi	r18, 0x00	; 0
    3f0e:	3f ef       	ldi	r19, 0xFF	; 255
    3f10:	4f e7       	ldi	r20, 0x7F	; 127
    3f12:	57 e4       	ldi	r21, 0x47	; 71
    3f14:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3f18:	18 16       	cp	r1, r24
    3f1a:	4c f5       	brge	.+82     	; 0x3f6e <H_LCD_void_latchByte+0x220>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f1c:	6f a1       	ldd	r22, Y+39	; 0x27
    3f1e:	78 a5       	ldd	r23, Y+40	; 0x28
    3f20:	89 a5       	ldd	r24, Y+41	; 0x29
    3f22:	9a a5       	ldd	r25, Y+42	; 0x2a
    3f24:	20 e0       	ldi	r18, 0x00	; 0
    3f26:	30 e0       	ldi	r19, 0x00	; 0
    3f28:	40 e2       	ldi	r20, 0x20	; 32
    3f2a:	51 e4       	ldi	r21, 0x41	; 65
    3f2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f30:	dc 01       	movw	r26, r24
    3f32:	cb 01       	movw	r24, r22
    3f34:	bc 01       	movw	r22, r24
    3f36:	cd 01       	movw	r24, r26
    3f38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f3c:	dc 01       	movw	r26, r24
    3f3e:	cb 01       	movw	r24, r22
    3f40:	9a a3       	std	Y+34, r25	; 0x22
    3f42:	89 a3       	std	Y+33, r24	; 0x21
    3f44:	0f c0       	rjmp	.+30     	; 0x3f64 <H_LCD_void_latchByte+0x216>
    3f46:	80 e9       	ldi	r24, 0x90	; 144
    3f48:	91 e0       	ldi	r25, 0x01	; 1
    3f4a:	98 a3       	std	Y+32, r25	; 0x20
    3f4c:	8f 8f       	std	Y+31, r24	; 0x1f
    3f4e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3f50:	98 a1       	ldd	r25, Y+32	; 0x20
    3f52:	01 97       	sbiw	r24, 0x01	; 1
    3f54:	f1 f7       	brne	.-4      	; 0x3f52 <H_LCD_void_latchByte+0x204>
    3f56:	98 a3       	std	Y+32, r25	; 0x20
    3f58:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f5a:	89 a1       	ldd	r24, Y+33	; 0x21
    3f5c:	9a a1       	ldd	r25, Y+34	; 0x22
    3f5e:	01 97       	sbiw	r24, 0x01	; 1
    3f60:	9a a3       	std	Y+34, r25	; 0x22
    3f62:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f64:	89 a1       	ldd	r24, Y+33	; 0x21
    3f66:	9a a1       	ldd	r25, Y+34	; 0x22
    3f68:	00 97       	sbiw	r24, 0x00	; 0
    3f6a:	69 f7       	brne	.-38     	; 0x3f46 <H_LCD_void_latchByte+0x1f8>
    3f6c:	14 c0       	rjmp	.+40     	; 0x3f96 <H_LCD_void_latchByte+0x248>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f6e:	6b a1       	ldd	r22, Y+35	; 0x23
    3f70:	7c a1       	ldd	r23, Y+36	; 0x24
    3f72:	8d a1       	ldd	r24, Y+37	; 0x25
    3f74:	9e a1       	ldd	r25, Y+38	; 0x26
    3f76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f7a:	dc 01       	movw	r26, r24
    3f7c:	cb 01       	movw	r24, r22
    3f7e:	9a a3       	std	Y+34, r25	; 0x22
    3f80:	89 a3       	std	Y+33, r24	; 0x21
    3f82:	89 a1       	ldd	r24, Y+33	; 0x21
    3f84:	9a a1       	ldd	r25, Y+34	; 0x22
    3f86:	9e 8f       	std	Y+30, r25	; 0x1e
    3f88:	8d 8f       	std	Y+29, r24	; 0x1d
    3f8a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3f8c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3f8e:	01 97       	sbiw	r24, 0x01	; 1
    3f90:	f1 f7       	brne	.-4      	; 0x3f8e <H_LCD_void_latchByte+0x240>
    3f92:	9e 8f       	std	Y+30, r25	; 0x1e
    3f94:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);
	MDIO_SetPinValue(CLCD_DATA_PORT, CLCD_DATA_4_PIN0, GET_BIT(copy_u8Byte,0));
    3f96:	89 ad       	ldd	r24, Y+57	; 0x39
    3f98:	98 2f       	mov	r25, r24
    3f9a:	91 70       	andi	r25, 0x01	; 1
    3f9c:	81 e0       	ldi	r24, 0x01	; 1
    3f9e:	60 e0       	ldi	r22, 0x00	; 0
    3fa0:	49 2f       	mov	r20, r25
    3fa2:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <MDIO_SetPinValue>
	MDIO_SetPinValue(CLCD_DATA_PORT, CLCD_DATA_4_PIN1, GET_BIT(copy_u8Byte,1));
    3fa6:	89 ad       	ldd	r24, Y+57	; 0x39
    3fa8:	86 95       	lsr	r24
    3faa:	98 2f       	mov	r25, r24
    3fac:	91 70       	andi	r25, 0x01	; 1
    3fae:	81 e0       	ldi	r24, 0x01	; 1
    3fb0:	61 e0       	ldi	r22, 0x01	; 1
    3fb2:	49 2f       	mov	r20, r25
    3fb4:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <MDIO_SetPinValue>
	MDIO_SetPinValue(CLCD_DATA_PORT, CLCD_DATA_4_PIN2, GET_BIT(copy_u8Byte,2));
    3fb8:	89 ad       	ldd	r24, Y+57	; 0x39
    3fba:	86 95       	lsr	r24
    3fbc:	86 95       	lsr	r24
    3fbe:	98 2f       	mov	r25, r24
    3fc0:	91 70       	andi	r25, 0x01	; 1
    3fc2:	81 e0       	ldi	r24, 0x01	; 1
    3fc4:	62 e0       	ldi	r22, 0x02	; 2
    3fc6:	49 2f       	mov	r20, r25
    3fc8:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <MDIO_SetPinValue>
	MDIO_SetPinValue(CLCD_DATA_PORT, CLCD_DATA_4_PIN3, GET_BIT(copy_u8Byte,3));
    3fcc:	89 ad       	ldd	r24, Y+57	; 0x39
    3fce:	86 95       	lsr	r24
    3fd0:	86 95       	lsr	r24
    3fd2:	86 95       	lsr	r24
    3fd4:	98 2f       	mov	r25, r24
    3fd6:	91 70       	andi	r25, 0x01	; 1
    3fd8:	81 e0       	ldi	r24, 0x01	; 1
    3fda:	64 e0       	ldi	r22, 0x04	; 4
    3fdc:	49 2f       	mov	r20, r25
    3fde:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <MDIO_SetPinValue>
	/* Enable CLCD */
	MDIO_SetPinValue(CLCD_CTRL_PORT, CLCD_EN_PIN, DIO_u8PIN_HIGH);
    3fe2:	80 e0       	ldi	r24, 0x00	; 0
    3fe4:	62 e0       	ldi	r22, 0x02	; 2
    3fe6:	41 e0       	ldi	r20, 0x01	; 1
    3fe8:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <MDIO_SetPinValue>
    3fec:	80 e0       	ldi	r24, 0x00	; 0
    3fee:	90 e0       	ldi	r25, 0x00	; 0
    3ff0:	a0 e0       	ldi	r26, 0x00	; 0
    3ff2:	b0 e4       	ldi	r27, 0x40	; 64
    3ff4:	89 8f       	std	Y+25, r24	; 0x19
    3ff6:	9a 8f       	std	Y+26, r25	; 0x1a
    3ff8:	ab 8f       	std	Y+27, r26	; 0x1b
    3ffa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ffc:	69 8d       	ldd	r22, Y+25	; 0x19
    3ffe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4000:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4002:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4004:	20 e0       	ldi	r18, 0x00	; 0
    4006:	30 e0       	ldi	r19, 0x00	; 0
    4008:	4a e7       	ldi	r20, 0x7A	; 122
    400a:	55 e4       	ldi	r21, 0x45	; 69
    400c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4010:	dc 01       	movw	r26, r24
    4012:	cb 01       	movw	r24, r22
    4014:	8d 8b       	std	Y+21, r24	; 0x15
    4016:	9e 8b       	std	Y+22, r25	; 0x16
    4018:	af 8b       	std	Y+23, r26	; 0x17
    401a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    401c:	6d 89       	ldd	r22, Y+21	; 0x15
    401e:	7e 89       	ldd	r23, Y+22	; 0x16
    4020:	8f 89       	ldd	r24, Y+23	; 0x17
    4022:	98 8d       	ldd	r25, Y+24	; 0x18
    4024:	20 e0       	ldi	r18, 0x00	; 0
    4026:	30 e0       	ldi	r19, 0x00	; 0
    4028:	40 e8       	ldi	r20, 0x80	; 128
    402a:	5f e3       	ldi	r21, 0x3F	; 63
    402c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4030:	88 23       	and	r24, r24
    4032:	2c f4       	brge	.+10     	; 0x403e <H_LCD_void_latchByte+0x2f0>
		__ticks = 1;
    4034:	81 e0       	ldi	r24, 0x01	; 1
    4036:	90 e0       	ldi	r25, 0x00	; 0
    4038:	9c 8b       	std	Y+20, r25	; 0x14
    403a:	8b 8b       	std	Y+19, r24	; 0x13
    403c:	3f c0       	rjmp	.+126    	; 0x40bc <H_LCD_void_latchByte+0x36e>
	else if (__tmp > 65535)
    403e:	6d 89       	ldd	r22, Y+21	; 0x15
    4040:	7e 89       	ldd	r23, Y+22	; 0x16
    4042:	8f 89       	ldd	r24, Y+23	; 0x17
    4044:	98 8d       	ldd	r25, Y+24	; 0x18
    4046:	20 e0       	ldi	r18, 0x00	; 0
    4048:	3f ef       	ldi	r19, 0xFF	; 255
    404a:	4f e7       	ldi	r20, 0x7F	; 127
    404c:	57 e4       	ldi	r21, 0x47	; 71
    404e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4052:	18 16       	cp	r1, r24
    4054:	4c f5       	brge	.+82     	; 0x40a8 <H_LCD_void_latchByte+0x35a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4056:	69 8d       	ldd	r22, Y+25	; 0x19
    4058:	7a 8d       	ldd	r23, Y+26	; 0x1a
    405a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    405c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    405e:	20 e0       	ldi	r18, 0x00	; 0
    4060:	30 e0       	ldi	r19, 0x00	; 0
    4062:	40 e2       	ldi	r20, 0x20	; 32
    4064:	51 e4       	ldi	r21, 0x41	; 65
    4066:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    406a:	dc 01       	movw	r26, r24
    406c:	cb 01       	movw	r24, r22
    406e:	bc 01       	movw	r22, r24
    4070:	cd 01       	movw	r24, r26
    4072:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4076:	dc 01       	movw	r26, r24
    4078:	cb 01       	movw	r24, r22
    407a:	9c 8b       	std	Y+20, r25	; 0x14
    407c:	8b 8b       	std	Y+19, r24	; 0x13
    407e:	0f c0       	rjmp	.+30     	; 0x409e <H_LCD_void_latchByte+0x350>
    4080:	80 e9       	ldi	r24, 0x90	; 144
    4082:	91 e0       	ldi	r25, 0x01	; 1
    4084:	9a 8b       	std	Y+18, r25	; 0x12
    4086:	89 8b       	std	Y+17, r24	; 0x11
    4088:	89 89       	ldd	r24, Y+17	; 0x11
    408a:	9a 89       	ldd	r25, Y+18	; 0x12
    408c:	01 97       	sbiw	r24, 0x01	; 1
    408e:	f1 f7       	brne	.-4      	; 0x408c <H_LCD_void_latchByte+0x33e>
    4090:	9a 8b       	std	Y+18, r25	; 0x12
    4092:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4094:	8b 89       	ldd	r24, Y+19	; 0x13
    4096:	9c 89       	ldd	r25, Y+20	; 0x14
    4098:	01 97       	sbiw	r24, 0x01	; 1
    409a:	9c 8b       	std	Y+20, r25	; 0x14
    409c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    409e:	8b 89       	ldd	r24, Y+19	; 0x13
    40a0:	9c 89       	ldd	r25, Y+20	; 0x14
    40a2:	00 97       	sbiw	r24, 0x00	; 0
    40a4:	69 f7       	brne	.-38     	; 0x4080 <H_LCD_void_latchByte+0x332>
    40a6:	14 c0       	rjmp	.+40     	; 0x40d0 <H_LCD_void_latchByte+0x382>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40a8:	6d 89       	ldd	r22, Y+21	; 0x15
    40aa:	7e 89       	ldd	r23, Y+22	; 0x16
    40ac:	8f 89       	ldd	r24, Y+23	; 0x17
    40ae:	98 8d       	ldd	r25, Y+24	; 0x18
    40b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40b4:	dc 01       	movw	r26, r24
    40b6:	cb 01       	movw	r24, r22
    40b8:	9c 8b       	std	Y+20, r25	; 0x14
    40ba:	8b 8b       	std	Y+19, r24	; 0x13
    40bc:	8b 89       	ldd	r24, Y+19	; 0x13
    40be:	9c 89       	ldd	r25, Y+20	; 0x14
    40c0:	98 8b       	std	Y+16, r25	; 0x10
    40c2:	8f 87       	std	Y+15, r24	; 0x0f
    40c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    40c6:	98 89       	ldd	r25, Y+16	; 0x10
    40c8:	01 97       	sbiw	r24, 0x01	; 1
    40ca:	f1 f7       	brne	.-4      	; 0x40c8 <H_LCD_void_latchByte+0x37a>
    40cc:	98 8b       	std	Y+16, r25	; 0x10
    40ce:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	/* Disable CLCD */
	MDIO_SetPinValue(CLCD_CTRL_PORT, CLCD_EN_PIN, DIO_u8PIN_LOW);
    40d0:	80 e0       	ldi	r24, 0x00	; 0
    40d2:	62 e0       	ldi	r22, 0x02	; 2
    40d4:	40 e0       	ldi	r20, 0x00	; 0
    40d6:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <MDIO_SetPinValue>
    40da:	80 e0       	ldi	r24, 0x00	; 0
    40dc:	90 e0       	ldi	r25, 0x00	; 0
    40de:	a0 ea       	ldi	r26, 0xA0	; 160
    40e0:	b0 e4       	ldi	r27, 0x40	; 64
    40e2:	8b 87       	std	Y+11, r24	; 0x0b
    40e4:	9c 87       	std	Y+12, r25	; 0x0c
    40e6:	ad 87       	std	Y+13, r26	; 0x0d
    40e8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    40ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    40ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    40f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    40f2:	20 e0       	ldi	r18, 0x00	; 0
    40f4:	30 e0       	ldi	r19, 0x00	; 0
    40f6:	4a e7       	ldi	r20, 0x7A	; 122
    40f8:	55 e4       	ldi	r21, 0x45	; 69
    40fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40fe:	dc 01       	movw	r26, r24
    4100:	cb 01       	movw	r24, r22
    4102:	8f 83       	std	Y+7, r24	; 0x07
    4104:	98 87       	std	Y+8, r25	; 0x08
    4106:	a9 87       	std	Y+9, r26	; 0x09
    4108:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    410a:	6f 81       	ldd	r22, Y+7	; 0x07
    410c:	78 85       	ldd	r23, Y+8	; 0x08
    410e:	89 85       	ldd	r24, Y+9	; 0x09
    4110:	9a 85       	ldd	r25, Y+10	; 0x0a
    4112:	20 e0       	ldi	r18, 0x00	; 0
    4114:	30 e0       	ldi	r19, 0x00	; 0
    4116:	40 e8       	ldi	r20, 0x80	; 128
    4118:	5f e3       	ldi	r21, 0x3F	; 63
    411a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    411e:	88 23       	and	r24, r24
    4120:	2c f4       	brge	.+10     	; 0x412c <H_LCD_void_latchByte+0x3de>
		__ticks = 1;
    4122:	81 e0       	ldi	r24, 0x01	; 1
    4124:	90 e0       	ldi	r25, 0x00	; 0
    4126:	9e 83       	std	Y+6, r25	; 0x06
    4128:	8d 83       	std	Y+5, r24	; 0x05
    412a:	3f c0       	rjmp	.+126    	; 0x41aa <H_LCD_void_latchByte+0x45c>
	else if (__tmp > 65535)
    412c:	6f 81       	ldd	r22, Y+7	; 0x07
    412e:	78 85       	ldd	r23, Y+8	; 0x08
    4130:	89 85       	ldd	r24, Y+9	; 0x09
    4132:	9a 85       	ldd	r25, Y+10	; 0x0a
    4134:	20 e0       	ldi	r18, 0x00	; 0
    4136:	3f ef       	ldi	r19, 0xFF	; 255
    4138:	4f e7       	ldi	r20, 0x7F	; 127
    413a:	57 e4       	ldi	r21, 0x47	; 71
    413c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4140:	18 16       	cp	r1, r24
    4142:	4c f5       	brge	.+82     	; 0x4196 <H_LCD_void_latchByte+0x448>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4144:	6b 85       	ldd	r22, Y+11	; 0x0b
    4146:	7c 85       	ldd	r23, Y+12	; 0x0c
    4148:	8d 85       	ldd	r24, Y+13	; 0x0d
    414a:	9e 85       	ldd	r25, Y+14	; 0x0e
    414c:	20 e0       	ldi	r18, 0x00	; 0
    414e:	30 e0       	ldi	r19, 0x00	; 0
    4150:	40 e2       	ldi	r20, 0x20	; 32
    4152:	51 e4       	ldi	r21, 0x41	; 65
    4154:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4158:	dc 01       	movw	r26, r24
    415a:	cb 01       	movw	r24, r22
    415c:	bc 01       	movw	r22, r24
    415e:	cd 01       	movw	r24, r26
    4160:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4164:	dc 01       	movw	r26, r24
    4166:	cb 01       	movw	r24, r22
    4168:	9e 83       	std	Y+6, r25	; 0x06
    416a:	8d 83       	std	Y+5, r24	; 0x05
    416c:	0f c0       	rjmp	.+30     	; 0x418c <H_LCD_void_latchByte+0x43e>
    416e:	80 e9       	ldi	r24, 0x90	; 144
    4170:	91 e0       	ldi	r25, 0x01	; 1
    4172:	9c 83       	std	Y+4, r25	; 0x04
    4174:	8b 83       	std	Y+3, r24	; 0x03
    4176:	8b 81       	ldd	r24, Y+3	; 0x03
    4178:	9c 81       	ldd	r25, Y+4	; 0x04
    417a:	01 97       	sbiw	r24, 0x01	; 1
    417c:	f1 f7       	brne	.-4      	; 0x417a <H_LCD_void_latchByte+0x42c>
    417e:	9c 83       	std	Y+4, r25	; 0x04
    4180:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4182:	8d 81       	ldd	r24, Y+5	; 0x05
    4184:	9e 81       	ldd	r25, Y+6	; 0x06
    4186:	01 97       	sbiw	r24, 0x01	; 1
    4188:	9e 83       	std	Y+6, r25	; 0x06
    418a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    418c:	8d 81       	ldd	r24, Y+5	; 0x05
    418e:	9e 81       	ldd	r25, Y+6	; 0x06
    4190:	00 97       	sbiw	r24, 0x00	; 0
    4192:	69 f7       	brne	.-38     	; 0x416e <H_LCD_void_latchByte+0x420>
    4194:	14 c0       	rjmp	.+40     	; 0x41be <H_LCD_void_latchByte+0x470>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4196:	6f 81       	ldd	r22, Y+7	; 0x07
    4198:	78 85       	ldd	r23, Y+8	; 0x08
    419a:	89 85       	ldd	r24, Y+9	; 0x09
    419c:	9a 85       	ldd	r25, Y+10	; 0x0a
    419e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41a2:	dc 01       	movw	r26, r24
    41a4:	cb 01       	movw	r24, r22
    41a6:	9e 83       	std	Y+6, r25	; 0x06
    41a8:	8d 83       	std	Y+5, r24	; 0x05
    41aa:	8d 81       	ldd	r24, Y+5	; 0x05
    41ac:	9e 81       	ldd	r25, Y+6	; 0x06
    41ae:	9a 83       	std	Y+2, r25	; 0x02
    41b0:	89 83       	std	Y+1, r24	; 0x01
    41b2:	89 81       	ldd	r24, Y+1	; 0x01
    41b4:	9a 81       	ldd	r25, Y+2	; 0x02
    41b6:	01 97       	sbiw	r24, 0x01	; 1
    41b8:	f1 f7       	brne	.-4      	; 0x41b6 <H_LCD_void_latchByte+0x468>
    41ba:	9a 83       	std	Y+2, r25	; 0x02
    41bc:	89 83       	std	Y+1, r24	; 0x01
	MDIO_SetPinValue(CLCD_CTRL_PORT, CLCD_EN_PIN, DIO_u8PIN_LOW);

#else
#warning  Select Correct Mode !!!
#endif
}
    41be:	e9 96       	adiw	r28, 0x39	; 57
    41c0:	0f b6       	in	r0, 0x3f	; 63
    41c2:	f8 94       	cli
    41c4:	de bf       	out	0x3e, r29	; 62
    41c6:	0f be       	out	0x3f, r0	; 63
    41c8:	cd bf       	out	0x3d, r28	; 61
    41ca:	cf 91       	pop	r28
    41cc:	df 91       	pop	r29
    41ce:	08 95       	ret

000041d0 <main>:
u16 Periodtime = 0;
u16 Ontime = 0;
u16 Duty = 0;*/

void main(void)
{
    41d0:	df 93       	push	r29
    41d2:	cf 93       	push	r28
    41d4:	cd b7       	in	r28, 0x3d	; 61
    41d6:	de b7       	in	r29, 0x3e	; 62
	/*** Initialization Section ***/
	MGIE_VoidEnable();
    41d8:	0e 94 25 0b 	call	0x164a	; 0x164a <MGIE_VoidEnable>

	TIMER1_voidInit();
    41dc:	0e 94 0d 08 	call	0x101a	; 0x101a <TIMER1_voidInit>



	MPWM0_enumInit();
    41e0:	0e 94 a5 0a 	call	0x154a	; 0x154a <MPWM0_enumInit>

	MPWM0_enumSetDutyCycle(50);
    41e4:	82 e3       	ldi	r24, 0x32	; 50
    41e6:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <MPWM0_enumSetDutyCycle>
	MPWM0_enumStart();
    41ea:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <MPWM0_enumStart>



	ICU_voidInit();
    41ee:	0e 94 63 08 	call	0x10c6	; 0x10c6 <ICU_voidInit>
	ICU_voidEnableInterrupt();
    41f2:	0e 94 9d 08 	call	0x113a	; 0x113a <ICU_voidEnableInterrupt>
	ICU_u8SetCallBack(ICU_HW1);
    41f6:	85 e2       	ldi	r24, 0x25	; 37
    41f8:	91 e2       	ldi	r25, 0x21	; 33
    41fa:	0e 94 c4 08 	call	0x1188	; 0x1188 <ICU_u8SetCallBack>
	//ICU_u8SetTriggerEdge(ICU_RISING_EDGE);
	MDIO_SetPinDirection(1, 3, DIO_u8PIN_OUTPUT);
    41fe:	81 e0       	ldi	r24, 0x01	; 1
    4200:	63 e0       	ldi	r22, 0x03	; 3
    4202:	41 e0       	ldi	r20, 0x01	; 1
    4204:	0e 94 76 0d 	call	0x1aec	; 0x1aec <MDIO_SetPinDirection>


	HCLCD_Init();
    4208:	0e 94 ad 1b 	call	0x375a	; 0x375a <HCLCD_Init>
	HLED_voidInit(LED_BLUE);
    420c:	83 e0       	ldi	r24, 0x03	; 3
    420e:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <HLED_voidInit>
	HLED_voidInit(LED_RED);
    4212:	82 e0       	ldi	r24, 0x02	; 2
    4214:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <HLED_voidInit>
	HLED_voidInit(LED_YELLOW);
    4218:	80 e0       	ldi	r24, 0x00	; 0
    421a:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <HLED_voidInit>
			Duty = Ontime / Periodtime;
			flag =0;

		}

*/HCLCD_GoToXY(1,0);
    421e:	81 e0       	ldi	r24, 0x01	; 1
    4220:	60 e0       	ldi	r22, 0x00	; 0
    4222:	0e 94 48 1e 	call	0x3c90	; 0x3c90 <HCLCD_GoToXY>
		HCLCD_SendNumber(OnTicks);
    4226:	80 91 c0 01 	lds	r24, 0x01C0
    422a:	90 91 c1 01 	lds	r25, 0x01C1
    422e:	cc 01       	movw	r24, r24
    4230:	a0 e0       	ldi	r26, 0x00	; 0
    4232:	b0 e0       	ldi	r27, 0x00	; 0
    4234:	bc 01       	movw	r22, r24
    4236:	cd 01       	movw	r24, r26
    4238:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    423c:	dc 01       	movw	r26, r24
    423e:	cb 01       	movw	r24, r22
    4240:	bc 01       	movw	r22, r24
    4242:	cd 01       	movw	r24, r26
    4244:	0e 94 a4 1c 	call	0x3948	; 0x3948 <HCLCD_SendNumber>
    4248:	ea cf       	rjmp	.-44     	; 0x421e <main+0x4e>

0000424a <ICU_HW1>:


}*/

void ICU_HW1 (void)
{
    424a:	df 93       	push	r29
    424c:	cf 93       	push	r28
    424e:	cd b7       	in	r28, 0x3d	; 61
    4250:	de b7       	in	r29, 0x3e	; 62
	static u16 Reading1, Reading2, Reading3;
	static u8 Local_u8Counter = 0;
	Local_u8Counter ++;
    4252:	80 91 c2 01 	lds	r24, 0x01C2
    4256:	8f 5f       	subi	r24, 0xFF	; 255
    4258:	80 93 c2 01 	sts	0x01C2, r24

	if(Local_u8Counter == 1 )
    425c:	80 91 c2 01 	lds	r24, 0x01C2
    4260:	81 30       	cpi	r24, 0x01	; 1
    4262:	39 f4       	brne	.+14     	; 0x4272 <ICU_HW1+0x28>
	{
		Reading1 = ICU_u16ReadInputCapture();
    4264:	0e 94 b9 08 	call	0x1172	; 0x1172 <ICU_u16ReadInputCapture>
    4268:	90 93 c8 01 	sts	0x01C8, r25
    426c:	80 93 c7 01 	sts	0x01C7, r24
    4270:	1d c0       	rjmp	.+58     	; 0x42ac <ICU_HW1+0x62>

	}
	else if(Local_u8Counter == 2 )
    4272:	80 91 c2 01 	lds	r24, 0x01C2
    4276:	82 30       	cpi	r24, 0x02	; 2
    4278:	c9 f4       	brne	.+50     	; 0x42ac <ICU_HW1+0x62>
	{
		Reading2 = ICU_u16ReadInputCapture();
    427a:	0e 94 b9 08 	call	0x1172	; 0x1172 <ICU_u16ReadInputCapture>
    427e:	90 93 c6 01 	sts	0x01C6, r25
    4282:	80 93 c5 01 	sts	0x01C5, r24
		PeriodTicks = Reading2 - Reading1;
    4286:	20 91 c5 01 	lds	r18, 0x01C5
    428a:	30 91 c6 01 	lds	r19, 0x01C6
    428e:	80 91 c7 01 	lds	r24, 0x01C7
    4292:	90 91 c8 01 	lds	r25, 0x01C8
    4296:	a9 01       	movw	r20, r18
    4298:	48 1b       	sub	r20, r24
    429a:	59 0b       	sbc	r21, r25
    429c:	ca 01       	movw	r24, r20
    429e:	90 93 bf 01 	sts	0x01BF, r25
    42a2:	80 93 be 01 	sts	0x01BE, r24
		ICU_u8SetTriggerEdge(ICU_FALLING_EDGE);
    42a6:	80 e0       	ldi	r24, 0x00	; 0
    42a8:	0e 94 78 08 	call	0x10f0	; 0x10f0 <ICU_u8SetTriggerEdge>

	}
	if(Local_u8Counter == 3 )
    42ac:	80 91 c2 01 	lds	r24, 0x01C2
    42b0:	83 30       	cpi	r24, 0x03	; 3
    42b2:	c1 f4       	brne	.+48     	; 0x42e4 <ICU_HW1+0x9a>
	{
		Reading3 = ICU_u16ReadInputCapture();
    42b4:	0e 94 b9 08 	call	0x1172	; 0x1172 <ICU_u16ReadInputCapture>
    42b8:	90 93 c4 01 	sts	0x01C4, r25
    42bc:	80 93 c3 01 	sts	0x01C3, r24
		OnTicks = Reading3 -Reading2;
    42c0:	20 91 c3 01 	lds	r18, 0x01C3
    42c4:	30 91 c4 01 	lds	r19, 0x01C4
    42c8:	80 91 c5 01 	lds	r24, 0x01C5
    42cc:	90 91 c6 01 	lds	r25, 0x01C6
    42d0:	a9 01       	movw	r20, r18
    42d2:	48 1b       	sub	r20, r24
    42d4:	59 0b       	sbc	r21, r25
    42d6:	ca 01       	movw	r24, r20
    42d8:	90 93 c1 01 	sts	0x01C1, r25
    42dc:	80 93 c0 01 	sts	0x01C0, r24
		ICU_voidDisableInterrupt();
    42e0:	0e 94 ab 08 	call	0x1156	; 0x1156 <ICU_voidDisableInterrupt>

	}
}
    42e4:	cf 91       	pop	r28
    42e6:	df 91       	pop	r29
    42e8:	08 95       	ret

000042ea <__mulsi3>:
    42ea:	62 9f       	mul	r22, r18
    42ec:	d0 01       	movw	r26, r0
    42ee:	73 9f       	mul	r23, r19
    42f0:	f0 01       	movw	r30, r0
    42f2:	82 9f       	mul	r24, r18
    42f4:	e0 0d       	add	r30, r0
    42f6:	f1 1d       	adc	r31, r1
    42f8:	64 9f       	mul	r22, r20
    42fa:	e0 0d       	add	r30, r0
    42fc:	f1 1d       	adc	r31, r1
    42fe:	92 9f       	mul	r25, r18
    4300:	f0 0d       	add	r31, r0
    4302:	83 9f       	mul	r24, r19
    4304:	f0 0d       	add	r31, r0
    4306:	74 9f       	mul	r23, r20
    4308:	f0 0d       	add	r31, r0
    430a:	65 9f       	mul	r22, r21
    430c:	f0 0d       	add	r31, r0
    430e:	99 27       	eor	r25, r25
    4310:	72 9f       	mul	r23, r18
    4312:	b0 0d       	add	r27, r0
    4314:	e1 1d       	adc	r30, r1
    4316:	f9 1f       	adc	r31, r25
    4318:	63 9f       	mul	r22, r19
    431a:	b0 0d       	add	r27, r0
    431c:	e1 1d       	adc	r30, r1
    431e:	f9 1f       	adc	r31, r25
    4320:	bd 01       	movw	r22, r26
    4322:	cf 01       	movw	r24, r30
    4324:	11 24       	eor	r1, r1
    4326:	08 95       	ret

00004328 <__divmodhi4>:
    4328:	97 fb       	bst	r25, 7
    432a:	09 2e       	mov	r0, r25
    432c:	07 26       	eor	r0, r23
    432e:	0a d0       	rcall	.+20     	; 0x4344 <__divmodhi4_neg1>
    4330:	77 fd       	sbrc	r23, 7
    4332:	04 d0       	rcall	.+8      	; 0x433c <__divmodhi4_neg2>
    4334:	49 d0       	rcall	.+146    	; 0x43c8 <__udivmodhi4>
    4336:	06 d0       	rcall	.+12     	; 0x4344 <__divmodhi4_neg1>
    4338:	00 20       	and	r0, r0
    433a:	1a f4       	brpl	.+6      	; 0x4342 <__divmodhi4_exit>

0000433c <__divmodhi4_neg2>:
    433c:	70 95       	com	r23
    433e:	61 95       	neg	r22
    4340:	7f 4f       	sbci	r23, 0xFF	; 255

00004342 <__divmodhi4_exit>:
    4342:	08 95       	ret

00004344 <__divmodhi4_neg1>:
    4344:	f6 f7       	brtc	.-4      	; 0x4342 <__divmodhi4_exit>
    4346:	90 95       	com	r25
    4348:	81 95       	neg	r24
    434a:	9f 4f       	sbci	r25, 0xFF	; 255
    434c:	08 95       	ret

0000434e <__udivmodsi4>:
    434e:	a1 e2       	ldi	r26, 0x21	; 33
    4350:	1a 2e       	mov	r1, r26
    4352:	aa 1b       	sub	r26, r26
    4354:	bb 1b       	sub	r27, r27
    4356:	fd 01       	movw	r30, r26
    4358:	0d c0       	rjmp	.+26     	; 0x4374 <__udivmodsi4_ep>

0000435a <__udivmodsi4_loop>:
    435a:	aa 1f       	adc	r26, r26
    435c:	bb 1f       	adc	r27, r27
    435e:	ee 1f       	adc	r30, r30
    4360:	ff 1f       	adc	r31, r31
    4362:	a2 17       	cp	r26, r18
    4364:	b3 07       	cpc	r27, r19
    4366:	e4 07       	cpc	r30, r20
    4368:	f5 07       	cpc	r31, r21
    436a:	20 f0       	brcs	.+8      	; 0x4374 <__udivmodsi4_ep>
    436c:	a2 1b       	sub	r26, r18
    436e:	b3 0b       	sbc	r27, r19
    4370:	e4 0b       	sbc	r30, r20
    4372:	f5 0b       	sbc	r31, r21

00004374 <__udivmodsi4_ep>:
    4374:	66 1f       	adc	r22, r22
    4376:	77 1f       	adc	r23, r23
    4378:	88 1f       	adc	r24, r24
    437a:	99 1f       	adc	r25, r25
    437c:	1a 94       	dec	r1
    437e:	69 f7       	brne	.-38     	; 0x435a <__udivmodsi4_loop>
    4380:	60 95       	com	r22
    4382:	70 95       	com	r23
    4384:	80 95       	com	r24
    4386:	90 95       	com	r25
    4388:	9b 01       	movw	r18, r22
    438a:	ac 01       	movw	r20, r24
    438c:	bd 01       	movw	r22, r26
    438e:	cf 01       	movw	r24, r30
    4390:	08 95       	ret

00004392 <__divmodsi4>:
    4392:	97 fb       	bst	r25, 7
    4394:	09 2e       	mov	r0, r25
    4396:	05 26       	eor	r0, r21
    4398:	0e d0       	rcall	.+28     	; 0x43b6 <__divmodsi4_neg1>
    439a:	57 fd       	sbrc	r21, 7
    439c:	04 d0       	rcall	.+8      	; 0x43a6 <__divmodsi4_neg2>
    439e:	d7 df       	rcall	.-82     	; 0x434e <__udivmodsi4>
    43a0:	0a d0       	rcall	.+20     	; 0x43b6 <__divmodsi4_neg1>
    43a2:	00 1c       	adc	r0, r0
    43a4:	38 f4       	brcc	.+14     	; 0x43b4 <__divmodsi4_exit>

000043a6 <__divmodsi4_neg2>:
    43a6:	50 95       	com	r21
    43a8:	40 95       	com	r20
    43aa:	30 95       	com	r19
    43ac:	21 95       	neg	r18
    43ae:	3f 4f       	sbci	r19, 0xFF	; 255
    43b0:	4f 4f       	sbci	r20, 0xFF	; 255
    43b2:	5f 4f       	sbci	r21, 0xFF	; 255

000043b4 <__divmodsi4_exit>:
    43b4:	08 95       	ret

000043b6 <__divmodsi4_neg1>:
    43b6:	f6 f7       	brtc	.-4      	; 0x43b4 <__divmodsi4_exit>
    43b8:	90 95       	com	r25
    43ba:	80 95       	com	r24
    43bc:	70 95       	com	r23
    43be:	61 95       	neg	r22
    43c0:	7f 4f       	sbci	r23, 0xFF	; 255
    43c2:	8f 4f       	sbci	r24, 0xFF	; 255
    43c4:	9f 4f       	sbci	r25, 0xFF	; 255
    43c6:	08 95       	ret

000043c8 <__udivmodhi4>:
    43c8:	aa 1b       	sub	r26, r26
    43ca:	bb 1b       	sub	r27, r27
    43cc:	51 e1       	ldi	r21, 0x11	; 17
    43ce:	07 c0       	rjmp	.+14     	; 0x43de <__udivmodhi4_ep>

000043d0 <__udivmodhi4_loop>:
    43d0:	aa 1f       	adc	r26, r26
    43d2:	bb 1f       	adc	r27, r27
    43d4:	a6 17       	cp	r26, r22
    43d6:	b7 07       	cpc	r27, r23
    43d8:	10 f0       	brcs	.+4      	; 0x43de <__udivmodhi4_ep>
    43da:	a6 1b       	sub	r26, r22
    43dc:	b7 0b       	sbc	r27, r23

000043de <__udivmodhi4_ep>:
    43de:	88 1f       	adc	r24, r24
    43e0:	99 1f       	adc	r25, r25
    43e2:	5a 95       	dec	r21
    43e4:	a9 f7       	brne	.-22     	; 0x43d0 <__udivmodhi4_loop>
    43e6:	80 95       	com	r24
    43e8:	90 95       	com	r25
    43ea:	bc 01       	movw	r22, r24
    43ec:	cd 01       	movw	r24, r26
    43ee:	08 95       	ret

000043f0 <__prologue_saves__>:
    43f0:	2f 92       	push	r2
    43f2:	3f 92       	push	r3
    43f4:	4f 92       	push	r4
    43f6:	5f 92       	push	r5
    43f8:	6f 92       	push	r6
    43fa:	7f 92       	push	r7
    43fc:	8f 92       	push	r8
    43fe:	9f 92       	push	r9
    4400:	af 92       	push	r10
    4402:	bf 92       	push	r11
    4404:	cf 92       	push	r12
    4406:	df 92       	push	r13
    4408:	ef 92       	push	r14
    440a:	ff 92       	push	r15
    440c:	0f 93       	push	r16
    440e:	1f 93       	push	r17
    4410:	cf 93       	push	r28
    4412:	df 93       	push	r29
    4414:	cd b7       	in	r28, 0x3d	; 61
    4416:	de b7       	in	r29, 0x3e	; 62
    4418:	ca 1b       	sub	r28, r26
    441a:	db 0b       	sbc	r29, r27
    441c:	0f b6       	in	r0, 0x3f	; 63
    441e:	f8 94       	cli
    4420:	de bf       	out	0x3e, r29	; 62
    4422:	0f be       	out	0x3f, r0	; 63
    4424:	cd bf       	out	0x3d, r28	; 61
    4426:	09 94       	ijmp

00004428 <__epilogue_restores__>:
    4428:	2a 88       	ldd	r2, Y+18	; 0x12
    442a:	39 88       	ldd	r3, Y+17	; 0x11
    442c:	48 88       	ldd	r4, Y+16	; 0x10
    442e:	5f 84       	ldd	r5, Y+15	; 0x0f
    4430:	6e 84       	ldd	r6, Y+14	; 0x0e
    4432:	7d 84       	ldd	r7, Y+13	; 0x0d
    4434:	8c 84       	ldd	r8, Y+12	; 0x0c
    4436:	9b 84       	ldd	r9, Y+11	; 0x0b
    4438:	aa 84       	ldd	r10, Y+10	; 0x0a
    443a:	b9 84       	ldd	r11, Y+9	; 0x09
    443c:	c8 84       	ldd	r12, Y+8	; 0x08
    443e:	df 80       	ldd	r13, Y+7	; 0x07
    4440:	ee 80       	ldd	r14, Y+6	; 0x06
    4442:	fd 80       	ldd	r15, Y+5	; 0x05
    4444:	0c 81       	ldd	r16, Y+4	; 0x04
    4446:	1b 81       	ldd	r17, Y+3	; 0x03
    4448:	aa 81       	ldd	r26, Y+2	; 0x02
    444a:	b9 81       	ldd	r27, Y+1	; 0x01
    444c:	ce 0f       	add	r28, r30
    444e:	d1 1d       	adc	r29, r1
    4450:	0f b6       	in	r0, 0x3f	; 63
    4452:	f8 94       	cli
    4454:	de bf       	out	0x3e, r29	; 62
    4456:	0f be       	out	0x3f, r0	; 63
    4458:	cd bf       	out	0x3d, r28	; 61
    445a:	ed 01       	movw	r28, r26
    445c:	08 95       	ret

0000445e <_exit>:
    445e:	f8 94       	cli

00004460 <__stop_program>:
    4460:	ff cf       	rjmp	.-2      	; 0x4460 <__stop_program>
