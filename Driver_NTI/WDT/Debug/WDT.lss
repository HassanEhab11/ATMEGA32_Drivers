
WDT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000048ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000142  00800060  000048ae  00004942  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000026  008001a2  008001a2  00004a84  2**0
                  ALLOC
  3 .stab         00006018  00000000  00000000  00004a84  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002cf7  00000000  00000000  0000aa9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001e0  00000000  00000000  0000d793  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000232  00000000  00000000  0000d973  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002891  00000000  00000000  0000dba5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001628  00000000  00000000  00010436  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000013de  00000000  00000000  00011a5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000200  00000000  00000000  00012e3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000030f  00000000  00000000  0001303c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a56  00000000  00000000  0001334b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00013da1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 55 0d 	jmp	0x1aaa	; 0x1aaa <__vector_1>
       8:	0c 94 88 0d 	jmp	0x1b10	; 0x1b10 <__vector_2>
       c:	0c 94 bb 0d 	jmp	0x1b76	; 0x1b76 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 8d 09 	jmp	0x131a	; 0x131a <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 5a 09 	jmp	0x12b4	; 0x12b4 <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 16 14 	jmp	0x282c	; 0x282c <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ea       	ldi	r30, 0xAE	; 174
      68:	f8 e4       	ldi	r31, 0x48	; 72
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 3a       	cpi	r26, 0xA2	; 162
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 ea       	ldi	r26, 0xA2	; 162
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 3c       	cpi	r26, 0xC8	; 200
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 88 22 	call	0x4510	; 0x4510 <main>
      8a:	0c 94 55 24 	jmp	0x48aa	; 0x48aa <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 25 04 	call	0x84a	; 0x84a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 1e 24 	jmp	0x483c	; 0x483c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 e6       	ldi	r26, 0x66	; 102
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 3a 24 	jmp	0x4874	; 0x4874 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 2a 24 	jmp	0x4854	; 0x4854 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 46 24 	jmp	0x488c	; 0x488c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 2a 24 	jmp	0x4854	; 0x4854 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 46 24 	jmp	0x488c	; 0x488c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 1e 24 	jmp	0x483c	; 0x483c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	86 e6       	ldi	r24, 0x66	; 102
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 3a 24 	jmp	0x4874	; 0x4874 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 26 24 	jmp	0x484c	; 0x484c <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	66 e6       	ldi	r22, 0x66	; 102
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 42 24 	jmp	0x4884	; 0x4884 <__epilogue_restores__+0x10>

0000078a <__eqsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 2a 24 	jmp	0x4854	; 0x4854 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__eqsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__eqsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__eqsf2+0x58>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 46 24 	jmp	0x488c	; 0x488c <__epilogue_restores__+0x18>

000007ea <__gtsf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 2a 24 	jmp	0x4854	; 0x4854 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gtsf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gtsf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gtsf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 46 24 	jmp	0x488c	; 0x488c <__epilogue_restores__+0x18>

0000084a <__gesf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 2a 24 	jmp	0x4854	; 0x4854 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	8f ef       	ldi	r24, 0xFF	; 255
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 46 24 	jmp	0x488c	; 0x488c <__epilogue_restores__+0x18>

000008aa <__ltsf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 2a 24 	jmp	0x4854	; 0x4854 <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__ltsf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__ltsf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__ltsf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 46 24 	jmp	0x488c	; 0x488c <__epilogue_restores__+0x18>

0000090a <__floatsisf>:
     90a:	a8 e0       	ldi	r26, 0x08	; 8
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 27 24 	jmp	0x484e	; 0x484e <__prologue_saves__+0x12>
     916:	9b 01       	movw	r18, r22
     918:	ac 01       	movw	r20, r24
     91a:	83 e0       	ldi	r24, 0x03	; 3
     91c:	89 83       	std	Y+1, r24	; 0x01
     91e:	da 01       	movw	r26, r20
     920:	c9 01       	movw	r24, r18
     922:	88 27       	eor	r24, r24
     924:	b7 fd       	sbrc	r27, 7
     926:	83 95       	inc	r24
     928:	99 27       	eor	r25, r25
     92a:	aa 27       	eor	r26, r26
     92c:	bb 27       	eor	r27, r27
     92e:	b8 2e       	mov	r11, r24
     930:	21 15       	cp	r18, r1
     932:	31 05       	cpc	r19, r1
     934:	41 05       	cpc	r20, r1
     936:	51 05       	cpc	r21, r1
     938:	19 f4       	brne	.+6      	; 0x940 <__floatsisf+0x36>
     93a:	82 e0       	ldi	r24, 0x02	; 2
     93c:	89 83       	std	Y+1, r24	; 0x01
     93e:	3a c0       	rjmp	.+116    	; 0x9b4 <__floatsisf+0xaa>
     940:	88 23       	and	r24, r24
     942:	a9 f0       	breq	.+42     	; 0x96e <__floatsisf+0x64>
     944:	20 30       	cpi	r18, 0x00	; 0
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	38 07       	cpc	r19, r24
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	48 07       	cpc	r20, r24
     94e:	80 e8       	ldi	r24, 0x80	; 128
     950:	58 07       	cpc	r21, r24
     952:	29 f4       	brne	.+10     	; 0x95e <__floatsisf+0x54>
     954:	60 e0       	ldi	r22, 0x00	; 0
     956:	70 e0       	ldi	r23, 0x00	; 0
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	9f ec       	ldi	r25, 0xCF	; 207
     95c:	30 c0       	rjmp	.+96     	; 0x9be <__floatsisf+0xb4>
     95e:	ee 24       	eor	r14, r14
     960:	ff 24       	eor	r15, r15
     962:	87 01       	movw	r16, r14
     964:	e2 1a       	sub	r14, r18
     966:	f3 0a       	sbc	r15, r19
     968:	04 0b       	sbc	r16, r20
     96a:	15 0b       	sbc	r17, r21
     96c:	02 c0       	rjmp	.+4      	; 0x972 <__floatsisf+0x68>
     96e:	79 01       	movw	r14, r18
     970:	8a 01       	movw	r16, r20
     972:	8e e1       	ldi	r24, 0x1E	; 30
     974:	c8 2e       	mov	r12, r24
     976:	d1 2c       	mov	r13, r1
     978:	dc 82       	std	Y+4, r13	; 0x04
     97a:	cb 82       	std	Y+3, r12	; 0x03
     97c:	ed 82       	std	Y+5, r14	; 0x05
     97e:	fe 82       	std	Y+6, r15	; 0x06
     980:	0f 83       	std	Y+7, r16	; 0x07
     982:	18 87       	std	Y+8, r17	; 0x08
     984:	c8 01       	movw	r24, r16
     986:	b7 01       	movw	r22, r14
     988:	0e 94 b0 05 	call	0xb60	; 0xb60 <__clzsi2>
     98c:	01 97       	sbiw	r24, 0x01	; 1
     98e:	18 16       	cp	r1, r24
     990:	19 06       	cpc	r1, r25
     992:	84 f4       	brge	.+32     	; 0x9b4 <__floatsisf+0xaa>
     994:	08 2e       	mov	r0, r24
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatsisf+0x96>
     998:	ee 0c       	add	r14, r14
     99a:	ff 1c       	adc	r15, r15
     99c:	00 1f       	adc	r16, r16
     99e:	11 1f       	adc	r17, r17
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatsisf+0x8e>
     9a4:	ed 82       	std	Y+5, r14	; 0x05
     9a6:	fe 82       	std	Y+6, r15	; 0x06
     9a8:	0f 83       	std	Y+7, r16	; 0x07
     9aa:	18 87       	std	Y+8, r17	; 0x08
     9ac:	c8 1a       	sub	r12, r24
     9ae:	d9 0a       	sbc	r13, r25
     9b0:	dc 82       	std	Y+4, r13	; 0x04
     9b2:	cb 82       	std	Y+3, r12	; 0x03
     9b4:	ba 82       	std	Y+2, r11	; 0x02
     9b6:	ce 01       	movw	r24, r28
     9b8:	01 96       	adiw	r24, 0x01	; 1
     9ba:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     9be:	28 96       	adiw	r28, 0x08	; 8
     9c0:	e9 e0       	ldi	r30, 0x09	; 9
     9c2:	0c 94 43 24 	jmp	0x4886	; 0x4886 <__epilogue_restores__+0x12>

000009c6 <__fixsfsi>:
     9c6:	ac e0       	ldi	r26, 0x0C	; 12
     9c8:	b0 e0       	ldi	r27, 0x00	; 0
     9ca:	e9 ee       	ldi	r30, 0xE9	; 233
     9cc:	f4 e0       	ldi	r31, 0x04	; 4
     9ce:	0c 94 2e 24 	jmp	0x485c	; 0x485c <__prologue_saves__+0x20>
     9d2:	69 83       	std	Y+1, r22	; 0x01
     9d4:	7a 83       	std	Y+2, r23	; 0x02
     9d6:	8b 83       	std	Y+3, r24	; 0x03
     9d8:	9c 83       	std	Y+4, r25	; 0x04
     9da:	ce 01       	movw	r24, r28
     9dc:	01 96       	adiw	r24, 0x01	; 1
     9de:	be 01       	movw	r22, r28
     9e0:	6b 5f       	subi	r22, 0xFB	; 251
     9e2:	7f 4f       	sbci	r23, 0xFF	; 255
     9e4:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     9e8:	8d 81       	ldd	r24, Y+5	; 0x05
     9ea:	82 30       	cpi	r24, 0x02	; 2
     9ec:	61 f1       	breq	.+88     	; 0xa46 <__fixsfsi+0x80>
     9ee:	82 30       	cpi	r24, 0x02	; 2
     9f0:	50 f1       	brcs	.+84     	; 0xa46 <__fixsfsi+0x80>
     9f2:	84 30       	cpi	r24, 0x04	; 4
     9f4:	21 f4       	brne	.+8      	; 0x9fe <__fixsfsi+0x38>
     9f6:	8e 81       	ldd	r24, Y+6	; 0x06
     9f8:	88 23       	and	r24, r24
     9fa:	51 f1       	breq	.+84     	; 0xa50 <__fixsfsi+0x8a>
     9fc:	2e c0       	rjmp	.+92     	; 0xa5a <__fixsfsi+0x94>
     9fe:	2f 81       	ldd	r18, Y+7	; 0x07
     a00:	38 85       	ldd	r19, Y+8	; 0x08
     a02:	37 fd       	sbrc	r19, 7
     a04:	20 c0       	rjmp	.+64     	; 0xa46 <__fixsfsi+0x80>
     a06:	6e 81       	ldd	r22, Y+6	; 0x06
     a08:	2f 31       	cpi	r18, 0x1F	; 31
     a0a:	31 05       	cpc	r19, r1
     a0c:	1c f0       	brlt	.+6      	; 0xa14 <__fixsfsi+0x4e>
     a0e:	66 23       	and	r22, r22
     a10:	f9 f0       	breq	.+62     	; 0xa50 <__fixsfsi+0x8a>
     a12:	23 c0       	rjmp	.+70     	; 0xa5a <__fixsfsi+0x94>
     a14:	8e e1       	ldi	r24, 0x1E	; 30
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	82 1b       	sub	r24, r18
     a1a:	93 0b       	sbc	r25, r19
     a1c:	29 85       	ldd	r18, Y+9	; 0x09
     a1e:	3a 85       	ldd	r19, Y+10	; 0x0a
     a20:	4b 85       	ldd	r20, Y+11	; 0x0b
     a22:	5c 85       	ldd	r21, Y+12	; 0x0c
     a24:	04 c0       	rjmp	.+8      	; 0xa2e <__fixsfsi+0x68>
     a26:	56 95       	lsr	r21
     a28:	47 95       	ror	r20
     a2a:	37 95       	ror	r19
     a2c:	27 95       	ror	r18
     a2e:	8a 95       	dec	r24
     a30:	d2 f7       	brpl	.-12     	; 0xa26 <__fixsfsi+0x60>
     a32:	66 23       	and	r22, r22
     a34:	b1 f0       	breq	.+44     	; 0xa62 <__fixsfsi+0x9c>
     a36:	50 95       	com	r21
     a38:	40 95       	com	r20
     a3a:	30 95       	com	r19
     a3c:	21 95       	neg	r18
     a3e:	3f 4f       	sbci	r19, 0xFF	; 255
     a40:	4f 4f       	sbci	r20, 0xFF	; 255
     a42:	5f 4f       	sbci	r21, 0xFF	; 255
     a44:	0e c0       	rjmp	.+28     	; 0xa62 <__fixsfsi+0x9c>
     a46:	20 e0       	ldi	r18, 0x00	; 0
     a48:	30 e0       	ldi	r19, 0x00	; 0
     a4a:	40 e0       	ldi	r20, 0x00	; 0
     a4c:	50 e0       	ldi	r21, 0x00	; 0
     a4e:	09 c0       	rjmp	.+18     	; 0xa62 <__fixsfsi+0x9c>
     a50:	2f ef       	ldi	r18, 0xFF	; 255
     a52:	3f ef       	ldi	r19, 0xFF	; 255
     a54:	4f ef       	ldi	r20, 0xFF	; 255
     a56:	5f e7       	ldi	r21, 0x7F	; 127
     a58:	04 c0       	rjmp	.+8      	; 0xa62 <__fixsfsi+0x9c>
     a5a:	20 e0       	ldi	r18, 0x00	; 0
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	40 e0       	ldi	r20, 0x00	; 0
     a60:	50 e8       	ldi	r21, 0x80	; 128
     a62:	b9 01       	movw	r22, r18
     a64:	ca 01       	movw	r24, r20
     a66:	2c 96       	adiw	r28, 0x0c	; 12
     a68:	e2 e0       	ldi	r30, 0x02	; 2
     a6a:	0c 94 4a 24 	jmp	0x4894	; 0x4894 <__epilogue_restores__+0x20>

00000a6e <__floatunsisf>:
     a6e:	a8 e0       	ldi	r26, 0x08	; 8
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	ed e3       	ldi	r30, 0x3D	; 61
     a74:	f5 e0       	ldi	r31, 0x05	; 5
     a76:	0c 94 26 24 	jmp	0x484c	; 0x484c <__prologue_saves__+0x10>
     a7a:	7b 01       	movw	r14, r22
     a7c:	8c 01       	movw	r16, r24
     a7e:	61 15       	cp	r22, r1
     a80:	71 05       	cpc	r23, r1
     a82:	81 05       	cpc	r24, r1
     a84:	91 05       	cpc	r25, r1
     a86:	19 f4       	brne	.+6      	; 0xa8e <__floatunsisf+0x20>
     a88:	82 e0       	ldi	r24, 0x02	; 2
     a8a:	89 83       	std	Y+1, r24	; 0x01
     a8c:	60 c0       	rjmp	.+192    	; 0xb4e <__floatunsisf+0xe0>
     a8e:	83 e0       	ldi	r24, 0x03	; 3
     a90:	89 83       	std	Y+1, r24	; 0x01
     a92:	8e e1       	ldi	r24, 0x1E	; 30
     a94:	c8 2e       	mov	r12, r24
     a96:	d1 2c       	mov	r13, r1
     a98:	dc 82       	std	Y+4, r13	; 0x04
     a9a:	cb 82       	std	Y+3, r12	; 0x03
     a9c:	ed 82       	std	Y+5, r14	; 0x05
     a9e:	fe 82       	std	Y+6, r15	; 0x06
     aa0:	0f 83       	std	Y+7, r16	; 0x07
     aa2:	18 87       	std	Y+8, r17	; 0x08
     aa4:	c8 01       	movw	r24, r16
     aa6:	b7 01       	movw	r22, r14
     aa8:	0e 94 b0 05 	call	0xb60	; 0xb60 <__clzsi2>
     aac:	fc 01       	movw	r30, r24
     aae:	31 97       	sbiw	r30, 0x01	; 1
     ab0:	f7 ff       	sbrs	r31, 7
     ab2:	3b c0       	rjmp	.+118    	; 0xb2a <__floatunsisf+0xbc>
     ab4:	22 27       	eor	r18, r18
     ab6:	33 27       	eor	r19, r19
     ab8:	2e 1b       	sub	r18, r30
     aba:	3f 0b       	sbc	r19, r31
     abc:	57 01       	movw	r10, r14
     abe:	68 01       	movw	r12, r16
     ac0:	02 2e       	mov	r0, r18
     ac2:	04 c0       	rjmp	.+8      	; 0xacc <__floatunsisf+0x5e>
     ac4:	d6 94       	lsr	r13
     ac6:	c7 94       	ror	r12
     ac8:	b7 94       	ror	r11
     aca:	a7 94       	ror	r10
     acc:	0a 94       	dec	r0
     ace:	d2 f7       	brpl	.-12     	; 0xac4 <__floatunsisf+0x56>
     ad0:	40 e0       	ldi	r20, 0x00	; 0
     ad2:	50 e0       	ldi	r21, 0x00	; 0
     ad4:	60 e0       	ldi	r22, 0x00	; 0
     ad6:	70 e0       	ldi	r23, 0x00	; 0
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	a0 e0       	ldi	r26, 0x00	; 0
     ade:	b0 e0       	ldi	r27, 0x00	; 0
     ae0:	04 c0       	rjmp	.+8      	; 0xaea <__floatunsisf+0x7c>
     ae2:	88 0f       	add	r24, r24
     ae4:	99 1f       	adc	r25, r25
     ae6:	aa 1f       	adc	r26, r26
     ae8:	bb 1f       	adc	r27, r27
     aea:	2a 95       	dec	r18
     aec:	d2 f7       	brpl	.-12     	; 0xae2 <__floatunsisf+0x74>
     aee:	01 97       	sbiw	r24, 0x01	; 1
     af0:	a1 09       	sbc	r26, r1
     af2:	b1 09       	sbc	r27, r1
     af4:	8e 21       	and	r24, r14
     af6:	9f 21       	and	r25, r15
     af8:	a0 23       	and	r26, r16
     afa:	b1 23       	and	r27, r17
     afc:	00 97       	sbiw	r24, 0x00	; 0
     afe:	a1 05       	cpc	r26, r1
     b00:	b1 05       	cpc	r27, r1
     b02:	21 f0       	breq	.+8      	; 0xb0c <__floatunsisf+0x9e>
     b04:	41 e0       	ldi	r20, 0x01	; 1
     b06:	50 e0       	ldi	r21, 0x00	; 0
     b08:	60 e0       	ldi	r22, 0x00	; 0
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	4a 29       	or	r20, r10
     b0e:	5b 29       	or	r21, r11
     b10:	6c 29       	or	r22, r12
     b12:	7d 29       	or	r23, r13
     b14:	4d 83       	std	Y+5, r20	; 0x05
     b16:	5e 83       	std	Y+6, r21	; 0x06
     b18:	6f 83       	std	Y+7, r22	; 0x07
     b1a:	78 87       	std	Y+8, r23	; 0x08
     b1c:	8e e1       	ldi	r24, 0x1E	; 30
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	8e 1b       	sub	r24, r30
     b22:	9f 0b       	sbc	r25, r31
     b24:	9c 83       	std	Y+4, r25	; 0x04
     b26:	8b 83       	std	Y+3, r24	; 0x03
     b28:	12 c0       	rjmp	.+36     	; 0xb4e <__floatunsisf+0xe0>
     b2a:	30 97       	sbiw	r30, 0x00	; 0
     b2c:	81 f0       	breq	.+32     	; 0xb4e <__floatunsisf+0xe0>
     b2e:	0e 2e       	mov	r0, r30
     b30:	04 c0       	rjmp	.+8      	; 0xb3a <__floatunsisf+0xcc>
     b32:	ee 0c       	add	r14, r14
     b34:	ff 1c       	adc	r15, r15
     b36:	00 1f       	adc	r16, r16
     b38:	11 1f       	adc	r17, r17
     b3a:	0a 94       	dec	r0
     b3c:	d2 f7       	brpl	.-12     	; 0xb32 <__floatunsisf+0xc4>
     b3e:	ed 82       	std	Y+5, r14	; 0x05
     b40:	fe 82       	std	Y+6, r15	; 0x06
     b42:	0f 83       	std	Y+7, r16	; 0x07
     b44:	18 87       	std	Y+8, r17	; 0x08
     b46:	ce 1a       	sub	r12, r30
     b48:	df 0a       	sbc	r13, r31
     b4a:	dc 82       	std	Y+4, r13	; 0x04
     b4c:	cb 82       	std	Y+3, r12	; 0x03
     b4e:	1a 82       	std	Y+2, r1	; 0x02
     b50:	ce 01       	movw	r24, r28
     b52:	01 96       	adiw	r24, 0x01	; 1
     b54:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     b58:	28 96       	adiw	r28, 0x08	; 8
     b5a:	ea e0       	ldi	r30, 0x0A	; 10
     b5c:	0c 94 42 24 	jmp	0x4884	; 0x4884 <__epilogue_restores__+0x10>

00000b60 <__clzsi2>:
     b60:	ef 92       	push	r14
     b62:	ff 92       	push	r15
     b64:	0f 93       	push	r16
     b66:	1f 93       	push	r17
     b68:	7b 01       	movw	r14, r22
     b6a:	8c 01       	movw	r16, r24
     b6c:	80 e0       	ldi	r24, 0x00	; 0
     b6e:	e8 16       	cp	r14, r24
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	f8 06       	cpc	r15, r24
     b74:	81 e0       	ldi	r24, 0x01	; 1
     b76:	08 07       	cpc	r16, r24
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	18 07       	cpc	r17, r24
     b7c:	88 f4       	brcc	.+34     	; 0xba0 <__clzsi2+0x40>
     b7e:	8f ef       	ldi	r24, 0xFF	; 255
     b80:	e8 16       	cp	r14, r24
     b82:	f1 04       	cpc	r15, r1
     b84:	01 05       	cpc	r16, r1
     b86:	11 05       	cpc	r17, r1
     b88:	31 f0       	breq	.+12     	; 0xb96 <__clzsi2+0x36>
     b8a:	28 f0       	brcs	.+10     	; 0xb96 <__clzsi2+0x36>
     b8c:	88 e0       	ldi	r24, 0x08	; 8
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	a0 e0       	ldi	r26, 0x00	; 0
     b92:	b0 e0       	ldi	r27, 0x00	; 0
     b94:	17 c0       	rjmp	.+46     	; 0xbc4 <__clzsi2+0x64>
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	a0 e0       	ldi	r26, 0x00	; 0
     b9c:	b0 e0       	ldi	r27, 0x00	; 0
     b9e:	12 c0       	rjmp	.+36     	; 0xbc4 <__clzsi2+0x64>
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	e8 16       	cp	r14, r24
     ba4:	80 e0       	ldi	r24, 0x00	; 0
     ba6:	f8 06       	cpc	r15, r24
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	08 07       	cpc	r16, r24
     bac:	81 e0       	ldi	r24, 0x01	; 1
     bae:	18 07       	cpc	r17, r24
     bb0:	28 f0       	brcs	.+10     	; 0xbbc <__clzsi2+0x5c>
     bb2:	88 e1       	ldi	r24, 0x18	; 24
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	a0 e0       	ldi	r26, 0x00	; 0
     bb8:	b0 e0       	ldi	r27, 0x00	; 0
     bba:	04 c0       	rjmp	.+8      	; 0xbc4 <__clzsi2+0x64>
     bbc:	80 e1       	ldi	r24, 0x10	; 16
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	a0 e0       	ldi	r26, 0x00	; 0
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	20 e2       	ldi	r18, 0x20	; 32
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	40 e0       	ldi	r20, 0x00	; 0
     bca:	50 e0       	ldi	r21, 0x00	; 0
     bcc:	28 1b       	sub	r18, r24
     bce:	39 0b       	sbc	r19, r25
     bd0:	4a 0b       	sbc	r20, r26
     bd2:	5b 0b       	sbc	r21, r27
     bd4:	04 c0       	rjmp	.+8      	; 0xbde <__clzsi2+0x7e>
     bd6:	16 95       	lsr	r17
     bd8:	07 95       	ror	r16
     bda:	f7 94       	ror	r15
     bdc:	e7 94       	ror	r14
     bde:	8a 95       	dec	r24
     be0:	d2 f7       	brpl	.-12     	; 0xbd6 <__clzsi2+0x76>
     be2:	f7 01       	movw	r30, r14
     be4:	e2 59       	subi	r30, 0x92	; 146
     be6:	ff 4f       	sbci	r31, 0xFF	; 255
     be8:	80 81       	ld	r24, Z
     bea:	28 1b       	sub	r18, r24
     bec:	31 09       	sbc	r19, r1
     bee:	41 09       	sbc	r20, r1
     bf0:	51 09       	sbc	r21, r1
     bf2:	c9 01       	movw	r24, r18
     bf4:	1f 91       	pop	r17
     bf6:	0f 91       	pop	r16
     bf8:	ff 90       	pop	r15
     bfa:	ef 90       	pop	r14
     bfc:	08 95       	ret

00000bfe <__pack_f>:
     bfe:	df 92       	push	r13
     c00:	ef 92       	push	r14
     c02:	ff 92       	push	r15
     c04:	0f 93       	push	r16
     c06:	1f 93       	push	r17
     c08:	fc 01       	movw	r30, r24
     c0a:	e4 80       	ldd	r14, Z+4	; 0x04
     c0c:	f5 80       	ldd	r15, Z+5	; 0x05
     c0e:	06 81       	ldd	r16, Z+6	; 0x06
     c10:	17 81       	ldd	r17, Z+7	; 0x07
     c12:	d1 80       	ldd	r13, Z+1	; 0x01
     c14:	80 81       	ld	r24, Z
     c16:	82 30       	cpi	r24, 0x02	; 2
     c18:	48 f4       	brcc	.+18     	; 0xc2c <__pack_f+0x2e>
     c1a:	80 e0       	ldi	r24, 0x00	; 0
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	a0 e1       	ldi	r26, 0x10	; 16
     c20:	b0 e0       	ldi	r27, 0x00	; 0
     c22:	e8 2a       	or	r14, r24
     c24:	f9 2a       	or	r15, r25
     c26:	0a 2b       	or	r16, r26
     c28:	1b 2b       	or	r17, r27
     c2a:	a5 c0       	rjmp	.+330    	; 0xd76 <__pack_f+0x178>
     c2c:	84 30       	cpi	r24, 0x04	; 4
     c2e:	09 f4       	brne	.+2      	; 0xc32 <__pack_f+0x34>
     c30:	9f c0       	rjmp	.+318    	; 0xd70 <__pack_f+0x172>
     c32:	82 30       	cpi	r24, 0x02	; 2
     c34:	21 f4       	brne	.+8      	; 0xc3e <__pack_f+0x40>
     c36:	ee 24       	eor	r14, r14
     c38:	ff 24       	eor	r15, r15
     c3a:	87 01       	movw	r16, r14
     c3c:	05 c0       	rjmp	.+10     	; 0xc48 <__pack_f+0x4a>
     c3e:	e1 14       	cp	r14, r1
     c40:	f1 04       	cpc	r15, r1
     c42:	01 05       	cpc	r16, r1
     c44:	11 05       	cpc	r17, r1
     c46:	19 f4       	brne	.+6      	; 0xc4e <__pack_f+0x50>
     c48:	e0 e0       	ldi	r30, 0x00	; 0
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	96 c0       	rjmp	.+300    	; 0xd7a <__pack_f+0x17c>
     c4e:	62 81       	ldd	r22, Z+2	; 0x02
     c50:	73 81       	ldd	r23, Z+3	; 0x03
     c52:	9f ef       	ldi	r25, 0xFF	; 255
     c54:	62 38       	cpi	r22, 0x82	; 130
     c56:	79 07       	cpc	r23, r25
     c58:	0c f0       	brlt	.+2      	; 0xc5c <__pack_f+0x5e>
     c5a:	5b c0       	rjmp	.+182    	; 0xd12 <__pack_f+0x114>
     c5c:	22 e8       	ldi	r18, 0x82	; 130
     c5e:	3f ef       	ldi	r19, 0xFF	; 255
     c60:	26 1b       	sub	r18, r22
     c62:	37 0b       	sbc	r19, r23
     c64:	2a 31       	cpi	r18, 0x1A	; 26
     c66:	31 05       	cpc	r19, r1
     c68:	2c f0       	brlt	.+10     	; 0xc74 <__pack_f+0x76>
     c6a:	20 e0       	ldi	r18, 0x00	; 0
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	40 e0       	ldi	r20, 0x00	; 0
     c70:	50 e0       	ldi	r21, 0x00	; 0
     c72:	2a c0       	rjmp	.+84     	; 0xcc8 <__pack_f+0xca>
     c74:	b8 01       	movw	r22, r16
     c76:	a7 01       	movw	r20, r14
     c78:	02 2e       	mov	r0, r18
     c7a:	04 c0       	rjmp	.+8      	; 0xc84 <__pack_f+0x86>
     c7c:	76 95       	lsr	r23
     c7e:	67 95       	ror	r22
     c80:	57 95       	ror	r21
     c82:	47 95       	ror	r20
     c84:	0a 94       	dec	r0
     c86:	d2 f7       	brpl	.-12     	; 0xc7c <__pack_f+0x7e>
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	a0 e0       	ldi	r26, 0x00	; 0
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	04 c0       	rjmp	.+8      	; 0xc9a <__pack_f+0x9c>
     c92:	88 0f       	add	r24, r24
     c94:	99 1f       	adc	r25, r25
     c96:	aa 1f       	adc	r26, r26
     c98:	bb 1f       	adc	r27, r27
     c9a:	2a 95       	dec	r18
     c9c:	d2 f7       	brpl	.-12     	; 0xc92 <__pack_f+0x94>
     c9e:	01 97       	sbiw	r24, 0x01	; 1
     ca0:	a1 09       	sbc	r26, r1
     ca2:	b1 09       	sbc	r27, r1
     ca4:	8e 21       	and	r24, r14
     ca6:	9f 21       	and	r25, r15
     ca8:	a0 23       	and	r26, r16
     caa:	b1 23       	and	r27, r17
     cac:	00 97       	sbiw	r24, 0x00	; 0
     cae:	a1 05       	cpc	r26, r1
     cb0:	b1 05       	cpc	r27, r1
     cb2:	21 f0       	breq	.+8      	; 0xcbc <__pack_f+0xbe>
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	a0 e0       	ldi	r26, 0x00	; 0
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	9a 01       	movw	r18, r20
     cbe:	ab 01       	movw	r20, r22
     cc0:	28 2b       	or	r18, r24
     cc2:	39 2b       	or	r19, r25
     cc4:	4a 2b       	or	r20, r26
     cc6:	5b 2b       	or	r21, r27
     cc8:	da 01       	movw	r26, r20
     cca:	c9 01       	movw	r24, r18
     ccc:	8f 77       	andi	r24, 0x7F	; 127
     cce:	90 70       	andi	r25, 0x00	; 0
     cd0:	a0 70       	andi	r26, 0x00	; 0
     cd2:	b0 70       	andi	r27, 0x00	; 0
     cd4:	80 34       	cpi	r24, 0x40	; 64
     cd6:	91 05       	cpc	r25, r1
     cd8:	a1 05       	cpc	r26, r1
     cda:	b1 05       	cpc	r27, r1
     cdc:	39 f4       	brne	.+14     	; 0xcec <__pack_f+0xee>
     cde:	27 ff       	sbrs	r18, 7
     ce0:	09 c0       	rjmp	.+18     	; 0xcf4 <__pack_f+0xf6>
     ce2:	20 5c       	subi	r18, 0xC0	; 192
     ce4:	3f 4f       	sbci	r19, 0xFF	; 255
     ce6:	4f 4f       	sbci	r20, 0xFF	; 255
     ce8:	5f 4f       	sbci	r21, 0xFF	; 255
     cea:	04 c0       	rjmp	.+8      	; 0xcf4 <__pack_f+0xf6>
     cec:	21 5c       	subi	r18, 0xC1	; 193
     cee:	3f 4f       	sbci	r19, 0xFF	; 255
     cf0:	4f 4f       	sbci	r20, 0xFF	; 255
     cf2:	5f 4f       	sbci	r21, 0xFF	; 255
     cf4:	e0 e0       	ldi	r30, 0x00	; 0
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	20 30       	cpi	r18, 0x00	; 0
     cfa:	a0 e0       	ldi	r26, 0x00	; 0
     cfc:	3a 07       	cpc	r19, r26
     cfe:	a0 e0       	ldi	r26, 0x00	; 0
     d00:	4a 07       	cpc	r20, r26
     d02:	a0 e4       	ldi	r26, 0x40	; 64
     d04:	5a 07       	cpc	r21, r26
     d06:	10 f0       	brcs	.+4      	; 0xd0c <__pack_f+0x10e>
     d08:	e1 e0       	ldi	r30, 0x01	; 1
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	79 01       	movw	r14, r18
     d0e:	8a 01       	movw	r16, r20
     d10:	27 c0       	rjmp	.+78     	; 0xd60 <__pack_f+0x162>
     d12:	60 38       	cpi	r22, 0x80	; 128
     d14:	71 05       	cpc	r23, r1
     d16:	64 f5       	brge	.+88     	; 0xd70 <__pack_f+0x172>
     d18:	fb 01       	movw	r30, r22
     d1a:	e1 58       	subi	r30, 0x81	; 129
     d1c:	ff 4f       	sbci	r31, 0xFF	; 255
     d1e:	d8 01       	movw	r26, r16
     d20:	c7 01       	movw	r24, r14
     d22:	8f 77       	andi	r24, 0x7F	; 127
     d24:	90 70       	andi	r25, 0x00	; 0
     d26:	a0 70       	andi	r26, 0x00	; 0
     d28:	b0 70       	andi	r27, 0x00	; 0
     d2a:	80 34       	cpi	r24, 0x40	; 64
     d2c:	91 05       	cpc	r25, r1
     d2e:	a1 05       	cpc	r26, r1
     d30:	b1 05       	cpc	r27, r1
     d32:	39 f4       	brne	.+14     	; 0xd42 <__pack_f+0x144>
     d34:	e7 fe       	sbrs	r14, 7
     d36:	0d c0       	rjmp	.+26     	; 0xd52 <__pack_f+0x154>
     d38:	80 e4       	ldi	r24, 0x40	; 64
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	a0 e0       	ldi	r26, 0x00	; 0
     d3e:	b0 e0       	ldi	r27, 0x00	; 0
     d40:	04 c0       	rjmp	.+8      	; 0xd4a <__pack_f+0x14c>
     d42:	8f e3       	ldi	r24, 0x3F	; 63
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	a0 e0       	ldi	r26, 0x00	; 0
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	e8 0e       	add	r14, r24
     d4c:	f9 1e       	adc	r15, r25
     d4e:	0a 1f       	adc	r16, r26
     d50:	1b 1f       	adc	r17, r27
     d52:	17 ff       	sbrs	r17, 7
     d54:	05 c0       	rjmp	.+10     	; 0xd60 <__pack_f+0x162>
     d56:	16 95       	lsr	r17
     d58:	07 95       	ror	r16
     d5a:	f7 94       	ror	r15
     d5c:	e7 94       	ror	r14
     d5e:	31 96       	adiw	r30, 0x01	; 1
     d60:	87 e0       	ldi	r24, 0x07	; 7
     d62:	16 95       	lsr	r17
     d64:	07 95       	ror	r16
     d66:	f7 94       	ror	r15
     d68:	e7 94       	ror	r14
     d6a:	8a 95       	dec	r24
     d6c:	d1 f7       	brne	.-12     	; 0xd62 <__pack_f+0x164>
     d6e:	05 c0       	rjmp	.+10     	; 0xd7a <__pack_f+0x17c>
     d70:	ee 24       	eor	r14, r14
     d72:	ff 24       	eor	r15, r15
     d74:	87 01       	movw	r16, r14
     d76:	ef ef       	ldi	r30, 0xFF	; 255
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	6e 2f       	mov	r22, r30
     d7c:	67 95       	ror	r22
     d7e:	66 27       	eor	r22, r22
     d80:	67 95       	ror	r22
     d82:	90 2f       	mov	r25, r16
     d84:	9f 77       	andi	r25, 0x7F	; 127
     d86:	d7 94       	ror	r13
     d88:	dd 24       	eor	r13, r13
     d8a:	d7 94       	ror	r13
     d8c:	8e 2f       	mov	r24, r30
     d8e:	86 95       	lsr	r24
     d90:	49 2f       	mov	r20, r25
     d92:	46 2b       	or	r20, r22
     d94:	58 2f       	mov	r21, r24
     d96:	5d 29       	or	r21, r13
     d98:	b7 01       	movw	r22, r14
     d9a:	ca 01       	movw	r24, r20
     d9c:	1f 91       	pop	r17
     d9e:	0f 91       	pop	r16
     da0:	ff 90       	pop	r15
     da2:	ef 90       	pop	r14
     da4:	df 90       	pop	r13
     da6:	08 95       	ret

00000da8 <__unpack_f>:
     da8:	fc 01       	movw	r30, r24
     daa:	db 01       	movw	r26, r22
     dac:	40 81       	ld	r20, Z
     dae:	51 81       	ldd	r21, Z+1	; 0x01
     db0:	22 81       	ldd	r18, Z+2	; 0x02
     db2:	62 2f       	mov	r22, r18
     db4:	6f 77       	andi	r22, 0x7F	; 127
     db6:	70 e0       	ldi	r23, 0x00	; 0
     db8:	22 1f       	adc	r18, r18
     dba:	22 27       	eor	r18, r18
     dbc:	22 1f       	adc	r18, r18
     dbe:	93 81       	ldd	r25, Z+3	; 0x03
     dc0:	89 2f       	mov	r24, r25
     dc2:	88 0f       	add	r24, r24
     dc4:	82 2b       	or	r24, r18
     dc6:	28 2f       	mov	r18, r24
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	99 1f       	adc	r25, r25
     dcc:	99 27       	eor	r25, r25
     dce:	99 1f       	adc	r25, r25
     dd0:	11 96       	adiw	r26, 0x01	; 1
     dd2:	9c 93       	st	X, r25
     dd4:	11 97       	sbiw	r26, 0x01	; 1
     dd6:	21 15       	cp	r18, r1
     dd8:	31 05       	cpc	r19, r1
     dda:	a9 f5       	brne	.+106    	; 0xe46 <__unpack_f+0x9e>
     ddc:	41 15       	cp	r20, r1
     dde:	51 05       	cpc	r21, r1
     de0:	61 05       	cpc	r22, r1
     de2:	71 05       	cpc	r23, r1
     de4:	11 f4       	brne	.+4      	; 0xdea <__unpack_f+0x42>
     de6:	82 e0       	ldi	r24, 0x02	; 2
     de8:	37 c0       	rjmp	.+110    	; 0xe58 <__unpack_f+0xb0>
     dea:	82 e8       	ldi	r24, 0x82	; 130
     dec:	9f ef       	ldi	r25, 0xFF	; 255
     dee:	13 96       	adiw	r26, 0x03	; 3
     df0:	9c 93       	st	X, r25
     df2:	8e 93       	st	-X, r24
     df4:	12 97       	sbiw	r26, 0x02	; 2
     df6:	9a 01       	movw	r18, r20
     df8:	ab 01       	movw	r20, r22
     dfa:	67 e0       	ldi	r22, 0x07	; 7
     dfc:	22 0f       	add	r18, r18
     dfe:	33 1f       	adc	r19, r19
     e00:	44 1f       	adc	r20, r20
     e02:	55 1f       	adc	r21, r21
     e04:	6a 95       	dec	r22
     e06:	d1 f7       	brne	.-12     	; 0xdfc <__unpack_f+0x54>
     e08:	83 e0       	ldi	r24, 0x03	; 3
     e0a:	8c 93       	st	X, r24
     e0c:	0d c0       	rjmp	.+26     	; 0xe28 <__unpack_f+0x80>
     e0e:	22 0f       	add	r18, r18
     e10:	33 1f       	adc	r19, r19
     e12:	44 1f       	adc	r20, r20
     e14:	55 1f       	adc	r21, r21
     e16:	12 96       	adiw	r26, 0x02	; 2
     e18:	8d 91       	ld	r24, X+
     e1a:	9c 91       	ld	r25, X
     e1c:	13 97       	sbiw	r26, 0x03	; 3
     e1e:	01 97       	sbiw	r24, 0x01	; 1
     e20:	13 96       	adiw	r26, 0x03	; 3
     e22:	9c 93       	st	X, r25
     e24:	8e 93       	st	-X, r24
     e26:	12 97       	sbiw	r26, 0x02	; 2
     e28:	20 30       	cpi	r18, 0x00	; 0
     e2a:	80 e0       	ldi	r24, 0x00	; 0
     e2c:	38 07       	cpc	r19, r24
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	48 07       	cpc	r20, r24
     e32:	80 e4       	ldi	r24, 0x40	; 64
     e34:	58 07       	cpc	r21, r24
     e36:	58 f3       	brcs	.-42     	; 0xe0e <__unpack_f+0x66>
     e38:	14 96       	adiw	r26, 0x04	; 4
     e3a:	2d 93       	st	X+, r18
     e3c:	3d 93       	st	X+, r19
     e3e:	4d 93       	st	X+, r20
     e40:	5c 93       	st	X, r21
     e42:	17 97       	sbiw	r26, 0x07	; 7
     e44:	08 95       	ret
     e46:	2f 3f       	cpi	r18, 0xFF	; 255
     e48:	31 05       	cpc	r19, r1
     e4a:	79 f4       	brne	.+30     	; 0xe6a <__unpack_f+0xc2>
     e4c:	41 15       	cp	r20, r1
     e4e:	51 05       	cpc	r21, r1
     e50:	61 05       	cpc	r22, r1
     e52:	71 05       	cpc	r23, r1
     e54:	19 f4       	brne	.+6      	; 0xe5c <__unpack_f+0xb4>
     e56:	84 e0       	ldi	r24, 0x04	; 4
     e58:	8c 93       	st	X, r24
     e5a:	08 95       	ret
     e5c:	64 ff       	sbrs	r22, 4
     e5e:	03 c0       	rjmp	.+6      	; 0xe66 <__unpack_f+0xbe>
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	8c 93       	st	X, r24
     e64:	12 c0       	rjmp	.+36     	; 0xe8a <__unpack_f+0xe2>
     e66:	1c 92       	st	X, r1
     e68:	10 c0       	rjmp	.+32     	; 0xe8a <__unpack_f+0xe2>
     e6a:	2f 57       	subi	r18, 0x7F	; 127
     e6c:	30 40       	sbci	r19, 0x00	; 0
     e6e:	13 96       	adiw	r26, 0x03	; 3
     e70:	3c 93       	st	X, r19
     e72:	2e 93       	st	-X, r18
     e74:	12 97       	sbiw	r26, 0x02	; 2
     e76:	83 e0       	ldi	r24, 0x03	; 3
     e78:	8c 93       	st	X, r24
     e7a:	87 e0       	ldi	r24, 0x07	; 7
     e7c:	44 0f       	add	r20, r20
     e7e:	55 1f       	adc	r21, r21
     e80:	66 1f       	adc	r22, r22
     e82:	77 1f       	adc	r23, r23
     e84:	8a 95       	dec	r24
     e86:	d1 f7       	brne	.-12     	; 0xe7c <__unpack_f+0xd4>
     e88:	70 64       	ori	r23, 0x40	; 64
     e8a:	14 96       	adiw	r26, 0x04	; 4
     e8c:	4d 93       	st	X+, r20
     e8e:	5d 93       	st	X+, r21
     e90:	6d 93       	st	X+, r22
     e92:	7c 93       	st	X, r23
     e94:	17 97       	sbiw	r26, 0x07	; 7
     e96:	08 95       	ret

00000e98 <__fpcmp_parts_f>:
     e98:	1f 93       	push	r17
     e9a:	dc 01       	movw	r26, r24
     e9c:	fb 01       	movw	r30, r22
     e9e:	9c 91       	ld	r25, X
     ea0:	92 30       	cpi	r25, 0x02	; 2
     ea2:	08 f4       	brcc	.+2      	; 0xea6 <__fpcmp_parts_f+0xe>
     ea4:	47 c0       	rjmp	.+142    	; 0xf34 <__fpcmp_parts_f+0x9c>
     ea6:	80 81       	ld	r24, Z
     ea8:	82 30       	cpi	r24, 0x02	; 2
     eaa:	08 f4       	brcc	.+2      	; 0xeae <__fpcmp_parts_f+0x16>
     eac:	43 c0       	rjmp	.+134    	; 0xf34 <__fpcmp_parts_f+0x9c>
     eae:	94 30       	cpi	r25, 0x04	; 4
     eb0:	51 f4       	brne	.+20     	; 0xec6 <__fpcmp_parts_f+0x2e>
     eb2:	11 96       	adiw	r26, 0x01	; 1
     eb4:	1c 91       	ld	r17, X
     eb6:	84 30       	cpi	r24, 0x04	; 4
     eb8:	99 f5       	brne	.+102    	; 0xf20 <__fpcmp_parts_f+0x88>
     eba:	81 81       	ldd	r24, Z+1	; 0x01
     ebc:	68 2f       	mov	r22, r24
     ebe:	70 e0       	ldi	r23, 0x00	; 0
     ec0:	61 1b       	sub	r22, r17
     ec2:	71 09       	sbc	r23, r1
     ec4:	3f c0       	rjmp	.+126    	; 0xf44 <__fpcmp_parts_f+0xac>
     ec6:	84 30       	cpi	r24, 0x04	; 4
     ec8:	21 f0       	breq	.+8      	; 0xed2 <__fpcmp_parts_f+0x3a>
     eca:	92 30       	cpi	r25, 0x02	; 2
     ecc:	31 f4       	brne	.+12     	; 0xeda <__fpcmp_parts_f+0x42>
     ece:	82 30       	cpi	r24, 0x02	; 2
     ed0:	b9 f1       	breq	.+110    	; 0xf40 <__fpcmp_parts_f+0xa8>
     ed2:	81 81       	ldd	r24, Z+1	; 0x01
     ed4:	88 23       	and	r24, r24
     ed6:	89 f1       	breq	.+98     	; 0xf3a <__fpcmp_parts_f+0xa2>
     ed8:	2d c0       	rjmp	.+90     	; 0xf34 <__fpcmp_parts_f+0x9c>
     eda:	11 96       	adiw	r26, 0x01	; 1
     edc:	1c 91       	ld	r17, X
     ede:	11 97       	sbiw	r26, 0x01	; 1
     ee0:	82 30       	cpi	r24, 0x02	; 2
     ee2:	f1 f0       	breq	.+60     	; 0xf20 <__fpcmp_parts_f+0x88>
     ee4:	81 81       	ldd	r24, Z+1	; 0x01
     ee6:	18 17       	cp	r17, r24
     ee8:	d9 f4       	brne	.+54     	; 0xf20 <__fpcmp_parts_f+0x88>
     eea:	12 96       	adiw	r26, 0x02	; 2
     eec:	2d 91       	ld	r18, X+
     eee:	3c 91       	ld	r19, X
     ef0:	13 97       	sbiw	r26, 0x03	; 3
     ef2:	82 81       	ldd	r24, Z+2	; 0x02
     ef4:	93 81       	ldd	r25, Z+3	; 0x03
     ef6:	82 17       	cp	r24, r18
     ef8:	93 07       	cpc	r25, r19
     efa:	94 f0       	brlt	.+36     	; 0xf20 <__fpcmp_parts_f+0x88>
     efc:	28 17       	cp	r18, r24
     efe:	39 07       	cpc	r19, r25
     f00:	bc f0       	brlt	.+46     	; 0xf30 <__fpcmp_parts_f+0x98>
     f02:	14 96       	adiw	r26, 0x04	; 4
     f04:	8d 91       	ld	r24, X+
     f06:	9d 91       	ld	r25, X+
     f08:	0d 90       	ld	r0, X+
     f0a:	bc 91       	ld	r27, X
     f0c:	a0 2d       	mov	r26, r0
     f0e:	24 81       	ldd	r18, Z+4	; 0x04
     f10:	35 81       	ldd	r19, Z+5	; 0x05
     f12:	46 81       	ldd	r20, Z+6	; 0x06
     f14:	57 81       	ldd	r21, Z+7	; 0x07
     f16:	28 17       	cp	r18, r24
     f18:	39 07       	cpc	r19, r25
     f1a:	4a 07       	cpc	r20, r26
     f1c:	5b 07       	cpc	r21, r27
     f1e:	18 f4       	brcc	.+6      	; 0xf26 <__fpcmp_parts_f+0x8e>
     f20:	11 23       	and	r17, r17
     f22:	41 f0       	breq	.+16     	; 0xf34 <__fpcmp_parts_f+0x9c>
     f24:	0a c0       	rjmp	.+20     	; 0xf3a <__fpcmp_parts_f+0xa2>
     f26:	82 17       	cp	r24, r18
     f28:	93 07       	cpc	r25, r19
     f2a:	a4 07       	cpc	r26, r20
     f2c:	b5 07       	cpc	r27, r21
     f2e:	40 f4       	brcc	.+16     	; 0xf40 <__fpcmp_parts_f+0xa8>
     f30:	11 23       	and	r17, r17
     f32:	19 f0       	breq	.+6      	; 0xf3a <__fpcmp_parts_f+0xa2>
     f34:	61 e0       	ldi	r22, 0x01	; 1
     f36:	70 e0       	ldi	r23, 0x00	; 0
     f38:	05 c0       	rjmp	.+10     	; 0xf44 <__fpcmp_parts_f+0xac>
     f3a:	6f ef       	ldi	r22, 0xFF	; 255
     f3c:	7f ef       	ldi	r23, 0xFF	; 255
     f3e:	02 c0       	rjmp	.+4      	; 0xf44 <__fpcmp_parts_f+0xac>
     f40:	60 e0       	ldi	r22, 0x00	; 0
     f42:	70 e0       	ldi	r23, 0x00	; 0
     f44:	cb 01       	movw	r24, r22
     f46:	1f 91       	pop	r17
     f48:	08 95       	ret

00000f4a <WDT_voidSleep>:




void WDT_voidSleep(u8 Copy_u8SleepTime)
{
     f4a:	df 93       	push	r29
     f4c:	cf 93       	push	r28
     f4e:	0f 92       	push	r0
     f50:	cd b7       	in	r28, 0x3d	; 61
     f52:	de b7       	in	r29, 0x3e	; 62
     f54:	89 83       	std	Y+1, r24	; 0x01
	/* Clear the prescaler bits*/
	WDTCR &= WDT_MUSK;
     f56:	a1 e4       	ldi	r26, 0x41	; 65
     f58:	b0 e0       	ldi	r27, 0x00	; 0
     f5a:	e1 e4       	ldi	r30, 0x41	; 65
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	80 81       	ld	r24, Z
     f60:	88 7f       	andi	r24, 0xF8	; 248
     f62:	8c 93       	st	X, r24
	/* Set the required prescaler*/
	WDTCR |= Copy_u8SleepTime;
     f64:	a1 e4       	ldi	r26, 0x41	; 65
     f66:	b0 e0       	ldi	r27, 0x00	; 0
     f68:	e1 e4       	ldi	r30, 0x41	; 65
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	90 81       	ld	r25, Z
     f6e:	89 81       	ldd	r24, Y+1	; 0x01
     f70:	89 2b       	or	r24, r25
     f72:	8c 93       	st	X, r24

}
     f74:	0f 90       	pop	r0
     f76:	cf 91       	pop	r28
     f78:	df 91       	pop	r29
     f7a:	08 95       	ret

00000f7c <WDT_voidEnable>:
void WDT_voidEnable(void)
{
     f7c:	df 93       	push	r29
     f7e:	cf 93       	push	r28
     f80:	cd b7       	in	r28, 0x3d	; 61
     f82:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(WDTCR,WDTCR_WDE);
     f84:	a1 e4       	ldi	r26, 0x41	; 65
     f86:	b0 e0       	ldi	r27, 0x00	; 0
     f88:	e1 e4       	ldi	r30, 0x41	; 65
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 81       	ld	r24, Z
     f8e:	88 60       	ori	r24, 0x08	; 8
     f90:	8c 93       	st	X, r24

}
     f92:	cf 91       	pop	r28
     f94:	df 91       	pop	r29
     f96:	08 95       	ret

00000f98 <WDT_voidDisable>:
void WDT_voidDisable(void)
{
     f98:	df 93       	push	r29
     f9a:	cf 93       	push	r28
     f9c:	cd b7       	in	r28, 0x3d	; 61
     f9e:	de b7       	in	r29, 0x3e	; 62
	/* Disable sequence */
	WDTCR |= 0b00011000;
     fa0:	a1 e4       	ldi	r26, 0x41	; 65
     fa2:	b0 e0       	ldi	r27, 0x00	; 0
     fa4:	e1 e4       	ldi	r30, 0x41	; 65
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	80 81       	ld	r24, Z
     faa:	88 61       	ori	r24, 0x18	; 24
     fac:	8c 93       	st	X, r24
	WDTCR = 0;
     fae:	e1 e4       	ldi	r30, 0x41	; 65
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	10 82       	st	Z, r1

}
     fb4:	cf 91       	pop	r28
     fb6:	df 91       	pop	r29
     fb8:	08 95       	ret

00000fba <WDT_voidRefresh>:

void WDT_voidRefresh(void)
{
     fba:	df 93       	push	r29
     fbc:	cf 93       	push	r28
     fbe:	cd b7       	in	r28, 0x3d	; 61
     fc0:	de b7       	in	r29, 0x3e	; 62
	asm("WDR");
     fc2:	a8 95       	wdr
}
     fc4:	cf 91       	pop	r28
     fc6:	df 91       	pop	r29
     fc8:	08 95       	ret

00000fca <TIMER0_voidInit>:

static void (*TIMER0_pvCallBackFunc)(void) = NULL;
static void (*ICU_pvCallBackFunc)(void) = NULL;

void TIMER0_voidInit(void)
{
     fca:	df 93       	push	r29
     fcc:	cf 93       	push	r28
     fce:	cd b7       	in	r28, 0x3d	; 61
     fd0:	de b7       	in	r29, 0x3e	; 62
	/* Choose fast pwm mode*/
	SET_BIT(TCCR0,TCCR0_WGM00);
     fd2:	a3 e5       	ldi	r26, 0x53	; 83
     fd4:	b0 e0       	ldi	r27, 0x00	; 0
     fd6:	e3 e5       	ldi	r30, 0x53	; 83
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	80 81       	ld	r24, Z
     fdc:	80 64       	ori	r24, 0x40	; 64
     fde:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_WGM01);
     fe0:	a3 e5       	ldi	r26, 0x53	; 83
     fe2:	b0 e0       	ldi	r27, 0x00	; 0
     fe4:	e3 e5       	ldi	r30, 0x53	; 83
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	80 81       	ld	r24, Z
     fea:	88 60       	ori	r24, 0x08	; 8
     fec:	8c 93       	st	X, r24

	//	/* output compare match interrupt enable */
	//	SET_BIT(TIMSK,TIMSK_OCIE0);
	//
	/*Set compare match value to 250*/
	OCR0 = 64;
     fee:	ec e5       	ldi	r30, 0x5C	; 92
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	80 e4       	ldi	r24, 0x40	; 64
     ff4:	80 83       	st	Z, r24

	CLR_BIT(TCCR0,4);
     ff6:	a3 e5       	ldi	r26, 0x53	; 83
     ff8:	b0 e0       	ldi	r27, 0x00	; 0
     ffa:	e3 e5       	ldi	r30, 0x53	; 83
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	80 81       	ld	r24, Z
    1000:	8f 7e       	andi	r24, 0xEF	; 239
    1002:	8c 93       	st	X, r24
	SET_BIT(TCCR0,5);
    1004:	a3 e5       	ldi	r26, 0x53	; 83
    1006:	b0 e0       	ldi	r27, 0x00	; 0
    1008:	e3 e5       	ldi	r30, 0x53	; 83
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	80 81       	ld	r24, Z
    100e:	80 62       	ori	r24, 0x20	; 32
    1010:	8c 93       	st	X, r24
	/*prescaller : Division by 64*/
	CLR_BIT(TCCR0,TCCR0_CS00);
    1012:	a3 e5       	ldi	r26, 0x53	; 83
    1014:	b0 e0       	ldi	r27, 0x00	; 0
    1016:	e3 e5       	ldi	r30, 0x53	; 83
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	80 81       	ld	r24, Z
    101c:	8e 7f       	andi	r24, 0xFE	; 254
    101e:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_CS01);
    1020:	a3 e5       	ldi	r26, 0x53	; 83
    1022:	b0 e0       	ldi	r27, 0x00	; 0
    1024:	e3 e5       	ldi	r30, 0x53	; 83
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	80 81       	ld	r24, Z
    102a:	82 60       	ori	r24, 0x02	; 2
    102c:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_CS02);
    102e:	a3 e5       	ldi	r26, 0x53	; 83
    1030:	b0 e0       	ldi	r27, 0x00	; 0
    1032:	e3 e5       	ldi	r30, 0x53	; 83
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	80 81       	ld	r24, Z
    1038:	8e 7f       	andi	r24, 0xFE	; 254
    103a:	8c 93       	st	X, r24

}
    103c:	cf 91       	pop	r28
    103e:	df 91       	pop	r29
    1040:	08 95       	ret

00001042 <TIMER0_SetComMatchValue>:

void TIMER0_SetComMatchValue(u8 Copy_u8Value)
{
    1042:	df 93       	push	r29
    1044:	cf 93       	push	r28
    1046:	0f 92       	push	r0
    1048:	cd b7       	in	r28, 0x3d	; 61
    104a:	de b7       	in	r29, 0x3e	; 62
    104c:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Copy_u8Value;
    104e:	ec e5       	ldi	r30, 0x5C	; 92
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	89 81       	ldd	r24, Y+1	; 0x01
    1054:	80 83       	st	Z, r24
}
    1056:	0f 90       	pop	r0
    1058:	cf 91       	pop	r28
    105a:	df 91       	pop	r29
    105c:	08 95       	ret

0000105e <TIMER0_u8SetCallBack>:

u8 TIMER0_u8SetCallBack(void(*Copy_pvCallBackFunc)(void))
{
    105e:	df 93       	push	r29
    1060:	cf 93       	push	r28
    1062:	00 d0       	rcall	.+0      	; 0x1064 <TIMER0_u8SetCallBack+0x6>
    1064:	0f 92       	push	r0
    1066:	cd b7       	in	r28, 0x3d	; 61
    1068:	de b7       	in	r29, 0x3e	; 62
    106a:	9b 83       	std	Y+3, r25	; 0x03
    106c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStatus = R_OK;
    106e:	81 e0       	ldi	r24, 0x01	; 1
    1070:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pvCallBackFunc != NULL)
    1072:	8a 81       	ldd	r24, Y+2	; 0x02
    1074:	9b 81       	ldd	r25, Y+3	; 0x03
    1076:	00 97       	sbiw	r24, 0x00	; 0
    1078:	39 f0       	breq	.+14     	; 0x1088 <TIMER0_u8SetCallBack+0x2a>
	{
		TIMER0_pvCallBackFunc = Copy_pvCallBackFunc;
    107a:	8a 81       	ldd	r24, Y+2	; 0x02
    107c:	9b 81       	ldd	r25, Y+3	; 0x03
    107e:	90 93 a3 01 	sts	0x01A3, r25
    1082:	80 93 a2 01 	sts	0x01A2, r24
    1086:	02 c0       	rjmp	.+4      	; 0x108c <TIMER0_u8SetCallBack+0x2e>
	}
	else
	{
		Local_u8ErrorStatus = NULL_POINTER;
    1088:	86 e0       	ldi	r24, 0x06	; 6
    108a:	89 83       	std	Y+1, r24	; 0x01

	}


	return Local_u8ErrorStatus;
    108c:	89 81       	ldd	r24, Y+1	; 0x01

}
    108e:	0f 90       	pop	r0
    1090:	0f 90       	pop	r0
    1092:	0f 90       	pop	r0
    1094:	cf 91       	pop	r28
    1096:	df 91       	pop	r29
    1098:	08 95       	ret

0000109a <TIMER1_voidInit>:
/******************************************************************************/
void TIMER1_voidInit(void)
{
    109a:	df 93       	push	r29
    109c:	cf 93       	push	r28
    109e:	cd b7       	in	r28, 0x3d	; 61
    10a0:	de b7       	in	r29, 0x3e	; 62
	//	CLR_BIT(TCCR1A,TCCR1A_WGM10);
	//	SET_BIT(TCCR1A,TCCR1A_WGM11);
	//	SET_BIT(TCCR1B,TCCR1B_WGM12);
	//	SET_BIT(TCCR1B,TCCR1B_WGM13);
	/* Setting prescaller */
	TCCR1B &= PRESCALER_MASK;
    10a2:	ae e4       	ldi	r26, 0x4E	; 78
    10a4:	b0 e0       	ldi	r27, 0x00	; 0
    10a6:	ee e4       	ldi	r30, 0x4E	; 78
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	80 81       	ld	r24, Z
    10ac:	88 7f       	andi	r24, 0xF8	; 248
    10ae:	8c 93       	st	X, r24
	TCCR1B |= 3;
    10b0:	ae e4       	ldi	r26, 0x4E	; 78
    10b2:	b0 e0       	ldi	r27, 0x00	; 0
    10b4:	ee e4       	ldi	r30, 0x4E	; 78
    10b6:	f0 e0       	ldi	r31, 0x00	; 0
    10b8:	80 81       	ld	r24, Z
    10ba:	83 60       	ori	r24, 0x03	; 3
    10bc:	8c 93       	st	X, r24


}
    10be:	cf 91       	pop	r28
    10c0:	df 91       	pop	r29
    10c2:	08 95       	ret

000010c4 <TIMER1_voidSTOP>:

void TIMER1_voidSTOP(void)
{
    10c4:	df 93       	push	r29
    10c6:	cf 93       	push	r28
    10c8:	cd b7       	in	r28, 0x3d	; 61
    10ca:	de b7       	in	r29, 0x3e	; 62
	TCCR1B &= PRESCALER_MASK;
    10cc:	ae e4       	ldi	r26, 0x4E	; 78
    10ce:	b0 e0       	ldi	r27, 0x00	; 0
    10d0:	ee e4       	ldi	r30, 0x4E	; 78
    10d2:	f0 e0       	ldi	r31, 0x00	; 0
    10d4:	80 81       	ld	r24, Z
    10d6:	88 7f       	andi	r24, 0xF8	; 248
    10d8:	8c 93       	st	X, r24

}
    10da:	cf 91       	pop	r28
    10dc:	df 91       	pop	r29
    10de:	08 95       	ret

000010e0 <TIMER1_VoidSetTimerValue>:

void TIMER1_VoidSetTimerValue(u16 Copy_u16Value)
{
    10e0:	df 93       	push	r29
    10e2:	cf 93       	push	r28
    10e4:	00 d0       	rcall	.+0      	; 0x10e6 <TIMER1_VoidSetTimerValue+0x6>
    10e6:	cd b7       	in	r28, 0x3d	; 61
    10e8:	de b7       	in	r29, 0x3e	; 62
    10ea:	9a 83       	std	Y+2, r25	; 0x02
    10ec:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = Copy_u16Value;
    10ee:	ec e4       	ldi	r30, 0x4C	; 76
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	89 81       	ldd	r24, Y+1	; 0x01
    10f4:	9a 81       	ldd	r25, Y+2	; 0x02
    10f6:	91 83       	std	Z+1, r25	; 0x01
    10f8:	80 83       	st	Z, r24
}
    10fa:	0f 90       	pop	r0
    10fc:	0f 90       	pop	r0
    10fe:	cf 91       	pop	r28
    1100:	df 91       	pop	r29
    1102:	08 95       	ret

00001104 <Timer1_u16ReadTimerValue>:

u16 Timer1_u16ReadTimerValue(void)
{
    1104:	df 93       	push	r29
    1106:	cf 93       	push	r28
    1108:	cd b7       	in	r28, 0x3d	; 61
    110a:	de b7       	in	r29, 0x3e	; 62
	return TCNT1;
    110c:	ec e4       	ldi	r30, 0x4C	; 76
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	80 81       	ld	r24, Z
    1112:	91 81       	ldd	r25, Z+1	; 0x01
}
    1114:	cf 91       	pop	r28
    1116:	df 91       	pop	r29
    1118:	08 95       	ret

0000111a <TIMER1_voidSetICR>:
void TIMER1_voidSetICR(u16 Copt_u16TOP)
{
    111a:	df 93       	push	r29
    111c:	cf 93       	push	r28
    111e:	00 d0       	rcall	.+0      	; 0x1120 <TIMER1_voidSetICR+0x6>
    1120:	cd b7       	in	r28, 0x3d	; 61
    1122:	de b7       	in	r29, 0x3e	; 62
    1124:	9a 83       	std	Y+2, r25	; 0x02
    1126:	89 83       	std	Y+1, r24	; 0x01
	ICR1 = Copt_u16TOP;
    1128:	e6 e4       	ldi	r30, 0x46	; 70
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	89 81       	ldd	r24, Y+1	; 0x01
    112e:	9a 81       	ldd	r25, Y+2	; 0x02
    1130:	91 83       	std	Z+1, r25	; 0x01
    1132:	80 83       	st	Z, r24

}
    1134:	0f 90       	pop	r0
    1136:	0f 90       	pop	r0
    1138:	cf 91       	pop	r28
    113a:	df 91       	pop	r29
    113c:	08 95       	ret

0000113e <TIMER1_SetChannelAComMatchValue>:

void TIMER1_SetChannelAComMatchValue(u16 Copy_u16CompareMatch)
{
    113e:	df 93       	push	r29
    1140:	cf 93       	push	r28
    1142:	00 d0       	rcall	.+0      	; 0x1144 <TIMER1_SetChannelAComMatchValue+0x6>
    1144:	cd b7       	in	r28, 0x3d	; 61
    1146:	de b7       	in	r29, 0x3e	; 62
    1148:	9a 83       	std	Y+2, r25	; 0x02
    114a:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = Copy_u16CompareMatch;
    114c:	ea e4       	ldi	r30, 0x4A	; 74
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	89 81       	ldd	r24, Y+1	; 0x01
    1152:	9a 81       	ldd	r25, Y+2	; 0x02
    1154:	91 83       	std	Z+1, r25	; 0x01
    1156:	80 83       	st	Z, r24

}
    1158:	0f 90       	pop	r0
    115a:	0f 90       	pop	r0
    115c:	cf 91       	pop	r28
    115e:	df 91       	pop	r29
    1160:	08 95       	ret

00001162 <ICU_voidInit>:


void ICU_voidInit(void)
{
    1162:	df 93       	push	r29
    1164:	cf 93       	push	r28
    1166:	cd b7       	in	r28, 0x3d	; 61
    1168:	de b7       	in	r29, 0x3e	; 62
	/* Set trigger source to rising edge initially */
	SET_BIT(TCCR1B,TCCR1B_ICES1);
    116a:	ae e4       	ldi	r26, 0x4E	; 78
    116c:	b0 e0       	ldi	r27, 0x00	; 0
    116e:	ee e4       	ldi	r30, 0x4E	; 78
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	80 81       	ld	r24, Z
    1174:	80 64       	ori	r24, 0x40	; 64
    1176:	8c 93       	st	X, r24

	/* Enable Input Capture interrupt */
	SET_BIT(TIMSK,TIMSK_TICIE1);
    1178:	a9 e5       	ldi	r26, 0x59	; 89
    117a:	b0 e0       	ldi	r27, 0x00	; 0
    117c:	e9 e5       	ldi	r30, 0x59	; 89
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	80 81       	ld	r24, Z
    1182:	80 62       	ori	r24, 0x20	; 32
    1184:	8c 93       	st	X, r24
}
    1186:	cf 91       	pop	r28
    1188:	df 91       	pop	r29
    118a:	08 95       	ret

0000118c <ICU_u8SetTriggerEdge>:

u8 ICU_u8SetTriggerEdge(u8 Copy_u8Edge)
{
    118c:	df 93       	push	r29
    118e:	cf 93       	push	r28
    1190:	00 d0       	rcall	.+0      	; 0x1192 <ICU_u8SetTriggerEdge+0x6>
    1192:	cd b7       	in	r28, 0x3d	; 61
    1194:	de b7       	in	r29, 0x3e	; 62
    1196:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = R_OK;
    1198:	81 e0       	ldi	r24, 0x01	; 1
    119a:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8Edge == ICU_RISING_EDGE)
    119c:	8a 81       	ldd	r24, Y+2	; 0x02
    119e:	81 30       	cpi	r24, 0x01	; 1
    11a0:	41 f4       	brne	.+16     	; 0x11b2 <ICU_u8SetTriggerEdge+0x26>
	{
		SET_BIT(TCCR1B,TCCR1B_ICES1);
    11a2:	ae e4       	ldi	r26, 0x4E	; 78
    11a4:	b0 e0       	ldi	r27, 0x00	; 0
    11a6:	ee e4       	ldi	r30, 0x4E	; 78
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	80 81       	ld	r24, Z
    11ac:	80 64       	ori	r24, 0x40	; 64
    11ae:	8c 93       	st	X, r24
    11b0:	0c c0       	rjmp	.+24     	; 0x11ca <ICU_u8SetTriggerEdge+0x3e>
	}
	else if (Copy_u8Edge == ICU_FALLING_EDGE)
    11b2:	8a 81       	ldd	r24, Y+2	; 0x02
    11b4:	88 23       	and	r24, r24
    11b6:	41 f4       	brne	.+16     	; 0x11c8 <ICU_u8SetTriggerEdge+0x3c>
	{
		CLR_BIT(TCCR1B,TCCR1B_ICES1);
    11b8:	ae e4       	ldi	r26, 0x4E	; 78
    11ba:	b0 e0       	ldi	r27, 0x00	; 0
    11bc:	ee e4       	ldi	r30, 0x4E	; 78
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	80 81       	ld	r24, Z
    11c2:	8f 7b       	andi	r24, 0xBF	; 191
    11c4:	8c 93       	st	X, r24
    11c6:	01 c0       	rjmp	.+2      	; 0x11ca <ICU_u8SetTriggerEdge+0x3e>
	}
	else
	{
		Local_u8ErrorState = R_NOK;
    11c8:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    11ca:	89 81       	ldd	r24, Y+1	; 0x01
}
    11cc:	0f 90       	pop	r0
    11ce:	0f 90       	pop	r0
    11d0:	cf 91       	pop	r28
    11d2:	df 91       	pop	r29
    11d4:	08 95       	ret

000011d6 <ICU_voidEnableInterrupt>:

void ICU_voidEnableInterrupt(void)
{
    11d6:	df 93       	push	r29
    11d8:	cf 93       	push	r28
    11da:	cd b7       	in	r28, 0x3d	; 61
    11dc:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TIMSK_TICIE1);
    11de:	a9 e5       	ldi	r26, 0x59	; 89
    11e0:	b0 e0       	ldi	r27, 0x00	; 0
    11e2:	e9 e5       	ldi	r30, 0x59	; 89
    11e4:	f0 e0       	ldi	r31, 0x00	; 0
    11e6:	80 81       	ld	r24, Z
    11e8:	80 62       	ori	r24, 0x20	; 32
    11ea:	8c 93       	st	X, r24
}
    11ec:	cf 91       	pop	r28
    11ee:	df 91       	pop	r29
    11f0:	08 95       	ret

000011f2 <ICU_voidDisableInterrupt>:
void ICU_voidDisableInterrupt(void)
{
    11f2:	df 93       	push	r29
    11f4:	cf 93       	push	r28
    11f6:	cd b7       	in	r28, 0x3d	; 61
    11f8:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TIMSK_TICIE1);
    11fa:	a9 e5       	ldi	r26, 0x59	; 89
    11fc:	b0 e0       	ldi	r27, 0x00	; 0
    11fe:	e9 e5       	ldi	r30, 0x59	; 89
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	80 81       	ld	r24, Z
    1204:	8f 7d       	andi	r24, 0xDF	; 223
    1206:	8c 93       	st	X, r24
}
    1208:	cf 91       	pop	r28
    120a:	df 91       	pop	r29
    120c:	08 95       	ret

0000120e <ICU_u16ReadInputCapture>:

u16 ICU_u16ReadInputCapture(void)
{
    120e:	df 93       	push	r29
    1210:	cf 93       	push	r28
    1212:	cd b7       	in	r28, 0x3d	; 61
    1214:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    1216:	e6 e4       	ldi	r30, 0x46	; 70
    1218:	f0 e0       	ldi	r31, 0x00	; 0
    121a:	80 81       	ld	r24, Z
    121c:	91 81       	ldd	r25, Z+1	; 0x01
}
    121e:	cf 91       	pop	r28
    1220:	df 91       	pop	r29
    1222:	08 95       	ret

00001224 <ICU_u8GetInputCaptureFlag>:

u8 ICU_u8GetInputCaptureFlag (void)
{
    1224:	df 93       	push	r29
    1226:	cf 93       	push	r28
    1228:	cd b7       	in	r28, 0x3d	; 61
    122a:	de b7       	in	r29, 0x3e	; 62
	return 	GET_BIT(TIFR, TIFR_ICF1);
    122c:	e8 e5       	ldi	r30, 0x58	; 88
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	80 81       	ld	r24, Z
    1232:	82 95       	swap	r24
    1234:	86 95       	lsr	r24
    1236:	87 70       	andi	r24, 0x07	; 7
    1238:	81 70       	andi	r24, 0x01	; 1

}
    123a:	cf 91       	pop	r28
    123c:	df 91       	pop	r29
    123e:	08 95       	ret

00001240 <ICU_u8ClearInputCaptureFlag>:
void ICU_u8ClearInputCaptureFlag (void)
{
    1240:	df 93       	push	r29
    1242:	cf 93       	push	r28
    1244:	cd b7       	in	r28, 0x3d	; 61
    1246:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIFR, TIFR_ICF1);
    1248:	a8 e5       	ldi	r26, 0x58	; 88
    124a:	b0 e0       	ldi	r27, 0x00	; 0
    124c:	e8 e5       	ldi	r30, 0x58	; 88
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	80 81       	ld	r24, Z
    1252:	80 62       	ori	r24, 0x20	; 32
    1254:	8c 93       	st	X, r24
}
    1256:	cf 91       	pop	r28
    1258:	df 91       	pop	r29
    125a:	08 95       	ret

0000125c <ICU_voidNoiseCanceler>:

void ICU_voidNoiseCanceler(void)
{
    125c:	df 93       	push	r29
    125e:	cf 93       	push	r28
    1260:	cd b7       	in	r28, 0x3d	; 61
    1262:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR1B, TCCR1B_ICNC1);
    1264:	ae e4       	ldi	r26, 0x4E	; 78
    1266:	b0 e0       	ldi	r27, 0x00	; 0
    1268:	ee e4       	ldi	r30, 0x4E	; 78
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	80 81       	ld	r24, Z
    126e:	80 68       	ori	r24, 0x80	; 128
    1270:	8c 93       	st	X, r24
}
    1272:	cf 91       	pop	r28
    1274:	df 91       	pop	r29
    1276:	08 95       	ret

00001278 <ICU_u8SetCallBack>:

u8 ICU_u8SetCallBack(void (*Copy_pvCallBackFunc)(void))
{
    1278:	df 93       	push	r29
    127a:	cf 93       	push	r28
    127c:	00 d0       	rcall	.+0      	; 0x127e <ICU_u8SetCallBack+0x6>
    127e:	0f 92       	push	r0
    1280:	cd b7       	in	r28, 0x3d	; 61
    1282:	de b7       	in	r29, 0x3e	; 62
    1284:	9b 83       	std	Y+3, r25	; 0x03
    1286:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = R_OK;
    1288:	81 e0       	ldi	r24, 0x01	; 1
    128a:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pvCallBackFunc != NULL)
    128c:	8a 81       	ldd	r24, Y+2	; 0x02
    128e:	9b 81       	ldd	r25, Y+3	; 0x03
    1290:	00 97       	sbiw	r24, 0x00	; 0
    1292:	39 f0       	breq	.+14     	; 0x12a2 <ICU_u8SetCallBack+0x2a>
	{
		ICU_pvCallBackFunc = Copy_pvCallBackFunc;
    1294:	8a 81       	ldd	r24, Y+2	; 0x02
    1296:	9b 81       	ldd	r25, Y+3	; 0x03
    1298:	90 93 a5 01 	sts	0x01A5, r25
    129c:	80 93 a4 01 	sts	0x01A4, r24
    12a0:	02 c0       	rjmp	.+4      	; 0x12a6 <ICU_u8SetCallBack+0x2e>
	}
	else
	{
		Local_u8ErrorState = NULL_POINTER;
    12a2:	86 e0       	ldi	r24, 0x06	; 6
    12a4:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    12a6:	89 81       	ldd	r24, Y+1	; 0x01
}
    12a8:	0f 90       	pop	r0
    12aa:	0f 90       	pop	r0
    12ac:	0f 90       	pop	r0
    12ae:	cf 91       	pop	r28
    12b0:	df 91       	pop	r29
    12b2:	08 95       	ret

000012b4 <__vector_10>:

/********************************* ISR ***********************************/

void __vector_10 (void) __attribute__((signal));
void __vector_10 (void)
{
    12b4:	1f 92       	push	r1
    12b6:	0f 92       	push	r0
    12b8:	0f b6       	in	r0, 0x3f	; 63
    12ba:	0f 92       	push	r0
    12bc:	11 24       	eor	r1, r1
    12be:	2f 93       	push	r18
    12c0:	3f 93       	push	r19
    12c2:	4f 93       	push	r20
    12c4:	5f 93       	push	r21
    12c6:	6f 93       	push	r22
    12c8:	7f 93       	push	r23
    12ca:	8f 93       	push	r24
    12cc:	9f 93       	push	r25
    12ce:	af 93       	push	r26
    12d0:	bf 93       	push	r27
    12d2:	ef 93       	push	r30
    12d4:	ff 93       	push	r31
    12d6:	df 93       	push	r29
    12d8:	cf 93       	push	r28
    12da:	cd b7       	in	r28, 0x3d	; 61
    12dc:	de b7       	in	r29, 0x3e	; 62
	if(TIMER0_pvCallBackFunc != NULL)
    12de:	80 91 a2 01 	lds	r24, 0x01A2
    12e2:	90 91 a3 01 	lds	r25, 0x01A3
    12e6:	00 97       	sbiw	r24, 0x00	; 0
    12e8:	29 f0       	breq	.+10     	; 0x12f4 <__vector_10+0x40>
	{
		TIMER0_pvCallBackFunc();
    12ea:	e0 91 a2 01 	lds	r30, 0x01A2
    12ee:	f0 91 a3 01 	lds	r31, 0x01A3
    12f2:	09 95       	icall
	}
}
    12f4:	cf 91       	pop	r28
    12f6:	df 91       	pop	r29
    12f8:	ff 91       	pop	r31
    12fa:	ef 91       	pop	r30
    12fc:	bf 91       	pop	r27
    12fe:	af 91       	pop	r26
    1300:	9f 91       	pop	r25
    1302:	8f 91       	pop	r24
    1304:	7f 91       	pop	r23
    1306:	6f 91       	pop	r22
    1308:	5f 91       	pop	r21
    130a:	4f 91       	pop	r20
    130c:	3f 91       	pop	r19
    130e:	2f 91       	pop	r18
    1310:	0f 90       	pop	r0
    1312:	0f be       	out	0x3f, r0	; 63
    1314:	0f 90       	pop	r0
    1316:	1f 90       	pop	r1
    1318:	18 95       	reti

0000131a <__vector_6>:
/********************** ICU_ISR  *****************************************/
void __vector_6 (void) __attribute__((signal));
void __vector_6 (void)
{
    131a:	1f 92       	push	r1
    131c:	0f 92       	push	r0
    131e:	0f b6       	in	r0, 0x3f	; 63
    1320:	0f 92       	push	r0
    1322:	11 24       	eor	r1, r1
    1324:	2f 93       	push	r18
    1326:	3f 93       	push	r19
    1328:	4f 93       	push	r20
    132a:	5f 93       	push	r21
    132c:	6f 93       	push	r22
    132e:	7f 93       	push	r23
    1330:	8f 93       	push	r24
    1332:	9f 93       	push	r25
    1334:	af 93       	push	r26
    1336:	bf 93       	push	r27
    1338:	ef 93       	push	r30
    133a:	ff 93       	push	r31
    133c:	df 93       	push	r29
    133e:	cf 93       	push	r28
    1340:	cd b7       	in	r28, 0x3d	; 61
    1342:	de b7       	in	r29, 0x3e	; 62
	if(ICU_pvCallBackFunc != NULL)
    1344:	80 91 a4 01 	lds	r24, 0x01A4
    1348:	90 91 a5 01 	lds	r25, 0x01A5
    134c:	00 97       	sbiw	r24, 0x00	; 0
    134e:	29 f0       	breq	.+10     	; 0x135a <__vector_6+0x40>
	{
		ICU_pvCallBackFunc();
    1350:	e0 91 a4 01 	lds	r30, 0x01A4
    1354:	f0 91 a5 01 	lds	r31, 0x01A5
    1358:	09 95       	icall
	}
}
    135a:	cf 91       	pop	r28
    135c:	df 91       	pop	r29
    135e:	ff 91       	pop	r31
    1360:	ef 91       	pop	r30
    1362:	bf 91       	pop	r27
    1364:	af 91       	pop	r26
    1366:	9f 91       	pop	r25
    1368:	8f 91       	pop	r24
    136a:	7f 91       	pop	r23
    136c:	6f 91       	pop	r22
    136e:	5f 91       	pop	r21
    1370:	4f 91       	pop	r20
    1372:	3f 91       	pop	r19
    1374:	2f 91       	pop	r18
    1376:	0f 90       	pop	r0
    1378:	0f be       	out	0x3f, r0	; 63
    137a:	0f 90       	pop	r0
    137c:	1f 90       	pop	r1
    137e:	18 95       	reti

00001380 <MTIMER0_voidInit>:
#elif TIMER0_MODE == TIMER0_CTC_MODE
static u32 	CTC_u32NoOfCompMatch;
#endif
/**************************** Timer0 Init *****************************/
void MTIMER0_voidInit(void)
{
    1380:	df 93       	push	r29
    1382:	cf 93       	push	r28
    1384:	cd b7       	in	r28, 0x3d	; 61
    1386:	de b7       	in	r29, 0x3e	; 62
	/* Enable CTC INT */
	SET_BIT(TIMSK,TIMSK_OCIE0);

	#endif

}
    1388:	cf 91       	pop	r28
    138a:	df 91       	pop	r29
    138c:	08 95       	ret

0000138e <MTIMER0_enumSetTime_ms>:

/**************************** End Timer0 Init *****************************/

/********************** Timer0 Set Time in ms *****************************/
error_state_t MTIMER0_enumSetTime_ms(u32 Copy_u32DesiredTime, void(*Copy_pvCallBackFunc)(void))
{
    138e:	df 93       	push	r29
    1390:	cf 93       	push	r28
    1392:	cd b7       	in	r28, 0x3d	; 61
    1394:	de b7       	in	r29, 0x3e	; 62
    1396:	63 97       	sbiw	r28, 0x13	; 19
    1398:	0f b6       	in	r0, 0x3f	; 63
    139a:	f8 94       	cli
    139c:	de bf       	out	0x3e, r29	; 62
    139e:	0f be       	out	0x3f, r0	; 63
    13a0:	cd bf       	out	0x3d, r28	; 61
    13a2:	6e 87       	std	Y+14, r22	; 0x0e
    13a4:	7f 87       	std	Y+15, r23	; 0x0f
    13a6:	88 8b       	std	Y+16, r24	; 0x10
    13a8:	99 8b       	std	Y+17, r25	; 0x11
    13aa:	5b 8b       	std	Y+19, r21	; 0x13
    13ac:	4a 8b       	std	Y+18, r20	; 0x12
	error_state_t Local_ErrorState = TIMER0_OK;
    13ae:	82 e0       	ldi	r24, 0x02	; 2
    13b0:	8d 87       	std	Y+13, r24	; 0x0d

	//initialize callback function globally
	TIMER0_pvCallBackNotificationFunc = Copy_pvCallBackFunc;
    13b2:	8a 89       	ldd	r24, Y+18	; 0x12
    13b4:	9b 89       	ldd	r25, Y+19	; 0x13
    13b6:	90 93 a7 01 	sts	0x01A7, r25
    13ba:	80 93 a6 01 	sts	0x01A6, r24
	/* Get prescaller value */
	f32 Local_u32PrescDivFact = (f32)TIMER0_PRESCALLER_ARR[TIMER0_PRESCALLER_SELEC - 1];
    13be:	80 91 72 01 	lds	r24, 0x0172
    13c2:	90 91 73 01 	lds	r25, 0x0173
    13c6:	cc 01       	movw	r24, r24
    13c8:	a0 e0       	ldi	r26, 0x00	; 0
    13ca:	b0 e0       	ldi	r27, 0x00	; 0
    13cc:	bc 01       	movw	r22, r24
    13ce:	cd 01       	movw	r24, r26
    13d0:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    13d4:	dc 01       	movw	r26, r24
    13d6:	cb 01       	movw	r24, r22
    13d8:	89 87       	std	Y+9, r24	; 0x09
    13da:	9a 87       	std	Y+10, r25	; 0x0a
    13dc:	ab 87       	std	Y+11, r26	; 0x0b
    13de:	bc 87       	std	Y+12, r27	; 0x0c
	// calculate total tick time in Micro Second
	f32 Local_u32TickTime = Local_u32PrescDivFact / CRYSTAL_FREQ;
    13e0:	69 85       	ldd	r22, Y+9	; 0x09
    13e2:	7a 85       	ldd	r23, Y+10	; 0x0a
    13e4:	8b 85       	ldd	r24, Y+11	; 0x0b
    13e6:	9c 85       	ldd	r25, Y+12	; 0x0c
    13e8:	20 e0       	ldi	r18, 0x00	; 0
    13ea:	30 e0       	ldi	r19, 0x00	; 0
    13ec:	40 e8       	ldi	r20, 0x80	; 128
    13ee:	51 e4       	ldi	r21, 0x41	; 65
    13f0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    13f4:	dc 01       	movw	r26, r24
    13f6:	cb 01       	movw	r24, r22
    13f8:	8d 83       	std	Y+5, r24	; 0x05
    13fa:	9e 83       	std	Y+6, r25	; 0x06
    13fc:	af 83       	std	Y+7, r26	; 0x07
    13fe:	b8 87       	std	Y+8, r27	; 0x08
	// Calculate total tick number
	u32 Local_u32TotalTicks = (Copy_u32DesiredTime *1000 ) / Local_u32TickTime;
    1400:	8e 85       	ldd	r24, Y+14	; 0x0e
    1402:	9f 85       	ldd	r25, Y+15	; 0x0f
    1404:	a8 89       	ldd	r26, Y+16	; 0x10
    1406:	b9 89       	ldd	r27, Y+17	; 0x11
    1408:	28 ee       	ldi	r18, 0xE8	; 232
    140a:	33 e0       	ldi	r19, 0x03	; 3
    140c:	40 e0       	ldi	r20, 0x00	; 0
    140e:	50 e0       	ldi	r21, 0x00	; 0
    1410:	bc 01       	movw	r22, r24
    1412:	cd 01       	movw	r24, r26
    1414:	0e 94 9b 23 	call	0x4736	; 0x4736 <__mulsi3>
    1418:	dc 01       	movw	r26, r24
    141a:	cb 01       	movw	r24, r22
    141c:	bc 01       	movw	r22, r24
    141e:	cd 01       	movw	r24, r26
    1420:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    1424:	dc 01       	movw	r26, r24
    1426:	cb 01       	movw	r24, r22
    1428:	bc 01       	movw	r22, r24
    142a:	cd 01       	movw	r24, r26
    142c:	2d 81       	ldd	r18, Y+5	; 0x05
    142e:	3e 81       	ldd	r19, Y+6	; 0x06
    1430:	4f 81       	ldd	r20, Y+7	; 0x07
    1432:	58 85       	ldd	r21, Y+8	; 0x08
    1434:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1438:	dc 01       	movw	r26, r24
    143a:	cb 01       	movw	r24, r22
    143c:	bc 01       	movw	r22, r24
    143e:	cd 01       	movw	r24, r26
    1440:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1444:	dc 01       	movw	r26, r24
    1446:	cb 01       	movw	r24, r22
    1448:	89 83       	std	Y+1, r24	; 0x01
    144a:	9a 83       	std	Y+2, r25	; 0x02
    144c:	ab 83       	std	Y+3, r26	; 0x03
    144e:	bc 83       	std	Y+4, r27	; 0x04
	CTC_u32NoOfCompMatch = Local_u32TotalTicks /Local_u8DivisionValue;
	OCR0 = Local_u8DivisionValue ;

	#endif
	
	return Local_ErrorState;
    1450:	8d 85       	ldd	r24, Y+13	; 0x0d
}
    1452:	63 96       	adiw	r28, 0x13	; 19
    1454:	0f b6       	in	r0, 0x3f	; 63
    1456:	f8 94       	cli
    1458:	de bf       	out	0x3e, r29	; 62
    145a:	0f be       	out	0x3f, r0	; 63
    145c:	cd bf       	out	0x3d, r28	; 61
    145e:	cf 91       	pop	r28
    1460:	df 91       	pop	r29
    1462:	08 95       	ret

00001464 <MTIMER0_enumStart>:

/********************* End Timer0 Set Time in ms **************************/

/*********************   Timer0 Start   **************************/
error_state_t MTIMER0_enumStart(void)
{
    1464:	df 93       	push	r29
    1466:	cf 93       	push	r28
    1468:	0f 92       	push	r0
    146a:	cd b7       	in	r28, 0x3d	; 61
    146c:	de b7       	in	r29, 0x3e	; 62
	error_state_t Local_ErrorState = TIMER0_OK;
    146e:	82 e0       	ldi	r24, 0x02	; 2
    1470:	89 83       	std	Y+1, r24	; 0x01
	TCCR0 &= TIMER0_PRESCALLER_MASK;
    1472:	a3 e5       	ldi	r26, 0x53	; 83
    1474:	b0 e0       	ldi	r27, 0x00	; 0
    1476:	e3 e5       	ldi	r30, 0x53	; 83
    1478:	f0 e0       	ldi	r31, 0x00	; 0
    147a:	80 81       	ld	r24, Z
    147c:	88 7f       	andi	r24, 0xF8	; 248
    147e:	8c 93       	st	X, r24
	TCCR0 |= TIMER0_PRESCALLER_SELEC;
    1480:	a3 e5       	ldi	r26, 0x53	; 83
    1482:	b0 e0       	ldi	r27, 0x00	; 0
    1484:	e3 e5       	ldi	r30, 0x53	; 83
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	80 81       	ld	r24, Z
    148a:	83 60       	ori	r24, 0x03	; 3
    148c:	8c 93       	st	X, r24
	return Local_ErrorState;
    148e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1490:	0f 90       	pop	r0
    1492:	cf 91       	pop	r28
    1494:	df 91       	pop	r29
    1496:	08 95       	ret

00001498 <MTIMER0_enumStop>:
/********************* End Timer0 Start **************************/

/*********************   Timer0 Stop   **************************/
error_state_t MTIMER0_enumStop(void)
{
    1498:	df 93       	push	r29
    149a:	cf 93       	push	r28
    149c:	0f 92       	push	r0
    149e:	cd b7       	in	r28, 0x3d	; 61
    14a0:	de b7       	in	r29, 0x3e	; 62
	error_state_t Local_ErrorState = TIMER0_OK;
    14a2:	82 e0       	ldi	r24, 0x02	; 2
    14a4:	89 83       	std	Y+1, r24	; 0x01
	TCCR0 &= TIMER0_PRESCALLER_MASK;
    14a6:	a3 e5       	ldi	r26, 0x53	; 83
    14a8:	b0 e0       	ldi	r27, 0x00	; 0
    14aa:	e3 e5       	ldi	r30, 0x53	; 83
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	80 81       	ld	r24, Z
    14b0:	88 7f       	andi	r24, 0xF8	; 248
    14b2:	8c 93       	st	X, r24
	return Local_ErrorState;
    14b4:	89 81       	ldd	r24, Y+1	; 0x01
}
    14b6:	0f 90       	pop	r0
    14b8:	cf 91       	pop	r28
    14ba:	df 91       	pop	r29
    14bc:	08 95       	ret

000014be <MCOUNTER0_voidCounterInit>:
/********************* End Timer0 Stop **************************/

/************************ Counter 0 ****************************/
void MCOUNTER0_voidCounterInit(void)
{
    14be:	df 93       	push	r29
    14c0:	cf 93       	push	r28
    14c2:	cd b7       	in	r28, 0x3d	; 61
    14c4:	de b7       	in	r29, 0x3e	; 62
	#if   COUNTER_0_MODE == COUNTER_0_FALLING_EDGE_MODE
		TCCR0 &= TIMER0_PRESCALLER_MASK;
    14c6:	a3 e5       	ldi	r26, 0x53	; 83
    14c8:	b0 e0       	ldi	r27, 0x00	; 0
    14ca:	e3 e5       	ldi	r30, 0x53	; 83
    14cc:	f0 e0       	ldi	r31, 0x00	; 0
    14ce:	80 81       	ld	r24, Z
    14d0:	88 7f       	andi	r24, 0xF8	; 248
    14d2:	8c 93       	st	X, r24
		TCCR0 |= COUNTER_FALLING_EDGE;						
    14d4:	a3 e5       	ldi	r26, 0x53	; 83
    14d6:	b0 e0       	ldi	r27, 0x00	; 0
    14d8:	e3 e5       	ldi	r30, 0x53	; 83
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	80 81       	ld	r24, Z
    14de:	86 60       	ori	r24, 0x06	; 6
    14e0:	8c 93       	st	X, r24
	#elif COUNTER_0_MODE == COUNTER_0_RISING_EDGE_MODE
		TCCR0 &= TIMER0_PRESCALLER_MASK;
		TCCR0 |= COUNTER_RISING_EDGE;
	#endif
}
    14e2:	cf 91       	pop	r28
    14e4:	df 91       	pop	r29
    14e6:	08 95       	ret

000014e8 <MCOUNTER0_u8GetCounterValue>:

u8 MCOUNTER0_u8GetCounterValue(void){
    14e8:	df 93       	push	r29
    14ea:	cf 93       	push	r28
    14ec:	cd b7       	in	r28, 0x3d	; 61
    14ee:	de b7       	in	r29, 0x3e	; 62

	return TCNT0;
    14f0:	e2 e5       	ldi	r30, 0x52	; 82
    14f2:	f0 e0       	ldi	r31, 0x00	; 0
    14f4:	80 81       	ld	r24, Z
}
    14f6:	cf 91       	pop	r28
    14f8:	df 91       	pop	r29
    14fa:	08 95       	ret

000014fc <MTIMER0_u8GetTimerValue>:


u8   MTIMER0_u8GetTimerValue(void)
{
    14fc:	df 93       	push	r29
    14fe:	cf 93       	push	r28
    1500:	cd b7       	in	r28, 0x3d	; 61
    1502:	de b7       	in	r29, 0x3e	; 62
	return TCNT0;
    1504:	e2 e5       	ldi	r30, 0x52	; 82
    1506:	f0 e0       	ldi	r31, 0x00	; 0
    1508:	80 81       	ld	r24, Z
}
    150a:	cf 91       	pop	r28
    150c:	df 91       	pop	r29
    150e:	08 95       	ret

00001510 <MTIMER0_voidSetTimerValue>:
void MTIMER0_voidSetTimerValue(u8 Copy_u8TimerValue)
{
    1510:	df 93       	push	r29
    1512:	cf 93       	push	r28
    1514:	0f 92       	push	r0
    1516:	cd b7       	in	r28, 0x3d	; 61
    1518:	de b7       	in	r29, 0x3e	; 62
    151a:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Copy_u8TimerValue;
    151c:	e2 e5       	ldi	r30, 0x52	; 82
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	89 81       	ldd	r24, Y+1	; 0x01
    1522:	80 83       	st	Z, r24
}
    1524:	0f 90       	pop	r0
    1526:	cf 91       	pop	r28
    1528:	df 91       	pop	r29
    152a:	08 95       	ret

0000152c <MTIMER0_u32GetCounts>:

u32 MTIMER0_u32GetCounts(void)
{
    152c:	df 93       	push	r29
    152e:	cf 93       	push	r28
    1530:	00 d0       	rcall	.+0      	; 0x1532 <MTIMER0_u32GetCounts+0x6>
    1532:	00 d0       	rcall	.+0      	; 0x1534 <MTIMER0_u32GetCounts+0x8>
    1534:	cd b7       	in	r28, 0x3d	; 61
    1536:	de b7       	in	r29, 0x3e	; 62
	TCNT0 =0;
    1538:	e2 e5       	ldi	r30, 0x52	; 82
    153a:	f0 e0       	ldi	r31, 0x00	; 0
    153c:	10 82       	st	Z, r1
	u32 count = TCNT0 + current_ov_count*256;
    153e:	e2 e5       	ldi	r30, 0x52	; 82
    1540:	f0 e0       	ldi	r31, 0x00	; 0
    1542:	80 81       	ld	r24, Z
    1544:	28 2f       	mov	r18, r24
    1546:	30 e0       	ldi	r19, 0x00	; 0
    1548:	40 e0       	ldi	r20, 0x00	; 0
    154a:	50 e0       	ldi	r21, 0x00	; 0
    154c:	80 91 a8 01 	lds	r24, 0x01A8
    1550:	90 91 a9 01 	lds	r25, 0x01A9
    1554:	a0 91 aa 01 	lds	r26, 0x01AA
    1558:	b0 91 ab 01 	lds	r27, 0x01AB
    155c:	ba 2f       	mov	r27, r26
    155e:	a9 2f       	mov	r26, r25
    1560:	98 2f       	mov	r25, r24
    1562:	88 27       	eor	r24, r24
    1564:	82 0f       	add	r24, r18
    1566:	93 1f       	adc	r25, r19
    1568:	a4 1f       	adc	r26, r20
    156a:	b5 1f       	adc	r27, r21
    156c:	89 83       	std	Y+1, r24	; 0x01
    156e:	9a 83       	std	Y+2, r25	; 0x02
    1570:	ab 83       	std	Y+3, r26	; 0x03
    1572:	bc 83       	std	Y+4, r27	; 0x04
	return count;
    1574:	89 81       	ldd	r24, Y+1	; 0x01
    1576:	9a 81       	ldd	r25, Y+2	; 0x02
    1578:	ab 81       	ldd	r26, Y+3	; 0x03
    157a:	bc 81       	ldd	r27, Y+4	; 0x04

}
    157c:	bc 01       	movw	r22, r24
    157e:	cd 01       	movw	r24, r26
    1580:	0f 90       	pop	r0
    1582:	0f 90       	pop	r0
    1584:	0f 90       	pop	r0
    1586:	0f 90       	pop	r0
    1588:	cf 91       	pop	r28
    158a:	df 91       	pop	r29
    158c:	08 95       	ret

0000158e <MTimer0_voidEnableInt>:

void MTimer0_voidEnableInt(u8 INT_ID)
{
    158e:	df 93       	push	r29
    1590:	cf 93       	push	r28
    1592:	00 d0       	rcall	.+0      	; 0x1594 <MTimer0_voidEnableInt+0x6>
    1594:	0f 92       	push	r0
    1596:	cd b7       	in	r28, 0x3d	; 61
    1598:	de b7       	in	r29, 0x3e	; 62
    159a:	89 83       	std	Y+1, r24	; 0x01
	switch(INT_ID)
    159c:	89 81       	ldd	r24, Y+1	; 0x01
    159e:	28 2f       	mov	r18, r24
    15a0:	30 e0       	ldi	r19, 0x00	; 0
    15a2:	3b 83       	std	Y+3, r19	; 0x03
    15a4:	2a 83       	std	Y+2, r18	; 0x02
    15a6:	8a 81       	ldd	r24, Y+2	; 0x02
    15a8:	9b 81       	ldd	r25, Y+3	; 0x03
    15aa:	00 97       	sbiw	r24, 0x00	; 0
    15ac:	31 f0       	breq	.+12     	; 0x15ba <MTimer0_voidEnableInt+0x2c>
    15ae:	2a 81       	ldd	r18, Y+2	; 0x02
    15b0:	3b 81       	ldd	r19, Y+3	; 0x03
    15b2:	21 30       	cpi	r18, 0x01	; 1
    15b4:	31 05       	cpc	r19, r1
    15b6:	49 f0       	breq	.+18     	; 0x15ca <MTimer0_voidEnableInt+0x3c>
    15b8:	0f c0       	rjmp	.+30     	; 0x15d8 <MTimer0_voidEnableInt+0x4a>
	{
	case INT_OV_MODE:
		SET_BIT(TIMSK, TIMSK_TOIE0);
    15ba:	a9 e5       	ldi	r26, 0x59	; 89
    15bc:	b0 e0       	ldi	r27, 0x00	; 0
    15be:	e9 e5       	ldi	r30, 0x59	; 89
    15c0:	f0 e0       	ldi	r31, 0x00	; 0
    15c2:	80 81       	ld	r24, Z
    15c4:	81 60       	ori	r24, 0x01	; 1
    15c6:	8c 93       	st	X, r24
    15c8:	07 c0       	rjmp	.+14     	; 0x15d8 <MTimer0_voidEnableInt+0x4a>

		break;
	case INT_COMP_MODE:
		SET_BIT(TIMSK, TIMSK_OCIE0);
    15ca:	a9 e5       	ldi	r26, 0x59	; 89
    15cc:	b0 e0       	ldi	r27, 0x00	; 0
    15ce:	e9 e5       	ldi	r30, 0x59	; 89
    15d0:	f0 e0       	ldi	r31, 0x00	; 0
    15d2:	80 81       	ld	r24, Z
    15d4:	82 60       	ori	r24, 0x02	; 2
    15d6:	8c 93       	st	X, r24
		break;

	}
}
    15d8:	0f 90       	pop	r0
    15da:	0f 90       	pop	r0
    15dc:	0f 90       	pop	r0
    15de:	cf 91       	pop	r28
    15e0:	df 91       	pop	r29
    15e2:	08 95       	ret

000015e4 <MTimer0_voidDisableInt>:


void MTimer0_voidDisableInt(u8 INT_ID)
{
    15e4:	df 93       	push	r29
    15e6:	cf 93       	push	r28
    15e8:	00 d0       	rcall	.+0      	; 0x15ea <MTimer0_voidDisableInt+0x6>
    15ea:	0f 92       	push	r0
    15ec:	cd b7       	in	r28, 0x3d	; 61
    15ee:	de b7       	in	r29, 0x3e	; 62
    15f0:	89 83       	std	Y+1, r24	; 0x01
	switch(INT_ID)
    15f2:	89 81       	ldd	r24, Y+1	; 0x01
    15f4:	28 2f       	mov	r18, r24
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	3b 83       	std	Y+3, r19	; 0x03
    15fa:	2a 83       	std	Y+2, r18	; 0x02
    15fc:	8a 81       	ldd	r24, Y+2	; 0x02
    15fe:	9b 81       	ldd	r25, Y+3	; 0x03
    1600:	00 97       	sbiw	r24, 0x00	; 0
    1602:	31 f0       	breq	.+12     	; 0x1610 <MTimer0_voidDisableInt+0x2c>
    1604:	2a 81       	ldd	r18, Y+2	; 0x02
    1606:	3b 81       	ldd	r19, Y+3	; 0x03
    1608:	21 30       	cpi	r18, 0x01	; 1
    160a:	31 05       	cpc	r19, r1
    160c:	49 f0       	breq	.+18     	; 0x1620 <MTimer0_voidDisableInt+0x3c>
    160e:	0f c0       	rjmp	.+30     	; 0x162e <MTimer0_voidDisableInt+0x4a>
	{
	case INT_OV_MODE:
		CLR_BIT(TIMSK, TIMSK_TOIE0);
    1610:	a9 e5       	ldi	r26, 0x59	; 89
    1612:	b0 e0       	ldi	r27, 0x00	; 0
    1614:	e9 e5       	ldi	r30, 0x59	; 89
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	80 81       	ld	r24, Z
    161a:	8e 7f       	andi	r24, 0xFE	; 254
    161c:	8c 93       	st	X, r24
    161e:	07 c0       	rjmp	.+14     	; 0x162e <MTimer0_voidDisableInt+0x4a>

		break;
	case INT_COMP_MODE:
		CLR_BIT(TIMSK, TIMSK_OCIE0);
    1620:	a9 e5       	ldi	r26, 0x59	; 89
    1622:	b0 e0       	ldi	r27, 0x00	; 0
    1624:	e9 e5       	ldi	r30, 0x59	; 89
    1626:	f0 e0       	ldi	r31, 0x00	; 0
    1628:	80 81       	ld	r24, Z
    162a:	8d 7f       	andi	r24, 0xFD	; 253
    162c:	8c 93       	st	X, r24
		break;

	}
}
    162e:	0f 90       	pop	r0
    1630:	0f 90       	pop	r0
    1632:	0f 90       	pop	r0
    1634:	cf 91       	pop	r28
    1636:	df 91       	pop	r29
    1638:	08 95       	ret

0000163a <MPWM0_enumInit>:
/******************************************************************************************/
/*************************************** PWM FUNCTION *************************************/
/******************************************************************************************/

error_state_t MPWM0_enumInit(void)
{
    163a:	df 93       	push	r29
    163c:	cf 93       	push	r28
    163e:	0f 92       	push	r0
    1640:	cd b7       	in	r28, 0x3d	; 61
    1642:	de b7       	in	r29, 0x3e	; 62
	error_state_t Local_ErrorState = TIMER0_OK;
    1644:	82 e0       	ldi	r24, 0x02	; 2
    1646:	89 83       	std	Y+1, r24	; 0x01
	#if TIMER0_MODE == TIMER0_FAST_PWM
	SET_BIT(TCCR0,TCCR0_WGM00);
    1648:	a3 e5       	ldi	r26, 0x53	; 83
    164a:	b0 e0       	ldi	r27, 0x00	; 0
    164c:	e3 e5       	ldi	r30, 0x53	; 83
    164e:	f0 e0       	ldi	r31, 0x00	; 0
    1650:	80 81       	ld	r24, Z
    1652:	80 64       	ori	r24, 0x40	; 64
    1654:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_WGM01);
    1656:	a3 e5       	ldi	r26, 0x53	; 83
    1658:	b0 e0       	ldi	r27, 0x00	; 0
    165a:	e3 e5       	ldi	r30, 0x53	; 83
    165c:	f0 e0       	ldi	r31, 0x00	; 0
    165e:	80 81       	ld	r24, Z
    1660:	88 60       	ori	r24, 0x08	; 8
    1662:	8c 93       	st	X, r24

	switch (OC0_MODE)
		{
			case OC0_DISCONNECTED:
			CLR_BIT(TCCR0,TCCR0_COM00);
    1664:	a3 e5       	ldi	r26, 0x53	; 83
    1666:	b0 e0       	ldi	r27, 0x00	; 0
    1668:	e3 e5       	ldi	r30, 0x53	; 83
    166a:	f0 e0       	ldi	r31, 0x00	; 0
    166c:	80 81       	ld	r24, Z
    166e:	8f 7e       	andi	r24, 0xEF	; 239
    1670:	8c 93       	st	X, r24
			CLR_BIT(TCCR0,TCCR0_COM01);
    1672:	a3 e5       	ldi	r26, 0x53	; 83
    1674:	b0 e0       	ldi	r27, 0x00	; 0
    1676:	e3 e5       	ldi	r30, 0x53	; 83
    1678:	f0 e0       	ldi	r31, 0x00	; 0
    167a:	80 81       	ld	r24, Z
    167c:	8f 7d       	andi	r24, 0xDF	; 223
    167e:	8c 93       	st	X, r24
		SET_BIT(TCCR0,TCCR0_COM00);
		SET_BIT(TCCR0,TCCR0_COM01);
	}
	else if (FAST_PWM_MODE == FAST_PWM_NON_INVERTED_MODE)
	{
		CLR_BIT(TCCR0,TCCR0_COM00);
    1680:	a3 e5       	ldi	r26, 0x53	; 83
    1682:	b0 e0       	ldi	r27, 0x00	; 0
    1684:	e3 e5       	ldi	r30, 0x53	; 83
    1686:	f0 e0       	ldi	r31, 0x00	; 0
    1688:	80 81       	ld	r24, Z
    168a:	8f 7e       	andi	r24, 0xEF	; 239
    168c:	8c 93       	st	X, r24
		SET_BIT(TCCR0,TCCR0_COM01);
    168e:	a3 e5       	ldi	r26, 0x53	; 83
    1690:	b0 e0       	ldi	r27, 0x00	; 0
    1692:	e3 e5       	ldi	r30, 0x53	; 83
    1694:	f0 e0       	ldi	r31, 0x00	; 0
    1696:	80 81       	ld	r24, Z
    1698:	80 62       	ori	r24, 0x20	; 32
    169a:	8c 93       	st	X, r24
		SET_BIT(TCCR0,TCCR0_COM01);
	}

	#endif

	return Local_ErrorState;
    169c:	89 81       	ldd	r24, Y+1	; 0x01
}
    169e:	0f 90       	pop	r0
    16a0:	cf 91       	pop	r28
    16a2:	df 91       	pop	r29
    16a4:	08 95       	ret

000016a6 <MPWM0_enumSetDutyCycle>:
error_state_t MPWM0_enumSetDutyCycle(u8 Copy_u8DutyCycle)
{
    16a6:	df 93       	push	r29
    16a8:	cf 93       	push	r28
    16aa:	00 d0       	rcall	.+0      	; 0x16ac <MPWM0_enumSetDutyCycle+0x6>
    16ac:	cd b7       	in	r28, 0x3d	; 61
    16ae:	de b7       	in	r29, 0x3e	; 62
    16b0:	8a 83       	std	Y+2, r24	; 0x02
	error_state_t Local_ErrorState = TIMER0_OK;
    16b2:	82 e0       	ldi	r24, 0x02	; 2
    16b4:	89 83       	std	Y+1, r24	; 0x01
	{
		OCR0 = (((100 - Copy_u8DutyCycle) * TIMER0_MAX_TICK ) / 100) -  1 ;
	}
	else if (FAST_PWM_MODE == FAST_PWM_NON_INVERTED_MODE)
	{
		OCR0 = (u8)(((Copy_u8DutyCycle * TIMER0_MAX_TICK ) / 100) -1);
    16b6:	ec e5       	ldi	r30, 0x5C	; 92
    16b8:	f0 e0       	ldi	r31, 0x00	; 0
    16ba:	8a 81       	ldd	r24, Y+2	; 0x02
    16bc:	88 2f       	mov	r24, r24
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	98 2f       	mov	r25, r24
    16c2:	88 27       	eor	r24, r24
    16c4:	24 e6       	ldi	r18, 0x64	; 100
    16c6:	30 e0       	ldi	r19, 0x00	; 0
    16c8:	b9 01       	movw	r22, r18
    16ca:	0e 94 ba 23 	call	0x4774	; 0x4774 <__divmodhi4>
    16ce:	cb 01       	movw	r24, r22
    16d0:	81 50       	subi	r24, 0x01	; 1
    16d2:	80 83       	st	Z, r24
	{
		OCR0 = ((Copy_u8DutyCycle * (TIMER0_MAX_TICK -1 ) ) / 100) ;
	}
	#endif

	return Local_ErrorState;
    16d4:	89 81       	ldd	r24, Y+1	; 0x01
}
    16d6:	0f 90       	pop	r0
    16d8:	0f 90       	pop	r0
    16da:	cf 91       	pop	r28
    16dc:	df 91       	pop	r29
    16de:	08 95       	ret

000016e0 <MPWM0_enumStart>:
error_state_t MPWM0_enumStart(void)
{
    16e0:	df 93       	push	r29
    16e2:	cf 93       	push	r28
    16e4:	0f 92       	push	r0
    16e6:	cd b7       	in	r28, 0x3d	; 61
    16e8:	de b7       	in	r29, 0x3e	; 62
	error_state_t Local_ErrorState = TIMER0_OK;
    16ea:	82 e0       	ldi	r24, 0x02	; 2
    16ec:	89 83       	std	Y+1, r24	; 0x01
	TCCR0 &= TIMER0_PRESCALLER_MASK;
    16ee:	a3 e5       	ldi	r26, 0x53	; 83
    16f0:	b0 e0       	ldi	r27, 0x00	; 0
    16f2:	e3 e5       	ldi	r30, 0x53	; 83
    16f4:	f0 e0       	ldi	r31, 0x00	; 0
    16f6:	80 81       	ld	r24, Z
    16f8:	88 7f       	andi	r24, 0xF8	; 248
    16fa:	8c 93       	st	X, r24
	TCCR0 |= TIMER0_PRESCALLER_SELEC;
    16fc:	a3 e5       	ldi	r26, 0x53	; 83
    16fe:	b0 e0       	ldi	r27, 0x00	; 0
    1700:	e3 e5       	ldi	r30, 0x53	; 83
    1702:	f0 e0       	ldi	r31, 0x00	; 0
    1704:	80 81       	ld	r24, Z
    1706:	83 60       	ori	r24, 0x03	; 3
    1708:	8c 93       	st	X, r24

	return Local_ErrorState;
    170a:	89 81       	ldd	r24, Y+1	; 0x01
}
    170c:	0f 90       	pop	r0
    170e:	cf 91       	pop	r28
    1710:	df 91       	pop	r29
    1712:	08 95       	ret

00001714 <MPWM0_enumStop>:
error_state_t MPWM0_enumStop(void)
{
    1714:	df 93       	push	r29
    1716:	cf 93       	push	r28
    1718:	0f 92       	push	r0
    171a:	cd b7       	in	r28, 0x3d	; 61
    171c:	de b7       	in	r29, 0x3e	; 62
	error_state_t Local_ErrorState = TIMER0_OK;
    171e:	82 e0       	ldi	r24, 0x02	; 2
    1720:	89 83       	std	Y+1, r24	; 0x01
	TCCR0 &= TIMER0_PRESCALLER_MASK;
    1722:	a3 e5       	ldi	r26, 0x53	; 83
    1724:	b0 e0       	ldi	r27, 0x00	; 0
    1726:	e3 e5       	ldi	r30, 0x53	; 83
    1728:	f0 e0       	ldi	r31, 0x00	; 0
    172a:	80 81       	ld	r24, Z
    172c:	88 7f       	andi	r24, 0xF8	; 248
    172e:	8c 93       	st	X, r24
	return Local_ErrorState;
    1730:	89 81       	ldd	r24, Y+1	; 0x01
}
    1732:	0f 90       	pop	r0
    1734:	cf 91       	pop	r28
    1736:	df 91       	pop	r29
    1738:	08 95       	ret

0000173a <MGIE_VoidEnable>:

#include "MGIE_interface.h"
#include "MGIE_private.h"

void MGIE_VoidEnable(void)
{
    173a:	df 93       	push	r29
    173c:	cf 93       	push	r28
    173e:	cd b7       	in	r28, 0x3d	; 61
    1740:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
    1742:	af e5       	ldi	r26, 0x5F	; 95
    1744:	b0 e0       	ldi	r27, 0x00	; 0
    1746:	ef e5       	ldi	r30, 0x5F	; 95
    1748:	f0 e0       	ldi	r31, 0x00	; 0
    174a:	80 81       	ld	r24, Z
    174c:	80 68       	ori	r24, 0x80	; 128
    174e:	8c 93       	st	X, r24
}
    1750:	cf 91       	pop	r28
    1752:	df 91       	pop	r29
    1754:	08 95       	ret

00001756 <MGIE_VoidDisable>:
void MGIE_VoidDisable(void)
{
    1756:	df 93       	push	r29
    1758:	cf 93       	push	r28
    175a:	cd b7       	in	r28, 0x3d	; 61
    175c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,SREG_I);
    175e:	af e5       	ldi	r26, 0x5F	; 95
    1760:	b0 e0       	ldi	r27, 0x00	; 0
    1762:	ef e5       	ldi	r30, 0x5F	; 95
    1764:	f0 e0       	ldi	r31, 0x00	; 0
    1766:	80 81       	ld	r24, Z
    1768:	8f 77       	andi	r24, 0x7F	; 127
    176a:	8c 93       	st	X, r24
}
    176c:	cf 91       	pop	r28
    176e:	df 91       	pop	r29
    1770:	08 95       	ret

00001772 <MEXTI_Enable>:
void (*INT1_pvFunc)(void) = NULL;
void (*INT2_pvFunc)(void) = NULL;


error_state_t MEXTI_Enable(exti_t Copy_u8EXTIx, exti_sense_control_t Copy_u8EXTIxSense, void(*Copy_pvEXTIxFunc)(void))
{
    1772:	df 93       	push	r29
    1774:	cf 93       	push	r28
    1776:	cd b7       	in	r28, 0x3d	; 61
    1778:	de b7       	in	r29, 0x3e	; 62
    177a:	2d 97       	sbiw	r28, 0x0d	; 13
    177c:	0f b6       	in	r0, 0x3f	; 63
    177e:	f8 94       	cli
    1780:	de bf       	out	0x3e, r29	; 62
    1782:	0f be       	out	0x3f, r0	; 63
    1784:	cd bf       	out	0x3d, r28	; 61
    1786:	8a 83       	std	Y+2, r24	; 0x02
    1788:	6b 83       	std	Y+3, r22	; 0x03
    178a:	5d 83       	std	Y+5, r21	; 0x05
    178c:	4c 83       	std	Y+4, r20	; 0x04
	error_state_t Local_ErrorState = R_OK;
    178e:	81 e0       	ldi	r24, 0x01	; 1
    1790:	89 83       	std	Y+1, r24	; 0x01
	
	switch(Copy_u8EXTIx)
    1792:	8a 81       	ldd	r24, Y+2	; 0x02
    1794:	28 2f       	mov	r18, r24
    1796:	30 e0       	ldi	r19, 0x00	; 0
    1798:	3d 87       	std	Y+13, r19	; 0x0d
    179a:	2c 87       	std	Y+12, r18	; 0x0c
    179c:	8c 85       	ldd	r24, Y+12	; 0x0c
    179e:	9d 85       	ldd	r25, Y+13	; 0x0d
    17a0:	82 30       	cpi	r24, 0x02	; 2
    17a2:	91 05       	cpc	r25, r1
    17a4:	09 f4       	brne	.+2      	; 0x17a8 <MEXTI_Enable+0x36>
    17a6:	7e c0       	rjmp	.+252    	; 0x18a4 <MEXTI_Enable+0x132>
    17a8:	2c 85       	ldd	r18, Y+12	; 0x0c
    17aa:	3d 85       	ldd	r19, Y+13	; 0x0d
    17ac:	23 30       	cpi	r18, 0x03	; 3
    17ae:	31 05       	cpc	r19, r1
    17b0:	09 f4       	brne	.+2      	; 0x17b4 <MEXTI_Enable+0x42>
    17b2:	ea c0       	rjmp	.+468    	; 0x1988 <MEXTI_Enable+0x216>
    17b4:	8c 85       	ldd	r24, Y+12	; 0x0c
    17b6:	9d 85       	ldd	r25, Y+13	; 0x0d
    17b8:	81 30       	cpi	r24, 0x01	; 1
    17ba:	91 05       	cpc	r25, r1
    17bc:	09 f0       	breq	.+2      	; 0x17c0 <MEXTI_Enable+0x4e>
    17be:	1a c1       	rjmp	.+564    	; 0x19f4 <MEXTI_Enable+0x282>
	{
		/********** INT0 **********/
		case INT0 :
		/* Initialize the INT0 callback notification function globally */
		if (Copy_pvEXTIxFunc != NULL)
    17c0:	8c 81       	ldd	r24, Y+4	; 0x04
    17c2:	9d 81       	ldd	r25, Y+5	; 0x05
    17c4:	00 97       	sbiw	r24, 0x00	; 0
    17c6:	39 f0       	breq	.+14     	; 0x17d6 <MEXTI_Enable+0x64>
		{
			INT0_pvFunc = Copy_pvEXTIxFunc;
    17c8:	8c 81       	ldd	r24, Y+4	; 0x04
    17ca:	9d 81       	ldd	r25, Y+5	; 0x05
    17cc:	90 93 ad 01 	sts	0x01AD, r25
    17d0:	80 93 ac 01 	sts	0x01AC, r24
    17d4:	02 c0       	rjmp	.+4      	; 0x17da <MEXTI_Enable+0x68>
		} 
		else
		{
			Local_ErrorState = NULL_POINTER;
    17d6:	86 e0       	ldi	r24, 0x06	; 6
    17d8:	89 83       	std	Y+1, r24	; 0x01
		}
		/* SET INT0 Sense Control */
		switch (Copy_u8EXTIxSense)
    17da:	8b 81       	ldd	r24, Y+3	; 0x03
    17dc:	28 2f       	mov	r18, r24
    17de:	30 e0       	ldi	r19, 0x00	; 0
    17e0:	3b 87       	std	Y+11, r19	; 0x0b
    17e2:	2a 87       	std	Y+10, r18	; 0x0a
    17e4:	8a 85       	ldd	r24, Y+10	; 0x0a
    17e6:	9b 85       	ldd	r25, Y+11	; 0x0b
    17e8:	82 30       	cpi	r24, 0x02	; 2
    17ea:	91 05       	cpc	r25, r1
    17ec:	29 f1       	breq	.+74     	; 0x1838 <MEXTI_Enable+0xc6>
    17ee:	2a 85       	ldd	r18, Y+10	; 0x0a
    17f0:	3b 85       	ldd	r19, Y+11	; 0x0b
    17f2:	23 30       	cpi	r18, 0x03	; 3
    17f4:	31 05       	cpc	r19, r1
    17f6:	34 f4       	brge	.+12     	; 0x1804 <MEXTI_Enable+0x92>
    17f8:	8a 85       	ldd	r24, Y+10	; 0x0a
    17fa:	9b 85       	ldd	r25, Y+11	; 0x0b
    17fc:	81 30       	cpi	r24, 0x01	; 1
    17fe:	91 05       	cpc	r25, r1
    1800:	61 f0       	breq	.+24     	; 0x181a <MEXTI_Enable+0xa8>
    1802:	47 c0       	rjmp	.+142    	; 0x1892 <MEXTI_Enable+0x120>
    1804:	2a 85       	ldd	r18, Y+10	; 0x0a
    1806:	3b 85       	ldd	r19, Y+11	; 0x0b
    1808:	23 30       	cpi	r18, 0x03	; 3
    180a:	31 05       	cpc	r19, r1
    180c:	21 f1       	breq	.+72     	; 0x1856 <MEXTI_Enable+0xe4>
    180e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1810:	9b 85       	ldd	r25, Y+11	; 0x0b
    1812:	84 30       	cpi	r24, 0x04	; 4
    1814:	91 05       	cpc	r25, r1
    1816:	71 f1       	breq	.+92     	; 0x1874 <MEXTI_Enable+0x102>
    1818:	3c c0       	rjmp	.+120    	; 0x1892 <MEXTI_Enable+0x120>
		{
			case LOW_LEVEL    : CLR_BIT(MCUCR,MCUCR_ISC00);    CLR_BIT(MCUCR,MCUCR_ISC01);    break;
    181a:	a5 e5       	ldi	r26, 0x55	; 85
    181c:	b0 e0       	ldi	r27, 0x00	; 0
    181e:	e5 e5       	ldi	r30, 0x55	; 85
    1820:	f0 e0       	ldi	r31, 0x00	; 0
    1822:	80 81       	ld	r24, Z
    1824:	8e 7f       	andi	r24, 0xFE	; 254
    1826:	8c 93       	st	X, r24
    1828:	a5 e5       	ldi	r26, 0x55	; 85
    182a:	b0 e0       	ldi	r27, 0x00	; 0
    182c:	e5 e5       	ldi	r30, 0x55	; 85
    182e:	f0 e0       	ldi	r31, 0x00	; 0
    1830:	80 81       	ld	r24, Z
    1832:	8d 7f       	andi	r24, 0xFD	; 253
    1834:	8c 93       	st	X, r24
    1836:	2e c0       	rjmp	.+92     	; 0x1894 <MEXTI_Enable+0x122>
			case ON_CHANGE    : SET_BIT(MCUCR,MCUCR_ISC00);    CLR_BIT(MCUCR,MCUCR_ISC01);    break;
    1838:	a5 e5       	ldi	r26, 0x55	; 85
    183a:	b0 e0       	ldi	r27, 0x00	; 0
    183c:	e5 e5       	ldi	r30, 0x55	; 85
    183e:	f0 e0       	ldi	r31, 0x00	; 0
    1840:	80 81       	ld	r24, Z
    1842:	81 60       	ori	r24, 0x01	; 1
    1844:	8c 93       	st	X, r24
    1846:	a5 e5       	ldi	r26, 0x55	; 85
    1848:	b0 e0       	ldi	r27, 0x00	; 0
    184a:	e5 e5       	ldi	r30, 0x55	; 85
    184c:	f0 e0       	ldi	r31, 0x00	; 0
    184e:	80 81       	ld	r24, Z
    1850:	8d 7f       	andi	r24, 0xFD	; 253
    1852:	8c 93       	st	X, r24
    1854:	1f c0       	rjmp	.+62     	; 0x1894 <MEXTI_Enable+0x122>
			case FALLING_EDGE : SET_BIT(MCUCR,MCUCR_ISC01);    CLR_BIT(MCUCR,MCUCR_ISC00);    break;
    1856:	a5 e5       	ldi	r26, 0x55	; 85
    1858:	b0 e0       	ldi	r27, 0x00	; 0
    185a:	e5 e5       	ldi	r30, 0x55	; 85
    185c:	f0 e0       	ldi	r31, 0x00	; 0
    185e:	80 81       	ld	r24, Z
    1860:	82 60       	ori	r24, 0x02	; 2
    1862:	8c 93       	st	X, r24
    1864:	a5 e5       	ldi	r26, 0x55	; 85
    1866:	b0 e0       	ldi	r27, 0x00	; 0
    1868:	e5 e5       	ldi	r30, 0x55	; 85
    186a:	f0 e0       	ldi	r31, 0x00	; 0
    186c:	80 81       	ld	r24, Z
    186e:	8e 7f       	andi	r24, 0xFE	; 254
    1870:	8c 93       	st	X, r24
    1872:	10 c0       	rjmp	.+32     	; 0x1894 <MEXTI_Enable+0x122>
			case RISING_EDGE  : SET_BIT(MCUCR,MCUCR_ISC01);    SET_BIT(MCUCR,MCUCR_ISC00);    break;
    1874:	a5 e5       	ldi	r26, 0x55	; 85
    1876:	b0 e0       	ldi	r27, 0x00	; 0
    1878:	e5 e5       	ldi	r30, 0x55	; 85
    187a:	f0 e0       	ldi	r31, 0x00	; 0
    187c:	80 81       	ld	r24, Z
    187e:	82 60       	ori	r24, 0x02	; 2
    1880:	8c 93       	st	X, r24
    1882:	a5 e5       	ldi	r26, 0x55	; 85
    1884:	b0 e0       	ldi	r27, 0x00	; 0
    1886:	e5 e5       	ldi	r30, 0x55	; 85
    1888:	f0 e0       	ldi	r31, 0x00	; 0
    188a:	80 81       	ld	r24, Z
    188c:	81 60       	ori	r24, 0x01	; 1
    188e:	8c 93       	st	X, r24
    1890:	01 c0       	rjmp	.+2      	; 0x1894 <MEXTI_Enable+0x122>
			default:           Local_ErrorState = R_NOK;                                      break;
    1892:	19 82       	std	Y+1, r1	; 0x01
	    }
		/* Enable INT0 */
		SET_BIT(GICR,GICR_INT0);
    1894:	ab e5       	ldi	r26, 0x5B	; 91
    1896:	b0 e0       	ldi	r27, 0x00	; 0
    1898:	eb e5       	ldi	r30, 0x5B	; 91
    189a:	f0 e0       	ldi	r31, 0x00	; 0
    189c:	80 81       	ld	r24, Z
    189e:	80 64       	ori	r24, 0x40	; 64
    18a0:	8c 93       	st	X, r24
    18a2:	a9 c0       	rjmp	.+338    	; 0x19f6 <MEXTI_Enable+0x284>
		break;
		/********** INT1 **********/
		case INT1 :
		/* Initialize the INT1 callback notification function globally */
        if (Copy_pvEXTIxFunc != NULL)
    18a4:	8c 81       	ldd	r24, Y+4	; 0x04
    18a6:	9d 81       	ldd	r25, Y+5	; 0x05
    18a8:	00 97       	sbiw	r24, 0x00	; 0
    18aa:	39 f0       	breq	.+14     	; 0x18ba <MEXTI_Enable+0x148>
        {
        	INT1_pvFunc = Copy_pvEXTIxFunc;
    18ac:	8c 81       	ldd	r24, Y+4	; 0x04
    18ae:	9d 81       	ldd	r25, Y+5	; 0x05
    18b0:	90 93 b1 01 	sts	0x01B1, r25
    18b4:	80 93 b0 01 	sts	0x01B0, r24
    18b8:	02 c0       	rjmp	.+4      	; 0x18be <MEXTI_Enable+0x14c>
        }
        else
        {
        	Local_ErrorState = NULL_POINTER;
    18ba:	86 e0       	ldi	r24, 0x06	; 6
    18bc:	89 83       	std	Y+1, r24	; 0x01
        }		
		/* SET INT1 Sense Control */
		switch (Copy_u8EXTIxSense)
    18be:	8b 81       	ldd	r24, Y+3	; 0x03
    18c0:	28 2f       	mov	r18, r24
    18c2:	30 e0       	ldi	r19, 0x00	; 0
    18c4:	39 87       	std	Y+9, r19	; 0x09
    18c6:	28 87       	std	Y+8, r18	; 0x08
    18c8:	88 85       	ldd	r24, Y+8	; 0x08
    18ca:	99 85       	ldd	r25, Y+9	; 0x09
    18cc:	82 30       	cpi	r24, 0x02	; 2
    18ce:	91 05       	cpc	r25, r1
    18d0:	29 f1       	breq	.+74     	; 0x191c <MEXTI_Enable+0x1aa>
    18d2:	28 85       	ldd	r18, Y+8	; 0x08
    18d4:	39 85       	ldd	r19, Y+9	; 0x09
    18d6:	23 30       	cpi	r18, 0x03	; 3
    18d8:	31 05       	cpc	r19, r1
    18da:	34 f4       	brge	.+12     	; 0x18e8 <MEXTI_Enable+0x176>
    18dc:	88 85       	ldd	r24, Y+8	; 0x08
    18de:	99 85       	ldd	r25, Y+9	; 0x09
    18e0:	81 30       	cpi	r24, 0x01	; 1
    18e2:	91 05       	cpc	r25, r1
    18e4:	61 f0       	breq	.+24     	; 0x18fe <MEXTI_Enable+0x18c>
    18e6:	47 c0       	rjmp	.+142    	; 0x1976 <MEXTI_Enable+0x204>
    18e8:	28 85       	ldd	r18, Y+8	; 0x08
    18ea:	39 85       	ldd	r19, Y+9	; 0x09
    18ec:	23 30       	cpi	r18, 0x03	; 3
    18ee:	31 05       	cpc	r19, r1
    18f0:	21 f1       	breq	.+72     	; 0x193a <MEXTI_Enable+0x1c8>
    18f2:	88 85       	ldd	r24, Y+8	; 0x08
    18f4:	99 85       	ldd	r25, Y+9	; 0x09
    18f6:	84 30       	cpi	r24, 0x04	; 4
    18f8:	91 05       	cpc	r25, r1
    18fa:	71 f1       	breq	.+92     	; 0x1958 <MEXTI_Enable+0x1e6>
    18fc:	3c c0       	rjmp	.+120    	; 0x1976 <MEXTI_Enable+0x204>
		{
			case LOW_LEVEL    : CLR_BIT(MCUCR,MCUCR_ISC10);    CLR_BIT(MCUCR,MCUCR_ISC11);    break;
    18fe:	a5 e5       	ldi	r26, 0x55	; 85
    1900:	b0 e0       	ldi	r27, 0x00	; 0
    1902:	e5 e5       	ldi	r30, 0x55	; 85
    1904:	f0 e0       	ldi	r31, 0x00	; 0
    1906:	80 81       	ld	r24, Z
    1908:	8b 7f       	andi	r24, 0xFB	; 251
    190a:	8c 93       	st	X, r24
    190c:	a5 e5       	ldi	r26, 0x55	; 85
    190e:	b0 e0       	ldi	r27, 0x00	; 0
    1910:	e5 e5       	ldi	r30, 0x55	; 85
    1912:	f0 e0       	ldi	r31, 0x00	; 0
    1914:	80 81       	ld	r24, Z
    1916:	87 7f       	andi	r24, 0xF7	; 247
    1918:	8c 93       	st	X, r24
    191a:	2e c0       	rjmp	.+92     	; 0x1978 <MEXTI_Enable+0x206>
			case ON_CHANGE    : SET_BIT(MCUCR,MCUCR_ISC10);    CLR_BIT(MCUCR,MCUCR_ISC11);    break;
    191c:	a5 e5       	ldi	r26, 0x55	; 85
    191e:	b0 e0       	ldi	r27, 0x00	; 0
    1920:	e5 e5       	ldi	r30, 0x55	; 85
    1922:	f0 e0       	ldi	r31, 0x00	; 0
    1924:	80 81       	ld	r24, Z
    1926:	84 60       	ori	r24, 0x04	; 4
    1928:	8c 93       	st	X, r24
    192a:	a5 e5       	ldi	r26, 0x55	; 85
    192c:	b0 e0       	ldi	r27, 0x00	; 0
    192e:	e5 e5       	ldi	r30, 0x55	; 85
    1930:	f0 e0       	ldi	r31, 0x00	; 0
    1932:	80 81       	ld	r24, Z
    1934:	87 7f       	andi	r24, 0xF7	; 247
    1936:	8c 93       	st	X, r24
    1938:	1f c0       	rjmp	.+62     	; 0x1978 <MEXTI_Enable+0x206>
			case FALLING_EDGE : SET_BIT(MCUCR,MCUCR_ISC11);    CLR_BIT(MCUCR,MCUCR_ISC10);    break;
    193a:	a5 e5       	ldi	r26, 0x55	; 85
    193c:	b0 e0       	ldi	r27, 0x00	; 0
    193e:	e5 e5       	ldi	r30, 0x55	; 85
    1940:	f0 e0       	ldi	r31, 0x00	; 0
    1942:	80 81       	ld	r24, Z
    1944:	88 60       	ori	r24, 0x08	; 8
    1946:	8c 93       	st	X, r24
    1948:	a5 e5       	ldi	r26, 0x55	; 85
    194a:	b0 e0       	ldi	r27, 0x00	; 0
    194c:	e5 e5       	ldi	r30, 0x55	; 85
    194e:	f0 e0       	ldi	r31, 0x00	; 0
    1950:	80 81       	ld	r24, Z
    1952:	8b 7f       	andi	r24, 0xFB	; 251
    1954:	8c 93       	st	X, r24
    1956:	10 c0       	rjmp	.+32     	; 0x1978 <MEXTI_Enable+0x206>
			case RISING_EDGE  : SET_BIT(MCUCR,MCUCR_ISC11);    SET_BIT(MCUCR,MCUCR_ISC10);    break;
    1958:	a5 e5       	ldi	r26, 0x55	; 85
    195a:	b0 e0       	ldi	r27, 0x00	; 0
    195c:	e5 e5       	ldi	r30, 0x55	; 85
    195e:	f0 e0       	ldi	r31, 0x00	; 0
    1960:	80 81       	ld	r24, Z
    1962:	88 60       	ori	r24, 0x08	; 8
    1964:	8c 93       	st	X, r24
    1966:	a5 e5       	ldi	r26, 0x55	; 85
    1968:	b0 e0       	ldi	r27, 0x00	; 0
    196a:	e5 e5       	ldi	r30, 0x55	; 85
    196c:	f0 e0       	ldi	r31, 0x00	; 0
    196e:	80 81       	ld	r24, Z
    1970:	84 60       	ori	r24, 0x04	; 4
    1972:	8c 93       	st	X, r24
    1974:	01 c0       	rjmp	.+2      	; 0x1978 <MEXTI_Enable+0x206>
			default:           Local_ErrorState = R_NOK;                                      break;
    1976:	19 82       	std	Y+1, r1	; 0x01
		}
		/* Enable INT1 */
		SET_BIT(GICR,GICR_INT1);
    1978:	ab e5       	ldi	r26, 0x5B	; 91
    197a:	b0 e0       	ldi	r27, 0x00	; 0
    197c:	eb e5       	ldi	r30, 0x5B	; 91
    197e:	f0 e0       	ldi	r31, 0x00	; 0
    1980:	80 81       	ld	r24, Z
    1982:	80 68       	ori	r24, 0x80	; 128
    1984:	8c 93       	st	X, r24
    1986:	37 c0       	rjmp	.+110    	; 0x19f6 <MEXTI_Enable+0x284>
		break;
		
		/********** INT2 **********/
		case INT2 :
		/* Initialize the INT2 callback notification function globally */
        if (Copy_pvEXTIxFunc != NULL)
    1988:	8c 81       	ldd	r24, Y+4	; 0x04
    198a:	9d 81       	ldd	r25, Y+5	; 0x05
    198c:	00 97       	sbiw	r24, 0x00	; 0
    198e:	39 f0       	breq	.+14     	; 0x199e <MEXTI_Enable+0x22c>
        {
        	INT2_pvFunc = Copy_pvEXTIxFunc;
    1990:	8c 81       	ldd	r24, Y+4	; 0x04
    1992:	9d 81       	ldd	r25, Y+5	; 0x05
    1994:	90 93 b3 01 	sts	0x01B3, r25
    1998:	80 93 b2 01 	sts	0x01B2, r24
    199c:	02 c0       	rjmp	.+4      	; 0x19a2 <MEXTI_Enable+0x230>
        }
        else
        {
        	Local_ErrorState = NULL_POINTER;
    199e:	86 e0       	ldi	r24, 0x06	; 6
    19a0:	89 83       	std	Y+1, r24	; 0x01
        }
		/* SET INT2 Sense Control */
		switch (Copy_u8EXTIxSense)
    19a2:	8b 81       	ldd	r24, Y+3	; 0x03
    19a4:	28 2f       	mov	r18, r24
    19a6:	30 e0       	ldi	r19, 0x00	; 0
    19a8:	3f 83       	std	Y+7, r19	; 0x07
    19aa:	2e 83       	std	Y+6, r18	; 0x06
    19ac:	8e 81       	ldd	r24, Y+6	; 0x06
    19ae:	9f 81       	ldd	r25, Y+7	; 0x07
    19b0:	83 30       	cpi	r24, 0x03	; 3
    19b2:	91 05       	cpc	r25, r1
    19b4:	31 f0       	breq	.+12     	; 0x19c2 <MEXTI_Enable+0x250>
    19b6:	2e 81       	ldd	r18, Y+6	; 0x06
    19b8:	3f 81       	ldd	r19, Y+7	; 0x07
    19ba:	24 30       	cpi	r18, 0x04	; 4
    19bc:	31 05       	cpc	r19, r1
    19be:	49 f0       	breq	.+18     	; 0x19d2 <MEXTI_Enable+0x260>
    19c0:	10 c0       	rjmp	.+32     	; 0x19e2 <MEXTI_Enable+0x270>
		{
			case FALLING_EDGE: CLR_BIT(MCUCSR,MCUCSR_ISC2);    break;
    19c2:	a4 e5       	ldi	r26, 0x54	; 84
    19c4:	b0 e0       	ldi	r27, 0x00	; 0
    19c6:	e4 e5       	ldi	r30, 0x54	; 84
    19c8:	f0 e0       	ldi	r31, 0x00	; 0
    19ca:	80 81       	ld	r24, Z
    19cc:	8f 7b       	andi	r24, 0xBF	; 191
    19ce:	8c 93       	st	X, r24
    19d0:	09 c0       	rjmp	.+18     	; 0x19e4 <MEXTI_Enable+0x272>
			case RISING_EDGE : SET_BIT(MCUCSR,MCUCSR_ISC2);    break;
    19d2:	a4 e5       	ldi	r26, 0x54	; 84
    19d4:	b0 e0       	ldi	r27, 0x00	; 0
    19d6:	e4 e5       	ldi	r30, 0x54	; 84
    19d8:	f0 e0       	ldi	r31, 0x00	; 0
    19da:	80 81       	ld	r24, Z
    19dc:	80 64       	ori	r24, 0x40	; 64
    19de:	8c 93       	st	X, r24
    19e0:	01 c0       	rjmp	.+2      	; 0x19e4 <MEXTI_Enable+0x272>
			default:           Local_ErrorState = R_NOK;       break;
    19e2:	19 82       	std	Y+1, r1	; 0x01
		}
		/* Enable INT2 */
		SET_BIT(GICR,GICR_INT2);
    19e4:	ab e5       	ldi	r26, 0x5B	; 91
    19e6:	b0 e0       	ldi	r27, 0x00	; 0
    19e8:	eb e5       	ldi	r30, 0x5B	; 91
    19ea:	f0 e0       	ldi	r31, 0x00	; 0
    19ec:	80 81       	ld	r24, Z
    19ee:	80 62       	ori	r24, 0x20	; 32
    19f0:	8c 93       	st	X, r24
    19f2:	01 c0       	rjmp	.+2      	; 0x19f6 <MEXTI_Enable+0x284>
		break;
		
		default: Local_ErrorState = R_NOK;
    19f4:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return Local_ErrorState;
    19f6:	89 81       	ldd	r24, Y+1	; 0x01
}
    19f8:	2d 96       	adiw	r28, 0x0d	; 13
    19fa:	0f b6       	in	r0, 0x3f	; 63
    19fc:	f8 94       	cli
    19fe:	de bf       	out	0x3e, r29	; 62
    1a00:	0f be       	out	0x3f, r0	; 63
    1a02:	cd bf       	out	0x3d, r28	; 61
    1a04:	cf 91       	pop	r28
    1a06:	df 91       	pop	r29
    1a08:	08 95       	ret

00001a0a <MEXTI_Disable>:

error_state_t MEXTI_Disable(exti_t Copy_u8EXTIx)
{
    1a0a:	df 93       	push	r29
    1a0c:	cf 93       	push	r28
    1a0e:	00 d0       	rcall	.+0      	; 0x1a10 <MEXTI_Disable+0x6>
    1a10:	00 d0       	rcall	.+0      	; 0x1a12 <MEXTI_Disable+0x8>
    1a12:	cd b7       	in	r28, 0x3d	; 61
    1a14:	de b7       	in	r29, 0x3e	; 62
    1a16:	8a 83       	std	Y+2, r24	; 0x02
	error_state_t Local_ErrorState = R_OK;
    1a18:	81 e0       	ldi	r24, 0x01	; 1
    1a1a:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8EXTIx)
    1a1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a1e:	28 2f       	mov	r18, r24
    1a20:	30 e0       	ldi	r19, 0x00	; 0
    1a22:	3c 83       	std	Y+4, r19	; 0x04
    1a24:	2b 83       	std	Y+3, r18	; 0x03
    1a26:	8b 81       	ldd	r24, Y+3	; 0x03
    1a28:	9c 81       	ldd	r25, Y+4	; 0x04
    1a2a:	82 30       	cpi	r24, 0x02	; 2
    1a2c:	91 05       	cpc	r25, r1
    1a2e:	91 f0       	breq	.+36     	; 0x1a54 <MEXTI_Disable+0x4a>
    1a30:	2b 81       	ldd	r18, Y+3	; 0x03
    1a32:	3c 81       	ldd	r19, Y+4	; 0x04
    1a34:	23 30       	cpi	r18, 0x03	; 3
    1a36:	31 05       	cpc	r19, r1
    1a38:	a9 f0       	breq	.+42     	; 0x1a64 <MEXTI_Disable+0x5a>
    1a3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a3c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a3e:	81 30       	cpi	r24, 0x01	; 1
    1a40:	91 05       	cpc	r25, r1
    1a42:	c1 f4       	brne	.+48     	; 0x1a74 <MEXTI_Disable+0x6a>
	{
		case INT0:  CLR_BIT(GICR,GICR_INT0);  break;
    1a44:	ab e5       	ldi	r26, 0x5B	; 91
    1a46:	b0 e0       	ldi	r27, 0x00	; 0
    1a48:	eb e5       	ldi	r30, 0x5B	; 91
    1a4a:	f0 e0       	ldi	r31, 0x00	; 0
    1a4c:	80 81       	ld	r24, Z
    1a4e:	8f 7b       	andi	r24, 0xBF	; 191
    1a50:	8c 93       	st	X, r24
    1a52:	11 c0       	rjmp	.+34     	; 0x1a76 <MEXTI_Disable+0x6c>
		case INT1:  CLR_BIT(GICR,GICR_INT1);  break;
    1a54:	ab e5       	ldi	r26, 0x5B	; 91
    1a56:	b0 e0       	ldi	r27, 0x00	; 0
    1a58:	eb e5       	ldi	r30, 0x5B	; 91
    1a5a:	f0 e0       	ldi	r31, 0x00	; 0
    1a5c:	80 81       	ld	r24, Z
    1a5e:	8f 77       	andi	r24, 0x7F	; 127
    1a60:	8c 93       	st	X, r24
    1a62:	09 c0       	rjmp	.+18     	; 0x1a76 <MEXTI_Disable+0x6c>
		case INT2:  CLR_BIT(GICR,GICR_INT2);  break;
    1a64:	ab e5       	ldi	r26, 0x5B	; 91
    1a66:	b0 e0       	ldi	r27, 0x00	; 0
    1a68:	eb e5       	ldi	r30, 0x5B	; 91
    1a6a:	f0 e0       	ldi	r31, 0x00	; 0
    1a6c:	80 81       	ld	r24, Z
    1a6e:	8f 7d       	andi	r24, 0xDF	; 223
    1a70:	8c 93       	st	X, r24
    1a72:	01 c0       	rjmp	.+2      	; 0x1a76 <MEXTI_Disable+0x6c>
		default:    Local_ErrorState = R_NOK; break;
    1a74:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return Local_ErrorState;
    1a76:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a78:	0f 90       	pop	r0
    1a7a:	0f 90       	pop	r0
    1a7c:	0f 90       	pop	r0
    1a7e:	0f 90       	pop	r0
    1a80:	cf 91       	pop	r28
    1a82:	df 91       	pop	r29
    1a84:	08 95       	ret

00001a86 <MEXTI_FUNC>:

void MEXTI_FUNC( void(*Copy_pvEXTIxFunc)(void))
{
    1a86:	df 93       	push	r29
    1a88:	cf 93       	push	r28
    1a8a:	00 d0       	rcall	.+0      	; 0x1a8c <MEXTI_FUNC+0x6>
    1a8c:	cd b7       	in	r28, 0x3d	; 61
    1a8e:	de b7       	in	r29, 0x3e	; 62
    1a90:	9a 83       	std	Y+2, r25	; 0x02
    1a92:	89 83       	std	Y+1, r24	; 0x01
	INT_pvFunc = Copy_pvEXTIxFunc;
    1a94:	89 81       	ldd	r24, Y+1	; 0x01
    1a96:	9a 81       	ldd	r25, Y+2	; 0x02
    1a98:	90 93 af 01 	sts	0x01AF, r25
    1a9c:	80 93 ae 01 	sts	0x01AE, r24
}
    1aa0:	0f 90       	pop	r0
    1aa2:	0f 90       	pop	r0
    1aa4:	cf 91       	pop	r28
    1aa6:	df 91       	pop	r29
    1aa8:	08 95       	ret

00001aaa <__vector_1>:


/*************** ISR Functions **************/
/******** INT0 ********/
ISR_ST(INT0_VECTOR)
{
    1aaa:	1f 92       	push	r1
    1aac:	0f 92       	push	r0
    1aae:	0f b6       	in	r0, 0x3f	; 63
    1ab0:	0f 92       	push	r0
    1ab2:	11 24       	eor	r1, r1
    1ab4:	2f 93       	push	r18
    1ab6:	3f 93       	push	r19
    1ab8:	4f 93       	push	r20
    1aba:	5f 93       	push	r21
    1abc:	6f 93       	push	r22
    1abe:	7f 93       	push	r23
    1ac0:	8f 93       	push	r24
    1ac2:	9f 93       	push	r25
    1ac4:	af 93       	push	r26
    1ac6:	bf 93       	push	r27
    1ac8:	ef 93       	push	r30
    1aca:	ff 93       	push	r31
    1acc:	df 93       	push	r29
    1ace:	cf 93       	push	r28
    1ad0:	cd b7       	in	r28, 0x3d	; 61
    1ad2:	de b7       	in	r29, 0x3e	; 62
	//if (INT_pvFunc != NULL)
	if (INT0_pvFunc != NULL)
    1ad4:	80 91 ac 01 	lds	r24, 0x01AC
    1ad8:	90 91 ad 01 	lds	r25, 0x01AD
    1adc:	00 97       	sbiw	r24, 0x00	; 0
    1ade:	29 f0       	breq	.+10     	; 0x1aea <__vector_1+0x40>
	{
		INT0_pvFunc();
    1ae0:	e0 91 ac 01 	lds	r30, 0x01AC
    1ae4:	f0 91 ad 01 	lds	r31, 0x01AD
    1ae8:	09 95       	icall
	} 
	else
	{
		/* Do No Thing */
	}
}
    1aea:	cf 91       	pop	r28
    1aec:	df 91       	pop	r29
    1aee:	ff 91       	pop	r31
    1af0:	ef 91       	pop	r30
    1af2:	bf 91       	pop	r27
    1af4:	af 91       	pop	r26
    1af6:	9f 91       	pop	r25
    1af8:	8f 91       	pop	r24
    1afa:	7f 91       	pop	r23
    1afc:	6f 91       	pop	r22
    1afe:	5f 91       	pop	r21
    1b00:	4f 91       	pop	r20
    1b02:	3f 91       	pop	r19
    1b04:	2f 91       	pop	r18
    1b06:	0f 90       	pop	r0
    1b08:	0f be       	out	0x3f, r0	; 63
    1b0a:	0f 90       	pop	r0
    1b0c:	1f 90       	pop	r1
    1b0e:	18 95       	reti

00001b10 <__vector_2>:
/******** INT1 ********/
ISR_ST(INT1_VECTOR)
{
    1b10:	1f 92       	push	r1
    1b12:	0f 92       	push	r0
    1b14:	0f b6       	in	r0, 0x3f	; 63
    1b16:	0f 92       	push	r0
    1b18:	11 24       	eor	r1, r1
    1b1a:	2f 93       	push	r18
    1b1c:	3f 93       	push	r19
    1b1e:	4f 93       	push	r20
    1b20:	5f 93       	push	r21
    1b22:	6f 93       	push	r22
    1b24:	7f 93       	push	r23
    1b26:	8f 93       	push	r24
    1b28:	9f 93       	push	r25
    1b2a:	af 93       	push	r26
    1b2c:	bf 93       	push	r27
    1b2e:	ef 93       	push	r30
    1b30:	ff 93       	push	r31
    1b32:	df 93       	push	r29
    1b34:	cf 93       	push	r28
    1b36:	cd b7       	in	r28, 0x3d	; 61
    1b38:	de b7       	in	r29, 0x3e	; 62
	if (INT1_pvFunc != NULL)
    1b3a:	80 91 b0 01 	lds	r24, 0x01B0
    1b3e:	90 91 b1 01 	lds	r25, 0x01B1
    1b42:	00 97       	sbiw	r24, 0x00	; 0
    1b44:	29 f0       	breq	.+10     	; 0x1b50 <__vector_2+0x40>
	{
		INT1_pvFunc();
    1b46:	e0 91 b0 01 	lds	r30, 0x01B0
    1b4a:	f0 91 b1 01 	lds	r31, 0x01B1
    1b4e:	09 95       	icall
	}
	else
	{
		/* Do No Thing */
	}
}
    1b50:	cf 91       	pop	r28
    1b52:	df 91       	pop	r29
    1b54:	ff 91       	pop	r31
    1b56:	ef 91       	pop	r30
    1b58:	bf 91       	pop	r27
    1b5a:	af 91       	pop	r26
    1b5c:	9f 91       	pop	r25
    1b5e:	8f 91       	pop	r24
    1b60:	7f 91       	pop	r23
    1b62:	6f 91       	pop	r22
    1b64:	5f 91       	pop	r21
    1b66:	4f 91       	pop	r20
    1b68:	3f 91       	pop	r19
    1b6a:	2f 91       	pop	r18
    1b6c:	0f 90       	pop	r0
    1b6e:	0f be       	out	0x3f, r0	; 63
    1b70:	0f 90       	pop	r0
    1b72:	1f 90       	pop	r1
    1b74:	18 95       	reti

00001b76 <__vector_3>:
/******** INT2 ********/
ISR_ST(INT2_VECTOR)
{
    1b76:	1f 92       	push	r1
    1b78:	0f 92       	push	r0
    1b7a:	0f b6       	in	r0, 0x3f	; 63
    1b7c:	0f 92       	push	r0
    1b7e:	11 24       	eor	r1, r1
    1b80:	2f 93       	push	r18
    1b82:	3f 93       	push	r19
    1b84:	4f 93       	push	r20
    1b86:	5f 93       	push	r21
    1b88:	6f 93       	push	r22
    1b8a:	7f 93       	push	r23
    1b8c:	8f 93       	push	r24
    1b8e:	9f 93       	push	r25
    1b90:	af 93       	push	r26
    1b92:	bf 93       	push	r27
    1b94:	ef 93       	push	r30
    1b96:	ff 93       	push	r31
    1b98:	df 93       	push	r29
    1b9a:	cf 93       	push	r28
    1b9c:	cd b7       	in	r28, 0x3d	; 61
    1b9e:	de b7       	in	r29, 0x3e	; 62
	if (INT2_pvFunc != NULL)
    1ba0:	80 91 b2 01 	lds	r24, 0x01B2
    1ba4:	90 91 b3 01 	lds	r25, 0x01B3
    1ba8:	00 97       	sbiw	r24, 0x00	; 0
    1baa:	29 f0       	breq	.+10     	; 0x1bb6 <__vector_3+0x40>
	{
		INT2_pvFunc();
    1bac:	e0 91 b2 01 	lds	r30, 0x01B2
    1bb0:	f0 91 b3 01 	lds	r31, 0x01B3
    1bb4:	09 95       	icall
	}
	else
	{
		/* Do No Thing */
	}
}
    1bb6:	cf 91       	pop	r28
    1bb8:	df 91       	pop	r29
    1bba:	ff 91       	pop	r31
    1bbc:	ef 91       	pop	r30
    1bbe:	bf 91       	pop	r27
    1bc0:	af 91       	pop	r26
    1bc2:	9f 91       	pop	r25
    1bc4:	8f 91       	pop	r24
    1bc6:	7f 91       	pop	r23
    1bc8:	6f 91       	pop	r22
    1bca:	5f 91       	pop	r21
    1bcc:	4f 91       	pop	r20
    1bce:	3f 91       	pop	r19
    1bd0:	2f 91       	pop	r18
    1bd2:	0f 90       	pop	r0
    1bd4:	0f be       	out	0x3f, r0	; 63
    1bd6:	0f 90       	pop	r0
    1bd8:	1f 90       	pop	r1
    1bda:	18 95       	reti

00001bdc <MDIO_SetPinDirection>:
#include "MDIO_private.h"
#include "MDIO_config.h"


error_state_t	MDIO_SetPinDirection (dio_u8port_t Copy_u8Port, dio_u8pin_t Copy_u8Pin, dio_direc_t Copy_Direction)
{
    1bdc:	df 93       	push	r29
    1bde:	cf 93       	push	r28
    1be0:	cd b7       	in	r28, 0x3d	; 61
    1be2:	de b7       	in	r29, 0x3e	; 62
    1be4:	28 97       	sbiw	r28, 0x08	; 8
    1be6:	0f b6       	in	r0, 0x3f	; 63
    1be8:	f8 94       	cli
    1bea:	de bf       	out	0x3e, r29	; 62
    1bec:	0f be       	out	0x3f, r0	; 63
    1bee:	cd bf       	out	0x3d, r28	; 61
    1bf0:	8a 83       	std	Y+2, r24	; 0x02
    1bf2:	6b 83       	std	Y+3, r22	; 0x03
    1bf4:	4c 83       	std	Y+4, r20	; 0x04
	error_state_t Local_ErrorState = R_OK;
    1bf6:	81 e0       	ldi	r24, 0x01	; 1
    1bf8:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8Pin <= DIO_u8PIN7)
    1bfa:	8b 81       	ldd	r24, Y+3	; 0x03
    1bfc:	88 30       	cpi	r24, 0x08	; 8
    1bfe:	08 f0       	brcs	.+2      	; 0x1c02 <MDIO_SetPinDirection+0x26>
    1c00:	f1 c0       	rjmp	.+482    	; 0x1de4 <MDIO_SetPinDirection+0x208>
	{
		if (Copy_Direction == DIO_u8PIN_INPUT)
    1c02:	8c 81       	ldd	r24, Y+4	; 0x04
    1c04:	88 23       	and	r24, r24
    1c06:	09 f0       	breq	.+2      	; 0x1c0a <MDIO_SetPinDirection+0x2e>
    1c08:	76 c0       	rjmp	.+236    	; 0x1cf6 <MDIO_SetPinDirection+0x11a>
		{
			switch (Copy_u8Port)
    1c0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c0c:	28 2f       	mov	r18, r24
    1c0e:	30 e0       	ldi	r19, 0x00	; 0
    1c10:	38 87       	std	Y+8, r19	; 0x08
    1c12:	2f 83       	std	Y+7, r18	; 0x07
    1c14:	8f 81       	ldd	r24, Y+7	; 0x07
    1c16:	98 85       	ldd	r25, Y+8	; 0x08
    1c18:	81 30       	cpi	r24, 0x01	; 1
    1c1a:	91 05       	cpc	r25, r1
    1c1c:	59 f1       	breq	.+86     	; 0x1c74 <MDIO_SetPinDirection+0x98>
    1c1e:	2f 81       	ldd	r18, Y+7	; 0x07
    1c20:	38 85       	ldd	r19, Y+8	; 0x08
    1c22:	22 30       	cpi	r18, 0x02	; 2
    1c24:	31 05       	cpc	r19, r1
    1c26:	2c f4       	brge	.+10     	; 0x1c32 <MDIO_SetPinDirection+0x56>
    1c28:	8f 81       	ldd	r24, Y+7	; 0x07
    1c2a:	98 85       	ldd	r25, Y+8	; 0x08
    1c2c:	00 97       	sbiw	r24, 0x00	; 0
    1c2e:	69 f0       	breq	.+26     	; 0x1c4a <MDIO_SetPinDirection+0x6e>
    1c30:	60 c0       	rjmp	.+192    	; 0x1cf2 <MDIO_SetPinDirection+0x116>
    1c32:	2f 81       	ldd	r18, Y+7	; 0x07
    1c34:	38 85       	ldd	r19, Y+8	; 0x08
    1c36:	22 30       	cpi	r18, 0x02	; 2
    1c38:	31 05       	cpc	r19, r1
    1c3a:	89 f1       	breq	.+98     	; 0x1c9e <MDIO_SetPinDirection+0xc2>
    1c3c:	8f 81       	ldd	r24, Y+7	; 0x07
    1c3e:	98 85       	ldd	r25, Y+8	; 0x08
    1c40:	83 30       	cpi	r24, 0x03	; 3
    1c42:	91 05       	cpc	r25, r1
    1c44:	09 f4       	brne	.+2      	; 0x1c48 <MDIO_SetPinDirection+0x6c>
    1c46:	40 c0       	rjmp	.+128    	; 0x1cc8 <MDIO_SetPinDirection+0xec>
    1c48:	54 c0       	rjmp	.+168    	; 0x1cf2 <MDIO_SetPinDirection+0x116>
			{
				case DIO_u8PORTA : CLR_BIT(DDRA,Copy_u8Pin); break;
    1c4a:	aa e3       	ldi	r26, 0x3A	; 58
    1c4c:	b0 e0       	ldi	r27, 0x00	; 0
    1c4e:	ea e3       	ldi	r30, 0x3A	; 58
    1c50:	f0 e0       	ldi	r31, 0x00	; 0
    1c52:	80 81       	ld	r24, Z
    1c54:	48 2f       	mov	r20, r24
    1c56:	8b 81       	ldd	r24, Y+3	; 0x03
    1c58:	28 2f       	mov	r18, r24
    1c5a:	30 e0       	ldi	r19, 0x00	; 0
    1c5c:	81 e0       	ldi	r24, 0x01	; 1
    1c5e:	90 e0       	ldi	r25, 0x00	; 0
    1c60:	02 2e       	mov	r0, r18
    1c62:	02 c0       	rjmp	.+4      	; 0x1c68 <MDIO_SetPinDirection+0x8c>
    1c64:	88 0f       	add	r24, r24
    1c66:	99 1f       	adc	r25, r25
    1c68:	0a 94       	dec	r0
    1c6a:	e2 f7       	brpl	.-8      	; 0x1c64 <MDIO_SetPinDirection+0x88>
    1c6c:	80 95       	com	r24
    1c6e:	84 23       	and	r24, r20
    1c70:	8c 93       	st	X, r24
    1c72:	b9 c0       	rjmp	.+370    	; 0x1de6 <MDIO_SetPinDirection+0x20a>
				case DIO_u8PORTB : CLR_BIT(DDRB,Copy_u8Pin); break;
    1c74:	a7 e3       	ldi	r26, 0x37	; 55
    1c76:	b0 e0       	ldi	r27, 0x00	; 0
    1c78:	e7 e3       	ldi	r30, 0x37	; 55
    1c7a:	f0 e0       	ldi	r31, 0x00	; 0
    1c7c:	80 81       	ld	r24, Z
    1c7e:	48 2f       	mov	r20, r24
    1c80:	8b 81       	ldd	r24, Y+3	; 0x03
    1c82:	28 2f       	mov	r18, r24
    1c84:	30 e0       	ldi	r19, 0x00	; 0
    1c86:	81 e0       	ldi	r24, 0x01	; 1
    1c88:	90 e0       	ldi	r25, 0x00	; 0
    1c8a:	02 2e       	mov	r0, r18
    1c8c:	02 c0       	rjmp	.+4      	; 0x1c92 <MDIO_SetPinDirection+0xb6>
    1c8e:	88 0f       	add	r24, r24
    1c90:	99 1f       	adc	r25, r25
    1c92:	0a 94       	dec	r0
    1c94:	e2 f7       	brpl	.-8      	; 0x1c8e <MDIO_SetPinDirection+0xb2>
    1c96:	80 95       	com	r24
    1c98:	84 23       	and	r24, r20
    1c9a:	8c 93       	st	X, r24
    1c9c:	a4 c0       	rjmp	.+328    	; 0x1de6 <MDIO_SetPinDirection+0x20a>
				case DIO_u8PORTC : CLR_BIT(DDRC,Copy_u8Pin); break;
    1c9e:	a4 e3       	ldi	r26, 0x34	; 52
    1ca0:	b0 e0       	ldi	r27, 0x00	; 0
    1ca2:	e4 e3       	ldi	r30, 0x34	; 52
    1ca4:	f0 e0       	ldi	r31, 0x00	; 0
    1ca6:	80 81       	ld	r24, Z
    1ca8:	48 2f       	mov	r20, r24
    1caa:	8b 81       	ldd	r24, Y+3	; 0x03
    1cac:	28 2f       	mov	r18, r24
    1cae:	30 e0       	ldi	r19, 0x00	; 0
    1cb0:	81 e0       	ldi	r24, 0x01	; 1
    1cb2:	90 e0       	ldi	r25, 0x00	; 0
    1cb4:	02 2e       	mov	r0, r18
    1cb6:	02 c0       	rjmp	.+4      	; 0x1cbc <MDIO_SetPinDirection+0xe0>
    1cb8:	88 0f       	add	r24, r24
    1cba:	99 1f       	adc	r25, r25
    1cbc:	0a 94       	dec	r0
    1cbe:	e2 f7       	brpl	.-8      	; 0x1cb8 <MDIO_SetPinDirection+0xdc>
    1cc0:	80 95       	com	r24
    1cc2:	84 23       	and	r24, r20
    1cc4:	8c 93       	st	X, r24
    1cc6:	8f c0       	rjmp	.+286    	; 0x1de6 <MDIO_SetPinDirection+0x20a>
				case DIO_u8PORTD : CLR_BIT(DDRD,Copy_u8Pin); break;
    1cc8:	a1 e3       	ldi	r26, 0x31	; 49
    1cca:	b0 e0       	ldi	r27, 0x00	; 0
    1ccc:	e1 e3       	ldi	r30, 0x31	; 49
    1cce:	f0 e0       	ldi	r31, 0x00	; 0
    1cd0:	80 81       	ld	r24, Z
    1cd2:	48 2f       	mov	r20, r24
    1cd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd6:	28 2f       	mov	r18, r24
    1cd8:	30 e0       	ldi	r19, 0x00	; 0
    1cda:	81 e0       	ldi	r24, 0x01	; 1
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	02 2e       	mov	r0, r18
    1ce0:	02 c0       	rjmp	.+4      	; 0x1ce6 <MDIO_SetPinDirection+0x10a>
    1ce2:	88 0f       	add	r24, r24
    1ce4:	99 1f       	adc	r25, r25
    1ce6:	0a 94       	dec	r0
    1ce8:	e2 f7       	brpl	.-8      	; 0x1ce2 <MDIO_SetPinDirection+0x106>
    1cea:	80 95       	com	r24
    1cec:	84 23       	and	r24, r20
    1cee:	8c 93       	st	X, r24
    1cf0:	7a c0       	rjmp	.+244    	; 0x1de6 <MDIO_SetPinDirection+0x20a>
		        default: Local_ErrorState = R_NOK; break;
    1cf2:	19 82       	std	Y+1, r1	; 0x01
    1cf4:	78 c0       	rjmp	.+240    	; 0x1de6 <MDIO_SetPinDirection+0x20a>
			}

		}
		else if (Copy_Direction == DIO_u8PIN_OUTPUT)
    1cf6:	8c 81       	ldd	r24, Y+4	; 0x04
    1cf8:	81 30       	cpi	r24, 0x01	; 1
    1cfa:	09 f0       	breq	.+2      	; 0x1cfe <MDIO_SetPinDirection+0x122>
    1cfc:	71 c0       	rjmp	.+226    	; 0x1de0 <MDIO_SetPinDirection+0x204>
		{
			switch (Copy_u8Port)
    1cfe:	8a 81       	ldd	r24, Y+2	; 0x02
    1d00:	28 2f       	mov	r18, r24
    1d02:	30 e0       	ldi	r19, 0x00	; 0
    1d04:	3e 83       	std	Y+6, r19	; 0x06
    1d06:	2d 83       	std	Y+5, r18	; 0x05
    1d08:	8d 81       	ldd	r24, Y+5	; 0x05
    1d0a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d0c:	81 30       	cpi	r24, 0x01	; 1
    1d0e:	91 05       	cpc	r25, r1
    1d10:	49 f1       	breq	.+82     	; 0x1d64 <MDIO_SetPinDirection+0x188>
    1d12:	2d 81       	ldd	r18, Y+5	; 0x05
    1d14:	3e 81       	ldd	r19, Y+6	; 0x06
    1d16:	22 30       	cpi	r18, 0x02	; 2
    1d18:	31 05       	cpc	r19, r1
    1d1a:	2c f4       	brge	.+10     	; 0x1d26 <MDIO_SetPinDirection+0x14a>
    1d1c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d1e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d20:	00 97       	sbiw	r24, 0x00	; 0
    1d22:	61 f0       	breq	.+24     	; 0x1d3c <MDIO_SetPinDirection+0x160>
    1d24:	5b c0       	rjmp	.+182    	; 0x1ddc <MDIO_SetPinDirection+0x200>
    1d26:	2d 81       	ldd	r18, Y+5	; 0x05
    1d28:	3e 81       	ldd	r19, Y+6	; 0x06
    1d2a:	22 30       	cpi	r18, 0x02	; 2
    1d2c:	31 05       	cpc	r19, r1
    1d2e:	71 f1       	breq	.+92     	; 0x1d8c <MDIO_SetPinDirection+0x1b0>
    1d30:	8d 81       	ldd	r24, Y+5	; 0x05
    1d32:	9e 81       	ldd	r25, Y+6	; 0x06
    1d34:	83 30       	cpi	r24, 0x03	; 3
    1d36:	91 05       	cpc	r25, r1
    1d38:	e9 f1       	breq	.+122    	; 0x1db4 <MDIO_SetPinDirection+0x1d8>
    1d3a:	50 c0       	rjmp	.+160    	; 0x1ddc <MDIO_SetPinDirection+0x200>
			{
				case DIO_u8PORTA : SET_BIT(DDRA,Copy_u8Pin); break;
    1d3c:	aa e3       	ldi	r26, 0x3A	; 58
    1d3e:	b0 e0       	ldi	r27, 0x00	; 0
    1d40:	ea e3       	ldi	r30, 0x3A	; 58
    1d42:	f0 e0       	ldi	r31, 0x00	; 0
    1d44:	80 81       	ld	r24, Z
    1d46:	48 2f       	mov	r20, r24
    1d48:	8b 81       	ldd	r24, Y+3	; 0x03
    1d4a:	28 2f       	mov	r18, r24
    1d4c:	30 e0       	ldi	r19, 0x00	; 0
    1d4e:	81 e0       	ldi	r24, 0x01	; 1
    1d50:	90 e0       	ldi	r25, 0x00	; 0
    1d52:	02 2e       	mov	r0, r18
    1d54:	02 c0       	rjmp	.+4      	; 0x1d5a <MDIO_SetPinDirection+0x17e>
    1d56:	88 0f       	add	r24, r24
    1d58:	99 1f       	adc	r25, r25
    1d5a:	0a 94       	dec	r0
    1d5c:	e2 f7       	brpl	.-8      	; 0x1d56 <MDIO_SetPinDirection+0x17a>
    1d5e:	84 2b       	or	r24, r20
    1d60:	8c 93       	st	X, r24
    1d62:	41 c0       	rjmp	.+130    	; 0x1de6 <MDIO_SetPinDirection+0x20a>
				case DIO_u8PORTB : SET_BIT(DDRB,Copy_u8Pin); break;
    1d64:	a7 e3       	ldi	r26, 0x37	; 55
    1d66:	b0 e0       	ldi	r27, 0x00	; 0
    1d68:	e7 e3       	ldi	r30, 0x37	; 55
    1d6a:	f0 e0       	ldi	r31, 0x00	; 0
    1d6c:	80 81       	ld	r24, Z
    1d6e:	48 2f       	mov	r20, r24
    1d70:	8b 81       	ldd	r24, Y+3	; 0x03
    1d72:	28 2f       	mov	r18, r24
    1d74:	30 e0       	ldi	r19, 0x00	; 0
    1d76:	81 e0       	ldi	r24, 0x01	; 1
    1d78:	90 e0       	ldi	r25, 0x00	; 0
    1d7a:	02 2e       	mov	r0, r18
    1d7c:	02 c0       	rjmp	.+4      	; 0x1d82 <MDIO_SetPinDirection+0x1a6>
    1d7e:	88 0f       	add	r24, r24
    1d80:	99 1f       	adc	r25, r25
    1d82:	0a 94       	dec	r0
    1d84:	e2 f7       	brpl	.-8      	; 0x1d7e <MDIO_SetPinDirection+0x1a2>
    1d86:	84 2b       	or	r24, r20
    1d88:	8c 93       	st	X, r24
    1d8a:	2d c0       	rjmp	.+90     	; 0x1de6 <MDIO_SetPinDirection+0x20a>
				case DIO_u8PORTC : SET_BIT(DDRC,Copy_u8Pin); break;
    1d8c:	a4 e3       	ldi	r26, 0x34	; 52
    1d8e:	b0 e0       	ldi	r27, 0x00	; 0
    1d90:	e4 e3       	ldi	r30, 0x34	; 52
    1d92:	f0 e0       	ldi	r31, 0x00	; 0
    1d94:	80 81       	ld	r24, Z
    1d96:	48 2f       	mov	r20, r24
    1d98:	8b 81       	ldd	r24, Y+3	; 0x03
    1d9a:	28 2f       	mov	r18, r24
    1d9c:	30 e0       	ldi	r19, 0x00	; 0
    1d9e:	81 e0       	ldi	r24, 0x01	; 1
    1da0:	90 e0       	ldi	r25, 0x00	; 0
    1da2:	02 2e       	mov	r0, r18
    1da4:	02 c0       	rjmp	.+4      	; 0x1daa <MDIO_SetPinDirection+0x1ce>
    1da6:	88 0f       	add	r24, r24
    1da8:	99 1f       	adc	r25, r25
    1daa:	0a 94       	dec	r0
    1dac:	e2 f7       	brpl	.-8      	; 0x1da6 <MDIO_SetPinDirection+0x1ca>
    1dae:	84 2b       	or	r24, r20
    1db0:	8c 93       	st	X, r24
    1db2:	19 c0       	rjmp	.+50     	; 0x1de6 <MDIO_SetPinDirection+0x20a>
				case DIO_u8PORTD : SET_BIT(DDRD,Copy_u8Pin); break;
    1db4:	a1 e3       	ldi	r26, 0x31	; 49
    1db6:	b0 e0       	ldi	r27, 0x00	; 0
    1db8:	e1 e3       	ldi	r30, 0x31	; 49
    1dba:	f0 e0       	ldi	r31, 0x00	; 0
    1dbc:	80 81       	ld	r24, Z
    1dbe:	48 2f       	mov	r20, r24
    1dc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc2:	28 2f       	mov	r18, r24
    1dc4:	30 e0       	ldi	r19, 0x00	; 0
    1dc6:	81 e0       	ldi	r24, 0x01	; 1
    1dc8:	90 e0       	ldi	r25, 0x00	; 0
    1dca:	02 2e       	mov	r0, r18
    1dcc:	02 c0       	rjmp	.+4      	; 0x1dd2 <MDIO_SetPinDirection+0x1f6>
    1dce:	88 0f       	add	r24, r24
    1dd0:	99 1f       	adc	r25, r25
    1dd2:	0a 94       	dec	r0
    1dd4:	e2 f7       	brpl	.-8      	; 0x1dce <MDIO_SetPinDirection+0x1f2>
    1dd6:	84 2b       	or	r24, r20
    1dd8:	8c 93       	st	X, r24
    1dda:	05 c0       	rjmp	.+10     	; 0x1de6 <MDIO_SetPinDirection+0x20a>
				default: Local_ErrorState = R_NOK; break;
    1ddc:	19 82       	std	Y+1, r1	; 0x01
    1dde:	03 c0       	rjmp	.+6      	; 0x1de6 <MDIO_SetPinDirection+0x20a>
			}

		}
		else
		{
			Local_ErrorState = R_NOK;
    1de0:	19 82       	std	Y+1, r1	; 0x01
    1de2:	01 c0       	rjmp	.+2      	; 0x1de6 <MDIO_SetPinDirection+0x20a>
		}
	}
	else
	{
		Local_ErrorState = R_NOK;
    1de4:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_ErrorState;
    1de6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1de8:	28 96       	adiw	r28, 0x08	; 8
    1dea:	0f b6       	in	r0, 0x3f	; 63
    1dec:	f8 94       	cli
    1dee:	de bf       	out	0x3e, r29	; 62
    1df0:	0f be       	out	0x3f, r0	; 63
    1df2:	cd bf       	out	0x3d, r28	; 61
    1df4:	cf 91       	pop	r28
    1df6:	df 91       	pop	r29
    1df8:	08 95       	ret

00001dfa <MDIO_SetPortDirection>:

error_state_t	MDIO_SetPortDirection (dio_u8port_t Copy_u8Port, dio_u8portdirec_t Copy_Direction)
{
    1dfa:	df 93       	push	r29
    1dfc:	cf 93       	push	r28
    1dfe:	00 d0       	rcall	.+0      	; 0x1e00 <MDIO_SetPortDirection+0x6>
    1e00:	00 d0       	rcall	.+0      	; 0x1e02 <MDIO_SetPortDirection+0x8>
    1e02:	0f 92       	push	r0
    1e04:	cd b7       	in	r28, 0x3d	; 61
    1e06:	de b7       	in	r29, 0x3e	; 62
    1e08:	8a 83       	std	Y+2, r24	; 0x02
    1e0a:	6b 83       	std	Y+3, r22	; 0x03
	error_state_t Local_ErrorState = R_OK;
    1e0c:	81 e0       	ldi	r24, 0x01	; 1
    1e0e:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8Port <= DIO_u8PORTD)
    1e10:	8a 81       	ldd	r24, Y+2	; 0x02
    1e12:	84 30       	cpi	r24, 0x04	; 4
    1e14:	a8 f5       	brcc	.+106    	; 0x1e80 <MDIO_SetPortDirection+0x86>
	{
		switch (Copy_u8Port)
    1e16:	8a 81       	ldd	r24, Y+2	; 0x02
    1e18:	28 2f       	mov	r18, r24
    1e1a:	30 e0       	ldi	r19, 0x00	; 0
    1e1c:	3d 83       	std	Y+5, r19	; 0x05
    1e1e:	2c 83       	std	Y+4, r18	; 0x04
    1e20:	8c 81       	ldd	r24, Y+4	; 0x04
    1e22:	9d 81       	ldd	r25, Y+5	; 0x05
    1e24:	81 30       	cpi	r24, 0x01	; 1
    1e26:	91 05       	cpc	r25, r1
    1e28:	d1 f0       	breq	.+52     	; 0x1e5e <MDIO_SetPortDirection+0x64>
    1e2a:	2c 81       	ldd	r18, Y+4	; 0x04
    1e2c:	3d 81       	ldd	r19, Y+5	; 0x05
    1e2e:	22 30       	cpi	r18, 0x02	; 2
    1e30:	31 05       	cpc	r19, r1
    1e32:	2c f4       	brge	.+10     	; 0x1e3e <MDIO_SetPortDirection+0x44>
    1e34:	8c 81       	ldd	r24, Y+4	; 0x04
    1e36:	9d 81       	ldd	r25, Y+5	; 0x05
    1e38:	00 97       	sbiw	r24, 0x00	; 0
    1e3a:	61 f0       	breq	.+24     	; 0x1e54 <MDIO_SetPortDirection+0x5a>
    1e3c:	1f c0       	rjmp	.+62     	; 0x1e7c <MDIO_SetPortDirection+0x82>
    1e3e:	2c 81       	ldd	r18, Y+4	; 0x04
    1e40:	3d 81       	ldd	r19, Y+5	; 0x05
    1e42:	22 30       	cpi	r18, 0x02	; 2
    1e44:	31 05       	cpc	r19, r1
    1e46:	81 f0       	breq	.+32     	; 0x1e68 <MDIO_SetPortDirection+0x6e>
    1e48:	8c 81       	ldd	r24, Y+4	; 0x04
    1e4a:	9d 81       	ldd	r25, Y+5	; 0x05
    1e4c:	83 30       	cpi	r24, 0x03	; 3
    1e4e:	91 05       	cpc	r25, r1
    1e50:	81 f0       	breq	.+32     	; 0x1e72 <MDIO_SetPortDirection+0x78>
    1e52:	14 c0       	rjmp	.+40     	; 0x1e7c <MDIO_SetPortDirection+0x82>
		{
			case DIO_u8PORTA : DDRA = Copy_Direction; break;
    1e54:	ea e3       	ldi	r30, 0x3A	; 58
    1e56:	f0 e0       	ldi	r31, 0x00	; 0
    1e58:	8b 81       	ldd	r24, Y+3	; 0x03
    1e5a:	80 83       	st	Z, r24
    1e5c:	12 c0       	rjmp	.+36     	; 0x1e82 <MDIO_SetPortDirection+0x88>
			case DIO_u8PORTB : DDRB = Copy_Direction; break;
    1e5e:	e7 e3       	ldi	r30, 0x37	; 55
    1e60:	f0 e0       	ldi	r31, 0x00	; 0
    1e62:	8b 81       	ldd	r24, Y+3	; 0x03
    1e64:	80 83       	st	Z, r24
    1e66:	0d c0       	rjmp	.+26     	; 0x1e82 <MDIO_SetPortDirection+0x88>
			case DIO_u8PORTC : DDRC = Copy_Direction; break;
    1e68:	e4 e3       	ldi	r30, 0x34	; 52
    1e6a:	f0 e0       	ldi	r31, 0x00	; 0
    1e6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e6e:	80 83       	st	Z, r24
    1e70:	08 c0       	rjmp	.+16     	; 0x1e82 <MDIO_SetPortDirection+0x88>
			case DIO_u8PORTD : DDRD = Copy_Direction; break;
    1e72:	e1 e3       	ldi	r30, 0x31	; 49
    1e74:	f0 e0       	ldi	r31, 0x00	; 0
    1e76:	8b 81       	ldd	r24, Y+3	; 0x03
    1e78:	80 83       	st	Z, r24
    1e7a:	03 c0       	rjmp	.+6      	; 0x1e82 <MDIO_SetPortDirection+0x88>
			default: Local_ErrorState = R_NOK; break;
    1e7c:	19 82       	std	Y+1, r1	; 0x01
    1e7e:	01 c0       	rjmp	.+2      	; 0x1e82 <MDIO_SetPortDirection+0x88>
		}
	}
	else
	{
		Local_ErrorState = R_NOK;
    1e80:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_ErrorState;
    1e82:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e84:	0f 90       	pop	r0
    1e86:	0f 90       	pop	r0
    1e88:	0f 90       	pop	r0
    1e8a:	0f 90       	pop	r0
    1e8c:	0f 90       	pop	r0
    1e8e:	cf 91       	pop	r28
    1e90:	df 91       	pop	r29
    1e92:	08 95       	ret

00001e94 <MDIO_SetPinValue>:


error_state_t	MDIO_SetPinValue (dio_u8port_t Copy_u8Port, dio_u8pin_t Copy_u8Pin, dio_value_t Copy_Value)
{
    1e94:	df 93       	push	r29
    1e96:	cf 93       	push	r28
    1e98:	cd b7       	in	r28, 0x3d	; 61
    1e9a:	de b7       	in	r29, 0x3e	; 62
    1e9c:	28 97       	sbiw	r28, 0x08	; 8
    1e9e:	0f b6       	in	r0, 0x3f	; 63
    1ea0:	f8 94       	cli
    1ea2:	de bf       	out	0x3e, r29	; 62
    1ea4:	0f be       	out	0x3f, r0	; 63
    1ea6:	cd bf       	out	0x3d, r28	; 61
    1ea8:	8a 83       	std	Y+2, r24	; 0x02
    1eaa:	6b 83       	std	Y+3, r22	; 0x03
    1eac:	4c 83       	std	Y+4, r20	; 0x04
	error_state_t Local_ErrorState = R_OK;
    1eae:	81 e0       	ldi	r24, 0x01	; 1
    1eb0:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8Pin <= DIO_u8PIN7)
    1eb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb4:	88 30       	cpi	r24, 0x08	; 8
    1eb6:	08 f0       	brcs	.+2      	; 0x1eba <MDIO_SetPinValue+0x26>
    1eb8:	ef c0       	rjmp	.+478    	; 0x2098 <MDIO_SetPinValue+0x204>
	{
		if (Copy_Value == DIO_u8PIN_LOW)
    1eba:	8c 81       	ldd	r24, Y+4	; 0x04
    1ebc:	88 23       	and	r24, r24
    1ebe:	09 f0       	breq	.+2      	; 0x1ec2 <MDIO_SetPinValue+0x2e>
    1ec0:	74 c0       	rjmp	.+232    	; 0x1faa <MDIO_SetPinValue+0x116>
		{
			switch (Copy_u8Port)
    1ec2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec4:	28 2f       	mov	r18, r24
    1ec6:	30 e0       	ldi	r19, 0x00	; 0
    1ec8:	38 87       	std	Y+8, r19	; 0x08
    1eca:	2f 83       	std	Y+7, r18	; 0x07
    1ecc:	8f 81       	ldd	r24, Y+7	; 0x07
    1ece:	98 85       	ldd	r25, Y+8	; 0x08
    1ed0:	81 30       	cpi	r24, 0x01	; 1
    1ed2:	91 05       	cpc	r25, r1
    1ed4:	59 f1       	breq	.+86     	; 0x1f2c <MDIO_SetPinValue+0x98>
    1ed6:	2f 81       	ldd	r18, Y+7	; 0x07
    1ed8:	38 85       	ldd	r19, Y+8	; 0x08
    1eda:	22 30       	cpi	r18, 0x02	; 2
    1edc:	31 05       	cpc	r19, r1
    1ede:	2c f4       	brge	.+10     	; 0x1eea <MDIO_SetPinValue+0x56>
    1ee0:	8f 81       	ldd	r24, Y+7	; 0x07
    1ee2:	98 85       	ldd	r25, Y+8	; 0x08
    1ee4:	00 97       	sbiw	r24, 0x00	; 0
    1ee6:	69 f0       	breq	.+26     	; 0x1f02 <MDIO_SetPinValue+0x6e>
    1ee8:	d8 c0       	rjmp	.+432    	; 0x209a <MDIO_SetPinValue+0x206>
    1eea:	2f 81       	ldd	r18, Y+7	; 0x07
    1eec:	38 85       	ldd	r19, Y+8	; 0x08
    1eee:	22 30       	cpi	r18, 0x02	; 2
    1ef0:	31 05       	cpc	r19, r1
    1ef2:	89 f1       	breq	.+98     	; 0x1f56 <MDIO_SetPinValue+0xc2>
    1ef4:	8f 81       	ldd	r24, Y+7	; 0x07
    1ef6:	98 85       	ldd	r25, Y+8	; 0x08
    1ef8:	83 30       	cpi	r24, 0x03	; 3
    1efa:	91 05       	cpc	r25, r1
    1efc:	09 f4       	brne	.+2      	; 0x1f00 <MDIO_SetPinValue+0x6c>
    1efe:	40 c0       	rjmp	.+128    	; 0x1f80 <MDIO_SetPinValue+0xec>
    1f00:	cc c0       	rjmp	.+408    	; 0x209a <MDIO_SetPinValue+0x206>
			{
				case DIO_u8PORTA : CLR_BIT(PORTA,Copy_u8Pin); break;
    1f02:	ab e3       	ldi	r26, 0x3B	; 59
    1f04:	b0 e0       	ldi	r27, 0x00	; 0
    1f06:	eb e3       	ldi	r30, 0x3B	; 59
    1f08:	f0 e0       	ldi	r31, 0x00	; 0
    1f0a:	80 81       	ld	r24, Z
    1f0c:	48 2f       	mov	r20, r24
    1f0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f10:	28 2f       	mov	r18, r24
    1f12:	30 e0       	ldi	r19, 0x00	; 0
    1f14:	81 e0       	ldi	r24, 0x01	; 1
    1f16:	90 e0       	ldi	r25, 0x00	; 0
    1f18:	02 2e       	mov	r0, r18
    1f1a:	02 c0       	rjmp	.+4      	; 0x1f20 <MDIO_SetPinValue+0x8c>
    1f1c:	88 0f       	add	r24, r24
    1f1e:	99 1f       	adc	r25, r25
    1f20:	0a 94       	dec	r0
    1f22:	e2 f7       	brpl	.-8      	; 0x1f1c <MDIO_SetPinValue+0x88>
    1f24:	80 95       	com	r24
    1f26:	84 23       	and	r24, r20
    1f28:	8c 93       	st	X, r24
    1f2a:	b7 c0       	rjmp	.+366    	; 0x209a <MDIO_SetPinValue+0x206>
				case DIO_u8PORTB : CLR_BIT(PORTB,Copy_u8Pin); break;
    1f2c:	a8 e3       	ldi	r26, 0x38	; 56
    1f2e:	b0 e0       	ldi	r27, 0x00	; 0
    1f30:	e8 e3       	ldi	r30, 0x38	; 56
    1f32:	f0 e0       	ldi	r31, 0x00	; 0
    1f34:	80 81       	ld	r24, Z
    1f36:	48 2f       	mov	r20, r24
    1f38:	8b 81       	ldd	r24, Y+3	; 0x03
    1f3a:	28 2f       	mov	r18, r24
    1f3c:	30 e0       	ldi	r19, 0x00	; 0
    1f3e:	81 e0       	ldi	r24, 0x01	; 1
    1f40:	90 e0       	ldi	r25, 0x00	; 0
    1f42:	02 2e       	mov	r0, r18
    1f44:	02 c0       	rjmp	.+4      	; 0x1f4a <MDIO_SetPinValue+0xb6>
    1f46:	88 0f       	add	r24, r24
    1f48:	99 1f       	adc	r25, r25
    1f4a:	0a 94       	dec	r0
    1f4c:	e2 f7       	brpl	.-8      	; 0x1f46 <MDIO_SetPinValue+0xb2>
    1f4e:	80 95       	com	r24
    1f50:	84 23       	and	r24, r20
    1f52:	8c 93       	st	X, r24
    1f54:	a2 c0       	rjmp	.+324    	; 0x209a <MDIO_SetPinValue+0x206>
				case DIO_u8PORTC : CLR_BIT(PORTC,Copy_u8Pin); break;
    1f56:	a5 e3       	ldi	r26, 0x35	; 53
    1f58:	b0 e0       	ldi	r27, 0x00	; 0
    1f5a:	e5 e3       	ldi	r30, 0x35	; 53
    1f5c:	f0 e0       	ldi	r31, 0x00	; 0
    1f5e:	80 81       	ld	r24, Z
    1f60:	48 2f       	mov	r20, r24
    1f62:	8b 81       	ldd	r24, Y+3	; 0x03
    1f64:	28 2f       	mov	r18, r24
    1f66:	30 e0       	ldi	r19, 0x00	; 0
    1f68:	81 e0       	ldi	r24, 0x01	; 1
    1f6a:	90 e0       	ldi	r25, 0x00	; 0
    1f6c:	02 2e       	mov	r0, r18
    1f6e:	02 c0       	rjmp	.+4      	; 0x1f74 <MDIO_SetPinValue+0xe0>
    1f70:	88 0f       	add	r24, r24
    1f72:	99 1f       	adc	r25, r25
    1f74:	0a 94       	dec	r0
    1f76:	e2 f7       	brpl	.-8      	; 0x1f70 <MDIO_SetPinValue+0xdc>
    1f78:	80 95       	com	r24
    1f7a:	84 23       	and	r24, r20
    1f7c:	8c 93       	st	X, r24
    1f7e:	8d c0       	rjmp	.+282    	; 0x209a <MDIO_SetPinValue+0x206>
				case DIO_u8PORTD : CLR_BIT(PORTD,Copy_u8Pin); break;
    1f80:	a2 e3       	ldi	r26, 0x32	; 50
    1f82:	b0 e0       	ldi	r27, 0x00	; 0
    1f84:	e2 e3       	ldi	r30, 0x32	; 50
    1f86:	f0 e0       	ldi	r31, 0x00	; 0
    1f88:	80 81       	ld	r24, Z
    1f8a:	48 2f       	mov	r20, r24
    1f8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f8e:	28 2f       	mov	r18, r24
    1f90:	30 e0       	ldi	r19, 0x00	; 0
    1f92:	81 e0       	ldi	r24, 0x01	; 1
    1f94:	90 e0       	ldi	r25, 0x00	; 0
    1f96:	02 2e       	mov	r0, r18
    1f98:	02 c0       	rjmp	.+4      	; 0x1f9e <MDIO_SetPinValue+0x10a>
    1f9a:	88 0f       	add	r24, r24
    1f9c:	99 1f       	adc	r25, r25
    1f9e:	0a 94       	dec	r0
    1fa0:	e2 f7       	brpl	.-8      	; 0x1f9a <MDIO_SetPinValue+0x106>
    1fa2:	80 95       	com	r24
    1fa4:	84 23       	and	r24, r20
    1fa6:	8c 93       	st	X, r24
    1fa8:	78 c0       	rjmp	.+240    	; 0x209a <MDIO_SetPinValue+0x206>
			}

		}
		else if (Copy_Value == DIO_u8PIN_HIGH)
    1faa:	8c 81       	ldd	r24, Y+4	; 0x04
    1fac:	81 30       	cpi	r24, 0x01	; 1
    1fae:	09 f0       	breq	.+2      	; 0x1fb2 <MDIO_SetPinValue+0x11e>
    1fb0:	71 c0       	rjmp	.+226    	; 0x2094 <MDIO_SetPinValue+0x200>
		{
			switch (Copy_u8Port)
    1fb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb4:	28 2f       	mov	r18, r24
    1fb6:	30 e0       	ldi	r19, 0x00	; 0
    1fb8:	3e 83       	std	Y+6, r19	; 0x06
    1fba:	2d 83       	std	Y+5, r18	; 0x05
    1fbc:	8d 81       	ldd	r24, Y+5	; 0x05
    1fbe:	9e 81       	ldd	r25, Y+6	; 0x06
    1fc0:	81 30       	cpi	r24, 0x01	; 1
    1fc2:	91 05       	cpc	r25, r1
    1fc4:	49 f1       	breq	.+82     	; 0x2018 <MDIO_SetPinValue+0x184>
    1fc6:	2d 81       	ldd	r18, Y+5	; 0x05
    1fc8:	3e 81       	ldd	r19, Y+6	; 0x06
    1fca:	22 30       	cpi	r18, 0x02	; 2
    1fcc:	31 05       	cpc	r19, r1
    1fce:	2c f4       	brge	.+10     	; 0x1fda <MDIO_SetPinValue+0x146>
    1fd0:	8d 81       	ldd	r24, Y+5	; 0x05
    1fd2:	9e 81       	ldd	r25, Y+6	; 0x06
    1fd4:	00 97       	sbiw	r24, 0x00	; 0
    1fd6:	61 f0       	breq	.+24     	; 0x1ff0 <MDIO_SetPinValue+0x15c>
    1fd8:	5b c0       	rjmp	.+182    	; 0x2090 <MDIO_SetPinValue+0x1fc>
    1fda:	2d 81       	ldd	r18, Y+5	; 0x05
    1fdc:	3e 81       	ldd	r19, Y+6	; 0x06
    1fde:	22 30       	cpi	r18, 0x02	; 2
    1fe0:	31 05       	cpc	r19, r1
    1fe2:	71 f1       	breq	.+92     	; 0x2040 <MDIO_SetPinValue+0x1ac>
    1fe4:	8d 81       	ldd	r24, Y+5	; 0x05
    1fe6:	9e 81       	ldd	r25, Y+6	; 0x06
    1fe8:	83 30       	cpi	r24, 0x03	; 3
    1fea:	91 05       	cpc	r25, r1
    1fec:	e9 f1       	breq	.+122    	; 0x2068 <MDIO_SetPinValue+0x1d4>
    1fee:	50 c0       	rjmp	.+160    	; 0x2090 <MDIO_SetPinValue+0x1fc>
			{
				case DIO_u8PORTA : SET_BIT(PORTA,Copy_u8Pin); break;
    1ff0:	ab e3       	ldi	r26, 0x3B	; 59
    1ff2:	b0 e0       	ldi	r27, 0x00	; 0
    1ff4:	eb e3       	ldi	r30, 0x3B	; 59
    1ff6:	f0 e0       	ldi	r31, 0x00	; 0
    1ff8:	80 81       	ld	r24, Z
    1ffa:	48 2f       	mov	r20, r24
    1ffc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ffe:	28 2f       	mov	r18, r24
    2000:	30 e0       	ldi	r19, 0x00	; 0
    2002:	81 e0       	ldi	r24, 0x01	; 1
    2004:	90 e0       	ldi	r25, 0x00	; 0
    2006:	02 2e       	mov	r0, r18
    2008:	02 c0       	rjmp	.+4      	; 0x200e <MDIO_SetPinValue+0x17a>
    200a:	88 0f       	add	r24, r24
    200c:	99 1f       	adc	r25, r25
    200e:	0a 94       	dec	r0
    2010:	e2 f7       	brpl	.-8      	; 0x200a <MDIO_SetPinValue+0x176>
    2012:	84 2b       	or	r24, r20
    2014:	8c 93       	st	X, r24
    2016:	41 c0       	rjmp	.+130    	; 0x209a <MDIO_SetPinValue+0x206>
				case DIO_u8PORTB : SET_BIT(PORTB,Copy_u8Pin); break;
    2018:	a8 e3       	ldi	r26, 0x38	; 56
    201a:	b0 e0       	ldi	r27, 0x00	; 0
    201c:	e8 e3       	ldi	r30, 0x38	; 56
    201e:	f0 e0       	ldi	r31, 0x00	; 0
    2020:	80 81       	ld	r24, Z
    2022:	48 2f       	mov	r20, r24
    2024:	8b 81       	ldd	r24, Y+3	; 0x03
    2026:	28 2f       	mov	r18, r24
    2028:	30 e0       	ldi	r19, 0x00	; 0
    202a:	81 e0       	ldi	r24, 0x01	; 1
    202c:	90 e0       	ldi	r25, 0x00	; 0
    202e:	02 2e       	mov	r0, r18
    2030:	02 c0       	rjmp	.+4      	; 0x2036 <MDIO_SetPinValue+0x1a2>
    2032:	88 0f       	add	r24, r24
    2034:	99 1f       	adc	r25, r25
    2036:	0a 94       	dec	r0
    2038:	e2 f7       	brpl	.-8      	; 0x2032 <MDIO_SetPinValue+0x19e>
    203a:	84 2b       	or	r24, r20
    203c:	8c 93       	st	X, r24
    203e:	2d c0       	rjmp	.+90     	; 0x209a <MDIO_SetPinValue+0x206>
				case DIO_u8PORTC : SET_BIT(PORTC,Copy_u8Pin); break;
    2040:	a5 e3       	ldi	r26, 0x35	; 53
    2042:	b0 e0       	ldi	r27, 0x00	; 0
    2044:	e5 e3       	ldi	r30, 0x35	; 53
    2046:	f0 e0       	ldi	r31, 0x00	; 0
    2048:	80 81       	ld	r24, Z
    204a:	48 2f       	mov	r20, r24
    204c:	8b 81       	ldd	r24, Y+3	; 0x03
    204e:	28 2f       	mov	r18, r24
    2050:	30 e0       	ldi	r19, 0x00	; 0
    2052:	81 e0       	ldi	r24, 0x01	; 1
    2054:	90 e0       	ldi	r25, 0x00	; 0
    2056:	02 2e       	mov	r0, r18
    2058:	02 c0       	rjmp	.+4      	; 0x205e <MDIO_SetPinValue+0x1ca>
    205a:	88 0f       	add	r24, r24
    205c:	99 1f       	adc	r25, r25
    205e:	0a 94       	dec	r0
    2060:	e2 f7       	brpl	.-8      	; 0x205a <MDIO_SetPinValue+0x1c6>
    2062:	84 2b       	or	r24, r20
    2064:	8c 93       	st	X, r24
    2066:	19 c0       	rjmp	.+50     	; 0x209a <MDIO_SetPinValue+0x206>
				case DIO_u8PORTD : SET_BIT(PORTD,Copy_u8Pin); break;
    2068:	a2 e3       	ldi	r26, 0x32	; 50
    206a:	b0 e0       	ldi	r27, 0x00	; 0
    206c:	e2 e3       	ldi	r30, 0x32	; 50
    206e:	f0 e0       	ldi	r31, 0x00	; 0
    2070:	80 81       	ld	r24, Z
    2072:	48 2f       	mov	r20, r24
    2074:	8b 81       	ldd	r24, Y+3	; 0x03
    2076:	28 2f       	mov	r18, r24
    2078:	30 e0       	ldi	r19, 0x00	; 0
    207a:	81 e0       	ldi	r24, 0x01	; 1
    207c:	90 e0       	ldi	r25, 0x00	; 0
    207e:	02 2e       	mov	r0, r18
    2080:	02 c0       	rjmp	.+4      	; 0x2086 <MDIO_SetPinValue+0x1f2>
    2082:	88 0f       	add	r24, r24
    2084:	99 1f       	adc	r25, r25
    2086:	0a 94       	dec	r0
    2088:	e2 f7       	brpl	.-8      	; 0x2082 <MDIO_SetPinValue+0x1ee>
    208a:	84 2b       	or	r24, r20
    208c:	8c 93       	st	X, r24
    208e:	05 c0       	rjmp	.+10     	; 0x209a <MDIO_SetPinValue+0x206>
		    	default: Local_ErrorState = R_NOK; break;
    2090:	19 82       	std	Y+1, r1	; 0x01
    2092:	03 c0       	rjmp	.+6      	; 0x209a <MDIO_SetPinValue+0x206>
			}

		}
		else
		{
			Local_ErrorState = R_NOK;
    2094:	19 82       	std	Y+1, r1	; 0x01
    2096:	01 c0       	rjmp	.+2      	; 0x209a <MDIO_SetPinValue+0x206>
		}
	}
	else
	{
		Local_ErrorState = R_NOK;
    2098:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_ErrorState;
    209a:	89 81       	ldd	r24, Y+1	; 0x01
}
    209c:	28 96       	adiw	r28, 0x08	; 8
    209e:	0f b6       	in	r0, 0x3f	; 63
    20a0:	f8 94       	cli
    20a2:	de bf       	out	0x3e, r29	; 62
    20a4:	0f be       	out	0x3f, r0	; 63
    20a6:	cd bf       	out	0x3d, r28	; 61
    20a8:	cf 91       	pop	r28
    20aa:	df 91       	pop	r29
    20ac:	08 95       	ret

000020ae <MDIO_SetPortValue>:


error_state_t	MDIO_SetPortValue (dio_u8port_t Copy_u8Port, dio_u8portvalue_t Copy_Value)
{
    20ae:	df 93       	push	r29
    20b0:	cf 93       	push	r28
    20b2:	00 d0       	rcall	.+0      	; 0x20b4 <MDIO_SetPortValue+0x6>
    20b4:	00 d0       	rcall	.+0      	; 0x20b6 <MDIO_SetPortValue+0x8>
    20b6:	0f 92       	push	r0
    20b8:	cd b7       	in	r28, 0x3d	; 61
    20ba:	de b7       	in	r29, 0x3e	; 62
    20bc:	8a 83       	std	Y+2, r24	; 0x02
    20be:	6b 83       	std	Y+3, r22	; 0x03
	error_state_t Local_ErrorState = R_OK;
    20c0:	81 e0       	ldi	r24, 0x01	; 1
    20c2:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8Port <= DIO_u8PORTD)
    20c4:	8a 81       	ldd	r24, Y+2	; 0x02
    20c6:	84 30       	cpi	r24, 0x04	; 4
    20c8:	a8 f5       	brcc	.+106    	; 0x2134 <MDIO_SetPortValue+0x86>
	{
		switch (Copy_u8Port)
    20ca:	8a 81       	ldd	r24, Y+2	; 0x02
    20cc:	28 2f       	mov	r18, r24
    20ce:	30 e0       	ldi	r19, 0x00	; 0
    20d0:	3d 83       	std	Y+5, r19	; 0x05
    20d2:	2c 83       	std	Y+4, r18	; 0x04
    20d4:	8c 81       	ldd	r24, Y+4	; 0x04
    20d6:	9d 81       	ldd	r25, Y+5	; 0x05
    20d8:	81 30       	cpi	r24, 0x01	; 1
    20da:	91 05       	cpc	r25, r1
    20dc:	d1 f0       	breq	.+52     	; 0x2112 <MDIO_SetPortValue+0x64>
    20de:	2c 81       	ldd	r18, Y+4	; 0x04
    20e0:	3d 81       	ldd	r19, Y+5	; 0x05
    20e2:	22 30       	cpi	r18, 0x02	; 2
    20e4:	31 05       	cpc	r19, r1
    20e6:	2c f4       	brge	.+10     	; 0x20f2 <MDIO_SetPortValue+0x44>
    20e8:	8c 81       	ldd	r24, Y+4	; 0x04
    20ea:	9d 81       	ldd	r25, Y+5	; 0x05
    20ec:	00 97       	sbiw	r24, 0x00	; 0
    20ee:	61 f0       	breq	.+24     	; 0x2108 <MDIO_SetPortValue+0x5a>
    20f0:	1f c0       	rjmp	.+62     	; 0x2130 <MDIO_SetPortValue+0x82>
    20f2:	2c 81       	ldd	r18, Y+4	; 0x04
    20f4:	3d 81       	ldd	r19, Y+5	; 0x05
    20f6:	22 30       	cpi	r18, 0x02	; 2
    20f8:	31 05       	cpc	r19, r1
    20fa:	81 f0       	breq	.+32     	; 0x211c <MDIO_SetPortValue+0x6e>
    20fc:	8c 81       	ldd	r24, Y+4	; 0x04
    20fe:	9d 81       	ldd	r25, Y+5	; 0x05
    2100:	83 30       	cpi	r24, 0x03	; 3
    2102:	91 05       	cpc	r25, r1
    2104:	81 f0       	breq	.+32     	; 0x2126 <MDIO_SetPortValue+0x78>
    2106:	14 c0       	rjmp	.+40     	; 0x2130 <MDIO_SetPortValue+0x82>
		{
			case DIO_u8PORTA : PORTA = Copy_Value; break;
    2108:	eb e3       	ldi	r30, 0x3B	; 59
    210a:	f0 e0       	ldi	r31, 0x00	; 0
    210c:	8b 81       	ldd	r24, Y+3	; 0x03
    210e:	80 83       	st	Z, r24
    2110:	12 c0       	rjmp	.+36     	; 0x2136 <MDIO_SetPortValue+0x88>
			case DIO_u8PORTB : PORTB = Copy_Value; break;
    2112:	e8 e3       	ldi	r30, 0x38	; 56
    2114:	f0 e0       	ldi	r31, 0x00	; 0
    2116:	8b 81       	ldd	r24, Y+3	; 0x03
    2118:	80 83       	st	Z, r24
    211a:	0d c0       	rjmp	.+26     	; 0x2136 <MDIO_SetPortValue+0x88>
			case DIO_u8PORTC : PORTC = Copy_Value; break;
    211c:	e5 e3       	ldi	r30, 0x35	; 53
    211e:	f0 e0       	ldi	r31, 0x00	; 0
    2120:	8b 81       	ldd	r24, Y+3	; 0x03
    2122:	80 83       	st	Z, r24
    2124:	08 c0       	rjmp	.+16     	; 0x2136 <MDIO_SetPortValue+0x88>
			case DIO_u8PORTD : PORTD = Copy_Value; break;
    2126:	e2 e3       	ldi	r30, 0x32	; 50
    2128:	f0 e0       	ldi	r31, 0x00	; 0
    212a:	8b 81       	ldd	r24, Y+3	; 0x03
    212c:	80 83       	st	Z, r24
    212e:	03 c0       	rjmp	.+6      	; 0x2136 <MDIO_SetPortValue+0x88>
			default: Local_ErrorState = R_NOK; break;
    2130:	19 82       	std	Y+1, r1	; 0x01
    2132:	01 c0       	rjmp	.+2      	; 0x2136 <MDIO_SetPortValue+0x88>
		}
	}
	else
	{
		Local_ErrorState = R_NOK;
    2134:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_ErrorState;
    2136:	89 81       	ldd	r24, Y+1	; 0x01
}
    2138:	0f 90       	pop	r0
    213a:	0f 90       	pop	r0
    213c:	0f 90       	pop	r0
    213e:	0f 90       	pop	r0
    2140:	0f 90       	pop	r0
    2142:	cf 91       	pop	r28
    2144:	df 91       	pop	r29
    2146:	08 95       	ret

00002148 <MDIO_GetPinValue>:


error_state_t	MDIO_GetPinValue (dio_u8port_t Copy_u8Port, dio_u8pin_t Copy_u8Pin, u8* Copy_pu8Value)
{
    2148:	df 93       	push	r29
    214a:	cf 93       	push	r28
    214c:	cd b7       	in	r28, 0x3d	; 61
    214e:	de b7       	in	r29, 0x3e	; 62
    2150:	27 97       	sbiw	r28, 0x07	; 7
    2152:	0f b6       	in	r0, 0x3f	; 63
    2154:	f8 94       	cli
    2156:	de bf       	out	0x3e, r29	; 62
    2158:	0f be       	out	0x3f, r0	; 63
    215a:	cd bf       	out	0x3d, r28	; 61
    215c:	8a 83       	std	Y+2, r24	; 0x02
    215e:	6b 83       	std	Y+3, r22	; 0x03
    2160:	5d 83       	std	Y+5, r21	; 0x05
    2162:	4c 83       	std	Y+4, r20	; 0x04
	error_state_t Local_ErrorState = R_OK;
    2164:	81 e0       	ldi	r24, 0x01	; 1
    2166:	89 83       	std	Y+1, r24	; 0x01

	if((Copy_pu8Value != NULL) && (Copy_u8Pin <= DIO_u8PIN7))
    2168:	8c 81       	ldd	r24, Y+4	; 0x04
    216a:	9d 81       	ldd	r25, Y+5	; 0x05
    216c:	00 97       	sbiw	r24, 0x00	; 0
    216e:	09 f4       	brne	.+2      	; 0x2172 <MDIO_GetPinValue+0x2a>
    2170:	77 c0       	rjmp	.+238    	; 0x2260 <MDIO_GetPinValue+0x118>
    2172:	8b 81       	ldd	r24, Y+3	; 0x03
    2174:	88 30       	cpi	r24, 0x08	; 8
    2176:	08 f0       	brcs	.+2      	; 0x217a <MDIO_GetPinValue+0x32>
    2178:	73 c0       	rjmp	.+230    	; 0x2260 <MDIO_GetPinValue+0x118>
	{
		switch (Copy_u8Port)
    217a:	8a 81       	ldd	r24, Y+2	; 0x02
    217c:	28 2f       	mov	r18, r24
    217e:	30 e0       	ldi	r19, 0x00	; 0
    2180:	3f 83       	std	Y+7, r19	; 0x07
    2182:	2e 83       	std	Y+6, r18	; 0x06
    2184:	4e 81       	ldd	r20, Y+6	; 0x06
    2186:	5f 81       	ldd	r21, Y+7	; 0x07
    2188:	41 30       	cpi	r20, 0x01	; 1
    218a:	51 05       	cpc	r21, r1
    218c:	59 f1       	breq	.+86     	; 0x21e4 <MDIO_GetPinValue+0x9c>
    218e:	8e 81       	ldd	r24, Y+6	; 0x06
    2190:	9f 81       	ldd	r25, Y+7	; 0x07
    2192:	82 30       	cpi	r24, 0x02	; 2
    2194:	91 05       	cpc	r25, r1
    2196:	34 f4       	brge	.+12     	; 0x21a4 <MDIO_GetPinValue+0x5c>
    2198:	2e 81       	ldd	r18, Y+6	; 0x06
    219a:	3f 81       	ldd	r19, Y+7	; 0x07
    219c:	21 15       	cp	r18, r1
    219e:	31 05       	cpc	r19, r1
    21a0:	69 f0       	breq	.+26     	; 0x21bc <MDIO_GetPinValue+0x74>
    21a2:	5c c0       	rjmp	.+184    	; 0x225c <MDIO_GetPinValue+0x114>
    21a4:	4e 81       	ldd	r20, Y+6	; 0x06
    21a6:	5f 81       	ldd	r21, Y+7	; 0x07
    21a8:	42 30       	cpi	r20, 0x02	; 2
    21aa:	51 05       	cpc	r21, r1
    21ac:	79 f1       	breq	.+94     	; 0x220c <MDIO_GetPinValue+0xc4>
    21ae:	8e 81       	ldd	r24, Y+6	; 0x06
    21b0:	9f 81       	ldd	r25, Y+7	; 0x07
    21b2:	83 30       	cpi	r24, 0x03	; 3
    21b4:	91 05       	cpc	r25, r1
    21b6:	09 f4       	brne	.+2      	; 0x21ba <MDIO_GetPinValue+0x72>
    21b8:	3d c0       	rjmp	.+122    	; 0x2234 <MDIO_GetPinValue+0xec>
    21ba:	50 c0       	rjmp	.+160    	; 0x225c <MDIO_GetPinValue+0x114>
		{
			case DIO_u8PORTA : * Copy_pu8Value = GET_BIT(PINA, Copy_u8Pin); break;
    21bc:	e9 e3       	ldi	r30, 0x39	; 57
    21be:	f0 e0       	ldi	r31, 0x00	; 0
    21c0:	80 81       	ld	r24, Z
    21c2:	28 2f       	mov	r18, r24
    21c4:	30 e0       	ldi	r19, 0x00	; 0
    21c6:	8b 81       	ldd	r24, Y+3	; 0x03
    21c8:	88 2f       	mov	r24, r24
    21ca:	90 e0       	ldi	r25, 0x00	; 0
    21cc:	a9 01       	movw	r20, r18
    21ce:	02 c0       	rjmp	.+4      	; 0x21d4 <MDIO_GetPinValue+0x8c>
    21d0:	55 95       	asr	r21
    21d2:	47 95       	ror	r20
    21d4:	8a 95       	dec	r24
    21d6:	e2 f7       	brpl	.-8      	; 0x21d0 <MDIO_GetPinValue+0x88>
    21d8:	ca 01       	movw	r24, r20
    21da:	81 70       	andi	r24, 0x01	; 1
    21dc:	ec 81       	ldd	r30, Y+4	; 0x04
    21de:	fd 81       	ldd	r31, Y+5	; 0x05
    21e0:	80 83       	st	Z, r24
    21e2:	3f c0       	rjmp	.+126    	; 0x2262 <MDIO_GetPinValue+0x11a>
			case DIO_u8PORTB : * Copy_pu8Value = GET_BIT(PINB, Copy_u8Pin); break;
    21e4:	e6 e3       	ldi	r30, 0x36	; 54
    21e6:	f0 e0       	ldi	r31, 0x00	; 0
    21e8:	80 81       	ld	r24, Z
    21ea:	28 2f       	mov	r18, r24
    21ec:	30 e0       	ldi	r19, 0x00	; 0
    21ee:	8b 81       	ldd	r24, Y+3	; 0x03
    21f0:	88 2f       	mov	r24, r24
    21f2:	90 e0       	ldi	r25, 0x00	; 0
    21f4:	a9 01       	movw	r20, r18
    21f6:	02 c0       	rjmp	.+4      	; 0x21fc <MDIO_GetPinValue+0xb4>
    21f8:	55 95       	asr	r21
    21fa:	47 95       	ror	r20
    21fc:	8a 95       	dec	r24
    21fe:	e2 f7       	brpl	.-8      	; 0x21f8 <MDIO_GetPinValue+0xb0>
    2200:	ca 01       	movw	r24, r20
    2202:	81 70       	andi	r24, 0x01	; 1
    2204:	ec 81       	ldd	r30, Y+4	; 0x04
    2206:	fd 81       	ldd	r31, Y+5	; 0x05
    2208:	80 83       	st	Z, r24
    220a:	2b c0       	rjmp	.+86     	; 0x2262 <MDIO_GetPinValue+0x11a>
			case DIO_u8PORTC : * Copy_pu8Value = GET_BIT(PINC, Copy_u8Pin); break;
    220c:	e3 e3       	ldi	r30, 0x33	; 51
    220e:	f0 e0       	ldi	r31, 0x00	; 0
    2210:	80 81       	ld	r24, Z
    2212:	28 2f       	mov	r18, r24
    2214:	30 e0       	ldi	r19, 0x00	; 0
    2216:	8b 81       	ldd	r24, Y+3	; 0x03
    2218:	88 2f       	mov	r24, r24
    221a:	90 e0       	ldi	r25, 0x00	; 0
    221c:	a9 01       	movw	r20, r18
    221e:	02 c0       	rjmp	.+4      	; 0x2224 <MDIO_GetPinValue+0xdc>
    2220:	55 95       	asr	r21
    2222:	47 95       	ror	r20
    2224:	8a 95       	dec	r24
    2226:	e2 f7       	brpl	.-8      	; 0x2220 <MDIO_GetPinValue+0xd8>
    2228:	ca 01       	movw	r24, r20
    222a:	81 70       	andi	r24, 0x01	; 1
    222c:	ec 81       	ldd	r30, Y+4	; 0x04
    222e:	fd 81       	ldd	r31, Y+5	; 0x05
    2230:	80 83       	st	Z, r24
    2232:	17 c0       	rjmp	.+46     	; 0x2262 <MDIO_GetPinValue+0x11a>
			case DIO_u8PORTD : * Copy_pu8Value = GET_BIT(PIND, Copy_u8Pin); break;
    2234:	e0 e3       	ldi	r30, 0x30	; 48
    2236:	f0 e0       	ldi	r31, 0x00	; 0
    2238:	80 81       	ld	r24, Z
    223a:	28 2f       	mov	r18, r24
    223c:	30 e0       	ldi	r19, 0x00	; 0
    223e:	8b 81       	ldd	r24, Y+3	; 0x03
    2240:	88 2f       	mov	r24, r24
    2242:	90 e0       	ldi	r25, 0x00	; 0
    2244:	a9 01       	movw	r20, r18
    2246:	02 c0       	rjmp	.+4      	; 0x224c <MDIO_GetPinValue+0x104>
    2248:	55 95       	asr	r21
    224a:	47 95       	ror	r20
    224c:	8a 95       	dec	r24
    224e:	e2 f7       	brpl	.-8      	; 0x2248 <MDIO_GetPinValue+0x100>
    2250:	ca 01       	movw	r24, r20
    2252:	81 70       	andi	r24, 0x01	; 1
    2254:	ec 81       	ldd	r30, Y+4	; 0x04
    2256:	fd 81       	ldd	r31, Y+5	; 0x05
    2258:	80 83       	st	Z, r24
    225a:	03 c0       	rjmp	.+6      	; 0x2262 <MDIO_GetPinValue+0x11a>
			default: Local_ErrorState = R_NOK; break;
    225c:	19 82       	std	Y+1, r1	; 0x01
    225e:	01 c0       	rjmp	.+2      	; 0x2262 <MDIO_GetPinValue+0x11a>
		}
	}
	else
	{
		Local_ErrorState = R_NOK;
    2260:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_ErrorState;
    2262:	89 81       	ldd	r24, Y+1	; 0x01
}
    2264:	27 96       	adiw	r28, 0x07	; 7
    2266:	0f b6       	in	r0, 0x3f	; 63
    2268:	f8 94       	cli
    226a:	de bf       	out	0x3e, r29	; 62
    226c:	0f be       	out	0x3f, r0	; 63
    226e:	cd bf       	out	0x3d, r28	; 61
    2270:	cf 91       	pop	r28
    2272:	df 91       	pop	r29
    2274:	08 95       	ret

00002276 <MDIO_GetPortValue>:
error_state_t	MDIO_GetPortValue (dio_u8port_t Copy_u8Port, u8* Copy_pu8Value)
{
    2276:	df 93       	push	r29
    2278:	cf 93       	push	r28
    227a:	00 d0       	rcall	.+0      	; 0x227c <MDIO_GetPortValue+0x6>
    227c:	00 d0       	rcall	.+0      	; 0x227e <MDIO_GetPortValue+0x8>
    227e:	00 d0       	rcall	.+0      	; 0x2280 <MDIO_GetPortValue+0xa>
    2280:	cd b7       	in	r28, 0x3d	; 61
    2282:	de b7       	in	r29, 0x3e	; 62
    2284:	8a 83       	std	Y+2, r24	; 0x02
    2286:	7c 83       	std	Y+4, r23	; 0x04
    2288:	6b 83       	std	Y+3, r22	; 0x03
	error_state_t Local_ErrorState = R_OK;
    228a:	81 e0       	ldi	r24, 0x01	; 1
    228c:	89 83       	std	Y+1, r24	; 0x01

	if((Copy_pu8Value != NULL) && (Copy_u8Port <= DIO_u8PORTD))
    228e:	8b 81       	ldd	r24, Y+3	; 0x03
    2290:	9c 81       	ldd	r25, Y+4	; 0x04
    2292:	00 97       	sbiw	r24, 0x00	; 0
    2294:	09 f4       	brne	.+2      	; 0x2298 <MDIO_GetPortValue+0x22>
    2296:	40 c0       	rjmp	.+128    	; 0x2318 <MDIO_GetPortValue+0xa2>
    2298:	8a 81       	ldd	r24, Y+2	; 0x02
    229a:	84 30       	cpi	r24, 0x04	; 4
    229c:	e8 f5       	brcc	.+122    	; 0x2318 <MDIO_GetPortValue+0xa2>
	{
		switch (Copy_u8Port)
    229e:	8a 81       	ldd	r24, Y+2	; 0x02
    22a0:	28 2f       	mov	r18, r24
    22a2:	30 e0       	ldi	r19, 0x00	; 0
    22a4:	3e 83       	std	Y+6, r19	; 0x06
    22a6:	2d 83       	std	Y+5, r18	; 0x05
    22a8:	8d 81       	ldd	r24, Y+5	; 0x05
    22aa:	9e 81       	ldd	r25, Y+6	; 0x06
    22ac:	81 30       	cpi	r24, 0x01	; 1
    22ae:	91 05       	cpc	r25, r1
    22b0:	e1 f0       	breq	.+56     	; 0x22ea <MDIO_GetPortValue+0x74>
    22b2:	2d 81       	ldd	r18, Y+5	; 0x05
    22b4:	3e 81       	ldd	r19, Y+6	; 0x06
    22b6:	22 30       	cpi	r18, 0x02	; 2
    22b8:	31 05       	cpc	r19, r1
    22ba:	2c f4       	brge	.+10     	; 0x22c6 <MDIO_GetPortValue+0x50>
    22bc:	8d 81       	ldd	r24, Y+5	; 0x05
    22be:	9e 81       	ldd	r25, Y+6	; 0x06
    22c0:	00 97       	sbiw	r24, 0x00	; 0
    22c2:	61 f0       	breq	.+24     	; 0x22dc <MDIO_GetPortValue+0x66>
    22c4:	27 c0       	rjmp	.+78     	; 0x2314 <MDIO_GetPortValue+0x9e>
    22c6:	2d 81       	ldd	r18, Y+5	; 0x05
    22c8:	3e 81       	ldd	r19, Y+6	; 0x06
    22ca:	22 30       	cpi	r18, 0x02	; 2
    22cc:	31 05       	cpc	r19, r1
    22ce:	a1 f0       	breq	.+40     	; 0x22f8 <MDIO_GetPortValue+0x82>
    22d0:	8d 81       	ldd	r24, Y+5	; 0x05
    22d2:	9e 81       	ldd	r25, Y+6	; 0x06
    22d4:	83 30       	cpi	r24, 0x03	; 3
    22d6:	91 05       	cpc	r25, r1
    22d8:	b1 f0       	breq	.+44     	; 0x2306 <MDIO_GetPortValue+0x90>
    22da:	1c c0       	rjmp	.+56     	; 0x2314 <MDIO_GetPortValue+0x9e>
		{
			case DIO_u8PORTA : * Copy_pu8Value = PINA; break;
    22dc:	e9 e3       	ldi	r30, 0x39	; 57
    22de:	f0 e0       	ldi	r31, 0x00	; 0
    22e0:	80 81       	ld	r24, Z
    22e2:	eb 81       	ldd	r30, Y+3	; 0x03
    22e4:	fc 81       	ldd	r31, Y+4	; 0x04
    22e6:	80 83       	st	Z, r24
    22e8:	18 c0       	rjmp	.+48     	; 0x231a <MDIO_GetPortValue+0xa4>
			case DIO_u8PORTB : * Copy_pu8Value = PINB; break;
    22ea:	e6 e3       	ldi	r30, 0x36	; 54
    22ec:	f0 e0       	ldi	r31, 0x00	; 0
    22ee:	80 81       	ld	r24, Z
    22f0:	eb 81       	ldd	r30, Y+3	; 0x03
    22f2:	fc 81       	ldd	r31, Y+4	; 0x04
    22f4:	80 83       	st	Z, r24
    22f6:	11 c0       	rjmp	.+34     	; 0x231a <MDIO_GetPortValue+0xa4>
			case DIO_u8PORTC : * Copy_pu8Value = PINC; break;
    22f8:	e3 e3       	ldi	r30, 0x33	; 51
    22fa:	f0 e0       	ldi	r31, 0x00	; 0
    22fc:	80 81       	ld	r24, Z
    22fe:	eb 81       	ldd	r30, Y+3	; 0x03
    2300:	fc 81       	ldd	r31, Y+4	; 0x04
    2302:	80 83       	st	Z, r24
    2304:	0a c0       	rjmp	.+20     	; 0x231a <MDIO_GetPortValue+0xa4>
			case DIO_u8PORTD : * Copy_pu8Value = PIND; break;
    2306:	e0 e3       	ldi	r30, 0x30	; 48
    2308:	f0 e0       	ldi	r31, 0x00	; 0
    230a:	80 81       	ld	r24, Z
    230c:	eb 81       	ldd	r30, Y+3	; 0x03
    230e:	fc 81       	ldd	r31, Y+4	; 0x04
    2310:	80 83       	st	Z, r24
    2312:	03 c0       	rjmp	.+6      	; 0x231a <MDIO_GetPortValue+0xa4>
			default: Local_ErrorState = R_NOK; break;
    2314:	19 82       	std	Y+1, r1	; 0x01
    2316:	01 c0       	rjmp	.+2      	; 0x231a <MDIO_GetPortValue+0xa4>
		}
	}
	else
	{
		Local_ErrorState = R_NOK;
    2318:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_ErrorState;
    231a:	89 81       	ldd	r24, Y+1	; 0x01
}
    231c:	26 96       	adiw	r28, 0x06	; 6
    231e:	0f b6       	in	r0, 0x3f	; 63
    2320:	f8 94       	cli
    2322:	de bf       	out	0x3e, r29	; 62
    2324:	0f be       	out	0x3f, r0	; 63
    2326:	cd bf       	out	0x3d, r28	; 61
    2328:	cf 91       	pop	r28
    232a:	df 91       	pop	r29
    232c:	08 95       	ret

0000232e <MDIO_AndValueWithPort>:
error_state_t	MDIO_AndValueWithPort (dio_u8port_t Copy_u8Port, u8 Copy_u8Value, u8 *Copy_u8Result)
{
    232e:	df 93       	push	r29
    2330:	cf 93       	push	r28
    2332:	cd b7       	in	r28, 0x3d	; 61
    2334:	de b7       	in	r29, 0x3e	; 62
    2336:	27 97       	sbiw	r28, 0x07	; 7
    2338:	0f b6       	in	r0, 0x3f	; 63
    233a:	f8 94       	cli
    233c:	de bf       	out	0x3e, r29	; 62
    233e:	0f be       	out	0x3f, r0	; 63
    2340:	cd bf       	out	0x3d, r28	; 61
    2342:	8a 83       	std	Y+2, r24	; 0x02
    2344:	6b 83       	std	Y+3, r22	; 0x03
    2346:	5d 83       	std	Y+5, r21	; 0x05
    2348:	4c 83       	std	Y+4, r20	; 0x04
	error_state_t Local_ErrorState = R_OK;
    234a:	81 e0       	ldi	r24, 0x01	; 1
    234c:	89 83       	std	Y+1, r24	; 0x01

	if((Copy_u8Result != NULL) && (Copy_u8Port <= DIO_u8PORTD))
    234e:	8c 81       	ldd	r24, Y+4	; 0x04
    2350:	9d 81       	ldd	r25, Y+5	; 0x05
    2352:	00 97       	sbiw	r24, 0x00	; 0
    2354:	09 f4       	brne	.+2      	; 0x2358 <MDIO_AndValueWithPort+0x2a>
    2356:	49 c0       	rjmp	.+146    	; 0x23ea <MDIO_AndValueWithPort+0xbc>
    2358:	8a 81       	ldd	r24, Y+2	; 0x02
    235a:	84 30       	cpi	r24, 0x04	; 4
    235c:	08 f0       	brcs	.+2      	; 0x2360 <MDIO_AndValueWithPort+0x32>
    235e:	45 c0       	rjmp	.+138    	; 0x23ea <MDIO_AndValueWithPort+0xbc>
	{
		switch (Copy_u8Port)
    2360:	8a 81       	ldd	r24, Y+2	; 0x02
    2362:	28 2f       	mov	r18, r24
    2364:	30 e0       	ldi	r19, 0x00	; 0
    2366:	3f 83       	std	Y+7, r19	; 0x07
    2368:	2e 83       	std	Y+6, r18	; 0x06
    236a:	8e 81       	ldd	r24, Y+6	; 0x06
    236c:	9f 81       	ldd	r25, Y+7	; 0x07
    236e:	81 30       	cpi	r24, 0x01	; 1
    2370:	91 05       	cpc	r25, r1
    2372:	f1 f0       	breq	.+60     	; 0x23b0 <MDIO_AndValueWithPort+0x82>
    2374:	2e 81       	ldd	r18, Y+6	; 0x06
    2376:	3f 81       	ldd	r19, Y+7	; 0x07
    2378:	22 30       	cpi	r18, 0x02	; 2
    237a:	31 05       	cpc	r19, r1
    237c:	2c f4       	brge	.+10     	; 0x2388 <MDIO_AndValueWithPort+0x5a>
    237e:	8e 81       	ldd	r24, Y+6	; 0x06
    2380:	9f 81       	ldd	r25, Y+7	; 0x07
    2382:	00 97       	sbiw	r24, 0x00	; 0
    2384:	61 f0       	breq	.+24     	; 0x239e <MDIO_AndValueWithPort+0x70>
    2386:	2f c0       	rjmp	.+94     	; 0x23e6 <MDIO_AndValueWithPort+0xb8>
    2388:	2e 81       	ldd	r18, Y+6	; 0x06
    238a:	3f 81       	ldd	r19, Y+7	; 0x07
    238c:	22 30       	cpi	r18, 0x02	; 2
    238e:	31 05       	cpc	r19, r1
    2390:	c1 f0       	breq	.+48     	; 0x23c2 <MDIO_AndValueWithPort+0x94>
    2392:	8e 81       	ldd	r24, Y+6	; 0x06
    2394:	9f 81       	ldd	r25, Y+7	; 0x07
    2396:	83 30       	cpi	r24, 0x03	; 3
    2398:	91 05       	cpc	r25, r1
    239a:	e1 f0       	breq	.+56     	; 0x23d4 <MDIO_AndValueWithPort+0xa6>
    239c:	24 c0       	rjmp	.+72     	; 0x23e6 <MDIO_AndValueWithPort+0xb8>
		{
			case DIO_u8PORTA : * Copy_u8Result = PORTA & Copy_u8Value; break;
    239e:	eb e3       	ldi	r30, 0x3B	; 59
    23a0:	f0 e0       	ldi	r31, 0x00	; 0
    23a2:	90 81       	ld	r25, Z
    23a4:	8b 81       	ldd	r24, Y+3	; 0x03
    23a6:	89 23       	and	r24, r25
    23a8:	ec 81       	ldd	r30, Y+4	; 0x04
    23aa:	fd 81       	ldd	r31, Y+5	; 0x05
    23ac:	80 83       	st	Z, r24
    23ae:	1e c0       	rjmp	.+60     	; 0x23ec <MDIO_AndValueWithPort+0xbe>
			case DIO_u8PORTB : * Copy_u8Result = PORTB & Copy_u8Value; break;
    23b0:	e8 e3       	ldi	r30, 0x38	; 56
    23b2:	f0 e0       	ldi	r31, 0x00	; 0
    23b4:	90 81       	ld	r25, Z
    23b6:	8b 81       	ldd	r24, Y+3	; 0x03
    23b8:	89 23       	and	r24, r25
    23ba:	ec 81       	ldd	r30, Y+4	; 0x04
    23bc:	fd 81       	ldd	r31, Y+5	; 0x05
    23be:	80 83       	st	Z, r24
    23c0:	15 c0       	rjmp	.+42     	; 0x23ec <MDIO_AndValueWithPort+0xbe>
			case DIO_u8PORTC : * Copy_u8Result = PORTC & Copy_u8Value; break;
    23c2:	e5 e3       	ldi	r30, 0x35	; 53
    23c4:	f0 e0       	ldi	r31, 0x00	; 0
    23c6:	90 81       	ld	r25, Z
    23c8:	8b 81       	ldd	r24, Y+3	; 0x03
    23ca:	89 23       	and	r24, r25
    23cc:	ec 81       	ldd	r30, Y+4	; 0x04
    23ce:	fd 81       	ldd	r31, Y+5	; 0x05
    23d0:	80 83       	st	Z, r24
    23d2:	0c c0       	rjmp	.+24     	; 0x23ec <MDIO_AndValueWithPort+0xbe>
			case DIO_u8PORTD : * Copy_u8Result = PORTD & Copy_u8Value; break;
    23d4:	e2 e3       	ldi	r30, 0x32	; 50
    23d6:	f0 e0       	ldi	r31, 0x00	; 0
    23d8:	90 81       	ld	r25, Z
    23da:	8b 81       	ldd	r24, Y+3	; 0x03
    23dc:	89 23       	and	r24, r25
    23de:	ec 81       	ldd	r30, Y+4	; 0x04
    23e0:	fd 81       	ldd	r31, Y+5	; 0x05
    23e2:	80 83       	st	Z, r24
    23e4:	03 c0       	rjmp	.+6      	; 0x23ec <MDIO_AndValueWithPort+0xbe>
			default: Local_ErrorState = R_NOK; break;
    23e6:	19 82       	std	Y+1, r1	; 0x01
    23e8:	01 c0       	rjmp	.+2      	; 0x23ec <MDIO_AndValueWithPort+0xbe>
		}
	}
	else
	{
		Local_ErrorState = R_NOK;
    23ea:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_ErrorState;
    23ec:	89 81       	ldd	r24, Y+1	; 0x01
}
    23ee:	27 96       	adiw	r28, 0x07	; 7
    23f0:	0f b6       	in	r0, 0x3f	; 63
    23f2:	f8 94       	cli
    23f4:	de bf       	out	0x3e, r29	; 62
    23f6:	0f be       	out	0x3f, r0	; 63
    23f8:	cd bf       	out	0x3d, r28	; 61
    23fa:	cf 91       	pop	r28
    23fc:	df 91       	pop	r29
    23fe:	08 95       	ret

00002400 <MDIO_TogglePinValue>:

error_state_t	MDIO_TogglePinValue (dio_u8port_t Copy_u8Port, dio_u8pin_t Copy_u8Pin)
{
    2400:	df 93       	push	r29
    2402:	cf 93       	push	r28
    2404:	00 d0       	rcall	.+0      	; 0x2406 <MDIO_TogglePinValue+0x6>
    2406:	00 d0       	rcall	.+0      	; 0x2408 <MDIO_TogglePinValue+0x8>
    2408:	0f 92       	push	r0
    240a:	cd b7       	in	r28, 0x3d	; 61
    240c:	de b7       	in	r29, 0x3e	; 62
    240e:	8a 83       	std	Y+2, r24	; 0x02
    2410:	6b 83       	std	Y+3, r22	; 0x03
	error_state_t Local_ErrorState = R_OK;
    2412:	81 e0       	ldi	r24, 0x01	; 1
    2414:	89 83       	std	Y+1, r24	; 0x01

	if((Copy_u8Port <= DIO_u8PORTD) && (Copy_u8Pin <= DIO_u8PIN7))
    2416:	8a 81       	ldd	r24, Y+2	; 0x02
    2418:	84 30       	cpi	r24, 0x04	; 4
    241a:	08 f0       	brcs	.+2      	; 0x241e <MDIO_TogglePinValue+0x1e>
    241c:	75 c0       	rjmp	.+234    	; 0x2508 <MDIO_TogglePinValue+0x108>
    241e:	8b 81       	ldd	r24, Y+3	; 0x03
    2420:	88 30       	cpi	r24, 0x08	; 8
    2422:	08 f0       	brcs	.+2      	; 0x2426 <MDIO_TogglePinValue+0x26>
    2424:	71 c0       	rjmp	.+226    	; 0x2508 <MDIO_TogglePinValue+0x108>
	{
		switch (Copy_u8Port)
    2426:	8a 81       	ldd	r24, Y+2	; 0x02
    2428:	28 2f       	mov	r18, r24
    242a:	30 e0       	ldi	r19, 0x00	; 0
    242c:	3d 83       	std	Y+5, r19	; 0x05
    242e:	2c 83       	std	Y+4, r18	; 0x04
    2430:	8c 81       	ldd	r24, Y+4	; 0x04
    2432:	9d 81       	ldd	r25, Y+5	; 0x05
    2434:	81 30       	cpi	r24, 0x01	; 1
    2436:	91 05       	cpc	r25, r1
    2438:	49 f1       	breq	.+82     	; 0x248c <MDIO_TogglePinValue+0x8c>
    243a:	2c 81       	ldd	r18, Y+4	; 0x04
    243c:	3d 81       	ldd	r19, Y+5	; 0x05
    243e:	22 30       	cpi	r18, 0x02	; 2
    2440:	31 05       	cpc	r19, r1
    2442:	2c f4       	brge	.+10     	; 0x244e <MDIO_TogglePinValue+0x4e>
    2444:	8c 81       	ldd	r24, Y+4	; 0x04
    2446:	9d 81       	ldd	r25, Y+5	; 0x05
    2448:	00 97       	sbiw	r24, 0x00	; 0
    244a:	61 f0       	breq	.+24     	; 0x2464 <MDIO_TogglePinValue+0x64>
    244c:	5b c0       	rjmp	.+182    	; 0x2504 <MDIO_TogglePinValue+0x104>
    244e:	2c 81       	ldd	r18, Y+4	; 0x04
    2450:	3d 81       	ldd	r19, Y+5	; 0x05
    2452:	22 30       	cpi	r18, 0x02	; 2
    2454:	31 05       	cpc	r19, r1
    2456:	71 f1       	breq	.+92     	; 0x24b4 <MDIO_TogglePinValue+0xb4>
    2458:	8c 81       	ldd	r24, Y+4	; 0x04
    245a:	9d 81       	ldd	r25, Y+5	; 0x05
    245c:	83 30       	cpi	r24, 0x03	; 3
    245e:	91 05       	cpc	r25, r1
    2460:	e9 f1       	breq	.+122    	; 0x24dc <MDIO_TogglePinValue+0xdc>
    2462:	50 c0       	rjmp	.+160    	; 0x2504 <MDIO_TogglePinValue+0x104>
		{
			case DIO_u8PORTA : TOG_BIT(PORTA, Copy_u8Pin); break;
    2464:	ab e3       	ldi	r26, 0x3B	; 59
    2466:	b0 e0       	ldi	r27, 0x00	; 0
    2468:	eb e3       	ldi	r30, 0x3B	; 59
    246a:	f0 e0       	ldi	r31, 0x00	; 0
    246c:	80 81       	ld	r24, Z
    246e:	48 2f       	mov	r20, r24
    2470:	8b 81       	ldd	r24, Y+3	; 0x03
    2472:	28 2f       	mov	r18, r24
    2474:	30 e0       	ldi	r19, 0x00	; 0
    2476:	81 e0       	ldi	r24, 0x01	; 1
    2478:	90 e0       	ldi	r25, 0x00	; 0
    247a:	02 2e       	mov	r0, r18
    247c:	02 c0       	rjmp	.+4      	; 0x2482 <MDIO_TogglePinValue+0x82>
    247e:	88 0f       	add	r24, r24
    2480:	99 1f       	adc	r25, r25
    2482:	0a 94       	dec	r0
    2484:	e2 f7       	brpl	.-8      	; 0x247e <MDIO_TogglePinValue+0x7e>
    2486:	84 27       	eor	r24, r20
    2488:	8c 93       	st	X, r24
    248a:	3f c0       	rjmp	.+126    	; 0x250a <MDIO_TogglePinValue+0x10a>
			case DIO_u8PORTB : TOG_BIT(PORTB, Copy_u8Pin); break;
    248c:	a8 e3       	ldi	r26, 0x38	; 56
    248e:	b0 e0       	ldi	r27, 0x00	; 0
    2490:	e8 e3       	ldi	r30, 0x38	; 56
    2492:	f0 e0       	ldi	r31, 0x00	; 0
    2494:	80 81       	ld	r24, Z
    2496:	48 2f       	mov	r20, r24
    2498:	8b 81       	ldd	r24, Y+3	; 0x03
    249a:	28 2f       	mov	r18, r24
    249c:	30 e0       	ldi	r19, 0x00	; 0
    249e:	81 e0       	ldi	r24, 0x01	; 1
    24a0:	90 e0       	ldi	r25, 0x00	; 0
    24a2:	02 2e       	mov	r0, r18
    24a4:	02 c0       	rjmp	.+4      	; 0x24aa <MDIO_TogglePinValue+0xaa>
    24a6:	88 0f       	add	r24, r24
    24a8:	99 1f       	adc	r25, r25
    24aa:	0a 94       	dec	r0
    24ac:	e2 f7       	brpl	.-8      	; 0x24a6 <MDIO_TogglePinValue+0xa6>
    24ae:	84 27       	eor	r24, r20
    24b0:	8c 93       	st	X, r24
    24b2:	2b c0       	rjmp	.+86     	; 0x250a <MDIO_TogglePinValue+0x10a>
			case DIO_u8PORTC : TOG_BIT(PORTC, Copy_u8Pin); break;
    24b4:	a5 e3       	ldi	r26, 0x35	; 53
    24b6:	b0 e0       	ldi	r27, 0x00	; 0
    24b8:	e5 e3       	ldi	r30, 0x35	; 53
    24ba:	f0 e0       	ldi	r31, 0x00	; 0
    24bc:	80 81       	ld	r24, Z
    24be:	48 2f       	mov	r20, r24
    24c0:	8b 81       	ldd	r24, Y+3	; 0x03
    24c2:	28 2f       	mov	r18, r24
    24c4:	30 e0       	ldi	r19, 0x00	; 0
    24c6:	81 e0       	ldi	r24, 0x01	; 1
    24c8:	90 e0       	ldi	r25, 0x00	; 0
    24ca:	02 2e       	mov	r0, r18
    24cc:	02 c0       	rjmp	.+4      	; 0x24d2 <MDIO_TogglePinValue+0xd2>
    24ce:	88 0f       	add	r24, r24
    24d0:	99 1f       	adc	r25, r25
    24d2:	0a 94       	dec	r0
    24d4:	e2 f7       	brpl	.-8      	; 0x24ce <MDIO_TogglePinValue+0xce>
    24d6:	84 27       	eor	r24, r20
    24d8:	8c 93       	st	X, r24
    24da:	17 c0       	rjmp	.+46     	; 0x250a <MDIO_TogglePinValue+0x10a>
			case DIO_u8PORTD : TOG_BIT(PORTD, Copy_u8Pin); break;
    24dc:	a2 e3       	ldi	r26, 0x32	; 50
    24de:	b0 e0       	ldi	r27, 0x00	; 0
    24e0:	e2 e3       	ldi	r30, 0x32	; 50
    24e2:	f0 e0       	ldi	r31, 0x00	; 0
    24e4:	80 81       	ld	r24, Z
    24e6:	48 2f       	mov	r20, r24
    24e8:	8b 81       	ldd	r24, Y+3	; 0x03
    24ea:	28 2f       	mov	r18, r24
    24ec:	30 e0       	ldi	r19, 0x00	; 0
    24ee:	81 e0       	ldi	r24, 0x01	; 1
    24f0:	90 e0       	ldi	r25, 0x00	; 0
    24f2:	02 2e       	mov	r0, r18
    24f4:	02 c0       	rjmp	.+4      	; 0x24fa <MDIO_TogglePinValue+0xfa>
    24f6:	88 0f       	add	r24, r24
    24f8:	99 1f       	adc	r25, r25
    24fa:	0a 94       	dec	r0
    24fc:	e2 f7       	brpl	.-8      	; 0x24f6 <MDIO_TogglePinValue+0xf6>
    24fe:	84 27       	eor	r24, r20
    2500:	8c 93       	st	X, r24
    2502:	03 c0       	rjmp	.+6      	; 0x250a <MDIO_TogglePinValue+0x10a>
			default: Local_ErrorState = R_NOK; break;
    2504:	19 82       	std	Y+1, r1	; 0x01
    2506:	01 c0       	rjmp	.+2      	; 0x250a <MDIO_TogglePinValue+0x10a>
		}
	}
	else
	{
		Local_ErrorState = R_NOK;
    2508:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_ErrorState;
    250a:	89 81       	ldd	r24, Y+1	; 0x01
}
    250c:	0f 90       	pop	r0
    250e:	0f 90       	pop	r0
    2510:	0f 90       	pop	r0
    2512:	0f 90       	pop	r0
    2514:	0f 90       	pop	r0
    2516:	cf 91       	pop	r28
    2518:	df 91       	pop	r29
    251a:	08 95       	ret

0000251c <MADC_voidInit>:
/**************************** Function Implementation **************************/
/*******************************************************************************/

/***************************** ADC Initialization ******************************/
void MADC_voidInit(void)
{
    251c:	df 93       	push	r29
    251e:	cf 93       	push	r28
    2520:	cd b7       	in	r28, 0x3d	; 61
    2522:	de b7       	in	r29, 0x3e	; 62
	/* 1. Select Voltage Reference */
	ADMUX &= ADC_VOLT_REF_SELEC_MASK;
    2524:	a7 e2       	ldi	r26, 0x27	; 39
    2526:	b0 e0       	ldi	r27, 0x00	; 0
    2528:	e7 e2       	ldi	r30, 0x27	; 39
    252a:	f0 e0       	ldi	r31, 0x00	; 0
    252c:	80 81       	ld	r24, Z
    252e:	8f 73       	andi	r24, 0x3F	; 63
    2530:	8c 93       	st	X, r24
	ADMUX |= ADC_VOLT_REF_SELEC;
    2532:	a7 e2       	ldi	r26, 0x27	; 39
    2534:	b0 e0       	ldi	r27, 0x00	; 0
    2536:	e7 e2       	ldi	r30, 0x27	; 39
    2538:	f0 e0       	ldi	r31, 0x00	; 0
    253a:	80 81       	ld	r24, Z
    253c:	80 64       	ori	r24, 0x40	; 64
    253e:	8c 93       	st	X, r24
	/* 2. Select ADC Adjust */
	ADMUX &= ADC_Data_Register_MASK;
    2540:	a7 e2       	ldi	r26, 0x27	; 39
    2542:	b0 e0       	ldi	r27, 0x00	; 0
    2544:	e7 e2       	ldi	r30, 0x27	; 39
    2546:	f0 e0       	ldi	r31, 0x00	; 0
    2548:	80 81       	ld	r24, Z
    254a:	8f 7d       	andi	r24, 0xDF	; 223
    254c:	8c 93       	st	X, r24
	ADMUX |= ADC_Data_Register;
    254e:	a7 e2       	ldi	r26, 0x27	; 39
    2550:	b0 e0       	ldi	r27, 0x00	; 0
    2552:	e7 e2       	ldi	r30, 0x27	; 39
    2554:	f0 e0       	ldi	r31, 0x00	; 0
    2556:	80 81       	ld	r24, Z
    2558:	8c 93       	st	X, r24
	/* 3. Single Or Auto Trigger Conversion Mode */
	#if ADC_AUTO_TRIGGER_MODE == AUTO_TRIGGER_ENABLE
	/* Enable Auto Trigger */
	SET_BIT(ADCSRA, ADCSRA_ADATE);
    255a:	a6 e2       	ldi	r26, 0x26	; 38
    255c:	b0 e0       	ldi	r27, 0x00	; 0
    255e:	e6 e2       	ldi	r30, 0x26	; 38
    2560:	f0 e0       	ldi	r31, 0x00	; 0
    2562:	80 81       	ld	r24, Z
    2564:	80 62       	ori	r24, 0x20	; 32
    2566:	8c 93       	st	X, r24
	/* Select ADC Auto Trigger Source */
	SFIOR &= ADC_Auto_Trigger_Source_MASK;
    2568:	a0 e5       	ldi	r26, 0x50	; 80
    256a:	b0 e0       	ldi	r27, 0x00	; 0
    256c:	e0 e5       	ldi	r30, 0x50	; 80
    256e:	f0 e0       	ldi	r31, 0x00	; 0
    2570:	80 81       	ld	r24, Z
    2572:	8f 71       	andi	r24, 0x1F	; 31
    2574:	8c 93       	st	X, r24
	SFIOR |= ADC_Auto_Trigger_Source;
    2576:	a0 e5       	ldi	r26, 0x50	; 80
    2578:	b0 e0       	ldi	r27, 0x00	; 0
    257a:	e0 e5       	ldi	r30, 0x50	; 80
    257c:	f0 e0       	ldi	r31, 0x00	; 0
    257e:	80 81       	ld	r24, Z
    2580:	8c 93       	st	X, r24
	#elif ADC_AUTO_TRIGGER_MODE == AUTO_TRIGGER_DISABLE
	CLR_BIT(ADCSRA, ADCSRA_ADATE);
	#endif
	/* 4. Prescaler Selection*/
	ADCSRA &= ADC_PRESC_MASK;
    2582:	a6 e2       	ldi	r26, 0x26	; 38
    2584:	b0 e0       	ldi	r27, 0x00	; 0
    2586:	e6 e2       	ldi	r30, 0x26	; 38
    2588:	f0 e0       	ldi	r31, 0x00	; 0
    258a:	80 81       	ld	r24, Z
    258c:	88 7f       	andi	r24, 0xF8	; 248
    258e:	8c 93       	st	X, r24
	ADCSRA |= ADC_PRESC_SELEC;
    2590:	a6 e2       	ldi	r26, 0x26	; 38
    2592:	b0 e0       	ldi	r27, 0x00	; 0
    2594:	e6 e2       	ldi	r30, 0x26	; 38
    2596:	f0 e0       	ldi	r31, 0x00	; 0
    2598:	80 81       	ld	r24, Z
    259a:	87 60       	ori	r24, 0x07	; 7
    259c:	8c 93       	st	X, r24
	/* 5. Enable ADC*/
	SET_BIT(ADCSRA,ADCSRA_ADEN);
    259e:	a6 e2       	ldi	r26, 0x26	; 38
    25a0:	b0 e0       	ldi	r27, 0x00	; 0
    25a2:	e6 e2       	ldi	r30, 0x26	; 38
    25a4:	f0 e0       	ldi	r31, 0x00	; 0
    25a6:	80 81       	ld	r24, Z
    25a8:	80 68       	ori	r24, 0x80	; 128
    25aa:	8c 93       	st	X, r24
}
    25ac:	cf 91       	pop	r28
    25ae:	df 91       	pop	r29
    25b0:	08 95       	ret

000025b2 <MADC_StartConversionSynch>:
/*************************** End ADC Initialization ****************************/

/********************* ADC Start Conversion Synch ******************************/
error_state_t MADC_StartConversionSynch(Channel_t Copy_Channel, u16 *Copy_pu16Reading)
{
    25b2:	df 93       	push	r29
    25b4:	cf 93       	push	r28
    25b6:	cd b7       	in	r28, 0x3d	; 61
    25b8:	de b7       	in	r29, 0x3e	; 62
    25ba:	28 97       	sbiw	r28, 0x08	; 8
    25bc:	0f b6       	in	r0, 0x3f	; 63
    25be:	f8 94       	cli
    25c0:	de bf       	out	0x3e, r29	; 62
    25c2:	0f be       	out	0x3f, r0	; 63
    25c4:	cd bf       	out	0x3d, r28	; 61
    25c6:	8e 83       	std	Y+6, r24	; 0x06
    25c8:	78 87       	std	Y+8, r23	; 0x08
    25ca:	6f 83       	std	Y+7, r22	; 0x07
	error_state_t Local_ErrorState = R_OK;
    25cc:	81 e0       	ldi	r24, 0x01	; 1
    25ce:	8d 83       	std	Y+5, r24	; 0x05
	u32 Local_u32TimeOutCounter = 0;
    25d0:	19 82       	std	Y+1, r1	; 0x01
    25d2:	1a 82       	std	Y+2, r1	; 0x02
    25d4:	1b 82       	std	Y+3, r1	; 0x03
    25d6:	1c 82       	std	Y+4, r1	; 0x04
	
	if (ADC_u8BusyState == IDLE)
    25d8:	80 91 b4 01 	lds	r24, 0x01B4
    25dc:	88 23       	and	r24, r24
    25de:	09 f0       	breq	.+2      	; 0x25e2 <MADC_StartConversionSynch+0x30>
    25e0:	54 c0       	rjmp	.+168    	; 0x268a <MADC_StartConversionSynch+0xd8>
	{
		/* ADC Now Is Busy */
		ADC_u8BusyState = BUSY;
    25e2:	81 e0       	ldi	r24, 0x01	; 1
    25e4:	80 93 b4 01 	sts	0x01B4, r24
		/* Select Channel */
		ADMUX &= ADC_SELEC_CHANNEL_MASK; 	/* Clear the MUX bits in ADMUX register*/
    25e8:	a7 e2       	ldi	r26, 0x27	; 39
    25ea:	b0 e0       	ldi	r27, 0x00	; 0
    25ec:	e7 e2       	ldi	r30, 0x27	; 39
    25ee:	f0 e0       	ldi	r31, 0x00	; 0
    25f0:	80 81       	ld	r24, Z
    25f2:	80 7e       	andi	r24, 0xE0	; 224
    25f4:	8c 93       	st	X, r24
		ADMUX |= Copy_Channel;              /*Set the required channel into the MUX bits*/
    25f6:	a7 e2       	ldi	r26, 0x27	; 39
    25f8:	b0 e0       	ldi	r27, 0x00	; 0
    25fa:	e7 e2       	ldi	r30, 0x27	; 39
    25fc:	f0 e0       	ldi	r31, 0x00	; 0
    25fe:	90 81       	ld	r25, Z
    2600:	8e 81       	ldd	r24, Y+6	; 0x06
    2602:	89 2b       	or	r24, r25
    2604:	8c 93       	st	X, r24
    2606:	0b c0       	rjmp	.+22     	; 0x261e <MADC_StartConversionSynch+0x6c>

		 /* Polling (Busy Wait) until the conversion complete flag is set 
		   or counter reaching TimeOut value */
		 while ((GET_BIT(ADCSRA, ADCSRA_ADIF) == 0) && ( Local_u32TimeOutCounter != ADC_u32TIMEOUT))
		 {
			 Local_u32TimeOutCounter ++;
    2608:	89 81       	ldd	r24, Y+1	; 0x01
    260a:	9a 81       	ldd	r25, Y+2	; 0x02
    260c:	ab 81       	ldd	r26, Y+3	; 0x03
    260e:	bc 81       	ldd	r27, Y+4	; 0x04
    2610:	01 96       	adiw	r24, 0x01	; 1
    2612:	a1 1d       	adc	r26, r1
    2614:	b1 1d       	adc	r27, r1
    2616:	89 83       	std	Y+1, r24	; 0x01
    2618:	9a 83       	std	Y+2, r25	; 0x02
    261a:	ab 83       	std	Y+3, r26	; 0x03
    261c:	bc 83       	std	Y+4, r27	; 0x04
		SET_BIT(ADCSRA, ADCSRA_ADSC);
		#endif

		 /* Polling (Busy Wait) until the conversion complete flag is set 
		   or counter reaching TimeOut value */
		 while ((GET_BIT(ADCSRA, ADCSRA_ADIF) == 0) && ( Local_u32TimeOutCounter != ADC_u32TIMEOUT))
    261e:	e6 e2       	ldi	r30, 0x26	; 38
    2620:	f0 e0       	ldi	r31, 0x00	; 0
    2622:	80 81       	ld	r24, Z
    2624:	82 95       	swap	r24
    2626:	8f 70       	andi	r24, 0x0F	; 15
    2628:	88 2f       	mov	r24, r24
    262a:	90 e0       	ldi	r25, 0x00	; 0
    262c:	81 70       	andi	r24, 0x01	; 1
    262e:	90 70       	andi	r25, 0x00	; 0
    2630:	00 97       	sbiw	r24, 0x00	; 0
    2632:	61 f4       	brne	.+24     	; 0x264c <MADC_StartConversionSynch+0x9a>
    2634:	89 81       	ldd	r24, Y+1	; 0x01
    2636:	9a 81       	ldd	r25, Y+2	; 0x02
    2638:	ab 81       	ldd	r26, Y+3	; 0x03
    263a:	bc 81       	ldd	r27, Y+4	; 0x04
    263c:	80 35       	cpi	r24, 0x50	; 80
    263e:	23 ec       	ldi	r18, 0xC3	; 195
    2640:	92 07       	cpc	r25, r18
    2642:	20 e0       	ldi	r18, 0x00	; 0
    2644:	a2 07       	cpc	r26, r18
    2646:	20 e0       	ldi	r18, 0x00	; 0
    2648:	b2 07       	cpc	r27, r18
    264a:	f1 f6       	brne	.-68     	; 0x2608 <MADC_StartConversionSynch+0x56>
		 {
			 Local_u32TimeOutCounter ++;
		 } 
		 if (GET_BIT(ADCSRA, ADCSRA_ADIF) == 1)
    264c:	e6 e2       	ldi	r30, 0x26	; 38
    264e:	f0 e0       	ldi	r31, 0x00	; 0
    2650:	80 81       	ld	r24, Z
    2652:	82 95       	swap	r24
    2654:	8f 70       	andi	r24, 0x0F	; 15
    2656:	88 2f       	mov	r24, r24
    2658:	90 e0       	ldi	r25, 0x00	; 0
    265a:	81 70       	andi	r24, 0x01	; 1
    265c:	90 70       	andi	r25, 0x00	; 0
    265e:	88 23       	and	r24, r24
    2660:	81 f0       	breq	.+32     	; 0x2682 <MADC_StartConversionSynch+0xd0>
		 {
			 /* Loop is broken because flag is raised */
			 /* Clear conversion complete Flag */
			 SET_BIT(ADCSRA, ADCSRA_ADIF);
    2662:	a6 e2       	ldi	r26, 0x26	; 38
    2664:	b0 e0       	ldi	r27, 0x00	; 0
    2666:	e6 e2       	ldi	r30, 0x26	; 38
    2668:	f0 e0       	ldi	r31, 0x00	; 0
    266a:	80 81       	ld	r24, Z
    266c:	80 61       	ori	r24, 0x10	; 16
    266e:	8c 93       	st	X, r24
			 
			 /* Return Value Of Conversion */
			 *Copy_pu16Reading = ADC;
    2670:	e4 e2       	ldi	r30, 0x24	; 36
    2672:	f0 e0       	ldi	r31, 0x00	; 0
    2674:	80 81       	ld	r24, Z
    2676:	91 81       	ldd	r25, Z+1	; 0x01
    2678:	ef 81       	ldd	r30, Y+7	; 0x07
    267a:	f8 85       	ldd	r31, Y+8	; 0x08
    267c:	91 83       	std	Z+1, r25	; 0x01
    267e:	80 83       	st	Z, r24
    2680:	01 c0       	rjmp	.+2      	; 0x2684 <MADC_StartConversionSynch+0xd2>
			 
		 } 
		 else
		 {
			 /* Loop is broken because the time out is reached */
			 Local_ErrorState = R_NOK; 
    2682:	1d 82       	std	Y+5, r1	; 0x05
		 }
		ADC_u8BusyState = IDLE;
    2684:	10 92 b4 01 	sts	0x01B4, r1
    2688:	02 c0       	rjmp	.+4      	; 0x268e <MADC_StartConversionSynch+0xdc>
	}
	else
	{
		Local_ErrorState = BUSY_FUNC;
    268a:	87 e0       	ldi	r24, 0x07	; 7
    268c:	8d 83       	std	Y+5, r24	; 0x05
	}
	
	return Local_ErrorState;
    268e:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2690:	28 96       	adiw	r28, 0x08	; 8
    2692:	0f b6       	in	r0, 0x3f	; 63
    2694:	f8 94       	cli
    2696:	de bf       	out	0x3e, r29	; 62
    2698:	0f be       	out	0x3f, r0	; 63
    269a:	cd bf       	out	0x3d, r28	; 61
    269c:	cf 91       	pop	r28
    269e:	df 91       	pop	r29
    26a0:	08 95       	ret

000026a2 <MADC_StartConversionAsynch>:
/******************** End ADC Start Conversion Synch ***************************/

/************************* ADC Start Conversion Asynch *************************/
error_state_t MADC_StartConversionAsynch(Channel_t Copy_Channel, u16 *Copy_pu16Reading, void(*Copy_pvNotificationFunc)(void))
{
    26a2:	df 93       	push	r29
    26a4:	cf 93       	push	r28
    26a6:	00 d0       	rcall	.+0      	; 0x26a8 <MADC_StartConversionAsynch+0x6>
    26a8:	00 d0       	rcall	.+0      	; 0x26aa <MADC_StartConversionAsynch+0x8>
    26aa:	00 d0       	rcall	.+0      	; 0x26ac <MADC_StartConversionAsynch+0xa>
    26ac:	cd b7       	in	r28, 0x3d	; 61
    26ae:	de b7       	in	r29, 0x3e	; 62
    26b0:	8a 83       	std	Y+2, r24	; 0x02
    26b2:	7c 83       	std	Y+4, r23	; 0x04
    26b4:	6b 83       	std	Y+3, r22	; 0x03
    26b6:	5e 83       	std	Y+6, r21	; 0x06
    26b8:	4d 83       	std	Y+5, r20	; 0x05
	error_state_t Local_ErrorState = R_OK;
    26ba:	81 e0       	ldi	r24, 0x01	; 1
    26bc:	89 83       	std	Y+1, r24	; 0x01
	if(ADC_u8BusyState == IDLE)
    26be:	80 91 b4 01 	lds	r24, 0x01B4
    26c2:	88 23       	and	r24, r24
    26c4:	51 f5       	brne	.+84     	; 0x271a <MADC_StartConversionAsynch+0x78>
	{
		/* make ADC BUSY in order not  work until being idle  */
		ADC_u8BusyState = BUSY;
    26c6:	81 e0       	ldi	r24, 0x01	; 1
    26c8:	80 93 b4 01 	sts	0x01B4, r24
		
		/* Make ISR source single channel Asynchronous */
		ADC_u8ISRSourse = SINGLE_CHANNEL_ASYNCH;
    26cc:	10 92 bf 01 	sts	0x01BF, r1
		
		/* Initialize the reading variable globally */
		ADC_pu16Reading = Copy_pu16Reading;
    26d0:	8b 81       	ldd	r24, Y+3	; 0x03
    26d2:	9c 81       	ldd	r25, Y+4	; 0x04
    26d4:	90 93 b8 01 	sts	0x01B8, r25
    26d8:	80 93 b7 01 	sts	0x01B7, r24
		
		/* Initialize The Callback Notification Function Globally*/
		ADC_pvCallBackNotificationFunc = Copy_pvNotificationFunc;
    26dc:	8d 81       	ldd	r24, Y+5	; 0x05
    26de:	9e 81       	ldd	r25, Y+6	; 0x06
    26e0:	90 93 b6 01 	sts	0x01B6, r25
    26e4:	80 93 b5 01 	sts	0x01B5, r24
		
		/* Select Channel */
		ADMUX &= ADC_SELEC_CHANNEL_MASK; 	/* Clear the MUX bits in ADMUX register*/
    26e8:	a7 e2       	ldi	r26, 0x27	; 39
    26ea:	b0 e0       	ldi	r27, 0x00	; 0
    26ec:	e7 e2       	ldi	r30, 0x27	; 39
    26ee:	f0 e0       	ldi	r31, 0x00	; 0
    26f0:	80 81       	ld	r24, Z
    26f2:	80 7e       	andi	r24, 0xE0	; 224
    26f4:	8c 93       	st	X, r24
		ADMUX |= Copy_Channel;              /*Set the required channel into the MUX bits*/
    26f6:	a7 e2       	ldi	r26, 0x27	; 39
    26f8:	b0 e0       	ldi	r27, 0x00	; 0
    26fa:	e7 e2       	ldi	r30, 0x27	; 39
    26fc:	f0 e0       	ldi	r31, 0x00	; 0
    26fe:	90 81       	ld	r25, Z
    2700:	8a 81       	ldd	r24, Y+2	; 0x02
    2702:	89 2b       	or	r24, r25
    2704:	8c 93       	st	X, r24
		#if ADC_AUTO_TRIGGER_MODE == AUTO_TRIGGER_DISABLE 
		/* Start Conversion */
		SET_BIT(ADCSRA, ADCSRA_ADSC);
		#endif		
			
		SET_BIT(ADCSRA, ADCSRA_ADSC);
    2706:	a6 e2       	ldi	r26, 0x26	; 38
    2708:	b0 e0       	ldi	r27, 0x00	; 0
    270a:	e6 e2       	ldi	r30, 0x26	; 38
    270c:	f0 e0       	ldi	r31, 0x00	; 0
    270e:	80 81       	ld	r24, Z
    2710:	80 64       	ori	r24, 0x40	; 64
    2712:	8c 93       	st	X, r24

		/* Enable INT */
		MADC_voidInterruptEnable();
    2714:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <MADC_voidInterruptEnable>
    2718:	02 c0       	rjmp	.+4      	; 0x271e <MADC_StartConversionAsynch+0x7c>

	}
	else
	{
		Local_ErrorState = BUSY_FUNC;
    271a:	87 e0       	ldi	r24, 0x07	; 7
    271c:	89 83       	std	Y+1, r24	; 0x01
	}
	
	
	
	return Local_ErrorState;
    271e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2720:	26 96       	adiw	r28, 0x06	; 6
    2722:	0f b6       	in	r0, 0x3f	; 63
    2724:	f8 94       	cli
    2726:	de bf       	out	0x3e, r29	; 62
    2728:	0f be       	out	0x3f, r0	; 63
    272a:	cd bf       	out	0x3d, r28	; 61
    272c:	cf 91       	pop	r28
    272e:	df 91       	pop	r29
    2730:	08 95       	ret

00002732 <MADC_StartChainConversionAsynch>:
/*********************** End ADC Start Conversion Asynch ***********************/

/********************** ADC Start Chain Conversion Asynch***********************/
error_state_t MADC_StartChainConversionAsynch(Chain_t *Copy_Chain)
{
    2732:	df 93       	push	r29
    2734:	cf 93       	push	r28
    2736:	00 d0       	rcall	.+0      	; 0x2738 <MADC_StartChainConversionAsynch+0x6>
    2738:	0f 92       	push	r0
    273a:	cd b7       	in	r28, 0x3d	; 61
    273c:	de b7       	in	r29, 0x3e	; 62
    273e:	9b 83       	std	Y+3, r25	; 0x03
    2740:	8a 83       	std	Y+2, r24	; 0x02
	error_state_t Local_ErrorState = R_OK;
    2742:	81 e0       	ldi	r24, 0x01	; 1
    2744:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_Chain == NULL)
    2746:	8a 81       	ldd	r24, Y+2	; 0x02
    2748:	9b 81       	ldd	r25, Y+3	; 0x03
    274a:	00 97       	sbiw	r24, 0x00	; 0
    274c:	19 f4       	brne	.+6      	; 0x2754 <MADC_StartChainConversionAsynch+0x22>
	{
		Local_ErrorState = NULL_POINTER;
    274e:	86 e0       	ldi	r24, 0x06	; 6
    2750:	89 83       	std	Y+1, r24	; 0x01
    2752:	49 c0       	rjmp	.+146    	; 0x27e6 <MADC_StartChainConversionAsynch+0xb4>
	} 
	else
	{
		if(ADC_u8BusyState == IDLE)
    2754:	80 91 b4 01 	lds	r24, 0x01B4
    2758:	88 23       	and	r24, r24
    275a:	09 f0       	breq	.+2      	; 0x275e <MADC_StartChainConversionAsynch+0x2c>
    275c:	42 c0       	rjmp	.+132    	; 0x27e2 <MADC_StartChainConversionAsynch+0xb0>
		{
			/* make ADC BUSY in order not  work until being idle  */
			ADC_u8BusyState = BUSY;
    275e:	81 e0       	ldi	r24, 0x01	; 1
    2760:	80 93 b4 01 	sts	0x01B4, r24
			
			/* Make ISR source Chain channel Asynchronous */
			ADC_u8ISRSourse = CHAIN_ASYNCH;
    2764:	81 e0       	ldi	r24, 0x01	; 1
    2766:	80 93 bf 01 	sts	0x01BF, r24
			
			/* initialize Chain Channel array globally  */
			ADC_pu8ChainChannelArr = Copy_Chain->ADC_Channels;
    276a:	ea 81       	ldd	r30, Y+2	; 0x02
    276c:	fb 81       	ldd	r31, Y+3	; 0x03
    276e:	82 81       	ldd	r24, Z+2	; 0x02
    2770:	93 81       	ldd	r25, Z+3	; 0x03
    2772:	90 93 bc 01 	sts	0x01BC, r25
    2776:	80 93 bb 01 	sts	0x01BB, r24
			
			/* Initialize the reading variable globally */
			ADC_pu16ChainResultArr = Copy_Chain->Reading;
    277a:	ea 81       	ldd	r30, Y+2	; 0x02
    277c:	fb 81       	ldd	r31, Y+3	; 0x03
    277e:	80 81       	ld	r24, Z
    2780:	91 81       	ldd	r25, Z+1	; 0x01
    2782:	90 93 ba 01 	sts	0x01BA, r25
    2786:	80 93 b9 01 	sts	0x01B9, r24
			
			/* initialize Chain Size globally */
			ADC_u8ChainSize = Copy_Chain->Size;
    278a:	ea 81       	ldd	r30, Y+2	; 0x02
    278c:	fb 81       	ldd	r31, Y+3	; 0x03
    278e:	84 81       	ldd	r24, Z+4	; 0x04
    2790:	80 93 bd 01 	sts	0x01BD, r24

			/* Initialize The Callback Notification Function Globally*/
			ADC_pvCallBackNotificationFunc = Copy_Chain->ADC_pvNotificationFunc;
    2794:	ea 81       	ldd	r30, Y+2	; 0x02
    2796:	fb 81       	ldd	r31, Y+3	; 0x03
    2798:	85 81       	ldd	r24, Z+5	; 0x05
    279a:	96 81       	ldd	r25, Z+6	; 0x06
    279c:	90 93 b6 01 	sts	0x01B6, r25
    27a0:	80 93 b5 01 	sts	0x01B5, r24
			
			/* Initialize current conversion Index*/
			ADC_u8ChainConversionIndex = 0;
    27a4:	10 92 be 01 	sts	0x01BE, r1
			
			/* Select Channel */
			ADMUX &= ADC_SELEC_CHANNEL_MASK; 	   /* Clear the MUX bits in ADMUX register*/
    27a8:	a7 e2       	ldi	r26, 0x27	; 39
    27aa:	b0 e0       	ldi	r27, 0x00	; 0
    27ac:	e7 e2       	ldi	r30, 0x27	; 39
    27ae:	f0 e0       	ldi	r31, 0x00	; 0
    27b0:	80 81       	ld	r24, Z
    27b2:	80 7e       	andi	r24, 0xE0	; 224
    27b4:	8c 93       	st	X, r24
			ADMUX |= Copy_Chain->ADC_Channels[ADC_u8ChainConversionIndex];  /*Set the required channel into the MUX bits*/
    27b6:	a7 e2       	ldi	r26, 0x27	; 39
    27b8:	b0 e0       	ldi	r27, 0x00	; 0
    27ba:	e7 e2       	ldi	r30, 0x27	; 39
    27bc:	f0 e0       	ldi	r31, 0x00	; 0
    27be:	40 81       	ld	r20, Z
    27c0:	ea 81       	ldd	r30, Y+2	; 0x02
    27c2:	fb 81       	ldd	r31, Y+3	; 0x03
    27c4:	22 81       	ldd	r18, Z+2	; 0x02
    27c6:	33 81       	ldd	r19, Z+3	; 0x03
    27c8:	80 91 be 01 	lds	r24, 0x01BE
    27cc:	88 2f       	mov	r24, r24
    27ce:	90 e0       	ldi	r25, 0x00	; 0
    27d0:	f9 01       	movw	r30, r18
    27d2:	e8 0f       	add	r30, r24
    27d4:	f9 1f       	adc	r31, r25
    27d6:	80 81       	ld	r24, Z
    27d8:	84 2b       	or	r24, r20
    27da:	8c 93       	st	X, r24
			/* Start Conversion */
			SET_BIT(ADCSRA, ADCSRA_ADSC);
			#endif

			/* Enable INT */
			MADC_voidInterruptEnable();
    27dc:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <MADC_voidInterruptEnable>
    27e0:	02 c0       	rjmp	.+4      	; 0x27e6 <MADC_StartChainConversionAsynch+0xb4>
		}
		else
		{
			Local_ErrorState = BUSY_FUNC;
    27e2:	87 e0       	ldi	r24, 0x07	; 7
    27e4:	89 83       	std	Y+1, r24	; 0x01
		}
	}

	return Local_ErrorState;
    27e6:	89 81       	ldd	r24, Y+1	; 0x01
}
    27e8:	0f 90       	pop	r0
    27ea:	0f 90       	pop	r0
    27ec:	0f 90       	pop	r0
    27ee:	cf 91       	pop	r28
    27f0:	df 91       	pop	r29
    27f2:	08 95       	ret

000027f4 <MADC_voidInterruptEnable>:
/******************* End ADC Start Chain Conversion Asynch *********************/

/***************************** ADC Interrupt Enable ****************************/
void MADC_voidInterruptEnable(void)
{
    27f4:	df 93       	push	r29
    27f6:	cf 93       	push	r28
    27f8:	cd b7       	in	r28, 0x3d	; 61
    27fa:	de b7       	in	r29, 0x3e	; 62
	/* Enable INT for ADC  */
	SET_BIT(ADCSRA,ADCSRA_ADIE);
    27fc:	a6 e2       	ldi	r26, 0x26	; 38
    27fe:	b0 e0       	ldi	r27, 0x00	; 0
    2800:	e6 e2       	ldi	r30, 0x26	; 38
    2802:	f0 e0       	ldi	r31, 0x00	; 0
    2804:	80 81       	ld	r24, Z
    2806:	88 60       	ori	r24, 0x08	; 8
    2808:	8c 93       	st	X, r24
}
    280a:	cf 91       	pop	r28
    280c:	df 91       	pop	r29
    280e:	08 95       	ret

00002810 <MADC_voidInterruptDisable>:
/************************* End ADC Interrupt Enable ****************************/

/***************************** ADC Interrupt Disable ***************************/
void MADC_voidInterruptDisable(void)
{
    2810:	df 93       	push	r29
    2812:	cf 93       	push	r28
    2814:	cd b7       	in	r28, 0x3d	; 61
    2816:	de b7       	in	r29, 0x3e	; 62
	/* Disable INT for ADC  */
	CLR_BIT(ADCSRA,ADCSRA_ADIE);
    2818:	a6 e2       	ldi	r26, 0x26	; 38
    281a:	b0 e0       	ldi	r27, 0x00	; 0
    281c:	e6 e2       	ldi	r30, 0x26	; 38
    281e:	f0 e0       	ldi	r31, 0x00	; 0
    2820:	80 81       	ld	r24, Z
    2822:	87 7f       	andi	r24, 0xF7	; 247
    2824:	8c 93       	st	X, r24
}
    2826:	cf 91       	pop	r28
    2828:	df 91       	pop	r29
    282a:	08 95       	ret

0000282c <__vector_16>:



/************** ISR ***************/
ISR_(ADC_VECTOR)
{
    282c:	1f 92       	push	r1
    282e:	0f 92       	push	r0
    2830:	0f b6       	in	r0, 0x3f	; 63
    2832:	0f 92       	push	r0
    2834:	11 24       	eor	r1, r1
    2836:	2f 93       	push	r18
    2838:	3f 93       	push	r19
    283a:	4f 93       	push	r20
    283c:	5f 93       	push	r21
    283e:	6f 93       	push	r22
    2840:	7f 93       	push	r23
    2842:	8f 93       	push	r24
    2844:	9f 93       	push	r25
    2846:	af 93       	push	r26
    2848:	bf 93       	push	r27
    284a:	ef 93       	push	r30
    284c:	ff 93       	push	r31
    284e:	df 93       	push	r29
    2850:	cf 93       	push	r28
    2852:	cd b7       	in	r28, 0x3d	; 61
    2854:	de b7       	in	r29, 0x3e	; 62
	if (ADC_u8ISRSourse == SINGLE_CHANNEL_ASYNCH)
    2856:	80 91 bf 01 	lds	r24, 0x01BF
    285a:	88 23       	and	r24, r24
    285c:	91 f4       	brne	.+36     	; 0x2882 <__vector_16+0x56>
	{		
		/* Read ADC Result */
		*ADC_pu16Reading = ADC;
    285e:	a0 91 b7 01 	lds	r26, 0x01B7
    2862:	b0 91 b8 01 	lds	r27, 0x01B8
    2866:	e4 e2       	ldi	r30, 0x24	; 36
    2868:	f0 e0       	ldi	r31, 0x00	; 0
    286a:	80 81       	ld	r24, Z
    286c:	91 81       	ldd	r25, Z+1	; 0x01
    286e:	8d 93       	st	X+, r24
    2870:	9c 93       	st	X, r25
		/* Make ADC state be IDLE because it finished*/
		ADC_u8BusyState = IDLE;
    2872:	10 92 b4 01 	sts	0x01B4, r1
		/* Invoke the callback notification function */
		ADC_pvCallBackNotificationFunc();
    2876:	e0 91 b5 01 	lds	r30, 0x01B5
    287a:	f0 91 b6 01 	lds	r31, 0x01B6
    287e:	09 95       	icall
    2880:	4f c0       	rjmp	.+158    	; 0x2920 <__vector_16+0xf4>
		/* Disable ADC Conversion complete interrupt */
		//MADC_voidInterruptDisable();
		
	} 
	else if (ADC_u8ISRSourse == CHAIN_ASYNCH)
    2882:	80 91 bf 01 	lds	r24, 0x01BF
    2886:	81 30       	cpi	r24, 0x01	; 1
    2888:	09 f0       	breq	.+2      	; 0x288c <__vector_16+0x60>
    288a:	4a c0       	rjmp	.+148    	; 0x2920 <__vector_16+0xf4>
	{
		/* Read ADC Result */
		 ADC_pu16Reading[ADC_u8ChainConversionIndex] = ADC;
    288c:	20 91 b7 01 	lds	r18, 0x01B7
    2890:	30 91 b8 01 	lds	r19, 0x01B8
    2894:	80 91 be 01 	lds	r24, 0x01BE
    2898:	88 2f       	mov	r24, r24
    289a:	90 e0       	ldi	r25, 0x00	; 0
    289c:	88 0f       	add	r24, r24
    289e:	99 1f       	adc	r25, r25
    28a0:	d9 01       	movw	r26, r18
    28a2:	a8 0f       	add	r26, r24
    28a4:	b9 1f       	adc	r27, r25
    28a6:	e4 e2       	ldi	r30, 0x24	; 36
    28a8:	f0 e0       	ldi	r31, 0x00	; 0
    28aa:	80 81       	ld	r24, Z
    28ac:	91 81       	ldd	r25, Z+1	; 0x01
    28ae:	11 96       	adiw	r26, 0x01	; 1
    28b0:	9c 93       	st	X, r25
    28b2:	8e 93       	st	-X, r24
		 /* Increment ADC Chain Conversion Index */
		 ADC_u8ChainConversionIndex ++;
    28b4:	80 91 be 01 	lds	r24, 0x01BE
    28b8:	8f 5f       	subi	r24, 0xFF	; 255
    28ba:	80 93 be 01 	sts	0x01BE, r24
		
		/* check chain is finished or not */
		if (ADC_u8ChainConversionIndex == ADC_u8ChainSize)
    28be:	90 91 be 01 	lds	r25, 0x01BE
    28c2:	80 91 bd 01 	lds	r24, 0x01BD
    28c6:	98 17       	cp	r25, r24
    28c8:	51 f4       	brne	.+20     	; 0x28de <__vector_16+0xb2>
		{
			/* Make ADC state be IDLE because it finished*/
			ADC_u8BusyState = IDLE;
    28ca:	10 92 b4 01 	sts	0x01B4, r1
			
			/* Invoke the callback notification function */
			ADC_pvCallBackNotificationFunc();
    28ce:	e0 91 b5 01 	lds	r30, 0x01B5
    28d2:	f0 91 b6 01 	lds	r31, 0x01B6
    28d6:	09 95       	icall
			
			/* Disable ADC Conversion complete interrupt */
			MADC_voidInterruptDisable();
    28d8:	0e 94 08 14 	call	0x2810	; 0x2810 <MADC_voidInterruptDisable>
    28dc:	21 c0       	rjmp	.+66     	; 0x2920 <__vector_16+0xf4>
		} 
		else
		{
			/* Select Channel*/
			ADMUX &= ADC_SELEC_CHANNEL_MASK; 	                          /* Clear the MUX bits in ADMUX register*/
    28de:	a7 e2       	ldi	r26, 0x27	; 39
    28e0:	b0 e0       	ldi	r27, 0x00	; 0
    28e2:	e7 e2       	ldi	r30, 0x27	; 39
    28e4:	f0 e0       	ldi	r31, 0x00	; 0
    28e6:	80 81       	ld	r24, Z
    28e8:	80 7e       	andi	r24, 0xE0	; 224
    28ea:	8c 93       	st	X, r24
			ADMUX |= ADC_pu8ChainChannelArr[ADC_u8ChainConversionIndex];  /*Set the required channel into the MUX bits*/
    28ec:	a7 e2       	ldi	r26, 0x27	; 39
    28ee:	b0 e0       	ldi	r27, 0x00	; 0
    28f0:	e7 e2       	ldi	r30, 0x27	; 39
    28f2:	f0 e0       	ldi	r31, 0x00	; 0
    28f4:	40 81       	ld	r20, Z
    28f6:	20 91 bb 01 	lds	r18, 0x01BB
    28fa:	30 91 bc 01 	lds	r19, 0x01BC
    28fe:	80 91 be 01 	lds	r24, 0x01BE
    2902:	88 2f       	mov	r24, r24
    2904:	90 e0       	ldi	r25, 0x00	; 0
    2906:	f9 01       	movw	r30, r18
    2908:	e8 0f       	add	r30, r24
    290a:	f9 1f       	adc	r31, r25
    290c:	80 81       	ld	r24, Z
    290e:	84 2b       	or	r24, r20
    2910:	8c 93       	st	X, r24
			
			/* Start Conversion */
			SET_BIT(ADCSRA, ADCSRA_ADSC);
    2912:	a6 e2       	ldi	r26, 0x26	; 38
    2914:	b0 e0       	ldi	r27, 0x00	; 0
    2916:	e6 e2       	ldi	r30, 0x26	; 38
    2918:	f0 e0       	ldi	r31, 0x00	; 0
    291a:	80 81       	ld	r24, Z
    291c:	80 64       	ori	r24, 0x40	; 64
    291e:	8c 93       	st	X, r24
		}
		
		
	}
	
}
    2920:	cf 91       	pop	r28
    2922:	df 91       	pop	r29
    2924:	ff 91       	pop	r31
    2926:	ef 91       	pop	r30
    2928:	bf 91       	pop	r27
    292a:	af 91       	pop	r26
    292c:	9f 91       	pop	r25
    292e:	8f 91       	pop	r24
    2930:	7f 91       	pop	r23
    2932:	6f 91       	pop	r22
    2934:	5f 91       	pop	r21
    2936:	4f 91       	pop	r20
    2938:	3f 91       	pop	r19
    293a:	2f 91       	pop	r18
    293c:	0f 90       	pop	r0
    293e:	0f be       	out	0x3f, r0	; 63
    2940:	0f 90       	pop	r0
    2942:	1f 90       	pop	r1
    2944:	18 95       	reti

00002946 <H_UltraInit>:

static u16 u16_global_RissingValue = 0;
static u16 u16_global_FallingValue = 0;

void H_UltraInit(void)
{
    2946:	df 93       	push	r29
    2948:	cf 93       	push	r28
    294a:	cd b7       	in	r28, 0x3d	; 61
    294c:	de b7       	in	r29, 0x3e	; 62
	//TCCR1A = 0;
	MDIO_SetPinDirection(TRIGGER_PORT, TRIGGER_PIN, DIO_u8PIN_OUTPUT);
    294e:	83 e0       	ldi	r24, 0x03	; 3
    2950:	67 e0       	ldi	r22, 0x07	; 7
    2952:	41 e0       	ldi	r20, 0x01	; 1
    2954:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <MDIO_SetPinDirection>
	MDIO_SetPinDirection(ECHO_PORT, ECHO_PIN, DIO_u8PIN_INPUT);
    2958:	83 e0       	ldi	r24, 0x03	; 3
    295a:	66 e0       	ldi	r22, 0x06	; 6
    295c:	40 e0       	ldi	r20, 0x00	; 0
    295e:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <MDIO_SetPinDirection>

	/* Clear ICF flag */
	ICU_u8ClearInputCaptureFlag ();
    2962:	0e 94 20 09 	call	0x1240	; 0x1240 <ICU_u8ClearInputCaptureFlag>

}
    2966:	cf 91       	pop	r28
    2968:	df 91       	pop	r29
    296a:	08 95       	ret

0000296c <H_UltraTrigger>:
void H_UltraTrigger(void)
{
    296c:	df 93       	push	r29
    296e:	cf 93       	push	r28
    2970:	cd b7       	in	r28, 0x3d	; 61
    2972:	de b7       	in	r29, 0x3e	; 62
    2974:	2e 97       	sbiw	r28, 0x0e	; 14
    2976:	0f b6       	in	r0, 0x3f	; 63
    2978:	f8 94       	cli
    297a:	de bf       	out	0x3e, r29	; 62
    297c:	0f be       	out	0x3f, r0	; 63
    297e:	cd bf       	out	0x3d, r28	; 61
	MDIO_SetPinValue(TRIGGER_PORT, TRIGGER_PIN, DIO_u8PIN_HIGH);
    2980:	83 e0       	ldi	r24, 0x03	; 3
    2982:	67 e0       	ldi	r22, 0x07	; 7
    2984:	41 e0       	ldi	r20, 0x01	; 1
    2986:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <MDIO_SetPinValue>
    298a:	80 e0       	ldi	r24, 0x00	; 0
    298c:	90 e0       	ldi	r25, 0x00	; 0
    298e:	a8 e4       	ldi	r26, 0x48	; 72
    2990:	b2 e4       	ldi	r27, 0x42	; 66
    2992:	8b 87       	std	Y+11, r24	; 0x0b
    2994:	9c 87       	std	Y+12, r25	; 0x0c
    2996:	ad 87       	std	Y+13, r26	; 0x0d
    2998:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    299a:	6b 85       	ldd	r22, Y+11	; 0x0b
    299c:	7c 85       	ldd	r23, Y+12	; 0x0c
    299e:	8d 85       	ldd	r24, Y+13	; 0x0d
    29a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    29a2:	20 e0       	ldi	r18, 0x00	; 0
    29a4:	30 e0       	ldi	r19, 0x00	; 0
    29a6:	4a e7       	ldi	r20, 0x7A	; 122
    29a8:	55 e4       	ldi	r21, 0x45	; 69
    29aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ae:	dc 01       	movw	r26, r24
    29b0:	cb 01       	movw	r24, r22
    29b2:	8f 83       	std	Y+7, r24	; 0x07
    29b4:	98 87       	std	Y+8, r25	; 0x08
    29b6:	a9 87       	std	Y+9, r26	; 0x09
    29b8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29ba:	6f 81       	ldd	r22, Y+7	; 0x07
    29bc:	78 85       	ldd	r23, Y+8	; 0x08
    29be:	89 85       	ldd	r24, Y+9	; 0x09
    29c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    29c2:	20 e0       	ldi	r18, 0x00	; 0
    29c4:	30 e0       	ldi	r19, 0x00	; 0
    29c6:	40 e8       	ldi	r20, 0x80	; 128
    29c8:	5f e3       	ldi	r21, 0x3F	; 63
    29ca:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    29ce:	88 23       	and	r24, r24
    29d0:	2c f4       	brge	.+10     	; 0x29dc <H_UltraTrigger+0x70>
		__ticks = 1;
    29d2:	81 e0       	ldi	r24, 0x01	; 1
    29d4:	90 e0       	ldi	r25, 0x00	; 0
    29d6:	9e 83       	std	Y+6, r25	; 0x06
    29d8:	8d 83       	std	Y+5, r24	; 0x05
    29da:	3f c0       	rjmp	.+126    	; 0x2a5a <H_UltraTrigger+0xee>
	else if (__tmp > 65535)
    29dc:	6f 81       	ldd	r22, Y+7	; 0x07
    29de:	78 85       	ldd	r23, Y+8	; 0x08
    29e0:	89 85       	ldd	r24, Y+9	; 0x09
    29e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    29e4:	20 e0       	ldi	r18, 0x00	; 0
    29e6:	3f ef       	ldi	r19, 0xFF	; 255
    29e8:	4f e7       	ldi	r20, 0x7F	; 127
    29ea:	57 e4       	ldi	r21, 0x47	; 71
    29ec:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    29f0:	18 16       	cp	r1, r24
    29f2:	4c f5       	brge	.+82     	; 0x2a46 <H_UltraTrigger+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    29f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    29f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    29fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    29fc:	20 e0       	ldi	r18, 0x00	; 0
    29fe:	30 e0       	ldi	r19, 0x00	; 0
    2a00:	40 e2       	ldi	r20, 0x20	; 32
    2a02:	51 e4       	ldi	r21, 0x41	; 65
    2a04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a08:	dc 01       	movw	r26, r24
    2a0a:	cb 01       	movw	r24, r22
    2a0c:	bc 01       	movw	r22, r24
    2a0e:	cd 01       	movw	r24, r26
    2a10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a14:	dc 01       	movw	r26, r24
    2a16:	cb 01       	movw	r24, r22
    2a18:	9e 83       	std	Y+6, r25	; 0x06
    2a1a:	8d 83       	std	Y+5, r24	; 0x05
    2a1c:	0f c0       	rjmp	.+30     	; 0x2a3c <H_UltraTrigger+0xd0>
    2a1e:	80 e9       	ldi	r24, 0x90	; 144
    2a20:	91 e0       	ldi	r25, 0x01	; 1
    2a22:	9c 83       	std	Y+4, r25	; 0x04
    2a24:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2a26:	8b 81       	ldd	r24, Y+3	; 0x03
    2a28:	9c 81       	ldd	r25, Y+4	; 0x04
    2a2a:	01 97       	sbiw	r24, 0x01	; 1
    2a2c:	f1 f7       	brne	.-4      	; 0x2a2a <H_UltraTrigger+0xbe>
    2a2e:	9c 83       	std	Y+4, r25	; 0x04
    2a30:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a32:	8d 81       	ldd	r24, Y+5	; 0x05
    2a34:	9e 81       	ldd	r25, Y+6	; 0x06
    2a36:	01 97       	sbiw	r24, 0x01	; 1
    2a38:	9e 83       	std	Y+6, r25	; 0x06
    2a3a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a3c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a3e:	9e 81       	ldd	r25, Y+6	; 0x06
    2a40:	00 97       	sbiw	r24, 0x00	; 0
    2a42:	69 f7       	brne	.-38     	; 0x2a1e <H_UltraTrigger+0xb2>
    2a44:	14 c0       	rjmp	.+40     	; 0x2a6e <H_UltraTrigger+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a46:	6f 81       	ldd	r22, Y+7	; 0x07
    2a48:	78 85       	ldd	r23, Y+8	; 0x08
    2a4a:	89 85       	ldd	r24, Y+9	; 0x09
    2a4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a52:	dc 01       	movw	r26, r24
    2a54:	cb 01       	movw	r24, r22
    2a56:	9e 83       	std	Y+6, r25	; 0x06
    2a58:	8d 83       	std	Y+5, r24	; 0x05
    2a5a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a5c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a5e:	9a 83       	std	Y+2, r25	; 0x02
    2a60:	89 83       	std	Y+1, r24	; 0x01
    2a62:	89 81       	ldd	r24, Y+1	; 0x01
    2a64:	9a 81       	ldd	r25, Y+2	; 0x02
    2a66:	01 97       	sbiw	r24, 0x01	; 1
    2a68:	f1 f7       	brne	.-4      	; 0x2a66 <H_UltraTrigger+0xfa>
    2a6a:	9a 83       	std	Y+2, r25	; 0x02
    2a6c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(50);
	MDIO_SetPinValue(TRIGGER_PORT, TRIGGER_PIN, DIO_u8PIN_LOW);
    2a6e:	83 e0       	ldi	r24, 0x03	; 3
    2a70:	67 e0       	ldi	r22, 0x07	; 7
    2a72:	40 e0       	ldi	r20, 0x00	; 0
    2a74:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <MDIO_SetPinValue>

}
    2a78:	2e 96       	adiw	r28, 0x0e	; 14
    2a7a:	0f b6       	in	r0, 0x3f	; 63
    2a7c:	f8 94       	cli
    2a7e:	de bf       	out	0x3e, r29	; 62
    2a80:	0f be       	out	0x3f, r0	; 63
    2a82:	cd bf       	out	0x3d, r28	; 61
    2a84:	cf 91       	pop	r28
    2a86:	df 91       	pop	r29
    2a88:	08 95       	ret

00002a8a <H_UltraUltraRissingEdge>:

void H_UltraUltraRissingEdge(void)
{
    2a8a:	df 93       	push	r29
    2a8c:	cf 93       	push	r28
    2a8e:	cd b7       	in	r28, 0x3d	; 61
    2a90:	de b7       	in	r29, 0x3e	; 62
	// Rising edge, no prescaler , noise canceler
	ICU_u8SetTriggerEdge(ICU_RISING_EDGE);
    2a92:	81 e0       	ldi	r24, 0x01	; 1
    2a94:	0e 94 c6 08 	call	0x118c	; 0x118c <ICU_u8SetTriggerEdge>
	ICU_voidNoiseCanceler();
    2a98:	0e 94 2e 09 	call	0x125c	; 0x125c <ICU_voidNoiseCanceler>
	TIMER1_voidSTOP();
    2a9c:	0e 94 62 08 	call	0x10c4	; 0x10c4 <TIMER1_voidSTOP>

	while (ICU_u8GetInputCaptureFlag() == 0);
    2aa0:	0e 94 12 09 	call	0x1224	; 0x1224 <ICU_u8GetInputCaptureFlag>
    2aa4:	88 23       	and	r24, r24
    2aa6:	e1 f3       	breq	.-8      	; 0x2aa0 <H_UltraUltraRissingEdge+0x16>
	u16_global_RissingValue = ICU_u16ReadInputCapture();  		/* Take value of capture register */
    2aa8:	0e 94 07 09 	call	0x120e	; 0x120e <ICU_u16ReadInputCapture>
    2aac:	90 93 c1 01 	sts	0x01C1, r25
    2ab0:	80 93 c0 01 	sts	0x01C0, r24
	ICU_u8ClearInputCaptureFlag ();			/* Clear ICF flag */
    2ab4:	0e 94 20 09 	call	0x1240	; 0x1240 <ICU_u8ClearInputCaptureFlag>


}
    2ab8:	cf 91       	pop	r28
    2aba:	df 91       	pop	r29
    2abc:	08 95       	ret

00002abe <H_UltraUltraFallingEdge>:
void H_UltraUltraFallingEdge(void)
{
    2abe:	df 93       	push	r29
    2ac0:	cf 93       	push	r28
    2ac2:	cd b7       	in	r28, 0x3d	; 61
    2ac4:	de b7       	in	r29, 0x3e	; 62
	// Rising edge, no prescaler , noise canceler
	ICU_u8SetTriggerEdge(ICU_RISING_EDGE);
    2ac6:	81 e0       	ldi	r24, 0x01	; 1
    2ac8:	0e 94 c6 08 	call	0x118c	; 0x118c <ICU_u8SetTriggerEdge>
	ICU_voidNoiseCanceler();
    2acc:	0e 94 2e 09 	call	0x125c	; 0x125c <ICU_voidNoiseCanceler>
	TIMER1_voidSTOP();
    2ad0:	0e 94 62 08 	call	0x10c4	; 0x10c4 <TIMER1_voidSTOP>

	while (ICU_u8GetInputCaptureFlag() == 0);
    2ad4:	0e 94 12 09 	call	0x1224	; 0x1224 <ICU_u8GetInputCaptureFlag>
    2ad8:	88 23       	and	r24, r24
    2ada:	e1 f3       	breq	.-8      	; 0x2ad4 <H_UltraUltraFallingEdge+0x16>
	u16_global_RissingValue = ICU_u16ReadInputCapture();  		/* Take value of capture register */
    2adc:	0e 94 07 09 	call	0x120e	; 0x120e <ICU_u16ReadInputCapture>
    2ae0:	90 93 c1 01 	sts	0x01C1, r25
    2ae4:	80 93 c0 01 	sts	0x01C0, r24
	ICU_u8ClearInputCaptureFlag ();			/* Clear ICF flag */
    2ae8:	0e 94 20 09 	call	0x1240	; 0x1240 <ICU_u8ClearInputCaptureFlag>



	TIMER1_VoidSetTimerValue(0);        // try to remove ****************
    2aec:	80 e0       	ldi	r24, 0x00	; 0
    2aee:	90 e0       	ldi	r25, 0x00	; 0
    2af0:	0e 94 70 08 	call	0x10e0	; 0x10e0 <TIMER1_VoidSetTimerValue>
	TIMER1_voidSTOP();  				/* Stop the timer */
    2af4:	0e 94 62 08 	call	0x10c4	; 0x10c4 <TIMER1_voidSTOP>

}
    2af8:	cf 91       	pop	r28
    2afa:	df 91       	pop	r29
    2afc:	08 95       	ret

00002afe <H_UltraDistance>:

u32  H_UltraDistance(void)
{
    2afe:	df 93       	push	r29
    2b00:	cf 93       	push	r28
    2b02:	cd b7       	in	r28, 0x3d	; 61
    2b04:	de b7       	in	r29, 0x3e	; 62
    2b06:	28 97       	sbiw	r28, 0x08	; 8
    2b08:	0f b6       	in	r0, 0x3f	; 63
    2b0a:	f8 94       	cli
    2b0c:	de bf       	out	0x3e, r29	; 62
    2b0e:	0f be       	out	0x3f, r0	; 63
    2b10:	cd bf       	out	0x3d, r28	; 61
	u32 u32_local_TimeOn = u16_global_FallingValue - u16_global_RissingValue;
    2b12:	20 91 c2 01 	lds	r18, 0x01C2
    2b16:	30 91 c3 01 	lds	r19, 0x01C3
    2b1a:	80 91 c0 01 	lds	r24, 0x01C0
    2b1e:	90 91 c1 01 	lds	r25, 0x01C1
    2b22:	a9 01       	movw	r20, r18
    2b24:	48 1b       	sub	r20, r24
    2b26:	59 0b       	sbc	r21, r25
    2b28:	ca 01       	movw	r24, r20
    2b2a:	cc 01       	movw	r24, r24
    2b2c:	a0 e0       	ldi	r26, 0x00	; 0
    2b2e:	b0 e0       	ldi	r27, 0x00	; 0
    2b30:	8d 83       	std	Y+5, r24	; 0x05
    2b32:	9e 83       	std	Y+6, r25	; 0x06
    2b34:	af 83       	std	Y+7, r26	; 0x07
    2b36:	b8 87       	std	Y+8, r27	; 0x08
	u32 u32_local_Distance = 0;
    2b38:	19 82       	std	Y+1, r1	; 0x01
    2b3a:	1a 82       	std	Y+2, r1	; 0x02
    2b3c:	1b 82       	std	Y+3, r1	; 0x03
    2b3e:	1c 82       	std	Y+4, r1	; 0x04
	u32_local_Distance = ((u32_local_TimeOn * 34600) / (F_CPU*2)); //cpu*2
    2b40:	8d 81       	ldd	r24, Y+5	; 0x05
    2b42:	9e 81       	ldd	r25, Y+6	; 0x06
    2b44:	af 81       	ldd	r26, Y+7	; 0x07
    2b46:	b8 85       	ldd	r27, Y+8	; 0x08
    2b48:	28 e2       	ldi	r18, 0x28	; 40
    2b4a:	37 e8       	ldi	r19, 0x87	; 135
    2b4c:	40 e0       	ldi	r20, 0x00	; 0
    2b4e:	50 e0       	ldi	r21, 0x00	; 0
    2b50:	bc 01       	movw	r22, r24
    2b52:	cd 01       	movw	r24, r26
    2b54:	0e 94 9b 23 	call	0x4736	; 0x4736 <__mulsi3>
    2b58:	dc 01       	movw	r26, r24
    2b5a:	cb 01       	movw	r24, r22
    2b5c:	20 e0       	ldi	r18, 0x00	; 0
    2b5e:	38 e4       	ldi	r19, 0x48	; 72
    2b60:	48 ee       	ldi	r20, 0xE8	; 232
    2b62:	51 e0       	ldi	r21, 0x01	; 1
    2b64:	bc 01       	movw	r22, r24
    2b66:	cd 01       	movw	r24, r26
    2b68:	0e 94 cd 23 	call	0x479a	; 0x479a <__udivmodsi4>
    2b6c:	da 01       	movw	r26, r20
    2b6e:	c9 01       	movw	r24, r18
    2b70:	89 83       	std	Y+1, r24	; 0x01
    2b72:	9a 83       	std	Y+2, r25	; 0x02
    2b74:	ab 83       	std	Y+3, r26	; 0x03
    2b76:	bc 83       	std	Y+4, r27	; 0x04


	return u32_local_Distance;
    2b78:	89 81       	ldd	r24, Y+1	; 0x01
    2b7a:	9a 81       	ldd	r25, Y+2	; 0x02
    2b7c:	ab 81       	ldd	r26, Y+3	; 0x03
    2b7e:	bc 81       	ldd	r27, Y+4	; 0x04
}
    2b80:	bc 01       	movw	r22, r24
    2b82:	cd 01       	movw	r24, r26
    2b84:	28 96       	adiw	r28, 0x08	; 8
    2b86:	0f b6       	in	r0, 0x3f	; 63
    2b88:	f8 94       	cli
    2b8a:	de bf       	out	0x3e, r29	; 62
    2b8c:	0f be       	out	0x3f, r0	; 63
    2b8e:	cd bf       	out	0x3d, r28	; 61
    2b90:	cf 91       	pop	r28
    2b92:	df 91       	pop	r29
    2b94:	08 95       	ret

00002b96 <HSSD_Init>:
#include "../HSSD/HSSD_interface.h"
#include "../HSSD/HSSD_config.h"
#include "../HSSD/HSSD_private.h"

error_state_t HSSD_Init(void)
{
    2b96:	df 93       	push	r29
    2b98:	cf 93       	push	r28
    2b9a:	0f 92       	push	r0
    2b9c:	cd b7       	in	r28, 0x3d	; 61
    2b9e:	de b7       	in	r29, 0x3e	; 62
	error_state_t Local_ErrorState = R_OK;
    2ba0:	81 e0       	ldi	r24, 0x01	; 1
    2ba2:	89 83       	std	Y+1, r24	; 0x01

	MDIO_SetPinDirection(SSD_DATA_PORT,DATA_PIN_A, DIO_u8PIN_OUTPUT);
    2ba4:	81 e0       	ldi	r24, 0x01	; 1
    2ba6:	60 e0       	ldi	r22, 0x00	; 0
    2ba8:	41 e0       	ldi	r20, 0x01	; 1
    2baa:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <MDIO_SetPinDirection>
	MDIO_SetPinDirection(SSD_DATA_PORT,DATA_PIN_B, DIO_u8PIN_OUTPUT);
    2bae:	81 e0       	ldi	r24, 0x01	; 1
    2bb0:	61 e0       	ldi	r22, 0x01	; 1
    2bb2:	41 e0       	ldi	r20, 0x01	; 1
    2bb4:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <MDIO_SetPinDirection>
	MDIO_SetPinDirection(SSD_DATA_PORT,DATA_PIN_C, DIO_u8PIN_OUTPUT);
    2bb8:	81 e0       	ldi	r24, 0x01	; 1
    2bba:	62 e0       	ldi	r22, 0x02	; 2
    2bbc:	41 e0       	ldi	r20, 0x01	; 1
    2bbe:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <MDIO_SetPinDirection>
	MDIO_SetPinDirection(SSD_DATA_PORT,DATA_PIN_D, DIO_u8PIN_OUTPUT);
    2bc2:	81 e0       	ldi	r24, 0x01	; 1
    2bc4:	64 e0       	ldi	r22, 0x04	; 4
    2bc6:	41 e0       	ldi	r20, 0x01	; 1
    2bc8:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <MDIO_SetPinDirection>

	MDIO_SetPinDirection(SSD_CTRL_PORT_1, SSD_1_EN_PIN, DIO_u8PIN_OUTPUT);
    2bcc:	80 e0       	ldi	r24, 0x00	; 0
    2bce:	63 e0       	ldi	r22, 0x03	; 3
    2bd0:	41 e0       	ldi	r20, 0x01	; 1
    2bd2:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <MDIO_SetPinDirection>
	MDIO_SetPinDirection(SSD_CTRL_PORT_1, SSD_2_EN_PIN, DIO_u8PIN_OUTPUT);
    2bd6:	80 e0       	ldi	r24, 0x00	; 0
    2bd8:	62 e0       	ldi	r22, 0x02	; 2
    2bda:	41 e0       	ldi	r20, 0x01	; 1
    2bdc:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <MDIO_SetPinDirection>
	MDIO_SetPinDirection(SSD_CTRL_PORT_2, SSD_3_EN_PIN, DIO_u8PIN_OUTPUT);
    2be0:	81 e0       	ldi	r24, 0x01	; 1
    2be2:	65 e0       	ldi	r22, 0x05	; 5
    2be4:	41 e0       	ldi	r20, 0x01	; 1
    2be6:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <MDIO_SetPinDirection>
	MDIO_SetPinDirection(SSD_CTRL_PORT_2, SSD_4_EN_PIN, DIO_u8PIN_OUTPUT);
    2bea:	81 e0       	ldi	r24, 0x01	; 1
    2bec:	66 e0       	ldi	r22, 0x06	; 6
    2bee:	41 e0       	ldi	r20, 0x01	; 1
    2bf0:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <MDIO_SetPinDirection>


	return Local_ErrorState;
    2bf4:	89 81       	ldd	r24, Y+1	; 0x01
}
    2bf6:	0f 90       	pop	r0
    2bf8:	cf 91       	pop	r28
    2bfa:	df 91       	pop	r29
    2bfc:	08 95       	ret

00002bfe <HSSD_WriteData>:
error_state_t HSSD_WriteData(u8 Copy_u8Num)
{
    2bfe:	df 93       	push	r29
    2c00:	cf 93       	push	r28
    2c02:	00 d0       	rcall	.+0      	; 0x2c04 <HSSD_WriteData+0x6>
    2c04:	cd b7       	in	r28, 0x3d	; 61
    2c06:	de b7       	in	r29, 0x3e	; 62
    2c08:	8a 83       	std	Y+2, r24	; 0x02
	error_state_t Local_ErrorState = R_OK;
    2c0a:	81 e0       	ldi	r24, 0x01	; 1
    2c0c:	89 83       	std	Y+1, r24	; 0x01

	MDIO_SetPinValue(SSD_DATA_PORT,DATA_PIN_A,GET_BIT(Copy_u8Num,PIN_0));
    2c0e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c10:	98 2f       	mov	r25, r24
    2c12:	91 70       	andi	r25, 0x01	; 1
    2c14:	81 e0       	ldi	r24, 0x01	; 1
    2c16:	60 e0       	ldi	r22, 0x00	; 0
    2c18:	49 2f       	mov	r20, r25
    2c1a:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <MDIO_SetPinValue>
	MDIO_SetPinValue(SSD_DATA_PORT,DATA_PIN_B,GET_BIT(Copy_u8Num,PIN_1));
    2c1e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c20:	86 95       	lsr	r24
    2c22:	98 2f       	mov	r25, r24
    2c24:	91 70       	andi	r25, 0x01	; 1
    2c26:	81 e0       	ldi	r24, 0x01	; 1
    2c28:	61 e0       	ldi	r22, 0x01	; 1
    2c2a:	49 2f       	mov	r20, r25
    2c2c:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <MDIO_SetPinValue>
	MDIO_SetPinValue(SSD_DATA_PORT,DATA_PIN_C,GET_BIT(Copy_u8Num,PIN_2));
    2c30:	8a 81       	ldd	r24, Y+2	; 0x02
    2c32:	86 95       	lsr	r24
    2c34:	86 95       	lsr	r24
    2c36:	98 2f       	mov	r25, r24
    2c38:	91 70       	andi	r25, 0x01	; 1
    2c3a:	81 e0       	ldi	r24, 0x01	; 1
    2c3c:	62 e0       	ldi	r22, 0x02	; 2
    2c3e:	49 2f       	mov	r20, r25
    2c40:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <MDIO_SetPinValue>
	MDIO_SetPinValue(SSD_DATA_PORT,DATA_PIN_D,GET_BIT(Copy_u8Num,PIN_3));
    2c44:	8a 81       	ldd	r24, Y+2	; 0x02
    2c46:	86 95       	lsr	r24
    2c48:	86 95       	lsr	r24
    2c4a:	86 95       	lsr	r24
    2c4c:	98 2f       	mov	r25, r24
    2c4e:	91 70       	andi	r25, 0x01	; 1
    2c50:	81 e0       	ldi	r24, 0x01	; 1
    2c52:	64 e0       	ldi	r22, 0x04	; 4
    2c54:	49 2f       	mov	r20, r25
    2c56:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <MDIO_SetPinValue>

	return Local_ErrorState;
    2c5a:	89 81       	ldd	r24, Y+1	; 0x01

}
    2c5c:	0f 90       	pop	r0
    2c5e:	0f 90       	pop	r0
    2c60:	cf 91       	pop	r28
    2c62:	df 91       	pop	r29
    2c64:	08 95       	ret

00002c66 <HSSD_DisplayBlink>:

error_state_t HSSD_DisplayBlink(u32 Copy_u8Num)
{
    2c66:	0f 93       	push	r16
    2c68:	1f 93       	push	r17
    2c6a:	df 93       	push	r29
    2c6c:	cf 93       	push	r28
    2c6e:	cd b7       	in	r28, 0x3d	; 61
    2c70:	de b7       	in	r29, 0x3e	; 62
    2c72:	c2 54       	subi	r28, 0x42	; 66
    2c74:	d0 40       	sbci	r29, 0x00	; 0
    2c76:	0f b6       	in	r0, 0x3f	; 63
    2c78:	f8 94       	cli
    2c7a:	de bf       	out	0x3e, r29	; 62
    2c7c:	0f be       	out	0x3f, r0	; 63
    2c7e:	cd bf       	out	0x3d, r28	; 61
    2c80:	fe 01       	movw	r30, r28
    2c82:	ff 96       	adiw	r30, 0x3f	; 63
    2c84:	60 83       	st	Z, r22
    2c86:	71 83       	std	Z+1, r23	; 0x01
    2c88:	82 83       	std	Z+2, r24	; 0x02
    2c8a:	93 83       	std	Z+3, r25	; 0x03
	error_state_t Local_ErrorState = R_OK;
    2c8c:	81 e0       	ldi	r24, 0x01	; 1
    2c8e:	8e af       	std	Y+62, r24	; 0x3e
	// there other way to use array instead
	//u8 copy_u8Digit [4];

	u8 Local_u8Ones = Copy_u8Num%10;
    2c90:	fe 01       	movw	r30, r28
    2c92:	ff 96       	adiw	r30, 0x3f	; 63
    2c94:	80 81       	ld	r24, Z
    2c96:	91 81       	ldd	r25, Z+1	; 0x01
    2c98:	a2 81       	ldd	r26, Z+2	; 0x02
    2c9a:	b3 81       	ldd	r27, Z+3	; 0x03
    2c9c:	2a e0       	ldi	r18, 0x0A	; 10
    2c9e:	30 e0       	ldi	r19, 0x00	; 0
    2ca0:	40 e0       	ldi	r20, 0x00	; 0
    2ca2:	50 e0       	ldi	r21, 0x00	; 0
    2ca4:	bc 01       	movw	r22, r24
    2ca6:	cd 01       	movw	r24, r26
    2ca8:	0e 94 cd 23 	call	0x479a	; 0x479a <__udivmodsi4>
    2cac:	dc 01       	movw	r26, r24
    2cae:	cb 01       	movw	r24, r22
    2cb0:	8d af       	std	Y+61, r24	; 0x3d
	Copy_u8Num/=10;
    2cb2:	8e 01       	movw	r16, r28
    2cb4:	01 5c       	subi	r16, 0xC1	; 193
    2cb6:	1f 4f       	sbci	r17, 0xFF	; 255
    2cb8:	fe 01       	movw	r30, r28
    2cba:	ff 96       	adiw	r30, 0x3f	; 63
    2cbc:	80 81       	ld	r24, Z
    2cbe:	91 81       	ldd	r25, Z+1	; 0x01
    2cc0:	a2 81       	ldd	r26, Z+2	; 0x02
    2cc2:	b3 81       	ldd	r27, Z+3	; 0x03
    2cc4:	2a e0       	ldi	r18, 0x0A	; 10
    2cc6:	30 e0       	ldi	r19, 0x00	; 0
    2cc8:	40 e0       	ldi	r20, 0x00	; 0
    2cca:	50 e0       	ldi	r21, 0x00	; 0
    2ccc:	bc 01       	movw	r22, r24
    2cce:	cd 01       	movw	r24, r26
    2cd0:	0e 94 cd 23 	call	0x479a	; 0x479a <__udivmodsi4>
    2cd4:	da 01       	movw	r26, r20
    2cd6:	c9 01       	movw	r24, r18
    2cd8:	f8 01       	movw	r30, r16
    2cda:	80 83       	st	Z, r24
    2cdc:	91 83       	std	Z+1, r25	; 0x01
    2cde:	a2 83       	std	Z+2, r26	; 0x02
    2ce0:	b3 83       	std	Z+3, r27	; 0x03
	u8 Local_u8Tens = Copy_u8Num%10;
    2ce2:	fe 01       	movw	r30, r28
    2ce4:	ff 96       	adiw	r30, 0x3f	; 63
    2ce6:	80 81       	ld	r24, Z
    2ce8:	91 81       	ldd	r25, Z+1	; 0x01
    2cea:	a2 81       	ldd	r26, Z+2	; 0x02
    2cec:	b3 81       	ldd	r27, Z+3	; 0x03
    2cee:	2a e0       	ldi	r18, 0x0A	; 10
    2cf0:	30 e0       	ldi	r19, 0x00	; 0
    2cf2:	40 e0       	ldi	r20, 0x00	; 0
    2cf4:	50 e0       	ldi	r21, 0x00	; 0
    2cf6:	bc 01       	movw	r22, r24
    2cf8:	cd 01       	movw	r24, r26
    2cfa:	0e 94 cd 23 	call	0x479a	; 0x479a <__udivmodsi4>
    2cfe:	dc 01       	movw	r26, r24
    2d00:	cb 01       	movw	r24, r22
    2d02:	8c af       	std	Y+60, r24	; 0x3c
	Copy_u8Num/=10;
    2d04:	8e 01       	movw	r16, r28
    2d06:	01 5c       	subi	r16, 0xC1	; 193
    2d08:	1f 4f       	sbci	r17, 0xFF	; 255
    2d0a:	fe 01       	movw	r30, r28
    2d0c:	ff 96       	adiw	r30, 0x3f	; 63
    2d0e:	80 81       	ld	r24, Z
    2d10:	91 81       	ldd	r25, Z+1	; 0x01
    2d12:	a2 81       	ldd	r26, Z+2	; 0x02
    2d14:	b3 81       	ldd	r27, Z+3	; 0x03
    2d16:	2a e0       	ldi	r18, 0x0A	; 10
    2d18:	30 e0       	ldi	r19, 0x00	; 0
    2d1a:	40 e0       	ldi	r20, 0x00	; 0
    2d1c:	50 e0       	ldi	r21, 0x00	; 0
    2d1e:	bc 01       	movw	r22, r24
    2d20:	cd 01       	movw	r24, r26
    2d22:	0e 94 cd 23 	call	0x479a	; 0x479a <__udivmodsi4>
    2d26:	da 01       	movw	r26, r20
    2d28:	c9 01       	movw	r24, r18
    2d2a:	f8 01       	movw	r30, r16
    2d2c:	80 83       	st	Z, r24
    2d2e:	91 83       	std	Z+1, r25	; 0x01
    2d30:	a2 83       	std	Z+2, r26	; 0x02
    2d32:	b3 83       	std	Z+3, r27	; 0x03
	u8 Local_u8Hundred = Copy_u8Num%10;
    2d34:	fe 01       	movw	r30, r28
    2d36:	ff 96       	adiw	r30, 0x3f	; 63
    2d38:	80 81       	ld	r24, Z
    2d3a:	91 81       	ldd	r25, Z+1	; 0x01
    2d3c:	a2 81       	ldd	r26, Z+2	; 0x02
    2d3e:	b3 81       	ldd	r27, Z+3	; 0x03
    2d40:	2a e0       	ldi	r18, 0x0A	; 10
    2d42:	30 e0       	ldi	r19, 0x00	; 0
    2d44:	40 e0       	ldi	r20, 0x00	; 0
    2d46:	50 e0       	ldi	r21, 0x00	; 0
    2d48:	bc 01       	movw	r22, r24
    2d4a:	cd 01       	movw	r24, r26
    2d4c:	0e 94 cd 23 	call	0x479a	; 0x479a <__udivmodsi4>
    2d50:	dc 01       	movw	r26, r24
    2d52:	cb 01       	movw	r24, r22
    2d54:	8b af       	std	Y+59, r24	; 0x3b
	Copy_u8Num/=10;
    2d56:	8e 01       	movw	r16, r28
    2d58:	01 5c       	subi	r16, 0xC1	; 193
    2d5a:	1f 4f       	sbci	r17, 0xFF	; 255
    2d5c:	fe 01       	movw	r30, r28
    2d5e:	ff 96       	adiw	r30, 0x3f	; 63
    2d60:	80 81       	ld	r24, Z
    2d62:	91 81       	ldd	r25, Z+1	; 0x01
    2d64:	a2 81       	ldd	r26, Z+2	; 0x02
    2d66:	b3 81       	ldd	r27, Z+3	; 0x03
    2d68:	2a e0       	ldi	r18, 0x0A	; 10
    2d6a:	30 e0       	ldi	r19, 0x00	; 0
    2d6c:	40 e0       	ldi	r20, 0x00	; 0
    2d6e:	50 e0       	ldi	r21, 0x00	; 0
    2d70:	bc 01       	movw	r22, r24
    2d72:	cd 01       	movw	r24, r26
    2d74:	0e 94 cd 23 	call	0x479a	; 0x479a <__udivmodsi4>
    2d78:	da 01       	movw	r26, r20
    2d7a:	c9 01       	movw	r24, r18
    2d7c:	f8 01       	movw	r30, r16
    2d7e:	80 83       	st	Z, r24
    2d80:	91 83       	std	Z+1, r25	; 0x01
    2d82:	a2 83       	std	Z+2, r26	; 0x02
    2d84:	b3 83       	std	Z+3, r27	; 0x03
	u8 Local_u8Thousand = Copy_u8Num;
    2d86:	fe 01       	movw	r30, r28
    2d88:	ff 96       	adiw	r30, 0x3f	; 63
    2d8a:	80 81       	ld	r24, Z
    2d8c:	8a af       	std	Y+58, r24	; 0x3a

	u8 Local_u8BlinkCounter = 0;
    2d8e:	19 ae       	std	Y+57, r1	; 0x39
	for (Local_u8BlinkCounter = 0; Local_u8BlinkCounter<60; Local_u8BlinkCounter++)
    2d90:	19 ae       	std	Y+57, r1	; 0x39
    2d92:	3b c2       	rjmp	.+1142   	; 0x320a <HSSD_DisplayBlink+0x5a4>
	{
		MDIO_SetPinValue(SSD_CTRL_PORT_1, SSD_1_EN_PIN, DIO_u8PIN_LOW);
    2d94:	80 e0       	ldi	r24, 0x00	; 0
    2d96:	63 e0       	ldi	r22, 0x03	; 3
    2d98:	40 e0       	ldi	r20, 0x00	; 0
    2d9a:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <MDIO_SetPinValue>
		MDIO_SetPinValue(SSD_CTRL_PORT_1, SSD_2_EN_PIN, DIO_u8PIN_HIGH);
    2d9e:	80 e0       	ldi	r24, 0x00	; 0
    2da0:	62 e0       	ldi	r22, 0x02	; 2
    2da2:	41 e0       	ldi	r20, 0x01	; 1
    2da4:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <MDIO_SetPinValue>
		MDIO_SetPinValue(SSD_CTRL_PORT_2, SSD_3_EN_PIN, DIO_u8PIN_HIGH);
    2da8:	81 e0       	ldi	r24, 0x01	; 1
    2daa:	65 e0       	ldi	r22, 0x05	; 5
    2dac:	41 e0       	ldi	r20, 0x01	; 1
    2dae:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <MDIO_SetPinValue>
		MDIO_SetPinValue(SSD_CTRL_PORT_2, SSD_4_EN_PIN, DIO_u8PIN_HIGH);
    2db2:	81 e0       	ldi	r24, 0x01	; 1
    2db4:	66 e0       	ldi	r22, 0x06	; 6
    2db6:	41 e0       	ldi	r20, 0x01	; 1
    2db8:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <MDIO_SetPinValue>
		HSSD_WriteData(Local_u8Ones);
    2dbc:	8d ad       	ldd	r24, Y+61	; 0x3d
    2dbe:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <HSSD_WriteData>
    2dc2:	80 e0       	ldi	r24, 0x00	; 0
    2dc4:	90 e0       	ldi	r25, 0x00	; 0
    2dc6:	a0 ea       	ldi	r26, 0xA0	; 160
    2dc8:	b0 e4       	ldi	r27, 0x40	; 64
    2dca:	8d ab       	std	Y+53, r24	; 0x35
    2dcc:	9e ab       	std	Y+54, r25	; 0x36
    2dce:	af ab       	std	Y+55, r26	; 0x37
    2dd0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dd2:	6d a9       	ldd	r22, Y+53	; 0x35
    2dd4:	7e a9       	ldd	r23, Y+54	; 0x36
    2dd6:	8f a9       	ldd	r24, Y+55	; 0x37
    2dd8:	98 ad       	ldd	r25, Y+56	; 0x38
    2dda:	20 e0       	ldi	r18, 0x00	; 0
    2ddc:	30 e0       	ldi	r19, 0x00	; 0
    2dde:	4a e7       	ldi	r20, 0x7A	; 122
    2de0:	55 e4       	ldi	r21, 0x45	; 69
    2de2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2de6:	dc 01       	movw	r26, r24
    2de8:	cb 01       	movw	r24, r22
    2dea:	89 ab       	std	Y+49, r24	; 0x31
    2dec:	9a ab       	std	Y+50, r25	; 0x32
    2dee:	ab ab       	std	Y+51, r26	; 0x33
    2df0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2df2:	69 a9       	ldd	r22, Y+49	; 0x31
    2df4:	7a a9       	ldd	r23, Y+50	; 0x32
    2df6:	8b a9       	ldd	r24, Y+51	; 0x33
    2df8:	9c a9       	ldd	r25, Y+52	; 0x34
    2dfa:	20 e0       	ldi	r18, 0x00	; 0
    2dfc:	30 e0       	ldi	r19, 0x00	; 0
    2dfe:	40 e8       	ldi	r20, 0x80	; 128
    2e00:	5f e3       	ldi	r21, 0x3F	; 63
    2e02:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2e06:	88 23       	and	r24, r24
    2e08:	2c f4       	brge	.+10     	; 0x2e14 <HSSD_DisplayBlink+0x1ae>
		__ticks = 1;
    2e0a:	81 e0       	ldi	r24, 0x01	; 1
    2e0c:	90 e0       	ldi	r25, 0x00	; 0
    2e0e:	98 ab       	std	Y+48, r25	; 0x30
    2e10:	8f a7       	std	Y+47, r24	; 0x2f
    2e12:	3f c0       	rjmp	.+126    	; 0x2e92 <HSSD_DisplayBlink+0x22c>
	else if (__tmp > 65535)
    2e14:	69 a9       	ldd	r22, Y+49	; 0x31
    2e16:	7a a9       	ldd	r23, Y+50	; 0x32
    2e18:	8b a9       	ldd	r24, Y+51	; 0x33
    2e1a:	9c a9       	ldd	r25, Y+52	; 0x34
    2e1c:	20 e0       	ldi	r18, 0x00	; 0
    2e1e:	3f ef       	ldi	r19, 0xFF	; 255
    2e20:	4f e7       	ldi	r20, 0x7F	; 127
    2e22:	57 e4       	ldi	r21, 0x47	; 71
    2e24:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2e28:	18 16       	cp	r1, r24
    2e2a:	4c f5       	brge	.+82     	; 0x2e7e <HSSD_DisplayBlink+0x218>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e2c:	6d a9       	ldd	r22, Y+53	; 0x35
    2e2e:	7e a9       	ldd	r23, Y+54	; 0x36
    2e30:	8f a9       	ldd	r24, Y+55	; 0x37
    2e32:	98 ad       	ldd	r25, Y+56	; 0x38
    2e34:	20 e0       	ldi	r18, 0x00	; 0
    2e36:	30 e0       	ldi	r19, 0x00	; 0
    2e38:	40 e2       	ldi	r20, 0x20	; 32
    2e3a:	51 e4       	ldi	r21, 0x41	; 65
    2e3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e40:	dc 01       	movw	r26, r24
    2e42:	cb 01       	movw	r24, r22
    2e44:	bc 01       	movw	r22, r24
    2e46:	cd 01       	movw	r24, r26
    2e48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e4c:	dc 01       	movw	r26, r24
    2e4e:	cb 01       	movw	r24, r22
    2e50:	98 ab       	std	Y+48, r25	; 0x30
    2e52:	8f a7       	std	Y+47, r24	; 0x2f
    2e54:	0f c0       	rjmp	.+30     	; 0x2e74 <HSSD_DisplayBlink+0x20e>
    2e56:	80 e9       	ldi	r24, 0x90	; 144
    2e58:	91 e0       	ldi	r25, 0x01	; 1
    2e5a:	9e a7       	std	Y+46, r25	; 0x2e
    2e5c:	8d a7       	std	Y+45, r24	; 0x2d
    2e5e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2e60:	9e a5       	ldd	r25, Y+46	; 0x2e
    2e62:	01 97       	sbiw	r24, 0x01	; 1
    2e64:	f1 f7       	brne	.-4      	; 0x2e62 <HSSD_DisplayBlink+0x1fc>
    2e66:	9e a7       	std	Y+46, r25	; 0x2e
    2e68:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e6a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e6c:	98 a9       	ldd	r25, Y+48	; 0x30
    2e6e:	01 97       	sbiw	r24, 0x01	; 1
    2e70:	98 ab       	std	Y+48, r25	; 0x30
    2e72:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e74:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e76:	98 a9       	ldd	r25, Y+48	; 0x30
    2e78:	00 97       	sbiw	r24, 0x00	; 0
    2e7a:	69 f7       	brne	.-38     	; 0x2e56 <HSSD_DisplayBlink+0x1f0>
    2e7c:	14 c0       	rjmp	.+40     	; 0x2ea6 <HSSD_DisplayBlink+0x240>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e7e:	69 a9       	ldd	r22, Y+49	; 0x31
    2e80:	7a a9       	ldd	r23, Y+50	; 0x32
    2e82:	8b a9       	ldd	r24, Y+51	; 0x33
    2e84:	9c a9       	ldd	r25, Y+52	; 0x34
    2e86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e8a:	dc 01       	movw	r26, r24
    2e8c:	cb 01       	movw	r24, r22
    2e8e:	98 ab       	std	Y+48, r25	; 0x30
    2e90:	8f a7       	std	Y+47, r24	; 0x2f
    2e92:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e94:	98 a9       	ldd	r25, Y+48	; 0x30
    2e96:	9c a7       	std	Y+44, r25	; 0x2c
    2e98:	8b a7       	std	Y+43, r24	; 0x2b
    2e9a:	8b a5       	ldd	r24, Y+43	; 0x2b
    2e9c:	9c a5       	ldd	r25, Y+44	; 0x2c
    2e9e:	01 97       	sbiw	r24, 0x01	; 1
    2ea0:	f1 f7       	brne	.-4      	; 0x2e9e <HSSD_DisplayBlink+0x238>
    2ea2:	9c a7       	std	Y+44, r25	; 0x2c
    2ea4:	8b a7       	std	Y+43, r24	; 0x2b

		_delay_ms(5);

		MDIO_SetPinValue(SSD_CTRL_PORT_1, SSD_1_EN_PIN, DIO_u8PIN_HIGH);
    2ea6:	80 e0       	ldi	r24, 0x00	; 0
    2ea8:	63 e0       	ldi	r22, 0x03	; 3
    2eaa:	41 e0       	ldi	r20, 0x01	; 1
    2eac:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <MDIO_SetPinValue>
		MDIO_SetPinValue(SSD_CTRL_PORT_1, SSD_2_EN_PIN, DIO_u8PIN_LOW);
    2eb0:	80 e0       	ldi	r24, 0x00	; 0
    2eb2:	62 e0       	ldi	r22, 0x02	; 2
    2eb4:	40 e0       	ldi	r20, 0x00	; 0
    2eb6:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <MDIO_SetPinValue>
		MDIO_SetPinValue(SSD_CTRL_PORT_2, SSD_3_EN_PIN, DIO_u8PIN_HIGH);
    2eba:	81 e0       	ldi	r24, 0x01	; 1
    2ebc:	65 e0       	ldi	r22, 0x05	; 5
    2ebe:	41 e0       	ldi	r20, 0x01	; 1
    2ec0:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <MDIO_SetPinValue>
		MDIO_SetPinValue(SSD_CTRL_PORT_2, SSD_4_EN_PIN, DIO_u8PIN_HIGH);
    2ec4:	81 e0       	ldi	r24, 0x01	; 1
    2ec6:	66 e0       	ldi	r22, 0x06	; 6
    2ec8:	41 e0       	ldi	r20, 0x01	; 1
    2eca:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <MDIO_SetPinValue>
		HSSD_WriteData(Local_u8Tens);
    2ece:	8c ad       	ldd	r24, Y+60	; 0x3c
    2ed0:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <HSSD_WriteData>
    2ed4:	80 e0       	ldi	r24, 0x00	; 0
    2ed6:	90 e0       	ldi	r25, 0x00	; 0
    2ed8:	a0 ea       	ldi	r26, 0xA0	; 160
    2eda:	b0 e4       	ldi	r27, 0x40	; 64
    2edc:	8f a3       	std	Y+39, r24	; 0x27
    2ede:	98 a7       	std	Y+40, r25	; 0x28
    2ee0:	a9 a7       	std	Y+41, r26	; 0x29
    2ee2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ee4:	6f a1       	ldd	r22, Y+39	; 0x27
    2ee6:	78 a5       	ldd	r23, Y+40	; 0x28
    2ee8:	89 a5       	ldd	r24, Y+41	; 0x29
    2eea:	9a a5       	ldd	r25, Y+42	; 0x2a
    2eec:	20 e0       	ldi	r18, 0x00	; 0
    2eee:	30 e0       	ldi	r19, 0x00	; 0
    2ef0:	4a e7       	ldi	r20, 0x7A	; 122
    2ef2:	55 e4       	ldi	r21, 0x45	; 69
    2ef4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ef8:	dc 01       	movw	r26, r24
    2efa:	cb 01       	movw	r24, r22
    2efc:	8b a3       	std	Y+35, r24	; 0x23
    2efe:	9c a3       	std	Y+36, r25	; 0x24
    2f00:	ad a3       	std	Y+37, r26	; 0x25
    2f02:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2f04:	6b a1       	ldd	r22, Y+35	; 0x23
    2f06:	7c a1       	ldd	r23, Y+36	; 0x24
    2f08:	8d a1       	ldd	r24, Y+37	; 0x25
    2f0a:	9e a1       	ldd	r25, Y+38	; 0x26
    2f0c:	20 e0       	ldi	r18, 0x00	; 0
    2f0e:	30 e0       	ldi	r19, 0x00	; 0
    2f10:	40 e8       	ldi	r20, 0x80	; 128
    2f12:	5f e3       	ldi	r21, 0x3F	; 63
    2f14:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2f18:	88 23       	and	r24, r24
    2f1a:	2c f4       	brge	.+10     	; 0x2f26 <HSSD_DisplayBlink+0x2c0>
		__ticks = 1;
    2f1c:	81 e0       	ldi	r24, 0x01	; 1
    2f1e:	90 e0       	ldi	r25, 0x00	; 0
    2f20:	9a a3       	std	Y+34, r25	; 0x22
    2f22:	89 a3       	std	Y+33, r24	; 0x21
    2f24:	3f c0       	rjmp	.+126    	; 0x2fa4 <HSSD_DisplayBlink+0x33e>
	else if (__tmp > 65535)
    2f26:	6b a1       	ldd	r22, Y+35	; 0x23
    2f28:	7c a1       	ldd	r23, Y+36	; 0x24
    2f2a:	8d a1       	ldd	r24, Y+37	; 0x25
    2f2c:	9e a1       	ldd	r25, Y+38	; 0x26
    2f2e:	20 e0       	ldi	r18, 0x00	; 0
    2f30:	3f ef       	ldi	r19, 0xFF	; 255
    2f32:	4f e7       	ldi	r20, 0x7F	; 127
    2f34:	57 e4       	ldi	r21, 0x47	; 71
    2f36:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2f3a:	18 16       	cp	r1, r24
    2f3c:	4c f5       	brge	.+82     	; 0x2f90 <HSSD_DisplayBlink+0x32a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f3e:	6f a1       	ldd	r22, Y+39	; 0x27
    2f40:	78 a5       	ldd	r23, Y+40	; 0x28
    2f42:	89 a5       	ldd	r24, Y+41	; 0x29
    2f44:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f46:	20 e0       	ldi	r18, 0x00	; 0
    2f48:	30 e0       	ldi	r19, 0x00	; 0
    2f4a:	40 e2       	ldi	r20, 0x20	; 32
    2f4c:	51 e4       	ldi	r21, 0x41	; 65
    2f4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f52:	dc 01       	movw	r26, r24
    2f54:	cb 01       	movw	r24, r22
    2f56:	bc 01       	movw	r22, r24
    2f58:	cd 01       	movw	r24, r26
    2f5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f5e:	dc 01       	movw	r26, r24
    2f60:	cb 01       	movw	r24, r22
    2f62:	9a a3       	std	Y+34, r25	; 0x22
    2f64:	89 a3       	std	Y+33, r24	; 0x21
    2f66:	0f c0       	rjmp	.+30     	; 0x2f86 <HSSD_DisplayBlink+0x320>
    2f68:	80 e9       	ldi	r24, 0x90	; 144
    2f6a:	91 e0       	ldi	r25, 0x01	; 1
    2f6c:	98 a3       	std	Y+32, r25	; 0x20
    2f6e:	8f 8f       	std	Y+31, r24	; 0x1f
    2f70:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2f72:	98 a1       	ldd	r25, Y+32	; 0x20
    2f74:	01 97       	sbiw	r24, 0x01	; 1
    2f76:	f1 f7       	brne	.-4      	; 0x2f74 <HSSD_DisplayBlink+0x30e>
    2f78:	98 a3       	std	Y+32, r25	; 0x20
    2f7a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f7c:	89 a1       	ldd	r24, Y+33	; 0x21
    2f7e:	9a a1       	ldd	r25, Y+34	; 0x22
    2f80:	01 97       	sbiw	r24, 0x01	; 1
    2f82:	9a a3       	std	Y+34, r25	; 0x22
    2f84:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f86:	89 a1       	ldd	r24, Y+33	; 0x21
    2f88:	9a a1       	ldd	r25, Y+34	; 0x22
    2f8a:	00 97       	sbiw	r24, 0x00	; 0
    2f8c:	69 f7       	brne	.-38     	; 0x2f68 <HSSD_DisplayBlink+0x302>
    2f8e:	14 c0       	rjmp	.+40     	; 0x2fb8 <HSSD_DisplayBlink+0x352>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f90:	6b a1       	ldd	r22, Y+35	; 0x23
    2f92:	7c a1       	ldd	r23, Y+36	; 0x24
    2f94:	8d a1       	ldd	r24, Y+37	; 0x25
    2f96:	9e a1       	ldd	r25, Y+38	; 0x26
    2f98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f9c:	dc 01       	movw	r26, r24
    2f9e:	cb 01       	movw	r24, r22
    2fa0:	9a a3       	std	Y+34, r25	; 0x22
    2fa2:	89 a3       	std	Y+33, r24	; 0x21
    2fa4:	89 a1       	ldd	r24, Y+33	; 0x21
    2fa6:	9a a1       	ldd	r25, Y+34	; 0x22
    2fa8:	9e 8f       	std	Y+30, r25	; 0x1e
    2faa:	8d 8f       	std	Y+29, r24	; 0x1d
    2fac:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2fae:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2fb0:	01 97       	sbiw	r24, 0x01	; 1
    2fb2:	f1 f7       	brne	.-4      	; 0x2fb0 <HSSD_DisplayBlink+0x34a>
    2fb4:	9e 8f       	std	Y+30, r25	; 0x1e
    2fb6:	8d 8f       	std	Y+29, r24	; 0x1d

		_delay_ms(5);

		MDIO_SetPinValue(SSD_CTRL_PORT_1, SSD_1_EN_PIN, DIO_u8PIN_HIGH);
    2fb8:	80 e0       	ldi	r24, 0x00	; 0
    2fba:	63 e0       	ldi	r22, 0x03	; 3
    2fbc:	41 e0       	ldi	r20, 0x01	; 1
    2fbe:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <MDIO_SetPinValue>
		MDIO_SetPinValue(SSD_CTRL_PORT_1, SSD_2_EN_PIN, DIO_u8PIN_HIGH);
    2fc2:	80 e0       	ldi	r24, 0x00	; 0
    2fc4:	62 e0       	ldi	r22, 0x02	; 2
    2fc6:	41 e0       	ldi	r20, 0x01	; 1
    2fc8:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <MDIO_SetPinValue>
		MDIO_SetPinValue(SSD_CTRL_PORT_2, SSD_3_EN_PIN, DIO_u8PIN_LOW);
    2fcc:	81 e0       	ldi	r24, 0x01	; 1
    2fce:	65 e0       	ldi	r22, 0x05	; 5
    2fd0:	40 e0       	ldi	r20, 0x00	; 0
    2fd2:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <MDIO_SetPinValue>
		MDIO_SetPinValue(SSD_CTRL_PORT_2, SSD_4_EN_PIN, DIO_u8PIN_HIGH);
    2fd6:	81 e0       	ldi	r24, 0x01	; 1
    2fd8:	66 e0       	ldi	r22, 0x06	; 6
    2fda:	41 e0       	ldi	r20, 0x01	; 1
    2fdc:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <MDIO_SetPinValue>
		HSSD_WriteData(Local_u8Hundred);
    2fe0:	8b ad       	ldd	r24, Y+59	; 0x3b
    2fe2:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <HSSD_WriteData>
    2fe6:	80 e0       	ldi	r24, 0x00	; 0
    2fe8:	90 e0       	ldi	r25, 0x00	; 0
    2fea:	a0 ea       	ldi	r26, 0xA0	; 160
    2fec:	b0 e4       	ldi	r27, 0x40	; 64
    2fee:	89 8f       	std	Y+25, r24	; 0x19
    2ff0:	9a 8f       	std	Y+26, r25	; 0x1a
    2ff2:	ab 8f       	std	Y+27, r26	; 0x1b
    2ff4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ff6:	69 8d       	ldd	r22, Y+25	; 0x19
    2ff8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ffa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ffc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ffe:	20 e0       	ldi	r18, 0x00	; 0
    3000:	30 e0       	ldi	r19, 0x00	; 0
    3002:	4a e7       	ldi	r20, 0x7A	; 122
    3004:	55 e4       	ldi	r21, 0x45	; 69
    3006:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    300a:	dc 01       	movw	r26, r24
    300c:	cb 01       	movw	r24, r22
    300e:	8d 8b       	std	Y+21, r24	; 0x15
    3010:	9e 8b       	std	Y+22, r25	; 0x16
    3012:	af 8b       	std	Y+23, r26	; 0x17
    3014:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3016:	6d 89       	ldd	r22, Y+21	; 0x15
    3018:	7e 89       	ldd	r23, Y+22	; 0x16
    301a:	8f 89       	ldd	r24, Y+23	; 0x17
    301c:	98 8d       	ldd	r25, Y+24	; 0x18
    301e:	20 e0       	ldi	r18, 0x00	; 0
    3020:	30 e0       	ldi	r19, 0x00	; 0
    3022:	40 e8       	ldi	r20, 0x80	; 128
    3024:	5f e3       	ldi	r21, 0x3F	; 63
    3026:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    302a:	88 23       	and	r24, r24
    302c:	2c f4       	brge	.+10     	; 0x3038 <HSSD_DisplayBlink+0x3d2>
		__ticks = 1;
    302e:	81 e0       	ldi	r24, 0x01	; 1
    3030:	90 e0       	ldi	r25, 0x00	; 0
    3032:	9c 8b       	std	Y+20, r25	; 0x14
    3034:	8b 8b       	std	Y+19, r24	; 0x13
    3036:	3f c0       	rjmp	.+126    	; 0x30b6 <HSSD_DisplayBlink+0x450>
	else if (__tmp > 65535)
    3038:	6d 89       	ldd	r22, Y+21	; 0x15
    303a:	7e 89       	ldd	r23, Y+22	; 0x16
    303c:	8f 89       	ldd	r24, Y+23	; 0x17
    303e:	98 8d       	ldd	r25, Y+24	; 0x18
    3040:	20 e0       	ldi	r18, 0x00	; 0
    3042:	3f ef       	ldi	r19, 0xFF	; 255
    3044:	4f e7       	ldi	r20, 0x7F	; 127
    3046:	57 e4       	ldi	r21, 0x47	; 71
    3048:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    304c:	18 16       	cp	r1, r24
    304e:	4c f5       	brge	.+82     	; 0x30a2 <HSSD_DisplayBlink+0x43c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3050:	69 8d       	ldd	r22, Y+25	; 0x19
    3052:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3054:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3056:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3058:	20 e0       	ldi	r18, 0x00	; 0
    305a:	30 e0       	ldi	r19, 0x00	; 0
    305c:	40 e2       	ldi	r20, 0x20	; 32
    305e:	51 e4       	ldi	r21, 0x41	; 65
    3060:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3064:	dc 01       	movw	r26, r24
    3066:	cb 01       	movw	r24, r22
    3068:	bc 01       	movw	r22, r24
    306a:	cd 01       	movw	r24, r26
    306c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3070:	dc 01       	movw	r26, r24
    3072:	cb 01       	movw	r24, r22
    3074:	9c 8b       	std	Y+20, r25	; 0x14
    3076:	8b 8b       	std	Y+19, r24	; 0x13
    3078:	0f c0       	rjmp	.+30     	; 0x3098 <HSSD_DisplayBlink+0x432>
    307a:	80 e9       	ldi	r24, 0x90	; 144
    307c:	91 e0       	ldi	r25, 0x01	; 1
    307e:	9a 8b       	std	Y+18, r25	; 0x12
    3080:	89 8b       	std	Y+17, r24	; 0x11
    3082:	89 89       	ldd	r24, Y+17	; 0x11
    3084:	9a 89       	ldd	r25, Y+18	; 0x12
    3086:	01 97       	sbiw	r24, 0x01	; 1
    3088:	f1 f7       	brne	.-4      	; 0x3086 <HSSD_DisplayBlink+0x420>
    308a:	9a 8b       	std	Y+18, r25	; 0x12
    308c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    308e:	8b 89       	ldd	r24, Y+19	; 0x13
    3090:	9c 89       	ldd	r25, Y+20	; 0x14
    3092:	01 97       	sbiw	r24, 0x01	; 1
    3094:	9c 8b       	std	Y+20, r25	; 0x14
    3096:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3098:	8b 89       	ldd	r24, Y+19	; 0x13
    309a:	9c 89       	ldd	r25, Y+20	; 0x14
    309c:	00 97       	sbiw	r24, 0x00	; 0
    309e:	69 f7       	brne	.-38     	; 0x307a <HSSD_DisplayBlink+0x414>
    30a0:	14 c0       	rjmp	.+40     	; 0x30ca <HSSD_DisplayBlink+0x464>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30a2:	6d 89       	ldd	r22, Y+21	; 0x15
    30a4:	7e 89       	ldd	r23, Y+22	; 0x16
    30a6:	8f 89       	ldd	r24, Y+23	; 0x17
    30a8:	98 8d       	ldd	r25, Y+24	; 0x18
    30aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30ae:	dc 01       	movw	r26, r24
    30b0:	cb 01       	movw	r24, r22
    30b2:	9c 8b       	std	Y+20, r25	; 0x14
    30b4:	8b 8b       	std	Y+19, r24	; 0x13
    30b6:	8b 89       	ldd	r24, Y+19	; 0x13
    30b8:	9c 89       	ldd	r25, Y+20	; 0x14
    30ba:	98 8b       	std	Y+16, r25	; 0x10
    30bc:	8f 87       	std	Y+15, r24	; 0x0f
    30be:	8f 85       	ldd	r24, Y+15	; 0x0f
    30c0:	98 89       	ldd	r25, Y+16	; 0x10
    30c2:	01 97       	sbiw	r24, 0x01	; 1
    30c4:	f1 f7       	brne	.-4      	; 0x30c2 <HSSD_DisplayBlink+0x45c>
    30c6:	98 8b       	std	Y+16, r25	; 0x10
    30c8:	8f 87       	std	Y+15, r24	; 0x0f
		
		_delay_ms(5);
		MDIO_SetPinValue(SSD_CTRL_PORT_1, SSD_1_EN_PIN, DIO_u8PIN_HIGH);
    30ca:	80 e0       	ldi	r24, 0x00	; 0
    30cc:	63 e0       	ldi	r22, 0x03	; 3
    30ce:	41 e0       	ldi	r20, 0x01	; 1
    30d0:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <MDIO_SetPinValue>
		MDIO_SetPinValue(SSD_CTRL_PORT_1, SSD_2_EN_PIN, DIO_u8PIN_HIGH);
    30d4:	80 e0       	ldi	r24, 0x00	; 0
    30d6:	62 e0       	ldi	r22, 0x02	; 2
    30d8:	41 e0       	ldi	r20, 0x01	; 1
    30da:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <MDIO_SetPinValue>
		MDIO_SetPinValue(SSD_CTRL_PORT_2, SSD_3_EN_PIN, DIO_u8PIN_HIGH);
    30de:	81 e0       	ldi	r24, 0x01	; 1
    30e0:	65 e0       	ldi	r22, 0x05	; 5
    30e2:	41 e0       	ldi	r20, 0x01	; 1
    30e4:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <MDIO_SetPinValue>
		MDIO_SetPinValue(SSD_CTRL_PORT_2, SSD_4_EN_PIN, DIO_u8PIN_LOW);
    30e8:	81 e0       	ldi	r24, 0x01	; 1
    30ea:	66 e0       	ldi	r22, 0x06	; 6
    30ec:	40 e0       	ldi	r20, 0x00	; 0
    30ee:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <MDIO_SetPinValue>
		HSSD_WriteData(Local_u8Thousand);
    30f2:	8a ad       	ldd	r24, Y+58	; 0x3a
    30f4:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <HSSD_WriteData>
    30f8:	80 e0       	ldi	r24, 0x00	; 0
    30fa:	90 e0       	ldi	r25, 0x00	; 0
    30fc:	a0 ea       	ldi	r26, 0xA0	; 160
    30fe:	b0 e4       	ldi	r27, 0x40	; 64
    3100:	8b 87       	std	Y+11, r24	; 0x0b
    3102:	9c 87       	std	Y+12, r25	; 0x0c
    3104:	ad 87       	std	Y+13, r26	; 0x0d
    3106:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3108:	6b 85       	ldd	r22, Y+11	; 0x0b
    310a:	7c 85       	ldd	r23, Y+12	; 0x0c
    310c:	8d 85       	ldd	r24, Y+13	; 0x0d
    310e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3110:	20 e0       	ldi	r18, 0x00	; 0
    3112:	30 e0       	ldi	r19, 0x00	; 0
    3114:	4a e7       	ldi	r20, 0x7A	; 122
    3116:	55 e4       	ldi	r21, 0x45	; 69
    3118:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    311c:	dc 01       	movw	r26, r24
    311e:	cb 01       	movw	r24, r22
    3120:	8f 83       	std	Y+7, r24	; 0x07
    3122:	98 87       	std	Y+8, r25	; 0x08
    3124:	a9 87       	std	Y+9, r26	; 0x09
    3126:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3128:	6f 81       	ldd	r22, Y+7	; 0x07
    312a:	78 85       	ldd	r23, Y+8	; 0x08
    312c:	89 85       	ldd	r24, Y+9	; 0x09
    312e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3130:	20 e0       	ldi	r18, 0x00	; 0
    3132:	30 e0       	ldi	r19, 0x00	; 0
    3134:	40 e8       	ldi	r20, 0x80	; 128
    3136:	5f e3       	ldi	r21, 0x3F	; 63
    3138:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    313c:	88 23       	and	r24, r24
    313e:	2c f4       	brge	.+10     	; 0x314a <HSSD_DisplayBlink+0x4e4>
		__ticks = 1;
    3140:	81 e0       	ldi	r24, 0x01	; 1
    3142:	90 e0       	ldi	r25, 0x00	; 0
    3144:	9e 83       	std	Y+6, r25	; 0x06
    3146:	8d 83       	std	Y+5, r24	; 0x05
    3148:	3f c0       	rjmp	.+126    	; 0x31c8 <HSSD_DisplayBlink+0x562>
	else if (__tmp > 65535)
    314a:	6f 81       	ldd	r22, Y+7	; 0x07
    314c:	78 85       	ldd	r23, Y+8	; 0x08
    314e:	89 85       	ldd	r24, Y+9	; 0x09
    3150:	9a 85       	ldd	r25, Y+10	; 0x0a
    3152:	20 e0       	ldi	r18, 0x00	; 0
    3154:	3f ef       	ldi	r19, 0xFF	; 255
    3156:	4f e7       	ldi	r20, 0x7F	; 127
    3158:	57 e4       	ldi	r21, 0x47	; 71
    315a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    315e:	18 16       	cp	r1, r24
    3160:	4c f5       	brge	.+82     	; 0x31b4 <HSSD_DisplayBlink+0x54e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3162:	6b 85       	ldd	r22, Y+11	; 0x0b
    3164:	7c 85       	ldd	r23, Y+12	; 0x0c
    3166:	8d 85       	ldd	r24, Y+13	; 0x0d
    3168:	9e 85       	ldd	r25, Y+14	; 0x0e
    316a:	20 e0       	ldi	r18, 0x00	; 0
    316c:	30 e0       	ldi	r19, 0x00	; 0
    316e:	40 e2       	ldi	r20, 0x20	; 32
    3170:	51 e4       	ldi	r21, 0x41	; 65
    3172:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3176:	dc 01       	movw	r26, r24
    3178:	cb 01       	movw	r24, r22
    317a:	bc 01       	movw	r22, r24
    317c:	cd 01       	movw	r24, r26
    317e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3182:	dc 01       	movw	r26, r24
    3184:	cb 01       	movw	r24, r22
    3186:	9e 83       	std	Y+6, r25	; 0x06
    3188:	8d 83       	std	Y+5, r24	; 0x05
    318a:	0f c0       	rjmp	.+30     	; 0x31aa <HSSD_DisplayBlink+0x544>
    318c:	80 e9       	ldi	r24, 0x90	; 144
    318e:	91 e0       	ldi	r25, 0x01	; 1
    3190:	9c 83       	std	Y+4, r25	; 0x04
    3192:	8b 83       	std	Y+3, r24	; 0x03
    3194:	8b 81       	ldd	r24, Y+3	; 0x03
    3196:	9c 81       	ldd	r25, Y+4	; 0x04
    3198:	01 97       	sbiw	r24, 0x01	; 1
    319a:	f1 f7       	brne	.-4      	; 0x3198 <HSSD_DisplayBlink+0x532>
    319c:	9c 83       	std	Y+4, r25	; 0x04
    319e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31a0:	8d 81       	ldd	r24, Y+5	; 0x05
    31a2:	9e 81       	ldd	r25, Y+6	; 0x06
    31a4:	01 97       	sbiw	r24, 0x01	; 1
    31a6:	9e 83       	std	Y+6, r25	; 0x06
    31a8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31aa:	8d 81       	ldd	r24, Y+5	; 0x05
    31ac:	9e 81       	ldd	r25, Y+6	; 0x06
    31ae:	00 97       	sbiw	r24, 0x00	; 0
    31b0:	69 f7       	brne	.-38     	; 0x318c <HSSD_DisplayBlink+0x526>
    31b2:	14 c0       	rjmp	.+40     	; 0x31dc <HSSD_DisplayBlink+0x576>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31b4:	6f 81       	ldd	r22, Y+7	; 0x07
    31b6:	78 85       	ldd	r23, Y+8	; 0x08
    31b8:	89 85       	ldd	r24, Y+9	; 0x09
    31ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    31bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31c0:	dc 01       	movw	r26, r24
    31c2:	cb 01       	movw	r24, r22
    31c4:	9e 83       	std	Y+6, r25	; 0x06
    31c6:	8d 83       	std	Y+5, r24	; 0x05
    31c8:	8d 81       	ldd	r24, Y+5	; 0x05
    31ca:	9e 81       	ldd	r25, Y+6	; 0x06
    31cc:	9a 83       	std	Y+2, r25	; 0x02
    31ce:	89 83       	std	Y+1, r24	; 0x01
    31d0:	89 81       	ldd	r24, Y+1	; 0x01
    31d2:	9a 81       	ldd	r25, Y+2	; 0x02
    31d4:	01 97       	sbiw	r24, 0x01	; 1
    31d6:	f1 f7       	brne	.-4      	; 0x31d4 <HSSD_DisplayBlink+0x56e>
    31d8:	9a 83       	std	Y+2, r25	; 0x02
    31da:	89 83       	std	Y+1, r24	; 0x01
		
		_delay_ms(5);
		MDIO_SetPinValue(SSD_CTRL_PORT_1, SSD_1_EN_PIN, DIO_u8PIN_HIGH);
    31dc:	80 e0       	ldi	r24, 0x00	; 0
    31de:	63 e0       	ldi	r22, 0x03	; 3
    31e0:	41 e0       	ldi	r20, 0x01	; 1
    31e2:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <MDIO_SetPinValue>
		MDIO_SetPinValue(SSD_CTRL_PORT_1, SSD_2_EN_PIN, DIO_u8PIN_HIGH);
    31e6:	80 e0       	ldi	r24, 0x00	; 0
    31e8:	62 e0       	ldi	r22, 0x02	; 2
    31ea:	41 e0       	ldi	r20, 0x01	; 1
    31ec:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <MDIO_SetPinValue>
		MDIO_SetPinValue(SSD_CTRL_PORT_2, SSD_3_EN_PIN, DIO_u8PIN_HIGH);
    31f0:	81 e0       	ldi	r24, 0x01	; 1
    31f2:	65 e0       	ldi	r22, 0x05	; 5
    31f4:	41 e0       	ldi	r20, 0x01	; 1
    31f6:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <MDIO_SetPinValue>
		MDIO_SetPinValue(SSD_CTRL_PORT_2, SSD_4_EN_PIN, DIO_u8PIN_HIGH);
    31fa:	81 e0       	ldi	r24, 0x01	; 1
    31fc:	66 e0       	ldi	r22, 0x06	; 6
    31fe:	41 e0       	ldi	r20, 0x01	; 1
    3200:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <MDIO_SetPinValue>
	u8 Local_u8Hundred = Copy_u8Num%10;
	Copy_u8Num/=10;
	u8 Local_u8Thousand = Copy_u8Num;

	u8 Local_u8BlinkCounter = 0;
	for (Local_u8BlinkCounter = 0; Local_u8BlinkCounter<60; Local_u8BlinkCounter++)
    3204:	89 ad       	ldd	r24, Y+57	; 0x39
    3206:	8f 5f       	subi	r24, 0xFF	; 255
    3208:	89 af       	std	Y+57, r24	; 0x39
    320a:	89 ad       	ldd	r24, Y+57	; 0x39
    320c:	8c 33       	cpi	r24, 0x3C	; 60
    320e:	08 f4       	brcc	.+2      	; 0x3212 <HSSD_DisplayBlink+0x5ac>
    3210:	c1 cd       	rjmp	.-1150   	; 0x2d94 <HSSD_DisplayBlink+0x12e>
		MDIO_SetPinValue(SSD_CTRL_PORT_2, SSD_3_EN_PIN, DIO_u8PIN_HIGH);
		MDIO_SetPinValue(SSD_CTRL_PORT_2, SSD_4_EN_PIN, DIO_u8PIN_HIGH);
		
	}
	
	return Local_ErrorState;
    3212:	8e ad       	ldd	r24, Y+62	; 0x3e
}
    3214:	ce 5b       	subi	r28, 0xBE	; 190
    3216:	df 4f       	sbci	r29, 0xFF	; 255
    3218:	0f b6       	in	r0, 0x3f	; 63
    321a:	f8 94       	cli
    321c:	de bf       	out	0x3e, r29	; 62
    321e:	0f be       	out	0x3f, r0	; 63
    3220:	cd bf       	out	0x3d, r28	; 61
    3222:	cf 91       	pop	r28
    3224:	df 91       	pop	r29
    3226:	1f 91       	pop	r17
    3228:	0f 91       	pop	r16
    322a:	08 95       	ret

0000322c <PB_voidInit>:
#include "HPB_private.h"
#include "HPB_config.h"
#include "HPB_interface.h"

void PB_voidInit(const PB_t* ptr_PB)
{
    322c:	df 93       	push	r29
    322e:	cf 93       	push	r28
    3230:	00 d0       	rcall	.+0      	; 0x3232 <PB_voidInit+0x6>
    3232:	cd b7       	in	r28, 0x3d	; 61
    3234:	de b7       	in	r29, 0x3e	; 62
    3236:	9a 83       	std	Y+2, r25	; 0x02
    3238:	89 83       	std	Y+1, r24	; 0x01
	MDIO_SetPinDirection(ptr_PB->PB_port, ptr_PB->PB_Pin, DIO_u8PIN_INPUT);
    323a:	e9 81       	ldd	r30, Y+1	; 0x01
    323c:	fa 81       	ldd	r31, Y+2	; 0x02
    323e:	80 81       	ld	r24, Z
    3240:	e9 81       	ldd	r30, Y+1	; 0x01
    3242:	fa 81       	ldd	r31, Y+2	; 0x02
    3244:	91 81       	ldd	r25, Z+1	; 0x01
    3246:	69 2f       	mov	r22, r25
    3248:	40 e0       	ldi	r20, 0x00	; 0
    324a:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <MDIO_SetPinDirection>


}
    324e:	0f 90       	pop	r0
    3250:	0f 90       	pop	r0
    3252:	cf 91       	pop	r28
    3254:	df 91       	pop	r29
    3256:	08 95       	ret

00003258 <PB_voidReadState>:
	}

}
#endif
void PB_voidReadState(const PB_t* ptr_PB, State_t* pstate)
{
    3258:	df 93       	push	r29
    325a:	cf 93       	push	r28
    325c:	cd b7       	in	r28, 0x3d	; 61
    325e:	de b7       	in	r29, 0x3e	; 62
    3260:	63 97       	sbiw	r28, 0x13	; 19
    3262:	0f b6       	in	r0, 0x3f	; 63
    3264:	f8 94       	cli
    3266:	de bf       	out	0x3e, r29	; 62
    3268:	0f be       	out	0x3f, r0	; 63
    326a:	cd bf       	out	0x3d, r28	; 61
    326c:	99 8b       	std	Y+17, r25	; 0x11
    326e:	88 8b       	std	Y+16, r24	; 0x10
    3270:	7b 8b       	std	Y+19, r23	; 0x13
    3272:	6a 8b       	std	Y+18, r22	; 0x12
	static State_t copy_u8state = NOT_PRESSED;

	u8 copy_u8PinVal;
	MDIO_GetPinValue(ptr_PB->PB_port, ptr_PB->PB_Pin, &copy_u8PinVal);
    3274:	e8 89       	ldd	r30, Y+16	; 0x10
    3276:	f9 89       	ldd	r31, Y+17	; 0x11
    3278:	80 81       	ld	r24, Z
    327a:	e8 89       	ldd	r30, Y+16	; 0x10
    327c:	f9 89       	ldd	r31, Y+17	; 0x11
    327e:	91 81       	ldd	r25, Z+1	; 0x01
    3280:	9e 01       	movw	r18, r28
    3282:	21 5f       	subi	r18, 0xF1	; 241
    3284:	3f 4f       	sbci	r19, 0xFF	; 255
    3286:	69 2f       	mov	r22, r25
    3288:	a9 01       	movw	r20, r18
    328a:	0e 94 a4 10 	call	0x2148	; 0x2148 <MDIO_GetPinValue>

	if(copy_u8PinVal == ptr_PB->PB_mode)   // in this case the button is pressed
    328e:	e8 89       	ldd	r30, Y+16	; 0x10
    3290:	f9 89       	ldd	r31, Y+17	; 0x11
    3292:	92 81       	ldd	r25, Z+2	; 0x02
    3294:	8f 85       	ldd	r24, Y+15	; 0x0f
    3296:	98 17       	cp	r25, r24
    3298:	09 f0       	breq	.+2      	; 0x329c <PB_voidReadState+0x44>
    329a:	9f c0       	rjmp	.+318    	; 0x33da <PB_voidReadState+0x182>
    329c:	80 e0       	ldi	r24, 0x00	; 0
    329e:	90 e0       	ldi	r25, 0x00	; 0
    32a0:	a0 ea       	ldi	r26, 0xA0	; 160
    32a2:	b1 e4       	ldi	r27, 0x41	; 65
    32a4:	8b 87       	std	Y+11, r24	; 0x0b
    32a6:	9c 87       	std	Y+12, r25	; 0x0c
    32a8:	ad 87       	std	Y+13, r26	; 0x0d
    32aa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    32ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    32b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    32b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    32b4:	20 e0       	ldi	r18, 0x00	; 0
    32b6:	30 e0       	ldi	r19, 0x00	; 0
    32b8:	4a e7       	ldi	r20, 0x7A	; 122
    32ba:	55 e4       	ldi	r21, 0x45	; 69
    32bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32c0:	dc 01       	movw	r26, r24
    32c2:	cb 01       	movw	r24, r22
    32c4:	8f 83       	std	Y+7, r24	; 0x07
    32c6:	98 87       	std	Y+8, r25	; 0x08
    32c8:	a9 87       	std	Y+9, r26	; 0x09
    32ca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    32cc:	6f 81       	ldd	r22, Y+7	; 0x07
    32ce:	78 85       	ldd	r23, Y+8	; 0x08
    32d0:	89 85       	ldd	r24, Y+9	; 0x09
    32d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    32d4:	20 e0       	ldi	r18, 0x00	; 0
    32d6:	30 e0       	ldi	r19, 0x00	; 0
    32d8:	40 e8       	ldi	r20, 0x80	; 128
    32da:	5f e3       	ldi	r21, 0x3F	; 63
    32dc:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    32e0:	88 23       	and	r24, r24
    32e2:	2c f4       	brge	.+10     	; 0x32ee <PB_voidReadState+0x96>
		__ticks = 1;
    32e4:	81 e0       	ldi	r24, 0x01	; 1
    32e6:	90 e0       	ldi	r25, 0x00	; 0
    32e8:	9e 83       	std	Y+6, r25	; 0x06
    32ea:	8d 83       	std	Y+5, r24	; 0x05
    32ec:	3f c0       	rjmp	.+126    	; 0x336c <PB_voidReadState+0x114>
	else if (__tmp > 65535)
    32ee:	6f 81       	ldd	r22, Y+7	; 0x07
    32f0:	78 85       	ldd	r23, Y+8	; 0x08
    32f2:	89 85       	ldd	r24, Y+9	; 0x09
    32f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    32f6:	20 e0       	ldi	r18, 0x00	; 0
    32f8:	3f ef       	ldi	r19, 0xFF	; 255
    32fa:	4f e7       	ldi	r20, 0x7F	; 127
    32fc:	57 e4       	ldi	r21, 0x47	; 71
    32fe:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3302:	18 16       	cp	r1, r24
    3304:	4c f5       	brge	.+82     	; 0x3358 <PB_voidReadState+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3306:	6b 85       	ldd	r22, Y+11	; 0x0b
    3308:	7c 85       	ldd	r23, Y+12	; 0x0c
    330a:	8d 85       	ldd	r24, Y+13	; 0x0d
    330c:	9e 85       	ldd	r25, Y+14	; 0x0e
    330e:	20 e0       	ldi	r18, 0x00	; 0
    3310:	30 e0       	ldi	r19, 0x00	; 0
    3312:	40 e2       	ldi	r20, 0x20	; 32
    3314:	51 e4       	ldi	r21, 0x41	; 65
    3316:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    331a:	dc 01       	movw	r26, r24
    331c:	cb 01       	movw	r24, r22
    331e:	bc 01       	movw	r22, r24
    3320:	cd 01       	movw	r24, r26
    3322:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3326:	dc 01       	movw	r26, r24
    3328:	cb 01       	movw	r24, r22
    332a:	9e 83       	std	Y+6, r25	; 0x06
    332c:	8d 83       	std	Y+5, r24	; 0x05
    332e:	0f c0       	rjmp	.+30     	; 0x334e <PB_voidReadState+0xf6>
    3330:	80 e9       	ldi	r24, 0x90	; 144
    3332:	91 e0       	ldi	r25, 0x01	; 1
    3334:	9c 83       	std	Y+4, r25	; 0x04
    3336:	8b 83       	std	Y+3, r24	; 0x03
    3338:	8b 81       	ldd	r24, Y+3	; 0x03
    333a:	9c 81       	ldd	r25, Y+4	; 0x04
    333c:	01 97       	sbiw	r24, 0x01	; 1
    333e:	f1 f7       	brne	.-4      	; 0x333c <PB_voidReadState+0xe4>
    3340:	9c 83       	std	Y+4, r25	; 0x04
    3342:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3344:	8d 81       	ldd	r24, Y+5	; 0x05
    3346:	9e 81       	ldd	r25, Y+6	; 0x06
    3348:	01 97       	sbiw	r24, 0x01	; 1
    334a:	9e 83       	std	Y+6, r25	; 0x06
    334c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    334e:	8d 81       	ldd	r24, Y+5	; 0x05
    3350:	9e 81       	ldd	r25, Y+6	; 0x06
    3352:	00 97       	sbiw	r24, 0x00	; 0
    3354:	69 f7       	brne	.-38     	; 0x3330 <PB_voidReadState+0xd8>
    3356:	14 c0       	rjmp	.+40     	; 0x3380 <PB_voidReadState+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3358:	6f 81       	ldd	r22, Y+7	; 0x07
    335a:	78 85       	ldd	r23, Y+8	; 0x08
    335c:	89 85       	ldd	r24, Y+9	; 0x09
    335e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3360:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3364:	dc 01       	movw	r26, r24
    3366:	cb 01       	movw	r24, r22
    3368:	9e 83       	std	Y+6, r25	; 0x06
    336a:	8d 83       	std	Y+5, r24	; 0x05
    336c:	8d 81       	ldd	r24, Y+5	; 0x05
    336e:	9e 81       	ldd	r25, Y+6	; 0x06
    3370:	9a 83       	std	Y+2, r25	; 0x02
    3372:	89 83       	std	Y+1, r24	; 0x01
    3374:	89 81       	ldd	r24, Y+1	; 0x01
    3376:	9a 81       	ldd	r25, Y+2	; 0x02
    3378:	01 97       	sbiw	r24, 0x01	; 1
    337a:	f1 f7       	brne	.-4      	; 0x3378 <PB_voidReadState+0x120>
    337c:	9a 83       	std	Y+2, r25	; 0x02
    337e:	89 83       	std	Y+1, r24	; 0x01
	{
		_delay_ms(20);
		MDIO_GetPinValue(ptr_PB->PB_port, ptr_PB->PB_Pin, &copy_u8PinVal);
    3380:	e8 89       	ldd	r30, Y+16	; 0x10
    3382:	f9 89       	ldd	r31, Y+17	; 0x11
    3384:	80 81       	ld	r24, Z
    3386:	e8 89       	ldd	r30, Y+16	; 0x10
    3388:	f9 89       	ldd	r31, Y+17	; 0x11
    338a:	91 81       	ldd	r25, Z+1	; 0x01
    338c:	9e 01       	movw	r18, r28
    338e:	21 5f       	subi	r18, 0xF1	; 241
    3390:	3f 4f       	sbci	r19, 0xFF	; 255
    3392:	69 2f       	mov	r22, r25
    3394:	a9 01       	movw	r20, r18
    3396:	0e 94 a4 10 	call	0x2148	; 0x2148 <MDIO_GetPinValue>
		if(copy_u8PinVal == ptr_PB->PB_mode)
    339a:	e8 89       	ldd	r30, Y+16	; 0x10
    339c:	f9 89       	ldd	r31, Y+17	; 0x11
    339e:	92 81       	ldd	r25, Z+2	; 0x02
    33a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    33a2:	98 17       	cp	r25, r24
    33a4:	a1 f4       	brne	.+40     	; 0x33ce <PB_voidReadState+0x176>
		{
			// check button previous state
			if(copy_u8state == NOT_PRESSED) // 1st press
    33a6:	80 91 c4 01 	lds	r24, 0x01C4
    33aa:	88 23       	and	r24, r24
    33ac:	41 f4       	brne	.+16     	; 0x33be <PB_voidReadState+0x166>
			{
				copy_u8state = PRESSED;
    33ae:	81 e0       	ldi	r24, 0x01	; 1
    33b0:	80 93 c4 01 	sts	0x01C4, r24
				* pstate = PRESSED;
    33b4:	ea 89       	ldd	r30, Y+18	; 0x12
    33b6:	fb 89       	ldd	r31, Y+19	; 0x13
    33b8:	81 e0       	ldi	r24, 0x01	; 1
    33ba:	80 83       	st	Z, r24
    33bc:	13 c0       	rjmp	.+38     	; 0x33e4 <PB_voidReadState+0x18c>

			}
			else if(copy_u8state == PRESSED)// trapped (long press)
    33be:	80 91 c4 01 	lds	r24, 0x01C4
    33c2:	81 30       	cpi	r24, 0x01	; 1
    33c4:	79 f4       	brne	.+30     	; 0x33e4 <PB_voidReadState+0x18c>
			{
				* pstate = NOT_PRESSED;
    33c6:	ea 89       	ldd	r30, Y+18	; 0x12
    33c8:	fb 89       	ldd	r31, Y+19	; 0x13
    33ca:	10 82       	st	Z, r1
    33cc:	0b c0       	rjmp	.+22     	; 0x33e4 <PB_voidReadState+0x18c>
			{
				//nothing
			}
		}// 2nd read after delay
		else {//Noise
			* pstate = NOT_PRESSED;
    33ce:	ea 89       	ldd	r30, Y+18	; 0x12
    33d0:	fb 89       	ldd	r31, Y+19	; 0x13
    33d2:	10 82       	st	Z, r1
			copy_u8state = NOT_PRESSED;
    33d4:	10 92 c4 01 	sts	0x01C4, r1
    33d8:	05 c0       	rjmp	.+10     	; 0x33e4 <PB_voidReadState+0x18c>
		}

	}// 1st read befor delay
	else
	{
		* pstate = NOT_PRESSED;
    33da:	ea 89       	ldd	r30, Y+18	; 0x12
    33dc:	fb 89       	ldd	r31, Y+19	; 0x13
    33de:	10 82       	st	Z, r1
		copy_u8state = NOT_PRESSED;
    33e0:	10 92 c4 01 	sts	0x01C4, r1
	}

}
    33e4:	63 96       	adiw	r28, 0x13	; 19
    33e6:	0f b6       	in	r0, 0x3f	; 63
    33e8:	f8 94       	cli
    33ea:	de bf       	out	0x3e, r29	; 62
    33ec:	0f be       	out	0x3f, r0	; 63
    33ee:	cd bf       	out	0x3d, r28	; 61
    33f0:	cf 91       	pop	r28
    33f2:	df 91       	pop	r29
    33f4:	08 95       	ret

000033f6 <HLED_voidInit>:
#include "HLED_private.h"
#include "HLED_config.h"
#include "HLED_interface.h"

void HLED_voidInit(Led_t copy_ledId)
{
    33f6:	df 93       	push	r29
    33f8:	cf 93       	push	r28
    33fa:	00 d0       	rcall	.+0      	; 0x33fc <HLED_voidInit+0x6>
    33fc:	0f 92       	push	r0
    33fe:	cd b7       	in	r28, 0x3d	; 61
    3400:	de b7       	in	r29, 0x3e	; 62
    3402:	89 83       	std	Y+1, r24	; 0x01

	switch(copy_ledId){
    3404:	89 81       	ldd	r24, Y+1	; 0x01
    3406:	28 2f       	mov	r18, r24
    3408:	30 e0       	ldi	r19, 0x00	; 0
    340a:	3b 83       	std	Y+3, r19	; 0x03
    340c:	2a 83       	std	Y+2, r18	; 0x02
    340e:	8a 81       	ldd	r24, Y+2	; 0x02
    3410:	9b 81       	ldd	r25, Y+3	; 0x03
    3412:	81 30       	cpi	r24, 0x01	; 1
    3414:	91 05       	cpc	r25, r1
    3416:	d9 f0       	breq	.+54     	; 0x344e <HLED_voidInit+0x58>
    3418:	2a 81       	ldd	r18, Y+2	; 0x02
    341a:	3b 81       	ldd	r19, Y+3	; 0x03
    341c:	22 30       	cpi	r18, 0x02	; 2
    341e:	31 05       	cpc	r19, r1
    3420:	2c f4       	brge	.+10     	; 0x342c <HLED_voidInit+0x36>
    3422:	8a 81       	ldd	r24, Y+2	; 0x02
    3424:	9b 81       	ldd	r25, Y+3	; 0x03
    3426:	00 97       	sbiw	r24, 0x00	; 0
    3428:	61 f0       	breq	.+24     	; 0x3442 <HLED_voidInit+0x4c>
    342a:	22 c0       	rjmp	.+68     	; 0x3470 <HLED_voidInit+0x7a>
    342c:	2a 81       	ldd	r18, Y+2	; 0x02
    342e:	3b 81       	ldd	r19, Y+3	; 0x03
    3430:	22 30       	cpi	r18, 0x02	; 2
    3432:	31 05       	cpc	r19, r1
    3434:	91 f0       	breq	.+36     	; 0x345a <HLED_voidInit+0x64>
    3436:	8a 81       	ldd	r24, Y+2	; 0x02
    3438:	9b 81       	ldd	r25, Y+3	; 0x03
    343a:	83 30       	cpi	r24, 0x03	; 3
    343c:	91 05       	cpc	r25, r1
    343e:	99 f0       	breq	.+38     	; 0x3466 <HLED_voidInit+0x70>
    3440:	17 c0       	rjmp	.+46     	; 0x3470 <HLED_voidInit+0x7a>
	case LED_YELLOW:
		MDIO_SetPinDirection (LED_YELLOW_PORT, LED_YELLOW_PIN, DIO_u8PIN_OUTPUT);
    3442:	80 e0       	ldi	r24, 0x00	; 0
    3444:	66 e0       	ldi	r22, 0x06	; 6
    3446:	41 e0       	ldi	r20, 0x01	; 1
    3448:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <MDIO_SetPinDirection>
    344c:	11 c0       	rjmp	.+34     	; 0x3470 <HLED_voidInit+0x7a>
		break;
	case LED_GREEN:
		MDIO_SetPinDirection (LED_GREEN_PORT, LED_GREEN_PIN, DIO_u8PIN_OUTPUT);
    344e:	80 e0       	ldi	r24, 0x00	; 0
    3450:	64 e0       	ldi	r22, 0x04	; 4
    3452:	41 e0       	ldi	r20, 0x01	; 1
    3454:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <MDIO_SetPinDirection>
    3458:	0b c0       	rjmp	.+22     	; 0x3470 <HLED_voidInit+0x7a>
		break;
	case LED_RED:
		MDIO_SetPinDirection (LED_RED_PORT, LED_RED_PIN, DIO_u8PIN_OUTPUT);
    345a:	81 e0       	ldi	r24, 0x01	; 1
    345c:	67 e0       	ldi	r22, 0x07	; 7
    345e:	41 e0       	ldi	r20, 0x01	; 1
    3460:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <MDIO_SetPinDirection>
    3464:	05 c0       	rjmp	.+10     	; 0x3470 <HLED_voidInit+0x7a>

		break;
	case LED_BLUE:
		MDIO_SetPinDirection (LED_BLUE_PORT, LED_BLUE_PIN, DIO_u8PIN_OUTPUT);
    3466:	80 e0       	ldi	r24, 0x00	; 0
    3468:	65 e0       	ldi	r22, 0x05	; 5
    346a:	41 e0       	ldi	r20, 0x01	; 1
    346c:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <MDIO_SetPinDirection>


	}


}
    3470:	0f 90       	pop	r0
    3472:	0f 90       	pop	r0
    3474:	0f 90       	pop	r0
    3476:	cf 91       	pop	r28
    3478:	df 91       	pop	r29
    347a:	08 95       	ret

0000347c <HLED_voidTurnOn>:
void HLED_voidTurnOn(Led_t copy_ledId)
{
    347c:	df 93       	push	r29
    347e:	cf 93       	push	r28
    3480:	00 d0       	rcall	.+0      	; 0x3482 <HLED_voidTurnOn+0x6>
    3482:	0f 92       	push	r0
    3484:	cd b7       	in	r28, 0x3d	; 61
    3486:	de b7       	in	r29, 0x3e	; 62
    3488:	89 83       	std	Y+1, r24	; 0x01
	switch(copy_ledId){
    348a:	89 81       	ldd	r24, Y+1	; 0x01
    348c:	28 2f       	mov	r18, r24
    348e:	30 e0       	ldi	r19, 0x00	; 0
    3490:	3b 83       	std	Y+3, r19	; 0x03
    3492:	2a 83       	std	Y+2, r18	; 0x02
    3494:	8a 81       	ldd	r24, Y+2	; 0x02
    3496:	9b 81       	ldd	r25, Y+3	; 0x03
    3498:	81 30       	cpi	r24, 0x01	; 1
    349a:	91 05       	cpc	r25, r1
    349c:	d9 f0       	breq	.+54     	; 0x34d4 <HLED_voidTurnOn+0x58>
    349e:	2a 81       	ldd	r18, Y+2	; 0x02
    34a0:	3b 81       	ldd	r19, Y+3	; 0x03
    34a2:	22 30       	cpi	r18, 0x02	; 2
    34a4:	31 05       	cpc	r19, r1
    34a6:	2c f4       	brge	.+10     	; 0x34b2 <HLED_voidTurnOn+0x36>
    34a8:	8a 81       	ldd	r24, Y+2	; 0x02
    34aa:	9b 81       	ldd	r25, Y+3	; 0x03
    34ac:	00 97       	sbiw	r24, 0x00	; 0
    34ae:	61 f0       	breq	.+24     	; 0x34c8 <HLED_voidTurnOn+0x4c>
    34b0:	22 c0       	rjmp	.+68     	; 0x34f6 <HLED_voidTurnOn+0x7a>
    34b2:	2a 81       	ldd	r18, Y+2	; 0x02
    34b4:	3b 81       	ldd	r19, Y+3	; 0x03
    34b6:	22 30       	cpi	r18, 0x02	; 2
    34b8:	31 05       	cpc	r19, r1
    34ba:	91 f0       	breq	.+36     	; 0x34e0 <HLED_voidTurnOn+0x64>
    34bc:	8a 81       	ldd	r24, Y+2	; 0x02
    34be:	9b 81       	ldd	r25, Y+3	; 0x03
    34c0:	83 30       	cpi	r24, 0x03	; 3
    34c2:	91 05       	cpc	r25, r1
    34c4:	99 f0       	breq	.+38     	; 0x34ec <HLED_voidTurnOn+0x70>
    34c6:	17 c0       	rjmp	.+46     	; 0x34f6 <HLED_voidTurnOn+0x7a>
		case LED_YELLOW:
#if LED_YELLOW_DIR == LED_DIR_FORWARD
			MDIO_SetPinValue (LED_YELLOW_PORT, LED_YELLOW_PIN, DIO_u8PIN_HIGH);
    34c8:	80 e0       	ldi	r24, 0x00	; 0
    34ca:	66 e0       	ldi	r22, 0x06	; 6
    34cc:	41 e0       	ldi	r20, 0x01	; 1
    34ce:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <MDIO_SetPinValue>
    34d2:	11 c0       	rjmp	.+34     	; 0x34f6 <HLED_voidTurnOn+0x7a>
#endif
			break;

		case LED_GREEN:
#if LED_GREEN_DIR == LED_DIR_FORWARD
			MDIO_SetPinValue (LED_GREEN_PORT, LED_GREEN_PIN, DIO_u8PIN_HIGH);
    34d4:	80 e0       	ldi	r24, 0x00	; 0
    34d6:	64 e0       	ldi	r22, 0x04	; 4
    34d8:	41 e0       	ldi	r20, 0x01	; 1
    34da:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <MDIO_SetPinValue>
    34de:	0b c0       	rjmp	.+22     	; 0x34f6 <HLED_voidTurnOn+0x7a>
#endif
			break;

		case LED_RED:
#if LED_RED_DIR == LED_DIR_FORWARD
			MDIO_SetPinValue (LED_RED_PORT, LED_RED_PIN, DIO_u8PIN_HIGH);
    34e0:	81 e0       	ldi	r24, 0x01	; 1
    34e2:	67 e0       	ldi	r22, 0x07	; 7
    34e4:	41 e0       	ldi	r20, 0x01	; 1
    34e6:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <MDIO_SetPinValue>
    34ea:	05 c0       	rjmp	.+10     	; 0x34f6 <HLED_voidTurnOn+0x7a>

#endif
			break;
		case LED_BLUE:
#if LED_BLUE_DIR == LED_DIR_FORWARD
			MDIO_SetPinValue (LED_BLUE_PORT, LED_BLUE_PIN, DIO_u8PIN_HIGH);
    34ec:	80 e0       	ldi	r24, 0x00	; 0
    34ee:	65 e0       	ldi	r22, 0x05	; 5
    34f0:	41 e0       	ldi	r20, 0x01	; 1
    34f2:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <MDIO_SetPinValue>
			break;

	}


}
    34f6:	0f 90       	pop	r0
    34f8:	0f 90       	pop	r0
    34fa:	0f 90       	pop	r0
    34fc:	cf 91       	pop	r28
    34fe:	df 91       	pop	r29
    3500:	08 95       	ret

00003502 <HLED_voidTurnOff>:
void HLED_voidTurnOff(Led_t copy_ledId)
{
    3502:	df 93       	push	r29
    3504:	cf 93       	push	r28
    3506:	00 d0       	rcall	.+0      	; 0x3508 <HLED_voidTurnOff+0x6>
    3508:	0f 92       	push	r0
    350a:	cd b7       	in	r28, 0x3d	; 61
    350c:	de b7       	in	r29, 0x3e	; 62
    350e:	89 83       	std	Y+1, r24	; 0x01
	switch(copy_ledId){
    3510:	89 81       	ldd	r24, Y+1	; 0x01
    3512:	28 2f       	mov	r18, r24
    3514:	30 e0       	ldi	r19, 0x00	; 0
    3516:	3b 83       	std	Y+3, r19	; 0x03
    3518:	2a 83       	std	Y+2, r18	; 0x02
    351a:	8a 81       	ldd	r24, Y+2	; 0x02
    351c:	9b 81       	ldd	r25, Y+3	; 0x03
    351e:	81 30       	cpi	r24, 0x01	; 1
    3520:	91 05       	cpc	r25, r1
    3522:	d9 f0       	breq	.+54     	; 0x355a <HLED_voidTurnOff+0x58>
    3524:	2a 81       	ldd	r18, Y+2	; 0x02
    3526:	3b 81       	ldd	r19, Y+3	; 0x03
    3528:	22 30       	cpi	r18, 0x02	; 2
    352a:	31 05       	cpc	r19, r1
    352c:	2c f4       	brge	.+10     	; 0x3538 <HLED_voidTurnOff+0x36>
    352e:	8a 81       	ldd	r24, Y+2	; 0x02
    3530:	9b 81       	ldd	r25, Y+3	; 0x03
    3532:	00 97       	sbiw	r24, 0x00	; 0
    3534:	61 f0       	breq	.+24     	; 0x354e <HLED_voidTurnOff+0x4c>
    3536:	22 c0       	rjmp	.+68     	; 0x357c <HLED_voidTurnOff+0x7a>
    3538:	2a 81       	ldd	r18, Y+2	; 0x02
    353a:	3b 81       	ldd	r19, Y+3	; 0x03
    353c:	22 30       	cpi	r18, 0x02	; 2
    353e:	31 05       	cpc	r19, r1
    3540:	91 f0       	breq	.+36     	; 0x3566 <HLED_voidTurnOff+0x64>
    3542:	8a 81       	ldd	r24, Y+2	; 0x02
    3544:	9b 81       	ldd	r25, Y+3	; 0x03
    3546:	83 30       	cpi	r24, 0x03	; 3
    3548:	91 05       	cpc	r25, r1
    354a:	99 f0       	breq	.+38     	; 0x3572 <HLED_voidTurnOff+0x70>
    354c:	17 c0       	rjmp	.+46     	; 0x357c <HLED_voidTurnOff+0x7a>
		case LED_YELLOW:
#if LED_YELLOW_DIR == LED_DIR_FORWARD
			MDIO_SetPinValue (LED_YELLOW_PORT, LED_YELLOW_PIN, DIO_u8PIN_LOW);
    354e:	80 e0       	ldi	r24, 0x00	; 0
    3550:	66 e0       	ldi	r22, 0x06	; 6
    3552:	40 e0       	ldi	r20, 0x00	; 0
    3554:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <MDIO_SetPinValue>
    3558:	11 c0       	rjmp	.+34     	; 0x357c <HLED_voidTurnOff+0x7a>
#endif
			break;

		case LED_GREEN:
#if LED_GREEN_DIR == LED_DIR_FORWARD
			MDIO_SetPinValue (LED_GREEN_PORT, LED_GREEN_PIN, DIO_u8PIN_LOW);
    355a:	80 e0       	ldi	r24, 0x00	; 0
    355c:	64 e0       	ldi	r22, 0x04	; 4
    355e:	40 e0       	ldi	r20, 0x00	; 0
    3560:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <MDIO_SetPinValue>
    3564:	0b c0       	rjmp	.+22     	; 0x357c <HLED_voidTurnOff+0x7a>
#endif
			break;

		case LED_RED:
#if LED_RED_DIR == LED_DIR_FORWARD
			MDIO_SetPinValue (LED_RED_PORT, LED_RED_PIN, DIO_u8PIN_LOW);
    3566:	81 e0       	ldi	r24, 0x01	; 1
    3568:	67 e0       	ldi	r22, 0x07	; 7
    356a:	40 e0       	ldi	r20, 0x00	; 0
    356c:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <MDIO_SetPinValue>
    3570:	05 c0       	rjmp	.+10     	; 0x357c <HLED_voidTurnOff+0x7a>

#endif
			break;
		case LED_BLUE:
#if LED_BLUE_DIR == LED_DIR_FORWARD
			MDIO_SetPinValue (LED_BLUE_PORT, LED_BLUE_PIN, DIO_u8PIN_LOW);
    3572:	80 e0       	ldi	r24, 0x00	; 0
    3574:	65 e0       	ldi	r22, 0x05	; 5
    3576:	40 e0       	ldi	r20, 0x00	; 0
    3578:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <MDIO_SetPinValue>
#endif
			break;

	}

}
    357c:	0f 90       	pop	r0
    357e:	0f 90       	pop	r0
    3580:	0f 90       	pop	r0
    3582:	cf 91       	pop	r28
    3584:	df 91       	pop	r29
    3586:	08 95       	ret

00003588 <HLED_voidToggle>:
void HLED_voidToggle(Led_t copy_ledId)
{
    3588:	df 93       	push	r29
    358a:	cf 93       	push	r28
    358c:	00 d0       	rcall	.+0      	; 0x358e <HLED_voidToggle+0x6>
    358e:	0f 92       	push	r0
    3590:	cd b7       	in	r28, 0x3d	; 61
    3592:	de b7       	in	r29, 0x3e	; 62
    3594:	89 83       	std	Y+1, r24	; 0x01
	switch(copy_ledId){
    3596:	89 81       	ldd	r24, Y+1	; 0x01
    3598:	28 2f       	mov	r18, r24
    359a:	30 e0       	ldi	r19, 0x00	; 0
    359c:	3b 83       	std	Y+3, r19	; 0x03
    359e:	2a 83       	std	Y+2, r18	; 0x02
    35a0:	8a 81       	ldd	r24, Y+2	; 0x02
    35a2:	9b 81       	ldd	r25, Y+3	; 0x03
    35a4:	81 30       	cpi	r24, 0x01	; 1
    35a6:	91 05       	cpc	r25, r1
    35a8:	d1 f0       	breq	.+52     	; 0x35de <HLED_voidToggle+0x56>
    35aa:	2a 81       	ldd	r18, Y+2	; 0x02
    35ac:	3b 81       	ldd	r19, Y+3	; 0x03
    35ae:	22 30       	cpi	r18, 0x02	; 2
    35b0:	31 05       	cpc	r19, r1
    35b2:	2c f4       	brge	.+10     	; 0x35be <HLED_voidToggle+0x36>
    35b4:	8a 81       	ldd	r24, Y+2	; 0x02
    35b6:	9b 81       	ldd	r25, Y+3	; 0x03
    35b8:	00 97       	sbiw	r24, 0x00	; 0
    35ba:	61 f0       	breq	.+24     	; 0x35d4 <HLED_voidToggle+0x4c>
    35bc:	1e c0       	rjmp	.+60     	; 0x35fa <HLED_voidToggle+0x72>
    35be:	2a 81       	ldd	r18, Y+2	; 0x02
    35c0:	3b 81       	ldd	r19, Y+3	; 0x03
    35c2:	22 30       	cpi	r18, 0x02	; 2
    35c4:	31 05       	cpc	r19, r1
    35c6:	81 f0       	breq	.+32     	; 0x35e8 <HLED_voidToggle+0x60>
    35c8:	8a 81       	ldd	r24, Y+2	; 0x02
    35ca:	9b 81       	ldd	r25, Y+3	; 0x03
    35cc:	83 30       	cpi	r24, 0x03	; 3
    35ce:	91 05       	cpc	r25, r1
    35d0:	81 f0       	breq	.+32     	; 0x35f2 <HLED_voidToggle+0x6a>
    35d2:	13 c0       	rjmp	.+38     	; 0x35fa <HLED_voidToggle+0x72>
		case LED_YELLOW:
#if LED_YELLOW_DIR == LED_DIR_FORWARD
			MDIO_TogglePinValue (LED_YELLOW_PORT, LED_YELLOW_PIN);
    35d4:	80 e0       	ldi	r24, 0x00	; 0
    35d6:	66 e0       	ldi	r22, 0x06	; 6
    35d8:	0e 94 00 12 	call	0x2400	; 0x2400 <MDIO_TogglePinValue>
    35dc:	0e c0       	rjmp	.+28     	; 0x35fa <HLED_voidToggle+0x72>
#endif
			break;

		case LED_GREEN:
#if LED_GREEN_DIR == LED_DIR_FORWARD
			MDIO_TogglePinValue (LED_GREEN_PORT, LED_GREEN_PIN);
    35de:	80 e0       	ldi	r24, 0x00	; 0
    35e0:	64 e0       	ldi	r22, 0x04	; 4
    35e2:	0e 94 00 12 	call	0x2400	; 0x2400 <MDIO_TogglePinValue>
    35e6:	09 c0       	rjmp	.+18     	; 0x35fa <HLED_voidToggle+0x72>
#endif
			break;

		case LED_RED:
#if LED_RED_DIR == LED_DIR_FORWARD
			MDIO_TogglePinValue (LED_RED_PORT, LED_RED_PIN);
    35e8:	81 e0       	ldi	r24, 0x01	; 1
    35ea:	67 e0       	ldi	r22, 0x07	; 7
    35ec:	0e 94 00 12 	call	0x2400	; 0x2400 <MDIO_TogglePinValue>
    35f0:	04 c0       	rjmp	.+8      	; 0x35fa <HLED_voidToggle+0x72>

#endif
			break;
		case LED_BLUE:
#if LED_BLUE_DIR == LED_DIR_FORWARD
			MDIO_TogglePinValue (LED_BLUE_PORT, LED_BLUE_PIN);
    35f2:	80 e0       	ldi	r24, 0x00	; 0
    35f4:	65 e0       	ldi	r22, 0x05	; 5
    35f6:	0e 94 00 12 	call	0x2400	; 0x2400 <MDIO_TogglePinValue>
#endif
			break;

	}

}
    35fa:	0f 90       	pop	r0
    35fc:	0f 90       	pop	r0
    35fe:	0f 90       	pop	r0
    3600:	cf 91       	pop	r28
    3602:	df 91       	pop	r29
    3604:	08 95       	ret

00003606 <HKPD_voidInit>:
#include "KEYPAD_private.h"

u8 KPD_u8ArrayValue[ROW_NUM][COL_NUM] = KP_MODE;

void HKPD_voidInit(void)
{
    3606:	df 93       	push	r29
    3608:	cf 93       	push	r28
    360a:	cd b7       	in	r28, 0x3d	; 61
    360c:	de b7       	in	r29, 0x3e	; 62
	//column input
	MDIO_SetPinDirection(KEYPAD_C0_PORT, KEYPAD_C0_PIN, DIO_u8PIN_INPUT);
    360e:	83 e0       	ldi	r24, 0x03	; 3
    3610:	67 e0       	ldi	r22, 0x07	; 7
    3612:	40 e0       	ldi	r20, 0x00	; 0
    3614:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <MDIO_SetPinDirection>
	MDIO_SetPinDirection(KEYPAD_C1_PORT, KEYPAD_C0_PIN, DIO_u8PIN_INPUT);
    3618:	83 e0       	ldi	r24, 0x03	; 3
    361a:	67 e0       	ldi	r22, 0x07	; 7
    361c:	40 e0       	ldi	r20, 0x00	; 0
    361e:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <MDIO_SetPinDirection>
	MDIO_SetPinDirection(KEYPAD_C2_PORT, KEYPAD_C0_PIN, DIO_u8PIN_INPUT);
    3622:	83 e0       	ldi	r24, 0x03	; 3
    3624:	67 e0       	ldi	r22, 0x07	; 7
    3626:	40 e0       	ldi	r20, 0x00	; 0
    3628:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <MDIO_SetPinDirection>
	MDIO_SetPinDirection(KEYPAD_C3_PORT, KEYPAD_C0_PIN, DIO_u8PIN_INPUT);
    362c:	83 e0       	ldi	r24, 0x03	; 3
    362e:	67 e0       	ldi	r22, 0x07	; 7
    3630:	40 e0       	ldi	r20, 0x00	; 0
    3632:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <MDIO_SetPinDirection>

	MDIO_SetPinValue(KEYPAD_C0_PORT, KEYPAD_C0_PIN, DIO_u8PIN_HIGH);
    3636:	83 e0       	ldi	r24, 0x03	; 3
    3638:	67 e0       	ldi	r22, 0x07	; 7
    363a:	41 e0       	ldi	r20, 0x01	; 1
    363c:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <MDIO_SetPinValue>
	MDIO_SetPinValue(KEYPAD_C1_PORT, KEYPAD_C0_PIN, DIO_u8PIN_HIGH);
    3640:	83 e0       	ldi	r24, 0x03	; 3
    3642:	67 e0       	ldi	r22, 0x07	; 7
    3644:	41 e0       	ldi	r20, 0x01	; 1
    3646:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <MDIO_SetPinValue>
	MDIO_SetPinValue(KEYPAD_C2_PORT, KEYPAD_C0_PIN, DIO_u8PIN_HIGH);
    364a:	83 e0       	ldi	r24, 0x03	; 3
    364c:	67 e0       	ldi	r22, 0x07	; 7
    364e:	41 e0       	ldi	r20, 0x01	; 1
    3650:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <MDIO_SetPinValue>
	MDIO_SetPinValue(KEYPAD_C3_PORT, KEYPAD_C0_PIN, DIO_u8PIN_HIGH);
    3654:	83 e0       	ldi	r24, 0x03	; 3
    3656:	67 e0       	ldi	r22, 0x07	; 7
    3658:	41 e0       	ldi	r20, 0x01	; 1
    365a:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <MDIO_SetPinValue>

	//row output
	MDIO_SetPinDirection(KEYPAD_R0_PORT, KEYPAD_R0_PIN, DIO_u8PIN_OUTPUT);
    365e:	82 e0       	ldi	r24, 0x02	; 2
    3660:	65 e0       	ldi	r22, 0x05	; 5
    3662:	41 e0       	ldi	r20, 0x01	; 1
    3664:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <MDIO_SetPinDirection>
	MDIO_SetPinDirection(KEYPAD_R1_PORT, KEYPAD_R1_PIN, DIO_u8PIN_OUTPUT);
    3668:	82 e0       	ldi	r24, 0x02	; 2
    366a:	64 e0       	ldi	r22, 0x04	; 4
    366c:	41 e0       	ldi	r20, 0x01	; 1
    366e:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <MDIO_SetPinDirection>
	MDIO_SetPinDirection(KEYPAD_R2_PORT, KEYPAD_R2_PIN, DIO_u8PIN_OUTPUT);
    3672:	82 e0       	ldi	r24, 0x02	; 2
    3674:	63 e0       	ldi	r22, 0x03	; 3
    3676:	41 e0       	ldi	r20, 0x01	; 1
    3678:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <MDIO_SetPinDirection>
	MDIO_SetPinDirection(KEYPAD_R3_PORT, KEYPAD_R3_PIN, DIO_u8PIN_OUTPUT);
    367c:	82 e0       	ldi	r24, 0x02	; 2
    367e:	62 e0       	ldi	r22, 0x02	; 2
    3680:	41 e0       	ldi	r20, 0x01	; 1
    3682:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <MDIO_SetPinDirection>


}
    3686:	cf 91       	pop	r28
    3688:	df 91       	pop	r29
    368a:	08 95       	ret

0000368c <HKPD_u8GetPressedKey>:

void HKPD_u8GetPressedKey(u8 * pPressedKey)
{
    368c:	df 93       	push	r29
    368e:	cf 93       	push	r28
    3690:	cd b7       	in	r28, 0x3d	; 61
    3692:	de b7       	in	r29, 0x3e	; 62
    3694:	63 97       	sbiw	r28, 0x13	; 19
    3696:	0f b6       	in	r0, 0x3f	; 63
    3698:	f8 94       	cli
    369a:	de bf       	out	0x3e, r29	; 62
    369c:	0f be       	out	0x3f, r0	; 63
    369e:	cd bf       	out	0x3d, r28	; 61
    36a0:	9b 8b       	std	Y+19, r25	; 0x13
    36a2:	8a 8b       	std	Y+18, r24	; 0x12
	* pPressedKey = KPD_NO_PRESSED_KEY;
    36a4:	ea 89       	ldd	r30, Y+18	; 0x12
    36a6:	fb 89       	ldd	r31, Y+19	; 0x13
    36a8:	8f ef       	ldi	r24, 0xFF	; 255
    36aa:	80 83       	st	Z, r24
	//u8 copy_u8stateflag =
	u8 Local_u8ColCounter = COL_INIT;
    36ac:	18 8a       	std	Y+16, r1	; 0x10
	u8 Local_u8RowCounter = ROW_INIT;
    36ae:	1f 86       	std	Y+15, r1	; 0x0f

	u8 Local_u8PinValue = 1;
    36b0:	81 e0       	ldi	r24, 0x01	; 1
    36b2:	89 8b       	std	Y+17, r24	; 0x11

	do
	{

		for (Local_u8RowCounter = ROW_INIT; Local_u8RowCounter <= ROW_NUM; Local_u8RowCounter++)
    36b4:	1f 86       	std	Y+15, r1	; 0x0f
    36b6:	05 c1       	rjmp	.+522    	; 0x38c2 <HKPD_u8GetPressedKey+0x236>
		{
			/* Activate current Row*/
			MDIO_SetPinValue(Row_Port_Arr[Local_u8RowCounter], Row_Pin_Arr[Local_u8RowCounter], DIO_u8PIN_LOW);
    36b8:	8f 85       	ldd	r24, Y+15	; 0x0f
    36ba:	88 2f       	mov	r24, r24
    36bc:	90 e0       	ldi	r25, 0x00	; 0
    36be:	fc 01       	movw	r30, r24
    36c0:	ee 57       	subi	r30, 0x7E	; 126
    36c2:	fe 4f       	sbci	r31, 0xFE	; 254
    36c4:	20 81       	ld	r18, Z
    36c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    36c8:	88 2f       	mov	r24, r24
    36ca:	90 e0       	ldi	r25, 0x00	; 0
    36cc:	fc 01       	movw	r30, r24
    36ce:	ea 57       	subi	r30, 0x7A	; 122
    36d0:	fe 4f       	sbci	r31, 0xFE	; 254
    36d2:	90 81       	ld	r25, Z
    36d4:	82 2f       	mov	r24, r18
    36d6:	69 2f       	mov	r22, r25
    36d8:	40 e0       	ldi	r20, 0x00	; 0
    36da:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <MDIO_SetPinValue>

			for (Local_u8ColCounter = COL_INIT; Local_u8ColCounter <= COL_NUM; Local_u8ColCounter++)
    36de:	18 8a       	std	Y+16, r1	; 0x10
    36e0:	d6 c0       	rjmp	.+428    	; 0x388e <HKPD_u8GetPressedKey+0x202>
			{
				/* Read Current Column */
				MDIO_GetPinValue(Col_Port_Arr[Local_u8ColCounter], Col_Pin_Arr[Local_u8ColCounter],&Local_u8PinValue);
    36e2:	88 89       	ldd	r24, Y+16	; 0x10
    36e4:	88 2f       	mov	r24, r24
    36e6:	90 e0       	ldi	r25, 0x00	; 0
    36e8:	fc 01       	movw	r30, r24
    36ea:	e6 57       	subi	r30, 0x76	; 118
    36ec:	fe 4f       	sbci	r31, 0xFE	; 254
    36ee:	40 81       	ld	r20, Z
    36f0:	88 89       	ldd	r24, Y+16	; 0x10
    36f2:	88 2f       	mov	r24, r24
    36f4:	90 e0       	ldi	r25, 0x00	; 0
    36f6:	fc 01       	movw	r30, r24
    36f8:	e2 57       	subi	r30, 0x72	; 114
    36fa:	fe 4f       	sbci	r31, 0xFE	; 254
    36fc:	90 81       	ld	r25, Z
    36fe:	9e 01       	movw	r18, r28
    3700:	2f 5e       	subi	r18, 0xEF	; 239
    3702:	3f 4f       	sbci	r19, 0xFF	; 255
    3704:	84 2f       	mov	r24, r20
    3706:	69 2f       	mov	r22, r25
    3708:	a9 01       	movw	r20, r18
    370a:	0e 94 a4 10 	call	0x2148	; 0x2148 <MDIO_GetPinValue>
				if (DIO_u8PIN_LOW == Local_u8PinValue)
    370e:	89 89       	ldd	r24, Y+17	; 0x11
    3710:	88 23       	and	r24, r24
    3712:	09 f0       	breq	.+2      	; 0x3716 <HKPD_u8GetPressedKey+0x8a>
    3714:	b9 c0       	rjmp	.+370    	; 0x3888 <HKPD_u8GetPressedKey+0x1fc>
    3716:	80 e0       	ldi	r24, 0x00	; 0
    3718:	90 e0       	ldi	r25, 0x00	; 0
    371a:	a8 ec       	ldi	r26, 0xC8	; 200
    371c:	b1 e4       	ldi	r27, 0x41	; 65
    371e:	8b 87       	std	Y+11, r24	; 0x0b
    3720:	9c 87       	std	Y+12, r25	; 0x0c
    3722:	ad 87       	std	Y+13, r26	; 0x0d
    3724:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3726:	6b 85       	ldd	r22, Y+11	; 0x0b
    3728:	7c 85       	ldd	r23, Y+12	; 0x0c
    372a:	8d 85       	ldd	r24, Y+13	; 0x0d
    372c:	9e 85       	ldd	r25, Y+14	; 0x0e
    372e:	20 e0       	ldi	r18, 0x00	; 0
    3730:	30 e0       	ldi	r19, 0x00	; 0
    3732:	4a e7       	ldi	r20, 0x7A	; 122
    3734:	55 e4       	ldi	r21, 0x45	; 69
    3736:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    373a:	dc 01       	movw	r26, r24
    373c:	cb 01       	movw	r24, r22
    373e:	8f 83       	std	Y+7, r24	; 0x07
    3740:	98 87       	std	Y+8, r25	; 0x08
    3742:	a9 87       	std	Y+9, r26	; 0x09
    3744:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3746:	6f 81       	ldd	r22, Y+7	; 0x07
    3748:	78 85       	ldd	r23, Y+8	; 0x08
    374a:	89 85       	ldd	r24, Y+9	; 0x09
    374c:	9a 85       	ldd	r25, Y+10	; 0x0a
    374e:	20 e0       	ldi	r18, 0x00	; 0
    3750:	30 e0       	ldi	r19, 0x00	; 0
    3752:	40 e8       	ldi	r20, 0x80	; 128
    3754:	5f e3       	ldi	r21, 0x3F	; 63
    3756:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    375a:	88 23       	and	r24, r24
    375c:	2c f4       	brge	.+10     	; 0x3768 <HKPD_u8GetPressedKey+0xdc>
		__ticks = 1;
    375e:	81 e0       	ldi	r24, 0x01	; 1
    3760:	90 e0       	ldi	r25, 0x00	; 0
    3762:	9e 83       	std	Y+6, r25	; 0x06
    3764:	8d 83       	std	Y+5, r24	; 0x05
    3766:	3f c0       	rjmp	.+126    	; 0x37e6 <HKPD_u8GetPressedKey+0x15a>
	else if (__tmp > 65535)
    3768:	6f 81       	ldd	r22, Y+7	; 0x07
    376a:	78 85       	ldd	r23, Y+8	; 0x08
    376c:	89 85       	ldd	r24, Y+9	; 0x09
    376e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3770:	20 e0       	ldi	r18, 0x00	; 0
    3772:	3f ef       	ldi	r19, 0xFF	; 255
    3774:	4f e7       	ldi	r20, 0x7F	; 127
    3776:	57 e4       	ldi	r21, 0x47	; 71
    3778:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    377c:	18 16       	cp	r1, r24
    377e:	4c f5       	brge	.+82     	; 0x37d2 <HKPD_u8GetPressedKey+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3780:	6b 85       	ldd	r22, Y+11	; 0x0b
    3782:	7c 85       	ldd	r23, Y+12	; 0x0c
    3784:	8d 85       	ldd	r24, Y+13	; 0x0d
    3786:	9e 85       	ldd	r25, Y+14	; 0x0e
    3788:	20 e0       	ldi	r18, 0x00	; 0
    378a:	30 e0       	ldi	r19, 0x00	; 0
    378c:	40 e2       	ldi	r20, 0x20	; 32
    378e:	51 e4       	ldi	r21, 0x41	; 65
    3790:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3794:	dc 01       	movw	r26, r24
    3796:	cb 01       	movw	r24, r22
    3798:	bc 01       	movw	r22, r24
    379a:	cd 01       	movw	r24, r26
    379c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37a0:	dc 01       	movw	r26, r24
    37a2:	cb 01       	movw	r24, r22
    37a4:	9e 83       	std	Y+6, r25	; 0x06
    37a6:	8d 83       	std	Y+5, r24	; 0x05
    37a8:	0f c0       	rjmp	.+30     	; 0x37c8 <HKPD_u8GetPressedKey+0x13c>
    37aa:	80 e9       	ldi	r24, 0x90	; 144
    37ac:	91 e0       	ldi	r25, 0x01	; 1
    37ae:	9c 83       	std	Y+4, r25	; 0x04
    37b0:	8b 83       	std	Y+3, r24	; 0x03
    37b2:	8b 81       	ldd	r24, Y+3	; 0x03
    37b4:	9c 81       	ldd	r25, Y+4	; 0x04
    37b6:	01 97       	sbiw	r24, 0x01	; 1
    37b8:	f1 f7       	brne	.-4      	; 0x37b6 <HKPD_u8GetPressedKey+0x12a>
    37ba:	9c 83       	std	Y+4, r25	; 0x04
    37bc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37be:	8d 81       	ldd	r24, Y+5	; 0x05
    37c0:	9e 81       	ldd	r25, Y+6	; 0x06
    37c2:	01 97       	sbiw	r24, 0x01	; 1
    37c4:	9e 83       	std	Y+6, r25	; 0x06
    37c6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37c8:	8d 81       	ldd	r24, Y+5	; 0x05
    37ca:	9e 81       	ldd	r25, Y+6	; 0x06
    37cc:	00 97       	sbiw	r24, 0x00	; 0
    37ce:	69 f7       	brne	.-38     	; 0x37aa <HKPD_u8GetPressedKey+0x11e>
    37d0:	14 c0       	rjmp	.+40     	; 0x37fa <HKPD_u8GetPressedKey+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37d2:	6f 81       	ldd	r22, Y+7	; 0x07
    37d4:	78 85       	ldd	r23, Y+8	; 0x08
    37d6:	89 85       	ldd	r24, Y+9	; 0x09
    37d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    37da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37de:	dc 01       	movw	r26, r24
    37e0:	cb 01       	movw	r24, r22
    37e2:	9e 83       	std	Y+6, r25	; 0x06
    37e4:	8d 83       	std	Y+5, r24	; 0x05
    37e6:	8d 81       	ldd	r24, Y+5	; 0x05
    37e8:	9e 81       	ldd	r25, Y+6	; 0x06
    37ea:	9a 83       	std	Y+2, r25	; 0x02
    37ec:	89 83       	std	Y+1, r24	; 0x01
    37ee:	89 81       	ldd	r24, Y+1	; 0x01
    37f0:	9a 81       	ldd	r25, Y+2	; 0x02
    37f2:	01 97       	sbiw	r24, 0x01	; 1
    37f4:	f1 f7       	brne	.-4      	; 0x37f2 <HKPD_u8GetPressedKey+0x166>
    37f6:	9a 83       	std	Y+2, r25	; 0x02
    37f8:	89 83       	std	Y+1, r24	; 0x01
				{
					/* Delay To Prevent Bouncing */
					_delay_ms(25);
					MDIO_GetPinValue(Col_Port_Arr[Local_u8ColCounter], Col_Pin_Arr[Local_u8ColCounter],&Local_u8PinValue);
    37fa:	88 89       	ldd	r24, Y+16	; 0x10
    37fc:	88 2f       	mov	r24, r24
    37fe:	90 e0       	ldi	r25, 0x00	; 0
    3800:	fc 01       	movw	r30, r24
    3802:	e6 57       	subi	r30, 0x76	; 118
    3804:	fe 4f       	sbci	r31, 0xFE	; 254
    3806:	40 81       	ld	r20, Z
    3808:	88 89       	ldd	r24, Y+16	; 0x10
    380a:	88 2f       	mov	r24, r24
    380c:	90 e0       	ldi	r25, 0x00	; 0
    380e:	fc 01       	movw	r30, r24
    3810:	e2 57       	subi	r30, 0x72	; 114
    3812:	fe 4f       	sbci	r31, 0xFE	; 254
    3814:	90 81       	ld	r25, Z
    3816:	9e 01       	movw	r18, r28
    3818:	2f 5e       	subi	r18, 0xEF	; 239
    381a:	3f 4f       	sbci	r19, 0xFF	; 255
    381c:	84 2f       	mov	r24, r20
    381e:	69 2f       	mov	r22, r25
    3820:	a9 01       	movw	r20, r18
    3822:	0e 94 a4 10 	call	0x2148	; 0x2148 <MDIO_GetPinValue>
					if (DIO_u8PIN_LOW == Local_u8PinValue )
    3826:	89 89       	ldd	r24, Y+17	; 0x11
    3828:	88 23       	and	r24, r24
    382a:	71 f5       	brne	.+92     	; 0x3888 <HKPD_u8GetPressedKey+0x1fc>
    382c:	16 c0       	rjmp	.+44     	; 0x385a <HKPD_u8GetPressedKey+0x1ce>
					{
						/* Polling (busy waiting ) until the key is released */
						while(DIO_u8PIN_LOW == Local_u8PinValue )
						{
							MDIO_GetPinValue(Col_Port_Arr[Local_u8ColCounter], Col_Pin_Arr[Local_u8ColCounter],&Local_u8PinValue);
    382e:	88 89       	ldd	r24, Y+16	; 0x10
    3830:	88 2f       	mov	r24, r24
    3832:	90 e0       	ldi	r25, 0x00	; 0
    3834:	fc 01       	movw	r30, r24
    3836:	e6 57       	subi	r30, 0x76	; 118
    3838:	fe 4f       	sbci	r31, 0xFE	; 254
    383a:	40 81       	ld	r20, Z
    383c:	88 89       	ldd	r24, Y+16	; 0x10
    383e:	88 2f       	mov	r24, r24
    3840:	90 e0       	ldi	r25, 0x00	; 0
    3842:	fc 01       	movw	r30, r24
    3844:	e2 57       	subi	r30, 0x72	; 114
    3846:	fe 4f       	sbci	r31, 0xFE	; 254
    3848:	90 81       	ld	r25, Z
    384a:	9e 01       	movw	r18, r28
    384c:	2f 5e       	subi	r18, 0xEF	; 239
    384e:	3f 4f       	sbci	r19, 0xFF	; 255
    3850:	84 2f       	mov	r24, r20
    3852:	69 2f       	mov	r22, r25
    3854:	a9 01       	movw	r20, r18
    3856:	0e 94 a4 10 	call	0x2148	; 0x2148 <MDIO_GetPinValue>
					_delay_ms(25);
					MDIO_GetPinValue(Col_Port_Arr[Local_u8ColCounter], Col_Pin_Arr[Local_u8ColCounter],&Local_u8PinValue);
					if (DIO_u8PIN_LOW == Local_u8PinValue )
					{
						/* Polling (busy waiting ) until the key is released */
						while(DIO_u8PIN_LOW == Local_u8PinValue )
    385a:	89 89       	ldd	r24, Y+17	; 0x11
    385c:	88 23       	and	r24, r24
    385e:	39 f3       	breq	.-50     	; 0x382e <HKPD_u8GetPressedKey+0x1a2>
						{
							MDIO_GetPinValue(Col_Port_Arr[Local_u8ColCounter], Col_Pin_Arr[Local_u8ColCounter],&Local_u8PinValue);
						}

						* pPressedKey = KPD_u8ArrayValue [Local_u8RowCounter][Local_u8ColCounter];
    3860:	8f 85       	ldd	r24, Y+15	; 0x0f
    3862:	48 2f       	mov	r20, r24
    3864:	50 e0       	ldi	r21, 0x00	; 0
    3866:	88 89       	ldd	r24, Y+16	; 0x10
    3868:	28 2f       	mov	r18, r24
    386a:	30 e0       	ldi	r19, 0x00	; 0
    386c:	ca 01       	movw	r24, r20
    386e:	88 0f       	add	r24, r24
    3870:	99 1f       	adc	r25, r25
    3872:	88 0f       	add	r24, r24
    3874:	99 1f       	adc	r25, r25
    3876:	82 0f       	add	r24, r18
    3878:	93 1f       	adc	r25, r19
    387a:	fc 01       	movw	r30, r24
    387c:	ee 56       	subi	r30, 0x6E	; 110
    387e:	fe 4f       	sbci	r31, 0xFE	; 254
    3880:	80 81       	ld	r24, Z
    3882:	ea 89       	ldd	r30, Y+18	; 0x12
    3884:	fb 89       	ldd	r31, Y+19	; 0x13
    3886:	80 83       	st	Z, r24
		for (Local_u8RowCounter = ROW_INIT; Local_u8RowCounter <= ROW_NUM; Local_u8RowCounter++)
		{
			/* Activate current Row*/
			MDIO_SetPinValue(Row_Port_Arr[Local_u8RowCounter], Row_Pin_Arr[Local_u8RowCounter], DIO_u8PIN_LOW);

			for (Local_u8ColCounter = COL_INIT; Local_u8ColCounter <= COL_NUM; Local_u8ColCounter++)
    3888:	88 89       	ldd	r24, Y+16	; 0x10
    388a:	8f 5f       	subi	r24, 0xFF	; 255
    388c:	88 8b       	std	Y+16, r24	; 0x10
    388e:	88 89       	ldd	r24, Y+16	; 0x10
    3890:	85 30       	cpi	r24, 0x05	; 5
    3892:	08 f4       	brcc	.+2      	; 0x3896 <HKPD_u8GetPressedKey+0x20a>
    3894:	26 cf       	rjmp	.-436    	; 0x36e2 <HKPD_u8GetPressedKey+0x56>
						* pPressedKey = KPD_u8ArrayValue [Local_u8RowCounter][Local_u8ColCounter];
					}
				}
			}
			/* Deactivate current Row*/
			MDIO_SetPinValue(Row_Port_Arr[Local_u8RowCounter], Row_Pin_Arr[Local_u8RowCounter], DIO_u8PIN_HIGH);
    3896:	8f 85       	ldd	r24, Y+15	; 0x0f
    3898:	88 2f       	mov	r24, r24
    389a:	90 e0       	ldi	r25, 0x00	; 0
    389c:	fc 01       	movw	r30, r24
    389e:	ee 57       	subi	r30, 0x7E	; 126
    38a0:	fe 4f       	sbci	r31, 0xFE	; 254
    38a2:	20 81       	ld	r18, Z
    38a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    38a6:	88 2f       	mov	r24, r24
    38a8:	90 e0       	ldi	r25, 0x00	; 0
    38aa:	fc 01       	movw	r30, r24
    38ac:	ea 57       	subi	r30, 0x7A	; 122
    38ae:	fe 4f       	sbci	r31, 0xFE	; 254
    38b0:	90 81       	ld	r25, Z
    38b2:	82 2f       	mov	r24, r18
    38b4:	69 2f       	mov	r22, r25
    38b6:	41 e0       	ldi	r20, 0x01	; 1
    38b8:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <MDIO_SetPinValue>
	u8 Local_u8PinValue = 1;

	do
	{

		for (Local_u8RowCounter = ROW_INIT; Local_u8RowCounter <= ROW_NUM; Local_u8RowCounter++)
    38bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    38be:	8f 5f       	subi	r24, 0xFF	; 255
    38c0:	8f 87       	std	Y+15, r24	; 0x0f
    38c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    38c4:	85 30       	cpi	r24, 0x05	; 5
    38c6:	08 f4       	brcc	.+2      	; 0x38ca <HKPD_u8GetPressedKey+0x23e>
    38c8:	f7 ce       	rjmp	.-530    	; 0x36b8 <HKPD_u8GetPressedKey+0x2c>
			}
			/* Deactivate current Row*/
			MDIO_SetPinValue(Row_Port_Arr[Local_u8RowCounter], Row_Pin_Arr[Local_u8RowCounter], DIO_u8PIN_HIGH);
		}

	} while (KPD_NO_PRESSED_KEY == * pPressedKey);
    38ca:	ea 89       	ldd	r30, Y+18	; 0x12
    38cc:	fb 89       	ldd	r31, Y+19	; 0x13
    38ce:	80 81       	ld	r24, Z
    38d0:	8f 3f       	cpi	r24, 0xFF	; 255
    38d2:	09 f4       	brne	.+2      	; 0x38d6 <HKPD_u8GetPressedKey+0x24a>
    38d4:	ef ce       	rjmp	.-546    	; 0x36b4 <HKPD_u8GetPressedKey+0x28>
}
    38d6:	63 96       	adiw	r28, 0x13	; 19
    38d8:	0f b6       	in	r0, 0x3f	; 63
    38da:	f8 94       	cli
    38dc:	de bf       	out	0x3e, r29	; 62
    38de:	0f be       	out	0x3f, r0	; 63
    38e0:	cd bf       	out	0x3d, r28	; 61
    38e2:	cf 91       	pop	r28
    38e4:	df 91       	pop	r29
    38e6:	08 95       	ret

000038e8 <HDCMOTOR_voidInit>:
#include "HDCMOTOR_config.h"
#include "HDCMOTOR_interface.h"


error_state_t HDCMOTOR_voidInit(void)
{
    38e8:	df 93       	push	r29
    38ea:	cf 93       	push	r28
    38ec:	0f 92       	push	r0
    38ee:	cd b7       	in	r28, 0x3d	; 61
    38f0:	de b7       	in	r29, 0x3e	; 62
	error_state_t Local_u8ErrorState = DCMOTOR_OK;
    38f2:	88 e0       	ldi	r24, 0x08	; 8
    38f4:	89 83       	std	Y+1, r24	; 0x01
	// init PWM0
	MPWM0_enumInit();
    38f6:	0e 94 1d 0b 	call	0x163a	; 0x163a <MPWM0_enumInit>

	// set motor pin direction as output
	MDIO_SetPinDirection(DCMOTOR_PWM_PORT, DCMOTOR_PWM_PIN, DIO_u8PIN_OUTPUT);
    38fa:	81 e0       	ldi	r24, 0x01	; 1
    38fc:	63 e0       	ldi	r22, 0x03	; 3
    38fe:	41 e0       	ldi	r20, 0x01	; 1
    3900:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <MDIO_SetPinDirection>
	MDIO_SetPinDirection(DCMOTOR_DIR_PORT, DCMOTOR_DIR_PIN, DIO_u8PIN_OUTPUT);
    3904:	81 e0       	ldi	r24, 0x01	; 1
    3906:	65 e0       	ldi	r22, 0x05	; 5
    3908:	41 e0       	ldi	r20, 0x01	; 1
    390a:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <MDIO_SetPinDirection>
	MDIO_SetPinDirection(DCMOTOR_EN_PORT, DCMOTOR_EN_PIN, DIO_u8PIN_OUTPUT);
    390e:	81 e0       	ldi	r24, 0x01	; 1
    3910:	66 e0       	ldi	r22, 0x06	; 6
    3912:	41 e0       	ldi	r20, 0x01	; 1
    3914:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <MDIO_SetPinDirection>

	return Local_u8ErrorState;
    3918:	89 81       	ldd	r24, Y+1	; 0x01

}
    391a:	0f 90       	pop	r0
    391c:	cf 91       	pop	r28
    391e:	df 91       	pop	r29
    3920:	08 95       	ret

00003922 <HDCMOTOR_voidSetDirection>:

error_state_t HDCMOTOR_voidSetDirection(u8 Copy_u8MotorDirection)
{
    3922:	df 93       	push	r29
    3924:	cf 93       	push	r28
    3926:	00 d0       	rcall	.+0      	; 0x3928 <HDCMOTOR_voidSetDirection+0x6>
    3928:	cd b7       	in	r28, 0x3d	; 61
    392a:	de b7       	in	r29, 0x3e	; 62
    392c:	8a 83       	std	Y+2, r24	; 0x02
	error_state_t Local_u8ErrorState = DCMOTOR_OK;
    392e:	88 e0       	ldi	r24, 0x08	; 8
    3930:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8MotorDirection == HDCMOTOR_CW){
    3932:	8a 81       	ldd	r24, Y+2	; 0x02
    3934:	81 30       	cpi	r24, 0x01	; 1
    3936:	31 f4       	brne	.+12     	; 0x3944 <HDCMOTOR_voidSetDirection+0x22>
		MDIO_SetPinValue(DCMOTOR_DIR_PORT, DCMOTOR_DIR_PIN, DIO_u8PIN_HIGH);
    3938:	81 e0       	ldi	r24, 0x01	; 1
    393a:	65 e0       	ldi	r22, 0x05	; 5
    393c:	41 e0       	ldi	r20, 0x01	; 1
    393e:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <MDIO_SetPinValue>
    3942:	08 c0       	rjmp	.+16     	; 0x3954 <HDCMOTOR_voidSetDirection+0x32>

	} else if (Copy_u8MotorDirection == HDCMOTOR_CCW) {
    3944:	8a 81       	ldd	r24, Y+2	; 0x02
    3946:	82 30       	cpi	r24, 0x02	; 2
    3948:	29 f4       	brne	.+10     	; 0x3954 <HDCMOTOR_voidSetDirection+0x32>
		MDIO_SetPinValue(DCMOTOR_DIR_PORT, DCMOTOR_DIR_PIN, DIO_u8PIN_LOW);
    394a:	81 e0       	ldi	r24, 0x01	; 1
    394c:	65 e0       	ldi	r22, 0x05	; 5
    394e:	40 e0       	ldi	r20, 0x00	; 0
    3950:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <MDIO_SetPinValue>

	} else {
		// No thing
	}

	return Local_u8ErrorState;
    3954:	89 81       	ldd	r24, Y+1	; 0x01

}
    3956:	0f 90       	pop	r0
    3958:	0f 90       	pop	r0
    395a:	cf 91       	pop	r28
    395c:	df 91       	pop	r29
    395e:	08 95       	ret

00003960 <HDCMOTOR_voidSetSpeed>:
error_state_t HDCMOTOR_voidSetSpeed(u8 Copy_u8DutyCycle)
{
    3960:	df 93       	push	r29
    3962:	cf 93       	push	r28
    3964:	00 d0       	rcall	.+0      	; 0x3966 <HDCMOTOR_voidSetSpeed+0x6>
    3966:	cd b7       	in	r28, 0x3d	; 61
    3968:	de b7       	in	r29, 0x3e	; 62
    396a:	8a 83       	std	Y+2, r24	; 0x02
	error_state_t Local_u8ErrorState = DCMOTOR_OK;
    396c:	88 e0       	ldi	r24, 0x08	; 8
    396e:	89 83       	std	Y+1, r24	; 0x01

	MPWM0_enumSetDutyCycle(Copy_u8DutyCycle);
    3970:	8a 81       	ldd	r24, Y+2	; 0x02
    3972:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <MPWM0_enumSetDutyCycle>

	return Local_u8ErrorState;
    3976:	89 81       	ldd	r24, Y+1	; 0x01
}
    3978:	0f 90       	pop	r0
    397a:	0f 90       	pop	r0
    397c:	cf 91       	pop	r28
    397e:	df 91       	pop	r29
    3980:	08 95       	ret

00003982 <HDCMOTOR_voidStart>:

error_state_t HDCMOTOR_voidStart(void)
{
    3982:	df 93       	push	r29
    3984:	cf 93       	push	r28
    3986:	0f 92       	push	r0
    3988:	cd b7       	in	r28, 0x3d	; 61
    398a:	de b7       	in	r29, 0x3e	; 62
	error_state_t Local_u8ErrorState = DCMOTOR_OK;
    398c:	88 e0       	ldi	r24, 0x08	; 8
    398e:	89 83       	std	Y+1, r24	; 0x01

	MPWM0_enumStart();
    3990:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <MPWM0_enumStart>

	return Local_u8ErrorState;
    3994:	89 81       	ldd	r24, Y+1	; 0x01
}
    3996:	0f 90       	pop	r0
    3998:	cf 91       	pop	r28
    399a:	df 91       	pop	r29
    399c:	08 95       	ret

0000399e <HDCMOTOR_voidStop>:

error_state_t HDCMOTOR_voidStop(void)
{
    399e:	df 93       	push	r29
    39a0:	cf 93       	push	r28
    39a2:	0f 92       	push	r0
    39a4:	cd b7       	in	r28, 0x3d	; 61
    39a6:	de b7       	in	r29, 0x3e	; 62
	error_state_t Local_u8ErrorState = DCMOTOR_OK;
    39a8:	88 e0       	ldi	r24, 0x08	; 8
    39aa:	89 83       	std	Y+1, r24	; 0x01
	MPWM0_enumSetDutyCycle(0);
    39ac:	80 e0       	ldi	r24, 0x00	; 0
    39ae:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <MPWM0_enumSetDutyCycle>
	MDIO_SetPinValue(1, 3, DIO_u8PIN_LOW);
    39b2:	81 e0       	ldi	r24, 0x01	; 1
    39b4:	63 e0       	ldi	r22, 0x03	; 3
    39b6:	40 e0       	ldi	r20, 0x00	; 0
    39b8:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <MDIO_SetPinValue>

	MPWM0_enumStop();
    39bc:	0e 94 8a 0b 	call	0x1714	; 0x1714 <MPWM0_enumStop>
	//MDIO_SetPinValue(DCMOTOR_EN_PORT, DCMOTOR_EN_PIN, DIO_u8PIN_HIGH);

	return Local_u8ErrorState;
    39c0:	89 81       	ldd	r24, Y+1	; 0x01
}
    39c2:	0f 90       	pop	r0
    39c4:	cf 91       	pop	r28
    39c6:	df 91       	pop	r29
    39c8:	08 95       	ret

000039ca <HDCMOTOR_MoveCW>:

error_state_t HDCMOTOR_MoveCW(u8 Copy_u8DutyCycle)
{
    39ca:	df 93       	push	r29
    39cc:	cf 93       	push	r28
    39ce:	00 d0       	rcall	.+0      	; 0x39d0 <HDCMOTOR_MoveCW+0x6>
    39d0:	cd b7       	in	r28, 0x3d	; 61
    39d2:	de b7       	in	r29, 0x3e	; 62
    39d4:	8a 83       	std	Y+2, r24	; 0x02
	error_state_t Local_u8ErrorState = DCMOTOR_OK;
    39d6:	88 e0       	ldi	r24, 0x08	; 8
    39d8:	89 83       	std	Y+1, r24	; 0x01

	HDCMOTOR_voidSetDirection(HDCMOTOR_CW);
    39da:	81 e0       	ldi	r24, 0x01	; 1
    39dc:	0e 94 91 1c 	call	0x3922	; 0x3922 <HDCMOTOR_voidSetDirection>
	HDCMOTOR_voidSetSpeed(Copy_u8DutyCycle);
    39e0:	8a 81       	ldd	r24, Y+2	; 0x02
    39e2:	0e 94 b0 1c 	call	0x3960	; 0x3960 <HDCMOTOR_voidSetSpeed>
	HDCMOTOR_voidStart();
    39e6:	0e 94 c1 1c 	call	0x3982	; 0x3982 <HDCMOTOR_voidStart>

	return Local_u8ErrorState;
    39ea:	89 81       	ldd	r24, Y+1	; 0x01

}
    39ec:	0f 90       	pop	r0
    39ee:	0f 90       	pop	r0
    39f0:	cf 91       	pop	r28
    39f2:	df 91       	pop	r29
    39f4:	08 95       	ret

000039f6 <HDCMOTOR_MoveCCW>:

error_state_t HDCMOTOR_MoveCCW(u8 Copy_u8DutyCycle)
{
    39f6:	df 93       	push	r29
    39f8:	cf 93       	push	r28
    39fa:	00 d0       	rcall	.+0      	; 0x39fc <HDCMOTOR_MoveCCW+0x6>
    39fc:	cd b7       	in	r28, 0x3d	; 61
    39fe:	de b7       	in	r29, 0x3e	; 62
    3a00:	8a 83       	std	Y+2, r24	; 0x02
	error_state_t Local_u8ErrorState = DCMOTOR_OK;
    3a02:	88 e0       	ldi	r24, 0x08	; 8
    3a04:	89 83       	std	Y+1, r24	; 0x01

	HDCMOTOR_voidSetDirection(HDCMOTOR_CW);
    3a06:	81 e0       	ldi	r24, 0x01	; 1
    3a08:	0e 94 91 1c 	call	0x3922	; 0x3922 <HDCMOTOR_voidSetDirection>
	HDCMOTOR_voidSetSpeed(Copy_u8DutyCycle);
    3a0c:	8a 81       	ldd	r24, Y+2	; 0x02
    3a0e:	0e 94 b0 1c 	call	0x3960	; 0x3960 <HDCMOTOR_voidSetSpeed>
	HDCMOTOR_voidStart();
    3a12:	0e 94 c1 1c 	call	0x3982	; 0x3982 <HDCMOTOR_voidStart>

	return Local_u8ErrorState;
    3a16:	89 81       	ldd	r24, Y+1	; 0x01

}
    3a18:	0f 90       	pop	r0
    3a1a:	0f 90       	pop	r0
    3a1c:	cf 91       	pop	r28
    3a1e:	df 91       	pop	r29
    3a20:	08 95       	ret

00003a22 <HCLCD_SendCommand>:
u8 Local_u8SetPositionY = Y_INITIAL_POSITION;



error_state_t HCLCD_SendCommand(u8 Copy_u8Command)
{
    3a22:	df 93       	push	r29
    3a24:	cf 93       	push	r28
    3a26:	00 d0       	rcall	.+0      	; 0x3a28 <HCLCD_SendCommand+0x6>
    3a28:	cd b7       	in	r28, 0x3d	; 61
    3a2a:	de b7       	in	r29, 0x3e	; 62
    3a2c:	8a 83       	std	Y+2, r24	; 0x02
	error_state_t Local_ErrorState = R_OK;
    3a2e:	81 e0       	ldi	r24, 0x01	; 1
    3a30:	89 83       	std	Y+1, r24	; 0x01

	/* CLR RS Pin To Send Command */
	MDIO_SetPinValue(CLCD_CTRL_PORT, CLCD_RS_PIN, DIO_u8PIN_LOW);
    3a32:	80 e0       	ldi	r24, 0x00	; 0
    3a34:	63 e0       	ldi	r22, 0x03	; 3
    3a36:	40 e0       	ldi	r20, 0x00	; 0
    3a38:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <MDIO_SetPinValue>
	/* CLR RW Pin To Select Write Mode */
	MDIO_SetPinValue(CLCD_CTRL_PORT, CLCD_RW_PIN, DIO_u8PIN_LOW);
    3a3c:	80 e0       	ldi	r24, 0x00	; 0
    3a3e:	60 e0       	ldi	r22, 0x00	; 0
    3a40:	40 e0       	ldi	r20, 0x00	; 0
    3a42:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <MDIO_SetPinValue>
	/* Send Command To Data Pin */
	H_LCD_void_latchByte(Copy_u8Command);
    3a46:	8a 81       	ldd	r24, Y+2	; 0x02
    3a48:	0e 94 47 20 	call	0x408e	; 0x408e <H_LCD_void_latchByte>

	return Local_ErrorState;
    3a4c:	89 81       	ldd	r24, Y+1	; 0x01
}
    3a4e:	0f 90       	pop	r0
    3a50:	0f 90       	pop	r0
    3a52:	cf 91       	pop	r28
    3a54:	df 91       	pop	r29
    3a56:	08 95       	ret

00003a58 <HCLCD_SendData>:



error_state_t HCLCD_SendData(u8 Copy_u8Data)
{
    3a58:	df 93       	push	r29
    3a5a:	cf 93       	push	r28
    3a5c:	00 d0       	rcall	.+0      	; 0x3a5e <HCLCD_SendData+0x6>
    3a5e:	cd b7       	in	r28, 0x3d	; 61
    3a60:	de b7       	in	r29, 0x3e	; 62
    3a62:	8a 83       	std	Y+2, r24	; 0x02
	error_state_t Local_ErrorState = R_OK;
    3a64:	81 e0       	ldi	r24, 0x01	; 1
    3a66:	89 83       	std	Y+1, r24	; 0x01
	if(specialCharacter  == OFF)
    3a68:	80 91 c5 01 	lds	r24, 0x01C5
    3a6c:	88 23       	and	r24, r24
    3a6e:	11 f4       	brne	.+4      	; 0x3a74 <HCLCD_SendData+0x1c>
	{
		CLCD_CurrentPosition();
    3a70:	0e 94 23 20 	call	0x4046	; 0x4046 <CLCD_CurrentPosition>
	}

	/* SET RS Pin To Send Data */
	MDIO_SetPinValue(CLCD_CTRL_PORT, CLCD_RS_PIN, DIO_u8PIN_HIGH);
    3a74:	80 e0       	ldi	r24, 0x00	; 0
    3a76:	63 e0       	ldi	r22, 0x03	; 3
    3a78:	41 e0       	ldi	r20, 0x01	; 1
    3a7a:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <MDIO_SetPinValue>
	/* CLR RW Pin To Select Write Mode */
	MDIO_SetPinValue(CLCD_CTRL_PORT, CLCD_RW_PIN, DIO_u8PIN_LOW);
    3a7e:	80 e0       	ldi	r24, 0x00	; 0
    3a80:	60 e0       	ldi	r22, 0x00	; 0
    3a82:	40 e0       	ldi	r20, 0x00	; 0
    3a84:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <MDIO_SetPinValue>
	/* Send Data To Data Pin */
	H_LCD_void_latchByte(Copy_u8Data);
    3a88:	8a 81       	ldd	r24, Y+2	; 0x02
    3a8a:	0e 94 47 20 	call	0x408e	; 0x408e <H_LCD_void_latchByte>

	return Local_ErrorState;
    3a8e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3a90:	0f 90       	pop	r0
    3a92:	0f 90       	pop	r0
    3a94:	cf 91       	pop	r28
    3a96:	df 91       	pop	r29
    3a98:	08 95       	ret

00003a9a <HCLCD_Init>:
error_state_t HCLCD_Init(void)
{
    3a9a:	df 93       	push	r29
    3a9c:	cf 93       	push	r28
    3a9e:	cd b7       	in	r28, 0x3d	; 61
    3aa0:	de b7       	in	r29, 0x3e	; 62
    3aa2:	2f 97       	sbiw	r28, 0x0f	; 15
    3aa4:	0f b6       	in	r0, 0x3f	; 63
    3aa6:	f8 94       	cli
    3aa8:	de bf       	out	0x3e, r29	; 62
    3aaa:	0f be       	out	0x3f, r0	; 63
    3aac:	cd bf       	out	0x3d, r28	; 61
	error_state_t Local_ErrorState = R_OK;
    3aae:	81 e0       	ldi	r24, 0x01	; 1
    3ab0:	8f 87       	std	Y+15, r24	; 0x0f

	/* Initialize Data pins as output pin */
	MDIO_SetPinDirection(CLCD_DATA_PORT, CLCD_DATA_4_PIN0, DIO_u8PIN_OUTPUT);
    3ab2:	81 e0       	ldi	r24, 0x01	; 1
    3ab4:	60 e0       	ldi	r22, 0x00	; 0
    3ab6:	41 e0       	ldi	r20, 0x01	; 1
    3ab8:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <MDIO_SetPinDirection>
	MDIO_SetPinDirection(CLCD_DATA_PORT, CLCD_DATA_4_PIN1, DIO_u8PIN_OUTPUT);
    3abc:	81 e0       	ldi	r24, 0x01	; 1
    3abe:	61 e0       	ldi	r22, 0x01	; 1
    3ac0:	41 e0       	ldi	r20, 0x01	; 1
    3ac2:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <MDIO_SetPinDirection>
	MDIO_SetPinDirection(CLCD_DATA_PORT, CLCD_DATA_4_PIN2, DIO_u8PIN_OUTPUT);
    3ac6:	81 e0       	ldi	r24, 0x01	; 1
    3ac8:	62 e0       	ldi	r22, 0x02	; 2
    3aca:	41 e0       	ldi	r20, 0x01	; 1
    3acc:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <MDIO_SetPinDirection>
	MDIO_SetPinDirection(CLCD_DATA_PORT, CLCD_DATA_4_PIN3, DIO_u8PIN_OUTPUT);
    3ad0:	81 e0       	ldi	r24, 0x01	; 1
    3ad2:	64 e0       	ldi	r22, 0x04	; 4
    3ad4:	41 e0       	ldi	r20, 0x01	; 1
    3ad6:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <MDIO_SetPinDirection>
	/* Initialize Control pins as output pin */
	MDIO_SetPinDirection(CLCD_CTRL_PORT, CLCD_RS_PIN, DIO_u8PIN_OUTPUT);
    3ada:	80 e0       	ldi	r24, 0x00	; 0
    3adc:	63 e0       	ldi	r22, 0x03	; 3
    3ade:	41 e0       	ldi	r20, 0x01	; 1
    3ae0:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <MDIO_SetPinDirection>
	MDIO_SetPinDirection(CLCD_CTRL_PORT, CLCD_EN_PIN, DIO_u8PIN_OUTPUT);
    3ae4:	80 e0       	ldi	r24, 0x00	; 0
    3ae6:	62 e0       	ldi	r22, 0x02	; 2
    3ae8:	41 e0       	ldi	r20, 0x01	; 1
    3aea:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <MDIO_SetPinDirection>
    3aee:	80 e0       	ldi	r24, 0x00	; 0
    3af0:	90 e0       	ldi	r25, 0x00	; 0
    3af2:	a0 e2       	ldi	r26, 0x20	; 32
    3af4:	b2 e4       	ldi	r27, 0x42	; 66
    3af6:	8b 87       	std	Y+11, r24	; 0x0b
    3af8:	9c 87       	std	Y+12, r25	; 0x0c
    3afa:	ad 87       	std	Y+13, r26	; 0x0d
    3afc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3afe:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b00:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b02:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b04:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b06:	20 e0       	ldi	r18, 0x00	; 0
    3b08:	30 e0       	ldi	r19, 0x00	; 0
    3b0a:	4a e7       	ldi	r20, 0x7A	; 122
    3b0c:	55 e4       	ldi	r21, 0x45	; 69
    3b0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b12:	dc 01       	movw	r26, r24
    3b14:	cb 01       	movw	r24, r22
    3b16:	8f 83       	std	Y+7, r24	; 0x07
    3b18:	98 87       	std	Y+8, r25	; 0x08
    3b1a:	a9 87       	std	Y+9, r26	; 0x09
    3b1c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3b1e:	6f 81       	ldd	r22, Y+7	; 0x07
    3b20:	78 85       	ldd	r23, Y+8	; 0x08
    3b22:	89 85       	ldd	r24, Y+9	; 0x09
    3b24:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b26:	20 e0       	ldi	r18, 0x00	; 0
    3b28:	30 e0       	ldi	r19, 0x00	; 0
    3b2a:	40 e8       	ldi	r20, 0x80	; 128
    3b2c:	5f e3       	ldi	r21, 0x3F	; 63
    3b2e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3b32:	88 23       	and	r24, r24
    3b34:	2c f4       	brge	.+10     	; 0x3b40 <HCLCD_Init+0xa6>
		__ticks = 1;
    3b36:	81 e0       	ldi	r24, 0x01	; 1
    3b38:	90 e0       	ldi	r25, 0x00	; 0
    3b3a:	9e 83       	std	Y+6, r25	; 0x06
    3b3c:	8d 83       	std	Y+5, r24	; 0x05
    3b3e:	3f c0       	rjmp	.+126    	; 0x3bbe <HCLCD_Init+0x124>
	else if (__tmp > 65535)
    3b40:	6f 81       	ldd	r22, Y+7	; 0x07
    3b42:	78 85       	ldd	r23, Y+8	; 0x08
    3b44:	89 85       	ldd	r24, Y+9	; 0x09
    3b46:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b48:	20 e0       	ldi	r18, 0x00	; 0
    3b4a:	3f ef       	ldi	r19, 0xFF	; 255
    3b4c:	4f e7       	ldi	r20, 0x7F	; 127
    3b4e:	57 e4       	ldi	r21, 0x47	; 71
    3b50:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3b54:	18 16       	cp	r1, r24
    3b56:	4c f5       	brge	.+82     	; 0x3baa <HCLCD_Init+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b58:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b5a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b60:	20 e0       	ldi	r18, 0x00	; 0
    3b62:	30 e0       	ldi	r19, 0x00	; 0
    3b64:	40 e2       	ldi	r20, 0x20	; 32
    3b66:	51 e4       	ldi	r21, 0x41	; 65
    3b68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b6c:	dc 01       	movw	r26, r24
    3b6e:	cb 01       	movw	r24, r22
    3b70:	bc 01       	movw	r22, r24
    3b72:	cd 01       	movw	r24, r26
    3b74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b78:	dc 01       	movw	r26, r24
    3b7a:	cb 01       	movw	r24, r22
    3b7c:	9e 83       	std	Y+6, r25	; 0x06
    3b7e:	8d 83       	std	Y+5, r24	; 0x05
    3b80:	0f c0       	rjmp	.+30     	; 0x3ba0 <HCLCD_Init+0x106>
    3b82:	80 e9       	ldi	r24, 0x90	; 144
    3b84:	91 e0       	ldi	r25, 0x01	; 1
    3b86:	9c 83       	std	Y+4, r25	; 0x04
    3b88:	8b 83       	std	Y+3, r24	; 0x03
    3b8a:	8b 81       	ldd	r24, Y+3	; 0x03
    3b8c:	9c 81       	ldd	r25, Y+4	; 0x04
    3b8e:	01 97       	sbiw	r24, 0x01	; 1
    3b90:	f1 f7       	brne	.-4      	; 0x3b8e <HCLCD_Init+0xf4>
    3b92:	9c 83       	std	Y+4, r25	; 0x04
    3b94:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b96:	8d 81       	ldd	r24, Y+5	; 0x05
    3b98:	9e 81       	ldd	r25, Y+6	; 0x06
    3b9a:	01 97       	sbiw	r24, 0x01	; 1
    3b9c:	9e 83       	std	Y+6, r25	; 0x06
    3b9e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ba0:	8d 81       	ldd	r24, Y+5	; 0x05
    3ba2:	9e 81       	ldd	r25, Y+6	; 0x06
    3ba4:	00 97       	sbiw	r24, 0x00	; 0
    3ba6:	69 f7       	brne	.-38     	; 0x3b82 <HCLCD_Init+0xe8>
    3ba8:	14 c0       	rjmp	.+40     	; 0x3bd2 <HCLCD_Init+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3baa:	6f 81       	ldd	r22, Y+7	; 0x07
    3bac:	78 85       	ldd	r23, Y+8	; 0x08
    3bae:	89 85       	ldd	r24, Y+9	; 0x09
    3bb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bb6:	dc 01       	movw	r26, r24
    3bb8:	cb 01       	movw	r24, r22
    3bba:	9e 83       	std	Y+6, r25	; 0x06
    3bbc:	8d 83       	std	Y+5, r24	; 0x05
    3bbe:	8d 81       	ldd	r24, Y+5	; 0x05
    3bc0:	9e 81       	ldd	r25, Y+6	; 0x06
    3bc2:	9a 83       	std	Y+2, r25	; 0x02
    3bc4:	89 83       	std	Y+1, r24	; 0x01
    3bc6:	89 81       	ldd	r24, Y+1	; 0x01
    3bc8:	9a 81       	ldd	r25, Y+2	; 0x02
    3bca:	01 97       	sbiw	r24, 0x01	; 1
    3bcc:	f1 f7       	brne	.-4      	; 0x3bca <HCLCD_Init+0x130>
    3bce:	9a 83       	std	Y+2, r25	; 0x02
    3bd0:	89 83       	std	Y+1, r24	; 0x01
	/* Wait more than 30ms */
	_delay_ms(40);

#if CLCD_MODE == _4_BIT_MODE
	/* Function set command : 2 lines , 5*8 font size */
	HCLCD_SendCommand(CLCD_SELECT_4_BIT_COMMAND_1);
    3bd2:	83 e3       	ldi	r24, 0x33	; 51
    3bd4:	0e 94 11 1d 	call	0x3a22	; 0x3a22 <HCLCD_SendCommand>
	HCLCD_SendCommand(CLCD_SELECT_4_BIT_COMMAND_2);
    3bd8:	82 e3       	ldi	r24, 0x32	; 50
    3bda:	0e 94 11 1d 	call	0x3a22	; 0x3a22 <HCLCD_SendCommand>
	HCLCD_SendCommand(CLCD_SELECT_4_BIT_COMMAND_3);   /* 0bNFXXXXXX  --> N: no of lines F: font size*/
    3bde:	88 e2       	ldi	r24, 0x28	; 40
    3be0:	0e 94 11 1d 	call	0x3a22	; 0x3a22 <HCLCD_SendCommand>

	/*Display on off control : disable enable , disable cursor , no blink cursor*/
	HCLCD_SendCommand(CLCD_DISPLAY_ON_CURSOR_OFF);
    3be4:	8c e0       	ldi	r24, 0x0C	; 12
    3be6:	0e 94 11 1d 	call	0x3a22	; 0x3a22 <HCLCD_SendCommand>
	HCLCD_SendCommand(CLCD_RETURN_HOME);
    3bea:	82 e0       	ldi	r24, 0x02	; 2
    3bec:	0e 94 11 1d 	call	0x3a22	; 0x3a22 <HCLCD_SendCommand>

	HCLCD_SendCommand(CLCD_DISPLAY_LEFT_TO_RIGHT);
    3bf0:	86 e0       	ldi	r24, 0x06	; 6
    3bf2:	0e 94 11 1d 	call	0x3a22	; 0x3a22 <HCLCD_SendCommand>

	/* Clear display */
	HCLCD_SendCommand(CLCD_DISPLAY_CLEAR);
    3bf6:	81 e0       	ldi	r24, 0x01	; 1
    3bf8:	0e 94 11 1d 	call	0x3a22	; 0x3a22 <HCLCD_SendCommand>

#else
#warning  Select Correct Mode !!!
#endif

	return Local_ErrorState;
    3bfc:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    3bfe:	2f 96       	adiw	r28, 0x0f	; 15
    3c00:	0f b6       	in	r0, 0x3f	; 63
    3c02:	f8 94       	cli
    3c04:	de bf       	out	0x3e, r29	; 62
    3c06:	0f be       	out	0x3f, r0	; 63
    3c08:	cd bf       	out	0x3d, r28	; 61
    3c0a:	cf 91       	pop	r28
    3c0c:	df 91       	pop	r29
    3c0e:	08 95       	ret

00003c10 <HCLCD_Clear>:

error_state_t HCLCD_Clear(void)
{
    3c10:	df 93       	push	r29
    3c12:	cf 93       	push	r28
    3c14:	0f 92       	push	r0
    3c16:	cd b7       	in	r28, 0x3d	; 61
    3c18:	de b7       	in	r29, 0x3e	; 62
	error_state_t Local_ErrorState = R_OK;
    3c1a:	81 e0       	ldi	r24, 0x01	; 1
    3c1c:	89 83       	std	Y+1, r24	; 0x01
	/* Clear display */
	HCLCD_SendCommand(CLCD_DISPLAY_CLEAR); /* 1 or 0x01 or 0b00000001*/
    3c1e:	81 e0       	ldi	r24, 0x01	; 1
    3c20:	0e 94 11 1d 	call	0x3a22	; 0x3a22 <HCLCD_SendCommand>
	return Local_ErrorState;
    3c24:	89 81       	ldd	r24, Y+1	; 0x01
}
    3c26:	0f 90       	pop	r0
    3c28:	cf 91       	pop	r28
    3c2a:	df 91       	pop	r29
    3c2c:	08 95       	ret

00003c2e <HCLCD_SendString>:

error_state_t HCLCD_SendString(const char *Copy_pu8String)
{
    3c2e:	df 93       	push	r29
    3c30:	cf 93       	push	r28
    3c32:	00 d0       	rcall	.+0      	; 0x3c34 <HCLCD_SendString+0x6>
    3c34:	00 d0       	rcall	.+0      	; 0x3c36 <HCLCD_SendString+0x8>
    3c36:	cd b7       	in	r28, 0x3d	; 61
    3c38:	de b7       	in	r29, 0x3e	; 62
    3c3a:	9c 83       	std	Y+4, r25	; 0x04
    3c3c:	8b 83       	std	Y+3, r24	; 0x03
	error_state_t Local_ErrorState = R_OK;
    3c3e:	81 e0       	ldi	r24, 0x01	; 1
    3c40:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_Counter = 0;
    3c42:	19 82       	std	Y+1, r1	; 0x01
    3c44:	0e c0       	rjmp	.+28     	; 0x3c62 <HCLCD_SendString+0x34>
	while (Copy_pu8String[Local_Counter] != NULL )
	{
		HCLCD_SendData(Copy_pu8String[Local_Counter]);
    3c46:	89 81       	ldd	r24, Y+1	; 0x01
    3c48:	28 2f       	mov	r18, r24
    3c4a:	30 e0       	ldi	r19, 0x00	; 0
    3c4c:	8b 81       	ldd	r24, Y+3	; 0x03
    3c4e:	9c 81       	ldd	r25, Y+4	; 0x04
    3c50:	fc 01       	movw	r30, r24
    3c52:	e2 0f       	add	r30, r18
    3c54:	f3 1f       	adc	r31, r19
    3c56:	80 81       	ld	r24, Z
    3c58:	0e 94 2c 1d 	call	0x3a58	; 0x3a58 <HCLCD_SendData>
		Local_Counter ++;
    3c5c:	89 81       	ldd	r24, Y+1	; 0x01
    3c5e:	8f 5f       	subi	r24, 0xFF	; 255
    3c60:	89 83       	std	Y+1, r24	; 0x01

error_state_t HCLCD_SendString(const char *Copy_pu8String)
{
	error_state_t Local_ErrorState = R_OK;
	u8 Local_Counter = 0;
	while (Copy_pu8String[Local_Counter] != NULL )
    3c62:	89 81       	ldd	r24, Y+1	; 0x01
    3c64:	28 2f       	mov	r18, r24
    3c66:	30 e0       	ldi	r19, 0x00	; 0
    3c68:	8b 81       	ldd	r24, Y+3	; 0x03
    3c6a:	9c 81       	ldd	r25, Y+4	; 0x04
    3c6c:	fc 01       	movw	r30, r24
    3c6e:	e2 0f       	add	r30, r18
    3c70:	f3 1f       	adc	r31, r19
    3c72:	80 81       	ld	r24, Z
    3c74:	88 23       	and	r24, r24
    3c76:	39 f7       	brne	.-50     	; 0x3c46 <HCLCD_SendString+0x18>
	{
		HCLCD_SendData(Copy_pu8String[Local_Counter]);
		Local_Counter ++;
	}

	return Local_ErrorState;
    3c78:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3c7a:	0f 90       	pop	r0
    3c7c:	0f 90       	pop	r0
    3c7e:	0f 90       	pop	r0
    3c80:	0f 90       	pop	r0
    3c82:	cf 91       	pop	r28
    3c84:	df 91       	pop	r29
    3c86:	08 95       	ret

00003c88 <HCLCD_SendNumber>:

error_state_t HCLCD_SendNumber(f32 Copy_u32Number)
{
    3c88:	0f 93       	push	r16
    3c8a:	1f 93       	push	r17
    3c8c:	df 93       	push	r29
    3c8e:	cf 93       	push	r28
    3c90:	cd b7       	in	r28, 0x3d	; 61
    3c92:	de b7       	in	r29, 0x3e	; 62
    3c94:	6e 97       	sbiw	r28, 0x1e	; 30
    3c96:	0f b6       	in	r0, 0x3f	; 63
    3c98:	f8 94       	cli
    3c9a:	de bf       	out	0x3e, r29	; 62
    3c9c:	0f be       	out	0x3f, r0	; 63
    3c9e:	cd bf       	out	0x3d, r28	; 61
    3ca0:	6b 8f       	std	Y+27, r22	; 0x1b
    3ca2:	7c 8f       	std	Y+28, r23	; 0x1c
    3ca4:	8d 8f       	std	Y+29, r24	; 0x1d
    3ca6:	9e 8f       	std	Y+30, r25	; 0x1e
	error_state_t Local_ErrorState = R_OK;
    3ca8:	81 e0       	ldi	r24, 0x01	; 1
    3caa:	8e 83       	std	Y+6, r24	; 0x06

	s32 Local_s32Number = Copy_u32Number;
    3cac:	6b 8d       	ldd	r22, Y+27	; 0x1b
    3cae:	7c 8d       	ldd	r23, Y+28	; 0x1c
    3cb0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3cb2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3cb4:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    3cb8:	dc 01       	movw	r26, r24
    3cba:	cb 01       	movw	r24, r22
    3cbc:	8a 83       	std	Y+2, r24	; 0x02
    3cbe:	9b 83       	std	Y+3, r25	; 0x03
    3cc0:	ac 83       	std	Y+4, r26	; 0x04
    3cc2:	bd 83       	std	Y+5, r27	; 0x05

	if(Local_s32Number == 0)
    3cc4:	8a 81       	ldd	r24, Y+2	; 0x02
    3cc6:	9b 81       	ldd	r25, Y+3	; 0x03
    3cc8:	ac 81       	ldd	r26, Y+4	; 0x04
    3cca:	bd 81       	ldd	r27, Y+5	; 0x05
    3ccc:	00 97       	sbiw	r24, 0x00	; 0
    3cce:	a1 05       	cpc	r26, r1
    3cd0:	b1 05       	cpc	r27, r1
    3cd2:	21 f4       	brne	.+8      	; 0x3cdc <HCLCD_SendNumber+0x54>
	{
		HCLCD_SendData('0');
    3cd4:	80 e3       	ldi	r24, 0x30	; 48
    3cd6:	0e 94 2c 1d 	call	0x3a58	; 0x3a58 <HCLCD_SendData>
    3cda:	18 c0       	rjmp	.+48     	; 0x3d0c <HCLCD_SendNumber+0x84>
	}
	else if (Local_s32Number <0)
    3cdc:	8a 81       	ldd	r24, Y+2	; 0x02
    3cde:	9b 81       	ldd	r25, Y+3	; 0x03
    3ce0:	ac 81       	ldd	r26, Y+4	; 0x04
    3ce2:	bd 81       	ldd	r27, Y+5	; 0x05
    3ce4:	bb 23       	and	r27, r27
    3ce6:	94 f4       	brge	.+36     	; 0x3d0c <HCLCD_SendNumber+0x84>
	{
		HCLCD_SendData('-');
    3ce8:	8d e2       	ldi	r24, 0x2D	; 45
    3cea:	0e 94 2c 1d 	call	0x3a58	; 0x3a58 <HCLCD_SendData>
		Local_s32Number = Local_s32Number *(-1);
    3cee:	8a 81       	ldd	r24, Y+2	; 0x02
    3cf0:	9b 81       	ldd	r25, Y+3	; 0x03
    3cf2:	ac 81       	ldd	r26, Y+4	; 0x04
    3cf4:	bd 81       	ldd	r27, Y+5	; 0x05
    3cf6:	b0 95       	com	r27
    3cf8:	a0 95       	com	r26
    3cfa:	90 95       	com	r25
    3cfc:	81 95       	neg	r24
    3cfe:	9f 4f       	sbci	r25, 0xFF	; 255
    3d00:	af 4f       	sbci	r26, 0xFF	; 255
    3d02:	bf 4f       	sbci	r27, 0xFF	; 255
    3d04:	8a 83       	std	Y+2, r24	; 0x02
    3d06:	9b 83       	std	Y+3, r25	; 0x03
    3d08:	ac 83       	std	Y+4, r26	; 0x04
    3d0a:	bd 83       	std	Y+5, r27	; 0x05

	}
	u8 Local_u8Array[20]={0};
    3d0c:	84 e1       	ldi	r24, 0x14	; 20
    3d0e:	fe 01       	movw	r30, r28
    3d10:	37 96       	adiw	r30, 0x07	; 7
    3d12:	df 01       	movw	r26, r30
    3d14:	98 2f       	mov	r25, r24
    3d16:	1d 92       	st	X+, r1
    3d18:	9a 95       	dec	r25
    3d1a:	e9 f7       	brne	.-6      	; 0x3d16 <HCLCD_SendNumber+0x8e>
	s8 local_s8Counter =0;
    3d1c:	19 82       	std	Y+1, r1	; 0x01
    3d1e:	2f c0       	rjmp	.+94     	; 0x3d7e <HCLCD_SendNumber+0xf6>
	while (Local_s32Number != 0)
	{
		Local_u8Array[local_s8Counter]= Local_s32Number%10;
    3d20:	89 81       	ldd	r24, Y+1	; 0x01
    3d22:	08 2f       	mov	r16, r24
    3d24:	11 27       	eor	r17, r17
    3d26:	07 fd       	sbrc	r16, 7
    3d28:	10 95       	com	r17
    3d2a:	8a 81       	ldd	r24, Y+2	; 0x02
    3d2c:	9b 81       	ldd	r25, Y+3	; 0x03
    3d2e:	ac 81       	ldd	r26, Y+4	; 0x04
    3d30:	bd 81       	ldd	r27, Y+5	; 0x05
    3d32:	2a e0       	ldi	r18, 0x0A	; 10
    3d34:	30 e0       	ldi	r19, 0x00	; 0
    3d36:	40 e0       	ldi	r20, 0x00	; 0
    3d38:	50 e0       	ldi	r21, 0x00	; 0
    3d3a:	bc 01       	movw	r22, r24
    3d3c:	cd 01       	movw	r24, r26
    3d3e:	0e 94 ef 23 	call	0x47de	; 0x47de <__divmodsi4>
    3d42:	dc 01       	movw	r26, r24
    3d44:	cb 01       	movw	r24, r22
    3d46:	28 2f       	mov	r18, r24
    3d48:	ce 01       	movw	r24, r28
    3d4a:	07 96       	adiw	r24, 0x07	; 7
    3d4c:	fc 01       	movw	r30, r24
    3d4e:	e0 0f       	add	r30, r16
    3d50:	f1 1f       	adc	r31, r17
    3d52:	20 83       	st	Z, r18
		Local_s32Number/=10;
    3d54:	8a 81       	ldd	r24, Y+2	; 0x02
    3d56:	9b 81       	ldd	r25, Y+3	; 0x03
    3d58:	ac 81       	ldd	r26, Y+4	; 0x04
    3d5a:	bd 81       	ldd	r27, Y+5	; 0x05
    3d5c:	2a e0       	ldi	r18, 0x0A	; 10
    3d5e:	30 e0       	ldi	r19, 0x00	; 0
    3d60:	40 e0       	ldi	r20, 0x00	; 0
    3d62:	50 e0       	ldi	r21, 0x00	; 0
    3d64:	bc 01       	movw	r22, r24
    3d66:	cd 01       	movw	r24, r26
    3d68:	0e 94 ef 23 	call	0x47de	; 0x47de <__divmodsi4>
    3d6c:	da 01       	movw	r26, r20
    3d6e:	c9 01       	movw	r24, r18
    3d70:	8a 83       	std	Y+2, r24	; 0x02
    3d72:	9b 83       	std	Y+3, r25	; 0x03
    3d74:	ac 83       	std	Y+4, r26	; 0x04
    3d76:	bd 83       	std	Y+5, r27	; 0x05
		local_s8Counter++;
    3d78:	89 81       	ldd	r24, Y+1	; 0x01
    3d7a:	8f 5f       	subi	r24, 0xFF	; 255
    3d7c:	89 83       	std	Y+1, r24	; 0x01
		Local_s32Number = Local_s32Number *(-1);

	}
	u8 Local_u8Array[20]={0};
	s8 local_s8Counter =0;
	while (Local_s32Number != 0)
    3d7e:	8a 81       	ldd	r24, Y+2	; 0x02
    3d80:	9b 81       	ldd	r25, Y+3	; 0x03
    3d82:	ac 81       	ldd	r26, Y+4	; 0x04
    3d84:	bd 81       	ldd	r27, Y+5	; 0x05
    3d86:	00 97       	sbiw	r24, 0x00	; 0
    3d88:	a1 05       	cpc	r26, r1
    3d8a:	b1 05       	cpc	r27, r1
    3d8c:	49 f6       	brne	.-110    	; 0x3d20 <HCLCD_SendNumber+0x98>
	{
		Local_u8Array[local_s8Counter]= Local_s32Number%10;
		Local_s32Number/=10;
		local_s8Counter++;
	}
	local_s8Counter--;
    3d8e:	89 81       	ldd	r24, Y+1	; 0x01
    3d90:	81 50       	subi	r24, 0x01	; 1
    3d92:	89 83       	std	Y+1, r24	; 0x01
    3d94:	11 c0       	rjmp	.+34     	; 0x3db8 <HCLCD_SendNumber+0x130>
	while (local_s8Counter>=0)
	{
		HCLCD_SendData(Local_u8Array[local_s8Counter]+'0');
    3d96:	89 81       	ldd	r24, Y+1	; 0x01
    3d98:	28 2f       	mov	r18, r24
    3d9a:	33 27       	eor	r19, r19
    3d9c:	27 fd       	sbrc	r18, 7
    3d9e:	30 95       	com	r19
    3da0:	ce 01       	movw	r24, r28
    3da2:	07 96       	adiw	r24, 0x07	; 7
    3da4:	fc 01       	movw	r30, r24
    3da6:	e2 0f       	add	r30, r18
    3da8:	f3 1f       	adc	r31, r19
    3daa:	80 81       	ld	r24, Z
    3dac:	80 5d       	subi	r24, 0xD0	; 208
    3dae:	0e 94 2c 1d 	call	0x3a58	; 0x3a58 <HCLCD_SendData>
		local_s8Counter--;
    3db2:	89 81       	ldd	r24, Y+1	; 0x01
    3db4:	81 50       	subi	r24, 0x01	; 1
    3db6:	89 83       	std	Y+1, r24	; 0x01
		Local_u8Array[local_s8Counter]= Local_s32Number%10;
		Local_s32Number/=10;
		local_s8Counter++;
	}
	local_s8Counter--;
	while (local_s8Counter>=0)
    3db8:	89 81       	ldd	r24, Y+1	; 0x01
    3dba:	88 23       	and	r24, r24
    3dbc:	64 f7       	brge	.-40     	; 0x3d96 <HCLCD_SendNumber+0x10e>
	{
		HCLCD_SendData(Local_u8Array[local_s8Counter]+'0');
		local_s8Counter--;
	}
	return Local_ErrorState;
    3dbe:	8e 81       	ldd	r24, Y+6	; 0x06
}
    3dc0:	6e 96       	adiw	r28, 0x1e	; 30
    3dc2:	0f b6       	in	r0, 0x3f	; 63
    3dc4:	f8 94       	cli
    3dc6:	de bf       	out	0x3e, r29	; 62
    3dc8:	0f be       	out	0x3f, r0	; 63
    3dca:	cd bf       	out	0x3d, r28	; 61
    3dcc:	cf 91       	pop	r28
    3dce:	df 91       	pop	r29
    3dd0:	1f 91       	pop	r17
    3dd2:	0f 91       	pop	r16
    3dd4:	08 95       	ret

00003dd6 <HCLCD_voidWriteFloatNumber>:

void HCLCD_voidWriteFloatNumber(f32 Copy_f32FloatNumber )
{
    3dd6:	df 93       	push	r29
    3dd8:	cf 93       	push	r28
    3dda:	cd b7       	in	r28, 0x3d	; 61
    3ddc:	de b7       	in	r29, 0x3e	; 62
    3dde:	28 97       	sbiw	r28, 0x08	; 8
    3de0:	0f b6       	in	r0, 0x3f	; 63
    3de2:	f8 94       	cli
    3de4:	de bf       	out	0x3e, r29	; 62
    3de6:	0f be       	out	0x3f, r0	; 63
    3de8:	cd bf       	out	0x3d, r28	; 61
    3dea:	6d 83       	std	Y+5, r22	; 0x05
    3dec:	7e 83       	std	Y+6, r23	; 0x06
    3dee:	8f 83       	std	Y+7, r24	; 0x07
    3df0:	98 87       	std	Y+8, r25	; 0x08

	if(Copy_f32FloatNumber == 0)
    3df2:	6d 81       	ldd	r22, Y+5	; 0x05
    3df4:	7e 81       	ldd	r23, Y+6	; 0x06
    3df6:	8f 81       	ldd	r24, Y+7	; 0x07
    3df8:	98 85       	ldd	r25, Y+8	; 0x08
    3dfa:	20 e0       	ldi	r18, 0x00	; 0
    3dfc:	30 e0       	ldi	r19, 0x00	; 0
    3dfe:	40 e0       	ldi	r20, 0x00	; 0
    3e00:	50 e0       	ldi	r21, 0x00	; 0
    3e02:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    3e06:	88 23       	and	r24, r24
    3e08:	39 f4       	brne	.+14     	; 0x3e18 <HCLCD_voidWriteFloatNumber+0x42>
	{
		HCLCD_SendNumber(0);
    3e0a:	60 e0       	ldi	r22, 0x00	; 0
    3e0c:	70 e0       	ldi	r23, 0x00	; 0
    3e0e:	80 e0       	ldi	r24, 0x00	; 0
    3e10:	90 e0       	ldi	r25, 0x00	; 0
    3e12:	0e 94 44 1e 	call	0x3c88	; 0x3c88 <HCLCD_SendNumber>
    3e16:	89 c0       	rjmp	.+274    	; 0x3f2a <HCLCD_voidWriteFloatNumber+0x154>
	}

	else
	{
		s32 Local_s32DecemalNum=Copy_f32FloatNumber;
    3e18:	6d 81       	ldd	r22, Y+5	; 0x05
    3e1a:	7e 81       	ldd	r23, Y+6	; 0x06
    3e1c:	8f 81       	ldd	r24, Y+7	; 0x07
    3e1e:	98 85       	ldd	r25, Y+8	; 0x08
    3e20:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    3e24:	dc 01       	movw	r26, r24
    3e26:	cb 01       	movw	r24, r22
    3e28:	89 83       	std	Y+1, r24	; 0x01
    3e2a:	9a 83       	std	Y+2, r25	; 0x02
    3e2c:	ab 83       	std	Y+3, r26	; 0x03
    3e2e:	bc 83       	std	Y+4, r27	; 0x04
		HCLCD_SendNumber(Local_s32DecemalNum);
    3e30:	69 81       	ldd	r22, Y+1	; 0x01
    3e32:	7a 81       	ldd	r23, Y+2	; 0x02
    3e34:	8b 81       	ldd	r24, Y+3	; 0x03
    3e36:	9c 81       	ldd	r25, Y+4	; 0x04
    3e38:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    3e3c:	dc 01       	movw	r26, r24
    3e3e:	cb 01       	movw	r24, r22
    3e40:	bc 01       	movw	r22, r24
    3e42:	cd 01       	movw	r24, r26
    3e44:	0e 94 44 1e 	call	0x3c88	; 0x3c88 <HCLCD_SendNumber>

		Copy_f32FloatNumber = Copy_f32FloatNumber -Local_s32DecemalNum;
    3e48:	69 81       	ldd	r22, Y+1	; 0x01
    3e4a:	7a 81       	ldd	r23, Y+2	; 0x02
    3e4c:	8b 81       	ldd	r24, Y+3	; 0x03
    3e4e:	9c 81       	ldd	r25, Y+4	; 0x04
    3e50:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    3e54:	9b 01       	movw	r18, r22
    3e56:	ac 01       	movw	r20, r24
    3e58:	6d 81       	ldd	r22, Y+5	; 0x05
    3e5a:	7e 81       	ldd	r23, Y+6	; 0x06
    3e5c:	8f 81       	ldd	r24, Y+7	; 0x07
    3e5e:	98 85       	ldd	r25, Y+8	; 0x08
    3e60:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    3e64:	dc 01       	movw	r26, r24
    3e66:	cb 01       	movw	r24, r22
    3e68:	8d 83       	std	Y+5, r24	; 0x05
    3e6a:	9e 83       	std	Y+6, r25	; 0x06
    3e6c:	af 83       	std	Y+7, r26	; 0x07
    3e6e:	b8 87       	std	Y+8, r27	; 0x08
		if (Copy_f32FloatNumber>0)
    3e70:	6d 81       	ldd	r22, Y+5	; 0x05
    3e72:	7e 81       	ldd	r23, Y+6	; 0x06
    3e74:	8f 81       	ldd	r24, Y+7	; 0x07
    3e76:	98 85       	ldd	r25, Y+8	; 0x08
    3e78:	20 e0       	ldi	r18, 0x00	; 0
    3e7a:	30 e0       	ldi	r19, 0x00	; 0
    3e7c:	40 e0       	ldi	r20, 0x00	; 0
    3e7e:	50 e0       	ldi	r21, 0x00	; 0
    3e80:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3e84:	18 16       	cp	r1, r24
    3e86:	0c f0       	brlt	.+2      	; 0x3e8a <HCLCD_voidWriteFloatNumber+0xb4>
    3e88:	50 c0       	rjmp	.+160    	; 0x3f2a <HCLCD_voidWriteFloatNumber+0x154>
		{
			HCLCD_SendData('.');
    3e8a:	8e e2       	ldi	r24, 0x2E	; 46
    3e8c:	0e 94 2c 1d 	call	0x3a58	; 0x3a58 <HCLCD_SendData>
			Copy_f32FloatNumber*=100000;
    3e90:	6d 81       	ldd	r22, Y+5	; 0x05
    3e92:	7e 81       	ldd	r23, Y+6	; 0x06
    3e94:	8f 81       	ldd	r24, Y+7	; 0x07
    3e96:	98 85       	ldd	r25, Y+8	; 0x08
    3e98:	20 e0       	ldi	r18, 0x00	; 0
    3e9a:	30 e5       	ldi	r19, 0x50	; 80
    3e9c:	43 ec       	ldi	r20, 0xC3	; 195
    3e9e:	57 e4       	ldi	r21, 0x47	; 71
    3ea0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ea4:	dc 01       	movw	r26, r24
    3ea6:	cb 01       	movw	r24, r22
    3ea8:	8d 83       	std	Y+5, r24	; 0x05
    3eaa:	9e 83       	std	Y+6, r25	; 0x06
    3eac:	af 83       	std	Y+7, r26	; 0x07
    3eae:	b8 87       	std	Y+8, r27	; 0x08
			Local_s32DecemalNum = Copy_f32FloatNumber;
    3eb0:	6d 81       	ldd	r22, Y+5	; 0x05
    3eb2:	7e 81       	ldd	r23, Y+6	; 0x06
    3eb4:	8f 81       	ldd	r24, Y+7	; 0x07
    3eb6:	98 85       	ldd	r25, Y+8	; 0x08
    3eb8:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    3ebc:	dc 01       	movw	r26, r24
    3ebe:	cb 01       	movw	r24, r22
    3ec0:	89 83       	std	Y+1, r24	; 0x01
    3ec2:	9a 83       	std	Y+2, r25	; 0x02
    3ec4:	ab 83       	std	Y+3, r26	; 0x03
    3ec6:	bc 83       	std	Y+4, r27	; 0x04
    3ec8:	12 c0       	rjmp	.+36     	; 0x3eee <HCLCD_voidWriteFloatNumber+0x118>

			while (Local_s32DecemalNum%10 == 0)
			{
				Local_s32DecemalNum/=10;
    3eca:	89 81       	ldd	r24, Y+1	; 0x01
    3ecc:	9a 81       	ldd	r25, Y+2	; 0x02
    3ece:	ab 81       	ldd	r26, Y+3	; 0x03
    3ed0:	bc 81       	ldd	r27, Y+4	; 0x04
    3ed2:	2a e0       	ldi	r18, 0x0A	; 10
    3ed4:	30 e0       	ldi	r19, 0x00	; 0
    3ed6:	40 e0       	ldi	r20, 0x00	; 0
    3ed8:	50 e0       	ldi	r21, 0x00	; 0
    3eda:	bc 01       	movw	r22, r24
    3edc:	cd 01       	movw	r24, r26
    3ede:	0e 94 ef 23 	call	0x47de	; 0x47de <__divmodsi4>
    3ee2:	da 01       	movw	r26, r20
    3ee4:	c9 01       	movw	r24, r18
    3ee6:	89 83       	std	Y+1, r24	; 0x01
    3ee8:	9a 83       	std	Y+2, r25	; 0x02
    3eea:	ab 83       	std	Y+3, r26	; 0x03
    3eec:	bc 83       	std	Y+4, r27	; 0x04
		{
			HCLCD_SendData('.');
			Copy_f32FloatNumber*=100000;
			Local_s32DecemalNum = Copy_f32FloatNumber;

			while (Local_s32DecemalNum%10 == 0)
    3eee:	89 81       	ldd	r24, Y+1	; 0x01
    3ef0:	9a 81       	ldd	r25, Y+2	; 0x02
    3ef2:	ab 81       	ldd	r26, Y+3	; 0x03
    3ef4:	bc 81       	ldd	r27, Y+4	; 0x04
    3ef6:	2a e0       	ldi	r18, 0x0A	; 10
    3ef8:	30 e0       	ldi	r19, 0x00	; 0
    3efa:	40 e0       	ldi	r20, 0x00	; 0
    3efc:	50 e0       	ldi	r21, 0x00	; 0
    3efe:	bc 01       	movw	r22, r24
    3f00:	cd 01       	movw	r24, r26
    3f02:	0e 94 ef 23 	call	0x47de	; 0x47de <__divmodsi4>
    3f06:	dc 01       	movw	r26, r24
    3f08:	cb 01       	movw	r24, r22
    3f0a:	00 97       	sbiw	r24, 0x00	; 0
    3f0c:	a1 05       	cpc	r26, r1
    3f0e:	b1 05       	cpc	r27, r1
    3f10:	e1 f2       	breq	.-72     	; 0x3eca <HCLCD_voidWriteFloatNumber+0xf4>
			{
				Local_s32DecemalNum/=10;
			}
			HCLCD_SendNumber(Local_s32DecemalNum);
    3f12:	69 81       	ldd	r22, Y+1	; 0x01
    3f14:	7a 81       	ldd	r23, Y+2	; 0x02
    3f16:	8b 81       	ldd	r24, Y+3	; 0x03
    3f18:	9c 81       	ldd	r25, Y+4	; 0x04
    3f1a:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    3f1e:	dc 01       	movw	r26, r24
    3f20:	cb 01       	movw	r24, r22
    3f22:	bc 01       	movw	r22, r24
    3f24:	cd 01       	movw	r24, r26
    3f26:	0e 94 44 1e 	call	0x3c88	; 0x3c88 <HCLCD_SendNumber>
		//else
		//{
		//	Local_s32DecemalNum /=100;
		//}
	}
}
    3f2a:	28 96       	adiw	r28, 0x08	; 8
    3f2c:	0f b6       	in	r0, 0x3f	; 63
    3f2e:	f8 94       	cli
    3f30:	de bf       	out	0x3e, r29	; 62
    3f32:	0f be       	out	0x3f, r0	; 63
    3f34:	cd bf       	out	0x3d, r28	; 61
    3f36:	cf 91       	pop	r28
    3f38:	df 91       	pop	r29
    3f3a:	08 95       	ret

00003f3c <HCLCD_WriteSpecialCharacter>:
    HCLCD_GoToXY(row, col);
    HCLCD_SendNumber(value);
}****/

error_state_t HCLCD_WriteSpecialCharacter(u8* Copy_pu8Pattern, u8 Copy_u8PatternNumber, u8 Copy_u8XPos, u8 Copy_u8YPos)
{
    3f3c:	df 93       	push	r29
    3f3e:	cf 93       	push	r28
    3f40:	cd b7       	in	r28, 0x3d	; 61
    3f42:	de b7       	in	r29, 0x3e	; 62
    3f44:	28 97       	sbiw	r28, 0x08	; 8
    3f46:	0f b6       	in	r0, 0x3f	; 63
    3f48:	f8 94       	cli
    3f4a:	de bf       	out	0x3e, r29	; 62
    3f4c:	0f be       	out	0x3f, r0	; 63
    3f4e:	cd bf       	out	0x3d, r28	; 61
    3f50:	9d 83       	std	Y+5, r25	; 0x05
    3f52:	8c 83       	std	Y+4, r24	; 0x04
    3f54:	6e 83       	std	Y+6, r22	; 0x06
    3f56:	4f 83       	std	Y+7, r20	; 0x07
    3f58:	28 87       	std	Y+8, r18	; 0x08
	error_state_t Local_ErrorState = R_OK;
    3f5a:	81 e0       	ldi	r24, 0x01	; 1
    3f5c:	8b 83       	std	Y+3, r24	; 0x03
	specialCharacter  = ON;
    3f5e:	81 e0       	ldi	r24, 0x01	; 1
    3f60:	80 93 c5 01 	sts	0x01C5, r24

	u8 Local_u8CGRAMAddress= 0;
    3f64:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8Iterator =0;
    3f66:	19 82       	std	Y+1, r1	; 0x01

	/* Calculate the CGRAM address whose each block is 8 bytes */
	Local_u8CGRAMAddress =Copy_u8PatternNumber*8;
    3f68:	8e 81       	ldd	r24, Y+6	; 0x06
    3f6a:	88 2f       	mov	r24, r24
    3f6c:	90 e0       	ldi	r25, 0x00	; 0
    3f6e:	88 0f       	add	r24, r24
    3f70:	99 1f       	adc	r25, r25
    3f72:	88 0f       	add	r24, r24
    3f74:	99 1f       	adc	r25, r25
    3f76:	88 0f       	add	r24, r24
    3f78:	99 1f       	adc	r25, r25
    3f7a:	8a 83       	std	Y+2, r24	; 0x02

	/* Send CGRAM Address command to LCD, with setting bit 6, clearing bit 7*/
	HCLCD_SendCommand(Local_u8CGRAMAddress+64);
    3f7c:	8a 81       	ldd	r24, Y+2	; 0x02
    3f7e:	80 5c       	subi	r24, 0xC0	; 192
    3f80:	0e 94 11 1d 	call	0x3a22	; 0x3a22 <HCLCD_SendCommand>

	/* Write the pattern into CGRAM */

	for (Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++)
    3f84:	19 82       	std	Y+1, r1	; 0x01
    3f86:	0e c0       	rjmp	.+28     	; 0x3fa4 <HCLCD_WriteSpecialCharacter+0x68>
	{
		HCLCD_SendData(Copy_pu8Pattern[Local_u8Iterator]);
    3f88:	89 81       	ldd	r24, Y+1	; 0x01
    3f8a:	28 2f       	mov	r18, r24
    3f8c:	30 e0       	ldi	r19, 0x00	; 0
    3f8e:	8c 81       	ldd	r24, Y+4	; 0x04
    3f90:	9d 81       	ldd	r25, Y+5	; 0x05
    3f92:	fc 01       	movw	r30, r24
    3f94:	e2 0f       	add	r30, r18
    3f96:	f3 1f       	adc	r31, r19
    3f98:	80 81       	ld	r24, Z
    3f9a:	0e 94 2c 1d 	call	0x3a58	; 0x3a58 <HCLCD_SendData>
	/* Send CGRAM Address command to LCD, with setting bit 6, clearing bit 7*/
	HCLCD_SendCommand(Local_u8CGRAMAddress+64);

	/* Write the pattern into CGRAM */

	for (Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++)
    3f9e:	89 81       	ldd	r24, Y+1	; 0x01
    3fa0:	8f 5f       	subi	r24, 0xFF	; 255
    3fa2:	89 83       	std	Y+1, r24	; 0x01
    3fa4:	89 81       	ldd	r24, Y+1	; 0x01
    3fa6:	88 30       	cpi	r24, 0x08	; 8
    3fa8:	78 f3       	brcs	.-34     	; 0x3f88 <HCLCD_WriteSpecialCharacter+0x4c>
	{
		HCLCD_SendData(Copy_pu8Pattern[Local_u8Iterator]);
	}

	/* go back to the DDRAM to display the Pattern*/
	HCLCD_GoToXY(Copy_u8XPos,Copy_u8YPos);
    3faa:	8f 81       	ldd	r24, Y+7	; 0x07
    3fac:	68 85       	ldd	r22, Y+8	; 0x08
    3fae:	0e 94 e8 1f 	call	0x3fd0	; 0x3fd0 <HCLCD_GoToXY>
	/* Display the pattern written in the CGRAM*/
	HCLCD_SendData(Copy_u8PatternNumber);
    3fb2:	8e 81       	ldd	r24, Y+6	; 0x06
    3fb4:	0e 94 2c 1d 	call	0x3a58	; 0x3a58 <HCLCD_SendData>
	specialCharacter  = OFF;
    3fb8:	10 92 c5 01 	sts	0x01C5, r1

	return Local_ErrorState;
    3fbc:	8b 81       	ldd	r24, Y+3	; 0x03

}
    3fbe:	28 96       	adiw	r28, 0x08	; 8
    3fc0:	0f b6       	in	r0, 0x3f	; 63
    3fc2:	f8 94       	cli
    3fc4:	de bf       	out	0x3e, r29	; 62
    3fc6:	0f be       	out	0x3f, r0	; 63
    3fc8:	cd bf       	out	0x3d, r28	; 61
    3fca:	cf 91       	pop	r28
    3fcc:	df 91       	pop	r29
    3fce:	08 95       	ret

00003fd0 <HCLCD_GoToXY>:
	return Local_ErrorState;

}*/

error_state_t HCLCD_GoToXY(u8 Copy_u8Xpos, u8 Copy_u8Ypos)
{
    3fd0:	df 93       	push	r29
    3fd2:	cf 93       	push	r28
    3fd4:	cd b7       	in	r28, 0x3d	; 61
    3fd6:	de b7       	in	r29, 0x3e	; 62
    3fd8:	28 97       	sbiw	r28, 0x08	; 8
    3fda:	0f b6       	in	r0, 0x3f	; 63
    3fdc:	f8 94       	cli
    3fde:	de bf       	out	0x3e, r29	; 62
    3fe0:	0f be       	out	0x3f, r0	; 63
    3fe2:	cd bf       	out	0x3d, r28	; 61
    3fe4:	8f 83       	std	Y+7, r24	; 0x07
    3fe6:	68 87       	std	Y+8, r22	; 0x08
	error_state_t Local_ErrorState = R_OK;
    3fe8:	81 e0       	ldi	r24, 0x01	; 1
    3fea:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Address = 0;
    3fec:	19 82       	std	Y+1, r1	; 0x01
	Local_u8SetPositionY = Copy_u8Ypos;
    3fee:	88 85       	ldd	r24, Y+8	; 0x08
    3ff0:	80 93 c7 01 	sts	0x01C7, r24
	Local_u8SetPositionX = Copy_u8Xpos;
    3ff4:	8f 81       	ldd	r24, Y+7	; 0x07
    3ff6:	80 93 c6 01 	sts	0x01C6, r24

	// Array to store row addresses
	u8 RowAddresses[] = {CLCD_ROW_ADDRESS_0, CLCD_ROW_ADDRESS_1, CLCD_ROW_ADDRESS_2, CLCD_ROW_ADDRESS_3};
    3ffa:	1b 82       	std	Y+3, r1	; 0x03
    3ffc:	80 e4       	ldi	r24, 0x40	; 64
    3ffe:	8c 83       	std	Y+4, r24	; 0x04
    4000:	84 e1       	ldi	r24, 0x14	; 20
    4002:	8d 83       	std	Y+5, r24	; 0x05
    4004:	84 e5       	ldi	r24, 0x54	; 84
    4006:	8e 83       	std	Y+6, r24	; 0x06

	// Check if Copy_u8Xpos is within a valid range (0-3)
	if (Copy_u8Xpos <= CLCD_ROW_NUM)
    4008:	8f 81       	ldd	r24, Y+7	; 0x07
    400a:	84 30       	cpi	r24, 0x04	; 4
    400c:	88 f4       	brcc	.+34     	; 0x4030 <HCLCD_GoToXY+0x60>
	{
		// Calculate the LCD address based on row and column
		Local_u8Address = RowAddresses[Copy_u8Xpos] + Copy_u8Ypos;
    400e:	8f 81       	ldd	r24, Y+7	; 0x07
    4010:	28 2f       	mov	r18, r24
    4012:	30 e0       	ldi	r19, 0x00	; 0
    4014:	ce 01       	movw	r24, r28
    4016:	03 96       	adiw	r24, 0x03	; 3
    4018:	fc 01       	movw	r30, r24
    401a:	e2 0f       	add	r30, r18
    401c:	f3 1f       	adc	r31, r19
    401e:	90 81       	ld	r25, Z
    4020:	88 85       	ldd	r24, Y+8	; 0x08
    4022:	89 0f       	add	r24, r25
    4024:	89 83       	std	Y+1, r24	; 0x01

		// Set the cursor position on the LCD
		HCLCD_SendCommand(Local_u8Address | CLCD_CURSOR_POSITION_CMD); // Add 0x80 to set the cursor position command
    4026:	89 81       	ldd	r24, Y+1	; 0x01
    4028:	80 68       	ori	r24, 0x80	; 128
    402a:	0e 94 11 1d 	call	0x3a22	; 0x3a22 <HCLCD_SendCommand>
    402e:	01 c0       	rjmp	.+2      	; 0x4032 <HCLCD_GoToXY+0x62>
	}
	else
	{
		// Invalid row value, set an error state
		Local_ErrorState = R_NOK;
    4030:	1a 82       	std	Y+2, r1	; 0x02
	}

	return Local_ErrorState;
    4032:	8a 81       	ldd	r24, Y+2	; 0x02
}
    4034:	28 96       	adiw	r28, 0x08	; 8
    4036:	0f b6       	in	r0, 0x3f	; 63
    4038:	f8 94       	cli
    403a:	de bf       	out	0x3e, r29	; 62
    403c:	0f be       	out	0x3f, r0	; 63
    403e:	cd bf       	out	0x3d, r28	; 61
    4040:	cf 91       	pop	r28
    4042:	df 91       	pop	r29
    4044:	08 95       	ret

00004046 <CLCD_CurrentPosition>:


/********************* Static Functions *************************/

static void CLCD_CurrentPosition(void)
{
    4046:	df 93       	push	r29
    4048:	cf 93       	push	r28
    404a:	cd b7       	in	r28, 0x3d	; 61
    404c:	de b7       	in	r29, 0x3e	; 62
	if(Local_u8SetPositionY>CLCD_COL_NUM)
    404e:	80 91 c7 01 	lds	r24, 0x01C7
    4052:	84 31       	cpi	r24, 0x14	; 20
    4054:	a0 f0       	brcs	.+40     	; 0x407e <CLCD_CurrentPosition+0x38>
	{
		Local_u8SetPositionX++;
    4056:	80 91 c6 01 	lds	r24, 0x01C6
    405a:	8f 5f       	subi	r24, 0xFF	; 255
    405c:	80 93 c6 01 	sts	0x01C6, r24
		if(Local_u8SetPositionX>CLCD_ROW_NUM)
    4060:	80 91 c6 01 	lds	r24, 0x01C6
    4064:	84 30       	cpi	r24, 0x04	; 4
    4066:	10 f0       	brcs	.+4      	; 0x406c <CLCD_CurrentPosition+0x26>
		{
			Local_u8SetPositionX = X_INITIAL_POSITION;
    4068:	10 92 c6 01 	sts	0x01C6, r1
		}
		Local_u8SetPositionY = Y_INITIAL_POSITION;
    406c:	10 92 c7 01 	sts	0x01C7, r1
		HCLCD_GoToXY(Local_u8SetPositionX,Local_u8SetPositionY);
    4070:	80 91 c6 01 	lds	r24, 0x01C6
    4074:	90 91 c7 01 	lds	r25, 0x01C7
    4078:	69 2f       	mov	r22, r25
    407a:	0e 94 e8 1f 	call	0x3fd0	; 0x3fd0 <HCLCD_GoToXY>
	}
	Local_u8SetPositionY++;
    407e:	80 91 c7 01 	lds	r24, 0x01C7
    4082:	8f 5f       	subi	r24, 0xFF	; 255
    4084:	80 93 c7 01 	sts	0x01C7, r24
}
    4088:	cf 91       	pop	r28
    408a:	df 91       	pop	r29
    408c:	08 95       	ret

0000408e <H_LCD_void_latchByte>:


static void H_LCD_void_latchByte(u8 copy_u8Byte)
{
    408e:	df 93       	push	r29
    4090:	cf 93       	push	r28
    4092:	cd b7       	in	r28, 0x3d	; 61
    4094:	de b7       	in	r29, 0x3e	; 62
    4096:	e9 97       	sbiw	r28, 0x39	; 57
    4098:	0f b6       	in	r0, 0x3f	; 63
    409a:	f8 94       	cli
    409c:	de bf       	out	0x3e, r29	; 62
    409e:	0f be       	out	0x3f, r0	; 63
    40a0:	cd bf       	out	0x3d, r28	; 61
    40a2:	89 af       	std	Y+57, r24	; 0x39
#if CLCD_MODE == _4_BIT_MODE
	/* Send Command To Data Pin */
	MDIO_SetPinValue(CLCD_DATA_PORT, CLCD_DATA_4_PIN0, GET_BIT(copy_u8Byte,4));
    40a4:	89 ad       	ldd	r24, Y+57	; 0x39
    40a6:	82 95       	swap	r24
    40a8:	8f 70       	andi	r24, 0x0F	; 15
    40aa:	98 2f       	mov	r25, r24
    40ac:	91 70       	andi	r25, 0x01	; 1
    40ae:	81 e0       	ldi	r24, 0x01	; 1
    40b0:	60 e0       	ldi	r22, 0x00	; 0
    40b2:	49 2f       	mov	r20, r25
    40b4:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <MDIO_SetPinValue>
	MDIO_SetPinValue(CLCD_DATA_PORT, CLCD_DATA_4_PIN1, GET_BIT(copy_u8Byte,5));
    40b8:	89 ad       	ldd	r24, Y+57	; 0x39
    40ba:	82 95       	swap	r24
    40bc:	86 95       	lsr	r24
    40be:	87 70       	andi	r24, 0x07	; 7
    40c0:	98 2f       	mov	r25, r24
    40c2:	91 70       	andi	r25, 0x01	; 1
    40c4:	81 e0       	ldi	r24, 0x01	; 1
    40c6:	61 e0       	ldi	r22, 0x01	; 1
    40c8:	49 2f       	mov	r20, r25
    40ca:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <MDIO_SetPinValue>
	MDIO_SetPinValue(CLCD_DATA_PORT, CLCD_DATA_4_PIN2, GET_BIT(copy_u8Byte,6));
    40ce:	89 ad       	ldd	r24, Y+57	; 0x39
    40d0:	82 95       	swap	r24
    40d2:	86 95       	lsr	r24
    40d4:	86 95       	lsr	r24
    40d6:	83 70       	andi	r24, 0x03	; 3
    40d8:	98 2f       	mov	r25, r24
    40da:	91 70       	andi	r25, 0x01	; 1
    40dc:	81 e0       	ldi	r24, 0x01	; 1
    40de:	62 e0       	ldi	r22, 0x02	; 2
    40e0:	49 2f       	mov	r20, r25
    40e2:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <MDIO_SetPinValue>
	MDIO_SetPinValue(CLCD_DATA_PORT, CLCD_DATA_4_PIN3, GET_BIT(copy_u8Byte,7));
    40e6:	89 ad       	ldd	r24, Y+57	; 0x39
    40e8:	98 2f       	mov	r25, r24
    40ea:	99 1f       	adc	r25, r25
    40ec:	99 27       	eor	r25, r25
    40ee:	99 1f       	adc	r25, r25
    40f0:	81 e0       	ldi	r24, 0x01	; 1
    40f2:	64 e0       	ldi	r22, 0x04	; 4
    40f4:	49 2f       	mov	r20, r25
    40f6:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <MDIO_SetPinValue>


	/* Enable CLCD */
	MDIO_SetPinValue(CLCD_CTRL_PORT, CLCD_EN_PIN, DIO_u8PIN_HIGH);
    40fa:	80 e0       	ldi	r24, 0x00	; 0
    40fc:	62 e0       	ldi	r22, 0x02	; 2
    40fe:	41 e0       	ldi	r20, 0x01	; 1
    4100:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <MDIO_SetPinValue>
    4104:	80 e0       	ldi	r24, 0x00	; 0
    4106:	90 e0       	ldi	r25, 0x00	; 0
    4108:	a0 e0       	ldi	r26, 0x00	; 0
    410a:	b0 e4       	ldi	r27, 0x40	; 64
    410c:	8d ab       	std	Y+53, r24	; 0x35
    410e:	9e ab       	std	Y+54, r25	; 0x36
    4110:	af ab       	std	Y+55, r26	; 0x37
    4112:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4114:	6d a9       	ldd	r22, Y+53	; 0x35
    4116:	7e a9       	ldd	r23, Y+54	; 0x36
    4118:	8f a9       	ldd	r24, Y+55	; 0x37
    411a:	98 ad       	ldd	r25, Y+56	; 0x38
    411c:	20 e0       	ldi	r18, 0x00	; 0
    411e:	30 e0       	ldi	r19, 0x00	; 0
    4120:	4a e7       	ldi	r20, 0x7A	; 122
    4122:	55 e4       	ldi	r21, 0x45	; 69
    4124:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4128:	dc 01       	movw	r26, r24
    412a:	cb 01       	movw	r24, r22
    412c:	89 ab       	std	Y+49, r24	; 0x31
    412e:	9a ab       	std	Y+50, r25	; 0x32
    4130:	ab ab       	std	Y+51, r26	; 0x33
    4132:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4134:	69 a9       	ldd	r22, Y+49	; 0x31
    4136:	7a a9       	ldd	r23, Y+50	; 0x32
    4138:	8b a9       	ldd	r24, Y+51	; 0x33
    413a:	9c a9       	ldd	r25, Y+52	; 0x34
    413c:	20 e0       	ldi	r18, 0x00	; 0
    413e:	30 e0       	ldi	r19, 0x00	; 0
    4140:	40 e8       	ldi	r20, 0x80	; 128
    4142:	5f e3       	ldi	r21, 0x3F	; 63
    4144:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4148:	88 23       	and	r24, r24
    414a:	2c f4       	brge	.+10     	; 0x4156 <H_LCD_void_latchByte+0xc8>
		__ticks = 1;
    414c:	81 e0       	ldi	r24, 0x01	; 1
    414e:	90 e0       	ldi	r25, 0x00	; 0
    4150:	98 ab       	std	Y+48, r25	; 0x30
    4152:	8f a7       	std	Y+47, r24	; 0x2f
    4154:	3f c0       	rjmp	.+126    	; 0x41d4 <H_LCD_void_latchByte+0x146>
	else if (__tmp > 65535)
    4156:	69 a9       	ldd	r22, Y+49	; 0x31
    4158:	7a a9       	ldd	r23, Y+50	; 0x32
    415a:	8b a9       	ldd	r24, Y+51	; 0x33
    415c:	9c a9       	ldd	r25, Y+52	; 0x34
    415e:	20 e0       	ldi	r18, 0x00	; 0
    4160:	3f ef       	ldi	r19, 0xFF	; 255
    4162:	4f e7       	ldi	r20, 0x7F	; 127
    4164:	57 e4       	ldi	r21, 0x47	; 71
    4166:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    416a:	18 16       	cp	r1, r24
    416c:	4c f5       	brge	.+82     	; 0x41c0 <H_LCD_void_latchByte+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    416e:	6d a9       	ldd	r22, Y+53	; 0x35
    4170:	7e a9       	ldd	r23, Y+54	; 0x36
    4172:	8f a9       	ldd	r24, Y+55	; 0x37
    4174:	98 ad       	ldd	r25, Y+56	; 0x38
    4176:	20 e0       	ldi	r18, 0x00	; 0
    4178:	30 e0       	ldi	r19, 0x00	; 0
    417a:	40 e2       	ldi	r20, 0x20	; 32
    417c:	51 e4       	ldi	r21, 0x41	; 65
    417e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4182:	dc 01       	movw	r26, r24
    4184:	cb 01       	movw	r24, r22
    4186:	bc 01       	movw	r22, r24
    4188:	cd 01       	movw	r24, r26
    418a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    418e:	dc 01       	movw	r26, r24
    4190:	cb 01       	movw	r24, r22
    4192:	98 ab       	std	Y+48, r25	; 0x30
    4194:	8f a7       	std	Y+47, r24	; 0x2f
    4196:	0f c0       	rjmp	.+30     	; 0x41b6 <H_LCD_void_latchByte+0x128>
    4198:	80 e9       	ldi	r24, 0x90	; 144
    419a:	91 e0       	ldi	r25, 0x01	; 1
    419c:	9e a7       	std	Y+46, r25	; 0x2e
    419e:	8d a7       	std	Y+45, r24	; 0x2d
    41a0:	8d a5       	ldd	r24, Y+45	; 0x2d
    41a2:	9e a5       	ldd	r25, Y+46	; 0x2e
    41a4:	01 97       	sbiw	r24, 0x01	; 1
    41a6:	f1 f7       	brne	.-4      	; 0x41a4 <H_LCD_void_latchByte+0x116>
    41a8:	9e a7       	std	Y+46, r25	; 0x2e
    41aa:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41ac:	8f a5       	ldd	r24, Y+47	; 0x2f
    41ae:	98 a9       	ldd	r25, Y+48	; 0x30
    41b0:	01 97       	sbiw	r24, 0x01	; 1
    41b2:	98 ab       	std	Y+48, r25	; 0x30
    41b4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41b6:	8f a5       	ldd	r24, Y+47	; 0x2f
    41b8:	98 a9       	ldd	r25, Y+48	; 0x30
    41ba:	00 97       	sbiw	r24, 0x00	; 0
    41bc:	69 f7       	brne	.-38     	; 0x4198 <H_LCD_void_latchByte+0x10a>
    41be:	14 c0       	rjmp	.+40     	; 0x41e8 <H_LCD_void_latchByte+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41c0:	69 a9       	ldd	r22, Y+49	; 0x31
    41c2:	7a a9       	ldd	r23, Y+50	; 0x32
    41c4:	8b a9       	ldd	r24, Y+51	; 0x33
    41c6:	9c a9       	ldd	r25, Y+52	; 0x34
    41c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41cc:	dc 01       	movw	r26, r24
    41ce:	cb 01       	movw	r24, r22
    41d0:	98 ab       	std	Y+48, r25	; 0x30
    41d2:	8f a7       	std	Y+47, r24	; 0x2f
    41d4:	8f a5       	ldd	r24, Y+47	; 0x2f
    41d6:	98 a9       	ldd	r25, Y+48	; 0x30
    41d8:	9c a7       	std	Y+44, r25	; 0x2c
    41da:	8b a7       	std	Y+43, r24	; 0x2b
    41dc:	8b a5       	ldd	r24, Y+43	; 0x2b
    41de:	9c a5       	ldd	r25, Y+44	; 0x2c
    41e0:	01 97       	sbiw	r24, 0x01	; 1
    41e2:	f1 f7       	brne	.-4      	; 0x41e0 <H_LCD_void_latchByte+0x152>
    41e4:	9c a7       	std	Y+44, r25	; 0x2c
    41e6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	/* Disable CLCD */
	MDIO_SetPinValue(CLCD_CTRL_PORT, CLCD_EN_PIN, DIO_u8PIN_LOW);
    41e8:	80 e0       	ldi	r24, 0x00	; 0
    41ea:	62 e0       	ldi	r22, 0x02	; 2
    41ec:	40 e0       	ldi	r20, 0x00	; 0
    41ee:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <MDIO_SetPinValue>
    41f2:	80 e0       	ldi	r24, 0x00	; 0
    41f4:	90 e0       	ldi	r25, 0x00	; 0
    41f6:	a0 ea       	ldi	r26, 0xA0	; 160
    41f8:	b0 e4       	ldi	r27, 0x40	; 64
    41fa:	8f a3       	std	Y+39, r24	; 0x27
    41fc:	98 a7       	std	Y+40, r25	; 0x28
    41fe:	a9 a7       	std	Y+41, r26	; 0x29
    4200:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4202:	6f a1       	ldd	r22, Y+39	; 0x27
    4204:	78 a5       	ldd	r23, Y+40	; 0x28
    4206:	89 a5       	ldd	r24, Y+41	; 0x29
    4208:	9a a5       	ldd	r25, Y+42	; 0x2a
    420a:	20 e0       	ldi	r18, 0x00	; 0
    420c:	30 e0       	ldi	r19, 0x00	; 0
    420e:	4a e7       	ldi	r20, 0x7A	; 122
    4210:	55 e4       	ldi	r21, 0x45	; 69
    4212:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4216:	dc 01       	movw	r26, r24
    4218:	cb 01       	movw	r24, r22
    421a:	8b a3       	std	Y+35, r24	; 0x23
    421c:	9c a3       	std	Y+36, r25	; 0x24
    421e:	ad a3       	std	Y+37, r26	; 0x25
    4220:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4222:	6b a1       	ldd	r22, Y+35	; 0x23
    4224:	7c a1       	ldd	r23, Y+36	; 0x24
    4226:	8d a1       	ldd	r24, Y+37	; 0x25
    4228:	9e a1       	ldd	r25, Y+38	; 0x26
    422a:	20 e0       	ldi	r18, 0x00	; 0
    422c:	30 e0       	ldi	r19, 0x00	; 0
    422e:	40 e8       	ldi	r20, 0x80	; 128
    4230:	5f e3       	ldi	r21, 0x3F	; 63
    4232:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4236:	88 23       	and	r24, r24
    4238:	2c f4       	brge	.+10     	; 0x4244 <H_LCD_void_latchByte+0x1b6>
		__ticks = 1;
    423a:	81 e0       	ldi	r24, 0x01	; 1
    423c:	90 e0       	ldi	r25, 0x00	; 0
    423e:	9a a3       	std	Y+34, r25	; 0x22
    4240:	89 a3       	std	Y+33, r24	; 0x21
    4242:	3f c0       	rjmp	.+126    	; 0x42c2 <H_LCD_void_latchByte+0x234>
	else if (__tmp > 65535)
    4244:	6b a1       	ldd	r22, Y+35	; 0x23
    4246:	7c a1       	ldd	r23, Y+36	; 0x24
    4248:	8d a1       	ldd	r24, Y+37	; 0x25
    424a:	9e a1       	ldd	r25, Y+38	; 0x26
    424c:	20 e0       	ldi	r18, 0x00	; 0
    424e:	3f ef       	ldi	r19, 0xFF	; 255
    4250:	4f e7       	ldi	r20, 0x7F	; 127
    4252:	57 e4       	ldi	r21, 0x47	; 71
    4254:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4258:	18 16       	cp	r1, r24
    425a:	4c f5       	brge	.+82     	; 0x42ae <H_LCD_void_latchByte+0x220>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    425c:	6f a1       	ldd	r22, Y+39	; 0x27
    425e:	78 a5       	ldd	r23, Y+40	; 0x28
    4260:	89 a5       	ldd	r24, Y+41	; 0x29
    4262:	9a a5       	ldd	r25, Y+42	; 0x2a
    4264:	20 e0       	ldi	r18, 0x00	; 0
    4266:	30 e0       	ldi	r19, 0x00	; 0
    4268:	40 e2       	ldi	r20, 0x20	; 32
    426a:	51 e4       	ldi	r21, 0x41	; 65
    426c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4270:	dc 01       	movw	r26, r24
    4272:	cb 01       	movw	r24, r22
    4274:	bc 01       	movw	r22, r24
    4276:	cd 01       	movw	r24, r26
    4278:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    427c:	dc 01       	movw	r26, r24
    427e:	cb 01       	movw	r24, r22
    4280:	9a a3       	std	Y+34, r25	; 0x22
    4282:	89 a3       	std	Y+33, r24	; 0x21
    4284:	0f c0       	rjmp	.+30     	; 0x42a4 <H_LCD_void_latchByte+0x216>
    4286:	80 e9       	ldi	r24, 0x90	; 144
    4288:	91 e0       	ldi	r25, 0x01	; 1
    428a:	98 a3       	std	Y+32, r25	; 0x20
    428c:	8f 8f       	std	Y+31, r24	; 0x1f
    428e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4290:	98 a1       	ldd	r25, Y+32	; 0x20
    4292:	01 97       	sbiw	r24, 0x01	; 1
    4294:	f1 f7       	brne	.-4      	; 0x4292 <H_LCD_void_latchByte+0x204>
    4296:	98 a3       	std	Y+32, r25	; 0x20
    4298:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    429a:	89 a1       	ldd	r24, Y+33	; 0x21
    429c:	9a a1       	ldd	r25, Y+34	; 0x22
    429e:	01 97       	sbiw	r24, 0x01	; 1
    42a0:	9a a3       	std	Y+34, r25	; 0x22
    42a2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    42a4:	89 a1       	ldd	r24, Y+33	; 0x21
    42a6:	9a a1       	ldd	r25, Y+34	; 0x22
    42a8:	00 97       	sbiw	r24, 0x00	; 0
    42aa:	69 f7       	brne	.-38     	; 0x4286 <H_LCD_void_latchByte+0x1f8>
    42ac:	14 c0       	rjmp	.+40     	; 0x42d6 <H_LCD_void_latchByte+0x248>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    42ae:	6b a1       	ldd	r22, Y+35	; 0x23
    42b0:	7c a1       	ldd	r23, Y+36	; 0x24
    42b2:	8d a1       	ldd	r24, Y+37	; 0x25
    42b4:	9e a1       	ldd	r25, Y+38	; 0x26
    42b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42ba:	dc 01       	movw	r26, r24
    42bc:	cb 01       	movw	r24, r22
    42be:	9a a3       	std	Y+34, r25	; 0x22
    42c0:	89 a3       	std	Y+33, r24	; 0x21
    42c2:	89 a1       	ldd	r24, Y+33	; 0x21
    42c4:	9a a1       	ldd	r25, Y+34	; 0x22
    42c6:	9e 8f       	std	Y+30, r25	; 0x1e
    42c8:	8d 8f       	std	Y+29, r24	; 0x1d
    42ca:	8d 8d       	ldd	r24, Y+29	; 0x1d
    42cc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    42ce:	01 97       	sbiw	r24, 0x01	; 1
    42d0:	f1 f7       	brne	.-4      	; 0x42ce <H_LCD_void_latchByte+0x240>
    42d2:	9e 8f       	std	Y+30, r25	; 0x1e
    42d4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);
	MDIO_SetPinValue(CLCD_DATA_PORT, CLCD_DATA_4_PIN0, GET_BIT(copy_u8Byte,0));
    42d6:	89 ad       	ldd	r24, Y+57	; 0x39
    42d8:	98 2f       	mov	r25, r24
    42da:	91 70       	andi	r25, 0x01	; 1
    42dc:	81 e0       	ldi	r24, 0x01	; 1
    42de:	60 e0       	ldi	r22, 0x00	; 0
    42e0:	49 2f       	mov	r20, r25
    42e2:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <MDIO_SetPinValue>
	MDIO_SetPinValue(CLCD_DATA_PORT, CLCD_DATA_4_PIN1, GET_BIT(copy_u8Byte,1));
    42e6:	89 ad       	ldd	r24, Y+57	; 0x39
    42e8:	86 95       	lsr	r24
    42ea:	98 2f       	mov	r25, r24
    42ec:	91 70       	andi	r25, 0x01	; 1
    42ee:	81 e0       	ldi	r24, 0x01	; 1
    42f0:	61 e0       	ldi	r22, 0x01	; 1
    42f2:	49 2f       	mov	r20, r25
    42f4:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <MDIO_SetPinValue>
	MDIO_SetPinValue(CLCD_DATA_PORT, CLCD_DATA_4_PIN2, GET_BIT(copy_u8Byte,2));
    42f8:	89 ad       	ldd	r24, Y+57	; 0x39
    42fa:	86 95       	lsr	r24
    42fc:	86 95       	lsr	r24
    42fe:	98 2f       	mov	r25, r24
    4300:	91 70       	andi	r25, 0x01	; 1
    4302:	81 e0       	ldi	r24, 0x01	; 1
    4304:	62 e0       	ldi	r22, 0x02	; 2
    4306:	49 2f       	mov	r20, r25
    4308:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <MDIO_SetPinValue>
	MDIO_SetPinValue(CLCD_DATA_PORT, CLCD_DATA_4_PIN3, GET_BIT(copy_u8Byte,3));
    430c:	89 ad       	ldd	r24, Y+57	; 0x39
    430e:	86 95       	lsr	r24
    4310:	86 95       	lsr	r24
    4312:	86 95       	lsr	r24
    4314:	98 2f       	mov	r25, r24
    4316:	91 70       	andi	r25, 0x01	; 1
    4318:	81 e0       	ldi	r24, 0x01	; 1
    431a:	64 e0       	ldi	r22, 0x04	; 4
    431c:	49 2f       	mov	r20, r25
    431e:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <MDIO_SetPinValue>
	/* Enable CLCD */
	MDIO_SetPinValue(CLCD_CTRL_PORT, CLCD_EN_PIN, DIO_u8PIN_HIGH);
    4322:	80 e0       	ldi	r24, 0x00	; 0
    4324:	62 e0       	ldi	r22, 0x02	; 2
    4326:	41 e0       	ldi	r20, 0x01	; 1
    4328:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <MDIO_SetPinValue>
    432c:	80 e0       	ldi	r24, 0x00	; 0
    432e:	90 e0       	ldi	r25, 0x00	; 0
    4330:	a0 e0       	ldi	r26, 0x00	; 0
    4332:	b0 e4       	ldi	r27, 0x40	; 64
    4334:	89 8f       	std	Y+25, r24	; 0x19
    4336:	9a 8f       	std	Y+26, r25	; 0x1a
    4338:	ab 8f       	std	Y+27, r26	; 0x1b
    433a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    433c:	69 8d       	ldd	r22, Y+25	; 0x19
    433e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4340:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4342:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4344:	20 e0       	ldi	r18, 0x00	; 0
    4346:	30 e0       	ldi	r19, 0x00	; 0
    4348:	4a e7       	ldi	r20, 0x7A	; 122
    434a:	55 e4       	ldi	r21, 0x45	; 69
    434c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4350:	dc 01       	movw	r26, r24
    4352:	cb 01       	movw	r24, r22
    4354:	8d 8b       	std	Y+21, r24	; 0x15
    4356:	9e 8b       	std	Y+22, r25	; 0x16
    4358:	af 8b       	std	Y+23, r26	; 0x17
    435a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    435c:	6d 89       	ldd	r22, Y+21	; 0x15
    435e:	7e 89       	ldd	r23, Y+22	; 0x16
    4360:	8f 89       	ldd	r24, Y+23	; 0x17
    4362:	98 8d       	ldd	r25, Y+24	; 0x18
    4364:	20 e0       	ldi	r18, 0x00	; 0
    4366:	30 e0       	ldi	r19, 0x00	; 0
    4368:	40 e8       	ldi	r20, 0x80	; 128
    436a:	5f e3       	ldi	r21, 0x3F	; 63
    436c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4370:	88 23       	and	r24, r24
    4372:	2c f4       	brge	.+10     	; 0x437e <H_LCD_void_latchByte+0x2f0>
		__ticks = 1;
    4374:	81 e0       	ldi	r24, 0x01	; 1
    4376:	90 e0       	ldi	r25, 0x00	; 0
    4378:	9c 8b       	std	Y+20, r25	; 0x14
    437a:	8b 8b       	std	Y+19, r24	; 0x13
    437c:	3f c0       	rjmp	.+126    	; 0x43fc <H_LCD_void_latchByte+0x36e>
	else if (__tmp > 65535)
    437e:	6d 89       	ldd	r22, Y+21	; 0x15
    4380:	7e 89       	ldd	r23, Y+22	; 0x16
    4382:	8f 89       	ldd	r24, Y+23	; 0x17
    4384:	98 8d       	ldd	r25, Y+24	; 0x18
    4386:	20 e0       	ldi	r18, 0x00	; 0
    4388:	3f ef       	ldi	r19, 0xFF	; 255
    438a:	4f e7       	ldi	r20, 0x7F	; 127
    438c:	57 e4       	ldi	r21, 0x47	; 71
    438e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4392:	18 16       	cp	r1, r24
    4394:	4c f5       	brge	.+82     	; 0x43e8 <H_LCD_void_latchByte+0x35a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4396:	69 8d       	ldd	r22, Y+25	; 0x19
    4398:	7a 8d       	ldd	r23, Y+26	; 0x1a
    439a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    439c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    439e:	20 e0       	ldi	r18, 0x00	; 0
    43a0:	30 e0       	ldi	r19, 0x00	; 0
    43a2:	40 e2       	ldi	r20, 0x20	; 32
    43a4:	51 e4       	ldi	r21, 0x41	; 65
    43a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43aa:	dc 01       	movw	r26, r24
    43ac:	cb 01       	movw	r24, r22
    43ae:	bc 01       	movw	r22, r24
    43b0:	cd 01       	movw	r24, r26
    43b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43b6:	dc 01       	movw	r26, r24
    43b8:	cb 01       	movw	r24, r22
    43ba:	9c 8b       	std	Y+20, r25	; 0x14
    43bc:	8b 8b       	std	Y+19, r24	; 0x13
    43be:	0f c0       	rjmp	.+30     	; 0x43de <H_LCD_void_latchByte+0x350>
    43c0:	80 e9       	ldi	r24, 0x90	; 144
    43c2:	91 e0       	ldi	r25, 0x01	; 1
    43c4:	9a 8b       	std	Y+18, r25	; 0x12
    43c6:	89 8b       	std	Y+17, r24	; 0x11
    43c8:	89 89       	ldd	r24, Y+17	; 0x11
    43ca:	9a 89       	ldd	r25, Y+18	; 0x12
    43cc:	01 97       	sbiw	r24, 0x01	; 1
    43ce:	f1 f7       	brne	.-4      	; 0x43cc <H_LCD_void_latchByte+0x33e>
    43d0:	9a 8b       	std	Y+18, r25	; 0x12
    43d2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    43d4:	8b 89       	ldd	r24, Y+19	; 0x13
    43d6:	9c 89       	ldd	r25, Y+20	; 0x14
    43d8:	01 97       	sbiw	r24, 0x01	; 1
    43da:	9c 8b       	std	Y+20, r25	; 0x14
    43dc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43de:	8b 89       	ldd	r24, Y+19	; 0x13
    43e0:	9c 89       	ldd	r25, Y+20	; 0x14
    43e2:	00 97       	sbiw	r24, 0x00	; 0
    43e4:	69 f7       	brne	.-38     	; 0x43c0 <H_LCD_void_latchByte+0x332>
    43e6:	14 c0       	rjmp	.+40     	; 0x4410 <H_LCD_void_latchByte+0x382>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43e8:	6d 89       	ldd	r22, Y+21	; 0x15
    43ea:	7e 89       	ldd	r23, Y+22	; 0x16
    43ec:	8f 89       	ldd	r24, Y+23	; 0x17
    43ee:	98 8d       	ldd	r25, Y+24	; 0x18
    43f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43f4:	dc 01       	movw	r26, r24
    43f6:	cb 01       	movw	r24, r22
    43f8:	9c 8b       	std	Y+20, r25	; 0x14
    43fa:	8b 8b       	std	Y+19, r24	; 0x13
    43fc:	8b 89       	ldd	r24, Y+19	; 0x13
    43fe:	9c 89       	ldd	r25, Y+20	; 0x14
    4400:	98 8b       	std	Y+16, r25	; 0x10
    4402:	8f 87       	std	Y+15, r24	; 0x0f
    4404:	8f 85       	ldd	r24, Y+15	; 0x0f
    4406:	98 89       	ldd	r25, Y+16	; 0x10
    4408:	01 97       	sbiw	r24, 0x01	; 1
    440a:	f1 f7       	brne	.-4      	; 0x4408 <H_LCD_void_latchByte+0x37a>
    440c:	98 8b       	std	Y+16, r25	; 0x10
    440e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	/* Disable CLCD */
	MDIO_SetPinValue(CLCD_CTRL_PORT, CLCD_EN_PIN, DIO_u8PIN_LOW);
    4410:	80 e0       	ldi	r24, 0x00	; 0
    4412:	62 e0       	ldi	r22, 0x02	; 2
    4414:	40 e0       	ldi	r20, 0x00	; 0
    4416:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <MDIO_SetPinValue>
    441a:	80 e0       	ldi	r24, 0x00	; 0
    441c:	90 e0       	ldi	r25, 0x00	; 0
    441e:	a0 ea       	ldi	r26, 0xA0	; 160
    4420:	b0 e4       	ldi	r27, 0x40	; 64
    4422:	8b 87       	std	Y+11, r24	; 0x0b
    4424:	9c 87       	std	Y+12, r25	; 0x0c
    4426:	ad 87       	std	Y+13, r26	; 0x0d
    4428:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    442a:	6b 85       	ldd	r22, Y+11	; 0x0b
    442c:	7c 85       	ldd	r23, Y+12	; 0x0c
    442e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4430:	9e 85       	ldd	r25, Y+14	; 0x0e
    4432:	20 e0       	ldi	r18, 0x00	; 0
    4434:	30 e0       	ldi	r19, 0x00	; 0
    4436:	4a e7       	ldi	r20, 0x7A	; 122
    4438:	55 e4       	ldi	r21, 0x45	; 69
    443a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    443e:	dc 01       	movw	r26, r24
    4440:	cb 01       	movw	r24, r22
    4442:	8f 83       	std	Y+7, r24	; 0x07
    4444:	98 87       	std	Y+8, r25	; 0x08
    4446:	a9 87       	std	Y+9, r26	; 0x09
    4448:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    444a:	6f 81       	ldd	r22, Y+7	; 0x07
    444c:	78 85       	ldd	r23, Y+8	; 0x08
    444e:	89 85       	ldd	r24, Y+9	; 0x09
    4450:	9a 85       	ldd	r25, Y+10	; 0x0a
    4452:	20 e0       	ldi	r18, 0x00	; 0
    4454:	30 e0       	ldi	r19, 0x00	; 0
    4456:	40 e8       	ldi	r20, 0x80	; 128
    4458:	5f e3       	ldi	r21, 0x3F	; 63
    445a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    445e:	88 23       	and	r24, r24
    4460:	2c f4       	brge	.+10     	; 0x446c <H_LCD_void_latchByte+0x3de>
		__ticks = 1;
    4462:	81 e0       	ldi	r24, 0x01	; 1
    4464:	90 e0       	ldi	r25, 0x00	; 0
    4466:	9e 83       	std	Y+6, r25	; 0x06
    4468:	8d 83       	std	Y+5, r24	; 0x05
    446a:	3f c0       	rjmp	.+126    	; 0x44ea <H_LCD_void_latchByte+0x45c>
	else if (__tmp > 65535)
    446c:	6f 81       	ldd	r22, Y+7	; 0x07
    446e:	78 85       	ldd	r23, Y+8	; 0x08
    4470:	89 85       	ldd	r24, Y+9	; 0x09
    4472:	9a 85       	ldd	r25, Y+10	; 0x0a
    4474:	20 e0       	ldi	r18, 0x00	; 0
    4476:	3f ef       	ldi	r19, 0xFF	; 255
    4478:	4f e7       	ldi	r20, 0x7F	; 127
    447a:	57 e4       	ldi	r21, 0x47	; 71
    447c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4480:	18 16       	cp	r1, r24
    4482:	4c f5       	brge	.+82     	; 0x44d6 <H_LCD_void_latchByte+0x448>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4484:	6b 85       	ldd	r22, Y+11	; 0x0b
    4486:	7c 85       	ldd	r23, Y+12	; 0x0c
    4488:	8d 85       	ldd	r24, Y+13	; 0x0d
    448a:	9e 85       	ldd	r25, Y+14	; 0x0e
    448c:	20 e0       	ldi	r18, 0x00	; 0
    448e:	30 e0       	ldi	r19, 0x00	; 0
    4490:	40 e2       	ldi	r20, 0x20	; 32
    4492:	51 e4       	ldi	r21, 0x41	; 65
    4494:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4498:	dc 01       	movw	r26, r24
    449a:	cb 01       	movw	r24, r22
    449c:	bc 01       	movw	r22, r24
    449e:	cd 01       	movw	r24, r26
    44a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44a4:	dc 01       	movw	r26, r24
    44a6:	cb 01       	movw	r24, r22
    44a8:	9e 83       	std	Y+6, r25	; 0x06
    44aa:	8d 83       	std	Y+5, r24	; 0x05
    44ac:	0f c0       	rjmp	.+30     	; 0x44cc <H_LCD_void_latchByte+0x43e>
    44ae:	80 e9       	ldi	r24, 0x90	; 144
    44b0:	91 e0       	ldi	r25, 0x01	; 1
    44b2:	9c 83       	std	Y+4, r25	; 0x04
    44b4:	8b 83       	std	Y+3, r24	; 0x03
    44b6:	8b 81       	ldd	r24, Y+3	; 0x03
    44b8:	9c 81       	ldd	r25, Y+4	; 0x04
    44ba:	01 97       	sbiw	r24, 0x01	; 1
    44bc:	f1 f7       	brne	.-4      	; 0x44ba <H_LCD_void_latchByte+0x42c>
    44be:	9c 83       	std	Y+4, r25	; 0x04
    44c0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44c2:	8d 81       	ldd	r24, Y+5	; 0x05
    44c4:	9e 81       	ldd	r25, Y+6	; 0x06
    44c6:	01 97       	sbiw	r24, 0x01	; 1
    44c8:	9e 83       	std	Y+6, r25	; 0x06
    44ca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44cc:	8d 81       	ldd	r24, Y+5	; 0x05
    44ce:	9e 81       	ldd	r25, Y+6	; 0x06
    44d0:	00 97       	sbiw	r24, 0x00	; 0
    44d2:	69 f7       	brne	.-38     	; 0x44ae <H_LCD_void_latchByte+0x420>
    44d4:	14 c0       	rjmp	.+40     	; 0x44fe <H_LCD_void_latchByte+0x470>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44d6:	6f 81       	ldd	r22, Y+7	; 0x07
    44d8:	78 85       	ldd	r23, Y+8	; 0x08
    44da:	89 85       	ldd	r24, Y+9	; 0x09
    44dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    44de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44e2:	dc 01       	movw	r26, r24
    44e4:	cb 01       	movw	r24, r22
    44e6:	9e 83       	std	Y+6, r25	; 0x06
    44e8:	8d 83       	std	Y+5, r24	; 0x05
    44ea:	8d 81       	ldd	r24, Y+5	; 0x05
    44ec:	9e 81       	ldd	r25, Y+6	; 0x06
    44ee:	9a 83       	std	Y+2, r25	; 0x02
    44f0:	89 83       	std	Y+1, r24	; 0x01
    44f2:	89 81       	ldd	r24, Y+1	; 0x01
    44f4:	9a 81       	ldd	r25, Y+2	; 0x02
    44f6:	01 97       	sbiw	r24, 0x01	; 1
    44f8:	f1 f7       	brne	.-4      	; 0x44f6 <H_LCD_void_latchByte+0x468>
    44fa:	9a 83       	std	Y+2, r25	; 0x02
    44fc:	89 83       	std	Y+1, r24	; 0x01
	MDIO_SetPinValue(CLCD_CTRL_PORT, CLCD_EN_PIN, DIO_u8PIN_LOW);

#else
#warning  Select Correct Mode !!!
#endif
}
    44fe:	e9 96       	adiw	r28, 0x39	; 57
    4500:	0f b6       	in	r0, 0x3f	; 63
    4502:	f8 94       	cli
    4504:	de bf       	out	0x3e, r29	; 62
    4506:	0f be       	out	0x3f, r0	; 63
    4508:	cd bf       	out	0x3d, r28	; 61
    450a:	cf 91       	pop	r28
    450c:	df 91       	pop	r29
    450e:	08 95       	ret

00004510 <main>:

/******* GLOBAL VARIABLE *************/


void main(void)
{
    4510:	df 93       	push	r29
    4512:	cf 93       	push	r28
    4514:	cd b7       	in	r28, 0x3d	; 61
    4516:	de b7       	in	r29, 0x3e	; 62
    4518:	6c 97       	sbiw	r28, 0x1c	; 28
    451a:	0f b6       	in	r0, 0x3f	; 63
    451c:	f8 94       	cli
    451e:	de bf       	out	0x3e, r29	; 62
    4520:	0f be       	out	0x3f, r0	; 63
    4522:	cd bf       	out	0x3d, r28	; 61
	/*** Initialization Section ***/
	MGIE_VoidEnable();
    4524:	0e 94 9d 0b 	call	0x173a	; 0x173a <MGIE_VoidEnable>


	HCLCD_Init();
    4528:	0e 94 4d 1d 	call	0x3a9a	; 0x3a9a <HCLCD_Init>
	HLED_voidInit(LED_BLUE);
    452c:	83 e0       	ldi	r24, 0x03	; 3
    452e:	0e 94 fb 19 	call	0x33f6	; 0x33f6 <HLED_voidInit>
	HLED_voidInit(LED_RED);
    4532:	82 e0       	ldi	r24, 0x02	; 2
    4534:	0e 94 fb 19 	call	0x33f6	; 0x33f6 <HLED_voidInit>
	HLED_voidInit(LED_YELLOW);
    4538:	80 e0       	ldi	r24, 0x00	; 0
    453a:	0e 94 fb 19 	call	0x33f6	; 0x33f6 <HLED_voidInit>


	HCLCD_SendString("Hello");
    453e:	80 e6       	ldi	r24, 0x60	; 96
    4540:	90 e0       	ldi	r25, 0x00	; 0
    4542:	0e 94 17 1e 	call	0x3c2e	; 0x3c2e <HCLCD_SendString>
	HLED_voidTurnOn(LED_BLUE);
    4546:	83 e0       	ldi	r24, 0x03	; 3
    4548:	0e 94 3e 1a 	call	0x347c	; 0x347c <HLED_voidTurnOn>
    454c:	80 e0       	ldi	r24, 0x00	; 0
    454e:	90 e0       	ldi	r25, 0x00	; 0
    4550:	aa ef       	ldi	r26, 0xFA	; 250
    4552:	b3 e4       	ldi	r27, 0x43	; 67
    4554:	89 8f       	std	Y+25, r24	; 0x19
    4556:	9a 8f       	std	Y+26, r25	; 0x1a
    4558:	ab 8f       	std	Y+27, r26	; 0x1b
    455a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    455c:	69 8d       	ldd	r22, Y+25	; 0x19
    455e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4560:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4562:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4564:	20 e0       	ldi	r18, 0x00	; 0
    4566:	30 e0       	ldi	r19, 0x00	; 0
    4568:	4a e7       	ldi	r20, 0x7A	; 122
    456a:	55 e4       	ldi	r21, 0x45	; 69
    456c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4570:	dc 01       	movw	r26, r24
    4572:	cb 01       	movw	r24, r22
    4574:	8d 8b       	std	Y+21, r24	; 0x15
    4576:	9e 8b       	std	Y+22, r25	; 0x16
    4578:	af 8b       	std	Y+23, r26	; 0x17
    457a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    457c:	6d 89       	ldd	r22, Y+21	; 0x15
    457e:	7e 89       	ldd	r23, Y+22	; 0x16
    4580:	8f 89       	ldd	r24, Y+23	; 0x17
    4582:	98 8d       	ldd	r25, Y+24	; 0x18
    4584:	20 e0       	ldi	r18, 0x00	; 0
    4586:	30 e0       	ldi	r19, 0x00	; 0
    4588:	40 e8       	ldi	r20, 0x80	; 128
    458a:	5f e3       	ldi	r21, 0x3F	; 63
    458c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4590:	88 23       	and	r24, r24
    4592:	2c f4       	brge	.+10     	; 0x459e <main+0x8e>
		__ticks = 1;
    4594:	81 e0       	ldi	r24, 0x01	; 1
    4596:	90 e0       	ldi	r25, 0x00	; 0
    4598:	9c 8b       	std	Y+20, r25	; 0x14
    459a:	8b 8b       	std	Y+19, r24	; 0x13
    459c:	3f c0       	rjmp	.+126    	; 0x461c <main+0x10c>
	else if (__tmp > 65535)
    459e:	6d 89       	ldd	r22, Y+21	; 0x15
    45a0:	7e 89       	ldd	r23, Y+22	; 0x16
    45a2:	8f 89       	ldd	r24, Y+23	; 0x17
    45a4:	98 8d       	ldd	r25, Y+24	; 0x18
    45a6:	20 e0       	ldi	r18, 0x00	; 0
    45a8:	3f ef       	ldi	r19, 0xFF	; 255
    45aa:	4f e7       	ldi	r20, 0x7F	; 127
    45ac:	57 e4       	ldi	r21, 0x47	; 71
    45ae:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    45b2:	18 16       	cp	r1, r24
    45b4:	4c f5       	brge	.+82     	; 0x4608 <main+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    45b6:	69 8d       	ldd	r22, Y+25	; 0x19
    45b8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    45ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    45bc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    45be:	20 e0       	ldi	r18, 0x00	; 0
    45c0:	30 e0       	ldi	r19, 0x00	; 0
    45c2:	40 e2       	ldi	r20, 0x20	; 32
    45c4:	51 e4       	ldi	r21, 0x41	; 65
    45c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45ca:	dc 01       	movw	r26, r24
    45cc:	cb 01       	movw	r24, r22
    45ce:	bc 01       	movw	r22, r24
    45d0:	cd 01       	movw	r24, r26
    45d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45d6:	dc 01       	movw	r26, r24
    45d8:	cb 01       	movw	r24, r22
    45da:	9c 8b       	std	Y+20, r25	; 0x14
    45dc:	8b 8b       	std	Y+19, r24	; 0x13
    45de:	0f c0       	rjmp	.+30     	; 0x45fe <main+0xee>
    45e0:	80 e9       	ldi	r24, 0x90	; 144
    45e2:	91 e0       	ldi	r25, 0x01	; 1
    45e4:	9a 8b       	std	Y+18, r25	; 0x12
    45e6:	89 8b       	std	Y+17, r24	; 0x11
    45e8:	89 89       	ldd	r24, Y+17	; 0x11
    45ea:	9a 89       	ldd	r25, Y+18	; 0x12
    45ec:	01 97       	sbiw	r24, 0x01	; 1
    45ee:	f1 f7       	brne	.-4      	; 0x45ec <main+0xdc>
    45f0:	9a 8b       	std	Y+18, r25	; 0x12
    45f2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45f4:	8b 89       	ldd	r24, Y+19	; 0x13
    45f6:	9c 89       	ldd	r25, Y+20	; 0x14
    45f8:	01 97       	sbiw	r24, 0x01	; 1
    45fa:	9c 8b       	std	Y+20, r25	; 0x14
    45fc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    45fe:	8b 89       	ldd	r24, Y+19	; 0x13
    4600:	9c 89       	ldd	r25, Y+20	; 0x14
    4602:	00 97       	sbiw	r24, 0x00	; 0
    4604:	69 f7       	brne	.-38     	; 0x45e0 <main+0xd0>
    4606:	14 c0       	rjmp	.+40     	; 0x4630 <main+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4608:	6d 89       	ldd	r22, Y+21	; 0x15
    460a:	7e 89       	ldd	r23, Y+22	; 0x16
    460c:	8f 89       	ldd	r24, Y+23	; 0x17
    460e:	98 8d       	ldd	r25, Y+24	; 0x18
    4610:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4614:	dc 01       	movw	r26, r24
    4616:	cb 01       	movw	r24, r22
    4618:	9c 8b       	std	Y+20, r25	; 0x14
    461a:	8b 8b       	std	Y+19, r24	; 0x13
    461c:	8b 89       	ldd	r24, Y+19	; 0x13
    461e:	9c 89       	ldd	r25, Y+20	; 0x14
    4620:	98 8b       	std	Y+16, r25	; 0x10
    4622:	8f 87       	std	Y+15, r24	; 0x0f
    4624:	8f 85       	ldd	r24, Y+15	; 0x0f
    4626:	98 89       	ldd	r25, Y+16	; 0x10
    4628:	01 97       	sbiw	r24, 0x01	; 1
    462a:	f1 f7       	brne	.-4      	; 0x4628 <main+0x118>
    462c:	98 8b       	std	Y+16, r25	; 0x10
    462e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(500);
	HLED_voidTurnOff(LED_BLUE);
    4630:	83 e0       	ldi	r24, 0x03	; 3
    4632:	0e 94 81 1a 	call	0x3502	; 0x3502 <HLED_voidTurnOff>

	WDT_voidEnable();
    4636:	0e 94 be 07 	call	0xf7c	; 0xf7c <WDT_voidEnable>
	WDT_voidSleep(WDT_TIME_OUT_2_1_S);
    463a:	87 e0       	ldi	r24, 0x07	; 7
    463c:	0e 94 a5 07 	call	0xf4a	; 0xf4a <WDT_voidSleep>

	while(1)
	{
		HCLCD_SendString("Hello");
    4640:	80 e6       	ldi	r24, 0x60	; 96
    4642:	90 e0       	ldi	r25, 0x00	; 0
    4644:	0e 94 17 1e 	call	0x3c2e	; 0x3c2e <HCLCD_SendString>
    4648:	80 e0       	ldi	r24, 0x00	; 0
    464a:	90 e8       	ldi	r25, 0x80	; 128
    464c:	ab e3       	ldi	r26, 0x3B	; 59
    464e:	b5 e4       	ldi	r27, 0x45	; 69
    4650:	8b 87       	std	Y+11, r24	; 0x0b
    4652:	9c 87       	std	Y+12, r25	; 0x0c
    4654:	ad 87       	std	Y+13, r26	; 0x0d
    4656:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4658:	6b 85       	ldd	r22, Y+11	; 0x0b
    465a:	7c 85       	ldd	r23, Y+12	; 0x0c
    465c:	8d 85       	ldd	r24, Y+13	; 0x0d
    465e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4660:	20 e0       	ldi	r18, 0x00	; 0
    4662:	30 e0       	ldi	r19, 0x00	; 0
    4664:	4a e7       	ldi	r20, 0x7A	; 122
    4666:	55 e4       	ldi	r21, 0x45	; 69
    4668:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    466c:	dc 01       	movw	r26, r24
    466e:	cb 01       	movw	r24, r22
    4670:	8f 83       	std	Y+7, r24	; 0x07
    4672:	98 87       	std	Y+8, r25	; 0x08
    4674:	a9 87       	std	Y+9, r26	; 0x09
    4676:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4678:	6f 81       	ldd	r22, Y+7	; 0x07
    467a:	78 85       	ldd	r23, Y+8	; 0x08
    467c:	89 85       	ldd	r24, Y+9	; 0x09
    467e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4680:	20 e0       	ldi	r18, 0x00	; 0
    4682:	30 e0       	ldi	r19, 0x00	; 0
    4684:	40 e8       	ldi	r20, 0x80	; 128
    4686:	5f e3       	ldi	r21, 0x3F	; 63
    4688:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    468c:	88 23       	and	r24, r24
    468e:	2c f4       	brge	.+10     	; 0x469a <main+0x18a>
		__ticks = 1;
    4690:	81 e0       	ldi	r24, 0x01	; 1
    4692:	90 e0       	ldi	r25, 0x00	; 0
    4694:	9e 83       	std	Y+6, r25	; 0x06
    4696:	8d 83       	std	Y+5, r24	; 0x05
    4698:	3f c0       	rjmp	.+126    	; 0x4718 <main+0x208>
	else if (__tmp > 65535)
    469a:	6f 81       	ldd	r22, Y+7	; 0x07
    469c:	78 85       	ldd	r23, Y+8	; 0x08
    469e:	89 85       	ldd	r24, Y+9	; 0x09
    46a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    46a2:	20 e0       	ldi	r18, 0x00	; 0
    46a4:	3f ef       	ldi	r19, 0xFF	; 255
    46a6:	4f e7       	ldi	r20, 0x7F	; 127
    46a8:	57 e4       	ldi	r21, 0x47	; 71
    46aa:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    46ae:	18 16       	cp	r1, r24
    46b0:	4c f5       	brge	.+82     	; 0x4704 <main+0x1f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    46b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    46b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    46b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    46b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    46ba:	20 e0       	ldi	r18, 0x00	; 0
    46bc:	30 e0       	ldi	r19, 0x00	; 0
    46be:	40 e2       	ldi	r20, 0x20	; 32
    46c0:	51 e4       	ldi	r21, 0x41	; 65
    46c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46c6:	dc 01       	movw	r26, r24
    46c8:	cb 01       	movw	r24, r22
    46ca:	bc 01       	movw	r22, r24
    46cc:	cd 01       	movw	r24, r26
    46ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46d2:	dc 01       	movw	r26, r24
    46d4:	cb 01       	movw	r24, r22
    46d6:	9e 83       	std	Y+6, r25	; 0x06
    46d8:	8d 83       	std	Y+5, r24	; 0x05
    46da:	0f c0       	rjmp	.+30     	; 0x46fa <main+0x1ea>
    46dc:	80 e9       	ldi	r24, 0x90	; 144
    46de:	91 e0       	ldi	r25, 0x01	; 1
    46e0:	9c 83       	std	Y+4, r25	; 0x04
    46e2:	8b 83       	std	Y+3, r24	; 0x03
    46e4:	8b 81       	ldd	r24, Y+3	; 0x03
    46e6:	9c 81       	ldd	r25, Y+4	; 0x04
    46e8:	01 97       	sbiw	r24, 0x01	; 1
    46ea:	f1 f7       	brne	.-4      	; 0x46e8 <main+0x1d8>
    46ec:	9c 83       	std	Y+4, r25	; 0x04
    46ee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    46f0:	8d 81       	ldd	r24, Y+5	; 0x05
    46f2:	9e 81       	ldd	r25, Y+6	; 0x06
    46f4:	01 97       	sbiw	r24, 0x01	; 1
    46f6:	9e 83       	std	Y+6, r25	; 0x06
    46f8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    46fa:	8d 81       	ldd	r24, Y+5	; 0x05
    46fc:	9e 81       	ldd	r25, Y+6	; 0x06
    46fe:	00 97       	sbiw	r24, 0x00	; 0
    4700:	69 f7       	brne	.-38     	; 0x46dc <main+0x1cc>
    4702:	14 c0       	rjmp	.+40     	; 0x472c <main+0x21c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4704:	6f 81       	ldd	r22, Y+7	; 0x07
    4706:	78 85       	ldd	r23, Y+8	; 0x08
    4708:	89 85       	ldd	r24, Y+9	; 0x09
    470a:	9a 85       	ldd	r25, Y+10	; 0x0a
    470c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4710:	dc 01       	movw	r26, r24
    4712:	cb 01       	movw	r24, r22
    4714:	9e 83       	std	Y+6, r25	; 0x06
    4716:	8d 83       	std	Y+5, r24	; 0x05
    4718:	8d 81       	ldd	r24, Y+5	; 0x05
    471a:	9e 81       	ldd	r25, Y+6	; 0x06
    471c:	9a 83       	std	Y+2, r25	; 0x02
    471e:	89 83       	std	Y+1, r24	; 0x01
    4720:	89 81       	ldd	r24, Y+1	; 0x01
    4722:	9a 81       	ldd	r25, Y+2	; 0x02
    4724:	01 97       	sbiw	r24, 0x01	; 1
    4726:	f1 f7       	brne	.-4      	; 0x4724 <main+0x214>
    4728:	9a 83       	std	Y+2, r25	; 0x02
    472a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(3000);
		HCLCD_Clear();
    472c:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <HCLCD_Clear>
		WDT_voidRefresh();
    4730:	0e 94 dd 07 	call	0xfba	; 0xfba <WDT_voidRefresh>
    4734:	85 cf       	rjmp	.-246    	; 0x4640 <main+0x130>

00004736 <__mulsi3>:
    4736:	62 9f       	mul	r22, r18
    4738:	d0 01       	movw	r26, r0
    473a:	73 9f       	mul	r23, r19
    473c:	f0 01       	movw	r30, r0
    473e:	82 9f       	mul	r24, r18
    4740:	e0 0d       	add	r30, r0
    4742:	f1 1d       	adc	r31, r1
    4744:	64 9f       	mul	r22, r20
    4746:	e0 0d       	add	r30, r0
    4748:	f1 1d       	adc	r31, r1
    474a:	92 9f       	mul	r25, r18
    474c:	f0 0d       	add	r31, r0
    474e:	83 9f       	mul	r24, r19
    4750:	f0 0d       	add	r31, r0
    4752:	74 9f       	mul	r23, r20
    4754:	f0 0d       	add	r31, r0
    4756:	65 9f       	mul	r22, r21
    4758:	f0 0d       	add	r31, r0
    475a:	99 27       	eor	r25, r25
    475c:	72 9f       	mul	r23, r18
    475e:	b0 0d       	add	r27, r0
    4760:	e1 1d       	adc	r30, r1
    4762:	f9 1f       	adc	r31, r25
    4764:	63 9f       	mul	r22, r19
    4766:	b0 0d       	add	r27, r0
    4768:	e1 1d       	adc	r30, r1
    476a:	f9 1f       	adc	r31, r25
    476c:	bd 01       	movw	r22, r26
    476e:	cf 01       	movw	r24, r30
    4770:	11 24       	eor	r1, r1
    4772:	08 95       	ret

00004774 <__divmodhi4>:
    4774:	97 fb       	bst	r25, 7
    4776:	09 2e       	mov	r0, r25
    4778:	07 26       	eor	r0, r23
    477a:	0a d0       	rcall	.+20     	; 0x4790 <__divmodhi4_neg1>
    477c:	77 fd       	sbrc	r23, 7
    477e:	04 d0       	rcall	.+8      	; 0x4788 <__divmodhi4_neg2>
    4780:	49 d0       	rcall	.+146    	; 0x4814 <__udivmodhi4>
    4782:	06 d0       	rcall	.+12     	; 0x4790 <__divmodhi4_neg1>
    4784:	00 20       	and	r0, r0
    4786:	1a f4       	brpl	.+6      	; 0x478e <__divmodhi4_exit>

00004788 <__divmodhi4_neg2>:
    4788:	70 95       	com	r23
    478a:	61 95       	neg	r22
    478c:	7f 4f       	sbci	r23, 0xFF	; 255

0000478e <__divmodhi4_exit>:
    478e:	08 95       	ret

00004790 <__divmodhi4_neg1>:
    4790:	f6 f7       	brtc	.-4      	; 0x478e <__divmodhi4_exit>
    4792:	90 95       	com	r25
    4794:	81 95       	neg	r24
    4796:	9f 4f       	sbci	r25, 0xFF	; 255
    4798:	08 95       	ret

0000479a <__udivmodsi4>:
    479a:	a1 e2       	ldi	r26, 0x21	; 33
    479c:	1a 2e       	mov	r1, r26
    479e:	aa 1b       	sub	r26, r26
    47a0:	bb 1b       	sub	r27, r27
    47a2:	fd 01       	movw	r30, r26
    47a4:	0d c0       	rjmp	.+26     	; 0x47c0 <__udivmodsi4_ep>

000047a6 <__udivmodsi4_loop>:
    47a6:	aa 1f       	adc	r26, r26
    47a8:	bb 1f       	adc	r27, r27
    47aa:	ee 1f       	adc	r30, r30
    47ac:	ff 1f       	adc	r31, r31
    47ae:	a2 17       	cp	r26, r18
    47b0:	b3 07       	cpc	r27, r19
    47b2:	e4 07       	cpc	r30, r20
    47b4:	f5 07       	cpc	r31, r21
    47b6:	20 f0       	brcs	.+8      	; 0x47c0 <__udivmodsi4_ep>
    47b8:	a2 1b       	sub	r26, r18
    47ba:	b3 0b       	sbc	r27, r19
    47bc:	e4 0b       	sbc	r30, r20
    47be:	f5 0b       	sbc	r31, r21

000047c0 <__udivmodsi4_ep>:
    47c0:	66 1f       	adc	r22, r22
    47c2:	77 1f       	adc	r23, r23
    47c4:	88 1f       	adc	r24, r24
    47c6:	99 1f       	adc	r25, r25
    47c8:	1a 94       	dec	r1
    47ca:	69 f7       	brne	.-38     	; 0x47a6 <__udivmodsi4_loop>
    47cc:	60 95       	com	r22
    47ce:	70 95       	com	r23
    47d0:	80 95       	com	r24
    47d2:	90 95       	com	r25
    47d4:	9b 01       	movw	r18, r22
    47d6:	ac 01       	movw	r20, r24
    47d8:	bd 01       	movw	r22, r26
    47da:	cf 01       	movw	r24, r30
    47dc:	08 95       	ret

000047de <__divmodsi4>:
    47de:	97 fb       	bst	r25, 7
    47e0:	09 2e       	mov	r0, r25
    47e2:	05 26       	eor	r0, r21
    47e4:	0e d0       	rcall	.+28     	; 0x4802 <__divmodsi4_neg1>
    47e6:	57 fd       	sbrc	r21, 7
    47e8:	04 d0       	rcall	.+8      	; 0x47f2 <__divmodsi4_neg2>
    47ea:	d7 df       	rcall	.-82     	; 0x479a <__udivmodsi4>
    47ec:	0a d0       	rcall	.+20     	; 0x4802 <__divmodsi4_neg1>
    47ee:	00 1c       	adc	r0, r0
    47f0:	38 f4       	brcc	.+14     	; 0x4800 <__divmodsi4_exit>

000047f2 <__divmodsi4_neg2>:
    47f2:	50 95       	com	r21
    47f4:	40 95       	com	r20
    47f6:	30 95       	com	r19
    47f8:	21 95       	neg	r18
    47fa:	3f 4f       	sbci	r19, 0xFF	; 255
    47fc:	4f 4f       	sbci	r20, 0xFF	; 255
    47fe:	5f 4f       	sbci	r21, 0xFF	; 255

00004800 <__divmodsi4_exit>:
    4800:	08 95       	ret

00004802 <__divmodsi4_neg1>:
    4802:	f6 f7       	brtc	.-4      	; 0x4800 <__divmodsi4_exit>
    4804:	90 95       	com	r25
    4806:	80 95       	com	r24
    4808:	70 95       	com	r23
    480a:	61 95       	neg	r22
    480c:	7f 4f       	sbci	r23, 0xFF	; 255
    480e:	8f 4f       	sbci	r24, 0xFF	; 255
    4810:	9f 4f       	sbci	r25, 0xFF	; 255
    4812:	08 95       	ret

00004814 <__udivmodhi4>:
    4814:	aa 1b       	sub	r26, r26
    4816:	bb 1b       	sub	r27, r27
    4818:	51 e1       	ldi	r21, 0x11	; 17
    481a:	07 c0       	rjmp	.+14     	; 0x482a <__udivmodhi4_ep>

0000481c <__udivmodhi4_loop>:
    481c:	aa 1f       	adc	r26, r26
    481e:	bb 1f       	adc	r27, r27
    4820:	a6 17       	cp	r26, r22
    4822:	b7 07       	cpc	r27, r23
    4824:	10 f0       	brcs	.+4      	; 0x482a <__udivmodhi4_ep>
    4826:	a6 1b       	sub	r26, r22
    4828:	b7 0b       	sbc	r27, r23

0000482a <__udivmodhi4_ep>:
    482a:	88 1f       	adc	r24, r24
    482c:	99 1f       	adc	r25, r25
    482e:	5a 95       	dec	r21
    4830:	a9 f7       	brne	.-22     	; 0x481c <__udivmodhi4_loop>
    4832:	80 95       	com	r24
    4834:	90 95       	com	r25
    4836:	bc 01       	movw	r22, r24
    4838:	cd 01       	movw	r24, r26
    483a:	08 95       	ret

0000483c <__prologue_saves__>:
    483c:	2f 92       	push	r2
    483e:	3f 92       	push	r3
    4840:	4f 92       	push	r4
    4842:	5f 92       	push	r5
    4844:	6f 92       	push	r6
    4846:	7f 92       	push	r7
    4848:	8f 92       	push	r8
    484a:	9f 92       	push	r9
    484c:	af 92       	push	r10
    484e:	bf 92       	push	r11
    4850:	cf 92       	push	r12
    4852:	df 92       	push	r13
    4854:	ef 92       	push	r14
    4856:	ff 92       	push	r15
    4858:	0f 93       	push	r16
    485a:	1f 93       	push	r17
    485c:	cf 93       	push	r28
    485e:	df 93       	push	r29
    4860:	cd b7       	in	r28, 0x3d	; 61
    4862:	de b7       	in	r29, 0x3e	; 62
    4864:	ca 1b       	sub	r28, r26
    4866:	db 0b       	sbc	r29, r27
    4868:	0f b6       	in	r0, 0x3f	; 63
    486a:	f8 94       	cli
    486c:	de bf       	out	0x3e, r29	; 62
    486e:	0f be       	out	0x3f, r0	; 63
    4870:	cd bf       	out	0x3d, r28	; 61
    4872:	09 94       	ijmp

00004874 <__epilogue_restores__>:
    4874:	2a 88       	ldd	r2, Y+18	; 0x12
    4876:	39 88       	ldd	r3, Y+17	; 0x11
    4878:	48 88       	ldd	r4, Y+16	; 0x10
    487a:	5f 84       	ldd	r5, Y+15	; 0x0f
    487c:	6e 84       	ldd	r6, Y+14	; 0x0e
    487e:	7d 84       	ldd	r7, Y+13	; 0x0d
    4880:	8c 84       	ldd	r8, Y+12	; 0x0c
    4882:	9b 84       	ldd	r9, Y+11	; 0x0b
    4884:	aa 84       	ldd	r10, Y+10	; 0x0a
    4886:	b9 84       	ldd	r11, Y+9	; 0x09
    4888:	c8 84       	ldd	r12, Y+8	; 0x08
    488a:	df 80       	ldd	r13, Y+7	; 0x07
    488c:	ee 80       	ldd	r14, Y+6	; 0x06
    488e:	fd 80       	ldd	r15, Y+5	; 0x05
    4890:	0c 81       	ldd	r16, Y+4	; 0x04
    4892:	1b 81       	ldd	r17, Y+3	; 0x03
    4894:	aa 81       	ldd	r26, Y+2	; 0x02
    4896:	b9 81       	ldd	r27, Y+1	; 0x01
    4898:	ce 0f       	add	r28, r30
    489a:	d1 1d       	adc	r29, r1
    489c:	0f b6       	in	r0, 0x3f	; 63
    489e:	f8 94       	cli
    48a0:	de bf       	out	0x3e, r29	; 62
    48a2:	0f be       	out	0x3f, r0	; 63
    48a4:	cd bf       	out	0x3d, r28	; 61
    48a6:	ed 01       	movw	r28, r26
    48a8:	08 95       	ret

000048aa <_exit>:
    48aa:	f8 94       	cli

000048ac <__stop_program>:
    48ac:	ff cf       	rjmp	.-2      	; 0x48ac <__stop_program>
